
MDC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007904  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08007a8c  08007a8c  00008a8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b08  08007b08  00009068  2**0
                  CONTENTS
  4 .ARM          00000000  08007b08  08007b08  00009068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007b08  08007b08  00009068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b08  08007b08  00008b08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007b0c  08007b0c  00008b0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08007b10  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00009068  2**0
                  CONTENTS
 10 .bss          000004f4  20000068  20000068  00009068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000055c  2000055c  00009068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00009068  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001344e  00000000  00000000  00009098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002875  00000000  00000000  0001c4e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011b0  00000000  00000000  0001ed60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000dc9  00000000  00000000  0001ff10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d604  00000000  00000000  00020cd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000153f3  00000000  00000000  0003e2dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ac0ef  00000000  00000000  000536d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000ff7bf  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000518c  00000000  00000000  000ff804  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005b  00000000  00000000  00104990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000068 	.word	0x20000068
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007a74 	.word	0x08007a74

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000006c 	.word	0x2000006c
 80001c4:	08007a74 	.word	0x08007a74

080001c8 <powerCommandSerialize>:

#include <string.h>

#include "can_data.h"

void powerCommandSerialize(PowerCommand* data, uint8_t* buffer){
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	6039      	str	r1, [r7, #0]
	*buffer =  (uint8_t)(data->motor_output) + ((uint8_t)data->power_off << 1);
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	781b      	ldrb	r3, [r3, #0]
 80001d6:	461a      	mov	r2, r3
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	785b      	ldrb	r3, [r3, #1]
 80001dc:	005b      	lsls	r3, r3, #1
 80001de:	b2db      	uxtb	r3, r3
 80001e0:	4413      	add	r3, r2
 80001e2:	b2da      	uxtb	r2, r3
 80001e4:	683b      	ldr	r3, [r7, #0]
 80001e6:	701a      	strb	r2, [r3, #0]
}
 80001e8:	bf00      	nop
 80001ea:	370c      	adds	r7, #12
 80001ec:	46bd      	mov	sp, r7
 80001ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f2:	4770      	bx	lr

080001f4 <powerResultDeserialize>:
	length += sizeof(uint16_t);
	tmp = calculateChecksum(buffer,length);
	memcpy(buffer+length,&tmp,sizeof(uint8_t));
}

bool powerResultDeserialize(PowerResult* data, uint8_t* buffer, uint8_t length){
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b086      	sub	sp, #24
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	60f8      	str	r0, [r7, #12]
 80001fc:	60b9      	str	r1, [r7, #8]
 80001fe:	4613      	mov	r3, r2
 8000200:	71fb      	strb	r3, [r7, #7]
	bool is_ok = (calculateChecksum(buffer,length - 1) == *(buffer+length));
 8000202:	79fb      	ldrb	r3, [r7, #7]
 8000204:	3b01      	subs	r3, #1
 8000206:	b2db      	uxtb	r3, r3
 8000208:	4619      	mov	r1, r3
 800020a:	68b8      	ldr	r0, [r7, #8]
 800020c:	f000 f831 	bl	8000272 <calculateChecksum>
 8000210:	4603      	mov	r3, r0
 8000212:	4619      	mov	r1, r3
 8000214:	79fb      	ldrb	r3, [r7, #7]
 8000216:	68ba      	ldr	r2, [r7, #8]
 8000218:	4413      	add	r3, r2
 800021a:	781b      	ldrb	r3, [r3, #0]
 800021c:	4299      	cmp	r1, r3
 800021e:	bf0c      	ite	eq
 8000220:	2301      	moveq	r3, #1
 8000222:	2300      	movne	r3, #0
 8000224:	75fb      	strb	r3, [r7, #23]
	if(is_ok){
 8000226:	7dfb      	ldrb	r3, [r7, #23]
 8000228:	2b00      	cmp	r3, #0
 800022a:	d01d      	beq.n	8000268 <powerResultDeserialize+0x74>
		data->is_motor_output = (buffer[0] & 0x01) == 0x01;
 800022c:	68bb      	ldr	r3, [r7, #8]
 800022e:	781b      	ldrb	r3, [r3, #0]
 8000230:	f003 0301 	and.w	r3, r3, #1
 8000234:	2b00      	cmp	r3, #0
 8000236:	bf14      	ite	ne
 8000238:	2301      	movne	r3, #1
 800023a:	2300      	moveq	r3, #0
 800023c:	b2da      	uxtb	r2, r3
 800023e:	68fb      	ldr	r3, [r7, #12]
 8000240:	701a      	strb	r2, [r3, #0]
		data->is_not_emergency = (buffer[0] & 0x02) == 0x02;
 8000242:	68bb      	ldr	r3, [r7, #8]
 8000244:	781b      	ldrb	r3, [r3, #0]
 8000246:	f003 0302 	and.w	r3, r3, #2
 800024a:	2b00      	cmp	r3, #0
 800024c:	bf14      	ite	ne
 800024e:	2301      	movne	r3, #1
 8000250:	2300      	moveq	r3, #0
 8000252:	b2da      	uxtb	r2, r3
 8000254:	68fb      	ldr	r3, [r7, #12]
 8000256:	705a      	strb	r2, [r3, #1]
		data->v_bat = buffer[1];
 8000258:	68bb      	ldr	r3, [r7, #8]
 800025a:	785a      	ldrb	r2, [r3, #1]
 800025c:	68fb      	ldr	r3, [r7, #12]
 800025e:	709a      	strb	r2, [r3, #2]
		data->i_bat = buffer[2];
 8000260:	68bb      	ldr	r3, [r7, #8]
 8000262:	789a      	ldrb	r2, [r3, #2]
 8000264:	68fb      	ldr	r3, [r7, #12]
 8000266:	70da      	strb	r2, [r3, #3]
	}

	return is_ok;
 8000268:	7dfb      	ldrb	r3, [r7, #23]
}
 800026a:	4618      	mov	r0, r3
 800026c:	3718      	adds	r7, #24
 800026e:	46bd      	mov	sp, r7
 8000270:	bd80      	pop	{r7, pc}

08000272 <calculateChecksum>:

// チェックサムを計算する関数
uint8_t calculateChecksum(uint8_t* data, uint8_t length) {
 8000272:	b480      	push	{r7}
 8000274:	b085      	sub	sp, #20
 8000276:	af00      	add	r7, sp, #0
 8000278:	6078      	str	r0, [r7, #4]
 800027a:	460b      	mov	r3, r1
 800027c:	70fb      	strb	r3, [r7, #3]
	int sum = 0;
 800027e:	2300      	movs	r3, #0
 8000280:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < length; i++) {
 8000282:	2300      	movs	r3, #0
 8000284:	72fb      	strb	r3, [r7, #11]
 8000286:	e00a      	b.n	800029e <calculateChecksum+0x2c>
			sum += data[i];
 8000288:	7afb      	ldrb	r3, [r7, #11]
 800028a:	687a      	ldr	r2, [r7, #4]
 800028c:	4413      	add	r3, r2
 800028e:	781b      	ldrb	r3, [r3, #0]
 8000290:	461a      	mov	r2, r3
 8000292:	68fb      	ldr	r3, [r7, #12]
 8000294:	4413      	add	r3, r2
 8000296:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < length; i++) {
 8000298:	7afb      	ldrb	r3, [r7, #11]
 800029a:	3301      	adds	r3, #1
 800029c:	72fb      	strb	r3, [r7, #11]
 800029e:	7afa      	ldrb	r2, [r7, #11]
 80002a0:	78fb      	ldrb	r3, [r7, #3]
 80002a2:	429a      	cmp	r2, r3
 80002a4:	d3f0      	bcc.n	8000288 <calculateChecksum+0x16>
	}
	// 合計の下位バイトを返す
	return (uint8_t)(sum & 0xFF);
 80002a6:	68fb      	ldr	r3, [r7, #12]
 80002a8:	b2db      	uxtb	r3, r3
}
 80002aa:	4618      	mov	r0, r3
 80002ac:	3714      	adds	r7, #20
 80002ae:	46bd      	mov	sp, r7
 80002b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b4:	4770      	bx	lr
	...

080002b8 <spiInit>:

static SPI_HandleTypeDef* g_hspi;

static bool g_spi_updated = false;

void spiInit(SPI_HandleTypeDef *hspi){
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b082      	sub	sp, #8
 80002bc:	af00      	add	r7, sp, #0
 80002be:	6078      	str	r0, [r7, #4]
	g_hspi = hspi;
 80002c0:	4a06      	ldr	r2, [pc, #24]	@ (80002dc <spiInit+0x24>)
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	6013      	str	r3, [r2, #0]
	HAL_SPI_TransmitReceive_DMA(hspi, g_spi_tx_data, g_spi_rx_data, sizeof(g_spi_rx_data));
 80002c6:	230d      	movs	r3, #13
 80002c8:	4a05      	ldr	r2, [pc, #20]	@ (80002e0 <spiInit+0x28>)
 80002ca:	4906      	ldr	r1, [pc, #24]	@ (80002e4 <spiInit+0x2c>)
 80002cc:	6878      	ldr	r0, [r7, #4]
 80002ce:	f004 fc3b 	bl	8004b48 <HAL_SPI_TransmitReceive_DMA>
}
 80002d2:	bf00      	nop
 80002d4:	3708      	adds	r7, #8
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bd80      	pop	{r7, pc}
 80002da:	bf00      	nop
 80002dc:	2000009c 	.word	0x2000009c
 80002e0:	2000008c 	.word	0x2000008c
 80002e4:	20000084 	.word	0x20000084

080002e8 <getSpiData>:

void getSpiData(Command* cmd){
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b082      	sub	sp, #8
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
	commandSerialize(cmd, g_spi_rx_data);
 80002f0:	4903      	ldr	r1, [pc, #12]	@ (8000300 <getSpiData+0x18>)
 80002f2:	6878      	ldr	r0, [r7, #4]
 80002f4:	f000 ff4c 	bl	8001190 <commandSerialize>
}
 80002f8:	bf00      	nop
 80002fa:	3708      	adds	r7, #8
 80002fc:	46bd      	mov	sp, r7
 80002fe:	bd80      	pop	{r7, pc}
 8000300:	2000008c 	.word	0x2000008c

08000304 <setSpiData>:

void setSpiData(Result* res){
 8000304:	b580      	push	{r7, lr}
 8000306:	b082      	sub	sp, #8
 8000308:	af00      	add	r7, sp, #0
 800030a:	6078      	str	r0, [r7, #4]
	resultDeserialize(res, g_spi_tx_data, sizeof(g_spi_tx_data));
 800030c:	2207      	movs	r2, #7
 800030e:	4904      	ldr	r1, [pc, #16]	@ (8000320 <setSpiData+0x1c>)
 8000310:	6878      	ldr	r0, [r7, #4]
 8000312:	f000 ff92 	bl	800123a <resultDeserialize>
}
 8000316:	bf00      	nop
 8000318:	3708      	adds	r7, #8
 800031a:	46bd      	mov	sp, r7
 800031c:	bd80      	pop	{r7, pc}
 800031e:	bf00      	nop
 8000320:	20000084 	.word	0x20000084

08000324 <isSpiUpdated>:

bool isSpiUpdated(){
 8000324:	b480      	push	{r7}
 8000326:	af00      	add	r7, sp, #0
	if(g_spi_updated) {
 8000328:	4b07      	ldr	r3, [pc, #28]	@ (8000348 <isSpiUpdated+0x24>)
 800032a:	781b      	ldrb	r3, [r3, #0]
 800032c:	2b00      	cmp	r3, #0
 800032e:	d004      	beq.n	800033a <isSpiUpdated+0x16>
		g_spi_updated = false;
 8000330:	4b05      	ldr	r3, [pc, #20]	@ (8000348 <isSpiUpdated+0x24>)
 8000332:	2200      	movs	r2, #0
 8000334:	701a      	strb	r2, [r3, #0]
		return true;
 8000336:	2301      	movs	r3, #1
 8000338:	e000      	b.n	800033c <isSpiUpdated+0x18>
	}
	else {
		return false;
 800033a:	2300      	movs	r3, #0
	}

}
 800033c:	4618      	mov	r0, r3
 800033e:	46bd      	mov	sp, r7
 8000340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000344:	4770      	bx	lr
 8000346:	bf00      	nop
 8000348:	200000a0 	.word	0x200000a0

0800034c <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi){
 800034c:	b580      	push	{r7, lr}
 800034e:	b082      	sub	sp, #8
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
	g_spi_updated = true;
 8000354:	4b05      	ldr	r3, [pc, #20]	@ (800036c <HAL_SPI_TxRxCpltCallback+0x20>)
 8000356:	2201      	movs	r2, #1
 8000358:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit_DMA(hspi, g_spi_tx_data, sizeof(g_spi_tx_data));
 800035a:	2207      	movs	r2, #7
 800035c:	4904      	ldr	r1, [pc, #16]	@ (8000370 <HAL_SPI_TxRxCpltCallback+0x24>)
 800035e:	6878      	ldr	r0, [r7, #4]
 8000360:	f004 fb02 	bl	8004968 <HAL_SPI_Transmit_DMA>
}
 8000364:	bf00      	nop
 8000366:	3708      	adds	r7, #8
 8000368:	46bd      	mov	sp, r7
 800036a:	bd80      	pop	{r7, pc}
 800036c:	200000a0 	.word	0x200000a0
 8000370:	20000084 	.word	0x20000084

08000374 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi){
 8000374:	b580      	push	{r7, lr}
 8000376:	b086      	sub	sp, #24
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
	g_spi_updated = true;
 800037c:	4b0a      	ldr	r3, [pc, #40]	@ (80003a8 <HAL_SPI_TxCpltCallback+0x34>)
 800037e:	2201      	movs	r2, #1
 8000380:	701a      	strb	r2, [r3, #0]
	uint8_t tx_buffer[SPI_RX_SIZE] = {0};
 8000382:	2300      	movs	r3, #0
 8000384:	60bb      	str	r3, [r7, #8]
 8000386:	f107 030c 	add.w	r3, r7, #12
 800038a:	2200      	movs	r2, #0
 800038c:	601a      	str	r2, [r3, #0]
 800038e:	605a      	str	r2, [r3, #4]
 8000390:	721a      	strb	r2, [r3, #8]
	HAL_SPI_TransmitReceive_DMA(hspi, tx_buffer, g_spi_rx_data, sizeof(g_spi_rx_data));
 8000392:	f107 0108 	add.w	r1, r7, #8
 8000396:	230d      	movs	r3, #13
 8000398:	4a04      	ldr	r2, [pc, #16]	@ (80003ac <HAL_SPI_TxCpltCallback+0x38>)
 800039a:	6878      	ldr	r0, [r7, #4]
 800039c:	f004 fbd4 	bl	8004b48 <HAL_SPI_TransmitReceive_DMA>
}
 80003a0:	bf00      	nop
 80003a2:	3718      	adds	r7, #24
 80003a4:	46bd      	mov	sp, r7
 80003a6:	bd80      	pop	{r7, pc}
 80003a8:	200000a0 	.word	0x200000a0
 80003ac:	2000008c 	.word	0x2000008c

080003b0 <canInit>:

static CAN_FilterTypeDef g_filter;

static bool g_power_updated = false;

void canInit(CAN_HandleTypeDef *hcan){
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b082      	sub	sp, #8
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
	g_hcan = hcan;
 80003b8:	4a17      	ldr	r2, [pc, #92]	@ (8000418 <canInit+0x68>)
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	6013      	str	r3, [r2, #0]

	g_filter.FilterIdHigh         = 0;                        // フィルターID(上位16ビット)
 80003be:	4b17      	ldr	r3, [pc, #92]	@ (800041c <canInit+0x6c>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	601a      	str	r2, [r3, #0]
	g_filter.FilterIdLow          = 0;                        // フィルターID(下位16ビット)
 80003c4:	4b15      	ldr	r3, [pc, #84]	@ (800041c <canInit+0x6c>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	605a      	str	r2, [r3, #4]
	g_filter.FilterMaskIdHigh     = 0;                        // フィルターマスク(上位16ビット)
 80003ca:	4b14      	ldr	r3, [pc, #80]	@ (800041c <canInit+0x6c>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	609a      	str	r2, [r3, #8]
	g_filter.FilterMaskIdLow      = 0;                        // フィルターマスク(下位16ビット)
 80003d0:	4b12      	ldr	r3, [pc, #72]	@ (800041c <canInit+0x6c>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	60da      	str	r2, [r3, #12]
	g_filter.FilterScale          = CAN_FILTERSCALE_32BIT;    // フィルタースケール
 80003d6:	4b11      	ldr	r3, [pc, #68]	@ (800041c <canInit+0x6c>)
 80003d8:	2201      	movs	r2, #1
 80003da:	61da      	str	r2, [r3, #28]
	g_filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;         // フィルターに割り当てるFIFO
 80003dc:	4b0f      	ldr	r3, [pc, #60]	@ (800041c <canInit+0x6c>)
 80003de:	2200      	movs	r2, #0
 80003e0:	611a      	str	r2, [r3, #16]
	g_filter.FilterBank           = 0;                        // フィルターバンクNo
 80003e2:	4b0e      	ldr	r3, [pc, #56]	@ (800041c <canInit+0x6c>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	615a      	str	r2, [r3, #20]
	g_filter.FilterMode           = CAN_FILTERMODE_IDMASK;    // フィルターモード
 80003e8:	4b0c      	ldr	r3, [pc, #48]	@ (800041c <canInit+0x6c>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	619a      	str	r2, [r3, #24]
	g_filter.SlaveStartFilterBank = 14;                       // スレーブCANの開始フィルターバンクNo
 80003ee:	4b0b      	ldr	r3, [pc, #44]	@ (800041c <canInit+0x6c>)
 80003f0:	220e      	movs	r2, #14
 80003f2:	625a      	str	r2, [r3, #36]	@ 0x24
	g_filter.FilterActivation     = ENABLE;                   // フィルター無効／有効
 80003f4:	4b09      	ldr	r3, [pc, #36]	@ (800041c <canInit+0x6c>)
 80003f6:	2201      	movs	r2, #1
 80003f8:	621a      	str	r2, [r3, #32]
	HAL_CAN_Start(hcan);
 80003fa:	6878      	ldr	r0, [r7, #4]
 80003fc:	f001 fd99 	bl	8001f32 <HAL_CAN_Start>
	HAL_CAN_ConfigFilter(hcan, &g_filter);
 8000400:	4906      	ldr	r1, [pc, #24]	@ (800041c <canInit+0x6c>)
 8000402:	6878      	ldr	r0, [r7, #4]
 8000404:	f001 fccb 	bl	8001d9e <HAL_CAN_ConfigFilter>
	HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000408:	2102      	movs	r1, #2
 800040a:	6878      	ldr	r0, [r7, #4]
 800040c:	f001 fffc 	bl	8002408 <HAL_CAN_ActivateNotification>
}
 8000410:	bf00      	nop
 8000412:	3708      	adds	r7, #8
 8000414:	46bd      	mov	sp, r7
 8000416:	bd80      	pop	{r7, pc}
 8000418:	200000ac 	.word	0x200000ac
 800041c:	200000b0 	.word	0x200000b0

08000420 <getPowerCanData>:

void getPowerCanData(PowerResult* res){
 8000420:	b580      	push	{r7, lr}
 8000422:	b082      	sub	sp, #8
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
	powerResultDeserialize(res, g_power_rx_data, sizeof(g_power_rx_data));
 8000428:	2204      	movs	r2, #4
 800042a:	4904      	ldr	r1, [pc, #16]	@ (800043c <getPowerCanData+0x1c>)
 800042c:	6878      	ldr	r0, [r7, #4]
 800042e:	f7ff fee1 	bl	80001f4 <powerResultDeserialize>
}
 8000432:	bf00      	nop
 8000434:	3708      	adds	r7, #8
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}
 800043a:	bf00      	nop
 800043c:	200000a8 	.word	0x200000a8

08000440 <setPowerCanData>:

void setPowerCanData(PowerCommand* cmd){
 8000440:	b580      	push	{r7, lr}
 8000442:	b082      	sub	sp, #8
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
	powerCommandSerialize(cmd, g_power_tx_data);
 8000448:	4903      	ldr	r1, [pc, #12]	@ (8000458 <setPowerCanData+0x18>)
 800044a:	6878      	ldr	r0, [r7, #4]
 800044c:	f7ff febc 	bl	80001c8 <powerCommandSerialize>
}
 8000450:	bf00      	nop
 8000452:	3708      	adds	r7, #8
 8000454:	46bd      	mov	sp, r7
 8000456:	bd80      	pop	{r7, pc}
 8000458:	200000a4 	.word	0x200000a4

0800045c <isPowerUpdated>:

bool isPowerUpdated(){
 800045c:	b480      	push	{r7}
 800045e:	af00      	add	r7, sp, #0
	if(g_power_updated) {
 8000460:	4b07      	ldr	r3, [pc, #28]	@ (8000480 <isPowerUpdated+0x24>)
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	2b00      	cmp	r3, #0
 8000466:	d004      	beq.n	8000472 <isPowerUpdated+0x16>
		g_power_updated = false;
 8000468:	4b05      	ldr	r3, [pc, #20]	@ (8000480 <isPowerUpdated+0x24>)
 800046a:	2200      	movs	r2, #0
 800046c:	701a      	strb	r2, [r3, #0]
		return true;
 800046e:	2301      	movs	r3, #1
 8000470:	e000      	b.n	8000474 <isPowerUpdated+0x18>
	}
	else {
		return false;
 8000472:	2300      	movs	r3, #0
	}
}
 8000474:	4618      	mov	r0, r3
 8000476:	46bd      	mov	sp, r7
 8000478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047c:	4770      	bx	lr
 800047e:	bf00      	nop
 8000480:	200000d8 	.word	0x200000d8

08000484 <sendPowerCanData>:

void sendPowerCanData(){
 8000484:	b580      	push	{r7, lr}
 8000486:	b088      	sub	sp, #32
 8000488:	af00      	add	r7, sp, #0
	CAN_TxHeaderTypeDef TxHeader;
	uint32_t TxMailbox;
	uint8_t data[POWER_CAN_TX_SIZE];
	if(0 < HAL_CAN_GetTxMailboxesFreeLevel(g_hcan)){
 800048a:	4b11      	ldr	r3, [pc, #68]	@ (80004d0 <sendPowerCanData+0x4c>)
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	4618      	mov	r0, r3
 8000490:	f001 fe63 	bl	800215a <HAL_CAN_GetTxMailboxesFreeLevel>
 8000494:	4603      	mov	r3, r0
 8000496:	2b00      	cmp	r3, #0
 8000498:	d015      	beq.n	80004c6 <sendPowerCanData+0x42>
	    TxHeader.StdId = POWER_CAN_ID;                 // CAN ID
 800049a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800049e:	60bb      	str	r3, [r7, #8]
	    TxHeader.RTR = CAN_RTR_DATA;            // フレームタイプはデータフレーム
 80004a0:	2300      	movs	r3, #0
 80004a2:	617b      	str	r3, [r7, #20]
	    TxHeader.IDE = CAN_ID_STD;              // 標準ID(11ﾋﾞｯﾄ)
 80004a4:	2300      	movs	r3, #0
 80004a6:	613b      	str	r3, [r7, #16]
	    TxHeader.DLC = 8;                       // データ長は8バイトに
 80004a8:	2308      	movs	r3, #8
 80004aa:	61bb      	str	r3, [r7, #24]
	    TxHeader.TransmitGlobalTime = DISABLE;  // ???
 80004ac:	2300      	movs	r3, #0
 80004ae:	773b      	strb	r3, [r7, #28]
	    memcpy(data,g_power_tx_data,sizeof(g_power_tx_data));
 80004b0:	4b08      	ldr	r3, [pc, #32]	@ (80004d4 <sendPowerCanData+0x50>)
 80004b2:	881b      	ldrh	r3, [r3, #0]
 80004b4:	803b      	strh	r3, [r7, #0]
	    HAL_CAN_AddTxMessage(g_hcan, &TxHeader, data, &TxMailbox);
 80004b6:	4b06      	ldr	r3, [pc, #24]	@ (80004d0 <sendPowerCanData+0x4c>)
 80004b8:	6818      	ldr	r0, [r3, #0]
 80004ba:	1d3b      	adds	r3, r7, #4
 80004bc:	463a      	mov	r2, r7
 80004be:	f107 0108 	add.w	r1, r7, #8
 80004c2:	f001 fd7a 	bl	8001fba <HAL_CAN_AddTxMessage>
	}
}
 80004c6:	bf00      	nop
 80004c8:	3720      	adds	r7, #32
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	bf00      	nop
 80004d0:	200000ac 	.word	0x200000ac
 80004d4:	200000a4 	.word	0x200000a4

080004d8 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b08c      	sub	sp, #48	@ 0x30
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
    CAN_RxHeaderTypeDef RxHeader;
    uint8_t data[POWER_CAN_RX_SIZE];
    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, data) == HAL_OK)
 80004e0:	f107 030c 	add.w	r3, r7, #12
 80004e4:	f107 0210 	add.w	r2, r7, #16
 80004e8:	2100      	movs	r1, #0
 80004ea:	6878      	ldr	r0, [r7, #4]
 80004ec:	f001 fe6a 	bl	80021c4 <HAL_CAN_GetRxMessage>
 80004f0:	4603      	mov	r3, r0
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d10b      	bne.n	800050e <HAL_CAN_RxFifo0MsgPendingCallback+0x36>
    {
        uint32_t id = RxHeader.StdId;
 80004f6:	693b      	ldr	r3, [r7, #16]
 80004f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        if(id == POWER_CAN_ID){
 80004fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80004fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000500:	d105      	bne.n	800050e <HAL_CAN_RxFifo0MsgPendingCallback+0x36>
        	g_power_updated = true;
 8000502:	4b05      	ldr	r3, [pc, #20]	@ (8000518 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 8000504:	2201      	movs	r2, #1
 8000506:	701a      	strb	r2, [r3, #0]
        	memcpy(g_power_rx_data,data,sizeof(g_power_rx_data));
 8000508:	68fb      	ldr	r3, [r7, #12]
 800050a:	4a04      	ldr	r2, [pc, #16]	@ (800051c <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 800050c:	6013      	str	r3, [r2, #0]
        }
    }
}
 800050e:	bf00      	nop
 8000510:	3730      	adds	r7, #48	@ 0x30
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	200000d8 	.word	0x200000d8
 800051c:	200000a8 	.word	0x200000a8

08000520 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN 0 */
bool g_main_loop_flag;
bool g_control;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
	if(htim == &htim6)
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	4a21      	ldr	r2, [pc, #132]	@ (80005b0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800052c:	4293      	cmp	r3, r2
 800052e:	d134      	bne.n	800059a <HAL_TIM_PeriodElapsedCallback+0x7a>
	{
		static size_t spi_timeout_cnt=0;
		if(isSpiUpdated()) spi_timeout_cnt = 0;
 8000530:	f7ff fef8 	bl	8000324 <isSpiUpdated>
 8000534:	4603      	mov	r3, r0
 8000536:	2b00      	cmp	r3, #0
 8000538:	d002      	beq.n	8000540 <HAL_TIM_PeriodElapsedCallback+0x20>
 800053a:	4b1e      	ldr	r3, [pc, #120]	@ (80005b4 <HAL_TIM_PeriodElapsedCallback+0x94>)
 800053c:	2200      	movs	r2, #0
 800053e:	601a      	str	r2, [r3, #0]
		if(spi_timeout_cnt++ >= 5) {
 8000540:	4b1c      	ldr	r3, [pc, #112]	@ (80005b4 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	1c5a      	adds	r2, r3, #1
 8000546:	491b      	ldr	r1, [pc, #108]	@ (80005b4 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000548:	600a      	str	r2, [r1, #0]
 800054a:	2b04      	cmp	r3, #4
 800054c:	d905      	bls.n	800055a <HAL_TIM_PeriodElapsedCallback+0x3a>
			g_control = false;
 800054e:	4b1a      	ldr	r3, [pc, #104]	@ (80005b8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000550:	2200      	movs	r2, #0
 8000552:	701a      	strb	r2, [r3, #0]
			printf("SPI TIMEOUT ERROR\r\n");
 8000554:	4819      	ldr	r0, [pc, #100]	@ (80005bc <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000556:	f006 fea3 	bl	80072a0 <puts>
		}
		static size_t power_timeout_cnt=0;
		if(isPowerUpdated()) power_timeout_cnt = 0;
 800055a:	f7ff ff7f 	bl	800045c <isPowerUpdated>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	d002      	beq.n	800056a <HAL_TIM_PeriodElapsedCallback+0x4a>
 8000564:	4b16      	ldr	r3, [pc, #88]	@ (80005c0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000566:	2200      	movs	r2, #0
 8000568:	601a      	str	r2, [r3, #0]
		if(power_timeout_cnt++ >= 5) {
 800056a:	4b15      	ldr	r3, [pc, #84]	@ (80005c0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	1c5a      	adds	r2, r3, #1
 8000570:	4913      	ldr	r1, [pc, #76]	@ (80005c0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000572:	600a      	str	r2, [r1, #0]
 8000574:	2b04      	cmp	r3, #4
 8000576:	d905      	bls.n	8000584 <HAL_TIM_PeriodElapsedCallback+0x64>
			g_control = false;
 8000578:	4b0f      	ldr	r3, [pc, #60]	@ (80005b8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 800057a:	2200      	movs	r2, #0
 800057c:	701a      	strb	r2, [r3, #0]
			printf("POWER TIMEOUT ERROR\r\n");
 800057e:	4811      	ldr	r0, [pc, #68]	@ (80005c4 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000580:	f006 fe8e 	bl	80072a0 <puts>
		}
		if(g_main_loop_flag){
 8000584:	4b10      	ldr	r3, [pc, #64]	@ (80005c8 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	2b00      	cmp	r3, #0
 800058a:	d003      	beq.n	8000594 <HAL_TIM_PeriodElapsedCallback+0x74>
			printf("Control cycle is slow\r\n");
 800058c:	480f      	ldr	r0, [pc, #60]	@ (80005cc <HAL_TIM_PeriodElapsedCallback+0xac>)
 800058e:	f006 fe87 	bl	80072a0 <puts>
 8000592:	e002      	b.n	800059a <HAL_TIM_PeriodElapsedCallback+0x7a>
		}
		else{
			g_main_loop_flag = true;
 8000594:	4b0c      	ldr	r3, [pc, #48]	@ (80005c8 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000596:	2201      	movs	r2, #1
 8000598:	701a      	strb	r2, [r3, #0]
		}
	}
	if(htim == &htim7){
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	4a0c      	ldr	r2, [pc, #48]	@ (80005d0 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800059e:	4293      	cmp	r3, r2
 80005a0:	d101      	bne.n	80005a6 <HAL_TIM_PeriodElapsedCallback+0x86>
		sendPowerCanData();
 80005a2:	f7ff ff6f 	bl	8000484 <sendPowerCanData>
	}

}
 80005a6:	bf00      	nop
 80005a8:	3708      	adds	r7, #8
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	200002d4 	.word	0x200002d4
 80005b4:	200003f8 	.word	0x200003f8
 80005b8:	200003f5 	.word	0x200003f5
 80005bc:	08007a8c 	.word	0x08007a8c
 80005c0:	200003fc 	.word	0x200003fc
 80005c4:	08007aa0 	.word	0x08007aa0
 80005c8:	200003f4 	.word	0x200003f4
 80005cc:	08007ab8 	.word	0x08007ab8
 80005d0:	20000320 	.word	0x20000320

080005d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b096      	sub	sp, #88	@ 0x58
 80005d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005da:	f001 fa5b 	bl	8001a94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005de:	f000 fa77 	bl	8000ad0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e2:	f000 fd3f 	bl	8001064 <MX_GPIO_Init>
  MX_DMA_Init();
 80005e6:	f000 fd17 	bl	8001018 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80005ea:	f000 fce5 	bl	8000fb8 <MX_USART2_UART_Init>
  MX_CAN_Init();
 80005ee:	f000 fac3 	bl	8000b78 <MX_CAN_Init>
  MX_SPI1_Init();
 80005f2:	f000 faf7 	bl	8000be4 <MX_SPI1_Init>
  MX_TIM1_Init();
 80005f6:	f000 fb2d 	bl	8000c54 <MX_TIM1_Init>
  MX_TIM2_Init();
 80005fa:	f000 fbc7 	bl	8000d8c <MX_TIM2_Init>
  MX_TIM3_Init();
 80005fe:	f000 fc19 	bl	8000e34 <MX_TIM3_Init>
  MX_TIM6_Init();
 8000602:	f000 fc6d 	bl	8000ee0 <MX_TIM6_Init>
  MX_TIM7_Init();
 8000606:	f000 fca1 	bl	8000f4c <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
	PIController pid;
	pid.kp = 5.0f;
 800060a:	4bc1      	ldr	r3, [pc, #772]	@ (8000910 <main+0x33c>)
 800060c:	623b      	str	r3, [r7, #32]
	pid.ki = 5.0f;
 800060e:	4bc0      	ldr	r3, [pc, #768]	@ (8000910 <main+0x33c>)
 8000610:	627b      	str	r3, [r7, #36]	@ 0x24
	pid.integral_l = 0.0f;
 8000612:	f04f 0300 	mov.w	r3, #0
 8000616:	62bb      	str	r3, [r7, #40]	@ 0x28
	pid.integral_r = 0.0f;
 8000618:	f04f 0300 	mov.w	r3, #0
 800061c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	spiInit(&hspi1);
 800061e:	48bd      	ldr	r0, [pc, #756]	@ (8000914 <main+0x340>)
 8000620:	f7ff fe4a 	bl	80002b8 <spiInit>
	canInit(&hcan);
 8000624:	48bc      	ldr	r0, [pc, #752]	@ (8000918 <main+0x344>)
 8000626:	f7ff fec3 	bl	80003b0 <canInit>
	HAL_TIM_Encoder_Start( &htim2, TIM_CHANNEL_ALL );
 800062a:	213c      	movs	r1, #60	@ 0x3c
 800062c:	48bb      	ldr	r0, [pc, #748]	@ (800091c <main+0x348>)
 800062e:	f005 f9d5 	bl	80059dc <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start( &htim3, TIM_CHANNEL_ALL );
 8000632:	213c      	movs	r1, #60	@ 0x3c
 8000634:	48ba      	ldr	r0, [pc, #744]	@ (8000920 <main+0x34c>)
 8000636:	f005 f9d1 	bl	80059dc <HAL_TIM_Encoder_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800063a:	2104      	movs	r1, #4
 800063c:	48b9      	ldr	r0, [pc, #740]	@ (8000924 <main+0x350>)
 800063e:	f005 f83b 	bl	80056b8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000642:	2108      	movs	r1, #8
 8000644:	48b7      	ldr	r0, [pc, #732]	@ (8000924 <main+0x350>)
 8000646:	f005 f837 	bl	80056b8 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start_IT(&htim6);
 800064a:	48b7      	ldr	r0, [pc, #732]	@ (8000928 <main+0x354>)
 800064c:	f004 ff80 	bl	8005550 <HAL_TIM_Base_Start_IT>
	HAL_Delay(100);
 8000650:	2064      	movs	r0, #100	@ 0x64
 8000652:	f001 fa85 	bl	8001b60 <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  	//wait main_loop_flag
		while(g_main_loop_flag == false){}
 8000656:	bf00      	nop
 8000658:	4bb4      	ldr	r3, [pc, #720]	@ (800092c <main+0x358>)
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	f083 0301 	eor.w	r3, r3, #1
 8000660:	b2db      	uxtb	r3, r3
 8000662:	2b00      	cmp	r3, #0
 8000664:	d1f8      	bne.n	8000658 <main+0x84>

		//SPI
		Command command;
		getSpiData(&command);
 8000666:	f107 0314 	add.w	r3, r7, #20
 800066a:	4618      	mov	r0, r3
 800066c:	f7ff fe3c 	bl	80002e8 <getSpiData>
		//CAN
		setPowerCanData(&command.power_command);
 8000670:	f107 0314 	add.w	r3, r7, #20
 8000674:	4618      	mov	r0, r3
 8000676:	f7ff fee3 	bl	8000440 <setPowerCanData>
		//encoder
		static int last_cnt_l;
		static int last_cnt_r;
		int16_t cnt_l = TIM2->CNT;
 800067a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800067e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000680:	87bb      	strh	r3, [r7, #60]	@ 0x3c
		int16_t cnt_r = TIM3->CNT;
 8000682:	4bab      	ldr	r3, [pc, #684]	@ (8000930 <main+0x35c>)
 8000684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000686:	877b      	strh	r3, [r7, #58]	@ 0x3a
		if (last_cnt_l > 0 && cnt_l < 0 && (last_cnt_l - cnt_l) > 0)
 8000688:	4baa      	ldr	r3, [pc, #680]	@ (8000934 <main+0x360>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	2b00      	cmp	r3, #0
 800068e:	dd11      	ble.n	80006b4 <main+0xe0>
 8000690:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 8000694:	2b00      	cmp	r3, #0
 8000696:	da0d      	bge.n	80006b4 <main+0xe0>
 8000698:	4ba6      	ldr	r3, [pc, #664]	@ (8000934 <main+0x360>)
 800069a:	681a      	ldr	r2, [r3, #0]
 800069c:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 80006a0:	1ad3      	subs	r3, r2, r3
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	dd06      	ble.n	80006b4 <main+0xe0>
			last_cnt_l -= 0x10000; //オーバーフロー
 80006a6:	4ba3      	ldr	r3, [pc, #652]	@ (8000934 <main+0x360>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
 80006ae:	4aa1      	ldr	r2, [pc, #644]	@ (8000934 <main+0x360>)
 80006b0:	6013      	str	r3, [r2, #0]
 80006b2:	e014      	b.n	80006de <main+0x10a>
		else if (last_cnt_l < 0 && cnt_l > 0 && (last_cnt_l - cnt_l) < 0)
 80006b4:	4b9f      	ldr	r3, [pc, #636]	@ (8000934 <main+0x360>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	da10      	bge.n	80006de <main+0x10a>
 80006bc:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	dd0c      	ble.n	80006de <main+0x10a>
 80006c4:	4b9b      	ldr	r3, [pc, #620]	@ (8000934 <main+0x360>)
 80006c6:	681a      	ldr	r2, [r3, #0]
 80006c8:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 80006cc:	1ad3      	subs	r3, r2, r3
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	da05      	bge.n	80006de <main+0x10a>
			last_cnt_l += 0x10000; //アンダーフロー
 80006d2:	4b98      	ldr	r3, [pc, #608]	@ (8000934 <main+0x360>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80006da:	4a96      	ldr	r2, [pc, #600]	@ (8000934 <main+0x360>)
 80006dc:	6013      	str	r3, [r2, #0]
		if (last_cnt_r > 0 && cnt_r < 0 && (last_cnt_r - cnt_r) > 0)
 80006de:	4b96      	ldr	r3, [pc, #600]	@ (8000938 <main+0x364>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	dd11      	ble.n	800070a <main+0x136>
 80006e6:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	da0d      	bge.n	800070a <main+0x136>
 80006ee:	4b92      	ldr	r3, [pc, #584]	@ (8000938 <main+0x364>)
 80006f0:	681a      	ldr	r2, [r3, #0]
 80006f2:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 80006f6:	1ad3      	subs	r3, r2, r3
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	dd06      	ble.n	800070a <main+0x136>
			last_cnt_r -= 0x10000; //オーバーフロー
 80006fc:	4b8e      	ldr	r3, [pc, #568]	@ (8000938 <main+0x364>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
 8000704:	4a8c      	ldr	r2, [pc, #560]	@ (8000938 <main+0x364>)
 8000706:	6013      	str	r3, [r2, #0]
 8000708:	e014      	b.n	8000734 <main+0x160>
		else if (last_cnt_r < 0 && cnt_r > 0 && (last_cnt_r - cnt_r) < 0)
 800070a:	4b8b      	ldr	r3, [pc, #556]	@ (8000938 <main+0x364>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	2b00      	cmp	r3, #0
 8000710:	da10      	bge.n	8000734 <main+0x160>
 8000712:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 8000716:	2b00      	cmp	r3, #0
 8000718:	dd0c      	ble.n	8000734 <main+0x160>
 800071a:	4b87      	ldr	r3, [pc, #540]	@ (8000938 <main+0x364>)
 800071c:	681a      	ldr	r2, [r3, #0]
 800071e:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 8000722:	1ad3      	subs	r3, r2, r3
 8000724:	2b00      	cmp	r3, #0
 8000726:	da05      	bge.n	8000734 <main+0x160>
			last_cnt_r += 0x10000; //アンダーフロー
 8000728:	4b83      	ldr	r3, [pc, #524]	@ (8000938 <main+0x364>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8000730:	4a81      	ldr	r2, [pc, #516]	@ (8000938 <main+0x364>)
 8000732:	6013      	str	r3, [r2, #0]
		HAL_TIM_Encoder_Start( &htim2, TIM_CHANNEL_ALL );
 8000734:	213c      	movs	r1, #60	@ 0x3c
 8000736:	4879      	ldr	r0, [pc, #484]	@ (800091c <main+0x348>)
 8000738:	f005 f950 	bl	80059dc <HAL_TIM_Encoder_Start>
		HAL_TIM_Encoder_Start( &htim3, TIM_CHANNEL_ALL );
 800073c:	213c      	movs	r1, #60	@ 0x3c
 800073e:	4878      	ldr	r0, [pc, #480]	@ (8000920 <main+0x34c>)
 8000740:	f005 f94c 	bl	80059dc <HAL_TIM_Encoder_Start>
		float vel_l = ((float) ((int) cnt_l) * ENC_TO_TIRE * RATE) / RESOLUTION;
 8000744:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 8000748:	ee07 3a90 	vmov	s15, r3
 800074c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000750:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 800093c <main+0x368>
 8000754:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000758:	eddf 7a79 	vldr	s15, [pc, #484]	@ 8000940 <main+0x36c>
 800075c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000760:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000764:	eddf 7a77 	vldr	s15, [pc, #476]	@ 8000944 <main+0x370>
 8000768:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800076c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000770:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		float vel_r = ((float) ((int) cnt_r) * ENC_TO_TIRE * RATE) / RESOLUTION;
 8000774:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 8000778:	ee07 3a90 	vmov	s15, r3
 800077c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000780:	ed9f 7a6e 	vldr	s14, [pc, #440]	@ 800093c <main+0x368>
 8000784:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000788:	eddf 7a6d 	vldr	s15, [pc, #436]	@ 8000940 <main+0x36c>
 800078c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000790:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000794:	eddf 7a6b 	vldr	s15, [pc, #428]	@ 8000944 <main+0x370>
 8000798:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800079c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80007a0:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

		//PI control
		float volt_l;
		float volt_r;
		if (g_control) {
 80007a4:	4b68      	ldr	r3, [pc, #416]	@ (8000948 <main+0x374>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	f000 80fc 	beq.w	80009a6 <main+0x3d2>
			float e_l = command.vel_l - vel_l;
 80007ae:	ed97 7a06 	vldr	s14, [r7, #24]
 80007b2:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80007b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80007ba:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
			float e_r = command.vel_r - vel_r;
 80007be:	ed97 7a07 	vldr	s14, [r7, #28]
 80007c2:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80007c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80007ca:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
			if(fabsf(e_l)>10.0f) e_l = 0;
 80007ce:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 80007d2:	eef0 7ae7 	vabs.f32	s15, s15
 80007d6:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80007da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80007de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007e2:	dd02      	ble.n	80007ea <main+0x216>
 80007e4:	f04f 0300 	mov.w	r3, #0
 80007e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
			if(fabsf(e_r)>10.0f) e_r = 0;
 80007ea:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 80007ee:	eef0 7ae7 	vabs.f32	s15, s15
 80007f2:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80007f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80007fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007fe:	dd02      	ble.n	8000806 <main+0x232>
 8000800:	f04f 0300 	mov.w	r3, #0
 8000804:	64bb      	str	r3, [r7, #72]	@ 0x48
			pid.integral_l += e_l * DT;
 8000806:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800080a:	eddf 6a50 	vldr	s13, [pc, #320]	@ 800094c <main+0x378>
 800080e:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8000812:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000816:	ee77 7a27 	vadd.f32	s15, s14, s15
 800081a:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
			pid.integral_r += e_r * DT;
 800081e:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8000822:	eddf 6a4a 	vldr	s13, [pc, #296]	@ 800094c <main+0x378>
 8000826:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 800082a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800082e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000832:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
			pid.integral_l = fmaxf(fminf(pid.integral_l,2.5f),-2.5f);
 8000836:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800083a:	eef0 0a04 	vmov.f32	s1, #4	@ 0x40200000  2.5
 800083e:	eeb0 0a67 	vmov.f32	s0, s15
 8000842:	f007 f8de 	bl	8007a02 <fminf>
 8000846:	eef0 7a40 	vmov.f32	s15, s0
 800084a:	eef8 0a04 	vmov.f32	s1, #132	@ 0xc0200000 -2.5
 800084e:	eeb0 0a67 	vmov.f32	s0, s15
 8000852:	f007 f8b9 	bl	80079c8 <fmaxf>
 8000856:	eef0 7a40 	vmov.f32	s15, s0
 800085a:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
			pid.integral_r = fmaxf(fminf(pid.integral_r,2.5f),-2.5f);
 800085e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8000862:	eef0 0a04 	vmov.f32	s1, #4	@ 0x40200000  2.5
 8000866:	eeb0 0a67 	vmov.f32	s0, s15
 800086a:	f007 f8ca 	bl	8007a02 <fminf>
 800086e:	eef0 7a40 	vmov.f32	s15, s0
 8000872:	eef8 0a04 	vmov.f32	s1, #132	@ 0xc0200000 -2.5
 8000876:	eeb0 0a67 	vmov.f32	s0, s15
 800087a:	f007 f8a5 	bl	80079c8 <fmaxf>
 800087e:	eef0 7a40 	vmov.f32	s15, s0
 8000882:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
			volt_l = pid.kp * e_l + pid.ki * pid.integral_l;
 8000886:	ed97 7a08 	vldr	s14, [r7, #32]
 800088a:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 800088e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000892:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8000896:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800089a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800089e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008a2:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
			volt_r = pid.kp * e_r + pid.ki * pid.integral_r;
 80008a6:	ed97 7a08 	vldr	s14, [r7, #32]
 80008aa:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 80008ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80008b2:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80008b6:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80008ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80008be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008c2:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
			//線形化
			volt_l = (volt_l > 0.0f) ? volt_l + 0.9f : volt_l - 0.9f;
 80008c6:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 80008ca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80008ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008d2:	dd06      	ble.n	80008e2 <main+0x30e>
 80008d4:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 80008d8:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8000950 <main+0x37c>
 80008dc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80008e0:	e005      	b.n	80008ee <main+0x31a>
 80008e2:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 80008e6:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8000950 <main+0x37c>
 80008ea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80008ee:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
			volt_r = (volt_r > 0.0f) ? volt_r + 0.9f : volt_r - 0.9f;
 80008f2:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 80008f6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80008fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008fe:	dd29      	ble.n	8000954 <main+0x380>
 8000900:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8000904:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8000950 <main+0x37c>
 8000908:	ee77 7a87 	vadd.f32	s15, s15, s14
 800090c:	e028      	b.n	8000960 <main+0x38c>
 800090e:	bf00      	nop
 8000910:	40a00000 	.word	0x40a00000
 8000914:	20000104 	.word	0x20000104
 8000918:	200000dc 	.word	0x200000dc
 800091c:	2000023c 	.word	0x2000023c
 8000920:	20000288 	.word	0x20000288
 8000924:	200001f0 	.word	0x200001f0
 8000928:	200002d4 	.word	0x200002d4
 800092c:	200003f4 	.word	0x200003f4
 8000930:	40000400 	.word	0x40000400
 8000934:	20000400 	.word	0x20000400
 8000938:	20000404 	.word	0x20000404
 800093c:	3eb6db6e 	.word	0x3eb6db6e
 8000940:	00000032 	.word	0x00000032
 8000944:	00001000 	.word	0x00001000
 8000948:	200003f5 	.word	0x200003f5
 800094c:	3ca3d70a 	.word	0x3ca3d70a
 8000950:	3f666666 	.word	0x3f666666
 8000954:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8000958:	ed1f 7a03 	vldr	s14, [pc, #-12]	@ 8000950 <main+0x37c>
 800095c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000960:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
//			volt_l = fmaxf(fminf(volt_l,12.0f),-12.0f);
//			volt_r = fmaxf(fminf(volt_r,12.0f),-12.0f);
			volt_l = fmaxf(fminf(volt_l, 6.0f), -6.0f);
 8000964:	eef1 0a08 	vmov.f32	s1, #24	@ 0x40c00000  6.0
 8000968:	ed97 0a15 	vldr	s0, [r7, #84]	@ 0x54
 800096c:	f007 f849 	bl	8007a02 <fminf>
 8000970:	eef0 7a40 	vmov.f32	s15, s0
 8000974:	eef9 0a08 	vmov.f32	s1, #152	@ 0xc0c00000 -6.0
 8000978:	eeb0 0a67 	vmov.f32	s0, s15
 800097c:	f007 f824 	bl	80079c8 <fmaxf>
 8000980:	ed87 0a15 	vstr	s0, [r7, #84]	@ 0x54
			volt_r = fmaxf(fminf(volt_r, 6.0f), -6.0f);
 8000984:	eef1 0a08 	vmov.f32	s1, #24	@ 0x40c00000  6.0
 8000988:	ed97 0a14 	vldr	s0, [r7, #80]	@ 0x50
 800098c:	f007 f839 	bl	8007a02 <fminf>
 8000990:	eef0 7a40 	vmov.f32	s15, s0
 8000994:	eef9 0a08 	vmov.f32	s1, #152	@ 0xc0c00000 -6.0
 8000998:	eeb0 0a67 	vmov.f32	s0, s15
 800099c:	f007 f814 	bl	80079c8 <fmaxf>
 80009a0:	ed87 0a14 	vstr	s0, [r7, #80]	@ 0x50
 80009a4:	e00b      	b.n	80009be <main+0x3ea>

		}
		else{
			pid.integral_l = 0.0f;
 80009a6:	f04f 0300 	mov.w	r3, #0
 80009aa:	62bb      	str	r3, [r7, #40]	@ 0x28
			pid.integral_r = 0.0f;
 80009ac:	f04f 0300 	mov.w	r3, #0
 80009b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			volt_l = 0.0f;
 80009b2:	f04f 0300 	mov.w	r3, #0
 80009b6:	657b      	str	r3, [r7, #84]	@ 0x54
			volt_r = 0.0f;
 80009b8:	f04f 0300 	mov.w	r3, #0
 80009bc:	653b      	str	r3, [r7, #80]	@ 0x50
		//PWM
		uint32_t pwm_l;
		uint32_t pwm_r;
		bool dir_l;
		bool dir_r;
		if (g_control){
 80009be:	4b3e      	ldr	r3, [pc, #248]	@ (8000ab8 <main+0x4e4>)
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d03c      	beq.n	8000a40 <main+0x46c>
			pwm_l = (uint32_t)(MAX_DUTY_CNT * (fabsf(volt_l)/12.0f));
 80009c6:	eddf 7a3d 	vldr	s15, [pc, #244]	@ 8000abc <main+0x4e8>
 80009ca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80009ce:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 80009d2:	eef0 6ae7 	vabs.f32	s13, s15
 80009d6:	eeb2 6a08 	vmov.f32	s12, #40	@ 0x41400000  12.0
 80009da:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80009de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80009e6:	ee17 3a90 	vmov	r3, s15
 80009ea:	647b      	str	r3, [r7, #68]	@ 0x44
			pwm_r = (uint32_t)(MAX_DUTY_CNT * (fabsf(volt_r)/12.0f));
 80009ec:	eddf 7a33 	vldr	s15, [pc, #204]	@ 8000abc <main+0x4e8>
 80009f0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80009f4:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 80009f8:	eef0 6ae7 	vabs.f32	s13, s15
 80009fc:	eeb2 6a08 	vmov.f32	s12, #40	@ 0x41400000  12.0
 8000a00:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000a04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a0c:	ee17 3a90 	vmov	r3, s15
 8000a10:	643b      	str	r3, [r7, #64]	@ 0x40
			dir_l = (volt_l > 0.0f) ? true : false;
 8000a12:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8000a16:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000a1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a1e:	bfcc      	ite	gt
 8000a20:	2301      	movgt	r3, #1
 8000a22:	2300      	movle	r3, #0
 8000a24:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			dir_r = (volt_r > 0.0f) ? true : false;
 8000a28:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8000a2c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000a30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a34:	bfcc      	ite	gt
 8000a36:	2301      	movgt	r3, #1
 8000a38:	2300      	movle	r3, #0
 8000a3a:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 8000a3e:	e009      	b.n	8000a54 <main+0x480>
		}
		else{
			pwm_l = 0;
 8000a40:	2300      	movs	r3, #0
 8000a42:	647b      	str	r3, [r7, #68]	@ 0x44
			pwm_r = 0;
 8000a44:	2300      	movs	r3, #0
 8000a46:	643b      	str	r3, [r7, #64]	@ 0x40
			dir_l = false;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			dir_r = false;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
		}
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pwm_l);
 8000a54:	4b1a      	ldr	r3, [pc, #104]	@ (8000ac0 <main+0x4ec>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000a5a:	639a      	str	r2, [r3, #56]	@ 0x38
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, pwm_r);
 8000a5c:	4b18      	ldr	r3, [pc, #96]	@ (8000ac0 <main+0x4ec>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000a62:	63da      	str	r2, [r3, #60]	@ 0x3c
		HAL_GPIO_WritePin(DIR_L_GPIO_Port, DIR_L_Pin, dir_l);
 8000a64:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000a68:	461a      	mov	r2, r3
 8000a6a:	2102      	movs	r1, #2
 8000a6c:	4815      	ldr	r0, [pc, #84]	@ (8000ac4 <main+0x4f0>)
 8000a6e:	f002 fb3b 	bl	80030e8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DIR_R_GPIO_Port, DIR_R_Pin, dir_r);
 8000a72:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8000a76:	461a      	mov	r2, r3
 8000a78:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a7c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a80:	f002 fb32 	bl	80030e8 <HAL_GPIO_WritePin>
		//return SPI&CAN
		Result result;
		getPowerCanData(&result.power_result);
 8000a84:	1d3b      	adds	r3, r7, #4
 8000a86:	4618      	mov	r0, r3
 8000a88:	f7ff fcca 	bl	8000420 <getPowerCanData>
		result.vel_l = vel_l;
 8000a8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a8e:	60bb      	str	r3, [r7, #8]
		result.vel_r = vel_r;
 8000a90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a92:	60fb      	str	r3, [r7, #12]
		result.cnt_l = TIM2->CNT;
 8000a94:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000a98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a9a:	b29b      	uxth	r3, r3
 8000a9c:	823b      	strh	r3, [r7, #16]
		result.cnt_r = TIM3->CNT;
 8000a9e:	4b0a      	ldr	r3, [pc, #40]	@ (8000ac8 <main+0x4f4>)
 8000aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000aa2:	b29b      	uxth	r3, r3
 8000aa4:	827b      	strh	r3, [r7, #18]
		setSpiData(&result);
 8000aa6:	1d3b      	adds	r3, r7, #4
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f7ff fc2b 	bl	8000304 <setSpiData>
		//printf("cmd:(%f,%f) volt:(%f,%f) vel:(%f,%f)\r\n",cmd_vel_l,cmd_vel_r,volt_l,volt_r,vel_l,vel_r);
		g_main_loop_flag = false;
 8000aae:	4b07      	ldr	r3, [pc, #28]	@ (8000acc <main+0x4f8>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	701a      	strb	r2, [r3, #0]
  {
 8000ab4:	e5cf      	b.n	8000656 <main+0x82>
 8000ab6:	bf00      	nop
 8000ab8:	200003f5 	.word	0x200003f5
 8000abc:	00001f3f 	.word	0x00001f3f
 8000ac0:	200001f0 	.word	0x200001f0
 8000ac4:	48001400 	.word	0x48001400
 8000ac8:	40000400 	.word	0x40000400
 8000acc:	200003f4 	.word	0x200003f4

08000ad0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b096      	sub	sp, #88	@ 0x58
 8000ad4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ad6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000ada:	2228      	movs	r2, #40	@ 0x28
 8000adc:	2100      	movs	r1, #0
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f006 fcbe 	bl	8007460 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ae4:	f107 031c 	add.w	r3, r7, #28
 8000ae8:	2200      	movs	r2, #0
 8000aea:	601a      	str	r2, [r3, #0]
 8000aec:	605a      	str	r2, [r3, #4]
 8000aee:	609a      	str	r2, [r3, #8]
 8000af0:	60da      	str	r2, [r3, #12]
 8000af2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000af4:	1d3b      	adds	r3, r7, #4
 8000af6:	2200      	movs	r2, #0
 8000af8:	601a      	str	r2, [r3, #0]
 8000afa:	605a      	str	r2, [r3, #4]
 8000afc:	609a      	str	r2, [r3, #8]
 8000afe:	60da      	str	r2, [r3, #12]
 8000b00:	611a      	str	r2, [r3, #16]
 8000b02:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b04:	2302      	movs	r3, #2
 8000b06:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b0c:	2310      	movs	r3, #16
 8000b0e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b10:	2300      	movs	r3, #0
 8000b12:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b14:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f002 fafd 	bl	8003118 <HAL_RCC_OscConfig>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000b24:	f000 fb2e 	bl	8001184 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b28:	230f      	movs	r3, #15
 8000b2a:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b30:	2300      	movs	r3, #0
 8000b32:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b34:	2300      	movs	r3, #0
 8000b36:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b3c:	f107 031c 	add.w	r3, r7, #28
 8000b40:	2100      	movs	r1, #0
 8000b42:	4618      	mov	r0, r3
 8000b44:	f003 fb26 	bl	8004194 <HAL_RCC_ClockConfig>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000b4e:	f000 fb19 	bl	8001184 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8000b52:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b56:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b5c:	1d3b      	adds	r3, r7, #4
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f003 fd38 	bl	80045d4 <HAL_RCCEx_PeriphCLKConfig>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000b6a:	f000 fb0b 	bl	8001184 <Error_Handler>
  }
}
 8000b6e:	bf00      	nop
 8000b70:	3758      	adds	r7, #88	@ 0x58
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
	...

08000b78 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000b7c:	4b17      	ldr	r3, [pc, #92]	@ (8000bdc <MX_CAN_Init+0x64>)
 8000b7e:	4a18      	ldr	r2, [pc, #96]	@ (8000be0 <MX_CAN_Init+0x68>)
 8000b80:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 1;
 8000b82:	4b16      	ldr	r3, [pc, #88]	@ (8000bdc <MX_CAN_Init+0x64>)
 8000b84:	2201      	movs	r2, #1
 8000b86:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000b88:	4b14      	ldr	r3, [pc, #80]	@ (8000bdc <MX_CAN_Init+0x64>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000b8e:	4b13      	ldr	r3, [pc, #76]	@ (8000bdc <MX_CAN_Init+0x64>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_10TQ;
 8000b94:	4b11      	ldr	r3, [pc, #68]	@ (8000bdc <MX_CAN_Init+0x64>)
 8000b96:	f44f 2210 	mov.w	r2, #589824	@ 0x90000
 8000b9a:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_5TQ;
 8000b9c:	4b0f      	ldr	r3, [pc, #60]	@ (8000bdc <MX_CAN_Init+0x64>)
 8000b9e:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000ba2:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000ba4:	4b0d      	ldr	r3, [pc, #52]	@ (8000bdc <MX_CAN_Init+0x64>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000baa:	4b0c      	ldr	r3, [pc, #48]	@ (8000bdc <MX_CAN_Init+0x64>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000bb0:	4b0a      	ldr	r3, [pc, #40]	@ (8000bdc <MX_CAN_Init+0x64>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000bb6:	4b09      	ldr	r3, [pc, #36]	@ (8000bdc <MX_CAN_Init+0x64>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000bbc:	4b07      	ldr	r3, [pc, #28]	@ (8000bdc <MX_CAN_Init+0x64>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000bc2:	4b06      	ldr	r3, [pc, #24]	@ (8000bdc <MX_CAN_Init+0x64>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000bc8:	4804      	ldr	r0, [pc, #16]	@ (8000bdc <MX_CAN_Init+0x64>)
 8000bca:	f000 ffed 	bl	8001ba8 <HAL_CAN_Init>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000bd4:	f000 fad6 	bl	8001184 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000bd8:	bf00      	nop
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	200000dc 	.word	0x200000dc
 8000be0:	40006400 	.word	0x40006400

08000be4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000be8:	4b18      	ldr	r3, [pc, #96]	@ (8000c4c <MX_SPI1_Init+0x68>)
 8000bea:	4a19      	ldr	r2, [pc, #100]	@ (8000c50 <MX_SPI1_Init+0x6c>)
 8000bec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8000bee:	4b17      	ldr	r3, [pc, #92]	@ (8000c4c <MX_SPI1_Init+0x68>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000bf4:	4b15      	ldr	r3, [pc, #84]	@ (8000c4c <MX_SPI1_Init+0x68>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bfa:	4b14      	ldr	r3, [pc, #80]	@ (8000c4c <MX_SPI1_Init+0x68>)
 8000bfc:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000c00:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c02:	4b12      	ldr	r3, [pc, #72]	@ (8000c4c <MX_SPI1_Init+0x68>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c08:	4b10      	ldr	r3, [pc, #64]	@ (8000c4c <MX_SPI1_Init+0x68>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8000c0e:	4b0f      	ldr	r3, [pc, #60]	@ (8000c4c <MX_SPI1_Init+0x68>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c14:	4b0d      	ldr	r3, [pc, #52]	@ (8000c4c <MX_SPI1_Init+0x68>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000c4c <MX_SPI1_Init+0x68>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c20:	4b0a      	ldr	r3, [pc, #40]	@ (8000c4c <MX_SPI1_Init+0x68>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000c26:	4b09      	ldr	r3, [pc, #36]	@ (8000c4c <MX_SPI1_Init+0x68>)
 8000c28:	2207      	movs	r2, #7
 8000c2a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c2c:	4b07      	ldr	r3, [pc, #28]	@ (8000c4c <MX_SPI1_Init+0x68>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000c32:	4b06      	ldr	r3, [pc, #24]	@ (8000c4c <MX_SPI1_Init+0x68>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c38:	4804      	ldr	r0, [pc, #16]	@ (8000c4c <MX_SPI1_Init+0x68>)
 8000c3a:	f003 fdf1 	bl	8004820 <HAL_SPI_Init>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 8000c44:	f000 fa9e 	bl	8001184 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c48:	bf00      	nop
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	20000104 	.word	0x20000104
 8000c50:	40013000 	.word	0x40013000

08000c54 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b096      	sub	sp, #88	@ 0x58
 8000c58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c5a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000c5e:	2200      	movs	r2, #0
 8000c60:	601a      	str	r2, [r3, #0]
 8000c62:	605a      	str	r2, [r3, #4]
 8000c64:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c66:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	601a      	str	r2, [r3, #0]
 8000c6e:	605a      	str	r2, [r3, #4]
 8000c70:	609a      	str	r2, [r3, #8]
 8000c72:	60da      	str	r2, [r3, #12]
 8000c74:	611a      	str	r2, [r3, #16]
 8000c76:	615a      	str	r2, [r3, #20]
 8000c78:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c7a:	1d3b      	adds	r3, r7, #4
 8000c7c:	222c      	movs	r2, #44	@ 0x2c
 8000c7e:	2100      	movs	r1, #0
 8000c80:	4618      	mov	r0, r3
 8000c82:	f006 fbed 	bl	8007460 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c86:	4b3f      	ldr	r3, [pc, #252]	@ (8000d84 <MX_TIM1_Init+0x130>)
 8000c88:	4a3f      	ldr	r2, [pc, #252]	@ (8000d88 <MX_TIM1_Init+0x134>)
 8000c8a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000c8c:	4b3d      	ldr	r3, [pc, #244]	@ (8000d84 <MX_TIM1_Init+0x130>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c92:	4b3c      	ldr	r3, [pc, #240]	@ (8000d84 <MX_TIM1_Init+0x130>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 7999;
 8000c98:	4b3a      	ldr	r3, [pc, #232]	@ (8000d84 <MX_TIM1_Init+0x130>)
 8000c9a:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000c9e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ca0:	4b38      	ldr	r3, [pc, #224]	@ (8000d84 <MX_TIM1_Init+0x130>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ca6:	4b37      	ldr	r3, [pc, #220]	@ (8000d84 <MX_TIM1_Init+0x130>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cac:	4b35      	ldr	r3, [pc, #212]	@ (8000d84 <MX_TIM1_Init+0x130>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000cb2:	4834      	ldr	r0, [pc, #208]	@ (8000d84 <MX_TIM1_Init+0x130>)
 8000cb4:	f004 fca8 	bl	8005608 <HAL_TIM_PWM_Init>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000cbe:	f000 fa61 	bl	8001184 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000cce:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	482b      	ldr	r0, [pc, #172]	@ (8000d84 <MX_TIM1_Init+0x130>)
 8000cd6:	f005 fc9d 	bl	8006614 <HAL_TIMEx_MasterConfigSynchronization>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000ce0:	f000 fa50 	bl	8001184 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ce4:	2360      	movs	r3, #96	@ 0x60
 8000ce6:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cec:	2300      	movs	r3, #0
 8000cee:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d00:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000d04:	2204      	movs	r2, #4
 8000d06:	4619      	mov	r1, r3
 8000d08:	481e      	ldr	r0, [pc, #120]	@ (8000d84 <MX_TIM1_Init+0x130>)
 8000d0a:	f004 fff7 	bl	8005cfc <HAL_TIM_PWM_ConfigChannel>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000d14:	f000 fa36 	bl	8001184 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d18:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000d1c:	2208      	movs	r2, #8
 8000d1e:	4619      	mov	r1, r3
 8000d20:	4818      	ldr	r0, [pc, #96]	@ (8000d84 <MX_TIM1_Init+0x130>)
 8000d22:	f004 ffeb 	bl	8005cfc <HAL_TIM_PWM_ConfigChannel>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8000d2c:	f000 fa2a 	bl	8001184 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d30:	2300      	movs	r3, #0
 8000d32:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d34:	2300      	movs	r3, #0
 8000d36:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d40:	2300      	movs	r3, #0
 8000d42:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d44:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d48:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000d52:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000d56:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000d60:	1d3b      	adds	r3, r7, #4
 8000d62:	4619      	mov	r1, r3
 8000d64:	4807      	ldr	r0, [pc, #28]	@ (8000d84 <MX_TIM1_Init+0x130>)
 8000d66:	f005 fcc3 	bl	80066f0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <MX_TIM1_Init+0x120>
  {
    Error_Handler();
 8000d70:	f000 fa08 	bl	8001184 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000d74:	4803      	ldr	r0, [pc, #12]	@ (8000d84 <MX_TIM1_Init+0x130>)
 8000d76:	f000 fceb 	bl	8001750 <HAL_TIM_MspPostInit>

}
 8000d7a:	bf00      	nop
 8000d7c:	3758      	adds	r7, #88	@ 0x58
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	200001f0 	.word	0x200001f0
 8000d88:	40012c00 	.word	0x40012c00

08000d8c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b08c      	sub	sp, #48	@ 0x30
 8000d90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000d92:	f107 030c 	add.w	r3, r7, #12
 8000d96:	2224      	movs	r2, #36	@ 0x24
 8000d98:	2100      	movs	r1, #0
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f006 fb60 	bl	8007460 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000da0:	463b      	mov	r3, r7
 8000da2:	2200      	movs	r2, #0
 8000da4:	601a      	str	r2, [r3, #0]
 8000da6:	605a      	str	r2, [r3, #4]
 8000da8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000daa:	4b21      	ldr	r3, [pc, #132]	@ (8000e30 <MX_TIM2_Init+0xa4>)
 8000dac:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000db0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000db2:	4b1f      	ldr	r3, [pc, #124]	@ (8000e30 <MX_TIM2_Init+0xa4>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000db8:	4b1d      	ldr	r3, [pc, #116]	@ (8000e30 <MX_TIM2_Init+0xa4>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65525;
 8000dbe:	4b1c      	ldr	r3, [pc, #112]	@ (8000e30 <MX_TIM2_Init+0xa4>)
 8000dc0:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8000dc4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dc6:	4b1a      	ldr	r3, [pc, #104]	@ (8000e30 <MX_TIM2_Init+0xa4>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dcc:	4b18      	ldr	r3, [pc, #96]	@ (8000e30 <MX_TIM2_Init+0xa4>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000dd2:	2303      	movs	r3, #3
 8000dd4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000dde:	2300      	movs	r3, #0
 8000de0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000de2:	2300      	movs	r3, #0
 8000de4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000de6:	2300      	movs	r3, #0
 8000de8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000dea:	2301      	movs	r3, #1
 8000dec:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000dee:	2300      	movs	r3, #0
 8000df0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000df2:	2300      	movs	r3, #0
 8000df4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000df6:	f107 030c 	add.w	r3, r7, #12
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	480c      	ldr	r0, [pc, #48]	@ (8000e30 <MX_TIM2_Init+0xa4>)
 8000dfe:	f004 fd47 	bl	8005890 <HAL_TIM_Encoder_Init>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000e08:	f000 f9bc 	bl	8001184 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e10:	2300      	movs	r3, #0
 8000e12:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e14:	463b      	mov	r3, r7
 8000e16:	4619      	mov	r1, r3
 8000e18:	4805      	ldr	r0, [pc, #20]	@ (8000e30 <MX_TIM2_Init+0xa4>)
 8000e1a:	f005 fbfb 	bl	8006614 <HAL_TIMEx_MasterConfigSynchronization>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000e24:	f000 f9ae 	bl	8001184 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e28:	bf00      	nop
 8000e2a:	3730      	adds	r7, #48	@ 0x30
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	2000023c 	.word	0x2000023c

08000e34 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b08c      	sub	sp, #48	@ 0x30
 8000e38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000e3a:	f107 030c 	add.w	r3, r7, #12
 8000e3e:	2224      	movs	r2, #36	@ 0x24
 8000e40:	2100      	movs	r1, #0
 8000e42:	4618      	mov	r0, r3
 8000e44:	f006 fb0c 	bl	8007460 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e48:	463b      	mov	r3, r7
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	601a      	str	r2, [r3, #0]
 8000e4e:	605a      	str	r2, [r3, #4]
 8000e50:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e52:	4b21      	ldr	r3, [pc, #132]	@ (8000ed8 <MX_TIM3_Init+0xa4>)
 8000e54:	4a21      	ldr	r2, [pc, #132]	@ (8000edc <MX_TIM3_Init+0xa8>)
 8000e56:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000e58:	4b1f      	ldr	r3, [pc, #124]	@ (8000ed8 <MX_TIM3_Init+0xa4>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e5e:	4b1e      	ldr	r3, [pc, #120]	@ (8000ed8 <MX_TIM3_Init+0xa4>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000e64:	4b1c      	ldr	r3, [pc, #112]	@ (8000ed8 <MX_TIM3_Init+0xa4>)
 8000e66:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e6a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e6c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ed8 <MX_TIM3_Init+0xa4>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e72:	4b19      	ldr	r3, [pc, #100]	@ (8000ed8 <MX_TIM3_Init+0xa4>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000e80:	2301      	movs	r3, #1
 8000e82:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000e84:	2300      	movs	r3, #0
 8000e86:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000e90:	2301      	movs	r3, #1
 8000e92:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000e94:	2300      	movs	r3, #0
 8000e96:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000e9c:	f107 030c 	add.w	r3, r7, #12
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	480d      	ldr	r0, [pc, #52]	@ (8000ed8 <MX_TIM3_Init+0xa4>)
 8000ea4:	f004 fcf4 	bl	8005890 <HAL_TIM_Encoder_Init>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000eae:	f000 f969 	bl	8001184 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000eba:	463b      	mov	r3, r7
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	4806      	ldr	r0, [pc, #24]	@ (8000ed8 <MX_TIM3_Init+0xa4>)
 8000ec0:	f005 fba8 	bl	8006614 <HAL_TIMEx_MasterConfigSynchronization>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000eca:	f000 f95b 	bl	8001184 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000ece:	bf00      	nop
 8000ed0:	3730      	adds	r7, #48	@ 0x30
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	20000288 	.word	0x20000288
 8000edc:	40000400 	.word	0x40000400

08000ee0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ee6:	1d3b      	adds	r3, r7, #4
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
 8000eec:	605a      	str	r2, [r3, #4]
 8000eee:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000ef0:	4b14      	ldr	r3, [pc, #80]	@ (8000f44 <MX_TIM6_Init+0x64>)
 8000ef2:	4a15      	ldr	r2, [pc, #84]	@ (8000f48 <MX_TIM6_Init+0x68>)
 8000ef4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 19;
 8000ef6:	4b13      	ldr	r3, [pc, #76]	@ (8000f44 <MX_TIM6_Init+0x64>)
 8000ef8:	2213      	movs	r2, #19
 8000efa:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000efc:	4b11      	ldr	r3, [pc, #68]	@ (8000f44 <MX_TIM6_Init+0x64>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 7999;
 8000f02:	4b10      	ldr	r3, [pc, #64]	@ (8000f44 <MX_TIM6_Init+0x64>)
 8000f04:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000f08:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f0a:	4b0e      	ldr	r3, [pc, #56]	@ (8000f44 <MX_TIM6_Init+0x64>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000f10:	480c      	ldr	r0, [pc, #48]	@ (8000f44 <MX_TIM6_Init+0x64>)
 8000f12:	f004 fac5 	bl	80054a0 <HAL_TIM_Base_Init>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000f1c:	f000 f932 	bl	8001184 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f20:	2300      	movs	r3, #0
 8000f22:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f24:	2300      	movs	r3, #0
 8000f26:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000f28:	1d3b      	adds	r3, r7, #4
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	4805      	ldr	r0, [pc, #20]	@ (8000f44 <MX_TIM6_Init+0x64>)
 8000f2e:	f005 fb71 	bl	8006614 <HAL_TIMEx_MasterConfigSynchronization>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000f38:	f000 f924 	bl	8001184 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000f3c:	bf00      	nop
 8000f3e:	3710      	adds	r7, #16
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	200002d4 	.word	0x200002d4
 8000f48:	40001000 	.word	0x40001000

08000f4c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b084      	sub	sp, #16
 8000f50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f52:	1d3b      	adds	r3, r7, #4
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	605a      	str	r2, [r3, #4]
 8000f5a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000f5c:	4b14      	ldr	r3, [pc, #80]	@ (8000fb0 <MX_TIM7_Init+0x64>)
 8000f5e:	4a15      	ldr	r2, [pc, #84]	@ (8000fb4 <MX_TIM7_Init+0x68>)
 8000f60:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 19;
 8000f62:	4b13      	ldr	r3, [pc, #76]	@ (8000fb0 <MX_TIM7_Init+0x64>)
 8000f64:	2213      	movs	r2, #19
 8000f66:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f68:	4b11      	ldr	r3, [pc, #68]	@ (8000fb0 <MX_TIM7_Init+0x64>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 7999;
 8000f6e:	4b10      	ldr	r3, [pc, #64]	@ (8000fb0 <MX_TIM7_Init+0x64>)
 8000f70:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000f74:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f76:	4b0e      	ldr	r3, [pc, #56]	@ (8000fb0 <MX_TIM7_Init+0x64>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000f7c:	480c      	ldr	r0, [pc, #48]	@ (8000fb0 <MX_TIM7_Init+0x64>)
 8000f7e:	f004 fa8f 	bl	80054a0 <HAL_TIM_Base_Init>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000f88:	f000 f8fc 	bl	8001184 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f90:	2300      	movs	r3, #0
 8000f92:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000f94:	1d3b      	adds	r3, r7, #4
 8000f96:	4619      	mov	r1, r3
 8000f98:	4805      	ldr	r0, [pc, #20]	@ (8000fb0 <MX_TIM7_Init+0x64>)
 8000f9a:	f005 fb3b 	bl	8006614 <HAL_TIMEx_MasterConfigSynchronization>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000fa4:	f000 f8ee 	bl	8001184 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000fa8:	bf00      	nop
 8000faa:	3710      	adds	r7, #16
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	20000320 	.word	0x20000320
 8000fb4:	40001400 	.word	0x40001400

08000fb8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fbc:	4b14      	ldr	r3, [pc, #80]	@ (8001010 <MX_USART2_UART_Init+0x58>)
 8000fbe:	4a15      	ldr	r2, [pc, #84]	@ (8001014 <MX_USART2_UART_Init+0x5c>)
 8000fc0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000fc2:	4b13      	ldr	r3, [pc, #76]	@ (8001010 <MX_USART2_UART_Init+0x58>)
 8000fc4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000fc8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fca:	4b11      	ldr	r3, [pc, #68]	@ (8001010 <MX_USART2_UART_Init+0x58>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fd0:	4b0f      	ldr	r3, [pc, #60]	@ (8001010 <MX_USART2_UART_Init+0x58>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fd6:	4b0e      	ldr	r3, [pc, #56]	@ (8001010 <MX_USART2_UART_Init+0x58>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fdc:	4b0c      	ldr	r3, [pc, #48]	@ (8001010 <MX_USART2_UART_Init+0x58>)
 8000fde:	220c      	movs	r2, #12
 8000fe0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fe2:	4b0b      	ldr	r3, [pc, #44]	@ (8001010 <MX_USART2_UART_Init+0x58>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fe8:	4b09      	ldr	r3, [pc, #36]	@ (8001010 <MX_USART2_UART_Init+0x58>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fee:	4b08      	ldr	r3, [pc, #32]	@ (8001010 <MX_USART2_UART_Init+0x58>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ff4:	4b06      	ldr	r3, [pc, #24]	@ (8001010 <MX_USART2_UART_Init+0x58>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ffa:	4805      	ldr	r0, [pc, #20]	@ (8001010 <MX_USART2_UART_Init+0x58>)
 8000ffc:	f005 fc0e 	bl	800681c <HAL_UART_Init>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001006:	f000 f8bd 	bl	8001184 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800100a:	bf00      	nop
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	2000036c 	.word	0x2000036c
 8001014:	40004400 	.word	0x40004400

08001018 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800101e:	4b10      	ldr	r3, [pc, #64]	@ (8001060 <MX_DMA_Init+0x48>)
 8001020:	695b      	ldr	r3, [r3, #20]
 8001022:	4a0f      	ldr	r2, [pc, #60]	@ (8001060 <MX_DMA_Init+0x48>)
 8001024:	f043 0301 	orr.w	r3, r3, #1
 8001028:	6153      	str	r3, [r2, #20]
 800102a:	4b0d      	ldr	r3, [pc, #52]	@ (8001060 <MX_DMA_Init+0x48>)
 800102c:	695b      	ldr	r3, [r3, #20]
 800102e:	f003 0301 	and.w	r3, r3, #1
 8001032:	607b      	str	r3, [r7, #4]
 8001034:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001036:	2200      	movs	r2, #0
 8001038:	2100      	movs	r1, #0
 800103a:	200c      	movs	r0, #12
 800103c:	f001 fd15 	bl	8002a6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001040:	200c      	movs	r0, #12
 8001042:	f001 fd2e 	bl	8002aa2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001046:	2200      	movs	r2, #0
 8001048:	2100      	movs	r1, #0
 800104a:	200d      	movs	r0, #13
 800104c:	f001 fd0d 	bl	8002a6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001050:	200d      	movs	r0, #13
 8001052:	f001 fd26 	bl	8002aa2 <HAL_NVIC_EnableIRQ>

}
 8001056:	bf00      	nop
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	40021000 	.word	0x40021000

08001064 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b088      	sub	sp, #32
 8001068:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800106a:	f107 030c 	add.w	r3, r7, #12
 800106e:	2200      	movs	r2, #0
 8001070:	601a      	str	r2, [r3, #0]
 8001072:	605a      	str	r2, [r3, #4]
 8001074:	609a      	str	r2, [r3, #8]
 8001076:	60da      	str	r2, [r3, #12]
 8001078:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800107a:	4b35      	ldr	r3, [pc, #212]	@ (8001150 <MX_GPIO_Init+0xec>)
 800107c:	695b      	ldr	r3, [r3, #20]
 800107e:	4a34      	ldr	r2, [pc, #208]	@ (8001150 <MX_GPIO_Init+0xec>)
 8001080:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001084:	6153      	str	r3, [r2, #20]
 8001086:	4b32      	ldr	r3, [pc, #200]	@ (8001150 <MX_GPIO_Init+0xec>)
 8001088:	695b      	ldr	r3, [r3, #20]
 800108a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800108e:	60bb      	str	r3, [r7, #8]
 8001090:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001092:	4b2f      	ldr	r3, [pc, #188]	@ (8001150 <MX_GPIO_Init+0xec>)
 8001094:	695b      	ldr	r3, [r3, #20]
 8001096:	4a2e      	ldr	r2, [pc, #184]	@ (8001150 <MX_GPIO_Init+0xec>)
 8001098:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800109c:	6153      	str	r3, [r2, #20]
 800109e:	4b2c      	ldr	r3, [pc, #176]	@ (8001150 <MX_GPIO_Init+0xec>)
 80010a0:	695b      	ldr	r3, [r3, #20]
 80010a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010a6:	607b      	str	r3, [r7, #4]
 80010a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010aa:	4b29      	ldr	r3, [pc, #164]	@ (8001150 <MX_GPIO_Init+0xec>)
 80010ac:	695b      	ldr	r3, [r3, #20]
 80010ae:	4a28      	ldr	r2, [pc, #160]	@ (8001150 <MX_GPIO_Init+0xec>)
 80010b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80010b4:	6153      	str	r3, [r2, #20]
 80010b6:	4b26      	ldr	r3, [pc, #152]	@ (8001150 <MX_GPIO_Init+0xec>)
 80010b8:	695b      	ldr	r3, [r3, #20]
 80010ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80010be:	603b      	str	r3, [r7, #0]
 80010c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR_L_GPIO_Port, DIR_L_Pin, GPIO_PIN_RESET);
 80010c2:	2200      	movs	r2, #0
 80010c4:	2102      	movs	r1, #2
 80010c6:	4823      	ldr	r0, [pc, #140]	@ (8001154 <MX_GPIO_Init+0xf0>)
 80010c8:	f002 f80e 	bl	80030e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR_R_GPIO_Port, DIR_R_Pin, GPIO_PIN_RESET);
 80010cc:	2200      	movs	r2, #0
 80010ce:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80010d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010d6:	f002 f807 	bl	80030e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DIR_L_Pin */
  GPIO_InitStruct.Pin = DIR_L_Pin;
 80010da:	2302      	movs	r3, #2
 80010dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010de:	2301      	movs	r3, #1
 80010e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e2:	2300      	movs	r3, #0
 80010e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e6:	2300      	movs	r3, #0
 80010e8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DIR_L_GPIO_Port, &GPIO_InitStruct);
 80010ea:	f107 030c 	add.w	r3, r7, #12
 80010ee:	4619      	mov	r1, r3
 80010f0:	4818      	ldr	r0, [pc, #96]	@ (8001154 <MX_GPIO_Init+0xf0>)
 80010f2:	f001 fe87 	bl	8002e04 <HAL_GPIO_Init>

  /*Configure GPIO pin : enc_L_Z_Pin */
  GPIO_InitStruct.Pin = enc_L_Z_Pin;
 80010f6:	2308      	movs	r3, #8
 80010f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010fa:	2300      	movs	r3, #0
 80010fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(enc_L_Z_GPIO_Port, &GPIO_InitStruct);
 8001102:	f107 030c 	add.w	r3, r7, #12
 8001106:	4619      	mov	r1, r3
 8001108:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800110c:	f001 fe7a 	bl	8002e04 <HAL_GPIO_Init>

  /*Configure GPIO pin : enc_R_Z_Pin */
  GPIO_InitStruct.Pin = enc_R_Z_Pin;
 8001110:	2302      	movs	r3, #2
 8001112:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001114:	2300      	movs	r3, #0
 8001116:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001118:	2300      	movs	r3, #0
 800111a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(enc_R_Z_GPIO_Port, &GPIO_InitStruct);
 800111c:	f107 030c 	add.w	r3, r7, #12
 8001120:	4619      	mov	r1, r3
 8001122:	480d      	ldr	r0, [pc, #52]	@ (8001158 <MX_GPIO_Init+0xf4>)
 8001124:	f001 fe6e 	bl	8002e04 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIR_R_Pin */
  GPIO_InitStruct.Pin = DIR_R_Pin;
 8001128:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800112c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800112e:	2301      	movs	r3, #1
 8001130:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001132:	2300      	movs	r3, #0
 8001134:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001136:	2300      	movs	r3, #0
 8001138:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DIR_R_GPIO_Port, &GPIO_InitStruct);
 800113a:	f107 030c 	add.w	r3, r7, #12
 800113e:	4619      	mov	r1, r3
 8001140:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001144:	f001 fe5e 	bl	8002e04 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001148:	bf00      	nop
 800114a:	3720      	adds	r7, #32
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	40021000 	.word	0x40021000
 8001154:	48001400 	.word	0x48001400
 8001158:	48000400 	.word	0x48000400

0800115c <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af00      	add	r7, sp, #0
 8001162:	60f8      	str	r0, [r7, #12]
 8001164:	60b9      	str	r1, [r7, #8]
 8001166:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2,(uint8_t *)ptr,len,10);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	b29a      	uxth	r2, r3
 800116c:	230a      	movs	r3, #10
 800116e:	68b9      	ldr	r1, [r7, #8]
 8001170:	4803      	ldr	r0, [pc, #12]	@ (8001180 <_write+0x24>)
 8001172:	f005 fba1 	bl	80068b8 <HAL_UART_Transmit>
  return len;
 8001176:	687b      	ldr	r3, [r7, #4]
}
 8001178:	4618      	mov	r0, r3
 800117a:	3710      	adds	r7, #16
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	2000036c 	.word	0x2000036c

08001184 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001188:	b672      	cpsid	i
}
 800118a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800118c:	bf00      	nop
 800118e:	e7fd      	b.n	800118c <Error_Handler+0x8>

08001190 <commandSerialize>:
#include <string.h>
#include <math.h>

#include "spi_data.h"

void commandSerialize(Command* data, uint8_t* buffer){
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	6039      	str	r1, [r7, #0]
	uint8_t length = 0;
 800119a:	2300      	movs	r3, #0
 800119c:	73fb      	strb	r3, [r7, #15]
	powerCommandSerialize(&data->power_command, buffer);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6839      	ldr	r1, [r7, #0]
 80011a2:	4618      	mov	r0, r3
 80011a4:	f7ff f810 	bl	80001c8 <powerCommandSerialize>
	length += POWER_CAN_TX_SIZE;
 80011a8:	7bfb      	ldrb	r3, [r7, #15]
 80011aa:	3302      	adds	r3, #2
 80011ac:	73fb      	strb	r3, [r7, #15]
	uint16_t tmp = 0;
 80011ae:	2300      	movs	r3, #0
 80011b0:	81bb      	strh	r3, [r7, #12]
	tmp = float16ToFloat32(data->vel_l);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	edd3 7a01 	vldr	s15, [r3, #4]
 80011b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011bc:	ee17 3a90 	vmov	r3, s15
 80011c0:	b29b      	uxth	r3, r3
 80011c2:	4618      	mov	r0, r3
 80011c4:	f000 f886 	bl	80012d4 <float16ToFloat32>
 80011c8:	eef0 7a40 	vmov.f32	s15, s0
 80011cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011d0:	ee17 3a90 	vmov	r3, s15
 80011d4:	b29b      	uxth	r3, r3
 80011d6:	81bb      	strh	r3, [r7, #12]
	memcpy(buffer,&tmp,sizeof(uint16_t));
 80011d8:	89ba      	ldrh	r2, [r7, #12]
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	801a      	strh	r2, [r3, #0]
	length += sizeof(uint16_t);
 80011de:	7bfb      	ldrb	r3, [r7, #15]
 80011e0:	3302      	adds	r3, #2
 80011e2:	73fb      	strb	r3, [r7, #15]
	tmp = float16ToFloat32(data->vel_r);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	edd3 7a02 	vldr	s15, [r3, #8]
 80011ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011ee:	ee17 3a90 	vmov	r3, s15
 80011f2:	b29b      	uxth	r3, r3
 80011f4:	4618      	mov	r0, r3
 80011f6:	f000 f86d 	bl	80012d4 <float16ToFloat32>
 80011fa:	eef0 7a40 	vmov.f32	s15, s0
 80011fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001202:	ee17 3a90 	vmov	r3, s15
 8001206:	b29b      	uxth	r3, r3
 8001208:	81bb      	strh	r3, [r7, #12]
	memcpy(buffer+length,&tmp,sizeof(uint16_t));
 800120a:	7bfb      	ldrb	r3, [r7, #15]
 800120c:	683a      	ldr	r2, [r7, #0]
 800120e:	4413      	add	r3, r2
 8001210:	89ba      	ldrh	r2, [r7, #12]
 8001212:	801a      	strh	r2, [r3, #0]
	length += sizeof(uint16_t);
 8001214:	7bfb      	ldrb	r3, [r7, #15]
 8001216:	3302      	adds	r3, #2
 8001218:	73fb      	strb	r3, [r7, #15]
	tmp = calculateChecksum(buffer,length);
 800121a:	7bfb      	ldrb	r3, [r7, #15]
 800121c:	4619      	mov	r1, r3
 800121e:	6838      	ldr	r0, [r7, #0]
 8001220:	f7ff f827 	bl	8000272 <calculateChecksum>
 8001224:	4603      	mov	r3, r0
 8001226:	81bb      	strh	r3, [r7, #12]
	memcpy(buffer+length,&tmp,sizeof(uint8_t));
 8001228:	7bfb      	ldrb	r3, [r7, #15]
 800122a:	683a      	ldr	r2, [r7, #0]
 800122c:	4413      	add	r3, r2
 800122e:	7b3a      	ldrb	r2, [r7, #12]
 8001230:	701a      	strb	r2, [r3, #0]
}
 8001232:	bf00      	nop
 8001234:	3710      	adds	r7, #16
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}

0800123a <resultDeserialize>:
	length += sizeof(uint16_t);
	tmp = calculateChecksum(buffer,length);
	memcpy(buffer+length,&tmp,sizeof(uint8_t));
}

bool resultDeserialize(Result* data, uint8_t* buffer, uint8_t length){
 800123a:	b580      	push	{r7, lr}
 800123c:	b086      	sub	sp, #24
 800123e:	af00      	add	r7, sp, #0
 8001240:	60f8      	str	r0, [r7, #12]
 8001242:	60b9      	str	r1, [r7, #8]
 8001244:	4613      	mov	r3, r2
 8001246:	71fb      	strb	r3, [r7, #7]
	bool is_ok = ((calculateChecksum(buffer,length - 1) == *(buffer+length)))
 8001248:	79fb      	ldrb	r3, [r7, #7]
 800124a:	3b01      	subs	r3, #1
 800124c:	b2db      	uxtb	r3, r3
 800124e:	4619      	mov	r1, r3
 8001250:	68b8      	ldr	r0, [r7, #8]
 8001252:	f7ff f80e 	bl	8000272 <calculateChecksum>
 8001256:	4603      	mov	r3, r0
 8001258:	4619      	mov	r1, r3
 800125a:	79fb      	ldrb	r3, [r7, #7]
 800125c:	68ba      	ldr	r2, [r7, #8]
 800125e:	4413      	add	r3, r2
 8001260:	781b      	ldrb	r3, [r3, #0]
			&& powerResultDeserialize(&data->power_result, buffer, POWER_CAN_RX_SIZE);
 8001262:	4299      	cmp	r1, r3
 8001264:	d10a      	bne.n	800127c <resultDeserialize+0x42>
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	2204      	movs	r2, #4
 800126a:	68b9      	ldr	r1, [r7, #8]
 800126c:	4618      	mov	r0, r3
 800126e:	f7fe ffc1 	bl	80001f4 <powerResultDeserialize>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <resultDeserialize+0x42>
 8001278:	2301      	movs	r3, #1
 800127a:	e000      	b.n	800127e <resultDeserialize+0x44>
 800127c:	2300      	movs	r3, #0
	bool is_ok = ((calculateChecksum(buffer,length - 1) == *(buffer+length)))
 800127e:	75fb      	strb	r3, [r7, #23]
 8001280:	7dfb      	ldrb	r3, [r7, #23]
 8001282:	f003 0301 	and.w	r3, r3, #1
 8001286:	75fb      	strb	r3, [r7, #23]
	if(is_ok){
 8001288:	7dfb      	ldrb	r3, [r7, #23]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d01c      	beq.n	80012c8 <resultDeserialize+0x8e>
		data->vel_l = float16ToFloat32(*(uint16_t*)buffer);
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	881b      	ldrh	r3, [r3, #0]
 8001292:	4618      	mov	r0, r3
 8001294:	f000 f81e 	bl	80012d4 <float16ToFloat32>
 8001298:	eef0 7a40 	vmov.f32	s15, s0
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	edc3 7a01 	vstr	s15, [r3, #4]
		data->vel_r = float16ToFloat32(*((uint16_t*)buffer+2));
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	3304      	adds	r3, #4
 80012a6:	881b      	ldrh	r3, [r3, #0]
 80012a8:	4618      	mov	r0, r3
 80012aa:	f000 f813 	bl	80012d4 <float16ToFloat32>
 80012ae:	eef0 7a40 	vmov.f32	s15, s0
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	edc3 7a02 	vstr	s15, [r3, #8]
		data->cnt_l = *((uint16_t*)buffer+4);
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	891a      	ldrh	r2, [r3, #8]
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	819a      	strh	r2, [r3, #12]
		data->cnt_l = *((uint16_t*)buffer+6);
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	899a      	ldrh	r2, [r3, #12]
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	819a      	strh	r2, [r3, #12]
	}
	return is_ok;
 80012c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3718      	adds	r7, #24
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
	...

080012d4 <float16ToFloat32>:
    // 16ビットの浮動小数点数を作成
    return (uint16_t)(sign | (exponent << 10) | mantissa);
}

// 16ビット浮動小数点数を32ビット浮動小数点数に変換する関数
float float16ToFloat32(uint16_t value) {
 80012d4:	b480      	push	{r7}
 80012d6:	b087      	sub	sp, #28
 80012d8:	af00      	add	r7, sp, #0
 80012da:	4603      	mov	r3, r0
 80012dc:	80fb      	strh	r3, [r7, #6]
    uint32_t sign = (value & 0x8000) << 16; // 符号ビット
 80012de:	88fb      	ldrh	r3, [r7, #6]
 80012e0:	041b      	lsls	r3, r3, #16
 80012e2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80012e6:	60fb      	str	r3, [r7, #12]
    uint32_t exponent = (value & 0x7C00) >> 10; // 指数ビット
 80012e8:	88fb      	ldrh	r3, [r7, #6]
 80012ea:	129b      	asrs	r3, r3, #10
 80012ec:	f003 031f 	and.w	r3, r3, #31
 80012f0:	617b      	str	r3, [r7, #20]
    uint32_t mantissa = value & 0x03FF; // 仮数部
 80012f2:	88fb      	ldrh	r3, [r7, #6]
 80012f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80012f8:	613b      	str	r3, [r7, #16]

    if (exponent == 0x1F) {
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	2b1f      	cmp	r3, #31
 80012fe:	d10c      	bne.n	800131a <float16ToFloat32+0x46>
        // 無限大またはNaN
        if (mantissa != 0) {
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <float16ToFloat32+0x36>
            // NaN
            return NAN;
 8001306:	4b23      	ldr	r3, [pc, #140]	@ (8001394 <float16ToFloat32+0xc0>)
 8001308:	e03b      	b.n	8001382 <float16ToFloat32+0xae>
        }
        return sign ? -INFINITY : INFINITY;
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <float16ToFloat32+0x40>
 8001310:	4b21      	ldr	r3, [pc, #132]	@ (8001398 <float16ToFloat32+0xc4>)
 8001312:	e036      	b.n	8001382 <float16ToFloat32+0xae>
 8001314:	f04f 43ff 	mov.w	r3, #2139095040	@ 0x7f800000
 8001318:	e033      	b.n	8001382 <float16ToFloat32+0xae>
    }

    if (exponent == 0) {
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d11e      	bne.n	800135e <float16ToFloat32+0x8a>
        // 正規化されていない数
        if (mantissa == 0) {
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d10e      	bne.n	8001344 <float16ToFloat32+0x70>
            // ゼロ
            return sign ? -0.0f : 0.0f;
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d002      	beq.n	8001332 <float16ToFloat32+0x5e>
 800132c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8001330:	e027      	b.n	8001382 <float16ToFloat32+0xae>
 8001332:	f04f 0300 	mov.w	r3, #0
 8001336:	e024      	b.n	8001382 <float16ToFloat32+0xae>
        }
        // 正規化されていない数
        while ((mantissa & 0x0400) == 0) {
            mantissa <<= 1;
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	005b      	lsls	r3, r3, #1
 800133c:	613b      	str	r3, [r7, #16]
            exponent--;
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	3b01      	subs	r3, #1
 8001342:	617b      	str	r3, [r7, #20]
        while ((mantissa & 0x0400) == 0) {
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800134a:	2b00      	cmp	r3, #0
 800134c:	d0f4      	beq.n	8001338 <float16ToFloat32+0x64>
        }
        exponent++;
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	3301      	adds	r3, #1
 8001352:	617b      	str	r3, [r7, #20]
        mantissa &= ~0x0400;
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800135a:	613b      	str	r3, [r7, #16]
 800135c:	e003      	b.n	8001366 <float16ToFloat32+0x92>
    } else {
        // 正規化数
        mantissa |= 0x0400;
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001364:	613b      	str	r3, [r7, #16]
    }

    exponent = exponent + (127 - 15); // IEEE 754 32ビット形式への変換
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	3370      	adds	r3, #112	@ 0x70
 800136a:	617b      	str	r3, [r7, #20]

    // 32ビット浮動小数点数の組み立て
    uint32_t f32 = sign | (exponent << 23) | (mantissa << 13);
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	05da      	lsls	r2, r3, #23
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	431a      	orrs	r2, r3
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	035b      	lsls	r3, r3, #13
 8001378:	4313      	orrs	r3, r2
 800137a:	60bb      	str	r3, [r7, #8]
    return *((float*)&f32);
 800137c:	f107 0308 	add.w	r3, r7, #8
 8001380:	681b      	ldr	r3, [r3, #0]
}
 8001382:	ee07 3a90 	vmov	s15, r3
 8001386:	eeb0 0a67 	vmov.f32	s0, s15
 800138a:	371c      	adds	r7, #28
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr
 8001394:	7fc00000 	.word	0x7fc00000
 8001398:	ff800000 	.word	0xff800000

0800139c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013a2:	4b0f      	ldr	r3, [pc, #60]	@ (80013e0 <HAL_MspInit+0x44>)
 80013a4:	699b      	ldr	r3, [r3, #24]
 80013a6:	4a0e      	ldr	r2, [pc, #56]	@ (80013e0 <HAL_MspInit+0x44>)
 80013a8:	f043 0301 	orr.w	r3, r3, #1
 80013ac:	6193      	str	r3, [r2, #24]
 80013ae:	4b0c      	ldr	r3, [pc, #48]	@ (80013e0 <HAL_MspInit+0x44>)
 80013b0:	699b      	ldr	r3, [r3, #24]
 80013b2:	f003 0301 	and.w	r3, r3, #1
 80013b6:	607b      	str	r3, [r7, #4]
 80013b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ba:	4b09      	ldr	r3, [pc, #36]	@ (80013e0 <HAL_MspInit+0x44>)
 80013bc:	69db      	ldr	r3, [r3, #28]
 80013be:	4a08      	ldr	r2, [pc, #32]	@ (80013e0 <HAL_MspInit+0x44>)
 80013c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013c4:	61d3      	str	r3, [r2, #28]
 80013c6:	4b06      	ldr	r3, [pc, #24]	@ (80013e0 <HAL_MspInit+0x44>)
 80013c8:	69db      	ldr	r3, [r3, #28]
 80013ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013ce:	603b      	str	r3, [r7, #0]
 80013d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013d2:	bf00      	nop
 80013d4:	370c      	adds	r7, #12
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	40021000 	.word	0x40021000

080013e4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b08a      	sub	sp, #40	@ 0x28
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ec:	f107 0314 	add.w	r3, r7, #20
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	605a      	str	r2, [r3, #4]
 80013f6:	609a      	str	r2, [r3, #8]
 80013f8:	60da      	str	r2, [r3, #12]
 80013fa:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a1c      	ldr	r2, [pc, #112]	@ (8001474 <HAL_CAN_MspInit+0x90>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d131      	bne.n	800146a <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001406:	4b1c      	ldr	r3, [pc, #112]	@ (8001478 <HAL_CAN_MspInit+0x94>)
 8001408:	69db      	ldr	r3, [r3, #28]
 800140a:	4a1b      	ldr	r2, [pc, #108]	@ (8001478 <HAL_CAN_MspInit+0x94>)
 800140c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001410:	61d3      	str	r3, [r2, #28]
 8001412:	4b19      	ldr	r3, [pc, #100]	@ (8001478 <HAL_CAN_MspInit+0x94>)
 8001414:	69db      	ldr	r3, [r3, #28]
 8001416:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800141a:	613b      	str	r3, [r7, #16]
 800141c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800141e:	4b16      	ldr	r3, [pc, #88]	@ (8001478 <HAL_CAN_MspInit+0x94>)
 8001420:	695b      	ldr	r3, [r3, #20]
 8001422:	4a15      	ldr	r2, [pc, #84]	@ (8001478 <HAL_CAN_MspInit+0x94>)
 8001424:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001428:	6153      	str	r3, [r2, #20]
 800142a:	4b13      	ldr	r3, [pc, #76]	@ (8001478 <HAL_CAN_MspInit+0x94>)
 800142c:	695b      	ldr	r3, [r3, #20]
 800142e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001432:	60fb      	str	r3, [r7, #12]
 8001434:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001436:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800143a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143c:	2302      	movs	r3, #2
 800143e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001440:	2300      	movs	r3, #0
 8001442:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001444:	2303      	movs	r3, #3
 8001446:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8001448:	2309      	movs	r3, #9
 800144a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800144c:	f107 0314 	add.w	r3, r7, #20
 8001450:	4619      	mov	r1, r3
 8001452:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001456:	f001 fcd5 	bl	8002e04 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CAN_RX0_IRQn, 0, 0);
 800145a:	2200      	movs	r2, #0
 800145c:	2100      	movs	r1, #0
 800145e:	2014      	movs	r0, #20
 8001460:	f001 fb03 	bl	8002a6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX0_IRQn);
 8001464:	2014      	movs	r0, #20
 8001466:	f001 fb1c 	bl	8002aa2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN_MspInit 1 */

  }

}
 800146a:	bf00      	nop
 800146c:	3728      	adds	r7, #40	@ 0x28
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	40006400 	.word	0x40006400
 8001478:	40021000 	.word	0x40021000

0800147c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b08a      	sub	sp, #40	@ 0x28
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001484:	f107 0314 	add.w	r3, r7, #20
 8001488:	2200      	movs	r2, #0
 800148a:	601a      	str	r2, [r3, #0]
 800148c:	605a      	str	r2, [r3, #4]
 800148e:	609a      	str	r2, [r3, #8]
 8001490:	60da      	str	r2, [r3, #12]
 8001492:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a3d      	ldr	r2, [pc, #244]	@ (8001590 <HAL_SPI_MspInit+0x114>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d174      	bne.n	8001588 <HAL_SPI_MspInit+0x10c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800149e:	4b3d      	ldr	r3, [pc, #244]	@ (8001594 <HAL_SPI_MspInit+0x118>)
 80014a0:	699b      	ldr	r3, [r3, #24]
 80014a2:	4a3c      	ldr	r2, [pc, #240]	@ (8001594 <HAL_SPI_MspInit+0x118>)
 80014a4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80014a8:	6193      	str	r3, [r2, #24]
 80014aa:	4b3a      	ldr	r3, [pc, #232]	@ (8001594 <HAL_SPI_MspInit+0x118>)
 80014ac:	699b      	ldr	r3, [r3, #24]
 80014ae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80014b2:	613b      	str	r3, [r7, #16]
 80014b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b6:	4b37      	ldr	r3, [pc, #220]	@ (8001594 <HAL_SPI_MspInit+0x118>)
 80014b8:	695b      	ldr	r3, [r3, #20]
 80014ba:	4a36      	ldr	r2, [pc, #216]	@ (8001594 <HAL_SPI_MspInit+0x118>)
 80014bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014c0:	6153      	str	r3, [r2, #20]
 80014c2:	4b34      	ldr	r3, [pc, #208]	@ (8001594 <HAL_SPI_MspInit+0x118>)
 80014c4:	695b      	ldr	r3, [r3, #20]
 80014c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014ca:	60fb      	str	r3, [r7, #12]
 80014cc:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80014ce:	23f0      	movs	r3, #240	@ 0xf0
 80014d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d2:	2302      	movs	r3, #2
 80014d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d6:	2300      	movs	r3, #0
 80014d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014da:	2303      	movs	r3, #3
 80014dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80014de:	2305      	movs	r3, #5
 80014e0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014e2:	f107 0314 	add.w	r3, r7, #20
 80014e6:	4619      	mov	r1, r3
 80014e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014ec:	f001 fc8a 	bl	8002e04 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 80014f0:	4b29      	ldr	r3, [pc, #164]	@ (8001598 <HAL_SPI_MspInit+0x11c>)
 80014f2:	4a2a      	ldr	r2, [pc, #168]	@ (800159c <HAL_SPI_MspInit+0x120>)
 80014f4:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014f6:	4b28      	ldr	r3, [pc, #160]	@ (8001598 <HAL_SPI_MspInit+0x11c>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014fc:	4b26      	ldr	r3, [pc, #152]	@ (8001598 <HAL_SPI_MspInit+0x11c>)
 80014fe:	2200      	movs	r2, #0
 8001500:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001502:	4b25      	ldr	r3, [pc, #148]	@ (8001598 <HAL_SPI_MspInit+0x11c>)
 8001504:	2280      	movs	r2, #128	@ 0x80
 8001506:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001508:	4b23      	ldr	r3, [pc, #140]	@ (8001598 <HAL_SPI_MspInit+0x11c>)
 800150a:	2200      	movs	r2, #0
 800150c:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800150e:	4b22      	ldr	r3, [pc, #136]	@ (8001598 <HAL_SPI_MspInit+0x11c>)
 8001510:	2200      	movs	r2, #0
 8001512:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001514:	4b20      	ldr	r3, [pc, #128]	@ (8001598 <HAL_SPI_MspInit+0x11c>)
 8001516:	2200      	movs	r2, #0
 8001518:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800151a:	4b1f      	ldr	r3, [pc, #124]	@ (8001598 <HAL_SPI_MspInit+0x11c>)
 800151c:	2200      	movs	r2, #0
 800151e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001520:	481d      	ldr	r0, [pc, #116]	@ (8001598 <HAL_SPI_MspInit+0x11c>)
 8001522:	f001 fad8 	bl	8002ad6 <HAL_DMA_Init>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <HAL_SPI_MspInit+0xb4>
    {
      Error_Handler();
 800152c:	f7ff fe2a 	bl	8001184 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	4a19      	ldr	r2, [pc, #100]	@ (8001598 <HAL_SPI_MspInit+0x11c>)
 8001534:	659a      	str	r2, [r3, #88]	@ 0x58
 8001536:	4a18      	ldr	r2, [pc, #96]	@ (8001598 <HAL_SPI_MspInit+0x11c>)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6253      	str	r3, [r2, #36]	@ 0x24

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 800153c:	4b18      	ldr	r3, [pc, #96]	@ (80015a0 <HAL_SPI_MspInit+0x124>)
 800153e:	4a19      	ldr	r2, [pc, #100]	@ (80015a4 <HAL_SPI_MspInit+0x128>)
 8001540:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001542:	4b17      	ldr	r3, [pc, #92]	@ (80015a0 <HAL_SPI_MspInit+0x124>)
 8001544:	2210      	movs	r2, #16
 8001546:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001548:	4b15      	ldr	r3, [pc, #84]	@ (80015a0 <HAL_SPI_MspInit+0x124>)
 800154a:	2200      	movs	r2, #0
 800154c:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800154e:	4b14      	ldr	r3, [pc, #80]	@ (80015a0 <HAL_SPI_MspInit+0x124>)
 8001550:	2280      	movs	r2, #128	@ 0x80
 8001552:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001554:	4b12      	ldr	r3, [pc, #72]	@ (80015a0 <HAL_SPI_MspInit+0x124>)
 8001556:	2200      	movs	r2, #0
 8001558:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800155a:	4b11      	ldr	r3, [pc, #68]	@ (80015a0 <HAL_SPI_MspInit+0x124>)
 800155c:	2200      	movs	r2, #0
 800155e:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001560:	4b0f      	ldr	r3, [pc, #60]	@ (80015a0 <HAL_SPI_MspInit+0x124>)
 8001562:	2200      	movs	r2, #0
 8001564:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001566:	4b0e      	ldr	r3, [pc, #56]	@ (80015a0 <HAL_SPI_MspInit+0x124>)
 8001568:	2200      	movs	r2, #0
 800156a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800156c:	480c      	ldr	r0, [pc, #48]	@ (80015a0 <HAL_SPI_MspInit+0x124>)
 800156e:	f001 fab2 	bl	8002ad6 <HAL_DMA_Init>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <HAL_SPI_MspInit+0x100>
    {
      Error_Handler();
 8001578:	f7ff fe04 	bl	8001184 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	4a08      	ldr	r2, [pc, #32]	@ (80015a0 <HAL_SPI_MspInit+0x124>)
 8001580:	655a      	str	r2, [r3, #84]	@ 0x54
 8001582:	4a07      	ldr	r2, [pc, #28]	@ (80015a0 <HAL_SPI_MspInit+0x124>)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001588:	bf00      	nop
 800158a:	3728      	adds	r7, #40	@ 0x28
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	40013000 	.word	0x40013000
 8001594:	40021000 	.word	0x40021000
 8001598:	20000168 	.word	0x20000168
 800159c:	4002001c 	.word	0x4002001c
 80015a0:	200001ac 	.word	0x200001ac
 80015a4:	40020030 	.word	0x40020030

080015a8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b085      	sub	sp, #20
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a0a      	ldr	r2, [pc, #40]	@ (80015e0 <HAL_TIM_PWM_MspInit+0x38>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d10b      	bne.n	80015d2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80015ba:	4b0a      	ldr	r3, [pc, #40]	@ (80015e4 <HAL_TIM_PWM_MspInit+0x3c>)
 80015bc:	699b      	ldr	r3, [r3, #24]
 80015be:	4a09      	ldr	r2, [pc, #36]	@ (80015e4 <HAL_TIM_PWM_MspInit+0x3c>)
 80015c0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80015c4:	6193      	str	r3, [r2, #24]
 80015c6:	4b07      	ldr	r3, [pc, #28]	@ (80015e4 <HAL_TIM_PWM_MspInit+0x3c>)
 80015c8:	699b      	ldr	r3, [r3, #24]
 80015ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80015ce:	60fb      	str	r3, [r7, #12]
 80015d0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 80015d2:	bf00      	nop
 80015d4:	3714      	adds	r7, #20
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	40012c00 	.word	0x40012c00
 80015e4:	40021000 	.word	0x40021000

080015e8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b08c      	sub	sp, #48	@ 0x30
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f0:	f107 031c 	add.w	r3, r7, #28
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]
 80015f8:	605a      	str	r2, [r3, #4]
 80015fa:	609a      	str	r2, [r3, #8]
 80015fc:	60da      	str	r2, [r3, #12]
 80015fe:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001608:	d129      	bne.n	800165e <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800160a:	4b2d      	ldr	r3, [pc, #180]	@ (80016c0 <HAL_TIM_Encoder_MspInit+0xd8>)
 800160c:	69db      	ldr	r3, [r3, #28]
 800160e:	4a2c      	ldr	r2, [pc, #176]	@ (80016c0 <HAL_TIM_Encoder_MspInit+0xd8>)
 8001610:	f043 0301 	orr.w	r3, r3, #1
 8001614:	61d3      	str	r3, [r2, #28]
 8001616:	4b2a      	ldr	r3, [pc, #168]	@ (80016c0 <HAL_TIM_Encoder_MspInit+0xd8>)
 8001618:	69db      	ldr	r3, [r3, #28]
 800161a:	f003 0301 	and.w	r3, r3, #1
 800161e:	61bb      	str	r3, [r7, #24]
 8001620:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001622:	4b27      	ldr	r3, [pc, #156]	@ (80016c0 <HAL_TIM_Encoder_MspInit+0xd8>)
 8001624:	695b      	ldr	r3, [r3, #20]
 8001626:	4a26      	ldr	r2, [pc, #152]	@ (80016c0 <HAL_TIM_Encoder_MspInit+0xd8>)
 8001628:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800162c:	6153      	str	r3, [r2, #20]
 800162e:	4b24      	ldr	r3, [pc, #144]	@ (80016c0 <HAL_TIM_Encoder_MspInit+0xd8>)
 8001630:	695b      	ldr	r3, [r3, #20]
 8001632:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001636:	617b      	str	r3, [r7, #20]
 8001638:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = enc_L_A_Pin|enc_L_B_Pin;
 800163a:	2303      	movs	r3, #3
 800163c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800163e:	2302      	movs	r3, #2
 8001640:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001642:	2300      	movs	r3, #0
 8001644:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001646:	2300      	movs	r3, #0
 8001648:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800164a:	2301      	movs	r3, #1
 800164c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800164e:	f107 031c 	add.w	r3, r7, #28
 8001652:	4619      	mov	r1, r3
 8001654:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001658:	f001 fbd4 	bl	8002e04 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800165c:	e02c      	b.n	80016b8 <HAL_TIM_Encoder_MspInit+0xd0>
  else if(htim_encoder->Instance==TIM3)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a18      	ldr	r2, [pc, #96]	@ (80016c4 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d127      	bne.n	80016b8 <HAL_TIM_Encoder_MspInit+0xd0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001668:	4b15      	ldr	r3, [pc, #84]	@ (80016c0 <HAL_TIM_Encoder_MspInit+0xd8>)
 800166a:	69db      	ldr	r3, [r3, #28]
 800166c:	4a14      	ldr	r2, [pc, #80]	@ (80016c0 <HAL_TIM_Encoder_MspInit+0xd8>)
 800166e:	f043 0302 	orr.w	r3, r3, #2
 8001672:	61d3      	str	r3, [r2, #28]
 8001674:	4b12      	ldr	r3, [pc, #72]	@ (80016c0 <HAL_TIM_Encoder_MspInit+0xd8>)
 8001676:	69db      	ldr	r3, [r3, #28]
 8001678:	f003 0302 	and.w	r3, r3, #2
 800167c:	613b      	str	r3, [r7, #16]
 800167e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001680:	4b0f      	ldr	r3, [pc, #60]	@ (80016c0 <HAL_TIM_Encoder_MspInit+0xd8>)
 8001682:	695b      	ldr	r3, [r3, #20]
 8001684:	4a0e      	ldr	r2, [pc, #56]	@ (80016c0 <HAL_TIM_Encoder_MspInit+0xd8>)
 8001686:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800168a:	6153      	str	r3, [r2, #20]
 800168c:	4b0c      	ldr	r3, [pc, #48]	@ (80016c0 <HAL_TIM_Encoder_MspInit+0xd8>)
 800168e:	695b      	ldr	r3, [r3, #20]
 8001690:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001694:	60fb      	str	r3, [r7, #12]
 8001696:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = enc_R_A_Pin|enc_R_B_Pin;
 8001698:	2330      	movs	r3, #48	@ 0x30
 800169a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169c:	2302      	movs	r3, #2
 800169e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a0:	2300      	movs	r3, #0
 80016a2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a4:	2300      	movs	r3, #0
 80016a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80016a8:	2302      	movs	r3, #2
 80016aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ac:	f107 031c 	add.w	r3, r7, #28
 80016b0:	4619      	mov	r1, r3
 80016b2:	4805      	ldr	r0, [pc, #20]	@ (80016c8 <HAL_TIM_Encoder_MspInit+0xe0>)
 80016b4:	f001 fba6 	bl	8002e04 <HAL_GPIO_Init>
}
 80016b8:	bf00      	nop
 80016ba:	3730      	adds	r7, #48	@ 0x30
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	40021000 	.word	0x40021000
 80016c4:	40000400 	.word	0x40000400
 80016c8:	48000400 	.word	0x48000400

080016cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b084      	sub	sp, #16
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a1a      	ldr	r2, [pc, #104]	@ (8001744 <HAL_TIM_Base_MspInit+0x78>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d114      	bne.n	8001708 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80016de:	4b1a      	ldr	r3, [pc, #104]	@ (8001748 <HAL_TIM_Base_MspInit+0x7c>)
 80016e0:	69db      	ldr	r3, [r3, #28]
 80016e2:	4a19      	ldr	r2, [pc, #100]	@ (8001748 <HAL_TIM_Base_MspInit+0x7c>)
 80016e4:	f043 0310 	orr.w	r3, r3, #16
 80016e8:	61d3      	str	r3, [r2, #28]
 80016ea:	4b17      	ldr	r3, [pc, #92]	@ (8001748 <HAL_TIM_Base_MspInit+0x7c>)
 80016ec:	69db      	ldr	r3, [r3, #28]
 80016ee:	f003 0310 	and.w	r3, r3, #16
 80016f2:	60fb      	str	r3, [r7, #12]
 80016f4:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, 0, 0);
 80016f6:	2200      	movs	r2, #0
 80016f8:	2100      	movs	r1, #0
 80016fa:	2036      	movs	r0, #54	@ 0x36
 80016fc:	f001 f9b5 	bl	8002a6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC1_IRQn);
 8001700:	2036      	movs	r0, #54	@ 0x36
 8001702:	f001 f9ce 	bl	8002aa2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001706:	e018      	b.n	800173a <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM7)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a0f      	ldr	r2, [pc, #60]	@ (800174c <HAL_TIM_Base_MspInit+0x80>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d113      	bne.n	800173a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001712:	4b0d      	ldr	r3, [pc, #52]	@ (8001748 <HAL_TIM_Base_MspInit+0x7c>)
 8001714:	69db      	ldr	r3, [r3, #28]
 8001716:	4a0c      	ldr	r2, [pc, #48]	@ (8001748 <HAL_TIM_Base_MspInit+0x7c>)
 8001718:	f043 0320 	orr.w	r3, r3, #32
 800171c:	61d3      	str	r3, [r2, #28]
 800171e:	4b0a      	ldr	r3, [pc, #40]	@ (8001748 <HAL_TIM_Base_MspInit+0x7c>)
 8001720:	69db      	ldr	r3, [r3, #28]
 8001722:	f003 0320 	and.w	r3, r3, #32
 8001726:	60bb      	str	r3, [r7, #8]
 8001728:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_DAC2_IRQn, 0, 0);
 800172a:	2200      	movs	r2, #0
 800172c:	2100      	movs	r1, #0
 800172e:	2037      	movs	r0, #55	@ 0x37
 8001730:	f001 f99b 	bl	8002a6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_DAC2_IRQn);
 8001734:	2037      	movs	r0, #55	@ 0x37
 8001736:	f001 f9b4 	bl	8002aa2 <HAL_NVIC_EnableIRQ>
}
 800173a:	bf00      	nop
 800173c:	3710      	adds	r7, #16
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	40001000 	.word	0x40001000
 8001748:	40021000 	.word	0x40021000
 800174c:	40001400 	.word	0x40001400

08001750 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b088      	sub	sp, #32
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001758:	f107 030c 	add.w	r3, r7, #12
 800175c:	2200      	movs	r2, #0
 800175e:	601a      	str	r2, [r3, #0]
 8001760:	605a      	str	r2, [r3, #4]
 8001762:	609a      	str	r2, [r3, #8]
 8001764:	60da      	str	r2, [r3, #12]
 8001766:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a12      	ldr	r2, [pc, #72]	@ (80017b8 <HAL_TIM_MspPostInit+0x68>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d11d      	bne.n	80017ae <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001772:	4b12      	ldr	r3, [pc, #72]	@ (80017bc <HAL_TIM_MspPostInit+0x6c>)
 8001774:	695b      	ldr	r3, [r3, #20]
 8001776:	4a11      	ldr	r2, [pc, #68]	@ (80017bc <HAL_TIM_MspPostInit+0x6c>)
 8001778:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800177c:	6153      	str	r3, [r2, #20]
 800177e:	4b0f      	ldr	r3, [pc, #60]	@ (80017bc <HAL_TIM_MspPostInit+0x6c>)
 8001780:	695b      	ldr	r3, [r3, #20]
 8001782:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001786:	60bb      	str	r3, [r7, #8]
 8001788:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = PWM_L_Pin|PWM_R_Pin;
 800178a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800178e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001790:	2302      	movs	r3, #2
 8001792:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001794:	2300      	movs	r3, #0
 8001796:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001798:	2300      	movs	r3, #0
 800179a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800179c:	2306      	movs	r3, #6
 800179e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017a0:	f107 030c 	add.w	r3, r7, #12
 80017a4:	4619      	mov	r1, r3
 80017a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017aa:	f001 fb2b 	bl	8002e04 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80017ae:	bf00      	nop
 80017b0:	3720      	adds	r7, #32
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	40012c00 	.word	0x40012c00
 80017bc:	40021000 	.word	0x40021000

080017c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b08a      	sub	sp, #40	@ 0x28
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c8:	f107 0314 	add.w	r3, r7, #20
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]
 80017d0:	605a      	str	r2, [r3, #4]
 80017d2:	609a      	str	r2, [r3, #8]
 80017d4:	60da      	str	r2, [r3, #12]
 80017d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a18      	ldr	r2, [pc, #96]	@ (8001840 <HAL_UART_MspInit+0x80>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d129      	bne.n	8001836 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80017e2:	4b18      	ldr	r3, [pc, #96]	@ (8001844 <HAL_UART_MspInit+0x84>)
 80017e4:	69db      	ldr	r3, [r3, #28]
 80017e6:	4a17      	ldr	r2, [pc, #92]	@ (8001844 <HAL_UART_MspInit+0x84>)
 80017e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017ec:	61d3      	str	r3, [r2, #28]
 80017ee:	4b15      	ldr	r3, [pc, #84]	@ (8001844 <HAL_UART_MspInit+0x84>)
 80017f0:	69db      	ldr	r3, [r3, #28]
 80017f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017f6:	613b      	str	r3, [r7, #16]
 80017f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017fa:	4b12      	ldr	r3, [pc, #72]	@ (8001844 <HAL_UART_MspInit+0x84>)
 80017fc:	695b      	ldr	r3, [r3, #20]
 80017fe:	4a11      	ldr	r2, [pc, #68]	@ (8001844 <HAL_UART_MspInit+0x84>)
 8001800:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001804:	6153      	str	r3, [r2, #20]
 8001806:	4b0f      	ldr	r3, [pc, #60]	@ (8001844 <HAL_UART_MspInit+0x84>)
 8001808:	695b      	ldr	r3, [r3, #20]
 800180a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800180e:	60fb      	str	r3, [r7, #12]
 8001810:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8001812:	f248 0304 	movw	r3, #32772	@ 0x8004
 8001816:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001818:	2302      	movs	r3, #2
 800181a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181c:	2300      	movs	r3, #0
 800181e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001820:	2303      	movs	r3, #3
 8001822:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001824:	2307      	movs	r3, #7
 8001826:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001828:	f107 0314 	add.w	r3, r7, #20
 800182c:	4619      	mov	r1, r3
 800182e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001832:	f001 fae7 	bl	8002e04 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001836:	bf00      	nop
 8001838:	3728      	adds	r7, #40	@ 0x28
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	40004400 	.word	0x40004400
 8001844:	40021000 	.word	0x40021000

08001848 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800184c:	bf00      	nop
 800184e:	e7fd      	b.n	800184c <NMI_Handler+0x4>

08001850 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001854:	bf00      	nop
 8001856:	e7fd      	b.n	8001854 <HardFault_Handler+0x4>

08001858 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800185c:	bf00      	nop
 800185e:	e7fd      	b.n	800185c <MemManage_Handler+0x4>

08001860 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001864:	bf00      	nop
 8001866:	e7fd      	b.n	8001864 <BusFault_Handler+0x4>

08001868 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800186c:	bf00      	nop
 800186e:	e7fd      	b.n	800186c <UsageFault_Handler+0x4>

08001870 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001874:	bf00      	nop
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr

0800187e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800187e:	b480      	push	{r7}
 8001880:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001882:	bf00      	nop
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr

0800188c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001890:	bf00      	nop
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr

0800189a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800189a:	b580      	push	{r7, lr}
 800189c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800189e:	f000 f93f 	bl	8001b20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018a2:	bf00      	nop
 80018a4:	bd80      	pop	{r7, pc}
	...

080018a8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80018ac:	4802      	ldr	r0, [pc, #8]	@ (80018b8 <DMA1_Channel2_IRQHandler+0x10>)
 80018ae:	f001 f9b8 	bl	8002c22 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80018b2:	bf00      	nop
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	20000168 	.word	0x20000168

080018bc <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80018c0:	4802      	ldr	r0, [pc, #8]	@ (80018cc <DMA1_Channel3_IRQHandler+0x10>)
 80018c2:	f001 f9ae 	bl	8002c22 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80018c6:	bf00      	nop
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	200001ac 	.word	0x200001ac

080018d0 <CAN_RX0_IRQHandler>:

/**
  * @brief This function handles CAN RX0 interrupt.
  */
void CAN_RX0_IRQHandler(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX0_IRQn 0 */

  /* USER CODE END CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80018d4:	4802      	ldr	r0, [pc, #8]	@ (80018e0 <CAN_RX0_IRQHandler+0x10>)
 80018d6:	f000 fdbd 	bl	8002454 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX0_IRQn 1 */

  /* USER CODE END CAN_RX0_IRQn 1 */
}
 80018da:	bf00      	nop
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	200000dc 	.word	0x200000dc

080018e4 <TIM6_DAC1_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC1 underrun error interrupts.
  */
void TIM6_DAC1_IRQHandler(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC1_IRQn 0 */

  /* USER CODE END TIM6_DAC1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80018e8:	4802      	ldr	r0, [pc, #8]	@ (80018f4 <TIM6_DAC1_IRQHandler+0x10>)
 80018ea:	f004 f905 	bl	8005af8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC1_IRQn 1 */

  /* USER CODE END TIM6_DAC1_IRQn 1 */
}
 80018ee:	bf00      	nop
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	200002d4 	.word	0x200002d4

080018f8 <TIM7_DAC2_IRQHandler>:

/**
  * @brief This function handles TIM7 global and DAC2 underrun error interrupts.
  */
void TIM7_DAC2_IRQHandler(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_DAC2_IRQn 0 */

  /* USER CODE END TIM7_DAC2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80018fc:	4802      	ldr	r0, [pc, #8]	@ (8001908 <TIM7_DAC2_IRQHandler+0x10>)
 80018fe:	f004 f8fb 	bl	8005af8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_DAC2_IRQn 1 */

  /* USER CODE END TIM7_DAC2_IRQn 1 */
}
 8001902:	bf00      	nop
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	20000320 	.word	0x20000320

0800190c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b086      	sub	sp, #24
 8001910:	af00      	add	r7, sp, #0
 8001912:	60f8      	str	r0, [r7, #12]
 8001914:	60b9      	str	r1, [r7, #8]
 8001916:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001918:	2300      	movs	r3, #0
 800191a:	617b      	str	r3, [r7, #20]
 800191c:	e00a      	b.n	8001934 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800191e:	f3af 8000 	nop.w
 8001922:	4601      	mov	r1, r0
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	1c5a      	adds	r2, r3, #1
 8001928:	60ba      	str	r2, [r7, #8]
 800192a:	b2ca      	uxtb	r2, r1
 800192c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	3301      	adds	r3, #1
 8001932:	617b      	str	r3, [r7, #20]
 8001934:	697a      	ldr	r2, [r7, #20]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	429a      	cmp	r2, r3
 800193a:	dbf0      	blt.n	800191e <_read+0x12>
  }

  return len;
 800193c:	687b      	ldr	r3, [r7, #4]
}
 800193e:	4618      	mov	r0, r3
 8001940:	3718      	adds	r7, #24
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}

08001946 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001946:	b480      	push	{r7}
 8001948:	b083      	sub	sp, #12
 800194a:	af00      	add	r7, sp, #0
 800194c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800194e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001952:	4618      	mov	r0, r3
 8001954:	370c      	adds	r7, #12
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr

0800195e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800195e:	b480      	push	{r7}
 8001960:	b083      	sub	sp, #12
 8001962:	af00      	add	r7, sp, #0
 8001964:	6078      	str	r0, [r7, #4]
 8001966:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800196e:	605a      	str	r2, [r3, #4]
  return 0;
 8001970:	2300      	movs	r3, #0
}
 8001972:	4618      	mov	r0, r3
 8001974:	370c      	adds	r7, #12
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr

0800197e <_isatty>:

int _isatty(int file)
{
 800197e:	b480      	push	{r7}
 8001980:	b083      	sub	sp, #12
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001986:	2301      	movs	r3, #1
}
 8001988:	4618      	mov	r0, r3
 800198a:	370c      	adds	r7, #12
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr

08001994 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001994:	b480      	push	{r7}
 8001996:	b085      	sub	sp, #20
 8001998:	af00      	add	r7, sp, #0
 800199a:	60f8      	str	r0, [r7, #12]
 800199c:	60b9      	str	r1, [r7, #8]
 800199e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80019a0:	2300      	movs	r3, #0
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3714      	adds	r7, #20
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
	...

080019b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b086      	sub	sp, #24
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019b8:	4a14      	ldr	r2, [pc, #80]	@ (8001a0c <_sbrk+0x5c>)
 80019ba:	4b15      	ldr	r3, [pc, #84]	@ (8001a10 <_sbrk+0x60>)
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019c4:	4b13      	ldr	r3, [pc, #76]	@ (8001a14 <_sbrk+0x64>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d102      	bne.n	80019d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019cc:	4b11      	ldr	r3, [pc, #68]	@ (8001a14 <_sbrk+0x64>)
 80019ce:	4a12      	ldr	r2, [pc, #72]	@ (8001a18 <_sbrk+0x68>)
 80019d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019d2:	4b10      	ldr	r3, [pc, #64]	@ (8001a14 <_sbrk+0x64>)
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4413      	add	r3, r2
 80019da:	693a      	ldr	r2, [r7, #16]
 80019dc:	429a      	cmp	r2, r3
 80019de:	d207      	bcs.n	80019f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019e0:	f005 fd8c 	bl	80074fc <__errno>
 80019e4:	4603      	mov	r3, r0
 80019e6:	220c      	movs	r2, #12
 80019e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019ea:	f04f 33ff 	mov.w	r3, #4294967295
 80019ee:	e009      	b.n	8001a04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019f0:	4b08      	ldr	r3, [pc, #32]	@ (8001a14 <_sbrk+0x64>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019f6:	4b07      	ldr	r3, [pc, #28]	@ (8001a14 <_sbrk+0x64>)
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4413      	add	r3, r2
 80019fe:	4a05      	ldr	r2, [pc, #20]	@ (8001a14 <_sbrk+0x64>)
 8001a00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a02:	68fb      	ldr	r3, [r7, #12]
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3718      	adds	r7, #24
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	20003000 	.word	0x20003000
 8001a10:	00000400 	.word	0x00000400
 8001a14:	20000408 	.word	0x20000408
 8001a18:	20000560 	.word	0x20000560

08001a1c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a20:	4b06      	ldr	r3, [pc, #24]	@ (8001a3c <SystemInit+0x20>)
 8001a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a26:	4a05      	ldr	r2, [pc, #20]	@ (8001a3c <SystemInit+0x20>)
 8001a28:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a2c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a30:	bf00      	nop
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	e000ed00 	.word	0xe000ed00

08001a40 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001a40:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001a78 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a44:	f7ff ffea 	bl	8001a1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a48:	480c      	ldr	r0, [pc, #48]	@ (8001a7c <LoopForever+0x6>)
  ldr r1, =_edata
 8001a4a:	490d      	ldr	r1, [pc, #52]	@ (8001a80 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a4c:	4a0d      	ldr	r2, [pc, #52]	@ (8001a84 <LoopForever+0xe>)
  movs r3, #0
 8001a4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a50:	e002      	b.n	8001a58 <LoopCopyDataInit>

08001a52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a56:	3304      	adds	r3, #4

08001a58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a5c:	d3f9      	bcc.n	8001a52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a5e:	4a0a      	ldr	r2, [pc, #40]	@ (8001a88 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a60:	4c0a      	ldr	r4, [pc, #40]	@ (8001a8c <LoopForever+0x16>)
  movs r3, #0
 8001a62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a64:	e001      	b.n	8001a6a <LoopFillZerobss>

08001a66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a68:	3204      	adds	r2, #4

08001a6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a6c:	d3fb      	bcc.n	8001a66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a6e:	f005 fd4b 	bl	8007508 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a72:	f7fe fdaf 	bl	80005d4 <main>

08001a76 <LoopForever>:

LoopForever:
    b LoopForever
 8001a76:	e7fe      	b.n	8001a76 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001a78:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001a7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a80:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001a84:	08007b10 	.word	0x08007b10
  ldr r2, =_sbss
 8001a88:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001a8c:	2000055c 	.word	0x2000055c

08001a90 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a90:	e7fe      	b.n	8001a90 <ADC1_2_IRQHandler>
	...

08001a94 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a98:	4b08      	ldr	r3, [pc, #32]	@ (8001abc <HAL_Init+0x28>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a07      	ldr	r2, [pc, #28]	@ (8001abc <HAL_Init+0x28>)
 8001a9e:	f043 0310 	orr.w	r3, r3, #16
 8001aa2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001aa4:	2003      	movs	r0, #3
 8001aa6:	f000 ffd5 	bl	8002a54 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001aaa:	2000      	movs	r0, #0
 8001aac:	f000 f808 	bl	8001ac0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ab0:	f7ff fc74 	bl	800139c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ab4:	2300      	movs	r3, #0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	40022000 	.word	0x40022000

08001ac0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ac8:	4b12      	ldr	r3, [pc, #72]	@ (8001b14 <HAL_InitTick+0x54>)
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	4b12      	ldr	r3, [pc, #72]	@ (8001b18 <HAL_InitTick+0x58>)
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ad6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ada:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f000 ffed 	bl	8002abe <HAL_SYSTICK_Config>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d001      	beq.n	8001aee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e00e      	b.n	8001b0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2b0f      	cmp	r3, #15
 8001af2:	d80a      	bhi.n	8001b0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001af4:	2200      	movs	r2, #0
 8001af6:	6879      	ldr	r1, [r7, #4]
 8001af8:	f04f 30ff 	mov.w	r0, #4294967295
 8001afc:	f000 ffb5 	bl	8002a6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b00:	4a06      	ldr	r2, [pc, #24]	@ (8001b1c <HAL_InitTick+0x5c>)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001b06:	2300      	movs	r3, #0
 8001b08:	e000      	b.n	8001b0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3708      	adds	r7, #8
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	20000000 	.word	0x20000000
 8001b18:	20000008 	.word	0x20000008
 8001b1c:	20000004 	.word	0x20000004

08001b20 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b24:	4b06      	ldr	r3, [pc, #24]	@ (8001b40 <HAL_IncTick+0x20>)
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	461a      	mov	r2, r3
 8001b2a:	4b06      	ldr	r3, [pc, #24]	@ (8001b44 <HAL_IncTick+0x24>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4413      	add	r3, r2
 8001b30:	4a04      	ldr	r2, [pc, #16]	@ (8001b44 <HAL_IncTick+0x24>)
 8001b32:	6013      	str	r3, [r2, #0]
}
 8001b34:	bf00      	nop
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	20000008 	.word	0x20000008
 8001b44:	2000040c 	.word	0x2000040c

08001b48 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  return uwTick;  
 8001b4c:	4b03      	ldr	r3, [pc, #12]	@ (8001b5c <HAL_GetTick+0x14>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	2000040c 	.word	0x2000040c

08001b60 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b084      	sub	sp, #16
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b68:	f7ff ffee 	bl	8001b48 <HAL_GetTick>
 8001b6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b78:	d005      	beq.n	8001b86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b7a:	4b0a      	ldr	r3, [pc, #40]	@ (8001ba4 <HAL_Delay+0x44>)
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	461a      	mov	r2, r3
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	4413      	add	r3, r2
 8001b84:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001b86:	bf00      	nop
 8001b88:	f7ff ffde 	bl	8001b48 <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	68fa      	ldr	r2, [r7, #12]
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d8f7      	bhi.n	8001b88 <HAL_Delay+0x28>
  {
  }
}
 8001b98:	bf00      	nop
 8001b9a:	bf00      	nop
 8001b9c:	3710      	adds	r7, #16
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	20000008 	.word	0x20000008

08001ba8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b084      	sub	sp, #16
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d101      	bne.n	8001bba <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e0ed      	b.n	8001d96 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d102      	bne.n	8001bcc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f7ff fc0c 	bl	80013e4 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f042 0201 	orr.w	r2, r2, #1
 8001bda:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001bdc:	f7ff ffb4 	bl	8001b48 <HAL_GetTick>
 8001be0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001be2:	e012      	b.n	8001c0a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001be4:	f7ff ffb0 	bl	8001b48 <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	2b0a      	cmp	r3, #10
 8001bf0:	d90b      	bls.n	8001c0a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bf6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2205      	movs	r2, #5
 8001c02:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e0c5      	b.n	8001d96 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f003 0301 	and.w	r3, r3, #1
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d0e5      	beq.n	8001be4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f022 0202 	bic.w	r2, r2, #2
 8001c26:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c28:	f7ff ff8e 	bl	8001b48 <HAL_GetTick>
 8001c2c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001c2e:	e012      	b.n	8001c56 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001c30:	f7ff ff8a 	bl	8001b48 <HAL_GetTick>
 8001c34:	4602      	mov	r2, r0
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	2b0a      	cmp	r3, #10
 8001c3c:	d90b      	bls.n	8001c56 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c42:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2205      	movs	r2, #5
 8001c4e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e09f      	b.n	8001d96 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f003 0302 	and.w	r3, r3, #2
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d1e5      	bne.n	8001c30 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	7e1b      	ldrb	r3, [r3, #24]
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d108      	bne.n	8001c7e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	e007      	b.n	8001c8e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001c8c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	7e5b      	ldrb	r3, [r3, #25]
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d108      	bne.n	8001ca8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001ca4:	601a      	str	r2, [r3, #0]
 8001ca6:	e007      	b.n	8001cb8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001cb6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	7e9b      	ldrb	r3, [r3, #26]
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d108      	bne.n	8001cd2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f042 0220 	orr.w	r2, r2, #32
 8001cce:	601a      	str	r2, [r3, #0]
 8001cd0:	e007      	b.n	8001ce2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f022 0220 	bic.w	r2, r2, #32
 8001ce0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	7edb      	ldrb	r3, [r3, #27]
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d108      	bne.n	8001cfc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f022 0210 	bic.w	r2, r2, #16
 8001cf8:	601a      	str	r2, [r3, #0]
 8001cfa:	e007      	b.n	8001d0c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f042 0210 	orr.w	r2, r2, #16
 8001d0a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	7f1b      	ldrb	r3, [r3, #28]
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d108      	bne.n	8001d26 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f042 0208 	orr.w	r2, r2, #8
 8001d22:	601a      	str	r2, [r3, #0]
 8001d24:	e007      	b.n	8001d36 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f022 0208 	bic.w	r2, r2, #8
 8001d34:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	7f5b      	ldrb	r3, [r3, #29]
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d108      	bne.n	8001d50 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f042 0204 	orr.w	r2, r2, #4
 8001d4c:	601a      	str	r2, [r3, #0]
 8001d4e:	e007      	b.n	8001d60 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f022 0204 	bic.w	r2, r2, #4
 8001d5e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	689a      	ldr	r2, [r3, #8]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	431a      	orrs	r2, r3
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	691b      	ldr	r3, [r3, #16]
 8001d6e:	431a      	orrs	r2, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	695b      	ldr	r3, [r3, #20]
 8001d74:	ea42 0103 	orr.w	r1, r2, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	1e5a      	subs	r2, r3, #1
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	430a      	orrs	r2, r1
 8001d84:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2201      	movs	r2, #1
 8001d90:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001d94:	2300      	movs	r3, #0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3710      	adds	r7, #16
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}

08001d9e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001d9e:	b480      	push	{r7}
 8001da0:	b087      	sub	sp, #28
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	6078      	str	r0, [r7, #4]
 8001da6:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001db4:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001db6:	7cfb      	ldrb	r3, [r7, #19]
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d003      	beq.n	8001dc4 <HAL_CAN_ConfigFilter+0x26>
 8001dbc:	7cfb      	ldrb	r3, [r7, #19]
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	f040 80aa 	bne.w	8001f18 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001dca:	f043 0201 	orr.w	r2, r3, #1
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	695b      	ldr	r3, [r3, #20]
 8001dd8:	f003 031f 	and.w	r3, r3, #31
 8001ddc:	2201      	movs	r2, #1
 8001dde:	fa02 f303 	lsl.w	r3, r2, r3
 8001de2:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	43db      	mvns	r3, r3
 8001dee:	401a      	ands	r2, r3
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	69db      	ldr	r3, [r3, #28]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d123      	bne.n	8001e46 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	43db      	mvns	r3, r3
 8001e08:	401a      	ands	r2, r3
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001e1c:	683a      	ldr	r2, [r7, #0]
 8001e1e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001e20:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	3248      	adds	r2, #72	@ 0x48
 8001e26:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001e3a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001e3c:	6979      	ldr	r1, [r7, #20]
 8001e3e:	3348      	adds	r3, #72	@ 0x48
 8001e40:	00db      	lsls	r3, r3, #3
 8001e42:	440b      	add	r3, r1
 8001e44:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	69db      	ldr	r3, [r3, #28]
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d122      	bne.n	8001e94 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	431a      	orrs	r2, r3
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001e6a:	683a      	ldr	r2, [r7, #0]
 8001e6c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001e6e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	3248      	adds	r2, #72	@ 0x48
 8001e74:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	68db      	ldr	r3, [r3, #12]
 8001e82:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001e88:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001e8a:	6979      	ldr	r1, [r7, #20]
 8001e8c:	3348      	adds	r3, #72	@ 0x48
 8001e8e:	00db      	lsls	r3, r3, #3
 8001e90:	440b      	add	r3, r1
 8001e92:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	699b      	ldr	r3, [r3, #24]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d109      	bne.n	8001eb0 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	43db      	mvns	r3, r3
 8001ea6:	401a      	ands	r2, r3
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001eae:	e007      	b.n	8001ec0 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	431a      	orrs	r2, r3
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	691b      	ldr	r3, [r3, #16]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d109      	bne.n	8001edc <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	43db      	mvns	r3, r3
 8001ed2:	401a      	ands	r2, r3
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001eda:	e007      	b.n	8001eec <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	431a      	orrs	r2, r3
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	6a1b      	ldr	r3, [r3, #32]
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d107      	bne.n	8001f04 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	431a      	orrs	r2, r3
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001f0a:	f023 0201 	bic.w	r2, r3, #1
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001f14:	2300      	movs	r3, #0
 8001f16:	e006      	b.n	8001f26 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f1c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
  }
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	371c      	adds	r7, #28
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr

08001f32 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001f32:	b580      	push	{r7, lr}
 8001f34:	b084      	sub	sp, #16
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d12e      	bne.n	8001fa4 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2202      	movs	r2, #2
 8001f4a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f022 0201 	bic.w	r2, r2, #1
 8001f5c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001f5e:	f7ff fdf3 	bl	8001b48 <HAL_GetTick>
 8001f62:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001f64:	e012      	b.n	8001f8c <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001f66:	f7ff fdef 	bl	8001b48 <HAL_GetTick>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	2b0a      	cmp	r3, #10
 8001f72:	d90b      	bls.n	8001f8c <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f78:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2205      	movs	r2, #5
 8001f84:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e012      	b.n	8001fb2 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	f003 0301 	and.w	r3, r3, #1
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d1e5      	bne.n	8001f66 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	e006      	b.n	8001fb2 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fa8:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
  }
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3710      	adds	r7, #16
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}

08001fba <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001fba:	b480      	push	{r7}
 8001fbc:	b089      	sub	sp, #36	@ 0x24
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	60f8      	str	r0, [r7, #12]
 8001fc2:	60b9      	str	r1, [r7, #8]
 8001fc4:	607a      	str	r2, [r7, #4]
 8001fc6:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fce:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001fd8:	7ffb      	ldrb	r3, [r7, #31]
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d003      	beq.n	8001fe6 <HAL_CAN_AddTxMessage+0x2c>
 8001fde:	7ffb      	ldrb	r3, [r7, #31]
 8001fe0:	2b02      	cmp	r3, #2
 8001fe2:	f040 80ad 	bne.w	8002140 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001fe6:	69bb      	ldr	r3, [r7, #24]
 8001fe8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d10a      	bne.n	8002006 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001ff0:	69bb      	ldr	r3, [r7, #24]
 8001ff2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d105      	bne.n	8002006 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001ffa:	69bb      	ldr	r3, [r7, #24]
 8001ffc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002000:	2b00      	cmp	r3, #0
 8002002:	f000 8095 	beq.w	8002130 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002006:	69bb      	ldr	r3, [r7, #24]
 8002008:	0e1b      	lsrs	r3, r3, #24
 800200a:	f003 0303 	and.w	r3, r3, #3
 800200e:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002010:	2201      	movs	r2, #1
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	409a      	lsls	r2, r3
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d10d      	bne.n	800203e <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800202c:	68f9      	ldr	r1, [r7, #12]
 800202e:	6809      	ldr	r1, [r1, #0]
 8002030:	431a      	orrs	r2, r3
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	3318      	adds	r3, #24
 8002036:	011b      	lsls	r3, r3, #4
 8002038:	440b      	add	r3, r1
 800203a:	601a      	str	r2, [r3, #0]
 800203c:	e00f      	b.n	800205e <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002048:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800204e:	68f9      	ldr	r1, [r7, #12]
 8002050:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002052:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	3318      	adds	r3, #24
 8002058:	011b      	lsls	r3, r3, #4
 800205a:	440b      	add	r3, r1
 800205c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	6819      	ldr	r1, [r3, #0]
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	691a      	ldr	r2, [r3, #16]
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	3318      	adds	r3, #24
 800206a:	011b      	lsls	r3, r3, #4
 800206c:	440b      	add	r3, r1
 800206e:	3304      	adds	r3, #4
 8002070:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	7d1b      	ldrb	r3, [r3, #20]
 8002076:	2b01      	cmp	r3, #1
 8002078:	d111      	bne.n	800209e <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	3318      	adds	r3, #24
 8002082:	011b      	lsls	r3, r3, #4
 8002084:	4413      	add	r3, r2
 8002086:	3304      	adds	r3, #4
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	68fa      	ldr	r2, [r7, #12]
 800208c:	6811      	ldr	r1, [r2, #0]
 800208e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	3318      	adds	r3, #24
 8002096:	011b      	lsls	r3, r3, #4
 8002098:	440b      	add	r3, r1
 800209a:	3304      	adds	r3, #4
 800209c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	3307      	adds	r3, #7
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	061a      	lsls	r2, r3, #24
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	3306      	adds	r3, #6
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	041b      	lsls	r3, r3, #16
 80020ae:	431a      	orrs	r2, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	3305      	adds	r3, #5
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	021b      	lsls	r3, r3, #8
 80020b8:	4313      	orrs	r3, r2
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	3204      	adds	r2, #4
 80020be:	7812      	ldrb	r2, [r2, #0]
 80020c0:	4610      	mov	r0, r2
 80020c2:	68fa      	ldr	r2, [r7, #12]
 80020c4:	6811      	ldr	r1, [r2, #0]
 80020c6:	ea43 0200 	orr.w	r2, r3, r0
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	011b      	lsls	r3, r3, #4
 80020ce:	440b      	add	r3, r1
 80020d0:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80020d4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	3303      	adds	r3, #3
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	061a      	lsls	r2, r3, #24
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	3302      	adds	r3, #2
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	041b      	lsls	r3, r3, #16
 80020e6:	431a      	orrs	r2, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	3301      	adds	r3, #1
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	021b      	lsls	r3, r3, #8
 80020f0:	4313      	orrs	r3, r2
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	7812      	ldrb	r2, [r2, #0]
 80020f6:	4610      	mov	r0, r2
 80020f8:	68fa      	ldr	r2, [r7, #12]
 80020fa:	6811      	ldr	r1, [r2, #0]
 80020fc:	ea43 0200 	orr.w	r2, r3, r0
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	011b      	lsls	r3, r3, #4
 8002104:	440b      	add	r3, r1
 8002106:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 800210a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	3318      	adds	r3, #24
 8002114:	011b      	lsls	r3, r3, #4
 8002116:	4413      	add	r3, r2
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	68fa      	ldr	r2, [r7, #12]
 800211c:	6811      	ldr	r1, [r2, #0]
 800211e:	f043 0201 	orr.w	r2, r3, #1
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	3318      	adds	r3, #24
 8002126:	011b      	lsls	r3, r3, #4
 8002128:	440b      	add	r3, r1
 800212a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800212c:	2300      	movs	r3, #0
 800212e:	e00e      	b.n	800214e <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002134:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e006      	b.n	800214e <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002144:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
  }
}
 800214e:	4618      	mov	r0, r3
 8002150:	3724      	adds	r7, #36	@ 0x24
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr

0800215a <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 800215a:	b480      	push	{r7}
 800215c:	b085      	sub	sp, #20
 800215e:	af00      	add	r7, sp, #0
 8002160:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8002162:	2300      	movs	r3, #0
 8002164:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	f893 3020 	ldrb.w	r3, [r3, #32]
 800216c:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 800216e:	7afb      	ldrb	r3, [r7, #11]
 8002170:	2b01      	cmp	r3, #1
 8002172:	d002      	beq.n	800217a <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8002174:	7afb      	ldrb	r3, [r7, #11]
 8002176:	2b02      	cmp	r3, #2
 8002178:	d11d      	bne.n	80021b6 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002184:	2b00      	cmp	r3, #0
 8002186:	d002      	beq.n	800218e <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	3301      	adds	r3, #1
 800218c:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002198:	2b00      	cmp	r3, #0
 800219a:	d002      	beq.n	80021a2 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	3301      	adds	r3, #1
 80021a0:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d002      	beq.n	80021b6 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	3301      	adds	r3, #1
 80021b4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80021b6:	68fb      	ldr	r3, [r7, #12]
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3714      	adds	r7, #20
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr

080021c4 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80021c4:	b480      	push	{r7}
 80021c6:	b087      	sub	sp, #28
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	60b9      	str	r1, [r7, #8]
 80021ce:	607a      	str	r2, [r7, #4]
 80021d0:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021d8:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80021da:	7dfb      	ldrb	r3, [r7, #23]
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d003      	beq.n	80021e8 <HAL_CAN_GetRxMessage+0x24>
 80021e0:	7dfb      	ldrb	r3, [r7, #23]
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	f040 8103 	bne.w	80023ee <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d10e      	bne.n	800220c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	f003 0303 	and.w	r3, r3, #3
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d116      	bne.n	800222a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002200:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e0f7      	b.n	80023fc <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	691b      	ldr	r3, [r3, #16]
 8002212:	f003 0303 	and.w	r3, r3, #3
 8002216:	2b00      	cmp	r3, #0
 8002218:	d107      	bne.n	800222a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800221e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e0e8      	b.n	80023fc <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	331b      	adds	r3, #27
 8002232:	011b      	lsls	r3, r3, #4
 8002234:	4413      	add	r3, r2
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0204 	and.w	r2, r3, #4
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d10c      	bne.n	8002262 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	331b      	adds	r3, #27
 8002250:	011b      	lsls	r3, r3, #4
 8002252:	4413      	add	r3, r2
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	0d5b      	lsrs	r3, r3, #21
 8002258:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	601a      	str	r2, [r3, #0]
 8002260:	e00b      	b.n	800227a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	331b      	adds	r3, #27
 800226a:	011b      	lsls	r3, r3, #4
 800226c:	4413      	add	r3, r2
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	08db      	lsrs	r3, r3, #3
 8002272:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	331b      	adds	r3, #27
 8002282:	011b      	lsls	r3, r3, #4
 8002284:	4413      	add	r3, r2
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 0202 	and.w	r2, r3, #2
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	331b      	adds	r3, #27
 8002298:	011b      	lsls	r3, r3, #4
 800229a:	4413      	add	r3, r2
 800229c:	3304      	adds	r3, #4
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0308 	and.w	r3, r3, #8
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d003      	beq.n	80022b0 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2208      	movs	r2, #8
 80022ac:	611a      	str	r2, [r3, #16]
 80022ae:	e00b      	b.n	80022c8 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	331b      	adds	r3, #27
 80022b8:	011b      	lsls	r3, r3, #4
 80022ba:	4413      	add	r3, r2
 80022bc:	3304      	adds	r3, #4
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 020f 	and.w	r2, r3, #15
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	331b      	adds	r3, #27
 80022d0:	011b      	lsls	r3, r3, #4
 80022d2:	4413      	add	r3, r2
 80022d4:	3304      	adds	r3, #4
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	0a1b      	lsrs	r3, r3, #8
 80022da:	b2da      	uxtb	r2, r3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	331b      	adds	r3, #27
 80022e8:	011b      	lsls	r3, r3, #4
 80022ea:	4413      	add	r3, r2
 80022ec:	3304      	adds	r3, #4
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	0c1b      	lsrs	r3, r3, #16
 80022f2:	b29a      	uxth	r2, r3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	011b      	lsls	r3, r3, #4
 8002300:	4413      	add	r3, r2
 8002302:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	b2da      	uxtb	r2, r3
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	011b      	lsls	r3, r3, #4
 8002316:	4413      	add	r3, r2
 8002318:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	0a1a      	lsrs	r2, r3, #8
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	3301      	adds	r3, #1
 8002324:	b2d2      	uxtb	r2, r2
 8002326:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	011b      	lsls	r3, r3, #4
 8002330:	4413      	add	r3, r2
 8002332:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	0c1a      	lsrs	r2, r3, #16
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	3302      	adds	r3, #2
 800233e:	b2d2      	uxtb	r2, r2
 8002340:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	011b      	lsls	r3, r3, #4
 800234a:	4413      	add	r3, r2
 800234c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	0e1a      	lsrs	r2, r3, #24
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	3303      	adds	r3, #3
 8002358:	b2d2      	uxtb	r2, r2
 800235a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	011b      	lsls	r3, r3, #4
 8002364:	4413      	add	r3, r2
 8002366:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	3304      	adds	r3, #4
 8002370:	b2d2      	uxtb	r2, r2
 8002372:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	011b      	lsls	r3, r3, #4
 800237c:	4413      	add	r3, r2
 800237e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	0a1a      	lsrs	r2, r3, #8
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	3305      	adds	r3, #5
 800238a:	b2d2      	uxtb	r2, r2
 800238c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	011b      	lsls	r3, r3, #4
 8002396:	4413      	add	r3, r2
 8002398:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	0c1a      	lsrs	r2, r3, #16
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	3306      	adds	r3, #6
 80023a4:	b2d2      	uxtb	r2, r2
 80023a6:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	011b      	lsls	r3, r3, #4
 80023b0:	4413      	add	r3, r2
 80023b2:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	0e1a      	lsrs	r2, r3, #24
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	3307      	adds	r3, #7
 80023be:	b2d2      	uxtb	r2, r2
 80023c0:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d108      	bne.n	80023da <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	68da      	ldr	r2, [r3, #12]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f042 0220 	orr.w	r2, r2, #32
 80023d6:	60da      	str	r2, [r3, #12]
 80023d8:	e007      	b.n	80023ea <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	691a      	ldr	r2, [r3, #16]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f042 0220 	orr.w	r2, r2, #32
 80023e8:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80023ea:	2300      	movs	r3, #0
 80023ec:	e006      	b.n	80023fc <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023f2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
  }
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	371c      	adds	r7, #28
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr

08002408 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002408:	b480      	push	{r7}
 800240a:	b085      	sub	sp, #20
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002418:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800241a:	7bfb      	ldrb	r3, [r7, #15]
 800241c:	2b01      	cmp	r3, #1
 800241e:	d002      	beq.n	8002426 <HAL_CAN_ActivateNotification+0x1e>
 8002420:	7bfb      	ldrb	r3, [r7, #15]
 8002422:	2b02      	cmp	r3, #2
 8002424:	d109      	bne.n	800243a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	6959      	ldr	r1, [r3, #20]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	683a      	ldr	r2, [r7, #0]
 8002432:	430a      	orrs	r2, r1
 8002434:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002436:	2300      	movs	r3, #0
 8002438:	e006      	b.n	8002448 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800243e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
  }
}
 8002448:	4618      	mov	r0, r3
 800244a:	3714      	adds	r7, #20
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr

08002454 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b08a      	sub	sp, #40	@ 0x28
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800245c:	2300      	movs	r3, #0
 800245e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	695b      	ldr	r3, [r3, #20]
 8002466:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	68db      	ldr	r3, [r3, #12]
 800247e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	691b      	ldr	r3, [r3, #16]
 8002486:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	699b      	ldr	r3, [r3, #24]
 800248e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002490:	6a3b      	ldr	r3, [r7, #32]
 8002492:	f003 0301 	and.w	r3, r3, #1
 8002496:	2b00      	cmp	r3, #0
 8002498:	d07c      	beq.n	8002594 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800249a:	69bb      	ldr	r3, [r7, #24]
 800249c:	f003 0301 	and.w	r3, r3, #1
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d023      	beq.n	80024ec <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	2201      	movs	r2, #1
 80024aa:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80024ac:	69bb      	ldr	r3, [r7, #24]
 80024ae:	f003 0302 	and.w	r3, r3, #2
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d003      	beq.n	80024be <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f000 f983 	bl	80027c2 <HAL_CAN_TxMailbox0CompleteCallback>
 80024bc:	e016      	b.n	80024ec <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80024be:	69bb      	ldr	r3, [r7, #24]
 80024c0:	f003 0304 	and.w	r3, r3, #4
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d004      	beq.n	80024d2 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80024c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ca:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80024ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80024d0:	e00c      	b.n	80024ec <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80024d2:	69bb      	ldr	r3, [r7, #24]
 80024d4:	f003 0308 	and.w	r3, r3, #8
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d004      	beq.n	80024e6 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80024dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024de:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80024e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80024e4:	e002      	b.n	80024ec <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f000 f989 	bl	80027fe <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80024ec:	69bb      	ldr	r3, [r7, #24]
 80024ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d024      	beq.n	8002540 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80024fe:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002500:	69bb      	ldr	r3, [r7, #24]
 8002502:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002506:	2b00      	cmp	r3, #0
 8002508:	d003      	beq.n	8002512 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f000 f963 	bl	80027d6 <HAL_CAN_TxMailbox1CompleteCallback>
 8002510:	e016      	b.n	8002540 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002512:	69bb      	ldr	r3, [r7, #24]
 8002514:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002518:	2b00      	cmp	r3, #0
 800251a:	d004      	beq.n	8002526 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800251c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800251e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002522:	627b      	str	r3, [r7, #36]	@ 0x24
 8002524:	e00c      	b.n	8002540 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800252c:	2b00      	cmp	r3, #0
 800252e:	d004      	beq.n	800253a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002532:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002536:	627b      	str	r3, [r7, #36]	@ 0x24
 8002538:	e002      	b.n	8002540 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f000 f969 	bl	8002812 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002540:	69bb      	ldr	r3, [r7, #24]
 8002542:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d024      	beq.n	8002594 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002552:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002554:	69bb      	ldr	r3, [r7, #24]
 8002556:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d003      	beq.n	8002566 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f000 f943 	bl	80027ea <HAL_CAN_TxMailbox2CompleteCallback>
 8002564:	e016      	b.n	8002594 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d004      	beq.n	800257a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002572:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002576:	627b      	str	r3, [r7, #36]	@ 0x24
 8002578:	e00c      	b.n	8002594 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800257a:	69bb      	ldr	r3, [r7, #24]
 800257c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002580:	2b00      	cmp	r3, #0
 8002582:	d004      	beq.n	800258e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002586:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800258a:	627b      	str	r3, [r7, #36]	@ 0x24
 800258c:	e002      	b.n	8002594 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f000 f949 	bl	8002826 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002594:	6a3b      	ldr	r3, [r7, #32]
 8002596:	f003 0308 	and.w	r3, r3, #8
 800259a:	2b00      	cmp	r3, #0
 800259c:	d00c      	beq.n	80025b8 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	f003 0310 	and.w	r3, r3, #16
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d007      	beq.n	80025b8 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80025a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025aa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80025ae:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	2210      	movs	r2, #16
 80025b6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80025b8:	6a3b      	ldr	r3, [r7, #32]
 80025ba:	f003 0304 	and.w	r3, r3, #4
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d00b      	beq.n	80025da <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	f003 0308 	and.w	r3, r3, #8
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d006      	beq.n	80025da <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	2208      	movs	r2, #8
 80025d2:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f000 f930 	bl	800283a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80025da:	6a3b      	ldr	r3, [r7, #32]
 80025dc:	f003 0302 	and.w	r3, r3, #2
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d009      	beq.n	80025f8 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	f003 0303 	and.w	r3, r3, #3
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d002      	beq.n	80025f8 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f7fd ff70 	bl	80004d8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80025f8:	6a3b      	ldr	r3, [r7, #32]
 80025fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d00c      	beq.n	800261c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	f003 0310 	and.w	r3, r3, #16
 8002608:	2b00      	cmp	r3, #0
 800260a:	d007      	beq.n	800261c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800260c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800260e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002612:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	2210      	movs	r2, #16
 800261a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800261c:	6a3b      	ldr	r3, [r7, #32]
 800261e:	f003 0320 	and.w	r3, r3, #32
 8002622:	2b00      	cmp	r3, #0
 8002624:	d00b      	beq.n	800263e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	f003 0308 	and.w	r3, r3, #8
 800262c:	2b00      	cmp	r3, #0
 800262e:	d006      	beq.n	800263e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	2208      	movs	r2, #8
 8002636:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	f000 f912 	bl	8002862 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800263e:	6a3b      	ldr	r3, [r7, #32]
 8002640:	f003 0310 	and.w	r3, r3, #16
 8002644:	2b00      	cmp	r3, #0
 8002646:	d009      	beq.n	800265c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	691b      	ldr	r3, [r3, #16]
 800264e:	f003 0303 	and.w	r3, r3, #3
 8002652:	2b00      	cmp	r3, #0
 8002654:	d002      	beq.n	800265c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f000 f8f9 	bl	800284e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800265c:	6a3b      	ldr	r3, [r7, #32]
 800265e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d00b      	beq.n	800267e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	f003 0310 	and.w	r3, r3, #16
 800266c:	2b00      	cmp	r3, #0
 800266e:	d006      	beq.n	800267e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	2210      	movs	r2, #16
 8002676:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	f000 f8fc 	bl	8002876 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800267e:	6a3b      	ldr	r3, [r7, #32]
 8002680:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002684:	2b00      	cmp	r3, #0
 8002686:	d00b      	beq.n	80026a0 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	f003 0308 	and.w	r3, r3, #8
 800268e:	2b00      	cmp	r3, #0
 8002690:	d006      	beq.n	80026a0 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	2208      	movs	r2, #8
 8002698:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f000 f8f5 	bl	800288a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80026a0:	6a3b      	ldr	r3, [r7, #32]
 80026a2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d07b      	beq.n	80027a2 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	f003 0304 	and.w	r3, r3, #4
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d072      	beq.n	800279a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80026b4:	6a3b      	ldr	r3, [r7, #32]
 80026b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d008      	beq.n	80026d0 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d003      	beq.n	80026d0 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80026c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ca:	f043 0301 	orr.w	r3, r3, #1
 80026ce:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80026d0:	6a3b      	ldr	r3, [r7, #32]
 80026d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d008      	beq.n	80026ec <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d003      	beq.n	80026ec <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80026e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026e6:	f043 0302 	orr.w	r3, r3, #2
 80026ea:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80026ec:	6a3b      	ldr	r3, [r7, #32]
 80026ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d008      	beq.n	8002708 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d003      	beq.n	8002708 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002702:	f043 0304 	orr.w	r3, r3, #4
 8002706:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002708:	6a3b      	ldr	r3, [r7, #32]
 800270a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800270e:	2b00      	cmp	r3, #0
 8002710:	d043      	beq.n	800279a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002718:	2b00      	cmp	r3, #0
 800271a:	d03e      	beq.n	800279a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002722:	2b60      	cmp	r3, #96	@ 0x60
 8002724:	d02b      	beq.n	800277e <HAL_CAN_IRQHandler+0x32a>
 8002726:	2b60      	cmp	r3, #96	@ 0x60
 8002728:	d82e      	bhi.n	8002788 <HAL_CAN_IRQHandler+0x334>
 800272a:	2b50      	cmp	r3, #80	@ 0x50
 800272c:	d022      	beq.n	8002774 <HAL_CAN_IRQHandler+0x320>
 800272e:	2b50      	cmp	r3, #80	@ 0x50
 8002730:	d82a      	bhi.n	8002788 <HAL_CAN_IRQHandler+0x334>
 8002732:	2b40      	cmp	r3, #64	@ 0x40
 8002734:	d019      	beq.n	800276a <HAL_CAN_IRQHandler+0x316>
 8002736:	2b40      	cmp	r3, #64	@ 0x40
 8002738:	d826      	bhi.n	8002788 <HAL_CAN_IRQHandler+0x334>
 800273a:	2b30      	cmp	r3, #48	@ 0x30
 800273c:	d010      	beq.n	8002760 <HAL_CAN_IRQHandler+0x30c>
 800273e:	2b30      	cmp	r3, #48	@ 0x30
 8002740:	d822      	bhi.n	8002788 <HAL_CAN_IRQHandler+0x334>
 8002742:	2b10      	cmp	r3, #16
 8002744:	d002      	beq.n	800274c <HAL_CAN_IRQHandler+0x2f8>
 8002746:	2b20      	cmp	r3, #32
 8002748:	d005      	beq.n	8002756 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800274a:	e01d      	b.n	8002788 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800274c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800274e:	f043 0308 	orr.w	r3, r3, #8
 8002752:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002754:	e019      	b.n	800278a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002758:	f043 0310 	orr.w	r3, r3, #16
 800275c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800275e:	e014      	b.n	800278a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002762:	f043 0320 	orr.w	r3, r3, #32
 8002766:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002768:	e00f      	b.n	800278a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800276a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800276c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002770:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002772:	e00a      	b.n	800278a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002776:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800277a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800277c:	e005      	b.n	800278a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800277e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002780:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002784:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002786:	e000      	b.n	800278a <HAL_CAN_IRQHandler+0x336>
            break;
 8002788:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	699a      	ldr	r2, [r3, #24]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002798:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	2204      	movs	r2, #4
 80027a0:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80027a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d008      	beq.n	80027ba <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80027ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ae:	431a      	orrs	r2, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	f000 f872 	bl	800289e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80027ba:	bf00      	nop
 80027bc:	3728      	adds	r7, #40	@ 0x28
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}

080027c2 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80027c2:	b480      	push	{r7}
 80027c4:	b083      	sub	sp, #12
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80027ca:	bf00      	nop
 80027cc:	370c      	adds	r7, #12
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr

080027d6 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80027d6:	b480      	push	{r7}
 80027d8:	b083      	sub	sp, #12
 80027da:	af00      	add	r7, sp, #0
 80027dc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80027de:	bf00      	nop
 80027e0:	370c      	adds	r7, #12
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr

080027ea <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80027ea:	b480      	push	{r7}
 80027ec:	b083      	sub	sp, #12
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80027f2:	bf00      	nop
 80027f4:	370c      	adds	r7, #12
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr

080027fe <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80027fe:	b480      	push	{r7}
 8002800:	b083      	sub	sp, #12
 8002802:	af00      	add	r7, sp, #0
 8002804:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002806:	bf00      	nop
 8002808:	370c      	adds	r7, #12
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr

08002812 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002812:	b480      	push	{r7}
 8002814:	b083      	sub	sp, #12
 8002816:	af00      	add	r7, sp, #0
 8002818:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800281a:	bf00      	nop
 800281c:	370c      	adds	r7, #12
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr

08002826 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002826:	b480      	push	{r7}
 8002828:	b083      	sub	sp, #12
 800282a:	af00      	add	r7, sp, #0
 800282c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800282e:	bf00      	nop
 8002830:	370c      	adds	r7, #12
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr

0800283a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800283a:	b480      	push	{r7}
 800283c:	b083      	sub	sp, #12
 800283e:	af00      	add	r7, sp, #0
 8002840:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002842:	bf00      	nop
 8002844:	370c      	adds	r7, #12
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr

0800284e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800284e:	b480      	push	{r7}
 8002850:	b083      	sub	sp, #12
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002856:	bf00      	nop
 8002858:	370c      	adds	r7, #12
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr

08002862 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002862:	b480      	push	{r7}
 8002864:	b083      	sub	sp, #12
 8002866:	af00      	add	r7, sp, #0
 8002868:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800286a:	bf00      	nop
 800286c:	370c      	adds	r7, #12
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr

08002876 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002876:	b480      	push	{r7}
 8002878:	b083      	sub	sp, #12
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800287e:	bf00      	nop
 8002880:	370c      	adds	r7, #12
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr

0800288a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800288a:	b480      	push	{r7}
 800288c:	b083      	sub	sp, #12
 800288e:	af00      	add	r7, sp, #0
 8002890:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002892:	bf00      	nop
 8002894:	370c      	adds	r7, #12
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr

0800289e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800289e:	b480      	push	{r7}
 80028a0:	b083      	sub	sp, #12
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80028a6:	bf00      	nop
 80028a8:	370c      	adds	r7, #12
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr
	...

080028b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b085      	sub	sp, #20
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f003 0307 	and.w	r3, r3, #7
 80028c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028c4:	4b0c      	ldr	r3, [pc, #48]	@ (80028f8 <__NVIC_SetPriorityGrouping+0x44>)
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028ca:	68ba      	ldr	r2, [r7, #8]
 80028cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80028d0:	4013      	ands	r3, r2
 80028d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028dc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80028e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028e6:	4a04      	ldr	r2, [pc, #16]	@ (80028f8 <__NVIC_SetPriorityGrouping+0x44>)
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	60d3      	str	r3, [r2, #12]
}
 80028ec:	bf00      	nop
 80028ee:	3714      	adds	r7, #20
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr
 80028f8:	e000ed00 	.word	0xe000ed00

080028fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028fc:	b480      	push	{r7}
 80028fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002900:	4b04      	ldr	r3, [pc, #16]	@ (8002914 <__NVIC_GetPriorityGrouping+0x18>)
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	0a1b      	lsrs	r3, r3, #8
 8002906:	f003 0307 	and.w	r3, r3, #7
}
 800290a:	4618      	mov	r0, r3
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr
 8002914:	e000ed00 	.word	0xe000ed00

08002918 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	4603      	mov	r3, r0
 8002920:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002926:	2b00      	cmp	r3, #0
 8002928:	db0b      	blt.n	8002942 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800292a:	79fb      	ldrb	r3, [r7, #7]
 800292c:	f003 021f 	and.w	r2, r3, #31
 8002930:	4907      	ldr	r1, [pc, #28]	@ (8002950 <__NVIC_EnableIRQ+0x38>)
 8002932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002936:	095b      	lsrs	r3, r3, #5
 8002938:	2001      	movs	r0, #1
 800293a:	fa00 f202 	lsl.w	r2, r0, r2
 800293e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002942:	bf00      	nop
 8002944:	370c      	adds	r7, #12
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop
 8002950:	e000e100 	.word	0xe000e100

08002954 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	4603      	mov	r3, r0
 800295c:	6039      	str	r1, [r7, #0]
 800295e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002960:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002964:	2b00      	cmp	r3, #0
 8002966:	db0a      	blt.n	800297e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	b2da      	uxtb	r2, r3
 800296c:	490c      	ldr	r1, [pc, #48]	@ (80029a0 <__NVIC_SetPriority+0x4c>)
 800296e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002972:	0112      	lsls	r2, r2, #4
 8002974:	b2d2      	uxtb	r2, r2
 8002976:	440b      	add	r3, r1
 8002978:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800297c:	e00a      	b.n	8002994 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	b2da      	uxtb	r2, r3
 8002982:	4908      	ldr	r1, [pc, #32]	@ (80029a4 <__NVIC_SetPriority+0x50>)
 8002984:	79fb      	ldrb	r3, [r7, #7]
 8002986:	f003 030f 	and.w	r3, r3, #15
 800298a:	3b04      	subs	r3, #4
 800298c:	0112      	lsls	r2, r2, #4
 800298e:	b2d2      	uxtb	r2, r2
 8002990:	440b      	add	r3, r1
 8002992:	761a      	strb	r2, [r3, #24]
}
 8002994:	bf00      	nop
 8002996:	370c      	adds	r7, #12
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr
 80029a0:	e000e100 	.word	0xe000e100
 80029a4:	e000ed00 	.word	0xe000ed00

080029a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b089      	sub	sp, #36	@ 0x24
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	60f8      	str	r0, [r7, #12]
 80029b0:	60b9      	str	r1, [r7, #8]
 80029b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	f003 0307 	and.w	r3, r3, #7
 80029ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	f1c3 0307 	rsb	r3, r3, #7
 80029c2:	2b04      	cmp	r3, #4
 80029c4:	bf28      	it	cs
 80029c6:	2304      	movcs	r3, #4
 80029c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	3304      	adds	r3, #4
 80029ce:	2b06      	cmp	r3, #6
 80029d0:	d902      	bls.n	80029d8 <NVIC_EncodePriority+0x30>
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	3b03      	subs	r3, #3
 80029d6:	e000      	b.n	80029da <NVIC_EncodePriority+0x32>
 80029d8:	2300      	movs	r3, #0
 80029da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029dc:	f04f 32ff 	mov.w	r2, #4294967295
 80029e0:	69bb      	ldr	r3, [r7, #24]
 80029e2:	fa02 f303 	lsl.w	r3, r2, r3
 80029e6:	43da      	mvns	r2, r3
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	401a      	ands	r2, r3
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029f0:	f04f 31ff 	mov.w	r1, #4294967295
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	fa01 f303 	lsl.w	r3, r1, r3
 80029fa:	43d9      	mvns	r1, r3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a00:	4313      	orrs	r3, r2
         );
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3724      	adds	r7, #36	@ 0x24
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr
	...

08002a10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	3b01      	subs	r3, #1
 8002a1c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a20:	d301      	bcc.n	8002a26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a22:	2301      	movs	r3, #1
 8002a24:	e00f      	b.n	8002a46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a26:	4a0a      	ldr	r2, [pc, #40]	@ (8002a50 <SysTick_Config+0x40>)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	3b01      	subs	r3, #1
 8002a2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a2e:	210f      	movs	r1, #15
 8002a30:	f04f 30ff 	mov.w	r0, #4294967295
 8002a34:	f7ff ff8e 	bl	8002954 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a38:	4b05      	ldr	r3, [pc, #20]	@ (8002a50 <SysTick_Config+0x40>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a3e:	4b04      	ldr	r3, [pc, #16]	@ (8002a50 <SysTick_Config+0x40>)
 8002a40:	2207      	movs	r2, #7
 8002a42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a44:	2300      	movs	r3, #0
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3708      	adds	r7, #8
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	e000e010 	.word	0xe000e010

08002a54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b082      	sub	sp, #8
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a5c:	6878      	ldr	r0, [r7, #4]
 8002a5e:	f7ff ff29 	bl	80028b4 <__NVIC_SetPriorityGrouping>
}
 8002a62:	bf00      	nop
 8002a64:	3708      	adds	r7, #8
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}

08002a6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a6a:	b580      	push	{r7, lr}
 8002a6c:	b086      	sub	sp, #24
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	4603      	mov	r3, r0
 8002a72:	60b9      	str	r1, [r7, #8]
 8002a74:	607a      	str	r2, [r7, #4]
 8002a76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a7c:	f7ff ff3e 	bl	80028fc <__NVIC_GetPriorityGrouping>
 8002a80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	68b9      	ldr	r1, [r7, #8]
 8002a86:	6978      	ldr	r0, [r7, #20]
 8002a88:	f7ff ff8e 	bl	80029a8 <NVIC_EncodePriority>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a92:	4611      	mov	r1, r2
 8002a94:	4618      	mov	r0, r3
 8002a96:	f7ff ff5d 	bl	8002954 <__NVIC_SetPriority>
}
 8002a9a:	bf00      	nop
 8002a9c:	3718      	adds	r7, #24
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}

08002aa2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002aa2:	b580      	push	{r7, lr}
 8002aa4:	b082      	sub	sp, #8
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002aac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f7ff ff31 	bl	8002918 <__NVIC_EnableIRQ>
}
 8002ab6:	bf00      	nop
 8002ab8:	3708      	adds	r7, #8
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}

08002abe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002abe:	b580      	push	{r7, lr}
 8002ac0:	b082      	sub	sp, #8
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f7ff ffa2 	bl	8002a10 <SysTick_Config>
 8002acc:	4603      	mov	r3, r0
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3708      	adds	r7, #8
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}

08002ad6 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ad6:	b580      	push	{r7, lr}
 8002ad8:	b084      	sub	sp, #16
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d101      	bne.n	8002aec <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e037      	b.n	8002b5c <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2202      	movs	r2, #2
 8002af0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002b02:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002b06:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002b10:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	695b      	ldr	r3, [r3, #20]
 8002b22:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b28:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	69db      	ldr	r3, [r3, #28]
 8002b2e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002b30:	68fa      	ldr	r2, [r7, #12]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	68fa      	ldr	r2, [r7, #12]
 8002b3c:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f000 f940 	bl	8002dc4 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2200      	movs	r2, #0
 8002b48:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2200      	movs	r2, #0
 8002b56:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002b5a:	2300      	movs	r3, #0
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3710      	adds	r7, #16
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b086      	sub	sp, #24
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	60f8      	str	r0, [r7, #12]
 8002b6c:	60b9      	str	r1, [r7, #8]
 8002b6e:	607a      	str	r2, [r7, #4]
 8002b70:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b72:	2300      	movs	r3, #0
 8002b74:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d101      	bne.n	8002b84 <HAL_DMA_Start_IT+0x20>
 8002b80:	2302      	movs	r3, #2
 8002b82:	e04a      	b.n	8002c1a <HAL_DMA_Start_IT+0xb6>
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2201      	movs	r2, #1
 8002b88:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d13a      	bne.n	8002c0c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2202      	movs	r2, #2
 8002b9a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f022 0201 	bic.w	r2, r2, #1
 8002bb2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	68b9      	ldr	r1, [r7, #8]
 8002bba:	68f8      	ldr	r0, [r7, #12]
 8002bbc:	f000 f8d4 	bl	8002d68 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d008      	beq.n	8002bda <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f042 020e 	orr.w	r2, r2, #14
 8002bd6:	601a      	str	r2, [r3, #0]
 8002bd8:	e00f      	b.n	8002bfa <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f042 020a 	orr.w	r2, r2, #10
 8002be8:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f022 0204 	bic.w	r2, r2, #4
 8002bf8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f042 0201 	orr.w	r2, r2, #1
 8002c08:	601a      	str	r2, [r3, #0]
 8002c0a:	e005      	b.n	8002c18 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002c14:	2302      	movs	r3, #2
 8002c16:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002c18:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3718      	adds	r7, #24
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}

08002c22 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c22:	b580      	push	{r7, lr}
 8002c24:	b084      	sub	sp, #16
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c3e:	2204      	movs	r2, #4
 8002c40:	409a      	lsls	r2, r3
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	4013      	ands	r3, r2
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d024      	beq.n	8002c94 <HAL_DMA_IRQHandler+0x72>
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	f003 0304 	and.w	r3, r3, #4
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d01f      	beq.n	8002c94 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 0320 	and.w	r3, r3, #32
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d107      	bne.n	8002c72 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f022 0204 	bic.w	r2, r2, #4
 8002c70:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c7a:	2104      	movs	r1, #4
 8002c7c:	fa01 f202 	lsl.w	r2, r1, r2
 8002c80:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d06a      	beq.n	8002d60 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002c92:	e065      	b.n	8002d60 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c98:	2202      	movs	r2, #2
 8002c9a:	409a      	lsls	r2, r3
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d02c      	beq.n	8002cfe <HAL_DMA_IRQHandler+0xdc>
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	f003 0302 	and.w	r3, r3, #2
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d027      	beq.n	8002cfe <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 0320 	and.w	r3, r3, #32
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d10b      	bne.n	8002cd4 <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f022 020a 	bic.w	r2, r2, #10
 8002cca:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cdc:	2102      	movs	r1, #2
 8002cde:	fa01 f202 	lsl.w	r2, r1, r2
 8002ce2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d035      	beq.n	8002d60 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002cfc:	e030      	b.n	8002d60 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d02:	2208      	movs	r2, #8
 8002d04:	409a      	lsls	r2, r3
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	4013      	ands	r3, r2
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d028      	beq.n	8002d60 <HAL_DMA_IRQHandler+0x13e>
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	f003 0308 	and.w	r3, r3, #8
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d023      	beq.n	8002d60 <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f022 020e 	bic.w	r2, r2, #14
 8002d26:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d30:	2101      	movs	r1, #1
 8002d32:	fa01 f202 	lsl.w	r2, r1, r2
 8002d36:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2201      	movs	r2, #1
 8002d42:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d004      	beq.n	8002d60 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	4798      	blx	r3
    }
  }
}
 8002d5e:	e7ff      	b.n	8002d60 <HAL_DMA_IRQHandler+0x13e>
 8002d60:	bf00      	nop
 8002d62:	3710      	adds	r7, #16
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}

08002d68 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b085      	sub	sp, #20
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	60f8      	str	r0, [r7, #12]
 8002d70:	60b9      	str	r1, [r7, #8]
 8002d72:	607a      	str	r2, [r7, #4]
 8002d74:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d7e:	2101      	movs	r1, #1
 8002d80:	fa01 f202 	lsl.w	r2, r1, r2
 8002d84:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	683a      	ldr	r2, [r7, #0]
 8002d8c:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	2b10      	cmp	r3, #16
 8002d94:	d108      	bne.n	8002da8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	68ba      	ldr	r2, [r7, #8]
 8002da4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002da6:	e007      	b.n	8002db8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	68ba      	ldr	r2, [r7, #8]
 8002dae:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	60da      	str	r2, [r3, #12]
}
 8002db8:	bf00      	nop
 8002dba:	3714      	adds	r7, #20
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr

08002dc4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	4b09      	ldr	r3, [pc, #36]	@ (8002df8 <DMA_CalcBaseAndBitshift+0x34>)
 8002dd4:	4413      	add	r3, r2
 8002dd6:	4a09      	ldr	r2, [pc, #36]	@ (8002dfc <DMA_CalcBaseAndBitshift+0x38>)
 8002dd8:	fba2 2303 	umull	r2, r3, r2, r3
 8002ddc:	091b      	lsrs	r3, r3, #4
 8002dde:	009a      	lsls	r2, r3, #2
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	4a06      	ldr	r2, [pc, #24]	@ (8002e00 <DMA_CalcBaseAndBitshift+0x3c>)
 8002de8:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 8002dea:	bf00      	nop
 8002dec:	370c      	adds	r7, #12
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr
 8002df6:	bf00      	nop
 8002df8:	bffdfff8 	.word	0xbffdfff8
 8002dfc:	cccccccd 	.word	0xcccccccd
 8002e00:	40020000 	.word	0x40020000

08002e04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b087      	sub	sp, #28
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e12:	e14e      	b.n	80030b2 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	2101      	movs	r1, #1
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e20:	4013      	ands	r3, r2
 8002e22:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	f000 8140 	beq.w	80030ac <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f003 0303 	and.w	r3, r3, #3
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d005      	beq.n	8002e44 <HAL_GPIO_Init+0x40>
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f003 0303 	and.w	r3, r3, #3
 8002e40:	2b02      	cmp	r3, #2
 8002e42:	d130      	bne.n	8002ea6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	005b      	lsls	r3, r3, #1
 8002e4e:	2203      	movs	r2, #3
 8002e50:	fa02 f303 	lsl.w	r3, r2, r3
 8002e54:	43db      	mvns	r3, r3
 8002e56:	693a      	ldr	r2, [r7, #16]
 8002e58:	4013      	ands	r3, r2
 8002e5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	68da      	ldr	r2, [r3, #12]
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	005b      	lsls	r3, r3, #1
 8002e64:	fa02 f303 	lsl.w	r3, r2, r3
 8002e68:	693a      	ldr	r2, [r7, #16]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	693a      	ldr	r2, [r7, #16]
 8002e72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e82:	43db      	mvns	r3, r3
 8002e84:	693a      	ldr	r2, [r7, #16]
 8002e86:	4013      	ands	r3, r2
 8002e88:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	091b      	lsrs	r3, r3, #4
 8002e90:	f003 0201 	and.w	r2, r3, #1
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9a:	693a      	ldr	r2, [r7, #16]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	693a      	ldr	r2, [r7, #16]
 8002ea4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	f003 0303 	and.w	r3, r3, #3
 8002eae:	2b03      	cmp	r3, #3
 8002eb0:	d017      	beq.n	8002ee2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	005b      	lsls	r3, r3, #1
 8002ebc:	2203      	movs	r2, #3
 8002ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec2:	43db      	mvns	r3, r3
 8002ec4:	693a      	ldr	r2, [r7, #16]
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	689a      	ldr	r2, [r3, #8]
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	005b      	lsls	r3, r3, #1
 8002ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed6:	693a      	ldr	r2, [r7, #16]
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	693a      	ldr	r2, [r7, #16]
 8002ee0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	f003 0303 	and.w	r3, r3, #3
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	d123      	bne.n	8002f36 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	08da      	lsrs	r2, r3, #3
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	3208      	adds	r2, #8
 8002ef6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002efa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	f003 0307 	and.w	r3, r3, #7
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	220f      	movs	r2, #15
 8002f06:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0a:	43db      	mvns	r3, r3
 8002f0c:	693a      	ldr	r2, [r7, #16]
 8002f0e:	4013      	ands	r3, r2
 8002f10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	691a      	ldr	r2, [r3, #16]
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	f003 0307 	and.w	r3, r3, #7
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f22:	693a      	ldr	r2, [r7, #16]
 8002f24:	4313      	orrs	r3, r2
 8002f26:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	08da      	lsrs	r2, r3, #3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	3208      	adds	r2, #8
 8002f30:	6939      	ldr	r1, [r7, #16]
 8002f32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	005b      	lsls	r3, r3, #1
 8002f40:	2203      	movs	r2, #3
 8002f42:	fa02 f303 	lsl.w	r3, r2, r3
 8002f46:	43db      	mvns	r3, r3
 8002f48:	693a      	ldr	r2, [r7, #16]
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	f003 0203 	and.w	r2, r3, #3
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	005b      	lsls	r3, r3, #1
 8002f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5e:	693a      	ldr	r2, [r7, #16]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	693a      	ldr	r2, [r7, #16]
 8002f68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	f000 809a 	beq.w	80030ac <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f78:	4b55      	ldr	r3, [pc, #340]	@ (80030d0 <HAL_GPIO_Init+0x2cc>)
 8002f7a:	699b      	ldr	r3, [r3, #24]
 8002f7c:	4a54      	ldr	r2, [pc, #336]	@ (80030d0 <HAL_GPIO_Init+0x2cc>)
 8002f7e:	f043 0301 	orr.w	r3, r3, #1
 8002f82:	6193      	str	r3, [r2, #24]
 8002f84:	4b52      	ldr	r3, [pc, #328]	@ (80030d0 <HAL_GPIO_Init+0x2cc>)
 8002f86:	699b      	ldr	r3, [r3, #24]
 8002f88:	f003 0301 	and.w	r3, r3, #1
 8002f8c:	60bb      	str	r3, [r7, #8]
 8002f8e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002f90:	4a50      	ldr	r2, [pc, #320]	@ (80030d4 <HAL_GPIO_Init+0x2d0>)
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	089b      	lsrs	r3, r3, #2
 8002f96:	3302      	adds	r3, #2
 8002f98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f9c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	f003 0303 	and.w	r3, r3, #3
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	220f      	movs	r2, #15
 8002fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fac:	43db      	mvns	r3, r3
 8002fae:	693a      	ldr	r2, [r7, #16]
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002fba:	d013      	beq.n	8002fe4 <HAL_GPIO_Init+0x1e0>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	4a46      	ldr	r2, [pc, #280]	@ (80030d8 <HAL_GPIO_Init+0x2d4>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d00d      	beq.n	8002fe0 <HAL_GPIO_Init+0x1dc>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	4a45      	ldr	r2, [pc, #276]	@ (80030dc <HAL_GPIO_Init+0x2d8>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d007      	beq.n	8002fdc <HAL_GPIO_Init+0x1d8>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	4a44      	ldr	r2, [pc, #272]	@ (80030e0 <HAL_GPIO_Init+0x2dc>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d101      	bne.n	8002fd8 <HAL_GPIO_Init+0x1d4>
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	e006      	b.n	8002fe6 <HAL_GPIO_Init+0x1e2>
 8002fd8:	2305      	movs	r3, #5
 8002fda:	e004      	b.n	8002fe6 <HAL_GPIO_Init+0x1e2>
 8002fdc:	2302      	movs	r3, #2
 8002fde:	e002      	b.n	8002fe6 <HAL_GPIO_Init+0x1e2>
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e000      	b.n	8002fe6 <HAL_GPIO_Init+0x1e2>
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	697a      	ldr	r2, [r7, #20]
 8002fe8:	f002 0203 	and.w	r2, r2, #3
 8002fec:	0092      	lsls	r2, r2, #2
 8002fee:	4093      	lsls	r3, r2
 8002ff0:	693a      	ldr	r2, [r7, #16]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002ff6:	4937      	ldr	r1, [pc, #220]	@ (80030d4 <HAL_GPIO_Init+0x2d0>)
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	089b      	lsrs	r3, r3, #2
 8002ffc:	3302      	adds	r3, #2
 8002ffe:	693a      	ldr	r2, [r7, #16]
 8003000:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003004:	4b37      	ldr	r3, [pc, #220]	@ (80030e4 <HAL_GPIO_Init+0x2e0>)
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	43db      	mvns	r3, r3
 800300e:	693a      	ldr	r2, [r7, #16]
 8003010:	4013      	ands	r3, r2
 8003012:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800301c:	2b00      	cmp	r3, #0
 800301e:	d003      	beq.n	8003028 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8003020:	693a      	ldr	r2, [r7, #16]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	4313      	orrs	r3, r2
 8003026:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003028:	4a2e      	ldr	r2, [pc, #184]	@ (80030e4 <HAL_GPIO_Init+0x2e0>)
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800302e:	4b2d      	ldr	r3, [pc, #180]	@ (80030e4 <HAL_GPIO_Init+0x2e0>)
 8003030:	68db      	ldr	r3, [r3, #12]
 8003032:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	43db      	mvns	r3, r3
 8003038:	693a      	ldr	r2, [r7, #16]
 800303a:	4013      	ands	r3, r2
 800303c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d003      	beq.n	8003052 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800304a:	693a      	ldr	r2, [r7, #16]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	4313      	orrs	r3, r2
 8003050:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003052:	4a24      	ldr	r2, [pc, #144]	@ (80030e4 <HAL_GPIO_Init+0x2e0>)
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003058:	4b22      	ldr	r3, [pc, #136]	@ (80030e4 <HAL_GPIO_Init+0x2e0>)
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	43db      	mvns	r3, r3
 8003062:	693a      	ldr	r2, [r7, #16]
 8003064:	4013      	ands	r3, r2
 8003066:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003070:	2b00      	cmp	r3, #0
 8003072:	d003      	beq.n	800307c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8003074:	693a      	ldr	r2, [r7, #16]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	4313      	orrs	r3, r2
 800307a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800307c:	4a19      	ldr	r2, [pc, #100]	@ (80030e4 <HAL_GPIO_Init+0x2e0>)
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003082:	4b18      	ldr	r3, [pc, #96]	@ (80030e4 <HAL_GPIO_Init+0x2e0>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	43db      	mvns	r3, r3
 800308c:	693a      	ldr	r2, [r7, #16]
 800308e:	4013      	ands	r3, r2
 8003090:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800309a:	2b00      	cmp	r3, #0
 800309c:	d003      	beq.n	80030a6 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800309e:	693a      	ldr	r2, [r7, #16]
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80030a6:	4a0f      	ldr	r2, [pc, #60]	@ (80030e4 <HAL_GPIO_Init+0x2e0>)
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	3301      	adds	r3, #1
 80030b0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	fa22 f303 	lsr.w	r3, r2, r3
 80030bc:	2b00      	cmp	r3, #0
 80030be:	f47f aea9 	bne.w	8002e14 <HAL_GPIO_Init+0x10>
  }
}
 80030c2:	bf00      	nop
 80030c4:	bf00      	nop
 80030c6:	371c      	adds	r7, #28
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr
 80030d0:	40021000 	.word	0x40021000
 80030d4:	40010000 	.word	0x40010000
 80030d8:	48000400 	.word	0x48000400
 80030dc:	48000800 	.word	0x48000800
 80030e0:	48000c00 	.word	0x48000c00
 80030e4:	40010400 	.word	0x40010400

080030e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b083      	sub	sp, #12
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	460b      	mov	r3, r1
 80030f2:	807b      	strh	r3, [r7, #2]
 80030f4:	4613      	mov	r3, r2
 80030f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030f8:	787b      	ldrb	r3, [r7, #1]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d003      	beq.n	8003106 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80030fe:	887a      	ldrh	r2, [r7, #2]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003104:	e002      	b.n	800310c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003106:	887a      	ldrh	r2, [r7, #2]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800310c:	bf00      	nop
 800310e:	370c      	adds	r7, #12
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr

08003118 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 800311e:	af00      	add	r7, sp, #0
 8003120:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003124:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003128:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800312a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800312e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d102      	bne.n	800313e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	f001 b823 	b.w	8004184 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800313e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003142:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0301 	and.w	r3, r3, #1
 800314e:	2b00      	cmp	r3, #0
 8003150:	f000 817d 	beq.w	800344e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003154:	4bbc      	ldr	r3, [pc, #752]	@ (8003448 <HAL_RCC_OscConfig+0x330>)
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	f003 030c 	and.w	r3, r3, #12
 800315c:	2b04      	cmp	r3, #4
 800315e:	d00c      	beq.n	800317a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003160:	4bb9      	ldr	r3, [pc, #740]	@ (8003448 <HAL_RCC_OscConfig+0x330>)
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	f003 030c 	and.w	r3, r3, #12
 8003168:	2b08      	cmp	r3, #8
 800316a:	d15c      	bne.n	8003226 <HAL_RCC_OscConfig+0x10e>
 800316c:	4bb6      	ldr	r3, [pc, #728]	@ (8003448 <HAL_RCC_OscConfig+0x330>)
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003174:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003178:	d155      	bne.n	8003226 <HAL_RCC_OscConfig+0x10e>
 800317a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800317e:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003182:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8003186:	fa93 f3a3 	rbit	r3, r3
 800318a:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800318e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003192:	fab3 f383 	clz	r3, r3
 8003196:	b2db      	uxtb	r3, r3
 8003198:	095b      	lsrs	r3, r3, #5
 800319a:	b2db      	uxtb	r3, r3
 800319c:	f043 0301 	orr.w	r3, r3, #1
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d102      	bne.n	80031ac <HAL_RCC_OscConfig+0x94>
 80031a6:	4ba8      	ldr	r3, [pc, #672]	@ (8003448 <HAL_RCC_OscConfig+0x330>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	e015      	b.n	80031d8 <HAL_RCC_OscConfig+0xc0>
 80031ac:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80031b0:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031b4:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 80031b8:	fa93 f3a3 	rbit	r3, r3
 80031bc:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80031c0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80031c4:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80031c8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80031cc:	fa93 f3a3 	rbit	r3, r3
 80031d0:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80031d4:	4b9c      	ldr	r3, [pc, #624]	@ (8003448 <HAL_RCC_OscConfig+0x330>)
 80031d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031d8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80031dc:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 80031e0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80031e4:	fa92 f2a2 	rbit	r2, r2
 80031e8:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 80031ec:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 80031f0:	fab2 f282 	clz	r2, r2
 80031f4:	b2d2      	uxtb	r2, r2
 80031f6:	f042 0220 	orr.w	r2, r2, #32
 80031fa:	b2d2      	uxtb	r2, r2
 80031fc:	f002 021f 	and.w	r2, r2, #31
 8003200:	2101      	movs	r1, #1
 8003202:	fa01 f202 	lsl.w	r2, r1, r2
 8003206:	4013      	ands	r3, r2
 8003208:	2b00      	cmp	r3, #0
 800320a:	f000 811f 	beq.w	800344c <HAL_RCC_OscConfig+0x334>
 800320e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003212:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	2b00      	cmp	r3, #0
 800321c:	f040 8116 	bne.w	800344c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	f000 bfaf 	b.w	8004184 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003226:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800322a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003236:	d106      	bne.n	8003246 <HAL_RCC_OscConfig+0x12e>
 8003238:	4b83      	ldr	r3, [pc, #524]	@ (8003448 <HAL_RCC_OscConfig+0x330>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a82      	ldr	r2, [pc, #520]	@ (8003448 <HAL_RCC_OscConfig+0x330>)
 800323e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003242:	6013      	str	r3, [r2, #0]
 8003244:	e036      	b.n	80032b4 <HAL_RCC_OscConfig+0x19c>
 8003246:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800324a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d10c      	bne.n	8003270 <HAL_RCC_OscConfig+0x158>
 8003256:	4b7c      	ldr	r3, [pc, #496]	@ (8003448 <HAL_RCC_OscConfig+0x330>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a7b      	ldr	r2, [pc, #492]	@ (8003448 <HAL_RCC_OscConfig+0x330>)
 800325c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003260:	6013      	str	r3, [r2, #0]
 8003262:	4b79      	ldr	r3, [pc, #484]	@ (8003448 <HAL_RCC_OscConfig+0x330>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a78      	ldr	r2, [pc, #480]	@ (8003448 <HAL_RCC_OscConfig+0x330>)
 8003268:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800326c:	6013      	str	r3, [r2, #0]
 800326e:	e021      	b.n	80032b4 <HAL_RCC_OscConfig+0x19c>
 8003270:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003274:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003280:	d10c      	bne.n	800329c <HAL_RCC_OscConfig+0x184>
 8003282:	4b71      	ldr	r3, [pc, #452]	@ (8003448 <HAL_RCC_OscConfig+0x330>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a70      	ldr	r2, [pc, #448]	@ (8003448 <HAL_RCC_OscConfig+0x330>)
 8003288:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800328c:	6013      	str	r3, [r2, #0]
 800328e:	4b6e      	ldr	r3, [pc, #440]	@ (8003448 <HAL_RCC_OscConfig+0x330>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a6d      	ldr	r2, [pc, #436]	@ (8003448 <HAL_RCC_OscConfig+0x330>)
 8003294:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003298:	6013      	str	r3, [r2, #0]
 800329a:	e00b      	b.n	80032b4 <HAL_RCC_OscConfig+0x19c>
 800329c:	4b6a      	ldr	r3, [pc, #424]	@ (8003448 <HAL_RCC_OscConfig+0x330>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a69      	ldr	r2, [pc, #420]	@ (8003448 <HAL_RCC_OscConfig+0x330>)
 80032a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032a6:	6013      	str	r3, [r2, #0]
 80032a8:	4b67      	ldr	r3, [pc, #412]	@ (8003448 <HAL_RCC_OscConfig+0x330>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a66      	ldr	r2, [pc, #408]	@ (8003448 <HAL_RCC_OscConfig+0x330>)
 80032ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80032b2:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80032b4:	4b64      	ldr	r3, [pc, #400]	@ (8003448 <HAL_RCC_OscConfig+0x330>)
 80032b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032b8:	f023 020f 	bic.w	r2, r3, #15
 80032bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032c0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	495f      	ldr	r1, [pc, #380]	@ (8003448 <HAL_RCC_OscConfig+0x330>)
 80032ca:	4313      	orrs	r3, r2
 80032cc:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032d2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d059      	beq.n	8003392 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032de:	f7fe fc33 	bl	8001b48 <HAL_GetTick>
 80032e2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032e6:	e00a      	b.n	80032fe <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032e8:	f7fe fc2e 	bl	8001b48 <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80032f2:	1ad3      	subs	r3, r2, r3
 80032f4:	2b64      	cmp	r3, #100	@ 0x64
 80032f6:	d902      	bls.n	80032fe <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80032f8:	2303      	movs	r3, #3
 80032fa:	f000 bf43 	b.w	8004184 <HAL_RCC_OscConfig+0x106c>
 80032fe:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003302:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003306:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 800330a:	fa93 f3a3 	rbit	r3, r3
 800330e:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8003312:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003316:	fab3 f383 	clz	r3, r3
 800331a:	b2db      	uxtb	r3, r3
 800331c:	095b      	lsrs	r3, r3, #5
 800331e:	b2db      	uxtb	r3, r3
 8003320:	f043 0301 	orr.w	r3, r3, #1
 8003324:	b2db      	uxtb	r3, r3
 8003326:	2b01      	cmp	r3, #1
 8003328:	d102      	bne.n	8003330 <HAL_RCC_OscConfig+0x218>
 800332a:	4b47      	ldr	r3, [pc, #284]	@ (8003448 <HAL_RCC_OscConfig+0x330>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	e015      	b.n	800335c <HAL_RCC_OscConfig+0x244>
 8003330:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003334:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003338:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 800333c:	fa93 f3a3 	rbit	r3, r3
 8003340:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8003344:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003348:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 800334c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8003350:	fa93 f3a3 	rbit	r3, r3
 8003354:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8003358:	4b3b      	ldr	r3, [pc, #236]	@ (8003448 <HAL_RCC_OscConfig+0x330>)
 800335a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800335c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003360:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8003364:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8003368:	fa92 f2a2 	rbit	r2, r2
 800336c:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8003370:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8003374:	fab2 f282 	clz	r2, r2
 8003378:	b2d2      	uxtb	r2, r2
 800337a:	f042 0220 	orr.w	r2, r2, #32
 800337e:	b2d2      	uxtb	r2, r2
 8003380:	f002 021f 	and.w	r2, r2, #31
 8003384:	2101      	movs	r1, #1
 8003386:	fa01 f202 	lsl.w	r2, r1, r2
 800338a:	4013      	ands	r3, r2
 800338c:	2b00      	cmp	r3, #0
 800338e:	d0ab      	beq.n	80032e8 <HAL_RCC_OscConfig+0x1d0>
 8003390:	e05d      	b.n	800344e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003392:	f7fe fbd9 	bl	8001b48 <HAL_GetTick>
 8003396:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800339a:	e00a      	b.n	80033b2 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800339c:	f7fe fbd4 	bl	8001b48 <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80033a6:	1ad3      	subs	r3, r2, r3
 80033a8:	2b64      	cmp	r3, #100	@ 0x64
 80033aa:	d902      	bls.n	80033b2 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80033ac:	2303      	movs	r3, #3
 80033ae:	f000 bee9 	b.w	8004184 <HAL_RCC_OscConfig+0x106c>
 80033b2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80033b6:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ba:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80033be:	fa93 f3a3 	rbit	r3, r3
 80033c2:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 80033c6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033ca:	fab3 f383 	clz	r3, r3
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	095b      	lsrs	r3, r3, #5
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	f043 0301 	orr.w	r3, r3, #1
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d102      	bne.n	80033e4 <HAL_RCC_OscConfig+0x2cc>
 80033de:	4b1a      	ldr	r3, [pc, #104]	@ (8003448 <HAL_RCC_OscConfig+0x330>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	e015      	b.n	8003410 <HAL_RCC_OscConfig+0x2f8>
 80033e4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80033e8:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ec:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80033f0:	fa93 f3a3 	rbit	r3, r3
 80033f4:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80033f8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80033fc:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8003400:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003404:	fa93 f3a3 	rbit	r3, r3
 8003408:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 800340c:	4b0e      	ldr	r3, [pc, #56]	@ (8003448 <HAL_RCC_OscConfig+0x330>)
 800340e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003410:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003414:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8003418:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 800341c:	fa92 f2a2 	rbit	r2, r2
 8003420:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8003424:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8003428:	fab2 f282 	clz	r2, r2
 800342c:	b2d2      	uxtb	r2, r2
 800342e:	f042 0220 	orr.w	r2, r2, #32
 8003432:	b2d2      	uxtb	r2, r2
 8003434:	f002 021f 	and.w	r2, r2, #31
 8003438:	2101      	movs	r1, #1
 800343a:	fa01 f202 	lsl.w	r2, r1, r2
 800343e:	4013      	ands	r3, r2
 8003440:	2b00      	cmp	r3, #0
 8003442:	d1ab      	bne.n	800339c <HAL_RCC_OscConfig+0x284>
 8003444:	e003      	b.n	800344e <HAL_RCC_OscConfig+0x336>
 8003446:	bf00      	nop
 8003448:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800344c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800344e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003452:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0302 	and.w	r3, r3, #2
 800345e:	2b00      	cmp	r3, #0
 8003460:	f000 817d 	beq.w	800375e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003464:	4ba6      	ldr	r3, [pc, #664]	@ (8003700 <HAL_RCC_OscConfig+0x5e8>)
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	f003 030c 	and.w	r3, r3, #12
 800346c:	2b00      	cmp	r3, #0
 800346e:	d00b      	beq.n	8003488 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003470:	4ba3      	ldr	r3, [pc, #652]	@ (8003700 <HAL_RCC_OscConfig+0x5e8>)
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	f003 030c 	and.w	r3, r3, #12
 8003478:	2b08      	cmp	r3, #8
 800347a:	d172      	bne.n	8003562 <HAL_RCC_OscConfig+0x44a>
 800347c:	4ba0      	ldr	r3, [pc, #640]	@ (8003700 <HAL_RCC_OscConfig+0x5e8>)
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003484:	2b00      	cmp	r3, #0
 8003486:	d16c      	bne.n	8003562 <HAL_RCC_OscConfig+0x44a>
 8003488:	2302      	movs	r3, #2
 800348a:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800348e:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8003492:	fa93 f3a3 	rbit	r3, r3
 8003496:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 800349a:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800349e:	fab3 f383 	clz	r3, r3
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	095b      	lsrs	r3, r3, #5
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	f043 0301 	orr.w	r3, r3, #1
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d102      	bne.n	80034b8 <HAL_RCC_OscConfig+0x3a0>
 80034b2:	4b93      	ldr	r3, [pc, #588]	@ (8003700 <HAL_RCC_OscConfig+0x5e8>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	e013      	b.n	80034e0 <HAL_RCC_OscConfig+0x3c8>
 80034b8:	2302      	movs	r3, #2
 80034ba:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034be:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80034c2:	fa93 f3a3 	rbit	r3, r3
 80034c6:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80034ca:	2302      	movs	r3, #2
 80034cc:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80034d0:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80034d4:	fa93 f3a3 	rbit	r3, r3
 80034d8:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80034dc:	4b88      	ldr	r3, [pc, #544]	@ (8003700 <HAL_RCC_OscConfig+0x5e8>)
 80034de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034e0:	2202      	movs	r2, #2
 80034e2:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 80034e6:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80034ea:	fa92 f2a2 	rbit	r2, r2
 80034ee:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 80034f2:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80034f6:	fab2 f282 	clz	r2, r2
 80034fa:	b2d2      	uxtb	r2, r2
 80034fc:	f042 0220 	orr.w	r2, r2, #32
 8003500:	b2d2      	uxtb	r2, r2
 8003502:	f002 021f 	and.w	r2, r2, #31
 8003506:	2101      	movs	r1, #1
 8003508:	fa01 f202 	lsl.w	r2, r1, r2
 800350c:	4013      	ands	r3, r2
 800350e:	2b00      	cmp	r3, #0
 8003510:	d00a      	beq.n	8003528 <HAL_RCC_OscConfig+0x410>
 8003512:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003516:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	691b      	ldr	r3, [r3, #16]
 800351e:	2b01      	cmp	r3, #1
 8003520:	d002      	beq.n	8003528 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	f000 be2e 	b.w	8004184 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003528:	4b75      	ldr	r3, [pc, #468]	@ (8003700 <HAL_RCC_OscConfig+0x5e8>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003530:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003534:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	695b      	ldr	r3, [r3, #20]
 800353c:	21f8      	movs	r1, #248	@ 0xf8
 800353e:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003542:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8003546:	fa91 f1a1 	rbit	r1, r1
 800354a:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 800354e:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8003552:	fab1 f181 	clz	r1, r1
 8003556:	b2c9      	uxtb	r1, r1
 8003558:	408b      	lsls	r3, r1
 800355a:	4969      	ldr	r1, [pc, #420]	@ (8003700 <HAL_RCC_OscConfig+0x5e8>)
 800355c:	4313      	orrs	r3, r2
 800355e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003560:	e0fd      	b.n	800375e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003562:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003566:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	691b      	ldr	r3, [r3, #16]
 800356e:	2b00      	cmp	r3, #0
 8003570:	f000 8088 	beq.w	8003684 <HAL_RCC_OscConfig+0x56c>
 8003574:	2301      	movs	r3, #1
 8003576:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800357a:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 800357e:	fa93 f3a3 	rbit	r3, r3
 8003582:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8003586:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800358a:	fab3 f383 	clz	r3, r3
 800358e:	b2db      	uxtb	r3, r3
 8003590:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003594:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	461a      	mov	r2, r3
 800359c:	2301      	movs	r3, #1
 800359e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035a0:	f7fe fad2 	bl	8001b48 <HAL_GetTick>
 80035a4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035a8:	e00a      	b.n	80035c0 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035aa:	f7fe facd 	bl	8001b48 <HAL_GetTick>
 80035ae:	4602      	mov	r2, r0
 80035b0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	2b02      	cmp	r3, #2
 80035b8:	d902      	bls.n	80035c0 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	f000 bde2 	b.w	8004184 <HAL_RCC_OscConfig+0x106c>
 80035c0:	2302      	movs	r3, #2
 80035c2:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035c6:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80035ca:	fa93 f3a3 	rbit	r3, r3
 80035ce:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 80035d2:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035d6:	fab3 f383 	clz	r3, r3
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	095b      	lsrs	r3, r3, #5
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	f043 0301 	orr.w	r3, r3, #1
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d102      	bne.n	80035f0 <HAL_RCC_OscConfig+0x4d8>
 80035ea:	4b45      	ldr	r3, [pc, #276]	@ (8003700 <HAL_RCC_OscConfig+0x5e8>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	e013      	b.n	8003618 <HAL_RCC_OscConfig+0x500>
 80035f0:	2302      	movs	r3, #2
 80035f2:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035f6:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80035fa:	fa93 f3a3 	rbit	r3, r3
 80035fe:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8003602:	2302      	movs	r3, #2
 8003604:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8003608:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800360c:	fa93 f3a3 	rbit	r3, r3
 8003610:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8003614:	4b3a      	ldr	r3, [pc, #232]	@ (8003700 <HAL_RCC_OscConfig+0x5e8>)
 8003616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003618:	2202      	movs	r2, #2
 800361a:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 800361e:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8003622:	fa92 f2a2 	rbit	r2, r2
 8003626:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 800362a:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 800362e:	fab2 f282 	clz	r2, r2
 8003632:	b2d2      	uxtb	r2, r2
 8003634:	f042 0220 	orr.w	r2, r2, #32
 8003638:	b2d2      	uxtb	r2, r2
 800363a:	f002 021f 	and.w	r2, r2, #31
 800363e:	2101      	movs	r1, #1
 8003640:	fa01 f202 	lsl.w	r2, r1, r2
 8003644:	4013      	ands	r3, r2
 8003646:	2b00      	cmp	r3, #0
 8003648:	d0af      	beq.n	80035aa <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800364a:	4b2d      	ldr	r3, [pc, #180]	@ (8003700 <HAL_RCC_OscConfig+0x5e8>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003652:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003656:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	695b      	ldr	r3, [r3, #20]
 800365e:	21f8      	movs	r1, #248	@ 0xf8
 8003660:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003664:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8003668:	fa91 f1a1 	rbit	r1, r1
 800366c:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8003670:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8003674:	fab1 f181 	clz	r1, r1
 8003678:	b2c9      	uxtb	r1, r1
 800367a:	408b      	lsls	r3, r1
 800367c:	4920      	ldr	r1, [pc, #128]	@ (8003700 <HAL_RCC_OscConfig+0x5e8>)
 800367e:	4313      	orrs	r3, r2
 8003680:	600b      	str	r3, [r1, #0]
 8003682:	e06c      	b.n	800375e <HAL_RCC_OscConfig+0x646>
 8003684:	2301      	movs	r3, #1
 8003686:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800368a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800368e:	fa93 f3a3 	rbit	r3, r3
 8003692:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8003696:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800369a:	fab3 f383 	clz	r3, r3
 800369e:	b2db      	uxtb	r3, r3
 80036a0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80036a4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	461a      	mov	r2, r3
 80036ac:	2300      	movs	r3, #0
 80036ae:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036b0:	f7fe fa4a 	bl	8001b48 <HAL_GetTick>
 80036b4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036b8:	e00a      	b.n	80036d0 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036ba:	f7fe fa45 	bl	8001b48 <HAL_GetTick>
 80036be:	4602      	mov	r2, r0
 80036c0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	2b02      	cmp	r3, #2
 80036c8:	d902      	bls.n	80036d0 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80036ca:	2303      	movs	r3, #3
 80036cc:	f000 bd5a 	b.w	8004184 <HAL_RCC_OscConfig+0x106c>
 80036d0:	2302      	movs	r3, #2
 80036d2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036d6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80036da:	fa93 f3a3 	rbit	r3, r3
 80036de:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 80036e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036e6:	fab3 f383 	clz	r3, r3
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	095b      	lsrs	r3, r3, #5
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	f043 0301 	orr.w	r3, r3, #1
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d104      	bne.n	8003704 <HAL_RCC_OscConfig+0x5ec>
 80036fa:	4b01      	ldr	r3, [pc, #4]	@ (8003700 <HAL_RCC_OscConfig+0x5e8>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	e015      	b.n	800372c <HAL_RCC_OscConfig+0x614>
 8003700:	40021000 	.word	0x40021000
 8003704:	2302      	movs	r3, #2
 8003706:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800370a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800370e:	fa93 f3a3 	rbit	r3, r3
 8003712:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8003716:	2302      	movs	r3, #2
 8003718:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 800371c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003720:	fa93 f3a3 	rbit	r3, r3
 8003724:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8003728:	4bc8      	ldr	r3, [pc, #800]	@ (8003a4c <HAL_RCC_OscConfig+0x934>)
 800372a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800372c:	2202      	movs	r2, #2
 800372e:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8003732:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8003736:	fa92 f2a2 	rbit	r2, r2
 800373a:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 800373e:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8003742:	fab2 f282 	clz	r2, r2
 8003746:	b2d2      	uxtb	r2, r2
 8003748:	f042 0220 	orr.w	r2, r2, #32
 800374c:	b2d2      	uxtb	r2, r2
 800374e:	f002 021f 	and.w	r2, r2, #31
 8003752:	2101      	movs	r1, #1
 8003754:	fa01 f202 	lsl.w	r2, r1, r2
 8003758:	4013      	ands	r3, r2
 800375a:	2b00      	cmp	r3, #0
 800375c:	d1ad      	bne.n	80036ba <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800375e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003762:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 0308 	and.w	r3, r3, #8
 800376e:	2b00      	cmp	r3, #0
 8003770:	f000 8110 	beq.w	8003994 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003774:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003778:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	699b      	ldr	r3, [r3, #24]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d079      	beq.n	8003878 <HAL_RCC_OscConfig+0x760>
 8003784:	2301      	movs	r3, #1
 8003786:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800378a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800378e:	fa93 f3a3 	rbit	r3, r3
 8003792:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8003796:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800379a:	fab3 f383 	clz	r3, r3
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	461a      	mov	r2, r3
 80037a2:	4bab      	ldr	r3, [pc, #684]	@ (8003a50 <HAL_RCC_OscConfig+0x938>)
 80037a4:	4413      	add	r3, r2
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	461a      	mov	r2, r3
 80037aa:	2301      	movs	r3, #1
 80037ac:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037ae:	f7fe f9cb 	bl	8001b48 <HAL_GetTick>
 80037b2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037b6:	e00a      	b.n	80037ce <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037b8:	f7fe f9c6 	bl	8001b48 <HAL_GetTick>
 80037bc:	4602      	mov	r2, r0
 80037be:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80037c2:	1ad3      	subs	r3, r2, r3
 80037c4:	2b02      	cmp	r3, #2
 80037c6:	d902      	bls.n	80037ce <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80037c8:	2303      	movs	r3, #3
 80037ca:	f000 bcdb 	b.w	8004184 <HAL_RCC_OscConfig+0x106c>
 80037ce:	2302      	movs	r3, #2
 80037d0:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037d4:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80037d8:	fa93 f3a3 	rbit	r3, r3
 80037dc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80037e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037e4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80037e8:	2202      	movs	r2, #2
 80037ea:	601a      	str	r2, [r3, #0]
 80037ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037f0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	fa93 f2a3 	rbit	r2, r3
 80037fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037fe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003802:	601a      	str	r2, [r3, #0]
 8003804:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003808:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800380c:	2202      	movs	r2, #2
 800380e:	601a      	str	r2, [r3, #0]
 8003810:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003814:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	fa93 f2a3 	rbit	r2, r3
 800381e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003822:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003826:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003828:	4b88      	ldr	r3, [pc, #544]	@ (8003a4c <HAL_RCC_OscConfig+0x934>)
 800382a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800382c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003830:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003834:	2102      	movs	r1, #2
 8003836:	6019      	str	r1, [r3, #0]
 8003838:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800383c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	fa93 f1a3 	rbit	r1, r3
 8003846:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800384a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800384e:	6019      	str	r1, [r3, #0]
  return result;
 8003850:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003854:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	fab3 f383 	clz	r3, r3
 800385e:	b2db      	uxtb	r3, r3
 8003860:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003864:	b2db      	uxtb	r3, r3
 8003866:	f003 031f 	and.w	r3, r3, #31
 800386a:	2101      	movs	r1, #1
 800386c:	fa01 f303 	lsl.w	r3, r1, r3
 8003870:	4013      	ands	r3, r2
 8003872:	2b00      	cmp	r3, #0
 8003874:	d0a0      	beq.n	80037b8 <HAL_RCC_OscConfig+0x6a0>
 8003876:	e08d      	b.n	8003994 <HAL_RCC_OscConfig+0x87c>
 8003878:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800387c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003880:	2201      	movs	r2, #1
 8003882:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003884:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003888:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	fa93 f2a3 	rbit	r2, r3
 8003892:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003896:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800389a:	601a      	str	r2, [r3, #0]
  return result;
 800389c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038a0:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80038a4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038a6:	fab3 f383 	clz	r3, r3
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	461a      	mov	r2, r3
 80038ae:	4b68      	ldr	r3, [pc, #416]	@ (8003a50 <HAL_RCC_OscConfig+0x938>)
 80038b0:	4413      	add	r3, r2
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	461a      	mov	r2, r3
 80038b6:	2300      	movs	r3, #0
 80038b8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038ba:	f7fe f945 	bl	8001b48 <HAL_GetTick>
 80038be:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038c2:	e00a      	b.n	80038da <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038c4:	f7fe f940 	bl	8001b48 <HAL_GetTick>
 80038c8:	4602      	mov	r2, r0
 80038ca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	2b02      	cmp	r3, #2
 80038d2:	d902      	bls.n	80038da <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80038d4:	2303      	movs	r3, #3
 80038d6:	f000 bc55 	b.w	8004184 <HAL_RCC_OscConfig+0x106c>
 80038da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038de:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80038e2:	2202      	movs	r2, #2
 80038e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038ea:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	fa93 f2a3 	rbit	r2, r3
 80038f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038f8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80038fc:	601a      	str	r2, [r3, #0]
 80038fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003902:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003906:	2202      	movs	r2, #2
 8003908:	601a      	str	r2, [r3, #0]
 800390a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800390e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	fa93 f2a3 	rbit	r2, r3
 8003918:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800391c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003920:	601a      	str	r2, [r3, #0]
 8003922:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003926:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800392a:	2202      	movs	r2, #2
 800392c:	601a      	str	r2, [r3, #0]
 800392e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003932:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	fa93 f2a3 	rbit	r2, r3
 800393c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003940:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003944:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003946:	4b41      	ldr	r3, [pc, #260]	@ (8003a4c <HAL_RCC_OscConfig+0x934>)
 8003948:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800394a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800394e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003952:	2102      	movs	r1, #2
 8003954:	6019      	str	r1, [r3, #0]
 8003956:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800395a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	fa93 f1a3 	rbit	r1, r3
 8003964:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003968:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800396c:	6019      	str	r1, [r3, #0]
  return result;
 800396e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003972:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	fab3 f383 	clz	r3, r3
 800397c:	b2db      	uxtb	r3, r3
 800397e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003982:	b2db      	uxtb	r3, r3
 8003984:	f003 031f 	and.w	r3, r3, #31
 8003988:	2101      	movs	r1, #1
 800398a:	fa01 f303 	lsl.w	r3, r1, r3
 800398e:	4013      	ands	r3, r2
 8003990:	2b00      	cmp	r3, #0
 8003992:	d197      	bne.n	80038c4 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003994:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003998:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0304 	and.w	r3, r3, #4
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	f000 81a1 	beq.w	8003cec <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039aa:	2300      	movs	r3, #0
 80039ac:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039b0:	4b26      	ldr	r3, [pc, #152]	@ (8003a4c <HAL_RCC_OscConfig+0x934>)
 80039b2:	69db      	ldr	r3, [r3, #28]
 80039b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d116      	bne.n	80039ea <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039bc:	4b23      	ldr	r3, [pc, #140]	@ (8003a4c <HAL_RCC_OscConfig+0x934>)
 80039be:	69db      	ldr	r3, [r3, #28]
 80039c0:	4a22      	ldr	r2, [pc, #136]	@ (8003a4c <HAL_RCC_OscConfig+0x934>)
 80039c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039c6:	61d3      	str	r3, [r2, #28]
 80039c8:	4b20      	ldr	r3, [pc, #128]	@ (8003a4c <HAL_RCC_OscConfig+0x934>)
 80039ca:	69db      	ldr	r3, [r3, #28]
 80039cc:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80039d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039d4:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80039d8:	601a      	str	r2, [r3, #0]
 80039da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039de:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80039e2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80039e4:	2301      	movs	r3, #1
 80039e6:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039ea:	4b1a      	ldr	r3, [pc, #104]	@ (8003a54 <HAL_RCC_OscConfig+0x93c>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d11a      	bne.n	8003a2c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039f6:	4b17      	ldr	r3, [pc, #92]	@ (8003a54 <HAL_RCC_OscConfig+0x93c>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a16      	ldr	r2, [pc, #88]	@ (8003a54 <HAL_RCC_OscConfig+0x93c>)
 80039fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a00:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a02:	f7fe f8a1 	bl	8001b48 <HAL_GetTick>
 8003a06:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a0a:	e009      	b.n	8003a20 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a0c:	f7fe f89c 	bl	8001b48 <HAL_GetTick>
 8003a10:	4602      	mov	r2, r0
 8003a12:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003a16:	1ad3      	subs	r3, r2, r3
 8003a18:	2b64      	cmp	r3, #100	@ 0x64
 8003a1a:	d901      	bls.n	8003a20 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003a1c:	2303      	movs	r3, #3
 8003a1e:	e3b1      	b.n	8004184 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a20:	4b0c      	ldr	r3, [pc, #48]	@ (8003a54 <HAL_RCC_OscConfig+0x93c>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d0ef      	beq.n	8003a0c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a30:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d10d      	bne.n	8003a58 <HAL_RCC_OscConfig+0x940>
 8003a3c:	4b03      	ldr	r3, [pc, #12]	@ (8003a4c <HAL_RCC_OscConfig+0x934>)
 8003a3e:	6a1b      	ldr	r3, [r3, #32]
 8003a40:	4a02      	ldr	r2, [pc, #8]	@ (8003a4c <HAL_RCC_OscConfig+0x934>)
 8003a42:	f043 0301 	orr.w	r3, r3, #1
 8003a46:	6213      	str	r3, [r2, #32]
 8003a48:	e03c      	b.n	8003ac4 <HAL_RCC_OscConfig+0x9ac>
 8003a4a:	bf00      	nop
 8003a4c:	40021000 	.word	0x40021000
 8003a50:	10908120 	.word	0x10908120
 8003a54:	40007000 	.word	0x40007000
 8003a58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a5c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d10c      	bne.n	8003a82 <HAL_RCC_OscConfig+0x96a>
 8003a68:	4bc1      	ldr	r3, [pc, #772]	@ (8003d70 <HAL_RCC_OscConfig+0xc58>)
 8003a6a:	6a1b      	ldr	r3, [r3, #32]
 8003a6c:	4ac0      	ldr	r2, [pc, #768]	@ (8003d70 <HAL_RCC_OscConfig+0xc58>)
 8003a6e:	f023 0301 	bic.w	r3, r3, #1
 8003a72:	6213      	str	r3, [r2, #32]
 8003a74:	4bbe      	ldr	r3, [pc, #760]	@ (8003d70 <HAL_RCC_OscConfig+0xc58>)
 8003a76:	6a1b      	ldr	r3, [r3, #32]
 8003a78:	4abd      	ldr	r2, [pc, #756]	@ (8003d70 <HAL_RCC_OscConfig+0xc58>)
 8003a7a:	f023 0304 	bic.w	r3, r3, #4
 8003a7e:	6213      	str	r3, [r2, #32]
 8003a80:	e020      	b.n	8003ac4 <HAL_RCC_OscConfig+0x9ac>
 8003a82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a86:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	68db      	ldr	r3, [r3, #12]
 8003a8e:	2b05      	cmp	r3, #5
 8003a90:	d10c      	bne.n	8003aac <HAL_RCC_OscConfig+0x994>
 8003a92:	4bb7      	ldr	r3, [pc, #732]	@ (8003d70 <HAL_RCC_OscConfig+0xc58>)
 8003a94:	6a1b      	ldr	r3, [r3, #32]
 8003a96:	4ab6      	ldr	r2, [pc, #728]	@ (8003d70 <HAL_RCC_OscConfig+0xc58>)
 8003a98:	f043 0304 	orr.w	r3, r3, #4
 8003a9c:	6213      	str	r3, [r2, #32]
 8003a9e:	4bb4      	ldr	r3, [pc, #720]	@ (8003d70 <HAL_RCC_OscConfig+0xc58>)
 8003aa0:	6a1b      	ldr	r3, [r3, #32]
 8003aa2:	4ab3      	ldr	r2, [pc, #716]	@ (8003d70 <HAL_RCC_OscConfig+0xc58>)
 8003aa4:	f043 0301 	orr.w	r3, r3, #1
 8003aa8:	6213      	str	r3, [r2, #32]
 8003aaa:	e00b      	b.n	8003ac4 <HAL_RCC_OscConfig+0x9ac>
 8003aac:	4bb0      	ldr	r3, [pc, #704]	@ (8003d70 <HAL_RCC_OscConfig+0xc58>)
 8003aae:	6a1b      	ldr	r3, [r3, #32]
 8003ab0:	4aaf      	ldr	r2, [pc, #700]	@ (8003d70 <HAL_RCC_OscConfig+0xc58>)
 8003ab2:	f023 0301 	bic.w	r3, r3, #1
 8003ab6:	6213      	str	r3, [r2, #32]
 8003ab8:	4bad      	ldr	r3, [pc, #692]	@ (8003d70 <HAL_RCC_OscConfig+0xc58>)
 8003aba:	6a1b      	ldr	r3, [r3, #32]
 8003abc:	4aac      	ldr	r2, [pc, #688]	@ (8003d70 <HAL_RCC_OscConfig+0xc58>)
 8003abe:	f023 0304 	bic.w	r3, r3, #4
 8003ac2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ac4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ac8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	f000 8081 	beq.w	8003bd8 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ad6:	f7fe f837 	bl	8001b48 <HAL_GetTick>
 8003ada:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ade:	e00b      	b.n	8003af8 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ae0:	f7fe f832 	bl	8001b48 <HAL_GetTick>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003aea:	1ad3      	subs	r3, r2, r3
 8003aec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d901      	bls.n	8003af8 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003af4:	2303      	movs	r3, #3
 8003af6:	e345      	b.n	8004184 <HAL_RCC_OscConfig+0x106c>
 8003af8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003afc:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003b00:	2202      	movs	r2, #2
 8003b02:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b08:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	fa93 f2a3 	rbit	r2, r3
 8003b12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b16:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003b1a:	601a      	str	r2, [r3, #0]
 8003b1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b20:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003b24:	2202      	movs	r2, #2
 8003b26:	601a      	str	r2, [r3, #0]
 8003b28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b2c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	fa93 f2a3 	rbit	r2, r3
 8003b36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b3a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003b3e:	601a      	str	r2, [r3, #0]
  return result;
 8003b40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b44:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003b48:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b4a:	fab3 f383 	clz	r3, r3
 8003b4e:	b2db      	uxtb	r3, r3
 8003b50:	095b      	lsrs	r3, r3, #5
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	f043 0302 	orr.w	r3, r3, #2
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	2b02      	cmp	r3, #2
 8003b5c:	d102      	bne.n	8003b64 <HAL_RCC_OscConfig+0xa4c>
 8003b5e:	4b84      	ldr	r3, [pc, #528]	@ (8003d70 <HAL_RCC_OscConfig+0xc58>)
 8003b60:	6a1b      	ldr	r3, [r3, #32]
 8003b62:	e013      	b.n	8003b8c <HAL_RCC_OscConfig+0xa74>
 8003b64:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b68:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003b6c:	2202      	movs	r2, #2
 8003b6e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b70:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b74:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	fa93 f2a3 	rbit	r2, r3
 8003b7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b82:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8003b86:	601a      	str	r2, [r3, #0]
 8003b88:	4b79      	ldr	r3, [pc, #484]	@ (8003d70 <HAL_RCC_OscConfig+0xc58>)
 8003b8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b8c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003b90:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003b94:	2102      	movs	r1, #2
 8003b96:	6011      	str	r1, [r2, #0]
 8003b98:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003b9c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003ba0:	6812      	ldr	r2, [r2, #0]
 8003ba2:	fa92 f1a2 	rbit	r1, r2
 8003ba6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003baa:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003bae:	6011      	str	r1, [r2, #0]
  return result;
 8003bb0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003bb4:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003bb8:	6812      	ldr	r2, [r2, #0]
 8003bba:	fab2 f282 	clz	r2, r2
 8003bbe:	b2d2      	uxtb	r2, r2
 8003bc0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003bc4:	b2d2      	uxtb	r2, r2
 8003bc6:	f002 021f 	and.w	r2, r2, #31
 8003bca:	2101      	movs	r1, #1
 8003bcc:	fa01 f202 	lsl.w	r2, r1, r2
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d084      	beq.n	8003ae0 <HAL_RCC_OscConfig+0x9c8>
 8003bd6:	e07f      	b.n	8003cd8 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bd8:	f7fd ffb6 	bl	8001b48 <HAL_GetTick>
 8003bdc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003be0:	e00b      	b.n	8003bfa <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003be2:	f7fd ffb1 	bl	8001b48 <HAL_GetTick>
 8003be6:	4602      	mov	r2, r0
 8003be8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003bec:	1ad3      	subs	r3, r2, r3
 8003bee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d901      	bls.n	8003bfa <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003bf6:	2303      	movs	r3, #3
 8003bf8:	e2c4      	b.n	8004184 <HAL_RCC_OscConfig+0x106c>
 8003bfa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bfe:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003c02:	2202      	movs	r2, #2
 8003c04:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c0a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	fa93 f2a3 	rbit	r2, r3
 8003c14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c18:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8003c1c:	601a      	str	r2, [r3, #0]
 8003c1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c22:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003c26:	2202      	movs	r2, #2
 8003c28:	601a      	str	r2, [r3, #0]
 8003c2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c2e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	fa93 f2a3 	rbit	r2, r3
 8003c38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c3c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003c40:	601a      	str	r2, [r3, #0]
  return result;
 8003c42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c46:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003c4a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c4c:	fab3 f383 	clz	r3, r3
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	095b      	lsrs	r3, r3, #5
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	f043 0302 	orr.w	r3, r3, #2
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	2b02      	cmp	r3, #2
 8003c5e:	d102      	bne.n	8003c66 <HAL_RCC_OscConfig+0xb4e>
 8003c60:	4b43      	ldr	r3, [pc, #268]	@ (8003d70 <HAL_RCC_OscConfig+0xc58>)
 8003c62:	6a1b      	ldr	r3, [r3, #32]
 8003c64:	e013      	b.n	8003c8e <HAL_RCC_OscConfig+0xb76>
 8003c66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c6a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003c6e:	2202      	movs	r2, #2
 8003c70:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c76:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	fa93 f2a3 	rbit	r2, r3
 8003c80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c84:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8003c88:	601a      	str	r2, [r3, #0]
 8003c8a:	4b39      	ldr	r3, [pc, #228]	@ (8003d70 <HAL_RCC_OscConfig+0xc58>)
 8003c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c8e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003c92:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8003c96:	2102      	movs	r1, #2
 8003c98:	6011      	str	r1, [r2, #0]
 8003c9a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003c9e:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8003ca2:	6812      	ldr	r2, [r2, #0]
 8003ca4:	fa92 f1a2 	rbit	r1, r2
 8003ca8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003cac:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003cb0:	6011      	str	r1, [r2, #0]
  return result;
 8003cb2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003cb6:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003cba:	6812      	ldr	r2, [r2, #0]
 8003cbc:	fab2 f282 	clz	r2, r2
 8003cc0:	b2d2      	uxtb	r2, r2
 8003cc2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003cc6:	b2d2      	uxtb	r2, r2
 8003cc8:	f002 021f 	and.w	r2, r2, #31
 8003ccc:	2101      	movs	r1, #1
 8003cce:	fa01 f202 	lsl.w	r2, r1, r2
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d184      	bne.n	8003be2 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003cd8:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d105      	bne.n	8003cec <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ce0:	4b23      	ldr	r3, [pc, #140]	@ (8003d70 <HAL_RCC_OscConfig+0xc58>)
 8003ce2:	69db      	ldr	r3, [r3, #28]
 8003ce4:	4a22      	ldr	r2, [pc, #136]	@ (8003d70 <HAL_RCC_OscConfig+0xc58>)
 8003ce6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003cea:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cf0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	69db      	ldr	r3, [r3, #28]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	f000 8242 	beq.w	8004182 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003cfe:	4b1c      	ldr	r3, [pc, #112]	@ (8003d70 <HAL_RCC_OscConfig+0xc58>)
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	f003 030c 	and.w	r3, r3, #12
 8003d06:	2b08      	cmp	r3, #8
 8003d08:	f000 8213 	beq.w	8004132 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d10:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	69db      	ldr	r3, [r3, #28]
 8003d18:	2b02      	cmp	r3, #2
 8003d1a:	f040 8162 	bne.w	8003fe2 <HAL_RCC_OscConfig+0xeca>
 8003d1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d22:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8003d26:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003d2a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d30:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	fa93 f2a3 	rbit	r2, r3
 8003d3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d3e:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003d42:	601a      	str	r2, [r3, #0]
  return result;
 8003d44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d48:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003d4c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d4e:	fab3 f383 	clz	r3, r3
 8003d52:	b2db      	uxtb	r3, r3
 8003d54:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003d58:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	461a      	mov	r2, r3
 8003d60:	2300      	movs	r3, #0
 8003d62:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d64:	f7fd fef0 	bl	8001b48 <HAL_GetTick>
 8003d68:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d6c:	e00c      	b.n	8003d88 <HAL_RCC_OscConfig+0xc70>
 8003d6e:	bf00      	nop
 8003d70:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d74:	f7fd fee8 	bl	8001b48 <HAL_GetTick>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003d7e:	1ad3      	subs	r3, r2, r3
 8003d80:	2b02      	cmp	r3, #2
 8003d82:	d901      	bls.n	8003d88 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003d84:	2303      	movs	r3, #3
 8003d86:	e1fd      	b.n	8004184 <HAL_RCC_OscConfig+0x106c>
 8003d88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d8c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003d90:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003d94:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d9a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	fa93 f2a3 	rbit	r2, r3
 8003da4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003da8:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003dac:	601a      	str	r2, [r3, #0]
  return result;
 8003dae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003db2:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003db6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003db8:	fab3 f383 	clz	r3, r3
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	095b      	lsrs	r3, r3, #5
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	f043 0301 	orr.w	r3, r3, #1
 8003dc6:	b2db      	uxtb	r3, r3
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d102      	bne.n	8003dd2 <HAL_RCC_OscConfig+0xcba>
 8003dcc:	4bb0      	ldr	r3, [pc, #704]	@ (8004090 <HAL_RCC_OscConfig+0xf78>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	e027      	b.n	8003e22 <HAL_RCC_OscConfig+0xd0a>
 8003dd2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003dd6:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003dda:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003dde:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003de0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003de4:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	fa93 f2a3 	rbit	r2, r3
 8003dee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003df2:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8003df6:	601a      	str	r2, [r3, #0]
 8003df8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003dfc:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003e00:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003e04:	601a      	str	r2, [r3, #0]
 8003e06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e0a:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	fa93 f2a3 	rbit	r2, r3
 8003e14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e18:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003e1c:	601a      	str	r2, [r3, #0]
 8003e1e:	4b9c      	ldr	r3, [pc, #624]	@ (8004090 <HAL_RCC_OscConfig+0xf78>)
 8003e20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e22:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003e26:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003e2a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003e2e:	6011      	str	r1, [r2, #0]
 8003e30:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003e34:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003e38:	6812      	ldr	r2, [r2, #0]
 8003e3a:	fa92 f1a2 	rbit	r1, r2
 8003e3e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003e42:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003e46:	6011      	str	r1, [r2, #0]
  return result;
 8003e48:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003e4c:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003e50:	6812      	ldr	r2, [r2, #0]
 8003e52:	fab2 f282 	clz	r2, r2
 8003e56:	b2d2      	uxtb	r2, r2
 8003e58:	f042 0220 	orr.w	r2, r2, #32
 8003e5c:	b2d2      	uxtb	r2, r2
 8003e5e:	f002 021f 	and.w	r2, r2, #31
 8003e62:	2101      	movs	r1, #1
 8003e64:	fa01 f202 	lsl.w	r2, r1, r2
 8003e68:	4013      	ands	r3, r2
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d182      	bne.n	8003d74 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e6e:	4b88      	ldr	r3, [pc, #544]	@ (8004090 <HAL_RCC_OscConfig+0xf78>)
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003e76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e7a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003e82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e86:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	6a1b      	ldr	r3, [r3, #32]
 8003e8e:	430b      	orrs	r3, r1
 8003e90:	497f      	ldr	r1, [pc, #508]	@ (8004090 <HAL_RCC_OscConfig+0xf78>)
 8003e92:	4313      	orrs	r3, r2
 8003e94:	604b      	str	r3, [r1, #4]
 8003e96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e9a:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003e9e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003ea2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ea4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ea8:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	fa93 f2a3 	rbit	r2, r3
 8003eb2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003eb6:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003eba:	601a      	str	r2, [r3, #0]
  return result;
 8003ebc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ec0:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003ec4:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ec6:	fab3 f383 	clz	r3, r3
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003ed0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	2301      	movs	r3, #1
 8003eda:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003edc:	f7fd fe34 	bl	8001b48 <HAL_GetTick>
 8003ee0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ee4:	e009      	b.n	8003efa <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ee6:	f7fd fe2f 	bl	8001b48 <HAL_GetTick>
 8003eea:	4602      	mov	r2, r0
 8003eec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003ef0:	1ad3      	subs	r3, r2, r3
 8003ef2:	2b02      	cmp	r3, #2
 8003ef4:	d901      	bls.n	8003efa <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003ef6:	2303      	movs	r3, #3
 8003ef8:	e144      	b.n	8004184 <HAL_RCC_OscConfig+0x106c>
 8003efa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003efe:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003f02:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003f06:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f0c:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	fa93 f2a3 	rbit	r2, r3
 8003f16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f1a:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003f1e:	601a      	str	r2, [r3, #0]
  return result;
 8003f20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f24:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003f28:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f2a:	fab3 f383 	clz	r3, r3
 8003f2e:	b2db      	uxtb	r3, r3
 8003f30:	095b      	lsrs	r3, r3, #5
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	f043 0301 	orr.w	r3, r3, #1
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d102      	bne.n	8003f44 <HAL_RCC_OscConfig+0xe2c>
 8003f3e:	4b54      	ldr	r3, [pc, #336]	@ (8004090 <HAL_RCC_OscConfig+0xf78>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	e027      	b.n	8003f94 <HAL_RCC_OscConfig+0xe7c>
 8003f44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f48:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003f4c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003f50:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f56:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	fa93 f2a3 	rbit	r2, r3
 8003f60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f64:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003f68:	601a      	str	r2, [r3, #0]
 8003f6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f6e:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003f72:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003f76:	601a      	str	r2, [r3, #0]
 8003f78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f7c:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	fa93 f2a3 	rbit	r2, r3
 8003f86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f8a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8003f8e:	601a      	str	r2, [r3, #0]
 8003f90:	4b3f      	ldr	r3, [pc, #252]	@ (8004090 <HAL_RCC_OscConfig+0xf78>)
 8003f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f94:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003f98:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003f9c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003fa0:	6011      	str	r1, [r2, #0]
 8003fa2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003fa6:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003faa:	6812      	ldr	r2, [r2, #0]
 8003fac:	fa92 f1a2 	rbit	r1, r2
 8003fb0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003fb4:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003fb8:	6011      	str	r1, [r2, #0]
  return result;
 8003fba:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003fbe:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003fc2:	6812      	ldr	r2, [r2, #0]
 8003fc4:	fab2 f282 	clz	r2, r2
 8003fc8:	b2d2      	uxtb	r2, r2
 8003fca:	f042 0220 	orr.w	r2, r2, #32
 8003fce:	b2d2      	uxtb	r2, r2
 8003fd0:	f002 021f 	and.w	r2, r2, #31
 8003fd4:	2101      	movs	r1, #1
 8003fd6:	fa01 f202 	lsl.w	r2, r1, r2
 8003fda:	4013      	ands	r3, r2
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d082      	beq.n	8003ee6 <HAL_RCC_OscConfig+0xdce>
 8003fe0:	e0cf      	b.n	8004182 <HAL_RCC_OscConfig+0x106a>
 8003fe2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fe6:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003fea:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003fee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ff0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ff4:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	fa93 f2a3 	rbit	r2, r3
 8003ffe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004002:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8004006:	601a      	str	r2, [r3, #0]
  return result;
 8004008:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800400c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8004010:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004012:	fab3 f383 	clz	r3, r3
 8004016:	b2db      	uxtb	r3, r3
 8004018:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800401c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004020:	009b      	lsls	r3, r3, #2
 8004022:	461a      	mov	r2, r3
 8004024:	2300      	movs	r3, #0
 8004026:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004028:	f7fd fd8e 	bl	8001b48 <HAL_GetTick>
 800402c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004030:	e009      	b.n	8004046 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004032:	f7fd fd89 	bl	8001b48 <HAL_GetTick>
 8004036:	4602      	mov	r2, r0
 8004038:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	2b02      	cmp	r3, #2
 8004040:	d901      	bls.n	8004046 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8004042:	2303      	movs	r3, #3
 8004044:	e09e      	b.n	8004184 <HAL_RCC_OscConfig+0x106c>
 8004046:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800404a:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800404e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004052:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004054:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004058:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	fa93 f2a3 	rbit	r2, r3
 8004062:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004066:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800406a:	601a      	str	r2, [r3, #0]
  return result;
 800406c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004070:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8004074:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004076:	fab3 f383 	clz	r3, r3
 800407a:	b2db      	uxtb	r3, r3
 800407c:	095b      	lsrs	r3, r3, #5
 800407e:	b2db      	uxtb	r3, r3
 8004080:	f043 0301 	orr.w	r3, r3, #1
 8004084:	b2db      	uxtb	r3, r3
 8004086:	2b01      	cmp	r3, #1
 8004088:	d104      	bne.n	8004094 <HAL_RCC_OscConfig+0xf7c>
 800408a:	4b01      	ldr	r3, [pc, #4]	@ (8004090 <HAL_RCC_OscConfig+0xf78>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	e029      	b.n	80040e4 <HAL_RCC_OscConfig+0xfcc>
 8004090:	40021000 	.word	0x40021000
 8004094:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004098:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800409c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80040a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040a6:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	fa93 f2a3 	rbit	r2, r3
 80040b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040b4:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80040b8:	601a      	str	r2, [r3, #0]
 80040ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040be:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80040c2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80040c6:	601a      	str	r2, [r3, #0]
 80040c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040cc:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	fa93 f2a3 	rbit	r2, r3
 80040d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040da:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80040de:	601a      	str	r2, [r3, #0]
 80040e0:	4b2b      	ldr	r3, [pc, #172]	@ (8004190 <HAL_RCC_OscConfig+0x1078>)
 80040e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040e4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80040e8:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80040ec:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80040f0:	6011      	str	r1, [r2, #0]
 80040f2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80040f6:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80040fa:	6812      	ldr	r2, [r2, #0]
 80040fc:	fa92 f1a2 	rbit	r1, r2
 8004100:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004104:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8004108:	6011      	str	r1, [r2, #0]
  return result;
 800410a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800410e:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8004112:	6812      	ldr	r2, [r2, #0]
 8004114:	fab2 f282 	clz	r2, r2
 8004118:	b2d2      	uxtb	r2, r2
 800411a:	f042 0220 	orr.w	r2, r2, #32
 800411e:	b2d2      	uxtb	r2, r2
 8004120:	f002 021f 	and.w	r2, r2, #31
 8004124:	2101      	movs	r1, #1
 8004126:	fa01 f202 	lsl.w	r2, r1, r2
 800412a:	4013      	ands	r3, r2
 800412c:	2b00      	cmp	r3, #0
 800412e:	d180      	bne.n	8004032 <HAL_RCC_OscConfig+0xf1a>
 8004130:	e027      	b.n	8004182 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004132:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004136:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	69db      	ldr	r3, [r3, #28]
 800413e:	2b01      	cmp	r3, #1
 8004140:	d101      	bne.n	8004146 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e01e      	b.n	8004184 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004146:	4b12      	ldr	r3, [pc, #72]	@ (8004190 <HAL_RCC_OscConfig+0x1078>)
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800414e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8004152:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004156:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800415a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	6a1b      	ldr	r3, [r3, #32]
 8004162:	429a      	cmp	r2, r3
 8004164:	d10b      	bne.n	800417e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004166:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800416a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800416e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004172:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800417a:	429a      	cmp	r2, r3
 800417c:	d001      	beq.n	8004182 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	e000      	b.n	8004184 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8004182:	2300      	movs	r3, #0
}
 8004184:	4618      	mov	r0, r3
 8004186:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}
 800418e:	bf00      	nop
 8004190:	40021000 	.word	0x40021000

08004194 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b09e      	sub	sp, #120	@ 0x78
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800419e:	2300      	movs	r3, #0
 80041a0:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d101      	bne.n	80041ac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	e162      	b.n	8004472 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80041ac:	4b90      	ldr	r3, [pc, #576]	@ (80043f0 <HAL_RCC_ClockConfig+0x25c>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 0307 	and.w	r3, r3, #7
 80041b4:	683a      	ldr	r2, [r7, #0]
 80041b6:	429a      	cmp	r2, r3
 80041b8:	d910      	bls.n	80041dc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041ba:	4b8d      	ldr	r3, [pc, #564]	@ (80043f0 <HAL_RCC_ClockConfig+0x25c>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f023 0207 	bic.w	r2, r3, #7
 80041c2:	498b      	ldr	r1, [pc, #556]	@ (80043f0 <HAL_RCC_ClockConfig+0x25c>)
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	4313      	orrs	r3, r2
 80041c8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041ca:	4b89      	ldr	r3, [pc, #548]	@ (80043f0 <HAL_RCC_ClockConfig+0x25c>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 0307 	and.w	r3, r3, #7
 80041d2:	683a      	ldr	r2, [r7, #0]
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d001      	beq.n	80041dc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	e14a      	b.n	8004472 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 0302 	and.w	r3, r3, #2
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d008      	beq.n	80041fa <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041e8:	4b82      	ldr	r3, [pc, #520]	@ (80043f4 <HAL_RCC_ClockConfig+0x260>)
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	497f      	ldr	r1, [pc, #508]	@ (80043f4 <HAL_RCC_ClockConfig+0x260>)
 80041f6:	4313      	orrs	r3, r2
 80041f8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 0301 	and.w	r3, r3, #1
 8004202:	2b00      	cmp	r3, #0
 8004204:	f000 80dc 	beq.w	80043c0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	2b01      	cmp	r3, #1
 800420e:	d13c      	bne.n	800428a <HAL_RCC_ClockConfig+0xf6>
 8004210:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004214:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004216:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004218:	fa93 f3a3 	rbit	r3, r3
 800421c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800421e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004220:	fab3 f383 	clz	r3, r3
 8004224:	b2db      	uxtb	r3, r3
 8004226:	095b      	lsrs	r3, r3, #5
 8004228:	b2db      	uxtb	r3, r3
 800422a:	f043 0301 	orr.w	r3, r3, #1
 800422e:	b2db      	uxtb	r3, r3
 8004230:	2b01      	cmp	r3, #1
 8004232:	d102      	bne.n	800423a <HAL_RCC_ClockConfig+0xa6>
 8004234:	4b6f      	ldr	r3, [pc, #444]	@ (80043f4 <HAL_RCC_ClockConfig+0x260>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	e00f      	b.n	800425a <HAL_RCC_ClockConfig+0xc6>
 800423a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800423e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004240:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004242:	fa93 f3a3 	rbit	r3, r3
 8004246:	667b      	str	r3, [r7, #100]	@ 0x64
 8004248:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800424c:	663b      	str	r3, [r7, #96]	@ 0x60
 800424e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004250:	fa93 f3a3 	rbit	r3, r3
 8004254:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004256:	4b67      	ldr	r3, [pc, #412]	@ (80043f4 <HAL_RCC_ClockConfig+0x260>)
 8004258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800425a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800425e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004260:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004262:	fa92 f2a2 	rbit	r2, r2
 8004266:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8004268:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800426a:	fab2 f282 	clz	r2, r2
 800426e:	b2d2      	uxtb	r2, r2
 8004270:	f042 0220 	orr.w	r2, r2, #32
 8004274:	b2d2      	uxtb	r2, r2
 8004276:	f002 021f 	and.w	r2, r2, #31
 800427a:	2101      	movs	r1, #1
 800427c:	fa01 f202 	lsl.w	r2, r1, r2
 8004280:	4013      	ands	r3, r2
 8004282:	2b00      	cmp	r3, #0
 8004284:	d17b      	bne.n	800437e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	e0f3      	b.n	8004472 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	2b02      	cmp	r3, #2
 8004290:	d13c      	bne.n	800430c <HAL_RCC_ClockConfig+0x178>
 8004292:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004296:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004298:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800429a:	fa93 f3a3 	rbit	r3, r3
 800429e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80042a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042a2:	fab3 f383 	clz	r3, r3
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	095b      	lsrs	r3, r3, #5
 80042aa:	b2db      	uxtb	r3, r3
 80042ac:	f043 0301 	orr.w	r3, r3, #1
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	d102      	bne.n	80042bc <HAL_RCC_ClockConfig+0x128>
 80042b6:	4b4f      	ldr	r3, [pc, #316]	@ (80043f4 <HAL_RCC_ClockConfig+0x260>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	e00f      	b.n	80042dc <HAL_RCC_ClockConfig+0x148>
 80042bc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80042c0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80042c4:	fa93 f3a3 	rbit	r3, r3
 80042c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80042ca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80042ce:	643b      	str	r3, [r7, #64]	@ 0x40
 80042d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80042d2:	fa93 f3a3 	rbit	r3, r3
 80042d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80042d8:	4b46      	ldr	r3, [pc, #280]	@ (80043f4 <HAL_RCC_ClockConfig+0x260>)
 80042da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042dc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80042e0:	63ba      	str	r2, [r7, #56]	@ 0x38
 80042e2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80042e4:	fa92 f2a2 	rbit	r2, r2
 80042e8:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80042ea:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80042ec:	fab2 f282 	clz	r2, r2
 80042f0:	b2d2      	uxtb	r2, r2
 80042f2:	f042 0220 	orr.w	r2, r2, #32
 80042f6:	b2d2      	uxtb	r2, r2
 80042f8:	f002 021f 	and.w	r2, r2, #31
 80042fc:	2101      	movs	r1, #1
 80042fe:	fa01 f202 	lsl.w	r2, r1, r2
 8004302:	4013      	ands	r3, r2
 8004304:	2b00      	cmp	r3, #0
 8004306:	d13a      	bne.n	800437e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	e0b2      	b.n	8004472 <HAL_RCC_ClockConfig+0x2de>
 800430c:	2302      	movs	r3, #2
 800430e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004312:	fa93 f3a3 	rbit	r3, r3
 8004316:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004318:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800431a:	fab3 f383 	clz	r3, r3
 800431e:	b2db      	uxtb	r3, r3
 8004320:	095b      	lsrs	r3, r3, #5
 8004322:	b2db      	uxtb	r3, r3
 8004324:	f043 0301 	orr.w	r3, r3, #1
 8004328:	b2db      	uxtb	r3, r3
 800432a:	2b01      	cmp	r3, #1
 800432c:	d102      	bne.n	8004334 <HAL_RCC_ClockConfig+0x1a0>
 800432e:	4b31      	ldr	r3, [pc, #196]	@ (80043f4 <HAL_RCC_ClockConfig+0x260>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	e00d      	b.n	8004350 <HAL_RCC_ClockConfig+0x1bc>
 8004334:	2302      	movs	r3, #2
 8004336:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004338:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800433a:	fa93 f3a3 	rbit	r3, r3
 800433e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004340:	2302      	movs	r3, #2
 8004342:	623b      	str	r3, [r7, #32]
 8004344:	6a3b      	ldr	r3, [r7, #32]
 8004346:	fa93 f3a3 	rbit	r3, r3
 800434a:	61fb      	str	r3, [r7, #28]
 800434c:	4b29      	ldr	r3, [pc, #164]	@ (80043f4 <HAL_RCC_ClockConfig+0x260>)
 800434e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004350:	2202      	movs	r2, #2
 8004352:	61ba      	str	r2, [r7, #24]
 8004354:	69ba      	ldr	r2, [r7, #24]
 8004356:	fa92 f2a2 	rbit	r2, r2
 800435a:	617a      	str	r2, [r7, #20]
  return result;
 800435c:	697a      	ldr	r2, [r7, #20]
 800435e:	fab2 f282 	clz	r2, r2
 8004362:	b2d2      	uxtb	r2, r2
 8004364:	f042 0220 	orr.w	r2, r2, #32
 8004368:	b2d2      	uxtb	r2, r2
 800436a:	f002 021f 	and.w	r2, r2, #31
 800436e:	2101      	movs	r1, #1
 8004370:	fa01 f202 	lsl.w	r2, r1, r2
 8004374:	4013      	ands	r3, r2
 8004376:	2b00      	cmp	r3, #0
 8004378:	d101      	bne.n	800437e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e079      	b.n	8004472 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800437e:	4b1d      	ldr	r3, [pc, #116]	@ (80043f4 <HAL_RCC_ClockConfig+0x260>)
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	f023 0203 	bic.w	r2, r3, #3
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	491a      	ldr	r1, [pc, #104]	@ (80043f4 <HAL_RCC_ClockConfig+0x260>)
 800438c:	4313      	orrs	r3, r2
 800438e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004390:	f7fd fbda 	bl	8001b48 <HAL_GetTick>
 8004394:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004396:	e00a      	b.n	80043ae <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004398:	f7fd fbd6 	bl	8001b48 <HAL_GetTick>
 800439c:	4602      	mov	r2, r0
 800439e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d901      	bls.n	80043ae <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80043aa:	2303      	movs	r3, #3
 80043ac:	e061      	b.n	8004472 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043ae:	4b11      	ldr	r3, [pc, #68]	@ (80043f4 <HAL_RCC_ClockConfig+0x260>)
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	f003 020c 	and.w	r2, r3, #12
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	429a      	cmp	r2, r3
 80043be:	d1eb      	bne.n	8004398 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80043c0:	4b0b      	ldr	r3, [pc, #44]	@ (80043f0 <HAL_RCC_ClockConfig+0x25c>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f003 0307 	and.w	r3, r3, #7
 80043c8:	683a      	ldr	r2, [r7, #0]
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d214      	bcs.n	80043f8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043ce:	4b08      	ldr	r3, [pc, #32]	@ (80043f0 <HAL_RCC_ClockConfig+0x25c>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f023 0207 	bic.w	r2, r3, #7
 80043d6:	4906      	ldr	r1, [pc, #24]	@ (80043f0 <HAL_RCC_ClockConfig+0x25c>)
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	4313      	orrs	r3, r2
 80043dc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043de:	4b04      	ldr	r3, [pc, #16]	@ (80043f0 <HAL_RCC_ClockConfig+0x25c>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 0307 	and.w	r3, r3, #7
 80043e6:	683a      	ldr	r2, [r7, #0]
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d005      	beq.n	80043f8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	e040      	b.n	8004472 <HAL_RCC_ClockConfig+0x2de>
 80043f0:	40022000 	.word	0x40022000
 80043f4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 0304 	and.w	r3, r3, #4
 8004400:	2b00      	cmp	r3, #0
 8004402:	d008      	beq.n	8004416 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004404:	4b1d      	ldr	r3, [pc, #116]	@ (800447c <HAL_RCC_ClockConfig+0x2e8>)
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	491a      	ldr	r1, [pc, #104]	@ (800447c <HAL_RCC_ClockConfig+0x2e8>)
 8004412:	4313      	orrs	r3, r2
 8004414:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 0308 	and.w	r3, r3, #8
 800441e:	2b00      	cmp	r3, #0
 8004420:	d009      	beq.n	8004436 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004422:	4b16      	ldr	r3, [pc, #88]	@ (800447c <HAL_RCC_ClockConfig+0x2e8>)
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	691b      	ldr	r3, [r3, #16]
 800442e:	00db      	lsls	r3, r3, #3
 8004430:	4912      	ldr	r1, [pc, #72]	@ (800447c <HAL_RCC_ClockConfig+0x2e8>)
 8004432:	4313      	orrs	r3, r2
 8004434:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004436:	f000 f829 	bl	800448c <HAL_RCC_GetSysClockFreq>
 800443a:	4601      	mov	r1, r0
 800443c:	4b0f      	ldr	r3, [pc, #60]	@ (800447c <HAL_RCC_ClockConfig+0x2e8>)
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004444:	22f0      	movs	r2, #240	@ 0xf0
 8004446:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004448:	693a      	ldr	r2, [r7, #16]
 800444a:	fa92 f2a2 	rbit	r2, r2
 800444e:	60fa      	str	r2, [r7, #12]
  return result;
 8004450:	68fa      	ldr	r2, [r7, #12]
 8004452:	fab2 f282 	clz	r2, r2
 8004456:	b2d2      	uxtb	r2, r2
 8004458:	40d3      	lsrs	r3, r2
 800445a:	4a09      	ldr	r2, [pc, #36]	@ (8004480 <HAL_RCC_ClockConfig+0x2ec>)
 800445c:	5cd3      	ldrb	r3, [r2, r3]
 800445e:	fa21 f303 	lsr.w	r3, r1, r3
 8004462:	4a08      	ldr	r2, [pc, #32]	@ (8004484 <HAL_RCC_ClockConfig+0x2f0>)
 8004464:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004466:	4b08      	ldr	r3, [pc, #32]	@ (8004488 <HAL_RCC_ClockConfig+0x2f4>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4618      	mov	r0, r3
 800446c:	f7fd fb28 	bl	8001ac0 <HAL_InitTick>
  
  return HAL_OK;
 8004470:	2300      	movs	r3, #0
}
 8004472:	4618      	mov	r0, r3
 8004474:	3778      	adds	r7, #120	@ 0x78
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
 800447a:	bf00      	nop
 800447c:	40021000 	.word	0x40021000
 8004480:	08007ad0 	.word	0x08007ad0
 8004484:	20000000 	.word	0x20000000
 8004488:	20000004 	.word	0x20000004

0800448c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800448c:	b480      	push	{r7}
 800448e:	b087      	sub	sp, #28
 8004490:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004492:	2300      	movs	r3, #0
 8004494:	60fb      	str	r3, [r7, #12]
 8004496:	2300      	movs	r3, #0
 8004498:	60bb      	str	r3, [r7, #8]
 800449a:	2300      	movs	r3, #0
 800449c:	617b      	str	r3, [r7, #20]
 800449e:	2300      	movs	r3, #0
 80044a0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80044a2:	2300      	movs	r3, #0
 80044a4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80044a6:	4b1e      	ldr	r3, [pc, #120]	@ (8004520 <HAL_RCC_GetSysClockFreq+0x94>)
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f003 030c 	and.w	r3, r3, #12
 80044b2:	2b04      	cmp	r3, #4
 80044b4:	d002      	beq.n	80044bc <HAL_RCC_GetSysClockFreq+0x30>
 80044b6:	2b08      	cmp	r3, #8
 80044b8:	d003      	beq.n	80044c2 <HAL_RCC_GetSysClockFreq+0x36>
 80044ba:	e026      	b.n	800450a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80044bc:	4b19      	ldr	r3, [pc, #100]	@ (8004524 <HAL_RCC_GetSysClockFreq+0x98>)
 80044be:	613b      	str	r3, [r7, #16]
      break;
 80044c0:	e026      	b.n	8004510 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	0c9b      	lsrs	r3, r3, #18
 80044c6:	f003 030f 	and.w	r3, r3, #15
 80044ca:	4a17      	ldr	r2, [pc, #92]	@ (8004528 <HAL_RCC_GetSysClockFreq+0x9c>)
 80044cc:	5cd3      	ldrb	r3, [r2, r3]
 80044ce:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80044d0:	4b13      	ldr	r3, [pc, #76]	@ (8004520 <HAL_RCC_GetSysClockFreq+0x94>)
 80044d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044d4:	f003 030f 	and.w	r3, r3, #15
 80044d8:	4a14      	ldr	r2, [pc, #80]	@ (800452c <HAL_RCC_GetSysClockFreq+0xa0>)
 80044da:	5cd3      	ldrb	r3, [r2, r3]
 80044dc:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d008      	beq.n	80044fa <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80044e8:	4a0e      	ldr	r2, [pc, #56]	@ (8004524 <HAL_RCC_GetSysClockFreq+0x98>)
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	fb02 f303 	mul.w	r3, r2, r3
 80044f6:	617b      	str	r3, [r7, #20]
 80044f8:	e004      	b.n	8004504 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4a0c      	ldr	r2, [pc, #48]	@ (8004530 <HAL_RCC_GetSysClockFreq+0xa4>)
 80044fe:	fb02 f303 	mul.w	r3, r2, r3
 8004502:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	613b      	str	r3, [r7, #16]
      break;
 8004508:	e002      	b.n	8004510 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800450a:	4b06      	ldr	r3, [pc, #24]	@ (8004524 <HAL_RCC_GetSysClockFreq+0x98>)
 800450c:	613b      	str	r3, [r7, #16]
      break;
 800450e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004510:	693b      	ldr	r3, [r7, #16]
}
 8004512:	4618      	mov	r0, r3
 8004514:	371c      	adds	r7, #28
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr
 800451e:	bf00      	nop
 8004520:	40021000 	.word	0x40021000
 8004524:	007a1200 	.word	0x007a1200
 8004528:	08007ae8 	.word	0x08007ae8
 800452c:	08007af8 	.word	0x08007af8
 8004530:	003d0900 	.word	0x003d0900

08004534 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004534:	b480      	push	{r7}
 8004536:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004538:	4b03      	ldr	r3, [pc, #12]	@ (8004548 <HAL_RCC_GetHCLKFreq+0x14>)
 800453a:	681b      	ldr	r3, [r3, #0]
}
 800453c:	4618      	mov	r0, r3
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr
 8004546:	bf00      	nop
 8004548:	20000000 	.word	0x20000000

0800454c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b082      	sub	sp, #8
 8004550:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004552:	f7ff ffef 	bl	8004534 <HAL_RCC_GetHCLKFreq>
 8004556:	4601      	mov	r1, r0
 8004558:	4b0b      	ldr	r3, [pc, #44]	@ (8004588 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004560:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8004564:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004566:	687a      	ldr	r2, [r7, #4]
 8004568:	fa92 f2a2 	rbit	r2, r2
 800456c:	603a      	str	r2, [r7, #0]
  return result;
 800456e:	683a      	ldr	r2, [r7, #0]
 8004570:	fab2 f282 	clz	r2, r2
 8004574:	b2d2      	uxtb	r2, r2
 8004576:	40d3      	lsrs	r3, r2
 8004578:	4a04      	ldr	r2, [pc, #16]	@ (800458c <HAL_RCC_GetPCLK1Freq+0x40>)
 800457a:	5cd3      	ldrb	r3, [r2, r3]
 800457c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004580:	4618      	mov	r0, r3
 8004582:	3708      	adds	r7, #8
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}
 8004588:	40021000 	.word	0x40021000
 800458c:	08007ae0 	.word	0x08007ae0

08004590 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b082      	sub	sp, #8
 8004594:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004596:	f7ff ffcd 	bl	8004534 <HAL_RCC_GetHCLKFreq>
 800459a:	4601      	mov	r1, r0
 800459c:	4b0b      	ldr	r3, [pc, #44]	@ (80045cc <HAL_RCC_GetPCLK2Freq+0x3c>)
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 80045a4:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 80045a8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045aa:	687a      	ldr	r2, [r7, #4]
 80045ac:	fa92 f2a2 	rbit	r2, r2
 80045b0:	603a      	str	r2, [r7, #0]
  return result;
 80045b2:	683a      	ldr	r2, [r7, #0]
 80045b4:	fab2 f282 	clz	r2, r2
 80045b8:	b2d2      	uxtb	r2, r2
 80045ba:	40d3      	lsrs	r3, r2
 80045bc:	4a04      	ldr	r2, [pc, #16]	@ (80045d0 <HAL_RCC_GetPCLK2Freq+0x40>)
 80045be:	5cd3      	ldrb	r3, [r2, r3]
 80045c0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80045c4:	4618      	mov	r0, r3
 80045c6:	3708      	adds	r7, #8
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}
 80045cc:	40021000 	.word	0x40021000
 80045d0:	08007ae0 	.word	0x08007ae0

080045d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b092      	sub	sp, #72	@ 0x48
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80045dc:	2300      	movs	r3, #0
 80045de:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 80045e0:	2300      	movs	r3, #0
 80045e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80045e4:	2300      	movs	r3, #0
 80045e6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	f000 80cd 	beq.w	8004792 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045f8:	4b86      	ldr	r3, [pc, #536]	@ (8004814 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80045fa:	69db      	ldr	r3, [r3, #28]
 80045fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004600:	2b00      	cmp	r3, #0
 8004602:	d10e      	bne.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004604:	4b83      	ldr	r3, [pc, #524]	@ (8004814 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004606:	69db      	ldr	r3, [r3, #28]
 8004608:	4a82      	ldr	r2, [pc, #520]	@ (8004814 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800460a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800460e:	61d3      	str	r3, [r2, #28]
 8004610:	4b80      	ldr	r3, [pc, #512]	@ (8004814 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004612:	69db      	ldr	r3, [r3, #28]
 8004614:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004618:	60bb      	str	r3, [r7, #8]
 800461a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800461c:	2301      	movs	r3, #1
 800461e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004622:	4b7d      	ldr	r3, [pc, #500]	@ (8004818 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800462a:	2b00      	cmp	r3, #0
 800462c:	d118      	bne.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800462e:	4b7a      	ldr	r3, [pc, #488]	@ (8004818 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a79      	ldr	r2, [pc, #484]	@ (8004818 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004634:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004638:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800463a:	f7fd fa85 	bl	8001b48 <HAL_GetTick>
 800463e:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004640:	e008      	b.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004642:	f7fd fa81 	bl	8001b48 <HAL_GetTick>
 8004646:	4602      	mov	r2, r0
 8004648:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800464a:	1ad3      	subs	r3, r2, r3
 800464c:	2b64      	cmp	r3, #100	@ 0x64
 800464e:	d901      	bls.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004650:	2303      	movs	r3, #3
 8004652:	e0db      	b.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004654:	4b70      	ldr	r3, [pc, #448]	@ (8004818 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800465c:	2b00      	cmp	r3, #0
 800465e:	d0f0      	beq.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004660:	4b6c      	ldr	r3, [pc, #432]	@ (8004814 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004662:	6a1b      	ldr	r3, [r3, #32]
 8004664:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004668:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800466a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800466c:	2b00      	cmp	r3, #0
 800466e:	d07d      	beq.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004678:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800467a:	429a      	cmp	r2, r3
 800467c:	d076      	beq.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800467e:	4b65      	ldr	r3, [pc, #404]	@ (8004814 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004680:	6a1b      	ldr	r3, [r3, #32]
 8004682:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004686:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004688:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800468c:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800468e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004690:	fa93 f3a3 	rbit	r3, r3
 8004694:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004696:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004698:	fab3 f383 	clz	r3, r3
 800469c:	b2db      	uxtb	r3, r3
 800469e:	461a      	mov	r2, r3
 80046a0:	4b5e      	ldr	r3, [pc, #376]	@ (800481c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80046a2:	4413      	add	r3, r2
 80046a4:	009b      	lsls	r3, r3, #2
 80046a6:	461a      	mov	r2, r3
 80046a8:	2301      	movs	r3, #1
 80046aa:	6013      	str	r3, [r2, #0]
 80046ac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80046b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046b4:	fa93 f3a3 	rbit	r3, r3
 80046b8:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80046ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80046bc:	fab3 f383 	clz	r3, r3
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	461a      	mov	r2, r3
 80046c4:	4b55      	ldr	r3, [pc, #340]	@ (800481c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80046c6:	4413      	add	r3, r2
 80046c8:	009b      	lsls	r3, r3, #2
 80046ca:	461a      	mov	r2, r3
 80046cc:	2300      	movs	r3, #0
 80046ce:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80046d0:	4a50      	ldr	r2, [pc, #320]	@ (8004814 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80046d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046d4:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80046d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046d8:	f003 0301 	and.w	r3, r3, #1
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d045      	beq.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046e0:	f7fd fa32 	bl	8001b48 <HAL_GetTick>
 80046e4:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046e6:	e00a      	b.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046e8:	f7fd fa2e 	bl	8001b48 <HAL_GetTick>
 80046ec:	4602      	mov	r2, r0
 80046ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80046f0:	1ad3      	subs	r3, r2, r3
 80046f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d901      	bls.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80046fa:	2303      	movs	r3, #3
 80046fc:	e086      	b.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x238>
 80046fe:	2302      	movs	r3, #2
 8004700:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004702:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004704:	fa93 f3a3 	rbit	r3, r3
 8004708:	627b      	str	r3, [r7, #36]	@ 0x24
 800470a:	2302      	movs	r3, #2
 800470c:	623b      	str	r3, [r7, #32]
 800470e:	6a3b      	ldr	r3, [r7, #32]
 8004710:	fa93 f3a3 	rbit	r3, r3
 8004714:	61fb      	str	r3, [r7, #28]
  return result;
 8004716:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004718:	fab3 f383 	clz	r3, r3
 800471c:	b2db      	uxtb	r3, r3
 800471e:	095b      	lsrs	r3, r3, #5
 8004720:	b2db      	uxtb	r3, r3
 8004722:	f043 0302 	orr.w	r3, r3, #2
 8004726:	b2db      	uxtb	r3, r3
 8004728:	2b02      	cmp	r3, #2
 800472a:	d102      	bne.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800472c:	4b39      	ldr	r3, [pc, #228]	@ (8004814 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800472e:	6a1b      	ldr	r3, [r3, #32]
 8004730:	e007      	b.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8004732:	2302      	movs	r3, #2
 8004734:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004736:	69bb      	ldr	r3, [r7, #24]
 8004738:	fa93 f3a3 	rbit	r3, r3
 800473c:	617b      	str	r3, [r7, #20]
 800473e:	4b35      	ldr	r3, [pc, #212]	@ (8004814 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004742:	2202      	movs	r2, #2
 8004744:	613a      	str	r2, [r7, #16]
 8004746:	693a      	ldr	r2, [r7, #16]
 8004748:	fa92 f2a2 	rbit	r2, r2
 800474c:	60fa      	str	r2, [r7, #12]
  return result;
 800474e:	68fa      	ldr	r2, [r7, #12]
 8004750:	fab2 f282 	clz	r2, r2
 8004754:	b2d2      	uxtb	r2, r2
 8004756:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800475a:	b2d2      	uxtb	r2, r2
 800475c:	f002 021f 	and.w	r2, r2, #31
 8004760:	2101      	movs	r1, #1
 8004762:	fa01 f202 	lsl.w	r2, r1, r2
 8004766:	4013      	ands	r3, r2
 8004768:	2b00      	cmp	r3, #0
 800476a:	d0bd      	beq.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800476c:	4b29      	ldr	r3, [pc, #164]	@ (8004814 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800476e:	6a1b      	ldr	r3, [r3, #32]
 8004770:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	4926      	ldr	r1, [pc, #152]	@ (8004814 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800477a:	4313      	orrs	r3, r2
 800477c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800477e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004782:	2b01      	cmp	r3, #1
 8004784:	d105      	bne.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004786:	4b23      	ldr	r3, [pc, #140]	@ (8004814 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004788:	69db      	ldr	r3, [r3, #28]
 800478a:	4a22      	ldr	r2, [pc, #136]	@ (8004814 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800478c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004790:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 0301 	and.w	r3, r3, #1
 800479a:	2b00      	cmp	r3, #0
 800479c:	d008      	beq.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800479e:	4b1d      	ldr	r3, [pc, #116]	@ (8004814 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80047a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047a2:	f023 0203 	bic.w	r2, r3, #3
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	491a      	ldr	r1, [pc, #104]	@ (8004814 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80047ac:	4313      	orrs	r3, r2
 80047ae:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 0320 	and.w	r3, r3, #32
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d008      	beq.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80047bc:	4b15      	ldr	r3, [pc, #84]	@ (8004814 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80047be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047c0:	f023 0210 	bic.w	r2, r3, #16
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	4912      	ldr	r1, [pc, #72]	@ (8004814 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80047ca:	4313      	orrs	r3, r2
 80047cc:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d008      	beq.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80047da:	4b0e      	ldr	r3, [pc, #56]	@ (8004814 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80047dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047de:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	691b      	ldr	r3, [r3, #16]
 80047e6:	490b      	ldr	r1, [pc, #44]	@ (8004814 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80047e8:	4313      	orrs	r3, r2
 80047ea:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d008      	beq.n	800480a <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80047f8:	4b06      	ldr	r3, [pc, #24]	@ (8004814 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80047fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047fc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	695b      	ldr	r3, [r3, #20]
 8004804:	4903      	ldr	r1, [pc, #12]	@ (8004814 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004806:	4313      	orrs	r3, r2
 8004808:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800480a:	2300      	movs	r3, #0
}
 800480c:	4618      	mov	r0, r3
 800480e:	3748      	adds	r7, #72	@ 0x48
 8004810:	46bd      	mov	sp, r7
 8004812:	bd80      	pop	{r7, pc}
 8004814:	40021000 	.word	0x40021000
 8004818:	40007000 	.word	0x40007000
 800481c:	10908100 	.word	0x10908100

08004820 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b084      	sub	sp, #16
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d101      	bne.n	8004832 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	e095      	b.n	800495e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004836:	2b00      	cmp	r3, #0
 8004838:	d108      	bne.n	800484c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004842:	d009      	beq.n	8004858 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2200      	movs	r2, #0
 8004848:	61da      	str	r2, [r3, #28]
 800484a:	e005      	b.n	8004858 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2200      	movs	r2, #0
 8004850:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2200      	movs	r2, #0
 8004856:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2200      	movs	r2, #0
 800485c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004864:	b2db      	uxtb	r3, r3
 8004866:	2b00      	cmp	r3, #0
 8004868:	d106      	bne.n	8004878 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2200      	movs	r2, #0
 800486e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f7fc fe02 	bl	800147c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2202      	movs	r2, #2
 800487c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800488e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	68db      	ldr	r3, [r3, #12]
 8004894:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004898:	d902      	bls.n	80048a0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800489a:	2300      	movs	r3, #0
 800489c:	60fb      	str	r3, [r7, #12]
 800489e:	e002      	b.n	80048a6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80048a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80048a4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	68db      	ldr	r3, [r3, #12]
 80048aa:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80048ae:	d007      	beq.n	80048c0 <HAL_SPI_Init+0xa0>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	68db      	ldr	r3, [r3, #12]
 80048b4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80048b8:	d002      	beq.n	80048c0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2200      	movs	r2, #0
 80048be:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80048d0:	431a      	orrs	r2, r3
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	691b      	ldr	r3, [r3, #16]
 80048d6:	f003 0302 	and.w	r3, r3, #2
 80048da:	431a      	orrs	r2, r3
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	695b      	ldr	r3, [r3, #20]
 80048e0:	f003 0301 	and.w	r3, r3, #1
 80048e4:	431a      	orrs	r2, r3
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	699b      	ldr	r3, [r3, #24]
 80048ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80048ee:	431a      	orrs	r2, r3
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	69db      	ldr	r3, [r3, #28]
 80048f4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80048f8:	431a      	orrs	r2, r3
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6a1b      	ldr	r3, [r3, #32]
 80048fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004902:	ea42 0103 	orr.w	r1, r2, r3
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800490a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	430a      	orrs	r2, r1
 8004914:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	699b      	ldr	r3, [r3, #24]
 800491a:	0c1b      	lsrs	r3, r3, #16
 800491c:	f003 0204 	and.w	r2, r3, #4
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004924:	f003 0310 	and.w	r3, r3, #16
 8004928:	431a      	orrs	r2, r3
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800492e:	f003 0308 	and.w	r3, r3, #8
 8004932:	431a      	orrs	r2, r3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	68db      	ldr	r3, [r3, #12]
 8004938:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800493c:	ea42 0103 	orr.w	r1, r2, r3
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	430a      	orrs	r2, r1
 800494c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2200      	movs	r2, #0
 8004952:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2201      	movs	r2, #1
 8004958:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800495c:	2300      	movs	r3, #0
}
 800495e:	4618      	mov	r0, r3
 8004960:	3710      	adds	r7, #16
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}
	...

08004968 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b086      	sub	sp, #24
 800496c:	af00      	add	r7, sp, #0
 800496e:	60f8      	str	r0, [r7, #12]
 8004970:	60b9      	str	r1, [r7, #8]
 8004972:	4613      	mov	r3, r2
 8004974:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004976:	2300      	movs	r3, #0
 8004978:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004980:	2b01      	cmp	r3, #1
 8004982:	d101      	bne.n	8004988 <HAL_SPI_Transmit_DMA+0x20>
 8004984:	2302      	movs	r3, #2
 8004986:	e0d4      	b.n	8004b32 <HAL_SPI_Transmit_DMA+0x1ca>
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2201      	movs	r2, #1
 800498c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004996:	b2db      	uxtb	r3, r3
 8004998:	2b01      	cmp	r3, #1
 800499a:	d002      	beq.n	80049a2 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800499c:	2302      	movs	r3, #2
 800499e:	75fb      	strb	r3, [r7, #23]
    goto error;
 80049a0:	e0c2      	b.n	8004b28 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  if ((pData == NULL) || (Size == 0U))
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d002      	beq.n	80049ae <HAL_SPI_Transmit_DMA+0x46>
 80049a8:	88fb      	ldrh	r3, [r7, #6]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d102      	bne.n	80049b4 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80049b2:	e0b9      	b.n	8004b28 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2203      	movs	r2, #3
 80049b8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2200      	movs	r2, #0
 80049c0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	68ba      	ldr	r2, [r7, #8]
 80049c6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	88fa      	ldrh	r2, [r7, #6]
 80049cc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	88fa      	ldrh	r2, [r7, #6]
 80049d2:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2200      	movs	r2, #0
 80049d8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2200      	movs	r2, #0
 80049de:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2200      	movs	r2, #0
 80049e4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->RxXferSize  = 0U;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2200      	movs	r2, #0
 80049ea:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2200      	movs	r2, #0
 80049f2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80049fe:	d10f      	bne.n	8004a20 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a0e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004a1e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a24:	4a45      	ldr	r2, [pc, #276]	@ (8004b3c <HAL_SPI_Transmit_DMA+0x1d4>)
 8004a26:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a2c:	4a44      	ldr	r2, [pc, #272]	@ (8004b40 <HAL_SPI_Transmit_DMA+0x1d8>)
 8004a2e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a34:	4a43      	ldr	r2, [pc, #268]	@ (8004b44 <HAL_SPI_Transmit_DMA+0x1dc>)
 8004a36:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	635a      	str	r2, [r3, #52]	@ 0x34

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	685a      	ldr	r2, [r3, #4]
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004a4e:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	68db      	ldr	r3, [r3, #12]
 8004a54:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004a58:	d82d      	bhi.n	8004ab6 <HAL_SPI_Transmit_DMA+0x14e>
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a5e:	695b      	ldr	r3, [r3, #20]
 8004a60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a64:	d127      	bne.n	8004ab6 <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a6a:	b29b      	uxth	r3, r3
 8004a6c:	f003 0301 	and.w	r3, r3, #1
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d10f      	bne.n	8004a94 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	685a      	ldr	r2, [r3, #4]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004a82:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a88:	b29b      	uxth	r3, r3
 8004a8a:	085b      	lsrs	r3, r3, #1
 8004a8c:	b29a      	uxth	r2, r3
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004a92:	e010      	b.n	8004ab6 <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	685a      	ldr	r2, [r3, #4]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004aa2:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004aa8:	b29b      	uxth	r3, r3
 8004aaa:	085b      	lsrs	r3, r3, #1
 8004aac:	b29b      	uxth	r3, r3
 8004aae:	3301      	adds	r3, #1
 8004ab0:	b29a      	uxth	r2, r3
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004abe:	4619      	mov	r1, r3
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	330c      	adds	r3, #12
 8004ac6:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004acc:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004ace:	f7fe f849 	bl	8002b64 <HAL_DMA_Start_IT>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d008      	beq.n	8004aea <HAL_SPI_Transmit_DMA+0x182>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004adc:	f043 0210 	orr.w	r2, r3, #16
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	661a      	str	r2, [r3, #96]	@ 0x60
    errorcode = HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	75fb      	strb	r3, [r7, #23]

    goto error;
 8004ae8:	e01e      	b.n	8004b28 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004af4:	2b40      	cmp	r3, #64	@ 0x40
 8004af6:	d007      	beq.n	8004b08 <HAL_SPI_Transmit_DMA+0x1a0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004b06:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	685a      	ldr	r2, [r3, #4]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f042 0220 	orr.w	r2, r2, #32
 8004b16:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	685a      	ldr	r2, [r3, #4]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f042 0202 	orr.w	r2, r2, #2
 8004b26:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8004b30:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3718      	adds	r7, #24
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}
 8004b3a:	bf00      	nop
 8004b3c:	08005093 	.word	0x08005093
 8004b40:	08004eb5 	.word	0x08004eb5
 8004b44:	080050e7 	.word	0x080050e7

08004b48 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b086      	sub	sp, #24
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	60f8      	str	r0, [r7, #12]
 8004b50:	60b9      	str	r1, [r7, #8]
 8004b52:	607a      	str	r2, [r7, #4]
 8004b54:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004b56:	2300      	movs	r3, #0
 8004b58:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	d101      	bne.n	8004b68 <HAL_SPI_TransmitReceive_DMA+0x20>
 8004b64:	2302      	movs	r3, #2
 8004b66:	e164      	b.n	8004e32 <HAL_SPI_TransmitReceive_DMA+0x2ea>
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004b76:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8004b7e:	7dbb      	ldrb	r3, [r7, #22]
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d00d      	beq.n	8004ba0 <HAL_SPI_TransmitReceive_DMA+0x58>
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004b8a:	d106      	bne.n	8004b9a <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d102      	bne.n	8004b9a <HAL_SPI_TransmitReceive_DMA+0x52>
 8004b94:	7dbb      	ldrb	r3, [r7, #22]
 8004b96:	2b04      	cmp	r3, #4
 8004b98:	d002      	beq.n	8004ba0 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8004b9a:	2302      	movs	r3, #2
 8004b9c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004b9e:	e143      	b.n	8004e28 <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d005      	beq.n	8004bb2 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d002      	beq.n	8004bb2 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8004bac:	887b      	ldrh	r3, [r7, #2]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d102      	bne.n	8004bb8 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004bb6:	e137      	b.n	8004e28 <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004bbe:	b2db      	uxtb	r3, r3
 8004bc0:	2b04      	cmp	r3, #4
 8004bc2:	d003      	beq.n	8004bcc <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2205      	movs	r2, #5
 8004bc8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	68ba      	ldr	r2, [r7, #8]
 8004bd6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	887a      	ldrh	r2, [r7, #2]
 8004bdc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	887a      	ldrh	r2, [r7, #2]
 8004be2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	687a      	ldr	r2, [r7, #4]
 8004be8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	887a      	ldrh	r2, [r7, #2]
 8004bee:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	887a      	ldrh	r2, [r7, #2]
 8004bf6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2200      	movs	r2, #0
 8004c04:	651a      	str	r2, [r3, #80]	@ 0x50
    goto error;
  }
#endif /* STM32F302xC || STM32F303xC || STM32F373xC || STM32F358xx || STM32F378xx */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	685a      	ldr	r2, [r3, #4]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f422 42c0 	bic.w	r2, r2, #24576	@ 0x6000
 8004c14:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	68db      	ldr	r3, [r3, #12]
 8004c1a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004c1e:	d908      	bls.n	8004c32 <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	685a      	ldr	r2, [r3, #4]
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004c2e:	605a      	str	r2, [r3, #4]
 8004c30:	e06f      	b.n	8004d12 <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	685a      	ldr	r2, [r3, #4]
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004c40:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c46:	695b      	ldr	r3, [r3, #20]
 8004c48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c4c:	d126      	bne.n	8004c9c <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8004c52:	f003 0301 	and.w	r3, r3, #1
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d10f      	bne.n	8004c7a <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	685a      	ldr	r2, [r3, #4]
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004c68:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	085b      	lsrs	r3, r3, #1
 8004c72:	b29a      	uxth	r2, r3
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004c78:	e010      	b.n	8004c9c <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	685a      	ldr	r2, [r3, #4]
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004c88:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	085b      	lsrs	r3, r3, #1
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	3301      	adds	r3, #1
 8004c96:	b29a      	uxth	r2, r3
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ca0:	695b      	ldr	r3, [r3, #20]
 8004ca2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ca6:	d134      	bne.n	8004d12 <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	685a      	ldr	r2, [r3, #4]
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004cb6:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	f003 0301 	and.w	r3, r3, #1
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d111      	bne.n	8004cec <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	685a      	ldr	r2, [r3, #4]
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004cd6:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004cde:	b29b      	uxth	r3, r3
 8004ce0:	085b      	lsrs	r3, r3, #1
 8004ce2:	b29a      	uxth	r2, r3
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8004cea:	e012      	b.n	8004d12 <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	685a      	ldr	r2, [r3, #4]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004cfa:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004d02:	b29b      	uxth	r3, r3
 8004d04:	085b      	lsrs	r3, r3, #1
 8004d06:	b29b      	uxth	r3, r3
 8004d08:	3301      	adds	r3, #1
 8004d0a:	b29a      	uxth	r2, r3
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004d18:	b2db      	uxtb	r3, r3
 8004d1a:	2b04      	cmp	r3, #4
 8004d1c:	d108      	bne.n	8004d30 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d22:	4a46      	ldr	r2, [pc, #280]	@ (8004e3c <HAL_SPI_TransmitReceive_DMA+0x2f4>)
 8004d24:	62da      	str	r2, [r3, #44]	@ 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d2a:	4a45      	ldr	r2, [pc, #276]	@ (8004e40 <HAL_SPI_TransmitReceive_DMA+0x2f8>)
 8004d2c:	629a      	str	r2, [r3, #40]	@ 0x28
 8004d2e:	e007      	b.n	8004d40 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d34:	4a43      	ldr	r2, [pc, #268]	@ (8004e44 <HAL_SPI_TransmitReceive_DMA+0x2fc>)
 8004d36:	62da      	str	r2, [r3, #44]	@ 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d3c:	4a42      	ldr	r2, [pc, #264]	@ (8004e48 <HAL_SPI_TransmitReceive_DMA+0x300>)
 8004d3e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d44:	4a41      	ldr	r2, [pc, #260]	@ (8004e4c <HAL_SPI_TransmitReceive_DMA+0x304>)
 8004d46:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	330c      	adds	r3, #12
 8004d5a:	4619      	mov	r1, r3
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d60:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004d68:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8004d6a:	f7fd fefb 	bl	8002b64 <HAL_DMA_Start_IT>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d008      	beq.n	8004d86 <HAL_SPI_TransmitReceive_DMA+0x23e>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d78:	f043 0210 	orr.w	r2, r3, #16
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	661a      	str	r2, [r3, #96]	@ 0x60
    errorcode = HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	75fb      	strb	r3, [r7, #23]

    goto error;
 8004d84:	e050      	b.n	8004e28 <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	685a      	ldr	r2, [r3, #4]
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f042 0201 	orr.w	r2, r2, #1
 8004d94:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi->hdmatx->XferCpltCallback     = NULL;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004da2:	2200      	movs	r2, #0
 8004da4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi->hdmatx->XferErrorCallback    = NULL;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004daa:	2200      	movs	r2, #0
 8004dac:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->hdmatx->XferAbortCallback    = NULL;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004db2:	2200      	movs	r2, #0
 8004db4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dbe:	4619      	mov	r1, r3
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	330c      	adds	r3, #12
 8004dc6:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004dcc:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004dce:	f7fd fec9 	bl	8002b64 <HAL_DMA_Start_IT>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d008      	beq.n	8004dea <HAL_SPI_TransmitReceive_DMA+0x2a2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ddc:	f043 0210 	orr.w	r2, r3, #16
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	661a      	str	r2, [r3, #96]	@ 0x60
    errorcode = HAL_ERROR;
 8004de4:	2301      	movs	r3, #1
 8004de6:	75fb      	strb	r3, [r7, #23]

    goto error;
 8004de8:	e01e      	b.n	8004e28 <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004df4:	2b40      	cmp	r3, #64	@ 0x40
 8004df6:	d007      	beq.n	8004e08 <HAL_SPI_TransmitReceive_DMA+0x2c0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	681a      	ldr	r2, [r3, #0]
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004e06:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	685a      	ldr	r2, [r3, #4]
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f042 0220 	orr.w	r2, r2, #32
 8004e16:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	685a      	ldr	r2, [r3, #4]
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f042 0202 	orr.w	r2, r2, #2
 8004e26:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8004e30:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3718      	adds	r7, #24
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}
 8004e3a:	bf00      	nop
 8004e3c:	080050af 	.word	0x080050af
 8004e40:	08004f5b 	.word	0x08004f5b
 8004e44:	080050cb 	.word	0x080050cb
 8004e48:	08005003 	.word	0x08005003
 8004e4c:	080050e7 	.word	0x080050e7

08004e50 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b083      	sub	sp, #12
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8004e58:	bf00      	nop
 8004e5a:	370c      	adds	r7, #12
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e62:	4770      	bx	lr

08004e64 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b083      	sub	sp, #12
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8004e6c:	bf00      	nop
 8004e6e:	370c      	adds	r7, #12
 8004e70:	46bd      	mov	sp, r7
 8004e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e76:	4770      	bx	lr

08004e78 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b083      	sub	sp, #12
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8004e80:	bf00      	nop
 8004e82:	370c      	adds	r7, #12
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr

08004e8c <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b083      	sub	sp, #12
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8004e94:	bf00      	nop
 8004e96:	370c      	adds	r7, #12
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9e:	4770      	bx	lr

08004ea0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b083      	sub	sp, #12
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004ea8:	bf00      	nop
 8004eaa:	370c      	adds	r7, #12
 8004eac:	46bd      	mov	sp, r7
 8004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb2:	4770      	bx	lr

08004eb4 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b086      	sub	sp, #24
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ec0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ec2:	f7fc fe41 	bl	8001b48 <HAL_GetTick>
 8004ec6:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f003 0320 	and.w	r3, r3, #32
 8004ed2:	2b20      	cmp	r3, #32
 8004ed4:	d03b      	beq.n	8004f4e <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	685a      	ldr	r2, [r3, #4]
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f022 0220 	bic.w	r2, r2, #32
 8004ee4:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	685a      	ldr	r2, [r3, #4]
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f022 0202 	bic.w	r2, r2, #2
 8004ef4:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004ef6:	693a      	ldr	r2, [r7, #16]
 8004ef8:	2164      	movs	r1, #100	@ 0x64
 8004efa:	6978      	ldr	r0, [r7, #20]
 8004efc:	f000 fa8a 	bl	8005414 <SPI_EndRxTxTransaction>
 8004f00:	4603      	mov	r3, r0
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d005      	beq.n	8004f12 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f0a:	f043 0220 	orr.w	r2, r3, #32
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d10a      	bne.n	8004f30 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	60fb      	str	r3, [r7, #12]
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	68db      	ldr	r3, [r3, #12]
 8004f24:	60fb      	str	r3, [r7, #12]
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	60fb      	str	r3, [r7, #12]
 8004f2e:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	2200      	movs	r2, #0
 8004f34:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	2201      	movs	r2, #1
 8004f3a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d003      	beq.n	8004f4e <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004f46:	6978      	ldr	r0, [r7, #20]
 8004f48:	f7ff ffaa 	bl	8004ea0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004f4c:	e002      	b.n	8004f54 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8004f4e:	6978      	ldr	r0, [r7, #20]
 8004f50:	f7fb fa10 	bl	8000374 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004f54:	3718      	adds	r7, #24
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}

08004f5a <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004f5a:	b580      	push	{r7, lr}
 8004f5c:	b084      	sub	sp, #16
 8004f5e:	af00      	add	r7, sp, #0
 8004f60:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f66:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f68:	f7fc fdee 	bl	8001b48 <HAL_GetTick>
 8004f6c:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f003 0320 	and.w	r3, r3, #32
 8004f78:	2b20      	cmp	r3, #32
 8004f7a:	d03c      	beq.n	8004ff6 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	685a      	ldr	r2, [r3, #4]
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f022 0220 	bic.w	r2, r2, #32
 8004f8a:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d10d      	bne.n	8004fb0 <SPI_DMAReceiveCplt+0x56>
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004f9c:	d108      	bne.n	8004fb0 <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	685a      	ldr	r2, [r3, #4]
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f022 0203 	bic.w	r2, r2, #3
 8004fac:	605a      	str	r2, [r3, #4]
 8004fae:	e007      	b.n	8004fc0 <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	685a      	ldr	r2, [r3, #4]
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f022 0201 	bic.w	r2, r2, #1
 8004fbe:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004fc0:	68ba      	ldr	r2, [r7, #8]
 8004fc2:	2164      	movs	r1, #100	@ 0x64
 8004fc4:	68f8      	ldr	r0, [r7, #12]
 8004fc6:	f000 f9cd 	bl	8005364 <SPI_EndRxTransaction>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d002      	beq.n	8004fd6 <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2220      	movs	r2, #32
 8004fd4:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    hspi->RxXferCount = 0U;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d003      	beq.n	8004ff6 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004fee:	68f8      	ldr	r0, [r7, #12]
 8004ff0:	f7ff ff56 	bl	8004ea0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004ff4:	e002      	b.n	8004ffc <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8004ff6:	68f8      	ldr	r0, [r7, #12]
 8004ff8:	f7ff ff2a 	bl	8004e50 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004ffc:	3710      	adds	r7, #16
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}

08005002 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005002:	b580      	push	{r7, lr}
 8005004:	b084      	sub	sp, #16
 8005006:	af00      	add	r7, sp, #0
 8005008:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800500e:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005010:	f7fc fd9a 	bl	8001b48 <HAL_GetTick>
 8005014:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f003 0320 	and.w	r3, r3, #32
 8005020:	2b20      	cmp	r3, #32
 8005022:	d030      	beq.n	8005086 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	685a      	ldr	r2, [r3, #4]
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f022 0220 	bic.w	r2, r2, #32
 8005032:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005034:	68ba      	ldr	r2, [r7, #8]
 8005036:	2164      	movs	r1, #100	@ 0x64
 8005038:	68f8      	ldr	r0, [r7, #12]
 800503a:	f000 f9eb 	bl	8005414 <SPI_EndRxTxTransaction>
 800503e:	4603      	mov	r3, r0
 8005040:	2b00      	cmp	r3, #0
 8005042:	d005      	beq.n	8005050 <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005048:	f043 0220 	orr.w	r2, r3, #32
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	685a      	ldr	r2, [r3, #4]
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f022 0203 	bic.w	r2, r2, #3
 800505e:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2200      	movs	r2, #0
 8005064:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->RxXferCount = 0U;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2200      	movs	r2, #0
 800506a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2201      	movs	r2, #1
 8005072:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800507a:	2b00      	cmp	r3, #0
 800507c:	d003      	beq.n	8005086 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800507e:	68f8      	ldr	r0, [r7, #12]
 8005080:	f7ff ff0e 	bl	8004ea0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005084:	e002      	b.n	800508c <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8005086:	68f8      	ldr	r0, [r7, #12]
 8005088:	f7fb f960 	bl	800034c <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800508c:	3710      	adds	r7, #16
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}

08005092 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005092:	b580      	push	{r7, lr}
 8005094:	b084      	sub	sp, #16
 8005096:	af00      	add	r7, sp, #0
 8005098:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800509e:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80050a0:	68f8      	ldr	r0, [r7, #12]
 80050a2:	f7ff fedf 	bl	8004e64 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80050a6:	bf00      	nop
 80050a8:	3710      	adds	r7, #16
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}

080050ae <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80050ae:	b580      	push	{r7, lr}
 80050b0:	b084      	sub	sp, #16
 80050b2:	af00      	add	r7, sp, #0
 80050b4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050ba:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80050bc:	68f8      	ldr	r0, [r7, #12]
 80050be:	f7ff fedb 	bl	8004e78 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80050c2:	bf00      	nop
 80050c4:	3710      	adds	r7, #16
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}

080050ca <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80050ca:	b580      	push	{r7, lr}
 80050cc:	b084      	sub	sp, #16
 80050ce:	af00      	add	r7, sp, #0
 80050d0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050d6:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80050d8:	68f8      	ldr	r0, [r7, #12]
 80050da:	f7ff fed7 	bl	8004e8c <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80050de:	bf00      	nop
 80050e0:	3710      	adds	r7, #16
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}

080050e6 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80050e6:	b580      	push	{r7, lr}
 80050e8:	b084      	sub	sp, #16
 80050ea:	af00      	add	r7, sp, #0
 80050ec:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050f2:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	685a      	ldr	r2, [r3, #4]
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f022 0203 	bic.w	r2, r2, #3
 8005102:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005108:	f043 0210 	orr.w	r2, r3, #16
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2201      	movs	r2, #1
 8005114:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005118:	68f8      	ldr	r0, [r7, #12]
 800511a:	f7ff fec1 	bl	8004ea0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800511e:	bf00      	nop
 8005120:	3710      	adds	r7, #16
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}
	...

08005128 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b088      	sub	sp, #32
 800512c:	af00      	add	r7, sp, #0
 800512e:	60f8      	str	r0, [r7, #12]
 8005130:	60b9      	str	r1, [r7, #8]
 8005132:	603b      	str	r3, [r7, #0]
 8005134:	4613      	mov	r3, r2
 8005136:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005138:	f7fc fd06 	bl	8001b48 <HAL_GetTick>
 800513c:	4602      	mov	r2, r0
 800513e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005140:	1a9b      	subs	r3, r3, r2
 8005142:	683a      	ldr	r2, [r7, #0]
 8005144:	4413      	add	r3, r2
 8005146:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005148:	f7fc fcfe 	bl	8001b48 <HAL_GetTick>
 800514c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800514e:	4b39      	ldr	r3, [pc, #228]	@ (8005234 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	015b      	lsls	r3, r3, #5
 8005154:	0d1b      	lsrs	r3, r3, #20
 8005156:	69fa      	ldr	r2, [r7, #28]
 8005158:	fb02 f303 	mul.w	r3, r2, r3
 800515c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800515e:	e054      	b.n	800520a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005166:	d050      	beq.n	800520a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005168:	f7fc fcee 	bl	8001b48 <HAL_GetTick>
 800516c:	4602      	mov	r2, r0
 800516e:	69bb      	ldr	r3, [r7, #24]
 8005170:	1ad3      	subs	r3, r2, r3
 8005172:	69fa      	ldr	r2, [r7, #28]
 8005174:	429a      	cmp	r2, r3
 8005176:	d902      	bls.n	800517e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005178:	69fb      	ldr	r3, [r7, #28]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d13d      	bne.n	80051fa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	685a      	ldr	r2, [r3, #4]
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800518c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005196:	d111      	bne.n	80051bc <SPI_WaitFlagStateUntilTimeout+0x94>
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80051a0:	d004      	beq.n	80051ac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051aa:	d107      	bne.n	80051bc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80051ba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80051c4:	d10f      	bne.n	80051e6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80051d4:	601a      	str	r2, [r3, #0]
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80051e4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2201      	movs	r2, #1
 80051ea:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2200      	movs	r2, #0
 80051f2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80051f6:	2303      	movs	r3, #3
 80051f8:	e017      	b.n	800522a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d101      	bne.n	8005204 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005200:	2300      	movs	r3, #0
 8005202:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	3b01      	subs	r3, #1
 8005208:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	689a      	ldr	r2, [r3, #8]
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	4013      	ands	r3, r2
 8005214:	68ba      	ldr	r2, [r7, #8]
 8005216:	429a      	cmp	r2, r3
 8005218:	bf0c      	ite	eq
 800521a:	2301      	moveq	r3, #1
 800521c:	2300      	movne	r3, #0
 800521e:	b2db      	uxtb	r3, r3
 8005220:	461a      	mov	r2, r3
 8005222:	79fb      	ldrb	r3, [r7, #7]
 8005224:	429a      	cmp	r2, r3
 8005226:	d19b      	bne.n	8005160 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005228:	2300      	movs	r3, #0
}
 800522a:	4618      	mov	r0, r3
 800522c:	3720      	adds	r7, #32
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}
 8005232:	bf00      	nop
 8005234:	20000000 	.word	0x20000000

08005238 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b08a      	sub	sp, #40	@ 0x28
 800523c:	af00      	add	r7, sp, #0
 800523e:	60f8      	str	r0, [r7, #12]
 8005240:	60b9      	str	r1, [r7, #8]
 8005242:	607a      	str	r2, [r7, #4]
 8005244:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005246:	2300      	movs	r3, #0
 8005248:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800524a:	f7fc fc7d 	bl	8001b48 <HAL_GetTick>
 800524e:	4602      	mov	r2, r0
 8005250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005252:	1a9b      	subs	r3, r3, r2
 8005254:	683a      	ldr	r2, [r7, #0]
 8005256:	4413      	add	r3, r2
 8005258:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800525a:	f7fc fc75 	bl	8001b48 <HAL_GetTick>
 800525e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	330c      	adds	r3, #12
 8005266:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005268:	4b3d      	ldr	r3, [pc, #244]	@ (8005360 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	4613      	mov	r3, r2
 800526e:	009b      	lsls	r3, r3, #2
 8005270:	4413      	add	r3, r2
 8005272:	00da      	lsls	r2, r3, #3
 8005274:	1ad3      	subs	r3, r2, r3
 8005276:	0d1b      	lsrs	r3, r3, #20
 8005278:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800527a:	fb02 f303 	mul.w	r3, r2, r3
 800527e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005280:	e060      	b.n	8005344 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005288:	d107      	bne.n	800529a <SPI_WaitFifoStateUntilTimeout+0x62>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d104      	bne.n	800529a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005290:	69fb      	ldr	r3, [r7, #28]
 8005292:	781b      	ldrb	r3, [r3, #0]
 8005294:	b2db      	uxtb	r3, r3
 8005296:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005298:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052a0:	d050      	beq.n	8005344 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80052a2:	f7fc fc51 	bl	8001b48 <HAL_GetTick>
 80052a6:	4602      	mov	r2, r0
 80052a8:	6a3b      	ldr	r3, [r7, #32]
 80052aa:	1ad3      	subs	r3, r2, r3
 80052ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052ae:	429a      	cmp	r2, r3
 80052b0:	d902      	bls.n	80052b8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80052b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d13d      	bne.n	8005334 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	685a      	ldr	r2, [r3, #4]
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80052c6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80052d0:	d111      	bne.n	80052f6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80052da:	d004      	beq.n	80052e6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	689b      	ldr	r3, [r3, #8]
 80052e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052e4:	d107      	bne.n	80052f6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80052f4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80052fe:	d10f      	bne.n	8005320 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	681a      	ldr	r2, [r3, #0]
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800530e:	601a      	str	r2, [r3, #0]
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800531e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2201      	movs	r2, #1
 8005324:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2200      	movs	r2, #0
 800532c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005330:	2303      	movs	r3, #3
 8005332:	e010      	b.n	8005356 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005334:	69bb      	ldr	r3, [r7, #24]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d101      	bne.n	800533e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800533a:	2300      	movs	r3, #0
 800533c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800533e:	69bb      	ldr	r3, [r7, #24]
 8005340:	3b01      	subs	r3, #1
 8005342:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	689a      	ldr	r2, [r3, #8]
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	4013      	ands	r3, r2
 800534e:	687a      	ldr	r2, [r7, #4]
 8005350:	429a      	cmp	r2, r3
 8005352:	d196      	bne.n	8005282 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005354:	2300      	movs	r3, #0
}
 8005356:	4618      	mov	r0, r3
 8005358:	3728      	adds	r7, #40	@ 0x28
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}
 800535e:	bf00      	nop
 8005360:	20000000 	.word	0x20000000

08005364 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b086      	sub	sp, #24
 8005368:	af02      	add	r7, sp, #8
 800536a:	60f8      	str	r0, [r7, #12]
 800536c:	60b9      	str	r1, [r7, #8]
 800536e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005378:	d111      	bne.n	800539e <SPI_EndRxTransaction+0x3a>
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005382:	d004      	beq.n	800538e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800538c:	d107      	bne.n	800539e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	681a      	ldr	r2, [r3, #0]
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800539c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	9300      	str	r3, [sp, #0]
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	2200      	movs	r2, #0
 80053a6:	2180      	movs	r1, #128	@ 0x80
 80053a8:	68f8      	ldr	r0, [r7, #12]
 80053aa:	f7ff febd 	bl	8005128 <SPI_WaitFlagStateUntilTimeout>
 80053ae:	4603      	mov	r3, r0
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d007      	beq.n	80053c4 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053b8:	f043 0220 	orr.w	r2, r3, #32
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80053c0:	2303      	movs	r3, #3
 80053c2:	e023      	b.n	800540c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80053cc:	d11d      	bne.n	800540a <SPI_EndRxTransaction+0xa6>
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80053d6:	d004      	beq.n	80053e2 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80053e0:	d113      	bne.n	800540a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	9300      	str	r3, [sp, #0]
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	2200      	movs	r2, #0
 80053ea:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80053ee:	68f8      	ldr	r0, [r7, #12]
 80053f0:	f7ff ff22 	bl	8005238 <SPI_WaitFifoStateUntilTimeout>
 80053f4:	4603      	mov	r3, r0
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d007      	beq.n	800540a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053fe:	f043 0220 	orr.w	r2, r3, #32
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8005406:	2303      	movs	r3, #3
 8005408:	e000      	b.n	800540c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800540a:	2300      	movs	r3, #0
}
 800540c:	4618      	mov	r0, r3
 800540e:	3710      	adds	r7, #16
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}

08005414 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b086      	sub	sp, #24
 8005418:	af02      	add	r7, sp, #8
 800541a:	60f8      	str	r0, [r7, #12]
 800541c:	60b9      	str	r1, [r7, #8]
 800541e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	9300      	str	r3, [sp, #0]
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	2200      	movs	r2, #0
 8005428:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800542c:	68f8      	ldr	r0, [r7, #12]
 800542e:	f7ff ff03 	bl	8005238 <SPI_WaitFifoStateUntilTimeout>
 8005432:	4603      	mov	r3, r0
 8005434:	2b00      	cmp	r3, #0
 8005436:	d007      	beq.n	8005448 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800543c:	f043 0220 	orr.w	r2, r3, #32
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005444:	2303      	movs	r3, #3
 8005446:	e027      	b.n	8005498 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	9300      	str	r3, [sp, #0]
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	2200      	movs	r2, #0
 8005450:	2180      	movs	r1, #128	@ 0x80
 8005452:	68f8      	ldr	r0, [r7, #12]
 8005454:	f7ff fe68 	bl	8005128 <SPI_WaitFlagStateUntilTimeout>
 8005458:	4603      	mov	r3, r0
 800545a:	2b00      	cmp	r3, #0
 800545c:	d007      	beq.n	800546e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005462:	f043 0220 	orr.w	r2, r3, #32
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800546a:	2303      	movs	r3, #3
 800546c:	e014      	b.n	8005498 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	9300      	str	r3, [sp, #0]
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	2200      	movs	r2, #0
 8005476:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800547a:	68f8      	ldr	r0, [r7, #12]
 800547c:	f7ff fedc 	bl	8005238 <SPI_WaitFifoStateUntilTimeout>
 8005480:	4603      	mov	r3, r0
 8005482:	2b00      	cmp	r3, #0
 8005484:	d007      	beq.n	8005496 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800548a:	f043 0220 	orr.w	r2, r3, #32
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005492:	2303      	movs	r3, #3
 8005494:	e000      	b.n	8005498 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005496:	2300      	movs	r3, #0
}
 8005498:	4618      	mov	r0, r3
 800549a:	3710      	adds	r7, #16
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}

080054a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b082      	sub	sp, #8
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d101      	bne.n	80054b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	e049      	b.n	8005546 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054b8:	b2db      	uxtb	r3, r3
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d106      	bne.n	80054cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2200      	movs	r2, #0
 80054c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f7fc f900 	bl	80016cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2202      	movs	r2, #2
 80054d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681a      	ldr	r2, [r3, #0]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	3304      	adds	r3, #4
 80054dc:	4619      	mov	r1, r3
 80054de:	4610      	mov	r0, r2
 80054e0:	f000 fd48 	bl	8005f74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2201      	movs	r2, #1
 80054e8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2201      	movs	r2, #1
 80054f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2201      	movs	r2, #1
 80054f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2201      	movs	r2, #1
 8005500:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2201      	movs	r2, #1
 8005508:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2201      	movs	r2, #1
 8005510:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2201      	movs	r2, #1
 8005518:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2201      	movs	r2, #1
 8005520:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2201      	movs	r2, #1
 8005528:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2201      	movs	r2, #1
 8005530:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2201      	movs	r2, #1
 8005538:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2201      	movs	r2, #1
 8005540:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005544:	2300      	movs	r3, #0
}
 8005546:	4618      	mov	r0, r3
 8005548:	3708      	adds	r7, #8
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}
	...

08005550 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005550:	b480      	push	{r7}
 8005552:	b085      	sub	sp, #20
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800555e:	b2db      	uxtb	r3, r3
 8005560:	2b01      	cmp	r3, #1
 8005562:	d001      	beq.n	8005568 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005564:	2301      	movs	r3, #1
 8005566:	e040      	b.n	80055ea <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2202      	movs	r2, #2
 800556c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	68da      	ldr	r2, [r3, #12]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f042 0201 	orr.w	r2, r2, #1
 800557e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a1c      	ldr	r2, [pc, #112]	@ (80055f8 <HAL_TIM_Base_Start_IT+0xa8>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d00e      	beq.n	80055a8 <HAL_TIM_Base_Start_IT+0x58>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005592:	d009      	beq.n	80055a8 <HAL_TIM_Base_Start_IT+0x58>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a18      	ldr	r2, [pc, #96]	@ (80055fc <HAL_TIM_Base_Start_IT+0xac>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d004      	beq.n	80055a8 <HAL_TIM_Base_Start_IT+0x58>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a17      	ldr	r2, [pc, #92]	@ (8005600 <HAL_TIM_Base_Start_IT+0xb0>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d115      	bne.n	80055d4 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	689a      	ldr	r2, [r3, #8]
 80055ae:	4b15      	ldr	r3, [pc, #84]	@ (8005604 <HAL_TIM_Base_Start_IT+0xb4>)
 80055b0:	4013      	ands	r3, r2
 80055b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2b06      	cmp	r3, #6
 80055b8:	d015      	beq.n	80055e6 <HAL_TIM_Base_Start_IT+0x96>
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80055c0:	d011      	beq.n	80055e6 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f042 0201 	orr.w	r2, r2, #1
 80055d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055d2:	e008      	b.n	80055e6 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	681a      	ldr	r2, [r3, #0]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f042 0201 	orr.w	r2, r2, #1
 80055e2:	601a      	str	r2, [r3, #0]
 80055e4:	e000      	b.n	80055e8 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055e6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80055e8:	2300      	movs	r3, #0
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3714      	adds	r7, #20
 80055ee:	46bd      	mov	sp, r7
 80055f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f4:	4770      	bx	lr
 80055f6:	bf00      	nop
 80055f8:	40012c00 	.word	0x40012c00
 80055fc:	40000400 	.word	0x40000400
 8005600:	40014000 	.word	0x40014000
 8005604:	00010007 	.word	0x00010007

08005608 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b082      	sub	sp, #8
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d101      	bne.n	800561a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005616:	2301      	movs	r3, #1
 8005618:	e049      	b.n	80056ae <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005620:	b2db      	uxtb	r3, r3
 8005622:	2b00      	cmp	r3, #0
 8005624:	d106      	bne.n	8005634 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2200      	movs	r2, #0
 800562a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f7fb ffba 	bl	80015a8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2202      	movs	r2, #2
 8005638:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681a      	ldr	r2, [r3, #0]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	3304      	adds	r3, #4
 8005644:	4619      	mov	r1, r3
 8005646:	4610      	mov	r0, r2
 8005648:	f000 fc94 	bl	8005f74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2201      	movs	r2, #1
 8005650:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2201      	movs	r2, #1
 8005658:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2201      	movs	r2, #1
 8005660:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2201      	movs	r2, #1
 8005668:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2201      	movs	r2, #1
 8005670:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2201      	movs	r2, #1
 8005678:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2201      	movs	r2, #1
 8005680:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2201      	movs	r2, #1
 8005688:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2201      	movs	r2, #1
 8005690:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2201      	movs	r2, #1
 8005698:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2201      	movs	r2, #1
 80056a0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2201      	movs	r2, #1
 80056a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80056ac:	2300      	movs	r3, #0
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3708      	adds	r7, #8
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}
	...

080056b8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b084      	sub	sp, #16
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
 80056c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d109      	bne.n	80056dc <HAL_TIM_PWM_Start+0x24>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80056ce:	b2db      	uxtb	r3, r3
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	bf14      	ite	ne
 80056d4:	2301      	movne	r3, #1
 80056d6:	2300      	moveq	r3, #0
 80056d8:	b2db      	uxtb	r3, r3
 80056da:	e03c      	b.n	8005756 <HAL_TIM_PWM_Start+0x9e>
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	2b04      	cmp	r3, #4
 80056e0:	d109      	bne.n	80056f6 <HAL_TIM_PWM_Start+0x3e>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80056e8:	b2db      	uxtb	r3, r3
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	bf14      	ite	ne
 80056ee:	2301      	movne	r3, #1
 80056f0:	2300      	moveq	r3, #0
 80056f2:	b2db      	uxtb	r3, r3
 80056f4:	e02f      	b.n	8005756 <HAL_TIM_PWM_Start+0x9e>
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	2b08      	cmp	r3, #8
 80056fa:	d109      	bne.n	8005710 <HAL_TIM_PWM_Start+0x58>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005702:	b2db      	uxtb	r3, r3
 8005704:	2b01      	cmp	r3, #1
 8005706:	bf14      	ite	ne
 8005708:	2301      	movne	r3, #1
 800570a:	2300      	moveq	r3, #0
 800570c:	b2db      	uxtb	r3, r3
 800570e:	e022      	b.n	8005756 <HAL_TIM_PWM_Start+0x9e>
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	2b0c      	cmp	r3, #12
 8005714:	d109      	bne.n	800572a <HAL_TIM_PWM_Start+0x72>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800571c:	b2db      	uxtb	r3, r3
 800571e:	2b01      	cmp	r3, #1
 8005720:	bf14      	ite	ne
 8005722:	2301      	movne	r3, #1
 8005724:	2300      	moveq	r3, #0
 8005726:	b2db      	uxtb	r3, r3
 8005728:	e015      	b.n	8005756 <HAL_TIM_PWM_Start+0x9e>
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	2b10      	cmp	r3, #16
 800572e:	d109      	bne.n	8005744 <HAL_TIM_PWM_Start+0x8c>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005736:	b2db      	uxtb	r3, r3
 8005738:	2b01      	cmp	r3, #1
 800573a:	bf14      	ite	ne
 800573c:	2301      	movne	r3, #1
 800573e:	2300      	moveq	r3, #0
 8005740:	b2db      	uxtb	r3, r3
 8005742:	e008      	b.n	8005756 <HAL_TIM_PWM_Start+0x9e>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800574a:	b2db      	uxtb	r3, r3
 800574c:	2b01      	cmp	r3, #1
 800574e:	bf14      	ite	ne
 8005750:	2301      	movne	r3, #1
 8005752:	2300      	moveq	r3, #0
 8005754:	b2db      	uxtb	r3, r3
 8005756:	2b00      	cmp	r3, #0
 8005758:	d001      	beq.n	800575e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800575a:	2301      	movs	r3, #1
 800575c:	e088      	b.n	8005870 <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d104      	bne.n	800576e <HAL_TIM_PWM_Start+0xb6>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2202      	movs	r2, #2
 8005768:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800576c:	e023      	b.n	80057b6 <HAL_TIM_PWM_Start+0xfe>
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	2b04      	cmp	r3, #4
 8005772:	d104      	bne.n	800577e <HAL_TIM_PWM_Start+0xc6>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2202      	movs	r2, #2
 8005778:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800577c:	e01b      	b.n	80057b6 <HAL_TIM_PWM_Start+0xfe>
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	2b08      	cmp	r3, #8
 8005782:	d104      	bne.n	800578e <HAL_TIM_PWM_Start+0xd6>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2202      	movs	r2, #2
 8005788:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800578c:	e013      	b.n	80057b6 <HAL_TIM_PWM_Start+0xfe>
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	2b0c      	cmp	r3, #12
 8005792:	d104      	bne.n	800579e <HAL_TIM_PWM_Start+0xe6>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2202      	movs	r2, #2
 8005798:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800579c:	e00b      	b.n	80057b6 <HAL_TIM_PWM_Start+0xfe>
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	2b10      	cmp	r3, #16
 80057a2:	d104      	bne.n	80057ae <HAL_TIM_PWM_Start+0xf6>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2202      	movs	r2, #2
 80057a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80057ac:	e003      	b.n	80057b6 <HAL_TIM_PWM_Start+0xfe>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2202      	movs	r2, #2
 80057b2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	2201      	movs	r2, #1
 80057bc:	6839      	ldr	r1, [r7, #0]
 80057be:	4618      	mov	r0, r3
 80057c0:	f000 ff02 	bl	80065c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a2b      	ldr	r2, [pc, #172]	@ (8005878 <HAL_TIM_PWM_Start+0x1c0>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d00e      	beq.n	80057ec <HAL_TIM_PWM_Start+0x134>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a2a      	ldr	r2, [pc, #168]	@ (800587c <HAL_TIM_PWM_Start+0x1c4>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d009      	beq.n	80057ec <HAL_TIM_PWM_Start+0x134>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a28      	ldr	r2, [pc, #160]	@ (8005880 <HAL_TIM_PWM_Start+0x1c8>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d004      	beq.n	80057ec <HAL_TIM_PWM_Start+0x134>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a27      	ldr	r2, [pc, #156]	@ (8005884 <HAL_TIM_PWM_Start+0x1cc>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d101      	bne.n	80057f0 <HAL_TIM_PWM_Start+0x138>
 80057ec:	2301      	movs	r3, #1
 80057ee:	e000      	b.n	80057f2 <HAL_TIM_PWM_Start+0x13a>
 80057f0:	2300      	movs	r3, #0
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d007      	beq.n	8005806 <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005804:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a1b      	ldr	r2, [pc, #108]	@ (8005878 <HAL_TIM_PWM_Start+0x1c0>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d00e      	beq.n	800582e <HAL_TIM_PWM_Start+0x176>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005818:	d009      	beq.n	800582e <HAL_TIM_PWM_Start+0x176>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a1a      	ldr	r2, [pc, #104]	@ (8005888 <HAL_TIM_PWM_Start+0x1d0>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d004      	beq.n	800582e <HAL_TIM_PWM_Start+0x176>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a14      	ldr	r2, [pc, #80]	@ (800587c <HAL_TIM_PWM_Start+0x1c4>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d115      	bne.n	800585a <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	689a      	ldr	r2, [r3, #8]
 8005834:	4b15      	ldr	r3, [pc, #84]	@ (800588c <HAL_TIM_PWM_Start+0x1d4>)
 8005836:	4013      	ands	r3, r2
 8005838:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2b06      	cmp	r3, #6
 800583e:	d015      	beq.n	800586c <HAL_TIM_PWM_Start+0x1b4>
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005846:	d011      	beq.n	800586c <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	681a      	ldr	r2, [r3, #0]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f042 0201 	orr.w	r2, r2, #1
 8005856:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005858:	e008      	b.n	800586c <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	681a      	ldr	r2, [r3, #0]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f042 0201 	orr.w	r2, r2, #1
 8005868:	601a      	str	r2, [r3, #0]
 800586a:	e000      	b.n	800586e <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800586c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800586e:	2300      	movs	r3, #0
}
 8005870:	4618      	mov	r0, r3
 8005872:	3710      	adds	r7, #16
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}
 8005878:	40012c00 	.word	0x40012c00
 800587c:	40014000 	.word	0x40014000
 8005880:	40014400 	.word	0x40014400
 8005884:	40014800 	.word	0x40014800
 8005888:	40000400 	.word	0x40000400
 800588c:	00010007 	.word	0x00010007

08005890 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b086      	sub	sp, #24
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d101      	bne.n	80058a4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80058a0:	2301      	movs	r3, #1
 80058a2:	e097      	b.n	80059d4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058aa:	b2db      	uxtb	r3, r3
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d106      	bne.n	80058be <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2200      	movs	r2, #0
 80058b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80058b8:	6878      	ldr	r0, [r7, #4]
 80058ba:	f7fb fe95 	bl	80015e8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2202      	movs	r2, #2
 80058c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	689b      	ldr	r3, [r3, #8]
 80058cc:	687a      	ldr	r2, [r7, #4]
 80058ce:	6812      	ldr	r2, [r2, #0]
 80058d0:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 80058d4:	f023 0307 	bic.w	r3, r3, #7
 80058d8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681a      	ldr	r2, [r3, #0]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	3304      	adds	r3, #4
 80058e2:	4619      	mov	r1, r3
 80058e4:	4610      	mov	r0, r2
 80058e6:	f000 fb45 	bl	8005f74 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	699b      	ldr	r3, [r3, #24]
 80058f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	6a1b      	ldr	r3, [r3, #32]
 8005900:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	697a      	ldr	r2, [r7, #20]
 8005908:	4313      	orrs	r3, r2
 800590a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005912:	f023 0303 	bic.w	r3, r3, #3
 8005916:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	689a      	ldr	r2, [r3, #8]
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	699b      	ldr	r3, [r3, #24]
 8005920:	021b      	lsls	r3, r3, #8
 8005922:	4313      	orrs	r3, r2
 8005924:	693a      	ldr	r2, [r7, #16]
 8005926:	4313      	orrs	r3, r2
 8005928:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005930:	f023 030c 	bic.w	r3, r3, #12
 8005934:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800593c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005940:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	68da      	ldr	r2, [r3, #12]
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	69db      	ldr	r3, [r3, #28]
 800594a:	021b      	lsls	r3, r3, #8
 800594c:	4313      	orrs	r3, r2
 800594e:	693a      	ldr	r2, [r7, #16]
 8005950:	4313      	orrs	r3, r2
 8005952:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	691b      	ldr	r3, [r3, #16]
 8005958:	011a      	lsls	r2, r3, #4
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	6a1b      	ldr	r3, [r3, #32]
 800595e:	031b      	lsls	r3, r3, #12
 8005960:	4313      	orrs	r3, r2
 8005962:	693a      	ldr	r2, [r7, #16]
 8005964:	4313      	orrs	r3, r2
 8005966:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800596e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005976:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	685a      	ldr	r2, [r3, #4]
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	695b      	ldr	r3, [r3, #20]
 8005980:	011b      	lsls	r3, r3, #4
 8005982:	4313      	orrs	r3, r2
 8005984:	68fa      	ldr	r2, [r7, #12]
 8005986:	4313      	orrs	r3, r2
 8005988:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	697a      	ldr	r2, [r7, #20]
 8005990:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	693a      	ldr	r2, [r7, #16]
 8005998:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	68fa      	ldr	r2, [r7, #12]
 80059a0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2201      	movs	r2, #1
 80059a6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2201      	movs	r2, #1
 80059ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2201      	movs	r2, #1
 80059b6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2201      	movs	r2, #1
 80059be:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2201      	movs	r2, #1
 80059c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2201      	movs	r2, #1
 80059ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80059d2:	2300      	movs	r3, #0
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	3718      	adds	r7, #24
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}

080059dc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b084      	sub	sp, #16
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
 80059e4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80059ec:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80059f4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80059fc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005a04:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d110      	bne.n	8005a2e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005a0c:	7bfb      	ldrb	r3, [r7, #15]
 8005a0e:	2b01      	cmp	r3, #1
 8005a10:	d102      	bne.n	8005a18 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005a12:	7b7b      	ldrb	r3, [r7, #13]
 8005a14:	2b01      	cmp	r3, #1
 8005a16:	d001      	beq.n	8005a1c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005a18:	2301      	movs	r3, #1
 8005a1a:	e069      	b.n	8005af0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2202      	movs	r2, #2
 8005a20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2202      	movs	r2, #2
 8005a28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005a2c:	e031      	b.n	8005a92 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	2b04      	cmp	r3, #4
 8005a32:	d110      	bne.n	8005a56 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005a34:	7bbb      	ldrb	r3, [r7, #14]
 8005a36:	2b01      	cmp	r3, #1
 8005a38:	d102      	bne.n	8005a40 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005a3a:	7b3b      	ldrb	r3, [r7, #12]
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d001      	beq.n	8005a44 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005a40:	2301      	movs	r3, #1
 8005a42:	e055      	b.n	8005af0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2202      	movs	r2, #2
 8005a48:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2202      	movs	r2, #2
 8005a50:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005a54:	e01d      	b.n	8005a92 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005a56:	7bfb      	ldrb	r3, [r7, #15]
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	d108      	bne.n	8005a6e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005a5c:	7bbb      	ldrb	r3, [r7, #14]
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	d105      	bne.n	8005a6e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005a62:	7b7b      	ldrb	r3, [r7, #13]
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	d102      	bne.n	8005a6e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005a68:	7b3b      	ldrb	r3, [r7, #12]
 8005a6a:	2b01      	cmp	r3, #1
 8005a6c:	d001      	beq.n	8005a72 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	e03e      	b.n	8005af0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2202      	movs	r2, #2
 8005a76:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2202      	movs	r2, #2
 8005a7e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2202      	movs	r2, #2
 8005a86:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2202      	movs	r2, #2
 8005a8e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d003      	beq.n	8005aa0 <HAL_TIM_Encoder_Start+0xc4>
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	2b04      	cmp	r3, #4
 8005a9c:	d008      	beq.n	8005ab0 <HAL_TIM_Encoder_Start+0xd4>
 8005a9e:	e00f      	b.n	8005ac0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	2100      	movs	r1, #0
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f000 fd8d 	bl	80065c8 <TIM_CCxChannelCmd>
      break;
 8005aae:	e016      	b.n	8005ade <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	2104      	movs	r1, #4
 8005ab8:	4618      	mov	r0, r3
 8005aba:	f000 fd85 	bl	80065c8 <TIM_CCxChannelCmd>
      break;
 8005abe:	e00e      	b.n	8005ade <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	2201      	movs	r2, #1
 8005ac6:	2100      	movs	r1, #0
 8005ac8:	4618      	mov	r0, r3
 8005aca:	f000 fd7d 	bl	80065c8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	2104      	movs	r1, #4
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f000 fd76 	bl	80065c8 <TIM_CCxChannelCmd>
      break;
 8005adc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	681a      	ldr	r2, [r3, #0]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f042 0201 	orr.w	r2, r2, #1
 8005aec:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005aee:	2300      	movs	r3, #0
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	3710      	adds	r7, #16
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}

08005af8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b084      	sub	sp, #16
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	68db      	ldr	r3, [r3, #12]
 8005b06:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	691b      	ldr	r3, [r3, #16]
 8005b0e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	f003 0302 	and.w	r3, r3, #2
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d020      	beq.n	8005b5c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	f003 0302 	and.w	r3, r3, #2
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d01b      	beq.n	8005b5c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f06f 0202 	mvn.w	r2, #2
 8005b2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2201      	movs	r2, #1
 8005b32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	699b      	ldr	r3, [r3, #24]
 8005b3a:	f003 0303 	and.w	r3, r3, #3
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d003      	beq.n	8005b4a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f000 f9f8 	bl	8005f38 <HAL_TIM_IC_CaptureCallback>
 8005b48:	e005      	b.n	8005b56 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f000 f9ea 	bl	8005f24 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f000 f9fb 	bl	8005f4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	f003 0304 	and.w	r3, r3, #4
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d020      	beq.n	8005ba8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	f003 0304 	and.w	r3, r3, #4
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d01b      	beq.n	8005ba8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f06f 0204 	mvn.w	r2, #4
 8005b78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2202      	movs	r2, #2
 8005b7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	699b      	ldr	r3, [r3, #24]
 8005b86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d003      	beq.n	8005b96 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f000 f9d2 	bl	8005f38 <HAL_TIM_IC_CaptureCallback>
 8005b94:	e005      	b.n	8005ba2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f000 f9c4 	bl	8005f24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b9c:	6878      	ldr	r0, [r7, #4]
 8005b9e:	f000 f9d5 	bl	8005f4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	f003 0308 	and.w	r3, r3, #8
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d020      	beq.n	8005bf4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	f003 0308 	and.w	r3, r3, #8
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d01b      	beq.n	8005bf4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f06f 0208 	mvn.w	r2, #8
 8005bc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2204      	movs	r2, #4
 8005bca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	69db      	ldr	r3, [r3, #28]
 8005bd2:	f003 0303 	and.w	r3, r3, #3
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d003      	beq.n	8005be2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f000 f9ac 	bl	8005f38 <HAL_TIM_IC_CaptureCallback>
 8005be0:	e005      	b.n	8005bee <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f000 f99e 	bl	8005f24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f000 f9af 	bl	8005f4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	f003 0310 	and.w	r3, r3, #16
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d020      	beq.n	8005c40 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	f003 0310 	and.w	r3, r3, #16
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d01b      	beq.n	8005c40 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f06f 0210 	mvn.w	r2, #16
 8005c10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2208      	movs	r2, #8
 8005c16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	69db      	ldr	r3, [r3, #28]
 8005c1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d003      	beq.n	8005c2e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f000 f986 	bl	8005f38 <HAL_TIM_IC_CaptureCallback>
 8005c2c:	e005      	b.n	8005c3a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f000 f978 	bl	8005f24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	f000 f989 	bl	8005f4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	f003 0301 	and.w	r3, r3, #1
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d00c      	beq.n	8005c64 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	f003 0301 	and.w	r3, r3, #1
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d007      	beq.n	8005c64 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f06f 0201 	mvn.w	r2, #1
 8005c5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f7fa fc5e 	bl	8000520 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d00c      	beq.n	8005c88 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d007      	beq.n	8005c88 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005c80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f000 fdb6 	bl	80067f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d00c      	beq.n	8005cac <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d007      	beq.n	8005cac <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005ca4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005ca6:	6878      	ldr	r0, [r7, #4]
 8005ca8:	f000 fdae 	bl	8006808 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d00c      	beq.n	8005cd0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d007      	beq.n	8005cd0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005cc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f000 f948 	bl	8005f60 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	f003 0320 	and.w	r3, r3, #32
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d00c      	beq.n	8005cf4 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	f003 0320 	and.w	r3, r3, #32
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d007      	beq.n	8005cf4 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f06f 0220 	mvn.w	r2, #32
 8005cec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f000 fd76 	bl	80067e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005cf4:	bf00      	nop
 8005cf6:	3710      	adds	r7, #16
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd80      	pop	{r7, pc}

08005cfc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b086      	sub	sp, #24
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	60f8      	str	r0, [r7, #12]
 8005d04:	60b9      	str	r1, [r7, #8]
 8005d06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d08:	2300      	movs	r3, #0
 8005d0a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d12:	2b01      	cmp	r3, #1
 8005d14:	d101      	bne.n	8005d1a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005d16:	2302      	movs	r3, #2
 8005d18:	e0ff      	b.n	8005f1a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2b14      	cmp	r3, #20
 8005d26:	f200 80f0 	bhi.w	8005f0a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005d2a:	a201      	add	r2, pc, #4	@ (adr r2, 8005d30 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d30:	08005d85 	.word	0x08005d85
 8005d34:	08005f0b 	.word	0x08005f0b
 8005d38:	08005f0b 	.word	0x08005f0b
 8005d3c:	08005f0b 	.word	0x08005f0b
 8005d40:	08005dc5 	.word	0x08005dc5
 8005d44:	08005f0b 	.word	0x08005f0b
 8005d48:	08005f0b 	.word	0x08005f0b
 8005d4c:	08005f0b 	.word	0x08005f0b
 8005d50:	08005e07 	.word	0x08005e07
 8005d54:	08005f0b 	.word	0x08005f0b
 8005d58:	08005f0b 	.word	0x08005f0b
 8005d5c:	08005f0b 	.word	0x08005f0b
 8005d60:	08005e47 	.word	0x08005e47
 8005d64:	08005f0b 	.word	0x08005f0b
 8005d68:	08005f0b 	.word	0x08005f0b
 8005d6c:	08005f0b 	.word	0x08005f0b
 8005d70:	08005e89 	.word	0x08005e89
 8005d74:	08005f0b 	.word	0x08005f0b
 8005d78:	08005f0b 	.word	0x08005f0b
 8005d7c:	08005f0b 	.word	0x08005f0b
 8005d80:	08005ec9 	.word	0x08005ec9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	68b9      	ldr	r1, [r7, #8]
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f000 f976 	bl	800607c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	699a      	ldr	r2, [r3, #24]
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f042 0208 	orr.w	r2, r2, #8
 8005d9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	699a      	ldr	r2, [r3, #24]
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f022 0204 	bic.w	r2, r2, #4
 8005dae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	6999      	ldr	r1, [r3, #24]
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	691a      	ldr	r2, [r3, #16]
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	430a      	orrs	r2, r1
 8005dc0:	619a      	str	r2, [r3, #24]
      break;
 8005dc2:	e0a5      	b.n	8005f10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	68b9      	ldr	r1, [r7, #8]
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f000 f9dc 	bl	8006188 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	699a      	ldr	r2, [r3, #24]
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005dde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	699a      	ldr	r2, [r3, #24]
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005dee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	6999      	ldr	r1, [r3, #24]
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	691b      	ldr	r3, [r3, #16]
 8005dfa:	021a      	lsls	r2, r3, #8
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	430a      	orrs	r2, r1
 8005e02:	619a      	str	r2, [r3, #24]
      break;
 8005e04:	e084      	b.n	8005f10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	68b9      	ldr	r1, [r7, #8]
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	f000 fa3b 	bl	8006288 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	69da      	ldr	r2, [r3, #28]
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f042 0208 	orr.w	r2, r2, #8
 8005e20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	69da      	ldr	r2, [r3, #28]
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f022 0204 	bic.w	r2, r2, #4
 8005e30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	69d9      	ldr	r1, [r3, #28]
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	691a      	ldr	r2, [r3, #16]
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	430a      	orrs	r2, r1
 8005e42:	61da      	str	r2, [r3, #28]
      break;
 8005e44:	e064      	b.n	8005f10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	68b9      	ldr	r1, [r7, #8]
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	f000 fa99 	bl	8006384 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	69da      	ldr	r2, [r3, #28]
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005e60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	69da      	ldr	r2, [r3, #28]
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	69d9      	ldr	r1, [r3, #28]
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	691b      	ldr	r3, [r3, #16]
 8005e7c:	021a      	lsls	r2, r3, #8
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	430a      	orrs	r2, r1
 8005e84:	61da      	str	r2, [r3, #28]
      break;
 8005e86:	e043      	b.n	8005f10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	68b9      	ldr	r1, [r7, #8]
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f000 fadc 	bl	800644c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f042 0208 	orr.w	r2, r2, #8
 8005ea2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f022 0204 	bic.w	r2, r2, #4
 8005eb2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	691a      	ldr	r2, [r3, #16]
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	430a      	orrs	r2, r1
 8005ec4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005ec6:	e023      	b.n	8005f10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	68b9      	ldr	r1, [r7, #8]
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f000 fb1a 	bl	8006508 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005ee2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ef2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	691b      	ldr	r3, [r3, #16]
 8005efe:	021a      	lsls	r2, r3, #8
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	430a      	orrs	r2, r1
 8005f06:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005f08:	e002      	b.n	8005f10 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	75fb      	strb	r3, [r7, #23]
      break;
 8005f0e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	2200      	movs	r2, #0
 8005f14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005f18:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	3718      	adds	r7, #24
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}
 8005f22:	bf00      	nop

08005f24 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f24:	b480      	push	{r7}
 8005f26:	b083      	sub	sp, #12
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005f2c:	bf00      	nop
 8005f2e:	370c      	adds	r7, #12
 8005f30:	46bd      	mov	sp, r7
 8005f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f36:	4770      	bx	lr

08005f38 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b083      	sub	sp, #12
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005f40:	bf00      	nop
 8005f42:	370c      	adds	r7, #12
 8005f44:	46bd      	mov	sp, r7
 8005f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4a:	4770      	bx	lr

08005f4c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b083      	sub	sp, #12
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005f54:	bf00      	nop
 8005f56:	370c      	adds	r7, #12
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5e:	4770      	bx	lr

08005f60 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b083      	sub	sp, #12
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005f68:	bf00      	nop
 8005f6a:	370c      	adds	r7, #12
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr

08005f74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b085      	sub	sp, #20
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
 8005f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	4a38      	ldr	r2, [pc, #224]	@ (8006068 <TIM_Base_SetConfig+0xf4>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d007      	beq.n	8005f9c <TIM_Base_SetConfig+0x28>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f92:	d003      	beq.n	8005f9c <TIM_Base_SetConfig+0x28>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	4a35      	ldr	r2, [pc, #212]	@ (800606c <TIM_Base_SetConfig+0xf8>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d108      	bne.n	8005fae <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fa2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	68fa      	ldr	r2, [r7, #12]
 8005faa:	4313      	orrs	r3, r2
 8005fac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	4a2d      	ldr	r2, [pc, #180]	@ (8006068 <TIM_Base_SetConfig+0xf4>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d013      	beq.n	8005fde <TIM_Base_SetConfig+0x6a>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fbc:	d00f      	beq.n	8005fde <TIM_Base_SetConfig+0x6a>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	4a2a      	ldr	r2, [pc, #168]	@ (800606c <TIM_Base_SetConfig+0xf8>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d00b      	beq.n	8005fde <TIM_Base_SetConfig+0x6a>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	4a29      	ldr	r2, [pc, #164]	@ (8006070 <TIM_Base_SetConfig+0xfc>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d007      	beq.n	8005fde <TIM_Base_SetConfig+0x6a>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	4a28      	ldr	r2, [pc, #160]	@ (8006074 <TIM_Base_SetConfig+0x100>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d003      	beq.n	8005fde <TIM_Base_SetConfig+0x6a>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	4a27      	ldr	r2, [pc, #156]	@ (8006078 <TIM_Base_SetConfig+0x104>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d108      	bne.n	8005ff0 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005fe4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	68db      	ldr	r3, [r3, #12]
 8005fea:	68fa      	ldr	r2, [r7, #12]
 8005fec:	4313      	orrs	r3, r2
 8005fee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	695b      	ldr	r3, [r3, #20]
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	68fa      	ldr	r2, [r7, #12]
 8006002:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	689a      	ldr	r2, [r3, #8]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	681a      	ldr	r2, [r3, #0]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	4a14      	ldr	r2, [pc, #80]	@ (8006068 <TIM_Base_SetConfig+0xf4>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d00b      	beq.n	8006034 <TIM_Base_SetConfig+0xc0>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	4a14      	ldr	r2, [pc, #80]	@ (8006070 <TIM_Base_SetConfig+0xfc>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d007      	beq.n	8006034 <TIM_Base_SetConfig+0xc0>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	4a13      	ldr	r2, [pc, #76]	@ (8006074 <TIM_Base_SetConfig+0x100>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d003      	beq.n	8006034 <TIM_Base_SetConfig+0xc0>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	4a12      	ldr	r2, [pc, #72]	@ (8006078 <TIM_Base_SetConfig+0x104>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d103      	bne.n	800603c <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	691a      	ldr	r2, [r3, #16]
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2201      	movs	r2, #1
 8006040:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	691b      	ldr	r3, [r3, #16]
 8006046:	f003 0301 	and.w	r3, r3, #1
 800604a:	2b01      	cmp	r3, #1
 800604c:	d105      	bne.n	800605a <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	691b      	ldr	r3, [r3, #16]
 8006052:	f023 0201 	bic.w	r2, r3, #1
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	611a      	str	r2, [r3, #16]
  }
}
 800605a:	bf00      	nop
 800605c:	3714      	adds	r7, #20
 800605e:	46bd      	mov	sp, r7
 8006060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006064:	4770      	bx	lr
 8006066:	bf00      	nop
 8006068:	40012c00 	.word	0x40012c00
 800606c:	40000400 	.word	0x40000400
 8006070:	40014000 	.word	0x40014000
 8006074:	40014400 	.word	0x40014400
 8006078:	40014800 	.word	0x40014800

0800607c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800607c:	b480      	push	{r7}
 800607e:	b087      	sub	sp, #28
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
 8006084:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6a1b      	ldr	r3, [r3, #32]
 800608a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6a1b      	ldr	r3, [r3, #32]
 8006090:	f023 0201 	bic.w	r2, r3, #1
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	699b      	ldr	r3, [r3, #24]
 80060a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80060aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	f023 0303 	bic.w	r3, r3, #3
 80060b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	68fa      	ldr	r2, [r7, #12]
 80060be:	4313      	orrs	r3, r2
 80060c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	f023 0302 	bic.w	r3, r3, #2
 80060c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	689b      	ldr	r3, [r3, #8]
 80060ce:	697a      	ldr	r2, [r7, #20]
 80060d0:	4313      	orrs	r3, r2
 80060d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	4a28      	ldr	r2, [pc, #160]	@ (8006178 <TIM_OC1_SetConfig+0xfc>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d00b      	beq.n	80060f4 <TIM_OC1_SetConfig+0x78>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	4a27      	ldr	r2, [pc, #156]	@ (800617c <TIM_OC1_SetConfig+0x100>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d007      	beq.n	80060f4 <TIM_OC1_SetConfig+0x78>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	4a26      	ldr	r2, [pc, #152]	@ (8006180 <TIM_OC1_SetConfig+0x104>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d003      	beq.n	80060f4 <TIM_OC1_SetConfig+0x78>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	4a25      	ldr	r2, [pc, #148]	@ (8006184 <TIM_OC1_SetConfig+0x108>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d10c      	bne.n	800610e <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	f023 0308 	bic.w	r3, r3, #8
 80060fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	68db      	ldr	r3, [r3, #12]
 8006100:	697a      	ldr	r2, [r7, #20]
 8006102:	4313      	orrs	r3, r2
 8006104:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	f023 0304 	bic.w	r3, r3, #4
 800610c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	4a19      	ldr	r2, [pc, #100]	@ (8006178 <TIM_OC1_SetConfig+0xfc>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d00b      	beq.n	800612e <TIM_OC1_SetConfig+0xb2>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	4a18      	ldr	r2, [pc, #96]	@ (800617c <TIM_OC1_SetConfig+0x100>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d007      	beq.n	800612e <TIM_OC1_SetConfig+0xb2>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	4a17      	ldr	r2, [pc, #92]	@ (8006180 <TIM_OC1_SetConfig+0x104>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d003      	beq.n	800612e <TIM_OC1_SetConfig+0xb2>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	4a16      	ldr	r2, [pc, #88]	@ (8006184 <TIM_OC1_SetConfig+0x108>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d111      	bne.n	8006152 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006134:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800613c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	695b      	ldr	r3, [r3, #20]
 8006142:	693a      	ldr	r2, [r7, #16]
 8006144:	4313      	orrs	r3, r2
 8006146:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	699b      	ldr	r3, [r3, #24]
 800614c:	693a      	ldr	r2, [r7, #16]
 800614e:	4313      	orrs	r3, r2
 8006150:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	693a      	ldr	r2, [r7, #16]
 8006156:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	68fa      	ldr	r2, [r7, #12]
 800615c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	685a      	ldr	r2, [r3, #4]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	697a      	ldr	r2, [r7, #20]
 800616a:	621a      	str	r2, [r3, #32]
}
 800616c:	bf00      	nop
 800616e:	371c      	adds	r7, #28
 8006170:	46bd      	mov	sp, r7
 8006172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006176:	4770      	bx	lr
 8006178:	40012c00 	.word	0x40012c00
 800617c:	40014000 	.word	0x40014000
 8006180:	40014400 	.word	0x40014400
 8006184:	40014800 	.word	0x40014800

08006188 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006188:	b480      	push	{r7}
 800618a:	b087      	sub	sp, #28
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
 8006190:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6a1b      	ldr	r3, [r3, #32]
 8006196:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6a1b      	ldr	r3, [r3, #32]
 800619c:	f023 0210 	bic.w	r2, r3, #16
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	699b      	ldr	r3, [r3, #24]
 80061ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80061b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80061ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80061c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	021b      	lsls	r3, r3, #8
 80061ca:	68fa      	ldr	r2, [r7, #12]
 80061cc:	4313      	orrs	r3, r2
 80061ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	f023 0320 	bic.w	r3, r3, #32
 80061d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	689b      	ldr	r3, [r3, #8]
 80061dc:	011b      	lsls	r3, r3, #4
 80061de:	697a      	ldr	r2, [r7, #20]
 80061e0:	4313      	orrs	r3, r2
 80061e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	4a24      	ldr	r2, [pc, #144]	@ (8006278 <TIM_OC2_SetConfig+0xf0>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d10d      	bne.n	8006208 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80061f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	68db      	ldr	r3, [r3, #12]
 80061f8:	011b      	lsls	r3, r3, #4
 80061fa:	697a      	ldr	r2, [r7, #20]
 80061fc:	4313      	orrs	r3, r2
 80061fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006206:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	4a1b      	ldr	r2, [pc, #108]	@ (8006278 <TIM_OC2_SetConfig+0xf0>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d00b      	beq.n	8006228 <TIM_OC2_SetConfig+0xa0>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	4a1a      	ldr	r2, [pc, #104]	@ (800627c <TIM_OC2_SetConfig+0xf4>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d007      	beq.n	8006228 <TIM_OC2_SetConfig+0xa0>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	4a19      	ldr	r2, [pc, #100]	@ (8006280 <TIM_OC2_SetConfig+0xf8>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d003      	beq.n	8006228 <TIM_OC2_SetConfig+0xa0>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	4a18      	ldr	r2, [pc, #96]	@ (8006284 <TIM_OC2_SetConfig+0xfc>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d113      	bne.n	8006250 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800622e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006236:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	695b      	ldr	r3, [r3, #20]
 800623c:	009b      	lsls	r3, r3, #2
 800623e:	693a      	ldr	r2, [r7, #16]
 8006240:	4313      	orrs	r3, r2
 8006242:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	699b      	ldr	r3, [r3, #24]
 8006248:	009b      	lsls	r3, r3, #2
 800624a:	693a      	ldr	r2, [r7, #16]
 800624c:	4313      	orrs	r3, r2
 800624e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	693a      	ldr	r2, [r7, #16]
 8006254:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	68fa      	ldr	r2, [r7, #12]
 800625a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	685a      	ldr	r2, [r3, #4]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	697a      	ldr	r2, [r7, #20]
 8006268:	621a      	str	r2, [r3, #32]
}
 800626a:	bf00      	nop
 800626c:	371c      	adds	r7, #28
 800626e:	46bd      	mov	sp, r7
 8006270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006274:	4770      	bx	lr
 8006276:	bf00      	nop
 8006278:	40012c00 	.word	0x40012c00
 800627c:	40014000 	.word	0x40014000
 8006280:	40014400 	.word	0x40014400
 8006284:	40014800 	.word	0x40014800

08006288 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006288:	b480      	push	{r7}
 800628a:	b087      	sub	sp, #28
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
 8006290:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6a1b      	ldr	r3, [r3, #32]
 8006296:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6a1b      	ldr	r3, [r3, #32]
 800629c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	69db      	ldr	r3, [r3, #28]
 80062ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80062b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	f023 0303 	bic.w	r3, r3, #3
 80062c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	68fa      	ldr	r2, [r7, #12]
 80062ca:	4313      	orrs	r3, r2
 80062cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80062d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	689b      	ldr	r3, [r3, #8]
 80062da:	021b      	lsls	r3, r3, #8
 80062dc:	697a      	ldr	r2, [r7, #20]
 80062de:	4313      	orrs	r3, r2
 80062e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	4a23      	ldr	r2, [pc, #140]	@ (8006374 <TIM_OC3_SetConfig+0xec>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d10d      	bne.n	8006306 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80062f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	68db      	ldr	r3, [r3, #12]
 80062f6:	021b      	lsls	r3, r3, #8
 80062f8:	697a      	ldr	r2, [r7, #20]
 80062fa:	4313      	orrs	r3, r2
 80062fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006304:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	4a1a      	ldr	r2, [pc, #104]	@ (8006374 <TIM_OC3_SetConfig+0xec>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d00b      	beq.n	8006326 <TIM_OC3_SetConfig+0x9e>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	4a19      	ldr	r2, [pc, #100]	@ (8006378 <TIM_OC3_SetConfig+0xf0>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d007      	beq.n	8006326 <TIM_OC3_SetConfig+0x9e>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	4a18      	ldr	r2, [pc, #96]	@ (800637c <TIM_OC3_SetConfig+0xf4>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d003      	beq.n	8006326 <TIM_OC3_SetConfig+0x9e>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	4a17      	ldr	r2, [pc, #92]	@ (8006380 <TIM_OC3_SetConfig+0xf8>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d113      	bne.n	800634e <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800632c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006334:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	695b      	ldr	r3, [r3, #20]
 800633a:	011b      	lsls	r3, r3, #4
 800633c:	693a      	ldr	r2, [r7, #16]
 800633e:	4313      	orrs	r3, r2
 8006340:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	699b      	ldr	r3, [r3, #24]
 8006346:	011b      	lsls	r3, r3, #4
 8006348:	693a      	ldr	r2, [r7, #16]
 800634a:	4313      	orrs	r3, r2
 800634c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	693a      	ldr	r2, [r7, #16]
 8006352:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	68fa      	ldr	r2, [r7, #12]
 8006358:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	685a      	ldr	r2, [r3, #4]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	697a      	ldr	r2, [r7, #20]
 8006366:	621a      	str	r2, [r3, #32]
}
 8006368:	bf00      	nop
 800636a:	371c      	adds	r7, #28
 800636c:	46bd      	mov	sp, r7
 800636e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006372:	4770      	bx	lr
 8006374:	40012c00 	.word	0x40012c00
 8006378:	40014000 	.word	0x40014000
 800637c:	40014400 	.word	0x40014400
 8006380:	40014800 	.word	0x40014800

08006384 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006384:	b480      	push	{r7}
 8006386:	b087      	sub	sp, #28
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
 800638c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6a1b      	ldr	r3, [r3, #32]
 8006392:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6a1b      	ldr	r3, [r3, #32]
 8006398:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	69db      	ldr	r3, [r3, #28]
 80063aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80063b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80063be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	021b      	lsls	r3, r3, #8
 80063c6:	68fa      	ldr	r2, [r7, #12]
 80063c8:	4313      	orrs	r3, r2
 80063ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80063d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	689b      	ldr	r3, [r3, #8]
 80063d8:	031b      	lsls	r3, r3, #12
 80063da:	693a      	ldr	r2, [r7, #16]
 80063dc:	4313      	orrs	r3, r2
 80063de:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	4a16      	ldr	r2, [pc, #88]	@ (800643c <TIM_OC4_SetConfig+0xb8>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d00b      	beq.n	8006400 <TIM_OC4_SetConfig+0x7c>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	4a15      	ldr	r2, [pc, #84]	@ (8006440 <TIM_OC4_SetConfig+0xbc>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d007      	beq.n	8006400 <TIM_OC4_SetConfig+0x7c>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	4a14      	ldr	r2, [pc, #80]	@ (8006444 <TIM_OC4_SetConfig+0xc0>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d003      	beq.n	8006400 <TIM_OC4_SetConfig+0x7c>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	4a13      	ldr	r2, [pc, #76]	@ (8006448 <TIM_OC4_SetConfig+0xc4>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d109      	bne.n	8006414 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006400:	697b      	ldr	r3, [r7, #20]
 8006402:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006406:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	695b      	ldr	r3, [r3, #20]
 800640c:	019b      	lsls	r3, r3, #6
 800640e:	697a      	ldr	r2, [r7, #20]
 8006410:	4313      	orrs	r3, r2
 8006412:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	697a      	ldr	r2, [r7, #20]
 8006418:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	68fa      	ldr	r2, [r7, #12]
 800641e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	685a      	ldr	r2, [r3, #4]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	693a      	ldr	r2, [r7, #16]
 800642c:	621a      	str	r2, [r3, #32]
}
 800642e:	bf00      	nop
 8006430:	371c      	adds	r7, #28
 8006432:	46bd      	mov	sp, r7
 8006434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006438:	4770      	bx	lr
 800643a:	bf00      	nop
 800643c:	40012c00 	.word	0x40012c00
 8006440:	40014000 	.word	0x40014000
 8006444:	40014400 	.word	0x40014400
 8006448:	40014800 	.word	0x40014800

0800644c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800644c:	b480      	push	{r7}
 800644e:	b087      	sub	sp, #28
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
 8006454:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6a1b      	ldr	r3, [r3, #32]
 800645a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6a1b      	ldr	r3, [r3, #32]
 8006460:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	685b      	ldr	r3, [r3, #4]
 800646c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006472:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800647a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800647e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	68fa      	ldr	r2, [r7, #12]
 8006486:	4313      	orrs	r3, r2
 8006488:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006490:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	689b      	ldr	r3, [r3, #8]
 8006496:	041b      	lsls	r3, r3, #16
 8006498:	693a      	ldr	r2, [r7, #16]
 800649a:	4313      	orrs	r3, r2
 800649c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	4a15      	ldr	r2, [pc, #84]	@ (80064f8 <TIM_OC5_SetConfig+0xac>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d00b      	beq.n	80064be <TIM_OC5_SetConfig+0x72>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	4a14      	ldr	r2, [pc, #80]	@ (80064fc <TIM_OC5_SetConfig+0xb0>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d007      	beq.n	80064be <TIM_OC5_SetConfig+0x72>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	4a13      	ldr	r2, [pc, #76]	@ (8006500 <TIM_OC5_SetConfig+0xb4>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d003      	beq.n	80064be <TIM_OC5_SetConfig+0x72>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	4a12      	ldr	r2, [pc, #72]	@ (8006504 <TIM_OC5_SetConfig+0xb8>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d109      	bne.n	80064d2 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80064c4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	695b      	ldr	r3, [r3, #20]
 80064ca:	021b      	lsls	r3, r3, #8
 80064cc:	697a      	ldr	r2, [r7, #20]
 80064ce:	4313      	orrs	r3, r2
 80064d0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	697a      	ldr	r2, [r7, #20]
 80064d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	68fa      	ldr	r2, [r7, #12]
 80064dc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	685a      	ldr	r2, [r3, #4]
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	693a      	ldr	r2, [r7, #16]
 80064ea:	621a      	str	r2, [r3, #32]
}
 80064ec:	bf00      	nop
 80064ee:	371c      	adds	r7, #28
 80064f0:	46bd      	mov	sp, r7
 80064f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f6:	4770      	bx	lr
 80064f8:	40012c00 	.word	0x40012c00
 80064fc:	40014000 	.word	0x40014000
 8006500:	40014400 	.word	0x40014400
 8006504:	40014800 	.word	0x40014800

08006508 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006508:	b480      	push	{r7}
 800650a:	b087      	sub	sp, #28
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
 8006510:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6a1b      	ldr	r3, [r3, #32]
 8006516:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6a1b      	ldr	r3, [r3, #32]
 800651c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	685b      	ldr	r3, [r3, #4]
 8006528:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800652e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006536:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800653a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	021b      	lsls	r3, r3, #8
 8006542:	68fa      	ldr	r2, [r7, #12]
 8006544:	4313      	orrs	r3, r2
 8006546:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800654e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	689b      	ldr	r3, [r3, #8]
 8006554:	051b      	lsls	r3, r3, #20
 8006556:	693a      	ldr	r2, [r7, #16]
 8006558:	4313      	orrs	r3, r2
 800655a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	4a16      	ldr	r2, [pc, #88]	@ (80065b8 <TIM_OC6_SetConfig+0xb0>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d00b      	beq.n	800657c <TIM_OC6_SetConfig+0x74>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	4a15      	ldr	r2, [pc, #84]	@ (80065bc <TIM_OC6_SetConfig+0xb4>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d007      	beq.n	800657c <TIM_OC6_SetConfig+0x74>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	4a14      	ldr	r2, [pc, #80]	@ (80065c0 <TIM_OC6_SetConfig+0xb8>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d003      	beq.n	800657c <TIM_OC6_SetConfig+0x74>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	4a13      	ldr	r2, [pc, #76]	@ (80065c4 <TIM_OC6_SetConfig+0xbc>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d109      	bne.n	8006590 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006582:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	695b      	ldr	r3, [r3, #20]
 8006588:	029b      	lsls	r3, r3, #10
 800658a:	697a      	ldr	r2, [r7, #20]
 800658c:	4313      	orrs	r3, r2
 800658e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	697a      	ldr	r2, [r7, #20]
 8006594:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	68fa      	ldr	r2, [r7, #12]
 800659a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	685a      	ldr	r2, [r3, #4]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	693a      	ldr	r2, [r7, #16]
 80065a8:	621a      	str	r2, [r3, #32]
}
 80065aa:	bf00      	nop
 80065ac:	371c      	adds	r7, #28
 80065ae:	46bd      	mov	sp, r7
 80065b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b4:	4770      	bx	lr
 80065b6:	bf00      	nop
 80065b8:	40012c00 	.word	0x40012c00
 80065bc:	40014000 	.word	0x40014000
 80065c0:	40014400 	.word	0x40014400
 80065c4:	40014800 	.word	0x40014800

080065c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b087      	sub	sp, #28
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	60f8      	str	r0, [r7, #12]
 80065d0:	60b9      	str	r1, [r7, #8]
 80065d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	f003 031f 	and.w	r3, r3, #31
 80065da:	2201      	movs	r2, #1
 80065dc:	fa02 f303 	lsl.w	r3, r2, r3
 80065e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	6a1a      	ldr	r2, [r3, #32]
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	43db      	mvns	r3, r3
 80065ea:	401a      	ands	r2, r3
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	6a1a      	ldr	r2, [r3, #32]
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	f003 031f 	and.w	r3, r3, #31
 80065fa:	6879      	ldr	r1, [r7, #4]
 80065fc:	fa01 f303 	lsl.w	r3, r1, r3
 8006600:	431a      	orrs	r2, r3
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	621a      	str	r2, [r3, #32]
}
 8006606:	bf00      	nop
 8006608:	371c      	adds	r7, #28
 800660a:	46bd      	mov	sp, r7
 800660c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006610:	4770      	bx	lr
	...

08006614 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006614:	b480      	push	{r7}
 8006616:	b085      	sub	sp, #20
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
 800661c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006624:	2b01      	cmp	r3, #1
 8006626:	d101      	bne.n	800662c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006628:	2302      	movs	r3, #2
 800662a:	e054      	b.n	80066d6 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2201      	movs	r2, #1
 8006630:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2202      	movs	r2, #2
 8006638:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	685b      	ldr	r3, [r3, #4]
 8006642:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	689b      	ldr	r3, [r3, #8]
 800664a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a24      	ldr	r2, [pc, #144]	@ (80066e4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d108      	bne.n	8006668 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800665c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	68fa      	ldr	r2, [r7, #12]
 8006664:	4313      	orrs	r3, r2
 8006666:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800666e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	68fa      	ldr	r2, [r7, #12]
 8006676:	4313      	orrs	r3, r2
 8006678:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	68fa      	ldr	r2, [r7, #12]
 8006680:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a17      	ldr	r2, [pc, #92]	@ (80066e4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d00e      	beq.n	80066aa <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006694:	d009      	beq.n	80066aa <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a13      	ldr	r2, [pc, #76]	@ (80066e8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d004      	beq.n	80066aa <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a11      	ldr	r2, [pc, #68]	@ (80066ec <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d10c      	bne.n	80066c4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80066b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	689b      	ldr	r3, [r3, #8]
 80066b6:	68ba      	ldr	r2, [r7, #8]
 80066b8:	4313      	orrs	r3, r2
 80066ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	68ba      	ldr	r2, [r7, #8]
 80066c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2201      	movs	r2, #1
 80066c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2200      	movs	r2, #0
 80066d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80066d4:	2300      	movs	r3, #0
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	3714      	adds	r7, #20
 80066da:	46bd      	mov	sp, r7
 80066dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e0:	4770      	bx	lr
 80066e2:	bf00      	nop
 80066e4:	40012c00 	.word	0x40012c00
 80066e8:	40000400 	.word	0x40000400
 80066ec:	40014000 	.word	0x40014000

080066f0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80066f0:	b480      	push	{r7}
 80066f2:	b085      	sub	sp, #20
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80066fa:	2300      	movs	r3, #0
 80066fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006704:	2b01      	cmp	r3, #1
 8006706:	d101      	bne.n	800670c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006708:	2302      	movs	r3, #2
 800670a:	e060      	b.n	80067ce <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2201      	movs	r2, #1
 8006710:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	68db      	ldr	r3, [r3, #12]
 800671e:	4313      	orrs	r3, r2
 8006720:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	689b      	ldr	r3, [r3, #8]
 800672c:	4313      	orrs	r3, r2
 800672e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	685b      	ldr	r3, [r3, #4]
 800673a:	4313      	orrs	r3, r2
 800673c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4313      	orrs	r3, r2
 800674a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	691b      	ldr	r3, [r3, #16]
 8006756:	4313      	orrs	r3, r2
 8006758:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	695b      	ldr	r3, [r3, #20]
 8006764:	4313      	orrs	r3, r2
 8006766:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006772:	4313      	orrs	r3, r2
 8006774:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	699b      	ldr	r3, [r3, #24]
 8006780:	041b      	lsls	r3, r3, #16
 8006782:	4313      	orrs	r3, r2
 8006784:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4a14      	ldr	r2, [pc, #80]	@ (80067dc <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d115      	bne.n	80067bc <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800679a:	051b      	lsls	r3, r3, #20
 800679c:	4313      	orrs	r3, r2
 800679e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	69db      	ldr	r3, [r3, #28]
 80067aa:	4313      	orrs	r3, r2
 80067ac:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	6a1b      	ldr	r3, [r3, #32]
 80067b8:	4313      	orrs	r3, r2
 80067ba:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	68fa      	ldr	r2, [r7, #12]
 80067c2:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2200      	movs	r2, #0
 80067c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80067cc:	2300      	movs	r3, #0
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	3714      	adds	r7, #20
 80067d2:	46bd      	mov	sp, r7
 80067d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d8:	4770      	bx	lr
 80067da:	bf00      	nop
 80067dc:	40012c00 	.word	0x40012c00

080067e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80067e0:	b480      	push	{r7}
 80067e2:	b083      	sub	sp, #12
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80067e8:	bf00      	nop
 80067ea:	370c      	adds	r7, #12
 80067ec:	46bd      	mov	sp, r7
 80067ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f2:	4770      	bx	lr

080067f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b083      	sub	sp, #12
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80067fc:	bf00      	nop
 80067fe:	370c      	adds	r7, #12
 8006800:	46bd      	mov	sp, r7
 8006802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006806:	4770      	bx	lr

08006808 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006808:	b480      	push	{r7}
 800680a:	b083      	sub	sp, #12
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006810:	bf00      	nop
 8006812:	370c      	adds	r7, #12
 8006814:	46bd      	mov	sp, r7
 8006816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681a:	4770      	bx	lr

0800681c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b082      	sub	sp, #8
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d101      	bne.n	800682e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800682a:	2301      	movs	r3, #1
 800682c:	e040      	b.n	80068b0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006832:	2b00      	cmp	r3, #0
 8006834:	d106      	bne.n	8006844 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2200      	movs	r2, #0
 800683a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f7fa ffbe 	bl	80017c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2224      	movs	r2, #36	@ 0x24
 8006848:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	681a      	ldr	r2, [r3, #0]
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f022 0201 	bic.w	r2, r2, #1
 8006858:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800685e:	2b00      	cmp	r3, #0
 8006860:	d002      	beq.n	8006868 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f000 f9e8 	bl	8006c38 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f000 f8af 	bl	80069cc <UART_SetConfig>
 800686e:	4603      	mov	r3, r0
 8006870:	2b01      	cmp	r3, #1
 8006872:	d101      	bne.n	8006878 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006874:	2301      	movs	r3, #1
 8006876:	e01b      	b.n	80068b0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	685a      	ldr	r2, [r3, #4]
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006886:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	689a      	ldr	r2, [r3, #8]
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006896:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	681a      	ldr	r2, [r3, #0]
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f042 0201 	orr.w	r2, r2, #1
 80068a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	f000 fa67 	bl	8006d7c <UART_CheckIdleState>
 80068ae:	4603      	mov	r3, r0
}
 80068b0:	4618      	mov	r0, r3
 80068b2:	3708      	adds	r7, #8
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bd80      	pop	{r7, pc}

080068b8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b08a      	sub	sp, #40	@ 0x28
 80068bc:	af02      	add	r7, sp, #8
 80068be:	60f8      	str	r0, [r7, #12]
 80068c0:	60b9      	str	r1, [r7, #8]
 80068c2:	603b      	str	r3, [r7, #0]
 80068c4:	4613      	mov	r3, r2
 80068c6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80068cc:	2b20      	cmp	r3, #32
 80068ce:	d177      	bne.n	80069c0 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d002      	beq.n	80068dc <HAL_UART_Transmit+0x24>
 80068d6:	88fb      	ldrh	r3, [r7, #6]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d101      	bne.n	80068e0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80068dc:	2301      	movs	r3, #1
 80068de:	e070      	b.n	80069c2 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	2200      	movs	r2, #0
 80068e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	2221      	movs	r2, #33	@ 0x21
 80068ec:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80068ee:	f7fb f92b 	bl	8001b48 <HAL_GetTick>
 80068f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	88fa      	ldrh	r2, [r7, #6]
 80068f8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	88fa      	ldrh	r2, [r7, #6]
 8006900:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	689b      	ldr	r3, [r3, #8]
 8006908:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800690c:	d108      	bne.n	8006920 <HAL_UART_Transmit+0x68>
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	691b      	ldr	r3, [r3, #16]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d104      	bne.n	8006920 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006916:	2300      	movs	r3, #0
 8006918:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	61bb      	str	r3, [r7, #24]
 800691e:	e003      	b.n	8006928 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006924:	2300      	movs	r3, #0
 8006926:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006928:	e02f      	b.n	800698a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	9300      	str	r3, [sp, #0]
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	2200      	movs	r2, #0
 8006932:	2180      	movs	r1, #128	@ 0x80
 8006934:	68f8      	ldr	r0, [r7, #12]
 8006936:	f000 fac9 	bl	8006ecc <UART_WaitOnFlagUntilTimeout>
 800693a:	4603      	mov	r3, r0
 800693c:	2b00      	cmp	r3, #0
 800693e:	d004      	beq.n	800694a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2220      	movs	r2, #32
 8006944:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8006946:	2303      	movs	r3, #3
 8006948:	e03b      	b.n	80069c2 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800694a:	69fb      	ldr	r3, [r7, #28]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d10b      	bne.n	8006968 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006950:	69bb      	ldr	r3, [r7, #24]
 8006952:	881a      	ldrh	r2, [r3, #0]
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800695c:	b292      	uxth	r2, r2
 800695e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006960:	69bb      	ldr	r3, [r7, #24]
 8006962:	3302      	adds	r3, #2
 8006964:	61bb      	str	r3, [r7, #24]
 8006966:	e007      	b.n	8006978 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006968:	69fb      	ldr	r3, [r7, #28]
 800696a:	781a      	ldrb	r2, [r3, #0]
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006972:	69fb      	ldr	r3, [r7, #28]
 8006974:	3301      	adds	r3, #1
 8006976:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800697e:	b29b      	uxth	r3, r3
 8006980:	3b01      	subs	r3, #1
 8006982:	b29a      	uxth	r2, r3
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006990:	b29b      	uxth	r3, r3
 8006992:	2b00      	cmp	r3, #0
 8006994:	d1c9      	bne.n	800692a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	9300      	str	r3, [sp, #0]
 800699a:	697b      	ldr	r3, [r7, #20]
 800699c:	2200      	movs	r2, #0
 800699e:	2140      	movs	r1, #64	@ 0x40
 80069a0:	68f8      	ldr	r0, [r7, #12]
 80069a2:	f000 fa93 	bl	8006ecc <UART_WaitOnFlagUntilTimeout>
 80069a6:	4603      	mov	r3, r0
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d004      	beq.n	80069b6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	2220      	movs	r2, #32
 80069b0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80069b2:	2303      	movs	r3, #3
 80069b4:	e005      	b.n	80069c2 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	2220      	movs	r2, #32
 80069ba:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80069bc:	2300      	movs	r3, #0
 80069be:	e000      	b.n	80069c2 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80069c0:	2302      	movs	r3, #2
  }
}
 80069c2:	4618      	mov	r0, r3
 80069c4:	3720      	adds	r7, #32
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}
	...

080069cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b088      	sub	sp, #32
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80069d4:	2300      	movs	r3, #0
 80069d6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	689a      	ldr	r2, [r3, #8]
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	691b      	ldr	r3, [r3, #16]
 80069e0:	431a      	orrs	r2, r3
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	695b      	ldr	r3, [r3, #20]
 80069e6:	431a      	orrs	r2, r3
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	69db      	ldr	r3, [r3, #28]
 80069ec:	4313      	orrs	r3, r2
 80069ee:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	681a      	ldr	r2, [r3, #0]
 80069f6:	4b8a      	ldr	r3, [pc, #552]	@ (8006c20 <UART_SetConfig+0x254>)
 80069f8:	4013      	ands	r3, r2
 80069fa:	687a      	ldr	r2, [r7, #4]
 80069fc:	6812      	ldr	r2, [r2, #0]
 80069fe:	6979      	ldr	r1, [r7, #20]
 8006a00:	430b      	orrs	r3, r1
 8006a02:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	68da      	ldr	r2, [r3, #12]
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	430a      	orrs	r2, r1
 8006a18:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	699b      	ldr	r3, [r3, #24]
 8006a1e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6a1b      	ldr	r3, [r3, #32]
 8006a24:	697a      	ldr	r2, [r7, #20]
 8006a26:	4313      	orrs	r3, r2
 8006a28:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	689b      	ldr	r3, [r3, #8]
 8006a30:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	697a      	ldr	r2, [r7, #20]
 8006a3a:	430a      	orrs	r2, r1
 8006a3c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4a78      	ldr	r2, [pc, #480]	@ (8006c24 <UART_SetConfig+0x258>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d120      	bne.n	8006a8a <UART_SetConfig+0xbe>
 8006a48:	4b77      	ldr	r3, [pc, #476]	@ (8006c28 <UART_SetConfig+0x25c>)
 8006a4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a4c:	f003 0303 	and.w	r3, r3, #3
 8006a50:	2b03      	cmp	r3, #3
 8006a52:	d817      	bhi.n	8006a84 <UART_SetConfig+0xb8>
 8006a54:	a201      	add	r2, pc, #4	@ (adr r2, 8006a5c <UART_SetConfig+0x90>)
 8006a56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a5a:	bf00      	nop
 8006a5c:	08006a6d 	.word	0x08006a6d
 8006a60:	08006a79 	.word	0x08006a79
 8006a64:	08006a7f 	.word	0x08006a7f
 8006a68:	08006a73 	.word	0x08006a73
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	77fb      	strb	r3, [r7, #31]
 8006a70:	e01d      	b.n	8006aae <UART_SetConfig+0xe2>
 8006a72:	2302      	movs	r3, #2
 8006a74:	77fb      	strb	r3, [r7, #31]
 8006a76:	e01a      	b.n	8006aae <UART_SetConfig+0xe2>
 8006a78:	2304      	movs	r3, #4
 8006a7a:	77fb      	strb	r3, [r7, #31]
 8006a7c:	e017      	b.n	8006aae <UART_SetConfig+0xe2>
 8006a7e:	2308      	movs	r3, #8
 8006a80:	77fb      	strb	r3, [r7, #31]
 8006a82:	e014      	b.n	8006aae <UART_SetConfig+0xe2>
 8006a84:	2310      	movs	r3, #16
 8006a86:	77fb      	strb	r3, [r7, #31]
 8006a88:	e011      	b.n	8006aae <UART_SetConfig+0xe2>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a67      	ldr	r2, [pc, #412]	@ (8006c2c <UART_SetConfig+0x260>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d102      	bne.n	8006a9a <UART_SetConfig+0xce>
 8006a94:	2300      	movs	r3, #0
 8006a96:	77fb      	strb	r3, [r7, #31]
 8006a98:	e009      	b.n	8006aae <UART_SetConfig+0xe2>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4a64      	ldr	r2, [pc, #400]	@ (8006c30 <UART_SetConfig+0x264>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d102      	bne.n	8006aaa <UART_SetConfig+0xde>
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	77fb      	strb	r3, [r7, #31]
 8006aa8:	e001      	b.n	8006aae <UART_SetConfig+0xe2>
 8006aaa:	2310      	movs	r3, #16
 8006aac:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	69db      	ldr	r3, [r3, #28]
 8006ab2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006ab6:	d15a      	bne.n	8006b6e <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8006ab8:	7ffb      	ldrb	r3, [r7, #31]
 8006aba:	2b08      	cmp	r3, #8
 8006abc:	d827      	bhi.n	8006b0e <UART_SetConfig+0x142>
 8006abe:	a201      	add	r2, pc, #4	@ (adr r2, 8006ac4 <UART_SetConfig+0xf8>)
 8006ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ac4:	08006ae9 	.word	0x08006ae9
 8006ac8:	08006af1 	.word	0x08006af1
 8006acc:	08006af9 	.word	0x08006af9
 8006ad0:	08006b0f 	.word	0x08006b0f
 8006ad4:	08006aff 	.word	0x08006aff
 8006ad8:	08006b0f 	.word	0x08006b0f
 8006adc:	08006b0f 	.word	0x08006b0f
 8006ae0:	08006b0f 	.word	0x08006b0f
 8006ae4:	08006b07 	.word	0x08006b07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ae8:	f7fd fd30 	bl	800454c <HAL_RCC_GetPCLK1Freq>
 8006aec:	61b8      	str	r0, [r7, #24]
        break;
 8006aee:	e013      	b.n	8006b18 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006af0:	f7fd fd4e 	bl	8004590 <HAL_RCC_GetPCLK2Freq>
 8006af4:	61b8      	str	r0, [r7, #24]
        break;
 8006af6:	e00f      	b.n	8006b18 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006af8:	4b4e      	ldr	r3, [pc, #312]	@ (8006c34 <UART_SetConfig+0x268>)
 8006afa:	61bb      	str	r3, [r7, #24]
        break;
 8006afc:	e00c      	b.n	8006b18 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006afe:	f7fd fcc5 	bl	800448c <HAL_RCC_GetSysClockFreq>
 8006b02:	61b8      	str	r0, [r7, #24]
        break;
 8006b04:	e008      	b.n	8006b18 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b06:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006b0a:	61bb      	str	r3, [r7, #24]
        break;
 8006b0c:	e004      	b.n	8006b18 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006b12:	2301      	movs	r3, #1
 8006b14:	77bb      	strb	r3, [r7, #30]
        break;
 8006b16:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006b18:	69bb      	ldr	r3, [r7, #24]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d074      	beq.n	8006c08 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006b1e:	69bb      	ldr	r3, [r7, #24]
 8006b20:	005a      	lsls	r2, r3, #1
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	685b      	ldr	r3, [r3, #4]
 8006b26:	085b      	lsrs	r3, r3, #1
 8006b28:	441a      	add	r2, r3
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	685b      	ldr	r3, [r3, #4]
 8006b2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b32:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b34:	693b      	ldr	r3, [r7, #16]
 8006b36:	2b0f      	cmp	r3, #15
 8006b38:	d916      	bls.n	8006b68 <UART_SetConfig+0x19c>
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b40:	d212      	bcs.n	8006b68 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006b42:	693b      	ldr	r3, [r7, #16]
 8006b44:	b29b      	uxth	r3, r3
 8006b46:	f023 030f 	bic.w	r3, r3, #15
 8006b4a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006b4c:	693b      	ldr	r3, [r7, #16]
 8006b4e:	085b      	lsrs	r3, r3, #1
 8006b50:	b29b      	uxth	r3, r3
 8006b52:	f003 0307 	and.w	r3, r3, #7
 8006b56:	b29a      	uxth	r2, r3
 8006b58:	89fb      	ldrh	r3, [r7, #14]
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	89fa      	ldrh	r2, [r7, #14]
 8006b64:	60da      	str	r2, [r3, #12]
 8006b66:	e04f      	b.n	8006c08 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8006b68:	2301      	movs	r3, #1
 8006b6a:	77bb      	strb	r3, [r7, #30]
 8006b6c:	e04c      	b.n	8006c08 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006b6e:	7ffb      	ldrb	r3, [r7, #31]
 8006b70:	2b08      	cmp	r3, #8
 8006b72:	d828      	bhi.n	8006bc6 <UART_SetConfig+0x1fa>
 8006b74:	a201      	add	r2, pc, #4	@ (adr r2, 8006b7c <UART_SetConfig+0x1b0>)
 8006b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b7a:	bf00      	nop
 8006b7c:	08006ba1 	.word	0x08006ba1
 8006b80:	08006ba9 	.word	0x08006ba9
 8006b84:	08006bb1 	.word	0x08006bb1
 8006b88:	08006bc7 	.word	0x08006bc7
 8006b8c:	08006bb7 	.word	0x08006bb7
 8006b90:	08006bc7 	.word	0x08006bc7
 8006b94:	08006bc7 	.word	0x08006bc7
 8006b98:	08006bc7 	.word	0x08006bc7
 8006b9c:	08006bbf 	.word	0x08006bbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ba0:	f7fd fcd4 	bl	800454c <HAL_RCC_GetPCLK1Freq>
 8006ba4:	61b8      	str	r0, [r7, #24]
        break;
 8006ba6:	e013      	b.n	8006bd0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ba8:	f7fd fcf2 	bl	8004590 <HAL_RCC_GetPCLK2Freq>
 8006bac:	61b8      	str	r0, [r7, #24]
        break;
 8006bae:	e00f      	b.n	8006bd0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006bb0:	4b20      	ldr	r3, [pc, #128]	@ (8006c34 <UART_SetConfig+0x268>)
 8006bb2:	61bb      	str	r3, [r7, #24]
        break;
 8006bb4:	e00c      	b.n	8006bd0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006bb6:	f7fd fc69 	bl	800448c <HAL_RCC_GetSysClockFreq>
 8006bba:	61b8      	str	r0, [r7, #24]
        break;
 8006bbc:	e008      	b.n	8006bd0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006bbe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006bc2:	61bb      	str	r3, [r7, #24]
        break;
 8006bc4:	e004      	b.n	8006bd0 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006bca:	2301      	movs	r3, #1
 8006bcc:	77bb      	strb	r3, [r7, #30]
        break;
 8006bce:	bf00      	nop
    }

    if (pclk != 0U)
 8006bd0:	69bb      	ldr	r3, [r7, #24]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d018      	beq.n	8006c08 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	085a      	lsrs	r2, r3, #1
 8006bdc:	69bb      	ldr	r3, [r7, #24]
 8006bde:	441a      	add	r2, r3
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	685b      	ldr	r3, [r3, #4]
 8006be4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006be8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	2b0f      	cmp	r3, #15
 8006bee:	d909      	bls.n	8006c04 <UART_SetConfig+0x238>
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006bf6:	d205      	bcs.n	8006c04 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006bf8:	693b      	ldr	r3, [r7, #16]
 8006bfa:	b29a      	uxth	r2, r3
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	60da      	str	r2, [r3, #12]
 8006c02:	e001      	b.n	8006c08 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8006c04:	2301      	movs	r3, #1
 8006c06:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2200      	movs	r2, #0
 8006c12:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006c14:	7fbb      	ldrb	r3, [r7, #30]
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3720      	adds	r7, #32
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}
 8006c1e:	bf00      	nop
 8006c20:	efff69f3 	.word	0xefff69f3
 8006c24:	40013800 	.word	0x40013800
 8006c28:	40021000 	.word	0x40021000
 8006c2c:	40004400 	.word	0x40004400
 8006c30:	40004800 	.word	0x40004800
 8006c34:	007a1200 	.word	0x007a1200

08006c38 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b083      	sub	sp, #12
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c44:	f003 0308 	and.w	r3, r3, #8
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d00a      	beq.n	8006c62 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	685b      	ldr	r3, [r3, #4]
 8006c52:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	430a      	orrs	r2, r1
 8006c60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c66:	f003 0301 	and.w	r3, r3, #1
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d00a      	beq.n	8006c84 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	685b      	ldr	r3, [r3, #4]
 8006c74:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	430a      	orrs	r2, r1
 8006c82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c88:	f003 0302 	and.w	r3, r3, #2
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d00a      	beq.n	8006ca6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	685b      	ldr	r3, [r3, #4]
 8006c96:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	430a      	orrs	r2, r1
 8006ca4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006caa:	f003 0304 	and.w	r3, r3, #4
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d00a      	beq.n	8006cc8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	685b      	ldr	r3, [r3, #4]
 8006cb8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	430a      	orrs	r2, r1
 8006cc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ccc:	f003 0310 	and.w	r3, r3, #16
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d00a      	beq.n	8006cea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	689b      	ldr	r3, [r3, #8]
 8006cda:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	430a      	orrs	r2, r1
 8006ce8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cee:	f003 0320 	and.w	r3, r3, #32
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d00a      	beq.n	8006d0c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	689b      	ldr	r3, [r3, #8]
 8006cfc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	430a      	orrs	r2, r1
 8006d0a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d01a      	beq.n	8006d4e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	685b      	ldr	r3, [r3, #4]
 8006d1e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	430a      	orrs	r2, r1
 8006d2c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d32:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006d36:	d10a      	bne.n	8006d4e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	685b      	ldr	r3, [r3, #4]
 8006d3e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	430a      	orrs	r2, r1
 8006d4c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d00a      	beq.n	8006d70 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	685b      	ldr	r3, [r3, #4]
 8006d60:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	430a      	orrs	r2, r1
 8006d6e:	605a      	str	r2, [r3, #4]
  }
}
 8006d70:	bf00      	nop
 8006d72:	370c      	adds	r7, #12
 8006d74:	46bd      	mov	sp, r7
 8006d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7a:	4770      	bx	lr

08006d7c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b098      	sub	sp, #96	@ 0x60
 8006d80:	af02      	add	r7, sp, #8
 8006d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2200      	movs	r2, #0
 8006d88:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006d8c:	f7fa fedc 	bl	8001b48 <HAL_GetTick>
 8006d90:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f003 0308 	and.w	r3, r3, #8
 8006d9c:	2b08      	cmp	r3, #8
 8006d9e:	d12e      	bne.n	8006dfe <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006da0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006da4:	9300      	str	r3, [sp, #0]
 8006da6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006da8:	2200      	movs	r2, #0
 8006daa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f000 f88c 	bl	8006ecc <UART_WaitOnFlagUntilTimeout>
 8006db4:	4603      	mov	r3, r0
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d021      	beq.n	8006dfe <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dc2:	e853 3f00 	ldrex	r3, [r3]
 8006dc6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006dc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006dca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006dce:	653b      	str	r3, [r7, #80]	@ 0x50
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	461a      	mov	r2, r3
 8006dd6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006dd8:	647b      	str	r3, [r7, #68]	@ 0x44
 8006dda:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ddc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006dde:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006de0:	e841 2300 	strex	r3, r2, [r1]
 8006de4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006de6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d1e6      	bne.n	8006dba <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2220      	movs	r2, #32
 8006df0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2200      	movs	r2, #0
 8006df6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006dfa:	2303      	movs	r3, #3
 8006dfc:	e062      	b.n	8006ec4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f003 0304 	and.w	r3, r3, #4
 8006e08:	2b04      	cmp	r3, #4
 8006e0a:	d149      	bne.n	8006ea0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e0c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006e10:	9300      	str	r3, [sp, #0]
 8006e12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e14:	2200      	movs	r2, #0
 8006e16:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f000 f856 	bl	8006ecc <UART_WaitOnFlagUntilTimeout>
 8006e20:	4603      	mov	r3, r0
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d03c      	beq.n	8006ea0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e2e:	e853 3f00 	ldrex	r3, [r3]
 8006e32:	623b      	str	r3, [r7, #32]
   return(result);
 8006e34:	6a3b      	ldr	r3, [r7, #32]
 8006e36:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006e3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	461a      	mov	r2, r3
 8006e42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e44:	633b      	str	r3, [r7, #48]	@ 0x30
 8006e46:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e48:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006e4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e4c:	e841 2300 	strex	r3, r2, [r1]
 8006e50:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006e52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d1e6      	bne.n	8006e26 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	3308      	adds	r3, #8
 8006e5e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e60:	693b      	ldr	r3, [r7, #16]
 8006e62:	e853 3f00 	ldrex	r3, [r3]
 8006e66:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	f023 0301 	bic.w	r3, r3, #1
 8006e6e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	3308      	adds	r3, #8
 8006e76:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006e78:	61fa      	str	r2, [r7, #28]
 8006e7a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e7c:	69b9      	ldr	r1, [r7, #24]
 8006e7e:	69fa      	ldr	r2, [r7, #28]
 8006e80:	e841 2300 	strex	r3, r2, [r1]
 8006e84:	617b      	str	r3, [r7, #20]
   return(result);
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d1e5      	bne.n	8006e58 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2220      	movs	r2, #32
 8006e90:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2200      	movs	r2, #0
 8006e98:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e9c:	2303      	movs	r3, #3
 8006e9e:	e011      	b.n	8006ec4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2220      	movs	r2, #32
 8006ea4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2220      	movs	r2, #32
 8006eaa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006ec2:	2300      	movs	r3, #0
}
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	3758      	adds	r7, #88	@ 0x58
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd80      	pop	{r7, pc}

08006ecc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b084      	sub	sp, #16
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	60f8      	str	r0, [r7, #12]
 8006ed4:	60b9      	str	r1, [r7, #8]
 8006ed6:	603b      	str	r3, [r7, #0]
 8006ed8:	4613      	mov	r3, r2
 8006eda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006edc:	e04f      	b.n	8006f7e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ede:	69bb      	ldr	r3, [r7, #24]
 8006ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ee4:	d04b      	beq.n	8006f7e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ee6:	f7fa fe2f 	bl	8001b48 <HAL_GetTick>
 8006eea:	4602      	mov	r2, r0
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	1ad3      	subs	r3, r2, r3
 8006ef0:	69ba      	ldr	r2, [r7, #24]
 8006ef2:	429a      	cmp	r2, r3
 8006ef4:	d302      	bcc.n	8006efc <UART_WaitOnFlagUntilTimeout+0x30>
 8006ef6:	69bb      	ldr	r3, [r7, #24]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d101      	bne.n	8006f00 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006efc:	2303      	movs	r3, #3
 8006efe:	e04e      	b.n	8006f9e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f003 0304 	and.w	r3, r3, #4
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d037      	beq.n	8006f7e <UART_WaitOnFlagUntilTimeout+0xb2>
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	2b80      	cmp	r3, #128	@ 0x80
 8006f12:	d034      	beq.n	8006f7e <UART_WaitOnFlagUntilTimeout+0xb2>
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	2b40      	cmp	r3, #64	@ 0x40
 8006f18:	d031      	beq.n	8006f7e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	69db      	ldr	r3, [r3, #28]
 8006f20:	f003 0308 	and.w	r3, r3, #8
 8006f24:	2b08      	cmp	r3, #8
 8006f26:	d110      	bne.n	8006f4a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	2208      	movs	r2, #8
 8006f2e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006f30:	68f8      	ldr	r0, [r7, #12]
 8006f32:	f000 f838 	bl	8006fa6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	2208      	movs	r2, #8
 8006f3a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	2200      	movs	r2, #0
 8006f42:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006f46:	2301      	movs	r3, #1
 8006f48:	e029      	b.n	8006f9e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	69db      	ldr	r3, [r3, #28]
 8006f50:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006f54:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006f58:	d111      	bne.n	8006f7e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006f62:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006f64:	68f8      	ldr	r0, [r7, #12]
 8006f66:	f000 f81e 	bl	8006fa6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	2220      	movs	r2, #32
 8006f6e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	2200      	movs	r2, #0
 8006f76:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006f7a:	2303      	movs	r3, #3
 8006f7c:	e00f      	b.n	8006f9e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	69da      	ldr	r2, [r3, #28]
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	4013      	ands	r3, r2
 8006f88:	68ba      	ldr	r2, [r7, #8]
 8006f8a:	429a      	cmp	r2, r3
 8006f8c:	bf0c      	ite	eq
 8006f8e:	2301      	moveq	r3, #1
 8006f90:	2300      	movne	r3, #0
 8006f92:	b2db      	uxtb	r3, r3
 8006f94:	461a      	mov	r2, r3
 8006f96:	79fb      	ldrb	r3, [r7, #7]
 8006f98:	429a      	cmp	r2, r3
 8006f9a:	d0a0      	beq.n	8006ede <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006f9c:	2300      	movs	r3, #0
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	3710      	adds	r7, #16
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bd80      	pop	{r7, pc}

08006fa6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006fa6:	b480      	push	{r7}
 8006fa8:	b095      	sub	sp, #84	@ 0x54
 8006faa:	af00      	add	r7, sp, #0
 8006fac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fb6:	e853 3f00 	ldrex	r3, [r3]
 8006fba:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006fbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fbe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006fc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	461a      	mov	r2, r3
 8006fca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006fcc:	643b      	str	r3, [r7, #64]	@ 0x40
 8006fce:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fd0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006fd2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006fd4:	e841 2300 	strex	r3, r2, [r1]
 8006fd8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006fda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d1e6      	bne.n	8006fae <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	3308      	adds	r3, #8
 8006fe6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fe8:	6a3b      	ldr	r3, [r7, #32]
 8006fea:	e853 3f00 	ldrex	r3, [r3]
 8006fee:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ff0:	69fb      	ldr	r3, [r7, #28]
 8006ff2:	f023 0301 	bic.w	r3, r3, #1
 8006ff6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	3308      	adds	r3, #8
 8006ffe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007000:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007002:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007004:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007006:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007008:	e841 2300 	strex	r3, r2, [r1]
 800700c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800700e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007010:	2b00      	cmp	r3, #0
 8007012:	d1e5      	bne.n	8006fe0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007018:	2b01      	cmp	r3, #1
 800701a:	d118      	bne.n	800704e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	e853 3f00 	ldrex	r3, [r3]
 8007028:	60bb      	str	r3, [r7, #8]
   return(result);
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	f023 0310 	bic.w	r3, r3, #16
 8007030:	647b      	str	r3, [r7, #68]	@ 0x44
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	461a      	mov	r2, r3
 8007038:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800703a:	61bb      	str	r3, [r7, #24]
 800703c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800703e:	6979      	ldr	r1, [r7, #20]
 8007040:	69ba      	ldr	r2, [r7, #24]
 8007042:	e841 2300 	strex	r3, r2, [r1]
 8007046:	613b      	str	r3, [r7, #16]
   return(result);
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d1e6      	bne.n	800701c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2220      	movs	r2, #32
 8007052:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2200      	movs	r2, #0
 800705a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2200      	movs	r2, #0
 8007060:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007062:	bf00      	nop
 8007064:	3754      	adds	r7, #84	@ 0x54
 8007066:	46bd      	mov	sp, r7
 8007068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706c:	4770      	bx	lr
	...

08007070 <std>:
 8007070:	2300      	movs	r3, #0
 8007072:	b510      	push	{r4, lr}
 8007074:	4604      	mov	r4, r0
 8007076:	e9c0 3300 	strd	r3, r3, [r0]
 800707a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800707e:	6083      	str	r3, [r0, #8]
 8007080:	8181      	strh	r1, [r0, #12]
 8007082:	6643      	str	r3, [r0, #100]	@ 0x64
 8007084:	81c2      	strh	r2, [r0, #14]
 8007086:	6183      	str	r3, [r0, #24]
 8007088:	4619      	mov	r1, r3
 800708a:	2208      	movs	r2, #8
 800708c:	305c      	adds	r0, #92	@ 0x5c
 800708e:	f000 f9e7 	bl	8007460 <memset>
 8007092:	4b0d      	ldr	r3, [pc, #52]	@ (80070c8 <std+0x58>)
 8007094:	6263      	str	r3, [r4, #36]	@ 0x24
 8007096:	4b0d      	ldr	r3, [pc, #52]	@ (80070cc <std+0x5c>)
 8007098:	62a3      	str	r3, [r4, #40]	@ 0x28
 800709a:	4b0d      	ldr	r3, [pc, #52]	@ (80070d0 <std+0x60>)
 800709c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800709e:	4b0d      	ldr	r3, [pc, #52]	@ (80070d4 <std+0x64>)
 80070a0:	6323      	str	r3, [r4, #48]	@ 0x30
 80070a2:	4b0d      	ldr	r3, [pc, #52]	@ (80070d8 <std+0x68>)
 80070a4:	6224      	str	r4, [r4, #32]
 80070a6:	429c      	cmp	r4, r3
 80070a8:	d006      	beq.n	80070b8 <std+0x48>
 80070aa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80070ae:	4294      	cmp	r4, r2
 80070b0:	d002      	beq.n	80070b8 <std+0x48>
 80070b2:	33d0      	adds	r3, #208	@ 0xd0
 80070b4:	429c      	cmp	r4, r3
 80070b6:	d105      	bne.n	80070c4 <std+0x54>
 80070b8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80070bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070c0:	f000 ba46 	b.w	8007550 <__retarget_lock_init_recursive>
 80070c4:	bd10      	pop	{r4, pc}
 80070c6:	bf00      	nop
 80070c8:	080072b1 	.word	0x080072b1
 80070cc:	080072d3 	.word	0x080072d3
 80070d0:	0800730b 	.word	0x0800730b
 80070d4:	0800732f 	.word	0x0800732f
 80070d8:	20000410 	.word	0x20000410

080070dc <stdio_exit_handler>:
 80070dc:	4a02      	ldr	r2, [pc, #8]	@ (80070e8 <stdio_exit_handler+0xc>)
 80070de:	4903      	ldr	r1, [pc, #12]	@ (80070ec <stdio_exit_handler+0x10>)
 80070e0:	4803      	ldr	r0, [pc, #12]	@ (80070f0 <stdio_exit_handler+0x14>)
 80070e2:	f000 b869 	b.w	80071b8 <_fwalk_sglue>
 80070e6:	bf00      	nop
 80070e8:	2000000c 	.word	0x2000000c
 80070ec:	08007851 	.word	0x08007851
 80070f0:	2000001c 	.word	0x2000001c

080070f4 <cleanup_stdio>:
 80070f4:	6841      	ldr	r1, [r0, #4]
 80070f6:	4b0c      	ldr	r3, [pc, #48]	@ (8007128 <cleanup_stdio+0x34>)
 80070f8:	4299      	cmp	r1, r3
 80070fa:	b510      	push	{r4, lr}
 80070fc:	4604      	mov	r4, r0
 80070fe:	d001      	beq.n	8007104 <cleanup_stdio+0x10>
 8007100:	f000 fba6 	bl	8007850 <_fflush_r>
 8007104:	68a1      	ldr	r1, [r4, #8]
 8007106:	4b09      	ldr	r3, [pc, #36]	@ (800712c <cleanup_stdio+0x38>)
 8007108:	4299      	cmp	r1, r3
 800710a:	d002      	beq.n	8007112 <cleanup_stdio+0x1e>
 800710c:	4620      	mov	r0, r4
 800710e:	f000 fb9f 	bl	8007850 <_fflush_r>
 8007112:	68e1      	ldr	r1, [r4, #12]
 8007114:	4b06      	ldr	r3, [pc, #24]	@ (8007130 <cleanup_stdio+0x3c>)
 8007116:	4299      	cmp	r1, r3
 8007118:	d004      	beq.n	8007124 <cleanup_stdio+0x30>
 800711a:	4620      	mov	r0, r4
 800711c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007120:	f000 bb96 	b.w	8007850 <_fflush_r>
 8007124:	bd10      	pop	{r4, pc}
 8007126:	bf00      	nop
 8007128:	20000410 	.word	0x20000410
 800712c:	20000478 	.word	0x20000478
 8007130:	200004e0 	.word	0x200004e0

08007134 <global_stdio_init.part.0>:
 8007134:	b510      	push	{r4, lr}
 8007136:	4b0b      	ldr	r3, [pc, #44]	@ (8007164 <global_stdio_init.part.0+0x30>)
 8007138:	4c0b      	ldr	r4, [pc, #44]	@ (8007168 <global_stdio_init.part.0+0x34>)
 800713a:	4a0c      	ldr	r2, [pc, #48]	@ (800716c <global_stdio_init.part.0+0x38>)
 800713c:	601a      	str	r2, [r3, #0]
 800713e:	4620      	mov	r0, r4
 8007140:	2200      	movs	r2, #0
 8007142:	2104      	movs	r1, #4
 8007144:	f7ff ff94 	bl	8007070 <std>
 8007148:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800714c:	2201      	movs	r2, #1
 800714e:	2109      	movs	r1, #9
 8007150:	f7ff ff8e 	bl	8007070 <std>
 8007154:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007158:	2202      	movs	r2, #2
 800715a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800715e:	2112      	movs	r1, #18
 8007160:	f7ff bf86 	b.w	8007070 <std>
 8007164:	20000548 	.word	0x20000548
 8007168:	20000410 	.word	0x20000410
 800716c:	080070dd 	.word	0x080070dd

08007170 <__sfp_lock_acquire>:
 8007170:	4801      	ldr	r0, [pc, #4]	@ (8007178 <__sfp_lock_acquire+0x8>)
 8007172:	f000 b9ee 	b.w	8007552 <__retarget_lock_acquire_recursive>
 8007176:	bf00      	nop
 8007178:	20000551 	.word	0x20000551

0800717c <__sfp_lock_release>:
 800717c:	4801      	ldr	r0, [pc, #4]	@ (8007184 <__sfp_lock_release+0x8>)
 800717e:	f000 b9e9 	b.w	8007554 <__retarget_lock_release_recursive>
 8007182:	bf00      	nop
 8007184:	20000551 	.word	0x20000551

08007188 <__sinit>:
 8007188:	b510      	push	{r4, lr}
 800718a:	4604      	mov	r4, r0
 800718c:	f7ff fff0 	bl	8007170 <__sfp_lock_acquire>
 8007190:	6a23      	ldr	r3, [r4, #32]
 8007192:	b11b      	cbz	r3, 800719c <__sinit+0x14>
 8007194:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007198:	f7ff bff0 	b.w	800717c <__sfp_lock_release>
 800719c:	4b04      	ldr	r3, [pc, #16]	@ (80071b0 <__sinit+0x28>)
 800719e:	6223      	str	r3, [r4, #32]
 80071a0:	4b04      	ldr	r3, [pc, #16]	@ (80071b4 <__sinit+0x2c>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d1f5      	bne.n	8007194 <__sinit+0xc>
 80071a8:	f7ff ffc4 	bl	8007134 <global_stdio_init.part.0>
 80071ac:	e7f2      	b.n	8007194 <__sinit+0xc>
 80071ae:	bf00      	nop
 80071b0:	080070f5 	.word	0x080070f5
 80071b4:	20000548 	.word	0x20000548

080071b8 <_fwalk_sglue>:
 80071b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071bc:	4607      	mov	r7, r0
 80071be:	4688      	mov	r8, r1
 80071c0:	4614      	mov	r4, r2
 80071c2:	2600      	movs	r6, #0
 80071c4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80071c8:	f1b9 0901 	subs.w	r9, r9, #1
 80071cc:	d505      	bpl.n	80071da <_fwalk_sglue+0x22>
 80071ce:	6824      	ldr	r4, [r4, #0]
 80071d0:	2c00      	cmp	r4, #0
 80071d2:	d1f7      	bne.n	80071c4 <_fwalk_sglue+0xc>
 80071d4:	4630      	mov	r0, r6
 80071d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071da:	89ab      	ldrh	r3, [r5, #12]
 80071dc:	2b01      	cmp	r3, #1
 80071de:	d907      	bls.n	80071f0 <_fwalk_sglue+0x38>
 80071e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80071e4:	3301      	adds	r3, #1
 80071e6:	d003      	beq.n	80071f0 <_fwalk_sglue+0x38>
 80071e8:	4629      	mov	r1, r5
 80071ea:	4638      	mov	r0, r7
 80071ec:	47c0      	blx	r8
 80071ee:	4306      	orrs	r6, r0
 80071f0:	3568      	adds	r5, #104	@ 0x68
 80071f2:	e7e9      	b.n	80071c8 <_fwalk_sglue+0x10>

080071f4 <_puts_r>:
 80071f4:	6a03      	ldr	r3, [r0, #32]
 80071f6:	b570      	push	{r4, r5, r6, lr}
 80071f8:	6884      	ldr	r4, [r0, #8]
 80071fa:	4605      	mov	r5, r0
 80071fc:	460e      	mov	r6, r1
 80071fe:	b90b      	cbnz	r3, 8007204 <_puts_r+0x10>
 8007200:	f7ff ffc2 	bl	8007188 <__sinit>
 8007204:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007206:	07db      	lsls	r3, r3, #31
 8007208:	d405      	bmi.n	8007216 <_puts_r+0x22>
 800720a:	89a3      	ldrh	r3, [r4, #12]
 800720c:	0598      	lsls	r0, r3, #22
 800720e:	d402      	bmi.n	8007216 <_puts_r+0x22>
 8007210:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007212:	f000 f99e 	bl	8007552 <__retarget_lock_acquire_recursive>
 8007216:	89a3      	ldrh	r3, [r4, #12]
 8007218:	0719      	lsls	r1, r3, #28
 800721a:	d502      	bpl.n	8007222 <_puts_r+0x2e>
 800721c:	6923      	ldr	r3, [r4, #16]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d135      	bne.n	800728e <_puts_r+0x9a>
 8007222:	4621      	mov	r1, r4
 8007224:	4628      	mov	r0, r5
 8007226:	f000 f8c5 	bl	80073b4 <__swsetup_r>
 800722a:	b380      	cbz	r0, 800728e <_puts_r+0x9a>
 800722c:	f04f 35ff 	mov.w	r5, #4294967295
 8007230:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007232:	07da      	lsls	r2, r3, #31
 8007234:	d405      	bmi.n	8007242 <_puts_r+0x4e>
 8007236:	89a3      	ldrh	r3, [r4, #12]
 8007238:	059b      	lsls	r3, r3, #22
 800723a:	d402      	bmi.n	8007242 <_puts_r+0x4e>
 800723c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800723e:	f000 f989 	bl	8007554 <__retarget_lock_release_recursive>
 8007242:	4628      	mov	r0, r5
 8007244:	bd70      	pop	{r4, r5, r6, pc}
 8007246:	2b00      	cmp	r3, #0
 8007248:	da04      	bge.n	8007254 <_puts_r+0x60>
 800724a:	69a2      	ldr	r2, [r4, #24]
 800724c:	429a      	cmp	r2, r3
 800724e:	dc17      	bgt.n	8007280 <_puts_r+0x8c>
 8007250:	290a      	cmp	r1, #10
 8007252:	d015      	beq.n	8007280 <_puts_r+0x8c>
 8007254:	6823      	ldr	r3, [r4, #0]
 8007256:	1c5a      	adds	r2, r3, #1
 8007258:	6022      	str	r2, [r4, #0]
 800725a:	7019      	strb	r1, [r3, #0]
 800725c:	68a3      	ldr	r3, [r4, #8]
 800725e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007262:	3b01      	subs	r3, #1
 8007264:	60a3      	str	r3, [r4, #8]
 8007266:	2900      	cmp	r1, #0
 8007268:	d1ed      	bne.n	8007246 <_puts_r+0x52>
 800726a:	2b00      	cmp	r3, #0
 800726c:	da11      	bge.n	8007292 <_puts_r+0x9e>
 800726e:	4622      	mov	r2, r4
 8007270:	210a      	movs	r1, #10
 8007272:	4628      	mov	r0, r5
 8007274:	f000 f85f 	bl	8007336 <__swbuf_r>
 8007278:	3001      	adds	r0, #1
 800727a:	d0d7      	beq.n	800722c <_puts_r+0x38>
 800727c:	250a      	movs	r5, #10
 800727e:	e7d7      	b.n	8007230 <_puts_r+0x3c>
 8007280:	4622      	mov	r2, r4
 8007282:	4628      	mov	r0, r5
 8007284:	f000 f857 	bl	8007336 <__swbuf_r>
 8007288:	3001      	adds	r0, #1
 800728a:	d1e7      	bne.n	800725c <_puts_r+0x68>
 800728c:	e7ce      	b.n	800722c <_puts_r+0x38>
 800728e:	3e01      	subs	r6, #1
 8007290:	e7e4      	b.n	800725c <_puts_r+0x68>
 8007292:	6823      	ldr	r3, [r4, #0]
 8007294:	1c5a      	adds	r2, r3, #1
 8007296:	6022      	str	r2, [r4, #0]
 8007298:	220a      	movs	r2, #10
 800729a:	701a      	strb	r2, [r3, #0]
 800729c:	e7ee      	b.n	800727c <_puts_r+0x88>
	...

080072a0 <puts>:
 80072a0:	4b02      	ldr	r3, [pc, #8]	@ (80072ac <puts+0xc>)
 80072a2:	4601      	mov	r1, r0
 80072a4:	6818      	ldr	r0, [r3, #0]
 80072a6:	f7ff bfa5 	b.w	80071f4 <_puts_r>
 80072aa:	bf00      	nop
 80072ac:	20000018 	.word	0x20000018

080072b0 <__sread>:
 80072b0:	b510      	push	{r4, lr}
 80072b2:	460c      	mov	r4, r1
 80072b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072b8:	f000 f8fc 	bl	80074b4 <_read_r>
 80072bc:	2800      	cmp	r0, #0
 80072be:	bfab      	itete	ge
 80072c0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80072c2:	89a3      	ldrhlt	r3, [r4, #12]
 80072c4:	181b      	addge	r3, r3, r0
 80072c6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80072ca:	bfac      	ite	ge
 80072cc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80072ce:	81a3      	strhlt	r3, [r4, #12]
 80072d0:	bd10      	pop	{r4, pc}

080072d2 <__swrite>:
 80072d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072d6:	461f      	mov	r7, r3
 80072d8:	898b      	ldrh	r3, [r1, #12]
 80072da:	05db      	lsls	r3, r3, #23
 80072dc:	4605      	mov	r5, r0
 80072de:	460c      	mov	r4, r1
 80072e0:	4616      	mov	r6, r2
 80072e2:	d505      	bpl.n	80072f0 <__swrite+0x1e>
 80072e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072e8:	2302      	movs	r3, #2
 80072ea:	2200      	movs	r2, #0
 80072ec:	f000 f8d0 	bl	8007490 <_lseek_r>
 80072f0:	89a3      	ldrh	r3, [r4, #12]
 80072f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80072f6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80072fa:	81a3      	strh	r3, [r4, #12]
 80072fc:	4632      	mov	r2, r6
 80072fe:	463b      	mov	r3, r7
 8007300:	4628      	mov	r0, r5
 8007302:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007306:	f000 b8e7 	b.w	80074d8 <_write_r>

0800730a <__sseek>:
 800730a:	b510      	push	{r4, lr}
 800730c:	460c      	mov	r4, r1
 800730e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007312:	f000 f8bd 	bl	8007490 <_lseek_r>
 8007316:	1c43      	adds	r3, r0, #1
 8007318:	89a3      	ldrh	r3, [r4, #12]
 800731a:	bf15      	itete	ne
 800731c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800731e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007322:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007326:	81a3      	strheq	r3, [r4, #12]
 8007328:	bf18      	it	ne
 800732a:	81a3      	strhne	r3, [r4, #12]
 800732c:	bd10      	pop	{r4, pc}

0800732e <__sclose>:
 800732e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007332:	f000 b89d 	b.w	8007470 <_close_r>

08007336 <__swbuf_r>:
 8007336:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007338:	460e      	mov	r6, r1
 800733a:	4614      	mov	r4, r2
 800733c:	4605      	mov	r5, r0
 800733e:	b118      	cbz	r0, 8007348 <__swbuf_r+0x12>
 8007340:	6a03      	ldr	r3, [r0, #32]
 8007342:	b90b      	cbnz	r3, 8007348 <__swbuf_r+0x12>
 8007344:	f7ff ff20 	bl	8007188 <__sinit>
 8007348:	69a3      	ldr	r3, [r4, #24]
 800734a:	60a3      	str	r3, [r4, #8]
 800734c:	89a3      	ldrh	r3, [r4, #12]
 800734e:	071a      	lsls	r2, r3, #28
 8007350:	d501      	bpl.n	8007356 <__swbuf_r+0x20>
 8007352:	6923      	ldr	r3, [r4, #16]
 8007354:	b943      	cbnz	r3, 8007368 <__swbuf_r+0x32>
 8007356:	4621      	mov	r1, r4
 8007358:	4628      	mov	r0, r5
 800735a:	f000 f82b 	bl	80073b4 <__swsetup_r>
 800735e:	b118      	cbz	r0, 8007368 <__swbuf_r+0x32>
 8007360:	f04f 37ff 	mov.w	r7, #4294967295
 8007364:	4638      	mov	r0, r7
 8007366:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007368:	6823      	ldr	r3, [r4, #0]
 800736a:	6922      	ldr	r2, [r4, #16]
 800736c:	1a98      	subs	r0, r3, r2
 800736e:	6963      	ldr	r3, [r4, #20]
 8007370:	b2f6      	uxtb	r6, r6
 8007372:	4283      	cmp	r3, r0
 8007374:	4637      	mov	r7, r6
 8007376:	dc05      	bgt.n	8007384 <__swbuf_r+0x4e>
 8007378:	4621      	mov	r1, r4
 800737a:	4628      	mov	r0, r5
 800737c:	f000 fa68 	bl	8007850 <_fflush_r>
 8007380:	2800      	cmp	r0, #0
 8007382:	d1ed      	bne.n	8007360 <__swbuf_r+0x2a>
 8007384:	68a3      	ldr	r3, [r4, #8]
 8007386:	3b01      	subs	r3, #1
 8007388:	60a3      	str	r3, [r4, #8]
 800738a:	6823      	ldr	r3, [r4, #0]
 800738c:	1c5a      	adds	r2, r3, #1
 800738e:	6022      	str	r2, [r4, #0]
 8007390:	701e      	strb	r6, [r3, #0]
 8007392:	6962      	ldr	r2, [r4, #20]
 8007394:	1c43      	adds	r3, r0, #1
 8007396:	429a      	cmp	r2, r3
 8007398:	d004      	beq.n	80073a4 <__swbuf_r+0x6e>
 800739a:	89a3      	ldrh	r3, [r4, #12]
 800739c:	07db      	lsls	r3, r3, #31
 800739e:	d5e1      	bpl.n	8007364 <__swbuf_r+0x2e>
 80073a0:	2e0a      	cmp	r6, #10
 80073a2:	d1df      	bne.n	8007364 <__swbuf_r+0x2e>
 80073a4:	4621      	mov	r1, r4
 80073a6:	4628      	mov	r0, r5
 80073a8:	f000 fa52 	bl	8007850 <_fflush_r>
 80073ac:	2800      	cmp	r0, #0
 80073ae:	d0d9      	beq.n	8007364 <__swbuf_r+0x2e>
 80073b0:	e7d6      	b.n	8007360 <__swbuf_r+0x2a>
	...

080073b4 <__swsetup_r>:
 80073b4:	b538      	push	{r3, r4, r5, lr}
 80073b6:	4b29      	ldr	r3, [pc, #164]	@ (800745c <__swsetup_r+0xa8>)
 80073b8:	4605      	mov	r5, r0
 80073ba:	6818      	ldr	r0, [r3, #0]
 80073bc:	460c      	mov	r4, r1
 80073be:	b118      	cbz	r0, 80073c8 <__swsetup_r+0x14>
 80073c0:	6a03      	ldr	r3, [r0, #32]
 80073c2:	b90b      	cbnz	r3, 80073c8 <__swsetup_r+0x14>
 80073c4:	f7ff fee0 	bl	8007188 <__sinit>
 80073c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073cc:	0719      	lsls	r1, r3, #28
 80073ce:	d422      	bmi.n	8007416 <__swsetup_r+0x62>
 80073d0:	06da      	lsls	r2, r3, #27
 80073d2:	d407      	bmi.n	80073e4 <__swsetup_r+0x30>
 80073d4:	2209      	movs	r2, #9
 80073d6:	602a      	str	r2, [r5, #0]
 80073d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80073dc:	81a3      	strh	r3, [r4, #12]
 80073de:	f04f 30ff 	mov.w	r0, #4294967295
 80073e2:	e033      	b.n	800744c <__swsetup_r+0x98>
 80073e4:	0758      	lsls	r0, r3, #29
 80073e6:	d512      	bpl.n	800740e <__swsetup_r+0x5a>
 80073e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80073ea:	b141      	cbz	r1, 80073fe <__swsetup_r+0x4a>
 80073ec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80073f0:	4299      	cmp	r1, r3
 80073f2:	d002      	beq.n	80073fa <__swsetup_r+0x46>
 80073f4:	4628      	mov	r0, r5
 80073f6:	f000 f8af 	bl	8007558 <_free_r>
 80073fa:	2300      	movs	r3, #0
 80073fc:	6363      	str	r3, [r4, #52]	@ 0x34
 80073fe:	89a3      	ldrh	r3, [r4, #12]
 8007400:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007404:	81a3      	strh	r3, [r4, #12]
 8007406:	2300      	movs	r3, #0
 8007408:	6063      	str	r3, [r4, #4]
 800740a:	6923      	ldr	r3, [r4, #16]
 800740c:	6023      	str	r3, [r4, #0]
 800740e:	89a3      	ldrh	r3, [r4, #12]
 8007410:	f043 0308 	orr.w	r3, r3, #8
 8007414:	81a3      	strh	r3, [r4, #12]
 8007416:	6923      	ldr	r3, [r4, #16]
 8007418:	b94b      	cbnz	r3, 800742e <__swsetup_r+0x7a>
 800741a:	89a3      	ldrh	r3, [r4, #12]
 800741c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007420:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007424:	d003      	beq.n	800742e <__swsetup_r+0x7a>
 8007426:	4621      	mov	r1, r4
 8007428:	4628      	mov	r0, r5
 800742a:	f000 fa5f 	bl	80078ec <__smakebuf_r>
 800742e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007432:	f013 0201 	ands.w	r2, r3, #1
 8007436:	d00a      	beq.n	800744e <__swsetup_r+0x9a>
 8007438:	2200      	movs	r2, #0
 800743a:	60a2      	str	r2, [r4, #8]
 800743c:	6962      	ldr	r2, [r4, #20]
 800743e:	4252      	negs	r2, r2
 8007440:	61a2      	str	r2, [r4, #24]
 8007442:	6922      	ldr	r2, [r4, #16]
 8007444:	b942      	cbnz	r2, 8007458 <__swsetup_r+0xa4>
 8007446:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800744a:	d1c5      	bne.n	80073d8 <__swsetup_r+0x24>
 800744c:	bd38      	pop	{r3, r4, r5, pc}
 800744e:	0799      	lsls	r1, r3, #30
 8007450:	bf58      	it	pl
 8007452:	6962      	ldrpl	r2, [r4, #20]
 8007454:	60a2      	str	r2, [r4, #8]
 8007456:	e7f4      	b.n	8007442 <__swsetup_r+0x8e>
 8007458:	2000      	movs	r0, #0
 800745a:	e7f7      	b.n	800744c <__swsetup_r+0x98>
 800745c:	20000018 	.word	0x20000018

08007460 <memset>:
 8007460:	4402      	add	r2, r0
 8007462:	4603      	mov	r3, r0
 8007464:	4293      	cmp	r3, r2
 8007466:	d100      	bne.n	800746a <memset+0xa>
 8007468:	4770      	bx	lr
 800746a:	f803 1b01 	strb.w	r1, [r3], #1
 800746e:	e7f9      	b.n	8007464 <memset+0x4>

08007470 <_close_r>:
 8007470:	b538      	push	{r3, r4, r5, lr}
 8007472:	4d06      	ldr	r5, [pc, #24]	@ (800748c <_close_r+0x1c>)
 8007474:	2300      	movs	r3, #0
 8007476:	4604      	mov	r4, r0
 8007478:	4608      	mov	r0, r1
 800747a:	602b      	str	r3, [r5, #0]
 800747c:	f7fa fa63 	bl	8001946 <_close>
 8007480:	1c43      	adds	r3, r0, #1
 8007482:	d102      	bne.n	800748a <_close_r+0x1a>
 8007484:	682b      	ldr	r3, [r5, #0]
 8007486:	b103      	cbz	r3, 800748a <_close_r+0x1a>
 8007488:	6023      	str	r3, [r4, #0]
 800748a:	bd38      	pop	{r3, r4, r5, pc}
 800748c:	2000054c 	.word	0x2000054c

08007490 <_lseek_r>:
 8007490:	b538      	push	{r3, r4, r5, lr}
 8007492:	4d07      	ldr	r5, [pc, #28]	@ (80074b0 <_lseek_r+0x20>)
 8007494:	4604      	mov	r4, r0
 8007496:	4608      	mov	r0, r1
 8007498:	4611      	mov	r1, r2
 800749a:	2200      	movs	r2, #0
 800749c:	602a      	str	r2, [r5, #0]
 800749e:	461a      	mov	r2, r3
 80074a0:	f7fa fa78 	bl	8001994 <_lseek>
 80074a4:	1c43      	adds	r3, r0, #1
 80074a6:	d102      	bne.n	80074ae <_lseek_r+0x1e>
 80074a8:	682b      	ldr	r3, [r5, #0]
 80074aa:	b103      	cbz	r3, 80074ae <_lseek_r+0x1e>
 80074ac:	6023      	str	r3, [r4, #0]
 80074ae:	bd38      	pop	{r3, r4, r5, pc}
 80074b0:	2000054c 	.word	0x2000054c

080074b4 <_read_r>:
 80074b4:	b538      	push	{r3, r4, r5, lr}
 80074b6:	4d07      	ldr	r5, [pc, #28]	@ (80074d4 <_read_r+0x20>)
 80074b8:	4604      	mov	r4, r0
 80074ba:	4608      	mov	r0, r1
 80074bc:	4611      	mov	r1, r2
 80074be:	2200      	movs	r2, #0
 80074c0:	602a      	str	r2, [r5, #0]
 80074c2:	461a      	mov	r2, r3
 80074c4:	f7fa fa22 	bl	800190c <_read>
 80074c8:	1c43      	adds	r3, r0, #1
 80074ca:	d102      	bne.n	80074d2 <_read_r+0x1e>
 80074cc:	682b      	ldr	r3, [r5, #0]
 80074ce:	b103      	cbz	r3, 80074d2 <_read_r+0x1e>
 80074d0:	6023      	str	r3, [r4, #0]
 80074d2:	bd38      	pop	{r3, r4, r5, pc}
 80074d4:	2000054c 	.word	0x2000054c

080074d8 <_write_r>:
 80074d8:	b538      	push	{r3, r4, r5, lr}
 80074da:	4d07      	ldr	r5, [pc, #28]	@ (80074f8 <_write_r+0x20>)
 80074dc:	4604      	mov	r4, r0
 80074de:	4608      	mov	r0, r1
 80074e0:	4611      	mov	r1, r2
 80074e2:	2200      	movs	r2, #0
 80074e4:	602a      	str	r2, [r5, #0]
 80074e6:	461a      	mov	r2, r3
 80074e8:	f7f9 fe38 	bl	800115c <_write>
 80074ec:	1c43      	adds	r3, r0, #1
 80074ee:	d102      	bne.n	80074f6 <_write_r+0x1e>
 80074f0:	682b      	ldr	r3, [r5, #0]
 80074f2:	b103      	cbz	r3, 80074f6 <_write_r+0x1e>
 80074f4:	6023      	str	r3, [r4, #0]
 80074f6:	bd38      	pop	{r3, r4, r5, pc}
 80074f8:	2000054c 	.word	0x2000054c

080074fc <__errno>:
 80074fc:	4b01      	ldr	r3, [pc, #4]	@ (8007504 <__errno+0x8>)
 80074fe:	6818      	ldr	r0, [r3, #0]
 8007500:	4770      	bx	lr
 8007502:	bf00      	nop
 8007504:	20000018 	.word	0x20000018

08007508 <__libc_init_array>:
 8007508:	b570      	push	{r4, r5, r6, lr}
 800750a:	4d0d      	ldr	r5, [pc, #52]	@ (8007540 <__libc_init_array+0x38>)
 800750c:	4c0d      	ldr	r4, [pc, #52]	@ (8007544 <__libc_init_array+0x3c>)
 800750e:	1b64      	subs	r4, r4, r5
 8007510:	10a4      	asrs	r4, r4, #2
 8007512:	2600      	movs	r6, #0
 8007514:	42a6      	cmp	r6, r4
 8007516:	d109      	bne.n	800752c <__libc_init_array+0x24>
 8007518:	4d0b      	ldr	r5, [pc, #44]	@ (8007548 <__libc_init_array+0x40>)
 800751a:	4c0c      	ldr	r4, [pc, #48]	@ (800754c <__libc_init_array+0x44>)
 800751c:	f000 faaa 	bl	8007a74 <_init>
 8007520:	1b64      	subs	r4, r4, r5
 8007522:	10a4      	asrs	r4, r4, #2
 8007524:	2600      	movs	r6, #0
 8007526:	42a6      	cmp	r6, r4
 8007528:	d105      	bne.n	8007536 <__libc_init_array+0x2e>
 800752a:	bd70      	pop	{r4, r5, r6, pc}
 800752c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007530:	4798      	blx	r3
 8007532:	3601      	adds	r6, #1
 8007534:	e7ee      	b.n	8007514 <__libc_init_array+0xc>
 8007536:	f855 3b04 	ldr.w	r3, [r5], #4
 800753a:	4798      	blx	r3
 800753c:	3601      	adds	r6, #1
 800753e:	e7f2      	b.n	8007526 <__libc_init_array+0x1e>
 8007540:	08007b08 	.word	0x08007b08
 8007544:	08007b08 	.word	0x08007b08
 8007548:	08007b08 	.word	0x08007b08
 800754c:	08007b0c 	.word	0x08007b0c

08007550 <__retarget_lock_init_recursive>:
 8007550:	4770      	bx	lr

08007552 <__retarget_lock_acquire_recursive>:
 8007552:	4770      	bx	lr

08007554 <__retarget_lock_release_recursive>:
 8007554:	4770      	bx	lr
	...

08007558 <_free_r>:
 8007558:	b538      	push	{r3, r4, r5, lr}
 800755a:	4605      	mov	r5, r0
 800755c:	2900      	cmp	r1, #0
 800755e:	d041      	beq.n	80075e4 <_free_r+0x8c>
 8007560:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007564:	1f0c      	subs	r4, r1, #4
 8007566:	2b00      	cmp	r3, #0
 8007568:	bfb8      	it	lt
 800756a:	18e4      	addlt	r4, r4, r3
 800756c:	f000 f8e0 	bl	8007730 <__malloc_lock>
 8007570:	4a1d      	ldr	r2, [pc, #116]	@ (80075e8 <_free_r+0x90>)
 8007572:	6813      	ldr	r3, [r2, #0]
 8007574:	b933      	cbnz	r3, 8007584 <_free_r+0x2c>
 8007576:	6063      	str	r3, [r4, #4]
 8007578:	6014      	str	r4, [r2, #0]
 800757a:	4628      	mov	r0, r5
 800757c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007580:	f000 b8dc 	b.w	800773c <__malloc_unlock>
 8007584:	42a3      	cmp	r3, r4
 8007586:	d908      	bls.n	800759a <_free_r+0x42>
 8007588:	6820      	ldr	r0, [r4, #0]
 800758a:	1821      	adds	r1, r4, r0
 800758c:	428b      	cmp	r3, r1
 800758e:	bf01      	itttt	eq
 8007590:	6819      	ldreq	r1, [r3, #0]
 8007592:	685b      	ldreq	r3, [r3, #4]
 8007594:	1809      	addeq	r1, r1, r0
 8007596:	6021      	streq	r1, [r4, #0]
 8007598:	e7ed      	b.n	8007576 <_free_r+0x1e>
 800759a:	461a      	mov	r2, r3
 800759c:	685b      	ldr	r3, [r3, #4]
 800759e:	b10b      	cbz	r3, 80075a4 <_free_r+0x4c>
 80075a0:	42a3      	cmp	r3, r4
 80075a2:	d9fa      	bls.n	800759a <_free_r+0x42>
 80075a4:	6811      	ldr	r1, [r2, #0]
 80075a6:	1850      	adds	r0, r2, r1
 80075a8:	42a0      	cmp	r0, r4
 80075aa:	d10b      	bne.n	80075c4 <_free_r+0x6c>
 80075ac:	6820      	ldr	r0, [r4, #0]
 80075ae:	4401      	add	r1, r0
 80075b0:	1850      	adds	r0, r2, r1
 80075b2:	4283      	cmp	r3, r0
 80075b4:	6011      	str	r1, [r2, #0]
 80075b6:	d1e0      	bne.n	800757a <_free_r+0x22>
 80075b8:	6818      	ldr	r0, [r3, #0]
 80075ba:	685b      	ldr	r3, [r3, #4]
 80075bc:	6053      	str	r3, [r2, #4]
 80075be:	4408      	add	r0, r1
 80075c0:	6010      	str	r0, [r2, #0]
 80075c2:	e7da      	b.n	800757a <_free_r+0x22>
 80075c4:	d902      	bls.n	80075cc <_free_r+0x74>
 80075c6:	230c      	movs	r3, #12
 80075c8:	602b      	str	r3, [r5, #0]
 80075ca:	e7d6      	b.n	800757a <_free_r+0x22>
 80075cc:	6820      	ldr	r0, [r4, #0]
 80075ce:	1821      	adds	r1, r4, r0
 80075d0:	428b      	cmp	r3, r1
 80075d2:	bf04      	itt	eq
 80075d4:	6819      	ldreq	r1, [r3, #0]
 80075d6:	685b      	ldreq	r3, [r3, #4]
 80075d8:	6063      	str	r3, [r4, #4]
 80075da:	bf04      	itt	eq
 80075dc:	1809      	addeq	r1, r1, r0
 80075de:	6021      	streq	r1, [r4, #0]
 80075e0:	6054      	str	r4, [r2, #4]
 80075e2:	e7ca      	b.n	800757a <_free_r+0x22>
 80075e4:	bd38      	pop	{r3, r4, r5, pc}
 80075e6:	bf00      	nop
 80075e8:	20000558 	.word	0x20000558

080075ec <sbrk_aligned>:
 80075ec:	b570      	push	{r4, r5, r6, lr}
 80075ee:	4e0f      	ldr	r6, [pc, #60]	@ (800762c <sbrk_aligned+0x40>)
 80075f0:	460c      	mov	r4, r1
 80075f2:	6831      	ldr	r1, [r6, #0]
 80075f4:	4605      	mov	r5, r0
 80075f6:	b911      	cbnz	r1, 80075fe <sbrk_aligned+0x12>
 80075f8:	f000 f9d6 	bl	80079a8 <_sbrk_r>
 80075fc:	6030      	str	r0, [r6, #0]
 80075fe:	4621      	mov	r1, r4
 8007600:	4628      	mov	r0, r5
 8007602:	f000 f9d1 	bl	80079a8 <_sbrk_r>
 8007606:	1c43      	adds	r3, r0, #1
 8007608:	d103      	bne.n	8007612 <sbrk_aligned+0x26>
 800760a:	f04f 34ff 	mov.w	r4, #4294967295
 800760e:	4620      	mov	r0, r4
 8007610:	bd70      	pop	{r4, r5, r6, pc}
 8007612:	1cc4      	adds	r4, r0, #3
 8007614:	f024 0403 	bic.w	r4, r4, #3
 8007618:	42a0      	cmp	r0, r4
 800761a:	d0f8      	beq.n	800760e <sbrk_aligned+0x22>
 800761c:	1a21      	subs	r1, r4, r0
 800761e:	4628      	mov	r0, r5
 8007620:	f000 f9c2 	bl	80079a8 <_sbrk_r>
 8007624:	3001      	adds	r0, #1
 8007626:	d1f2      	bne.n	800760e <sbrk_aligned+0x22>
 8007628:	e7ef      	b.n	800760a <sbrk_aligned+0x1e>
 800762a:	bf00      	nop
 800762c:	20000554 	.word	0x20000554

08007630 <_malloc_r>:
 8007630:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007634:	1ccd      	adds	r5, r1, #3
 8007636:	f025 0503 	bic.w	r5, r5, #3
 800763a:	3508      	adds	r5, #8
 800763c:	2d0c      	cmp	r5, #12
 800763e:	bf38      	it	cc
 8007640:	250c      	movcc	r5, #12
 8007642:	2d00      	cmp	r5, #0
 8007644:	4606      	mov	r6, r0
 8007646:	db01      	blt.n	800764c <_malloc_r+0x1c>
 8007648:	42a9      	cmp	r1, r5
 800764a:	d904      	bls.n	8007656 <_malloc_r+0x26>
 800764c:	230c      	movs	r3, #12
 800764e:	6033      	str	r3, [r6, #0]
 8007650:	2000      	movs	r0, #0
 8007652:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007656:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800772c <_malloc_r+0xfc>
 800765a:	f000 f869 	bl	8007730 <__malloc_lock>
 800765e:	f8d8 3000 	ldr.w	r3, [r8]
 8007662:	461c      	mov	r4, r3
 8007664:	bb44      	cbnz	r4, 80076b8 <_malloc_r+0x88>
 8007666:	4629      	mov	r1, r5
 8007668:	4630      	mov	r0, r6
 800766a:	f7ff ffbf 	bl	80075ec <sbrk_aligned>
 800766e:	1c43      	adds	r3, r0, #1
 8007670:	4604      	mov	r4, r0
 8007672:	d158      	bne.n	8007726 <_malloc_r+0xf6>
 8007674:	f8d8 4000 	ldr.w	r4, [r8]
 8007678:	4627      	mov	r7, r4
 800767a:	2f00      	cmp	r7, #0
 800767c:	d143      	bne.n	8007706 <_malloc_r+0xd6>
 800767e:	2c00      	cmp	r4, #0
 8007680:	d04b      	beq.n	800771a <_malloc_r+0xea>
 8007682:	6823      	ldr	r3, [r4, #0]
 8007684:	4639      	mov	r1, r7
 8007686:	4630      	mov	r0, r6
 8007688:	eb04 0903 	add.w	r9, r4, r3
 800768c:	f000 f98c 	bl	80079a8 <_sbrk_r>
 8007690:	4581      	cmp	r9, r0
 8007692:	d142      	bne.n	800771a <_malloc_r+0xea>
 8007694:	6821      	ldr	r1, [r4, #0]
 8007696:	1a6d      	subs	r5, r5, r1
 8007698:	4629      	mov	r1, r5
 800769a:	4630      	mov	r0, r6
 800769c:	f7ff ffa6 	bl	80075ec <sbrk_aligned>
 80076a0:	3001      	adds	r0, #1
 80076a2:	d03a      	beq.n	800771a <_malloc_r+0xea>
 80076a4:	6823      	ldr	r3, [r4, #0]
 80076a6:	442b      	add	r3, r5
 80076a8:	6023      	str	r3, [r4, #0]
 80076aa:	f8d8 3000 	ldr.w	r3, [r8]
 80076ae:	685a      	ldr	r2, [r3, #4]
 80076b0:	bb62      	cbnz	r2, 800770c <_malloc_r+0xdc>
 80076b2:	f8c8 7000 	str.w	r7, [r8]
 80076b6:	e00f      	b.n	80076d8 <_malloc_r+0xa8>
 80076b8:	6822      	ldr	r2, [r4, #0]
 80076ba:	1b52      	subs	r2, r2, r5
 80076bc:	d420      	bmi.n	8007700 <_malloc_r+0xd0>
 80076be:	2a0b      	cmp	r2, #11
 80076c0:	d917      	bls.n	80076f2 <_malloc_r+0xc2>
 80076c2:	1961      	adds	r1, r4, r5
 80076c4:	42a3      	cmp	r3, r4
 80076c6:	6025      	str	r5, [r4, #0]
 80076c8:	bf18      	it	ne
 80076ca:	6059      	strne	r1, [r3, #4]
 80076cc:	6863      	ldr	r3, [r4, #4]
 80076ce:	bf08      	it	eq
 80076d0:	f8c8 1000 	streq.w	r1, [r8]
 80076d4:	5162      	str	r2, [r4, r5]
 80076d6:	604b      	str	r3, [r1, #4]
 80076d8:	4630      	mov	r0, r6
 80076da:	f000 f82f 	bl	800773c <__malloc_unlock>
 80076de:	f104 000b 	add.w	r0, r4, #11
 80076e2:	1d23      	adds	r3, r4, #4
 80076e4:	f020 0007 	bic.w	r0, r0, #7
 80076e8:	1ac2      	subs	r2, r0, r3
 80076ea:	bf1c      	itt	ne
 80076ec:	1a1b      	subne	r3, r3, r0
 80076ee:	50a3      	strne	r3, [r4, r2]
 80076f0:	e7af      	b.n	8007652 <_malloc_r+0x22>
 80076f2:	6862      	ldr	r2, [r4, #4]
 80076f4:	42a3      	cmp	r3, r4
 80076f6:	bf0c      	ite	eq
 80076f8:	f8c8 2000 	streq.w	r2, [r8]
 80076fc:	605a      	strne	r2, [r3, #4]
 80076fe:	e7eb      	b.n	80076d8 <_malloc_r+0xa8>
 8007700:	4623      	mov	r3, r4
 8007702:	6864      	ldr	r4, [r4, #4]
 8007704:	e7ae      	b.n	8007664 <_malloc_r+0x34>
 8007706:	463c      	mov	r4, r7
 8007708:	687f      	ldr	r7, [r7, #4]
 800770a:	e7b6      	b.n	800767a <_malloc_r+0x4a>
 800770c:	461a      	mov	r2, r3
 800770e:	685b      	ldr	r3, [r3, #4]
 8007710:	42a3      	cmp	r3, r4
 8007712:	d1fb      	bne.n	800770c <_malloc_r+0xdc>
 8007714:	2300      	movs	r3, #0
 8007716:	6053      	str	r3, [r2, #4]
 8007718:	e7de      	b.n	80076d8 <_malloc_r+0xa8>
 800771a:	230c      	movs	r3, #12
 800771c:	6033      	str	r3, [r6, #0]
 800771e:	4630      	mov	r0, r6
 8007720:	f000 f80c 	bl	800773c <__malloc_unlock>
 8007724:	e794      	b.n	8007650 <_malloc_r+0x20>
 8007726:	6005      	str	r5, [r0, #0]
 8007728:	e7d6      	b.n	80076d8 <_malloc_r+0xa8>
 800772a:	bf00      	nop
 800772c:	20000558 	.word	0x20000558

08007730 <__malloc_lock>:
 8007730:	4801      	ldr	r0, [pc, #4]	@ (8007738 <__malloc_lock+0x8>)
 8007732:	f7ff bf0e 	b.w	8007552 <__retarget_lock_acquire_recursive>
 8007736:	bf00      	nop
 8007738:	20000550 	.word	0x20000550

0800773c <__malloc_unlock>:
 800773c:	4801      	ldr	r0, [pc, #4]	@ (8007744 <__malloc_unlock+0x8>)
 800773e:	f7ff bf09 	b.w	8007554 <__retarget_lock_release_recursive>
 8007742:	bf00      	nop
 8007744:	20000550 	.word	0x20000550

08007748 <__sflush_r>:
 8007748:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800774c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007750:	0716      	lsls	r6, r2, #28
 8007752:	4605      	mov	r5, r0
 8007754:	460c      	mov	r4, r1
 8007756:	d454      	bmi.n	8007802 <__sflush_r+0xba>
 8007758:	684b      	ldr	r3, [r1, #4]
 800775a:	2b00      	cmp	r3, #0
 800775c:	dc02      	bgt.n	8007764 <__sflush_r+0x1c>
 800775e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007760:	2b00      	cmp	r3, #0
 8007762:	dd48      	ble.n	80077f6 <__sflush_r+0xae>
 8007764:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007766:	2e00      	cmp	r6, #0
 8007768:	d045      	beq.n	80077f6 <__sflush_r+0xae>
 800776a:	2300      	movs	r3, #0
 800776c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007770:	682f      	ldr	r7, [r5, #0]
 8007772:	6a21      	ldr	r1, [r4, #32]
 8007774:	602b      	str	r3, [r5, #0]
 8007776:	d030      	beq.n	80077da <__sflush_r+0x92>
 8007778:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800777a:	89a3      	ldrh	r3, [r4, #12]
 800777c:	0759      	lsls	r1, r3, #29
 800777e:	d505      	bpl.n	800778c <__sflush_r+0x44>
 8007780:	6863      	ldr	r3, [r4, #4]
 8007782:	1ad2      	subs	r2, r2, r3
 8007784:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007786:	b10b      	cbz	r3, 800778c <__sflush_r+0x44>
 8007788:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800778a:	1ad2      	subs	r2, r2, r3
 800778c:	2300      	movs	r3, #0
 800778e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007790:	6a21      	ldr	r1, [r4, #32]
 8007792:	4628      	mov	r0, r5
 8007794:	47b0      	blx	r6
 8007796:	1c43      	adds	r3, r0, #1
 8007798:	89a3      	ldrh	r3, [r4, #12]
 800779a:	d106      	bne.n	80077aa <__sflush_r+0x62>
 800779c:	6829      	ldr	r1, [r5, #0]
 800779e:	291d      	cmp	r1, #29
 80077a0:	d82b      	bhi.n	80077fa <__sflush_r+0xb2>
 80077a2:	4a2a      	ldr	r2, [pc, #168]	@ (800784c <__sflush_r+0x104>)
 80077a4:	410a      	asrs	r2, r1
 80077a6:	07d6      	lsls	r6, r2, #31
 80077a8:	d427      	bmi.n	80077fa <__sflush_r+0xb2>
 80077aa:	2200      	movs	r2, #0
 80077ac:	6062      	str	r2, [r4, #4]
 80077ae:	04d9      	lsls	r1, r3, #19
 80077b0:	6922      	ldr	r2, [r4, #16]
 80077b2:	6022      	str	r2, [r4, #0]
 80077b4:	d504      	bpl.n	80077c0 <__sflush_r+0x78>
 80077b6:	1c42      	adds	r2, r0, #1
 80077b8:	d101      	bne.n	80077be <__sflush_r+0x76>
 80077ba:	682b      	ldr	r3, [r5, #0]
 80077bc:	b903      	cbnz	r3, 80077c0 <__sflush_r+0x78>
 80077be:	6560      	str	r0, [r4, #84]	@ 0x54
 80077c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80077c2:	602f      	str	r7, [r5, #0]
 80077c4:	b1b9      	cbz	r1, 80077f6 <__sflush_r+0xae>
 80077c6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80077ca:	4299      	cmp	r1, r3
 80077cc:	d002      	beq.n	80077d4 <__sflush_r+0x8c>
 80077ce:	4628      	mov	r0, r5
 80077d0:	f7ff fec2 	bl	8007558 <_free_r>
 80077d4:	2300      	movs	r3, #0
 80077d6:	6363      	str	r3, [r4, #52]	@ 0x34
 80077d8:	e00d      	b.n	80077f6 <__sflush_r+0xae>
 80077da:	2301      	movs	r3, #1
 80077dc:	4628      	mov	r0, r5
 80077de:	47b0      	blx	r6
 80077e0:	4602      	mov	r2, r0
 80077e2:	1c50      	adds	r0, r2, #1
 80077e4:	d1c9      	bne.n	800777a <__sflush_r+0x32>
 80077e6:	682b      	ldr	r3, [r5, #0]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d0c6      	beq.n	800777a <__sflush_r+0x32>
 80077ec:	2b1d      	cmp	r3, #29
 80077ee:	d001      	beq.n	80077f4 <__sflush_r+0xac>
 80077f0:	2b16      	cmp	r3, #22
 80077f2:	d11e      	bne.n	8007832 <__sflush_r+0xea>
 80077f4:	602f      	str	r7, [r5, #0]
 80077f6:	2000      	movs	r0, #0
 80077f8:	e022      	b.n	8007840 <__sflush_r+0xf8>
 80077fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80077fe:	b21b      	sxth	r3, r3
 8007800:	e01b      	b.n	800783a <__sflush_r+0xf2>
 8007802:	690f      	ldr	r7, [r1, #16]
 8007804:	2f00      	cmp	r7, #0
 8007806:	d0f6      	beq.n	80077f6 <__sflush_r+0xae>
 8007808:	0793      	lsls	r3, r2, #30
 800780a:	680e      	ldr	r6, [r1, #0]
 800780c:	bf08      	it	eq
 800780e:	694b      	ldreq	r3, [r1, #20]
 8007810:	600f      	str	r7, [r1, #0]
 8007812:	bf18      	it	ne
 8007814:	2300      	movne	r3, #0
 8007816:	eba6 0807 	sub.w	r8, r6, r7
 800781a:	608b      	str	r3, [r1, #8]
 800781c:	f1b8 0f00 	cmp.w	r8, #0
 8007820:	dde9      	ble.n	80077f6 <__sflush_r+0xae>
 8007822:	6a21      	ldr	r1, [r4, #32]
 8007824:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007826:	4643      	mov	r3, r8
 8007828:	463a      	mov	r2, r7
 800782a:	4628      	mov	r0, r5
 800782c:	47b0      	blx	r6
 800782e:	2800      	cmp	r0, #0
 8007830:	dc08      	bgt.n	8007844 <__sflush_r+0xfc>
 8007832:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007836:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800783a:	81a3      	strh	r3, [r4, #12]
 800783c:	f04f 30ff 	mov.w	r0, #4294967295
 8007840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007844:	4407      	add	r7, r0
 8007846:	eba8 0800 	sub.w	r8, r8, r0
 800784a:	e7e7      	b.n	800781c <__sflush_r+0xd4>
 800784c:	dfbffffe 	.word	0xdfbffffe

08007850 <_fflush_r>:
 8007850:	b538      	push	{r3, r4, r5, lr}
 8007852:	690b      	ldr	r3, [r1, #16]
 8007854:	4605      	mov	r5, r0
 8007856:	460c      	mov	r4, r1
 8007858:	b913      	cbnz	r3, 8007860 <_fflush_r+0x10>
 800785a:	2500      	movs	r5, #0
 800785c:	4628      	mov	r0, r5
 800785e:	bd38      	pop	{r3, r4, r5, pc}
 8007860:	b118      	cbz	r0, 800786a <_fflush_r+0x1a>
 8007862:	6a03      	ldr	r3, [r0, #32]
 8007864:	b90b      	cbnz	r3, 800786a <_fflush_r+0x1a>
 8007866:	f7ff fc8f 	bl	8007188 <__sinit>
 800786a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d0f3      	beq.n	800785a <_fflush_r+0xa>
 8007872:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007874:	07d0      	lsls	r0, r2, #31
 8007876:	d404      	bmi.n	8007882 <_fflush_r+0x32>
 8007878:	0599      	lsls	r1, r3, #22
 800787a:	d402      	bmi.n	8007882 <_fflush_r+0x32>
 800787c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800787e:	f7ff fe68 	bl	8007552 <__retarget_lock_acquire_recursive>
 8007882:	4628      	mov	r0, r5
 8007884:	4621      	mov	r1, r4
 8007886:	f7ff ff5f 	bl	8007748 <__sflush_r>
 800788a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800788c:	07da      	lsls	r2, r3, #31
 800788e:	4605      	mov	r5, r0
 8007890:	d4e4      	bmi.n	800785c <_fflush_r+0xc>
 8007892:	89a3      	ldrh	r3, [r4, #12]
 8007894:	059b      	lsls	r3, r3, #22
 8007896:	d4e1      	bmi.n	800785c <_fflush_r+0xc>
 8007898:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800789a:	f7ff fe5b 	bl	8007554 <__retarget_lock_release_recursive>
 800789e:	e7dd      	b.n	800785c <_fflush_r+0xc>

080078a0 <__swhatbuf_r>:
 80078a0:	b570      	push	{r4, r5, r6, lr}
 80078a2:	460c      	mov	r4, r1
 80078a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078a8:	2900      	cmp	r1, #0
 80078aa:	b096      	sub	sp, #88	@ 0x58
 80078ac:	4615      	mov	r5, r2
 80078ae:	461e      	mov	r6, r3
 80078b0:	da0d      	bge.n	80078ce <__swhatbuf_r+0x2e>
 80078b2:	89a3      	ldrh	r3, [r4, #12]
 80078b4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80078b8:	f04f 0100 	mov.w	r1, #0
 80078bc:	bf14      	ite	ne
 80078be:	2340      	movne	r3, #64	@ 0x40
 80078c0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80078c4:	2000      	movs	r0, #0
 80078c6:	6031      	str	r1, [r6, #0]
 80078c8:	602b      	str	r3, [r5, #0]
 80078ca:	b016      	add	sp, #88	@ 0x58
 80078cc:	bd70      	pop	{r4, r5, r6, pc}
 80078ce:	466a      	mov	r2, sp
 80078d0:	f000 f848 	bl	8007964 <_fstat_r>
 80078d4:	2800      	cmp	r0, #0
 80078d6:	dbec      	blt.n	80078b2 <__swhatbuf_r+0x12>
 80078d8:	9901      	ldr	r1, [sp, #4]
 80078da:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80078de:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80078e2:	4259      	negs	r1, r3
 80078e4:	4159      	adcs	r1, r3
 80078e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80078ea:	e7eb      	b.n	80078c4 <__swhatbuf_r+0x24>

080078ec <__smakebuf_r>:
 80078ec:	898b      	ldrh	r3, [r1, #12]
 80078ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80078f0:	079d      	lsls	r5, r3, #30
 80078f2:	4606      	mov	r6, r0
 80078f4:	460c      	mov	r4, r1
 80078f6:	d507      	bpl.n	8007908 <__smakebuf_r+0x1c>
 80078f8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80078fc:	6023      	str	r3, [r4, #0]
 80078fe:	6123      	str	r3, [r4, #16]
 8007900:	2301      	movs	r3, #1
 8007902:	6163      	str	r3, [r4, #20]
 8007904:	b003      	add	sp, #12
 8007906:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007908:	ab01      	add	r3, sp, #4
 800790a:	466a      	mov	r2, sp
 800790c:	f7ff ffc8 	bl	80078a0 <__swhatbuf_r>
 8007910:	9f00      	ldr	r7, [sp, #0]
 8007912:	4605      	mov	r5, r0
 8007914:	4639      	mov	r1, r7
 8007916:	4630      	mov	r0, r6
 8007918:	f7ff fe8a 	bl	8007630 <_malloc_r>
 800791c:	b948      	cbnz	r0, 8007932 <__smakebuf_r+0x46>
 800791e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007922:	059a      	lsls	r2, r3, #22
 8007924:	d4ee      	bmi.n	8007904 <__smakebuf_r+0x18>
 8007926:	f023 0303 	bic.w	r3, r3, #3
 800792a:	f043 0302 	orr.w	r3, r3, #2
 800792e:	81a3      	strh	r3, [r4, #12]
 8007930:	e7e2      	b.n	80078f8 <__smakebuf_r+0xc>
 8007932:	89a3      	ldrh	r3, [r4, #12]
 8007934:	6020      	str	r0, [r4, #0]
 8007936:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800793a:	81a3      	strh	r3, [r4, #12]
 800793c:	9b01      	ldr	r3, [sp, #4]
 800793e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007942:	b15b      	cbz	r3, 800795c <__smakebuf_r+0x70>
 8007944:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007948:	4630      	mov	r0, r6
 800794a:	f000 f81d 	bl	8007988 <_isatty_r>
 800794e:	b128      	cbz	r0, 800795c <__smakebuf_r+0x70>
 8007950:	89a3      	ldrh	r3, [r4, #12]
 8007952:	f023 0303 	bic.w	r3, r3, #3
 8007956:	f043 0301 	orr.w	r3, r3, #1
 800795a:	81a3      	strh	r3, [r4, #12]
 800795c:	89a3      	ldrh	r3, [r4, #12]
 800795e:	431d      	orrs	r5, r3
 8007960:	81a5      	strh	r5, [r4, #12]
 8007962:	e7cf      	b.n	8007904 <__smakebuf_r+0x18>

08007964 <_fstat_r>:
 8007964:	b538      	push	{r3, r4, r5, lr}
 8007966:	4d07      	ldr	r5, [pc, #28]	@ (8007984 <_fstat_r+0x20>)
 8007968:	2300      	movs	r3, #0
 800796a:	4604      	mov	r4, r0
 800796c:	4608      	mov	r0, r1
 800796e:	4611      	mov	r1, r2
 8007970:	602b      	str	r3, [r5, #0]
 8007972:	f7f9 fff4 	bl	800195e <_fstat>
 8007976:	1c43      	adds	r3, r0, #1
 8007978:	d102      	bne.n	8007980 <_fstat_r+0x1c>
 800797a:	682b      	ldr	r3, [r5, #0]
 800797c:	b103      	cbz	r3, 8007980 <_fstat_r+0x1c>
 800797e:	6023      	str	r3, [r4, #0]
 8007980:	bd38      	pop	{r3, r4, r5, pc}
 8007982:	bf00      	nop
 8007984:	2000054c 	.word	0x2000054c

08007988 <_isatty_r>:
 8007988:	b538      	push	{r3, r4, r5, lr}
 800798a:	4d06      	ldr	r5, [pc, #24]	@ (80079a4 <_isatty_r+0x1c>)
 800798c:	2300      	movs	r3, #0
 800798e:	4604      	mov	r4, r0
 8007990:	4608      	mov	r0, r1
 8007992:	602b      	str	r3, [r5, #0]
 8007994:	f7f9 fff3 	bl	800197e <_isatty>
 8007998:	1c43      	adds	r3, r0, #1
 800799a:	d102      	bne.n	80079a2 <_isatty_r+0x1a>
 800799c:	682b      	ldr	r3, [r5, #0]
 800799e:	b103      	cbz	r3, 80079a2 <_isatty_r+0x1a>
 80079a0:	6023      	str	r3, [r4, #0]
 80079a2:	bd38      	pop	{r3, r4, r5, pc}
 80079a4:	2000054c 	.word	0x2000054c

080079a8 <_sbrk_r>:
 80079a8:	b538      	push	{r3, r4, r5, lr}
 80079aa:	4d06      	ldr	r5, [pc, #24]	@ (80079c4 <_sbrk_r+0x1c>)
 80079ac:	2300      	movs	r3, #0
 80079ae:	4604      	mov	r4, r0
 80079b0:	4608      	mov	r0, r1
 80079b2:	602b      	str	r3, [r5, #0]
 80079b4:	f7f9 fffc 	bl	80019b0 <_sbrk>
 80079b8:	1c43      	adds	r3, r0, #1
 80079ba:	d102      	bne.n	80079c2 <_sbrk_r+0x1a>
 80079bc:	682b      	ldr	r3, [r5, #0]
 80079be:	b103      	cbz	r3, 80079c2 <_sbrk_r+0x1a>
 80079c0:	6023      	str	r3, [r4, #0]
 80079c2:	bd38      	pop	{r3, r4, r5, pc}
 80079c4:	2000054c 	.word	0x2000054c

080079c8 <fmaxf>:
 80079c8:	b508      	push	{r3, lr}
 80079ca:	ed2d 8b02 	vpush	{d8}
 80079ce:	eeb0 8a40 	vmov.f32	s16, s0
 80079d2:	eef0 8a60 	vmov.f32	s17, s1
 80079d6:	f000 f831 	bl	8007a3c <__fpclassifyf>
 80079da:	b930      	cbnz	r0, 80079ea <fmaxf+0x22>
 80079dc:	eeb0 8a68 	vmov.f32	s16, s17
 80079e0:	eeb0 0a48 	vmov.f32	s0, s16
 80079e4:	ecbd 8b02 	vpop	{d8}
 80079e8:	bd08      	pop	{r3, pc}
 80079ea:	eeb0 0a68 	vmov.f32	s0, s17
 80079ee:	f000 f825 	bl	8007a3c <__fpclassifyf>
 80079f2:	2800      	cmp	r0, #0
 80079f4:	d0f4      	beq.n	80079e0 <fmaxf+0x18>
 80079f6:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80079fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079fe:	dded      	ble.n	80079dc <fmaxf+0x14>
 8007a00:	e7ee      	b.n	80079e0 <fmaxf+0x18>

08007a02 <fminf>:
 8007a02:	b508      	push	{r3, lr}
 8007a04:	ed2d 8b02 	vpush	{d8}
 8007a08:	eeb0 8a40 	vmov.f32	s16, s0
 8007a0c:	eef0 8a60 	vmov.f32	s17, s1
 8007a10:	f000 f814 	bl	8007a3c <__fpclassifyf>
 8007a14:	b930      	cbnz	r0, 8007a24 <fminf+0x22>
 8007a16:	eeb0 8a68 	vmov.f32	s16, s17
 8007a1a:	eeb0 0a48 	vmov.f32	s0, s16
 8007a1e:	ecbd 8b02 	vpop	{d8}
 8007a22:	bd08      	pop	{r3, pc}
 8007a24:	eeb0 0a68 	vmov.f32	s0, s17
 8007a28:	f000 f808 	bl	8007a3c <__fpclassifyf>
 8007a2c:	2800      	cmp	r0, #0
 8007a2e:	d0f4      	beq.n	8007a1a <fminf+0x18>
 8007a30:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8007a34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a38:	d5ed      	bpl.n	8007a16 <fminf+0x14>
 8007a3a:	e7ee      	b.n	8007a1a <fminf+0x18>

08007a3c <__fpclassifyf>:
 8007a3c:	ee10 3a10 	vmov	r3, s0
 8007a40:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 8007a44:	d00d      	beq.n	8007a62 <__fpclassifyf+0x26>
 8007a46:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 8007a4a:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 8007a4e:	d30a      	bcc.n	8007a66 <__fpclassifyf+0x2a>
 8007a50:	4b07      	ldr	r3, [pc, #28]	@ (8007a70 <__fpclassifyf+0x34>)
 8007a52:	1e42      	subs	r2, r0, #1
 8007a54:	429a      	cmp	r2, r3
 8007a56:	d908      	bls.n	8007a6a <__fpclassifyf+0x2e>
 8007a58:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 8007a5c:	4258      	negs	r0, r3
 8007a5e:	4158      	adcs	r0, r3
 8007a60:	4770      	bx	lr
 8007a62:	2002      	movs	r0, #2
 8007a64:	4770      	bx	lr
 8007a66:	2004      	movs	r0, #4
 8007a68:	4770      	bx	lr
 8007a6a:	2003      	movs	r0, #3
 8007a6c:	4770      	bx	lr
 8007a6e:	bf00      	nop
 8007a70:	007ffffe 	.word	0x007ffffe

08007a74 <_init>:
 8007a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a76:	bf00      	nop
 8007a78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a7a:	bc08      	pop	{r3}
 8007a7c:	469e      	mov	lr, r3
 8007a7e:	4770      	bx	lr

08007a80 <_fini>:
 8007a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a82:	bf00      	nop
 8007a84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a86:	bc08      	pop	{r3}
 8007a88:	469e      	mov	lr, r3
 8007a8a:	4770      	bx	lr
