
MDC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a6e8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e0  0800a878  0800a878  0000b878  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ad58  0800ad58  0000c1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800ad58  0800ad58  0000bd58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ad60  0800ad60  0000c1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ad60  0800ad60  0000bd60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ad64  0800ad64  0000bd64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800ad68  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c1d4  2**0
                  CONTENTS
 10 .bss          000004fc  200001d4  200001d4  0000c1d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200006d0  200006d0  0000c1d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c1d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   000135fd  00000000  00000000  0000c204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002808  00000000  00000000  0001f801  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011c0  00000000  00000000  00022010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000dd2  00000000  00000000  000231d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d65c  00000000  00000000  00023fa2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015615  00000000  00000000  000415fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ac243  00000000  00000000  00056c13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00102e56  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005c28  00000000  00000000  00102e9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  00108ac4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a860 	.word	0x0800a860

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	0800a860 	.word	0x0800a860

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <canCommandSerialize>:
 *      Author: ryuto
 */

#include "can_data.h"

void canCommandSerialize(CanCommand* data, uint8_t* buffer){
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
 8000bb0:	6039      	str	r1, [r7, #0]
	buffer[0] = data->motor_output
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	461a      	mov	r2, r3
			+ (data->power_off << 1)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	785b      	ldrb	r3, [r3, #1]
 8000bbc:	005b      	lsls	r3, r3, #1
 8000bbe:	b2db      	uxtb	r3, r3
 8000bc0:	4413      	add	r3, r2
 8000bc2:	b2da      	uxtb	r2, r3
			+ (data->mode      << 2)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	789b      	ldrb	r3, [r3, #2]
 8000bc8:	009b      	lsls	r3, r3, #2
 8000bca:	b2db      	uxtb	r3, r3
 8000bcc:	4413      	add	r3, r2
 8000bce:	b2da      	uxtb	r2, r3
			+ (data->pull      << 3)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	78db      	ldrb	r3, [r3, #3]
 8000bd4:	00db      	lsls	r3, r3, #3
 8000bd6:	b2db      	uxtb	r3, r3
 8000bd8:	4413      	add	r3, r2
 8000bda:	b2da      	uxtb	r2, r3
			+ (data->release   << 4);
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	791b      	ldrb	r3, [r3, #4]
 8000be0:	011b      	lsls	r3, r3, #4
 8000be2:	b2db      	uxtb	r3, r3
 8000be4:	4413      	add	r3, r2
 8000be6:	b2da      	uxtb	r2, r3
	buffer[0] = data->motor_output
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	701a      	strb	r2, [r3, #0]
}
 8000bec:	bf00      	nop
 8000bee:	370c      	adds	r7, #12
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr

08000bf8 <canCommandDeserialize>:

void canCommandDeserialize(CanCommand* data, uint8_t* buffer){
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
 8000c00:	6039      	str	r1, [r7, #0]
	data->motor_output = (buffer[0] & 0b00000001) != 0;
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	f003 0301 	and.w	r3, r3, #1
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	bf14      	ite	ne
 8000c0e:	2301      	movne	r3, #1
 8000c10:	2300      	moveq	r3, #0
 8000c12:	b2da      	uxtb	r2, r3
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	701a      	strb	r2, [r3, #0]
	data->power_off    = (buffer[0] & 0b00000010) != 0;
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	f003 0302 	and.w	r3, r3, #2
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	bf14      	ite	ne
 8000c24:	2301      	movne	r3, #1
 8000c26:	2300      	moveq	r3, #0
 8000c28:	b2da      	uxtb	r2, r3
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	705a      	strb	r2, [r3, #1]
	data->mode         = (buffer[0] & 0b00000100) != 0;
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	f003 0304 	and.w	r3, r3, #4
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	bf14      	ite	ne
 8000c3a:	2301      	movne	r3, #1
 8000c3c:	2300      	moveq	r3, #0
 8000c3e:	b2da      	uxtb	r2, r3
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	709a      	strb	r2, [r3, #2]
	data->pull         = (buffer[0] & 0b00001000) != 0;
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	f003 0308 	and.w	r3, r3, #8
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	bf14      	ite	ne
 8000c50:	2301      	movne	r3, #1
 8000c52:	2300      	moveq	r3, #0
 8000c54:	b2da      	uxtb	r2, r3
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	70da      	strb	r2, [r3, #3]
	data->release      = (buffer[0] & 0b00010000) != 0;
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	f003 0310 	and.w	r3, r3, #16
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	bf14      	ite	ne
 8000c66:	2301      	movne	r3, #1
 8000c68:	2300      	moveq	r3, #0
 8000c6a:	b2da      	uxtb	r2, r3
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	711a      	strb	r2, [r3, #4]

}
 8000c70:	bf00      	nop
 8000c72:	370c      	adds	r7, #12
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr

08000c7c <powerResultSerialize>:

void powerResultSerialize(PowerResult* data, uint8_t* buffer){
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
 8000c84:	6039      	str	r1, [r7, #0]
	buffer[0] = (uint8_t)(data->emergency) + ((uint8_t)data->motor_output << 1);
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	461a      	mov	r2, r3
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	785b      	ldrb	r3, [r3, #1]
 8000c90:	005b      	lsls	r3, r3, #1
 8000c92:	b2db      	uxtb	r3, r3
 8000c94:	4413      	add	r3, r2
 8000c96:	b2da      	uxtb	r2, r3
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	701a      	strb	r2, [r3, #0]
	buffer[1] = data->v_bat;
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	3301      	adds	r3, #1
 8000ca0:	687a      	ldr	r2, [r7, #4]
 8000ca2:	7892      	ldrb	r2, [r2, #2]
 8000ca4:	701a      	strb	r2, [r3, #0]
	buffer[2] = data->i_bat;
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	3302      	adds	r3, #2
 8000caa:	687a      	ldr	r2, [r7, #4]
 8000cac:	78d2      	ldrb	r2, [r2, #3]
 8000cae:	701a      	strb	r2, [r3, #0]
}
 8000cb0:	bf00      	nop
 8000cb2:	370c      	adds	r7, #12
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr

08000cbc <powerResultDeserialize>:

void powerResultDeserialize(PowerResult* data, uint8_t* buffer){
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
 8000cc4:	6039      	str	r1, [r7, #0]
	data->emergency = (buffer[0]&0x01)==0x01;
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	f003 0301 	and.w	r3, r3, #1
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	bf14      	ite	ne
 8000cd2:	2301      	movne	r3, #1
 8000cd4:	2300      	moveq	r3, #0
 8000cd6:	b2da      	uxtb	r2, r3
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	701a      	strb	r2, [r3, #0]
	data->motor_output = (buffer[0]&0x02)==0x02;
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	f003 0302 	and.w	r3, r3, #2
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	bf14      	ite	ne
 8000ce8:	2301      	movne	r3, #1
 8000cea:	2300      	moveq	r3, #0
 8000cec:	b2da      	uxtb	r2, r3
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	705a      	strb	r2, [r3, #1]
	data->v_bat = buffer[1];
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	785a      	ldrb	r2, [r3, #1]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	709a      	strb	r2, [r3, #2]
	data->i_bat = buffer[2];
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	789a      	ldrb	r2, [r3, #2]
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	70da      	strb	r2, [r3, #3]
}
 8000d02:	bf00      	nop
 8000d04:	370c      	adds	r7, #12
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr

08000d0e <lockerResultSerialize>:

void lockerResultSerialize(LockerResult* data, uint8_t* buffer){
 8000d0e:	b480      	push	{r7}
 8000d10:	b083      	sub	sp, #12
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	6078      	str	r0, [r7, #4]
 8000d16:	6039      	str	r1, [r7, #0]
	memcpy(buffer,data,1);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	781a      	ldrb	r2, [r3, #0]
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	701a      	strb	r2, [r3, #0]
}
 8000d20:	bf00      	nop
 8000d22:	370c      	adds	r7, #12
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr

08000d2c <lockerResultDeserialize>:
void lockerResultDeserialize(LockerResult* data, uint8_t* buffer){
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
 8000d34:	6039      	str	r1, [r7, #0]
	memcpy(data,buffer,1);
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	781a      	ldrb	r2, [r3, #0]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	701a      	strb	r2, [r3, #0]
}
 8000d3e:	bf00      	nop
 8000d40:	370c      	adds	r7, #12
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
	...

08000d4c <spiInit>:

static SPI_HandleTypeDef* g_hspi;

static bool g_spi_updated = false;

void spiInit(SPI_HandleTypeDef *hspi){
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
	g_hspi = hspi;
 8000d54:	4a06      	ldr	r2, [pc, #24]	@ (8000d70 <spiInit+0x24>)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	6013      	str	r3, [r2, #0]
	HAL_SPI_TransmitReceive_DMA(hspi, g_spi_tx_data, g_spi_rx_data, sizeof(g_spi_tx_data));
 8000d5a:	2310      	movs	r3, #16
 8000d5c:	4a05      	ldr	r2, [pc, #20]	@ (8000d74 <spiInit+0x28>)
 8000d5e:	4906      	ldr	r1, [pc, #24]	@ (8000d78 <spiInit+0x2c>)
 8000d60:	6878      	ldr	r0, [r7, #4]
 8000d62:	f004 fe11 	bl	8005988 <HAL_SPI_TransmitReceive_DMA>
}
 8000d66:	bf00      	nop
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	20000210 	.word	0x20000210
 8000d74:	20000200 	.word	0x20000200
 8000d78:	200001f0 	.word	0x200001f0

08000d7c <getSpiData>:

void getSpiData(Command* cmd){
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
	g_spi_updated = false;
 8000d84:	4b05      	ldr	r3, [pc, #20]	@ (8000d9c <getSpiData+0x20>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	701a      	strb	r2, [r3, #0]
	commandDeserialize(cmd, g_spi_rx_data);
 8000d8a:	4905      	ldr	r1, [pc, #20]	@ (8000da0 <getSpiData+0x24>)
 8000d8c:	6878      	ldr	r0, [r7, #4]
 8000d8e:	f001 fa11 	bl	80021b4 <commandDeserialize>
}
 8000d92:	bf00      	nop
 8000d94:	3708      	adds	r7, #8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	20000214 	.word	0x20000214
 8000da0:	20000200 	.word	0x20000200

08000da4 <setSpiData>:

void setSpiData(Result* res){
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
	resultSerialize(res, g_spi_tx_data);
 8000dac:	4903      	ldr	r1, [pc, #12]	@ (8000dbc <setSpiData+0x18>)
 8000dae:	6878      	ldr	r0, [r7, #4]
 8000db0:	f001 fa39 	bl	8002226 <resultSerialize>
}
 8000db4:	bf00      	nop
 8000db6:	3708      	adds	r7, #8
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	200001f0 	.word	0x200001f0

08000dc0 <isSpiUpdated>:

bool isSpiUpdated(){
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
	return g_spi_updated;
 8000dc4:	4b03      	ldr	r3, [pc, #12]	@ (8000dd4 <isSpiUpdated+0x14>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	20000214 	.word	0x20000214

08000dd8 <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi){
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
	g_spi_updated = true;
 8000de0:	4b06      	ldr	r3, [pc, #24]	@ (8000dfc <HAL_SPI_TxRxCpltCallback+0x24>)
 8000de2:	2201      	movs	r2, #1
 8000de4:	701a      	strb	r2, [r3, #0]
	HAL_SPI_TransmitReceive_DMA(hspi,g_spi_tx_data, g_spi_rx_data, sizeof(g_spi_rx_data));
 8000de6:	2310      	movs	r3, #16
 8000de8:	4a05      	ldr	r2, [pc, #20]	@ (8000e00 <HAL_SPI_TxRxCpltCallback+0x28>)
 8000dea:	4906      	ldr	r1, [pc, #24]	@ (8000e04 <HAL_SPI_TxRxCpltCallback+0x2c>)
 8000dec:	6878      	ldr	r0, [r7, #4]
 8000dee:	f004 fdcb 	bl	8005988 <HAL_SPI_TransmitReceive_DMA>
}
 8000df2:	bf00      	nop
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	20000214 	.word	0x20000214
 8000e00:	20000200 	.word	0x20000200
 8000e04:	200001f0 	.word	0x200001f0

08000e08 <canInit>:
static CAN_FilterTypeDef g_filter;

static bool g_power_updated = false;
static bool g_locker_updated = false;

HAL_StatusTypeDef canInit(CAN_HandleTypeDef *hcan){
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
	g_hcan = hcan;
 8000e10:	4a1f      	ldr	r2, [pc, #124]	@ (8000e90 <canInit+0x88>)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6013      	str	r3, [r2, #0]
	g_filter.FilterIdHigh         = POWER_CAN_ID << 5;                       // フィルターID(上位16ビット)
 8000e16:	4b1f      	ldr	r3, [pc, #124]	@ (8000e94 <canInit+0x8c>)
 8000e18:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000e1c:	601a      	str	r2, [r3, #0]
	g_filter.FilterIdLow          = LOCKER_CAN_ID << 5;                       // フィルターID(下位16ビット)
 8000e1e:	4b1d      	ldr	r3, [pc, #116]	@ (8000e94 <canInit+0x8c>)
 8000e20:	f44f 42c0 	mov.w	r2, #24576	@ 0x6000
 8000e24:	605a      	str	r2, [r3, #4]
	g_filter.FilterScale          = CAN_FILTERSCALE_16BIT;    // フィルタースケール
 8000e26:	4b1b      	ldr	r3, [pc, #108]	@ (8000e94 <canInit+0x8c>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	61da      	str	r2, [r3, #28]
	g_filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;         // フィルターに割り当てるFIFO
 8000e2c:	4b19      	ldr	r3, [pc, #100]	@ (8000e94 <canInit+0x8c>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	611a      	str	r2, [r3, #16]
	g_filter.FilterBank           = 0;                        // フィルターバンクNo
 8000e32:	4b18      	ldr	r3, [pc, #96]	@ (8000e94 <canInit+0x8c>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	615a      	str	r2, [r3, #20]
	g_filter.FilterMode           = CAN_FILTERMODE_IDLIST;    // フィルターモード
 8000e38:	4b16      	ldr	r3, [pc, #88]	@ (8000e94 <canInit+0x8c>)
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	619a      	str	r2, [r3, #24]
	g_filter.SlaveStartFilterBank = 14;                       // スレーブCANの開始フィルターバンクNo
 8000e3e:	4b15      	ldr	r3, [pc, #84]	@ (8000e94 <canInit+0x8c>)
 8000e40:	220e      	movs	r2, #14
 8000e42:	625a      	str	r2, [r3, #36]	@ 0x24
	g_filter.FilterActivation     = ENABLE;                   // フィルター無効／有効
 8000e44:	4b13      	ldr	r3, [pc, #76]	@ (8000e94 <canInit+0x8c>)
 8000e46:	2201      	movs	r2, #1
 8000e48:	621a      	str	r2, [r3, #32]
	HAL_CAN_Stop(hcan);
 8000e4a:	6878      	ldr	r0, [r7, #4]
 8000e4c:	f002 f863 	bl	8002f16 <HAL_CAN_Stop>
	if (HAL_CAN_Start(hcan) != HAL_OK){
 8000e50:	6878      	ldr	r0, [r7, #4]
 8000e52:	f002 f81c 	bl	8002e8e <HAL_CAN_Start>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <canInit+0x58>
		return HAL_ERROR;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	e012      	b.n	8000e86 <canInit+0x7e>
	}
	if (HAL_CAN_ConfigFilter(hcan, &g_filter) != HAL_OK){
 8000e60:	490c      	ldr	r1, [pc, #48]	@ (8000e94 <canInit+0x8c>)
 8000e62:	6878      	ldr	r0, [r7, #4]
 8000e64:	f001 ff49 	bl	8002cfa <HAL_CAN_ConfigFilter>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <canInit+0x6a>
		return HAL_ERROR;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	e009      	b.n	8000e86 <canInit+0x7e>
	}
	if (HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK){
 8000e72:	2102      	movs	r1, #2
 8000e74:	6878      	ldr	r0, [r7, #4]
 8000e76:	f002 fabe 	bl	80033f6 <HAL_CAN_ActivateNotification>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <canInit+0x7c>
		return HAL_ERROR;
 8000e80:	2301      	movs	r3, #1
 8000e82:	e000      	b.n	8000e86 <canInit+0x7e>
	}
	return HAL_OK;
 8000e84:	2300      	movs	r3, #0
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3708      	adds	r7, #8
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	20000224 	.word	0x20000224
 8000e94:	20000228 	.word	0x20000228

08000e98 <getPowerCanData>:

void getPowerCanData(PowerResult* res){
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
	g_power_updated = false;
 8000ea0:	4b05      	ldr	r3, [pc, #20]	@ (8000eb8 <getPowerCanData+0x20>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	701a      	strb	r2, [r3, #0]
	powerResultDeserialize(res, g_power_rx_data);
 8000ea6:	4905      	ldr	r1, [pc, #20]	@ (8000ebc <getPowerCanData+0x24>)
 8000ea8:	6878      	ldr	r0, [r7, #4]
 8000eaa:	f7ff ff07 	bl	8000cbc <powerResultDeserialize>
}
 8000eae:	bf00      	nop
 8000eb0:	3708      	adds	r7, #8
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	20000250 	.word	0x20000250
 8000ebc:	2000021c 	.word	0x2000021c

08000ec0 <setCanData>:

void setCanData(CanCommand* cmd){
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
	canCommandSerialize(cmd, g_tx_data);
 8000ec8:	4903      	ldr	r1, [pc, #12]	@ (8000ed8 <setCanData+0x18>)
 8000eca:	6878      	ldr	r0, [r7, #4]
 8000ecc:	f7ff fe6c 	bl	8000ba8 <canCommandSerialize>
}
 8000ed0:	bf00      	nop
 8000ed2:	3708      	adds	r7, #8
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	20000218 	.word	0x20000218

08000edc <isPowerUpdated>:

bool isPowerUpdated(){
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
	return g_power_updated;
 8000ee0:	4b03      	ldr	r3, [pc, #12]	@ (8000ef0 <isPowerUpdated+0x14>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	20000250 	.word	0x20000250

08000ef4 <sendCanData>:

void sendCanData(){
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b08a      	sub	sp, #40	@ 0x28
 8000ef8:	af00      	add	r7, sp, #0
	CAN_TxHeaderTypeDef TxHeader;
	uint32_t TxMailbox;
	uint8_t data[8];
	if(0 < HAL_CAN_GetTxMailboxesFreeLevel(g_hcan)){
 8000efa:	4b14      	ldr	r3, [pc, #80]	@ (8000f4c <sendCanData+0x58>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4618      	mov	r0, r3
 8000f00:	f002 f922 	bl	8003148 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d01c      	beq.n	8000f44 <sendCanData+0x50>
	    TxHeader.StdId = MDC_CAN_ID;                 // CAN ID
 8000f0a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f0e:	613b      	str	r3, [r7, #16]
	    TxHeader.RTR = CAN_RTR_DATA;            // フレームタイプはデータフレーム
 8000f10:	2300      	movs	r3, #0
 8000f12:	61fb      	str	r3, [r7, #28]
	    TxHeader.IDE = CAN_ID_STD;              // 標準ID(11ﾋﾞｯﾄ)
 8000f14:	2300      	movs	r3, #0
 8000f16:	61bb      	str	r3, [r7, #24]
	    TxHeader.DLC = CAN_COMMAND_BUFFER_SIZE;                       // データ長は8バイトに
 8000f18:	2301      	movs	r3, #1
 8000f1a:	623b      	str	r3, [r7, #32]
	    TxHeader.TransmitGlobalTime = DISABLE;  // ???
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	    memcpy(data,g_tx_data,sizeof(g_tx_data));
 8000f22:	4b0b      	ldr	r3, [pc, #44]	@ (8000f50 <sendCanData+0x5c>)
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	713b      	strb	r3, [r7, #4]
	    if(HAL_CAN_AddTxMessage(g_hcan, &TxHeader, data, &TxMailbox) != HAL_OK) Error_Handler();
 8000f28:	4b08      	ldr	r3, [pc, #32]	@ (8000f4c <sendCanData+0x58>)
 8000f2a:	6818      	ldr	r0, [r3, #0]
 8000f2c:	f107 030c 	add.w	r3, r7, #12
 8000f30:	1d3a      	adds	r2, r7, #4
 8000f32:	f107 0110 	add.w	r1, r7, #16
 8000f36:	f002 f837 	bl	8002fa8 <HAL_CAN_AddTxMessage>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <sendCanData+0x50>
 8000f40:	f001 f910 	bl	8002164 <Error_Handler>
	}
}
 8000f44:	bf00      	nop
 8000f46:	3728      	adds	r7, #40	@ 0x28
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	20000224 	.word	0x20000224
 8000f50:	20000218 	.word	0x20000218

08000f54 <getLockerCanData>:

void getLockerCanData(LockerResult* res){
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
	g_locker_updated = false;
 8000f5c:	4b05      	ldr	r3, [pc, #20]	@ (8000f74 <getLockerCanData+0x20>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	701a      	strb	r2, [r3, #0]
	lockerResultDeserialize(res, g_locker_rx_data);
 8000f62:	4905      	ldr	r1, [pc, #20]	@ (8000f78 <getLockerCanData+0x24>)
 8000f64:	6878      	ldr	r0, [r7, #4]
 8000f66:	f7ff fee1 	bl	8000d2c <lockerResultDeserialize>
}
 8000f6a:	bf00      	nop
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	20000251 	.word	0x20000251
 8000f78:	20000220 	.word	0x20000220

08000f7c <isLockerUpdated>:

bool isLockerUpdated(){
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
		return g_locker_updated;
 8000f80:	4b03      	ldr	r3, [pc, #12]	@ (8000f90 <isLockerUpdated+0x14>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	20000251 	.word	0x20000251

08000f94 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b08c      	sub	sp, #48	@ 0x30
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
    CAN_RxHeaderTypeDef RxHeader;
    uint8_t data[8];
    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, data) == HAL_OK)
 8000f9c:	f107 0308 	add.w	r3, r7, #8
 8000fa0:	f107 0210 	add.w	r2, r7, #16
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	6878      	ldr	r0, [r7, #4]
 8000fa8:	f002 f903 	bl	80031b2 <HAL_CAN_GetRxMessage>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d120      	bne.n	8000ff4 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>
    {
    	uint32_t id = (RxHeader.IDE == CAN_ID_STD)? RxHeader.StdId : RxHeader.ExtId;
 8000fb2:	69bb      	ldr	r3, [r7, #24]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d101      	bne.n	8000fbc <HAL_CAN_RxFifo0MsgPendingCallback+0x28>
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	e000      	b.n	8000fbe <HAL_CAN_RxFifo0MsgPendingCallback+0x2a>
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    	if(id == POWER_CAN_ID){
 8000fc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000fc2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000fc6:	d10b      	bne.n	8000fe0 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>
			g_power_updated = true;
 8000fc8:	4b0c      	ldr	r3, [pc, #48]	@ (8000ffc <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 8000fca:	2201      	movs	r2, #1
 8000fcc:	701a      	strb	r2, [r3, #0]
			memcpy(g_power_rx_data,data,sizeof(g_power_rx_data));
 8000fce:	4b0c      	ldr	r3, [pc, #48]	@ (8001000 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 8000fd0:	f107 0208 	add.w	r2, r7, #8
 8000fd4:	6812      	ldr	r2, [r2, #0]
 8000fd6:	4611      	mov	r1, r2
 8000fd8:	8019      	strh	r1, [r3, #0]
 8000fda:	3302      	adds	r3, #2
 8000fdc:	0c12      	lsrs	r2, r2, #16
 8000fde:	701a      	strb	r2, [r3, #0]
		}
    	if(id == LOCKER_CAN_ID){
 8000fe0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000fe2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8000fe6:	d105      	bne.n	8000ff4 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>
    		g_locker_updated = true;
 8000fe8:	4b06      	ldr	r3, [pc, #24]	@ (8001004 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8000fea:	2201      	movs	r2, #1
 8000fec:	701a      	strb	r2, [r3, #0]
    		memcpy(g_locker_rx_data,data,sizeof(g_locker_rx_data));
 8000fee:	7a3a      	ldrb	r2, [r7, #8]
 8000ff0:	4b05      	ldr	r3, [pc, #20]	@ (8001008 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8000ff2:	701a      	strb	r2, [r3, #0]
    	}
    }
}
 8000ff4:	bf00      	nop
 8000ff6:	3730      	adds	r7, #48	@ 0x30
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	20000250 	.word	0x20000250
 8001000:	2000021c 	.word	0x2000021c
 8001004:	20000251 	.word	0x20000251
 8001008:	20000220 	.word	0x20000220

0800100c <isNoError>:
	bool spi_timeout;
	bool power_timeout;
	bool locker_timeout;
}Error;

bool isNoError(Error e){
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	463b      	mov	r3, r7
 8001014:	e883 0003 	stmia.w	r3, {r0, r1}
	return (e.battery == false)
 8001018:	783b      	ldrb	r3, [r7, #0]
 800101a:	f083 0301 	eor.w	r3, r3, #1
 800101e:	b2db      	uxtb	r3, r3
			&& (e.command == false)
			&& (e.speed == false)
			&& (e.spi_timeout == false)
			&& (e.power_timeout == false)
			&& (e.locker_timeout == false);
 8001020:	2b00      	cmp	r3, #0
 8001022:	d01f      	beq.n	8001064 <isNoError+0x58>
			&& (e.command == false)
 8001024:	787b      	ldrb	r3, [r7, #1]
 8001026:	f083 0301 	eor.w	r3, r3, #1
 800102a:	b2db      	uxtb	r3, r3
 800102c:	2b00      	cmp	r3, #0
 800102e:	d019      	beq.n	8001064 <isNoError+0x58>
			&& (e.speed == false)
 8001030:	78bb      	ldrb	r3, [r7, #2]
 8001032:	f083 0301 	eor.w	r3, r3, #1
 8001036:	b2db      	uxtb	r3, r3
 8001038:	2b00      	cmp	r3, #0
 800103a:	d013      	beq.n	8001064 <isNoError+0x58>
			&& (e.spi_timeout == false)
 800103c:	78fb      	ldrb	r3, [r7, #3]
 800103e:	f083 0301 	eor.w	r3, r3, #1
 8001042:	b2db      	uxtb	r3, r3
 8001044:	2b00      	cmp	r3, #0
 8001046:	d00d      	beq.n	8001064 <isNoError+0x58>
			&& (e.power_timeout == false)
 8001048:	793b      	ldrb	r3, [r7, #4]
 800104a:	f083 0301 	eor.w	r3, r3, #1
 800104e:	b2db      	uxtb	r3, r3
 8001050:	2b00      	cmp	r3, #0
 8001052:	d007      	beq.n	8001064 <isNoError+0x58>
			&& (e.locker_timeout == false);
 8001054:	797b      	ldrb	r3, [r7, #5]
 8001056:	f083 0301 	eor.w	r3, r3, #1
 800105a:	b2db      	uxtb	r3, r3
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <isNoError+0x58>
 8001060:	2301      	movs	r3, #1
 8001062:	e000      	b.n	8001066 <isNoError+0x5a>
 8001064:	2300      	movs	r3, #0
 8001066:	f003 0301 	and.w	r3, r3, #1
 800106a:	b2db      	uxtb	r3, r3
}
 800106c:	4618      	mov	r0, r3
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr

08001078 <errorReleaseRequest>:

bool errorReleaseRequest(bool sw){
 8001078:	b480      	push	{r7}
 800107a:	b085      	sub	sp, #20
 800107c:	af00      	add	r7, sp, #0
 800107e:	4603      	mov	r3, r0
 8001080:	71fb      	strb	r3, [r7, #7]
	static bool last_sw = false;
	bool request;
	request = (last_sw == true) && (sw == false);
 8001082:	4b0e      	ldr	r3, [pc, #56]	@ (80010bc <errorReleaseRequest+0x44>)
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d007      	beq.n	800109a <errorReleaseRequest+0x22>
 800108a:	79fb      	ldrb	r3, [r7, #7]
 800108c:	f083 0301 	eor.w	r3, r3, #1
 8001090:	b2db      	uxtb	r3, r3
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <errorReleaseRequest+0x22>
 8001096:	2301      	movs	r3, #1
 8001098:	e000      	b.n	800109c <errorReleaseRequest+0x24>
 800109a:	2300      	movs	r3, #0
 800109c:	73fb      	strb	r3, [r7, #15]
 800109e:	7bfb      	ldrb	r3, [r7, #15]
 80010a0:	f003 0301 	and.w	r3, r3, #1
 80010a4:	73fb      	strb	r3, [r7, #15]
	last_sw = sw;
 80010a6:	4a05      	ldr	r2, [pc, #20]	@ (80010bc <errorReleaseRequest+0x44>)
 80010a8:	79fb      	ldrb	r3, [r7, #7]
 80010aa:	7013      	strb	r3, [r2, #0]
	return request;
 80010ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3714      	adds	r7, #20
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	2000056d 	.word	0x2000056d

080010c0 <HAL_TIM_PeriodElapsedCallback>:



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
	if(htim == &htim6)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	4a0a      	ldr	r2, [pc, #40]	@ (80010f4 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d10c      	bne.n	80010ea <HAL_TIM_PeriodElapsedCallback+0x2a>
	{
		if(g_main_loop_flag){
 80010d0:	4b09      	ldr	r3, [pc, #36]	@ (80010f8 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d003      	beq.n	80010e0 <HAL_TIM_PeriodElapsedCallback+0x20>
			printf("Control cycle is slow\r\n");
 80010d8:	4808      	ldr	r0, [pc, #32]	@ (80010fc <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80010da:	f007 fbfd 	bl	80088d8 <puts>
			g_main_loop_flag = true;
			//printf("send state : %d\r\n",hcan.State);
			sendCanData();
		}
	}
}
 80010de:	e004      	b.n	80010ea <HAL_TIM_PeriodElapsedCallback+0x2a>
			g_main_loop_flag = true;
 80010e0:	4b05      	ldr	r3, [pc, #20]	@ (80010f8 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80010e2:	2201      	movs	r2, #1
 80010e4:	701a      	strb	r2, [r3, #0]
			sendCanData();
 80010e6:	f7ff ff05 	bl	8000ef4 <sendCanData>
}
 80010ea:	bf00      	nop
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	2000044c 	.word	0x2000044c
 80010f8:	2000056c 	.word	0x2000056c
 80010fc:	0800a878 	.word	0x0800a878

08001100 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b0a4      	sub	sp, #144	@ 0x90
 8001104:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001106:	f001 fc73 	bl	80029f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800110a:	f000 fcbd 	bl	8001a88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800110e:	f000 ff85 	bl	800201c <MX_GPIO_Init>
  MX_DMA_Init();
 8001112:	f000 ff5d 	bl	8001fd0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001116:	f000 ff2b 	bl	8001f70 <MX_USART2_UART_Init>
  MX_CAN_Init();
 800111a:	f000 fd09 	bl	8001b30 <MX_CAN_Init>
  MX_SPI1_Init();
 800111e:	f000 fd3d 	bl	8001b9c <MX_SPI1_Init>
  MX_TIM1_Init();
 8001122:	f000 fd73 	bl	8001c0c <MX_TIM1_Init>
  MX_TIM2_Init();
 8001126:	f000 fe0d 	bl	8001d44 <MX_TIM2_Init>
  MX_TIM3_Init();
 800112a:	f000 fe5f 	bl	8001dec <MX_TIM3_Init>
  MX_TIM6_Init();
 800112e:	f000 feb3 	bl	8001e98 <MX_TIM6_Init>
  MX_TIM7_Init();
 8001132:	f000 fee7 	bl	8001f04 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(100);
 8001136:	2064      	movs	r0, #100	@ 0x64
 8001138:	f001 fcc0 	bl	8002abc <HAL_Delay>
  	Error error = {0};
 800113c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	809a      	strh	r2, [r3, #4]
	PIDController pid;
	pid.kp = 5.0f;
 8001146:	4b98      	ldr	r3, [pc, #608]	@ (80013a8 <main+0x2a8>)
 8001148:	62fb      	str	r3, [r7, #44]	@ 0x2c
	pid.ki = 0.0f;
 800114a:	f04f 0300 	mov.w	r3, #0
 800114e:	633b      	str	r3, [r7, #48]	@ 0x30
	pid.kd = 0.0f;
 8001150:	f04f 0300 	mov.w	r3, #0
 8001154:	637b      	str	r3, [r7, #52]	@ 0x34
	pid.kf = 3.0f;
 8001156:	4b95      	ldr	r3, [pc, #596]	@ (80013ac <main+0x2ac>)
 8001158:	63bb      	str	r3, [r7, #56]	@ 0x38
	pid.integral_l = 0.0f;
 800115a:	f04f 0300 	mov.w	r3, #0
 800115e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	pid.integral_r = 0.0f;
 8001160:	f04f 0300 	mov.w	r3, #0
 8001164:	643b      	str	r3, [r7, #64]	@ 0x40
	pid.prev_error_l = 0.0f;
 8001166:	f04f 0300 	mov.w	r3, #0
 800116a:	647b      	str	r3, [r7, #68]	@ 0x44
	pid.prev_error_r = 0.0f;
 800116c:	f04f 0300 	mov.w	r3, #0
 8001170:	64bb      	str	r3, [r7, #72]	@ 0x48
	spiInit(&hspi1);
 8001172:	488f      	ldr	r0, [pc, #572]	@ (80013b0 <main+0x2b0>)
 8001174:	f7ff fdea 	bl	8000d4c <spiInit>
	canInit(&hcan);
 8001178:	488e      	ldr	r0, [pc, #568]	@ (80013b4 <main+0x2b4>)
 800117a:	f7ff fe45 	bl	8000e08 <canInit>
	printf("end state : %d\r\n",hcan.State);
 800117e:	4b8d      	ldr	r3, [pc, #564]	@ (80013b4 <main+0x2b4>)
 8001180:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001184:	b2db      	uxtb	r3, r3
 8001186:	4619      	mov	r1, r3
 8001188:	488b      	ldr	r0, [pc, #556]	@ (80013b8 <main+0x2b8>)
 800118a:	f007 fb3d 	bl	8008808 <iprintf>
	HAL_TIM_Encoder_Start( &htim2, TIM_CHANNEL_ALL );
 800118e:	213c      	movs	r1, #60	@ 0x3c
 8001190:	488a      	ldr	r0, [pc, #552]	@ (80013bc <main+0x2bc>)
 8001192:	f005 fad7 	bl	8006744 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start( &htim3, TIM_CHANNEL_ALL );
 8001196:	213c      	movs	r1, #60	@ 0x3c
 8001198:	4889      	ldr	r0, [pc, #548]	@ (80013c0 <main+0x2c0>)
 800119a:	f005 fad3 	bl	8006744 <HAL_TIM_Encoder_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800119e:	2104      	movs	r1, #4
 80011a0:	4888      	ldr	r0, [pc, #544]	@ (80013c4 <main+0x2c4>)
 80011a2:	f005 f93d 	bl	8006420 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80011a6:	2108      	movs	r1, #8
 80011a8:	4886      	ldr	r0, [pc, #536]	@ (80013c4 <main+0x2c4>)
 80011aa:	f005 f939 	bl	8006420 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start_IT(&htim6);
 80011ae:	4886      	ldr	r0, [pc, #536]	@ (80013c8 <main+0x2c8>)
 80011b0:	f005 f882 	bl	80062b8 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 80011b4:	4885      	ldr	r0, [pc, #532]	@ (80013cc <main+0x2cc>)
 80011b6:	f005 f87f 	bl	80062b8 <HAL_TIM_Base_Start_IT>
	HAL_Delay(100);
 80011ba:	2064      	movs	r0, #100	@ 0x64
 80011bc:	f001 fc7e 	bl	8002abc <HAL_Delay>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	size_t spi_timeout_cnt=0;
 80011c0:	2300      	movs	r3, #0
 80011c2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	size_t power_timeout_cnt=0;
 80011c6:	2300      	movs	r3, #0
 80011c8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
	size_t locker_timeout_cnt = 0;
 80011cc:	2300      	movs	r3, #0
 80011ce:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
	bool control = false;
 80011d2:	2300      	movs	r3, #0
 80011d4:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
	bool wait_release_request = false;
 80011d8:	2300      	movs	r3, #0
 80011da:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  while (1)
  {
  	//wait main_loop_flag
		while(g_main_loop_flag == false){}
 80011de:	bf00      	nop
 80011e0:	4b7b      	ldr	r3, [pc, #492]	@ (80013d0 <main+0x2d0>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	f083 0301 	eor.w	r3, r3, #1
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d1f8      	bne.n	80011e0 <main+0xe0>

		//SPI
		Command command;
		command.can_command.motor_output = false;
 80011ee:	2300      	movs	r3, #0
 80011f0:	763b      	strb	r3, [r7, #24]
		command.can_command.power_off = false;
 80011f2:	2300      	movs	r3, #0
 80011f4:	767b      	strb	r3, [r7, #25]
		command.vel_l = 0.0f;
 80011f6:	f04f 0300 	mov.w	r3, #0
 80011fa:	623b      	str	r3, [r7, #32]
		command.vel_r = 0.0f;
 80011fc:	f04f 0300 	mov.w	r3, #0
 8001200:	627b      	str	r3, [r7, #36]	@ 0x24
		Result result = {0};
 8001202:	463b      	mov	r3, r7
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	605a      	str	r2, [r3, #4]
 800120a:	609a      	str	r2, [r3, #8]
 800120c:	60da      	str	r2, [r3, #12]
 800120e:	611a      	str	r2, [r3, #16]
 8001210:	615a      	str	r2, [r3, #20]
		if(isSpiUpdated()){
 8001212:	f7ff fdd5 	bl	8000dc0 <isSpiUpdated>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d005      	beq.n	8001228 <main+0x128>
			error.spi_timeout = false;
 800121c:	2300      	movs	r3, #0
 800121e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
			spi_timeout_cnt = 0;
 8001222:	2300      	movs	r3, #0
 8001224:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
		}
		if(spi_timeout_cnt++ >= 5) {
 8001228:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800122c:	1c5a      	adds	r2, r3, #1
 800122e:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001232:	2b04      	cmp	r3, #4
 8001234:	d903      	bls.n	800123e <main+0x13e>
			error.spi_timeout = true;
 8001236:	2301      	movs	r3, #1
 8001238:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800123c:	e004      	b.n	8001248 <main+0x148>
		}else{
			getSpiData(&command);
 800123e:	f107 0318 	add.w	r3, r7, #24
 8001242:	4618      	mov	r0, r3
 8001244:	f7ff fd9a 	bl	8000d7c <getSpiData>
		}

		//CAN
		if(isPowerUpdated()) {
 8001248:	f7ff fe48 	bl	8000edc <isPowerUpdated>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d005      	beq.n	800125e <main+0x15e>
			error.power_timeout = false;
 8001252:	2300      	movs	r3, #0
 8001254:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
			power_timeout_cnt = 0;
 8001258:	2300      	movs	r3, #0
 800125a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
		}
		if(power_timeout_cnt++ >= 5) {
 800125e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001262:	1c5a      	adds	r2, r3, #1
 8001264:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001268:	2b04      	cmp	r3, #4
 800126a:	d902      	bls.n	8001272 <main+0x172>
			error.power_timeout = true;
 800126c:	2301      	movs	r3, #1
 800126e:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
		}
		if(error.power_timeout == true) {
 8001272:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8001276:	2b00      	cmp	r3, #0
 8001278:	d006      	beq.n	8001288 <main+0x188>
			canInit(&hcan);
 800127a:	484e      	ldr	r0, [pc, #312]	@ (80013b4 <main+0x2b4>)
 800127c:	f7ff fdc4 	bl	8000e08 <canInit>
			printf("power timeout\r\n");
 8001280:	4854      	ldr	r0, [pc, #336]	@ (80013d4 <main+0x2d4>)
 8001282:	f007 fb29 	bl	80088d8 <puts>
 8001286:	e003      	b.n	8001290 <main+0x190>
		} else {
			getPowerCanData(&result.power_result);
 8001288:	463b      	mov	r3, r7
 800128a:	4618      	mov	r0, r3
 800128c:	f7ff fe04 	bl	8000e98 <getPowerCanData>
		}

		if(isLockerUpdated()) {
 8001290:	f7ff fe74 	bl	8000f7c <isLockerUpdated>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d005      	beq.n	80012a6 <main+0x1a6>
			error.locker_timeout = false;
 800129a:	2300      	movs	r3, #0
 800129c:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
			locker_timeout_cnt = 0;
 80012a0:	2300      	movs	r3, #0
 80012a2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
		}
		if(locker_timeout_cnt++ >= 5) {
 80012a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80012aa:	1c5a      	adds	r2, r3, #1
 80012ac:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 80012b0:	2b04      	cmp	r3, #4
 80012b2:	d902      	bls.n	80012ba <main+0x1ba>
			error.locker_timeout = true;
 80012b4:	2301      	movs	r3, #1
 80012b6:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
		}
		if(error.locker_timeout == true){
 80012ba:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d006      	beq.n	80012d0 <main+0x1d0>
			canInit(&hcan);
 80012c2:	483c      	ldr	r0, [pc, #240]	@ (80013b4 <main+0x2b4>)
 80012c4:	f7ff fda0 	bl	8000e08 <canInit>
			printf("locker timeout\r\n");
 80012c8:	4843      	ldr	r0, [pc, #268]	@ (80013d8 <main+0x2d8>)
 80012ca:	f007 fb05 	bl	80088d8 <puts>
 80012ce:	e004      	b.n	80012da <main+0x1da>
		} else{
			getLockerCanData(&result.locker_result);
 80012d0:	463b      	mov	r3, r7
 80012d2:	3304      	adds	r3, #4
 80012d4:	4618      	mov	r0, r3
 80012d6:	f7ff fe3d 	bl	8000f54 <getLockerCanData>
		}

		command.can_command.power_off = false;
 80012da:	2300      	movs	r3, #0
 80012dc:	767b      	strb	r3, [r7, #25]
		command.can_command.motor_output = false;
 80012de:	2300      	movs	r3, #0
 80012e0:	763b      	strb	r3, [r7, #24]
		command.can_command.mode = false;
 80012e2:	2300      	movs	r3, #0
 80012e4:	76bb      	strb	r3, [r7, #26]
		command.can_command.pull = false;
 80012e6:	2300      	movs	r3, #0
 80012e8:	76fb      	strb	r3, [r7, #27]
		command.can_command.release = false;
 80012ea:	2300      	movs	r3, #0
 80012ec:	773b      	strb	r3, [r7, #28]
		setCanData(&command.can_command);
 80012ee:	f107 0318 	add.w	r3, r7, #24
 80012f2:	4618      	mov	r0, r3
 80012f4:	f7ff fde4 	bl	8000ec0 <setCanData>

		//encoder
		static int last_cnt_l;
		static int last_cnt_r;
		// todo
		int cnt_l = (int16_t)TIM2->CNT;
 80012f8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80012fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012fe:	b21b      	sxth	r3, r3
 8001300:	663b      	str	r3, [r7, #96]	@ 0x60
		int cnt_r = (int16_t)TIM3->CNT;
 8001302:	4b36      	ldr	r3, [pc, #216]	@ (80013dc <main+0x2dc>)
 8001304:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001306:	b21b      	sxth	r3, r3
 8001308:	65fb      	str	r3, [r7, #92]	@ 0x5c

		if(abs(last_cnt_l - cnt_l) > 0x8000){
 800130a:	4b35      	ldr	r3, [pc, #212]	@ (80013e0 <main+0x2e0>)
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	2b00      	cmp	r3, #0
 8001314:	bfb8      	it	lt
 8001316:	425b      	neglt	r3, r3
 8001318:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800131c:	dd26      	ble.n	800136c <main+0x26c>
			if (last_cnt_l > 0 && cnt_l < 0 && (last_cnt_l - cnt_l) > 0){
 800131e:	4b30      	ldr	r3, [pc, #192]	@ (80013e0 <main+0x2e0>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	2b00      	cmp	r3, #0
 8001324:	dd0f      	ble.n	8001346 <main+0x246>
 8001326:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001328:	2b00      	cmp	r3, #0
 800132a:	da0c      	bge.n	8001346 <main+0x246>
 800132c:	4b2c      	ldr	r3, [pc, #176]	@ (80013e0 <main+0x2e0>)
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001332:	1ad3      	subs	r3, r2, r3
 8001334:	2b00      	cmp	r3, #0
 8001336:	dd06      	ble.n	8001346 <main+0x246>
				last_cnt_l -= 0x10000; //オーバーフロー
 8001338:	4b29      	ldr	r3, [pc, #164]	@ (80013e0 <main+0x2e0>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
 8001340:	4a27      	ldr	r2, [pc, #156]	@ (80013e0 <main+0x2e0>)
 8001342:	6013      	str	r3, [r2, #0]
 8001344:	e012      	b.n	800136c <main+0x26c>
			}
			else if (last_cnt_l < 0 && cnt_l > 0 && (last_cnt_l - cnt_l) < 0){
 8001346:	4b26      	ldr	r3, [pc, #152]	@ (80013e0 <main+0x2e0>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	2b00      	cmp	r3, #0
 800134c:	da0e      	bge.n	800136c <main+0x26c>
 800134e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001350:	2b00      	cmp	r3, #0
 8001352:	dd0b      	ble.n	800136c <main+0x26c>
 8001354:	4b22      	ldr	r3, [pc, #136]	@ (80013e0 <main+0x2e0>)
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800135a:	1ad3      	subs	r3, r2, r3
 800135c:	2b00      	cmp	r3, #0
 800135e:	da05      	bge.n	800136c <main+0x26c>
				last_cnt_l += 0x10000; //アンダーフロー
 8001360:	4b1f      	ldr	r3, [pc, #124]	@ (80013e0 <main+0x2e0>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8001368:	4a1d      	ldr	r2, [pc, #116]	@ (80013e0 <main+0x2e0>)
 800136a:	6013      	str	r3, [r2, #0]
			}
		}
		if(abs(last_cnt_r - cnt_r) > 0x8000){
 800136c:	4b1d      	ldr	r3, [pc, #116]	@ (80013e4 <main+0x2e4>)
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001372:	1ad3      	subs	r3, r2, r3
 8001374:	2b00      	cmp	r3, #0
 8001376:	bfb8      	it	lt
 8001378:	425b      	neglt	r3, r3
 800137a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800137e:	dd46      	ble.n	800140e <main+0x30e>
			if (last_cnt_r > 0 && cnt_r < 0 && (last_cnt_r - cnt_r) > 0){
 8001380:	4b18      	ldr	r3, [pc, #96]	@ (80013e4 <main+0x2e4>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2b00      	cmp	r3, #0
 8001386:	dd2f      	ble.n	80013e8 <main+0x2e8>
 8001388:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800138a:	2b00      	cmp	r3, #0
 800138c:	da2c      	bge.n	80013e8 <main+0x2e8>
 800138e:	4b15      	ldr	r3, [pc, #84]	@ (80013e4 <main+0x2e4>)
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	2b00      	cmp	r3, #0
 8001398:	dd26      	ble.n	80013e8 <main+0x2e8>
				last_cnt_r -= 0x10000; //オーバーフロー
 800139a:	4b12      	ldr	r3, [pc, #72]	@ (80013e4 <main+0x2e4>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
 80013a2:	4a10      	ldr	r2, [pc, #64]	@ (80013e4 <main+0x2e4>)
 80013a4:	6013      	str	r3, [r2, #0]
 80013a6:	e032      	b.n	800140e <main+0x30e>
 80013a8:	40a00000 	.word	0x40a00000
 80013ac:	40400000 	.word	0x40400000
 80013b0:	2000027c 	.word	0x2000027c
 80013b4:	20000254 	.word	0x20000254
 80013b8:	0800a890 	.word	0x0800a890
 80013bc:	200003b4 	.word	0x200003b4
 80013c0:	20000400 	.word	0x20000400
 80013c4:	20000368 	.word	0x20000368
 80013c8:	2000044c 	.word	0x2000044c
 80013cc:	20000498 	.word	0x20000498
 80013d0:	2000056c 	.word	0x2000056c
 80013d4:	0800a8a4 	.word	0x0800a8a4
 80013d8:	0800a8b4 	.word	0x0800a8b4
 80013dc:	40000400 	.word	0x40000400
 80013e0:	20000570 	.word	0x20000570
 80013e4:	20000574 	.word	0x20000574
			}
			else if (last_cnt_r < 0 && cnt_r > 0 && (last_cnt_r - cnt_r) < 0){
 80013e8:	4bac      	ldr	r3, [pc, #688]	@ (800169c <main+0x59c>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	da0e      	bge.n	800140e <main+0x30e>
 80013f0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	dd0b      	ble.n	800140e <main+0x30e>
 80013f6:	4ba9      	ldr	r3, [pc, #676]	@ (800169c <main+0x59c>)
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	2b00      	cmp	r3, #0
 8001400:	da05      	bge.n	800140e <main+0x30e>
				last_cnt_r += 0x10000; //アンダーフロー
 8001402:	4ba6      	ldr	r3, [pc, #664]	@ (800169c <main+0x59c>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 800140a:	4aa4      	ldr	r2, [pc, #656]	@ (800169c <main+0x59c>)
 800140c:	6013      	str	r3, [r2, #0]
			}
		}
		float vel_l = ((float) (cnt_l - last_cnt_l) * ENC_TO_TIRE * RATE) / RESOLUTION;
 800140e:	4ba4      	ldr	r3, [pc, #656]	@ (80016a0 <main+0x5a0>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	ee07 3a90 	vmov	s15, r3
 800141a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800141e:	ed9f 7aa1 	vldr	s14, [pc, #644]	@ 80016a4 <main+0x5a4>
 8001422:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001426:	eddf 7aa0 	vldr	s15, [pc, #640]	@ 80016a8 <main+0x5a8>
 800142a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800142e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001432:	eddf 7a9e 	vldr	s15, [pc, #632]	@ 80016ac <main+0x5ac>
 8001436:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800143a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800143e:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
		float vel_r = -((float) (cnt_r - last_cnt_r) * ENC_TO_TIRE * RATE) / RESOLUTION;
 8001442:	4b96      	ldr	r3, [pc, #600]	@ (800169c <main+0x59c>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	ee07 3a90 	vmov	s15, r3
 800144e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001452:	ed9f 7a94 	vldr	s14, [pc, #592]	@ 80016a4 <main+0x5a4>
 8001456:	ee27 7a87 	vmul.f32	s14, s15, s14
 800145a:	eddf 7a93 	vldr	s15, [pc, #588]	@ 80016a8 <main+0x5a8>
 800145e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001462:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001466:	eef1 6a67 	vneg.f32	s13, s15
 800146a:	eddf 7a90 	vldr	s15, [pc, #576]	@ 80016ac <main+0x5ac>
 800146e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001472:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001476:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
		last_cnt_l = cnt_l;
 800147a:	4a89      	ldr	r2, [pc, #548]	@ (80016a0 <main+0x5a0>)
 800147c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800147e:	6013      	str	r3, [r2, #0]
		last_cnt_r = cnt_r;
 8001480:	4a86      	ldr	r2, [pc, #536]	@ (800169c <main+0x59c>)
 8001482:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001484:	6013      	str	r3, [r2, #0]

		//error check //todo 値決定
		if(abs(command.vel_l) > 5.0f) {
 8001486:	edd7 7a08 	vldr	s15, [r7, #32]
 800148a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800148e:	ee17 3a90 	vmov	r3, s15
 8001492:	2b00      	cmp	r3, #0
 8001494:	bfb8      	it	lt
 8001496:	425b      	neglt	r3, r3
 8001498:	ee07 3a90 	vmov	s15, r3
 800149c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014a0:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 80014a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ac:	dd0c      	ble.n	80014c8 <main+0x3c8>
			error.command = true;
 80014ae:	2301      	movs	r3, #1
 80014b0:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
			printf("LEFT_COMMAND_ERROR : %f \r\n",command.vel_l);
 80014b4:	6a3b      	ldr	r3, [r7, #32]
 80014b6:	4618      	mov	r0, r3
 80014b8:	f7ff f846 	bl	8000548 <__aeabi_f2d>
 80014bc:	4602      	mov	r2, r0
 80014be:	460b      	mov	r3, r1
 80014c0:	487b      	ldr	r0, [pc, #492]	@ (80016b0 <main+0x5b0>)
 80014c2:	f007 f9a1 	bl	8008808 <iprintf>
 80014c6:	e002      	b.n	80014ce <main+0x3ce>
		} else error.command = false;
 80014c8:	2300      	movs	r3, #0
 80014ca:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

		if(abs(command.vel_r) > 5.0f) {
 80014ce:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80014d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014d6:	ee17 3a90 	vmov	r3, s15
 80014da:	2b00      	cmp	r3, #0
 80014dc:	bfb8      	it	lt
 80014de:	425b      	neglt	r3, r3
 80014e0:	ee07 3a90 	vmov	s15, r3
 80014e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014e8:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 80014ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014f4:	dd0c      	ble.n	8001510 <main+0x410>
			error.command = true;
 80014f6:	2301      	movs	r3, #1
 80014f8:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
			printf("RIGHT_COMMAND_ERROR : %f \r\n",command.vel_r);
 80014fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff f822 	bl	8000548 <__aeabi_f2d>
 8001504:	4602      	mov	r2, r0
 8001506:	460b      	mov	r3, r1
 8001508:	486a      	ldr	r0, [pc, #424]	@ (80016b4 <main+0x5b4>)
 800150a:	f007 f97d 	bl	8008808 <iprintf>
 800150e:	e002      	b.n	8001516 <main+0x416>
		} else error.command = false;
 8001510:	2300      	movs	r3, #0
 8001512:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

		if(abs(vel_l) > 5.0f){
 8001516:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 800151a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800151e:	ee17 3a90 	vmov	r3, s15
 8001522:	2b00      	cmp	r3, #0
 8001524:	bfb8      	it	lt
 8001526:	425b      	neglt	r3, r3
 8001528:	ee07 3a90 	vmov	s15, r3
 800152c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001530:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8001534:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001538:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800153c:	dd0b      	ble.n	8001556 <main+0x456>
			error.speed = true;
 800153e:	2301      	movs	r3, #1
 8001540:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
			printf("LEFT_SPEED_ERROR : %f \r\n",vel_l);
 8001544:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8001546:	f7fe ffff 	bl	8000548 <__aeabi_f2d>
 800154a:	4602      	mov	r2, r0
 800154c:	460b      	mov	r3, r1
 800154e:	485a      	ldr	r0, [pc, #360]	@ (80016b8 <main+0x5b8>)
 8001550:	f007 f95a 	bl	8008808 <iprintf>
 8001554:	e002      	b.n	800155c <main+0x45c>
		} else error.speed = false;
 8001556:	2300      	movs	r3, #0
 8001558:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e

		if(abs(vel_r) > 5.0f){
 800155c:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8001560:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001564:	ee17 3a90 	vmov	r3, s15
 8001568:	2b00      	cmp	r3, #0
 800156a:	bfb8      	it	lt
 800156c:	425b      	neglt	r3, r3
 800156e:	ee07 3a90 	vmov	s15, r3
 8001572:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001576:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800157a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800157e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001582:	dd0b      	ble.n	800159c <main+0x49c>
			error.speed = true;
 8001584:	2301      	movs	r3, #1
 8001586:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
			printf("RIGHT_SPEED_ERROR : %f \r\n",vel_r);
 800158a:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800158c:	f7fe ffdc 	bl	8000548 <__aeabi_f2d>
 8001590:	4602      	mov	r2, r0
 8001592:	460b      	mov	r3, r1
 8001594:	4849      	ldr	r0, [pc, #292]	@ (80016bc <main+0x5bc>)
 8001596:	f007 f937 	bl	8008808 <iprintf>
 800159a:	e002      	b.n	80015a2 <main+0x4a2>
		} else error.speed = false;
 800159c:	2300      	movs	r3, #0
 800159e:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e

		if(result.power_result.i_bat > 80){
 80015a2:	78fb      	ldrb	r3, [r7, #3]
 80015a4:	2b50      	cmp	r3, #80	@ 0x50
 80015a6:	d908      	bls.n	80015ba <main+0x4ba>
			error.battery = true;
 80015a8:	2301      	movs	r3, #1
 80015aa:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
			printf("OVER_CURRENT_ERROR : %d \r\n",result.power_result.i_bat);
 80015ae:	78fb      	ldrb	r3, [r7, #3]
 80015b0:	4619      	mov	r1, r3
 80015b2:	4843      	ldr	r0, [pc, #268]	@ (80016c0 <main+0x5c0>)
 80015b4:	f007 f928 	bl	8008808 <iprintf>
 80015b8:	e002      	b.n	80015c0 <main+0x4c0>
		} else error.battery = false;
 80015ba:	2300      	movs	r3, #0
 80015bc:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
			static size_t n=0;
			if( n++ >10){
				error.battery = true;
				printf("OVER_VOLTAGE_ERROR : %d \r\n",result.power_result.v_bat);
			}else n=0;
		} else error.battery = false;
 80015c0:	2300      	movs	r3, #0
 80015c2:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c

		if(result.power_result.v_bat < 100){
 80015c6:	78bb      	ldrb	r3, [r7, #2]
 80015c8:	2b63      	cmp	r3, #99	@ 0x63
 80015ca:	d813      	bhi.n	80015f4 <main+0x4f4>
			static size_t n=0;
			if( n++ >10){
 80015cc:	4b3d      	ldr	r3, [pc, #244]	@ (80016c4 <main+0x5c4>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	1c5a      	adds	r2, r3, #1
 80015d2:	493c      	ldr	r1, [pc, #240]	@ (80016c4 <main+0x5c4>)
 80015d4:	600a      	str	r2, [r1, #0]
 80015d6:	2b0a      	cmp	r3, #10
 80015d8:	d908      	bls.n	80015ec <main+0x4ec>
				error.battery = true;
 80015da:	2301      	movs	r3, #1
 80015dc:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
				printf("UNDER_VOLTAGE_ERROR : %d \r\n",result.power_result.v_bat);
 80015e0:	78bb      	ldrb	r3, [r7, #2]
 80015e2:	4619      	mov	r1, r3
 80015e4:	4838      	ldr	r0, [pc, #224]	@ (80016c8 <main+0x5c8>)
 80015e6:	f007 f90f 	bl	8008808 <iprintf>
 80015ea:	e006      	b.n	80015fa <main+0x4fa>
			}
			else n=0;
 80015ec:	4b35      	ldr	r3, [pc, #212]	@ (80016c4 <main+0x5c4>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	601a      	str	r2, [r3, #0]
 80015f2:	e002      	b.n	80015fa <main+0x4fa>
		} else error.battery = false;
 80015f4:	2300      	movs	r3, #0
 80015f6:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c

		//エラー解除
		if (wait_release_request == true && isNoError(error) == true) {
 80015fa:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d01d      	beq.n	800163e <main+0x53e>
 8001602:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001606:	e893 0003 	ldmia.w	r3, {r0, r1}
 800160a:	f7ff fcff 	bl	800100c <isNoError>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d014      	beq.n	800163e <main+0x53e>
			if (errorReleaseRequest(result.power_result.emergency)) {
 8001614:	783b      	ldrb	r3, [r7, #0]
 8001616:	4618      	mov	r0, r3
 8001618:	f7ff fd2e 	bl	8001078 <errorReleaseRequest>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d006      	beq.n	8001630 <main+0x530>
				control = true;
 8001622:	2301      	movs	r3, #1
 8001624:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
				wait_release_request = false;
 8001628:	2300      	movs	r3, #0
 800162a:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
 800162e:	e006      	b.n	800163e <main+0x53e>
			} else {
				control = false;
 8001630:	2300      	movs	r3, #0
 8001632:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
				HAL_GPIO_TogglePin(Nucleo_LED_GPIO_Port, Nucleo_LED_Pin); //LED
 8001636:	2108      	movs	r1, #8
 8001638:	4824      	ldr	r0, [pc, #144]	@ (80016cc <main+0x5cc>)
 800163a:	f002 fd63 	bl	8004104 <HAL_GPIO_TogglePin>
				//printf("wait for Release Request\r\n");
			}
		}

		//コントロール不可
		if(isNoError(error) != true){
 800163e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001642:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001646:	f7ff fce1 	bl	800100c <isNoError>
 800164a:	4603      	mov	r3, r0
 800164c:	f083 0301 	eor.w	r3, r3, #1
 8001650:	b2db      	uxtb	r3, r3
 8001652:	2b00      	cmp	r3, #0
 8001654:	d00a      	beq.n	800166c <main+0x56c>
			control = false;
 8001656:	2300      	movs	r3, #0
 8001658:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
			wait_release_request = true;
 800165c:	2301      	movs	r3, #1
 800165e:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
			HAL_GPIO_WritePin(Nucleo_LED_GPIO_Port, Nucleo_LED_Pin, false); //LED
 8001662:	2200      	movs	r2, #0
 8001664:	2108      	movs	r1, #8
 8001666:	4819      	ldr	r0, [pc, #100]	@ (80016cc <main+0x5cc>)
 8001668:	f002 fd34 	bl	80040d4 <HAL_GPIO_WritePin>
		}
		if(result.power_result.emergency == true){
 800166c:	783b      	ldrb	r3, [r7, #0]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d006      	beq.n	8001680 <main+0x580>
			control = false;
 8001672:	2300      	movs	r3, #0
 8001674:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
			printf("EMERGENCY SWITCH IS PUSHED \r\n");
 8001678:	4815      	ldr	r0, [pc, #84]	@ (80016d0 <main+0x5d0>)
 800167a:	f007 f92d 	bl	80088d8 <puts>
 800167e:	e03a      	b.n	80016f6 <main+0x5f6>
		}
		else if(result.power_result.motor_output == false){
 8001680:	787b      	ldrb	r3, [r7, #1]
 8001682:	f083 0301 	eor.w	r3, r3, #1
 8001686:	b2db      	uxtb	r3, r3
 8001688:	2b00      	cmp	r3, #0
 800168a:	d025      	beq.n	80016d8 <main+0x5d8>
			control = false;
 800168c:	2300      	movs	r3, #0
 800168e:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
			printf("MOTOR DRIVER IS NOT ACTIVE \r\n");
 8001692:	4810      	ldr	r0, [pc, #64]	@ (80016d4 <main+0x5d4>)
 8001694:	f007 f920 	bl	80088d8 <puts>
 8001698:	e02d      	b.n	80016f6 <main+0x5f6>
 800169a:	bf00      	nop
 800169c:	20000574 	.word	0x20000574
 80016a0:	20000570 	.word	0x20000570
 80016a4:	3eb6db6e 	.word	0x3eb6db6e
 80016a8:	00000032 	.word	0x00000032
 80016ac:	00001000 	.word	0x00001000
 80016b0:	0800a8c4 	.word	0x0800a8c4
 80016b4:	0800a8e0 	.word	0x0800a8e0
 80016b8:	0800a8fc 	.word	0x0800a8fc
 80016bc:	0800a918 	.word	0x0800a918
 80016c0:	0800a934 	.word	0x0800a934
 80016c4:	20000578 	.word	0x20000578
 80016c8:	0800a950 	.word	0x0800a950
 80016cc:	48000400 	.word	0x48000400
 80016d0:	0800a96c 	.word	0x0800a96c
 80016d4:	0800a98c 	.word	0x0800a98c
		}
		else if(wait_release_request == false){
 80016d8:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 80016dc:	f083 0301 	eor.w	r3, r3, #1
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d007      	beq.n	80016f6 <main+0x5f6>
			control = true;
 80016e6:	2301      	movs	r3, #1
 80016e8:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
			HAL_GPIO_WritePin(Nucleo_LED_GPIO_Port, Nucleo_LED_Pin, true); //LED
 80016ec:	2201      	movs	r2, #1
 80016ee:	2108      	movs	r1, #8
 80016f0:	48dc      	ldr	r0, [pc, #880]	@ (8001a64 <main+0x964>)
 80016f2:	f002 fcef 	bl	80040d4 <HAL_GPIO_WritePin>
		}

		//PID control
		float volt_l;
		float volt_r;
		if (control) {
 80016f6:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	f000 8127 	beq.w	800194e <main+0x84e>
			float e_l = command.vel_l - vel_l;
 8001700:	ed97 7a08 	vldr	s14, [r7, #32]
 8001704:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8001708:	ee77 7a67 	vsub.f32	s15, s14, s15
 800170c:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
			float e_r = command.vel_r - vel_r;
 8001710:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001714:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8001718:	ee77 7a67 	vsub.f32	s15, s14, s15
 800171c:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
			if(fabsf(e_l)>10.0f) e_l = 0;
 8001720:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8001724:	eef0 7ae7 	vabs.f32	s15, s15
 8001728:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800172c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001730:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001734:	dd02      	ble.n	800173c <main+0x63c>
 8001736:	f04f 0300 	mov.w	r3, #0
 800173a:	677b      	str	r3, [r7, #116]	@ 0x74
			if(fabsf(e_r)>10.0f) e_r = 0;
 800173c:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8001740:	eef0 7ae7 	vabs.f32	s15, s15
 8001744:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001748:	eef4 7ac7 	vcmpe.f32	s15, s14
 800174c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001750:	dd02      	ble.n	8001758 <main+0x658>
 8001752:	f04f 0300 	mov.w	r3, #0
 8001756:	673b      	str	r3, [r7, #112]	@ 0x70
			pid.integral_l += e_l * DT;
 8001758:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 800175c:	eddf 6ac2 	vldr	s13, [pc, #776]	@ 8001a68 <main+0x968>
 8001760:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8001764:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001768:	ee77 7a27 	vadd.f32	s15, s14, s15
 800176c:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
			pid.integral_r += e_r * DT;
 8001770:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8001774:	eddf 6abc 	vldr	s13, [pc, #752]	@ 8001a68 <main+0x968>
 8001778:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 800177c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001780:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001784:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
			pid.integral_l = fmaxf(fminf(pid.integral_l,2.5f),-2.5f);
 8001788:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800178c:	eef0 0a04 	vmov.f32	s1, #4	@ 0x40200000  2.5
 8001790:	eeb0 0a67 	vmov.f32	s0, s15
 8001794:	f009 f82b 	bl	800a7ee <fminf>
 8001798:	eef0 7a40 	vmov.f32	s15, s0
 800179c:	eef8 0a04 	vmov.f32	s1, #132	@ 0xc0200000 -2.5
 80017a0:	eeb0 0a67 	vmov.f32	s0, s15
 80017a4:	f009 f806 	bl	800a7b4 <fmaxf>
 80017a8:	eef0 7a40 	vmov.f32	s15, s0
 80017ac:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
			pid.integral_r = fmaxf(fminf(pid.integral_r,2.5f),-2.5f);
 80017b0:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80017b4:	eef0 0a04 	vmov.f32	s1, #4	@ 0x40200000  2.5
 80017b8:	eeb0 0a67 	vmov.f32	s0, s15
 80017bc:	f009 f817 	bl	800a7ee <fminf>
 80017c0:	eef0 7a40 	vmov.f32	s15, s0
 80017c4:	eef8 0a04 	vmov.f32	s1, #132	@ 0xc0200000 -2.5
 80017c8:	eeb0 0a67 	vmov.f32	s0, s15
 80017cc:	f008 fff2 	bl	800a7b4 <fmaxf>
 80017d0:	eef0 7a40 	vmov.f32	s15, s0
 80017d4:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
			volt_l = pid.kf * command.vel_l + pid.kp * e_l + pid.ki * pid.integral_l + pid.kd * (pid.prev_error_l - e_l) * RATE;
 80017d8:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 80017dc:	edd7 7a08 	vldr	s15, [r7, #32]
 80017e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017e4:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 80017e8:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 80017ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017f4:	edd7 6a0c 	vldr	s13, [r7, #48]	@ 0x30
 80017f8:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80017fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001800:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001804:	edd7 6a0d 	vldr	s13, [r7, #52]	@ 0x34
 8001808:	ed97 6a11 	vldr	s12, [r7, #68]	@ 0x44
 800180c:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8001810:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001814:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001818:	eddf 7a94 	vldr	s15, [pc, #592]	@ 8001a6c <main+0x96c>
 800181c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001820:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001824:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001828:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
			volt_r = pid.kf * command.vel_r + pid.kp * e_r + pid.ki * pid.integral_r + pid.kd * (pid.prev_error_r - e_r) * RATE;
 800182c:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001830:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001834:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001838:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 800183c:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8001840:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001844:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001848:	edd7 6a0c 	vldr	s13, [r7, #48]	@ 0x30
 800184c:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8001850:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001854:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001858:	edd7 6a0d 	vldr	s13, [r7, #52]	@ 0x34
 800185c:	ed97 6a12 	vldr	s12, [r7, #72]	@ 0x48
 8001860:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8001864:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001868:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800186c:	eddf 7a7f 	vldr	s15, [pc, #508]	@ 8001a6c <main+0x96c>
 8001870:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001874:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001878:	ee77 7a27 	vadd.f32	s15, s14, s15
 800187c:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
			pid.prev_error_l = e_l;
 8001880:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001882:	647b      	str	r3, [r7, #68]	@ 0x44
			pid.prev_error_r = e_r;
 8001884:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001886:	64bb      	str	r3, [r7, #72]	@ 0x48
			//線形化 （-0.9から+0.9までの電圧ではタイヤが回らないため、特性が線形に近くなるように調整）
			if(fabsf(volt_l) > 0.1f) volt_l = (volt_l > 0.0f) ? volt_l + 3.0f : volt_l - 3.0f;
 8001888:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 800188c:	eef0 7ae7 	vabs.f32	s15, s15
 8001890:	ed9f 7a77 	vldr	s14, [pc, #476]	@ 8001a70 <main+0x970>
 8001894:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001898:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800189c:	dd15      	ble.n	80018ca <main+0x7ca>
 800189e:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 80018a2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80018a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018aa:	dd06      	ble.n	80018ba <main+0x7ba>
 80018ac:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 80018b0:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 80018b4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80018b8:	e005      	b.n	80018c6 <main+0x7c6>
 80018ba:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 80018be:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 80018c2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80018c6:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
			if(fabsf(volt_r) > 0.1f) volt_r = (volt_r > 0.0f) ? volt_r + 3.0f : volt_r - 3.0f;
 80018ca:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 80018ce:	eef0 7ae7 	vabs.f32	s15, s15
 80018d2:	ed9f 7a67 	vldr	s14, [pc, #412]	@ 8001a70 <main+0x970>
 80018d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018de:	dd15      	ble.n	800190c <main+0x80c>
 80018e0:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 80018e4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80018e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018ec:	dd06      	ble.n	80018fc <main+0x7fc>
 80018ee:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 80018f2:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 80018f6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80018fa:	e005      	b.n	8001908 <main+0x808>
 80018fc:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 8001900:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8001904:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001908:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
			volt_l = fmaxf(fminf(volt_l, 8.0f), -8.0f);
 800190c:	eef2 0a00 	vmov.f32	s1, #32	@ 0x41000000  8.0
 8001910:	ed97 0a1f 	vldr	s0, [r7, #124]	@ 0x7c
 8001914:	f008 ff6b 	bl	800a7ee <fminf>
 8001918:	eef0 7a40 	vmov.f32	s15, s0
 800191c:	eefa 0a00 	vmov.f32	s1, #160	@ 0xc1000000 -8.0
 8001920:	eeb0 0a67 	vmov.f32	s0, s15
 8001924:	f008 ff46 	bl	800a7b4 <fmaxf>
 8001928:	ed87 0a1f 	vstr	s0, [r7, #124]	@ 0x7c
			volt_r = fmaxf(fminf(volt_r, 8.0f), -8.0f);
 800192c:	eef2 0a00 	vmov.f32	s1, #32	@ 0x41000000  8.0
 8001930:	ed97 0a1e 	vldr	s0, [r7, #120]	@ 0x78
 8001934:	f008 ff5b 	bl	800a7ee <fminf>
 8001938:	eef0 7a40 	vmov.f32	s15, s0
 800193c:	eefa 0a00 	vmov.f32	s1, #160	@ 0xc1000000 -8.0
 8001940:	eeb0 0a67 	vmov.f32	s0, s15
 8001944:	f008 ff36 	bl	800a7b4 <fmaxf>
 8001948:	ed87 0a1e 	vstr	s0, [r7, #120]	@ 0x78
 800194c:	e011      	b.n	8001972 <main+0x872>

		}
		else{
			pid.integral_l = 0.0f;
 800194e:	f04f 0300 	mov.w	r3, #0
 8001952:	63fb      	str	r3, [r7, #60]	@ 0x3c
			pid.integral_r = 0.0f;
 8001954:	f04f 0300 	mov.w	r3, #0
 8001958:	643b      	str	r3, [r7, #64]	@ 0x40
			pid.prev_error_l = 0.0f;
 800195a:	f04f 0300 	mov.w	r3, #0
 800195e:	647b      	str	r3, [r7, #68]	@ 0x44
			pid.prev_error_r = 0.0f;
 8001960:	f04f 0300 	mov.w	r3, #0
 8001964:	64bb      	str	r3, [r7, #72]	@ 0x48
			volt_l = 0.0f;
 8001966:	f04f 0300 	mov.w	r3, #0
 800196a:	67fb      	str	r3, [r7, #124]	@ 0x7c
			volt_r = 0.0f;
 800196c:	f04f 0300 	mov.w	r3, #0
 8001970:	67bb      	str	r3, [r7, #120]	@ 0x78
		//PWM
		uint32_t pwm_l;
		uint32_t pwm_r;
		bool dir_l;
		bool dir_r;
		if (control){
 8001972:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8001976:	2b00      	cmp	r3, #0
 8001978:	d03c      	beq.n	80019f4 <main+0x8f4>
			pwm_l = (uint32_t)(MAX_DUTY_CNT * (fabsf(volt_l)/12.0f));
 800197a:	eddf 7a3e 	vldr	s15, [pc, #248]	@ 8001a74 <main+0x974>
 800197e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001982:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 8001986:	eef0 6ae7 	vabs.f32	s13, s15
 800198a:	eeb2 6a08 	vmov.f32	s12, #40	@ 0x41400000  12.0
 800198e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001992:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001996:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800199a:	ee17 3a90 	vmov	r3, s15
 800199e:	66fb      	str	r3, [r7, #108]	@ 0x6c
			pwm_r = (uint32_t)(MAX_DUTY_CNT * (fabsf(volt_r)/12.0f));
 80019a0:	eddf 7a34 	vldr	s15, [pc, #208]	@ 8001a74 <main+0x974>
 80019a4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80019a8:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 80019ac:	eef0 6ae7 	vabs.f32	s13, s15
 80019b0:	eeb2 6a08 	vmov.f32	s12, #40	@ 0x41400000  12.0
 80019b4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80019b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019c0:	ee17 3a90 	vmov	r3, s15
 80019c4:	66bb      	str	r3, [r7, #104]	@ 0x68
			dir_l = (volt_l > 0.0f) ? true : false;
 80019c6:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 80019ca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019d2:	bfcc      	ite	gt
 80019d4:	2301      	movgt	r3, #1
 80019d6:	2300      	movle	r3, #0
 80019d8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			dir_r = (volt_r < 0.0f) ? true : false;
 80019dc:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 80019e0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019e8:	bf4c      	ite	mi
 80019ea:	2301      	movmi	r3, #1
 80019ec:	2300      	movpl	r3, #0
 80019ee:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 80019f2:	e009      	b.n	8001a08 <main+0x908>
		}
		else{
			pwm_l = 0;
 80019f4:	2300      	movs	r3, #0
 80019f6:	66fb      	str	r3, [r7, #108]	@ 0x6c
			pwm_r = 0;
 80019f8:	2300      	movs	r3, #0
 80019fa:	66bb      	str	r3, [r7, #104]	@ 0x68
			dir_l = false;
 80019fc:	2300      	movs	r3, #0
 80019fe:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			dir_r = false;
 8001a02:	2300      	movs	r3, #0
 8001a04:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
		}
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pwm_l);
 8001a08:	4b1b      	ldr	r3, [pc, #108]	@ (8001a78 <main+0x978>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001a0e:	639a      	str	r2, [r3, #56]	@ 0x38
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, pwm_r);
 8001a10:	4b19      	ldr	r3, [pc, #100]	@ (8001a78 <main+0x978>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8001a16:	63da      	str	r2, [r3, #60]	@ 0x3c
		HAL_GPIO_WritePin(DIR_L_GPIO_Port, DIR_L_Pin, dir_l);
 8001a18:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	2102      	movs	r1, #2
 8001a20:	4816      	ldr	r0, [pc, #88]	@ (8001a7c <main+0x97c>)
 8001a22:	f002 fb57 	bl	80040d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DIR_R_GPIO_Port, DIR_R_Pin, dir_r);
 8001a26:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a30:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a34:	f002 fb4e 	bl	80040d4 <HAL_GPIO_WritePin>

		//SPI
		result.vel_l = vel_l;
 8001a38:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001a3a:	60bb      	str	r3, [r7, #8]
		result.vel_r = vel_r;
 8001a3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a3e:	60fb      	str	r3, [r7, #12]
		result.cnt_l = TIM2->CNT;
 8001a40:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001a44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a46:	b29b      	uxth	r3, r3
 8001a48:	823b      	strh	r3, [r7, #16]
		result.cnt_r = TIM3->CNT;
 8001a4a:	4b0d      	ldr	r3, [pc, #52]	@ (8001a80 <main+0x980>)
 8001a4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a4e:	b29b      	uxth	r3, r3
 8001a50:	827b      	strh	r3, [r7, #18]
		setSpiData(&result);
 8001a52:	463b      	mov	r3, r7
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7ff f9a5 	bl	8000da4 <setSpiData>

		//other

		g_main_loop_flag = false;
 8001a5a:	4b0a      	ldr	r3, [pc, #40]	@ (8001a84 <main+0x984>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	701a      	strb	r2, [r3, #0]
  {
 8001a60:	f7ff bbbd 	b.w	80011de <main+0xde>
 8001a64:	48000400 	.word	0x48000400
 8001a68:	3ca3d70a 	.word	0x3ca3d70a
 8001a6c:	00000032 	.word	0x00000032
 8001a70:	3dcccccd 	.word	0x3dcccccd
 8001a74:	00001f3f 	.word	0x00001f3f
 8001a78:	20000368 	.word	0x20000368
 8001a7c:	48001400 	.word	0x48001400
 8001a80:	40000400 	.word	0x40000400
 8001a84:	2000056c 	.word	0x2000056c

08001a88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b096      	sub	sp, #88	@ 0x58
 8001a8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a8e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001a92:	2228      	movs	r2, #40	@ 0x28
 8001a94:	2100      	movs	r1, #0
 8001a96:	4618      	mov	r0, r3
 8001a98:	f006 fffe 	bl	8008a98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a9c:	f107 031c 	add.w	r3, r7, #28
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	601a      	str	r2, [r3, #0]
 8001aa4:	605a      	str	r2, [r3, #4]
 8001aa6:	609a      	str	r2, [r3, #8]
 8001aa8:	60da      	str	r2, [r3, #12]
 8001aaa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001aac:	1d3b      	adds	r3, r7, #4
 8001aae:	2200      	movs	r2, #0
 8001ab0:	601a      	str	r2, [r3, #0]
 8001ab2:	605a      	str	r2, [r3, #4]
 8001ab4:	609a      	str	r2, [r3, #8]
 8001ab6:	60da      	str	r2, [r3, #12]
 8001ab8:	611a      	str	r2, [r3, #16]
 8001aba:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001abc:	2302      	movs	r3, #2
 8001abe:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ac4:	2310      	movs	r3, #16
 8001ac6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001acc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f002 fb31 	bl	8004138 <HAL_RCC_OscConfig>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001adc:	f000 fb42 	bl	8002164 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ae0:	230f      	movs	r3, #15
 8001ae2:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001aec:	2300      	movs	r3, #0
 8001aee:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001af0:	2300      	movs	r3, #0
 8001af2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001af4:	f107 031c 	add.w	r3, r7, #28
 8001af8:	2100      	movs	r1, #0
 8001afa:	4618      	mov	r0, r3
 8001afc:	f003 fb5a 	bl	80051b4 <HAL_RCC_ClockConfig>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001b06:	f000 fb2d 	bl	8002164 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8001b0a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b0e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8001b10:	2300      	movs	r3, #0
 8001b12:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b14:	1d3b      	adds	r3, r7, #4
 8001b16:	4618      	mov	r0, r3
 8001b18:	f003 fd6c 	bl	80055f4 <HAL_RCCEx_PeriphCLKConfig>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d001      	beq.n	8001b26 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001b22:	f000 fb1f 	bl	8002164 <Error_Handler>
  }
}
 8001b26:	bf00      	nop
 8001b28:	3758      	adds	r7, #88	@ 0x58
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
	...

08001b30 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8001b34:	4b17      	ldr	r3, [pc, #92]	@ (8001b94 <MX_CAN_Init+0x64>)
 8001b36:	4a18      	ldr	r2, [pc, #96]	@ (8001b98 <MX_CAN_Init+0x68>)
 8001b38:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 3;
 8001b3a:	4b16      	ldr	r3, [pc, #88]	@ (8001b94 <MX_CAN_Init+0x64>)
 8001b3c:	2203      	movs	r2, #3
 8001b3e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001b40:	4b14      	ldr	r3, [pc, #80]	@ (8001b94 <MX_CAN_Init+0x64>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001b46:	4b13      	ldr	r3, [pc, #76]	@ (8001b94 <MX_CAN_Init+0x64>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 8001b4c:	4b11      	ldr	r3, [pc, #68]	@ (8001b94 <MX_CAN_Init+0x64>)
 8001b4e:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001b52:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 8001b54:	4b0f      	ldr	r3, [pc, #60]	@ (8001b94 <MX_CAN_Init+0x64>)
 8001b56:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 8001b5a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001b5c:	4b0d      	ldr	r3, [pc, #52]	@ (8001b94 <MX_CAN_Init+0x64>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8001b62:	4b0c      	ldr	r3, [pc, #48]	@ (8001b94 <MX_CAN_Init+0x64>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001b68:	4b0a      	ldr	r3, [pc, #40]	@ (8001b94 <MX_CAN_Init+0x64>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8001b6e:	4b09      	ldr	r3, [pc, #36]	@ (8001b94 <MX_CAN_Init+0x64>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001b74:	4b07      	ldr	r3, [pc, #28]	@ (8001b94 <MX_CAN_Init+0x64>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8001b7a:	4b06      	ldr	r3, [pc, #24]	@ (8001b94 <MX_CAN_Init+0x64>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001b80:	4804      	ldr	r0, [pc, #16]	@ (8001b94 <MX_CAN_Init+0x64>)
 8001b82:	f000 ffbf 	bl	8002b04 <HAL_CAN_Init>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d001      	beq.n	8001b90 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8001b8c:	f000 faea 	bl	8002164 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8001b90:	bf00      	nop
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	20000254 	.word	0x20000254
 8001b98:	40006400 	.word	0x40006400

08001b9c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001ba0:	4b18      	ldr	r3, [pc, #96]	@ (8001c04 <MX_SPI1_Init+0x68>)
 8001ba2:	4a19      	ldr	r2, [pc, #100]	@ (8001c08 <MX_SPI1_Init+0x6c>)
 8001ba4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8001ba6:	4b17      	ldr	r3, [pc, #92]	@ (8001c04 <MX_SPI1_Init+0x68>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001bac:	4b15      	ldr	r3, [pc, #84]	@ (8001c04 <MX_SPI1_Init+0x68>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001bb2:	4b14      	ldr	r3, [pc, #80]	@ (8001c04 <MX_SPI1_Init+0x68>)
 8001bb4:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001bb8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bba:	4b12      	ldr	r3, [pc, #72]	@ (8001c04 <MX_SPI1_Init+0x68>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001bc0:	4b10      	ldr	r3, [pc, #64]	@ (8001c04 <MX_SPI1_Init+0x68>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8001bc6:	4b0f      	ldr	r3, [pc, #60]	@ (8001c04 <MX_SPI1_Init+0x68>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001bcc:	4b0d      	ldr	r3, [pc, #52]	@ (8001c04 <MX_SPI1_Init+0x68>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001bd2:	4b0c      	ldr	r3, [pc, #48]	@ (8001c04 <MX_SPI1_Init+0x68>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bd8:	4b0a      	ldr	r3, [pc, #40]	@ (8001c04 <MX_SPI1_Init+0x68>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001bde:	4b09      	ldr	r3, [pc, #36]	@ (8001c04 <MX_SPI1_Init+0x68>)
 8001be0:	2207      	movs	r2, #7
 8001be2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001be4:	4b07      	ldr	r3, [pc, #28]	@ (8001c04 <MX_SPI1_Init+0x68>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001bea:	4b06      	ldr	r3, [pc, #24]	@ (8001c04 <MX_SPI1_Init+0x68>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001bf0:	4804      	ldr	r0, [pc, #16]	@ (8001c04 <MX_SPI1_Init+0x68>)
 8001bf2:	f003 fe25 	bl	8005840 <HAL_SPI_Init>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d001      	beq.n	8001c00 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 8001bfc:	f000 fab2 	bl	8002164 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001c00:	bf00      	nop
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	2000027c 	.word	0x2000027c
 8001c08:	40013000 	.word	0x40013000

08001c0c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b096      	sub	sp, #88	@ 0x58
 8001c10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c12:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001c16:	2200      	movs	r2, #0
 8001c18:	601a      	str	r2, [r3, #0]
 8001c1a:	605a      	str	r2, [r3, #4]
 8001c1c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c1e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001c22:	2200      	movs	r2, #0
 8001c24:	601a      	str	r2, [r3, #0]
 8001c26:	605a      	str	r2, [r3, #4]
 8001c28:	609a      	str	r2, [r3, #8]
 8001c2a:	60da      	str	r2, [r3, #12]
 8001c2c:	611a      	str	r2, [r3, #16]
 8001c2e:	615a      	str	r2, [r3, #20]
 8001c30:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001c32:	1d3b      	adds	r3, r7, #4
 8001c34:	222c      	movs	r2, #44	@ 0x2c
 8001c36:	2100      	movs	r1, #0
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f006 ff2d 	bl	8008a98 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001c3e:	4b3f      	ldr	r3, [pc, #252]	@ (8001d3c <MX_TIM1_Init+0x130>)
 8001c40:	4a3f      	ldr	r2, [pc, #252]	@ (8001d40 <MX_TIM1_Init+0x134>)
 8001c42:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001c44:	4b3d      	ldr	r3, [pc, #244]	@ (8001d3c <MX_TIM1_Init+0x130>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c4a:	4b3c      	ldr	r3, [pc, #240]	@ (8001d3c <MX_TIM1_Init+0x130>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 7999;
 8001c50:	4b3a      	ldr	r3, [pc, #232]	@ (8001d3c <MX_TIM1_Init+0x130>)
 8001c52:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8001c56:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c58:	4b38      	ldr	r3, [pc, #224]	@ (8001d3c <MX_TIM1_Init+0x130>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001c5e:	4b37      	ldr	r3, [pc, #220]	@ (8001d3c <MX_TIM1_Init+0x130>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c64:	4b35      	ldr	r3, [pc, #212]	@ (8001d3c <MX_TIM1_Init+0x130>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001c6a:	4834      	ldr	r0, [pc, #208]	@ (8001d3c <MX_TIM1_Init+0x130>)
 8001c6c:	f004 fb80 	bl	8006370 <HAL_TIM_PWM_Init>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001c76:	f000 fa75 	bl	8002164 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c82:	2300      	movs	r3, #0
 8001c84:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c86:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	482b      	ldr	r0, [pc, #172]	@ (8001d3c <MX_TIM1_Init+0x130>)
 8001c8e:	f005 fb75 	bl	800737c <HAL_TIMEx_MasterConfigSynchronization>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001c98:	f000 fa64 	bl	8002164 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c9c:	2360      	movs	r3, #96	@ 0x60
 8001c9e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cac:	2300      	movs	r3, #0
 8001cae:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001cb8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001cbc:	2204      	movs	r2, #4
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	481e      	ldr	r0, [pc, #120]	@ (8001d3c <MX_TIM1_Init+0x130>)
 8001cc2:	f004 fecf 	bl	8006a64 <HAL_TIM_PWM_ConfigChannel>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d001      	beq.n	8001cd0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001ccc:	f000 fa4a 	bl	8002164 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001cd0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001cd4:	2208      	movs	r2, #8
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	4818      	ldr	r0, [pc, #96]	@ (8001d3c <MX_TIM1_Init+0x130>)
 8001cda:	f004 fec3 	bl	8006a64 <HAL_TIM_PWM_ConfigChannel>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d001      	beq.n	8001ce8 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8001ce4:	f000 fa3e 	bl	8002164 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001cec:	2300      	movs	r3, #0
 8001cee:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001cfc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001d00:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001d02:	2300      	movs	r3, #0
 8001d04:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001d06:	2300      	movs	r3, #0
 8001d08:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001d0a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001d0e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001d10:	2300      	movs	r3, #0
 8001d12:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001d14:	2300      	movs	r3, #0
 8001d16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001d18:	1d3b      	adds	r3, r7, #4
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	4807      	ldr	r0, [pc, #28]	@ (8001d3c <MX_TIM1_Init+0x130>)
 8001d1e:	f005 fb9b 	bl	8007458 <HAL_TIMEx_ConfigBreakDeadTime>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d001      	beq.n	8001d2c <MX_TIM1_Init+0x120>
  {
    Error_Handler();
 8001d28:	f000 fa1c 	bl	8002164 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001d2c:	4803      	ldr	r0, [pc, #12]	@ (8001d3c <MX_TIM1_Init+0x130>)
 8001d2e:	f000 fca5 	bl	800267c <HAL_TIM_MspPostInit>

}
 8001d32:	bf00      	nop
 8001d34:	3758      	adds	r7, #88	@ 0x58
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	20000368 	.word	0x20000368
 8001d40:	40012c00 	.word	0x40012c00

08001d44 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b08c      	sub	sp, #48	@ 0x30
 8001d48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001d4a:	f107 030c 	add.w	r3, r7, #12
 8001d4e:	2224      	movs	r2, #36	@ 0x24
 8001d50:	2100      	movs	r1, #0
 8001d52:	4618      	mov	r0, r3
 8001d54:	f006 fea0 	bl	8008a98 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d58:	463b      	mov	r3, r7
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	601a      	str	r2, [r3, #0]
 8001d5e:	605a      	str	r2, [r3, #4]
 8001d60:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d62:	4b21      	ldr	r3, [pc, #132]	@ (8001de8 <MX_TIM2_Init+0xa4>)
 8001d64:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001d68:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001d6a:	4b1f      	ldr	r3, [pc, #124]	@ (8001de8 <MX_TIM2_Init+0xa4>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d70:	4b1d      	ldr	r3, [pc, #116]	@ (8001de8 <MX_TIM2_Init+0xa4>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001d76:	4b1c      	ldr	r3, [pc, #112]	@ (8001de8 <MX_TIM2_Init+0xa4>)
 8001d78:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d7c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d7e:	4b1a      	ldr	r3, [pc, #104]	@ (8001de8 <MX_TIM2_Init+0xa4>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d84:	4b18      	ldr	r3, [pc, #96]	@ (8001de8 <MX_TIM2_Init+0xa4>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001d92:	2301      	movs	r3, #1
 8001d94:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001d96:	2300      	movs	r3, #0
 8001d98:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001da2:	2301      	movs	r3, #1
 8001da4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001da6:	2300      	movs	r3, #0
 8001da8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001daa:	2300      	movs	r3, #0
 8001dac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001dae:	f107 030c 	add.w	r3, r7, #12
 8001db2:	4619      	mov	r1, r3
 8001db4:	480c      	ldr	r0, [pc, #48]	@ (8001de8 <MX_TIM2_Init+0xa4>)
 8001db6:	f004 fc1f 	bl	80065f8 <HAL_TIM_Encoder_Init>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d001      	beq.n	8001dc4 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001dc0:	f000 f9d0 	bl	8002164 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001dcc:	463b      	mov	r3, r7
 8001dce:	4619      	mov	r1, r3
 8001dd0:	4805      	ldr	r0, [pc, #20]	@ (8001de8 <MX_TIM2_Init+0xa4>)
 8001dd2:	f005 fad3 	bl	800737c <HAL_TIMEx_MasterConfigSynchronization>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d001      	beq.n	8001de0 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001ddc:	f000 f9c2 	bl	8002164 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001de0:	bf00      	nop
 8001de2:	3730      	adds	r7, #48	@ 0x30
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	200003b4 	.word	0x200003b4

08001dec <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b08c      	sub	sp, #48	@ 0x30
 8001df0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001df2:	f107 030c 	add.w	r3, r7, #12
 8001df6:	2224      	movs	r2, #36	@ 0x24
 8001df8:	2100      	movs	r1, #0
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f006 fe4c 	bl	8008a98 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e00:	463b      	mov	r3, r7
 8001e02:	2200      	movs	r2, #0
 8001e04:	601a      	str	r2, [r3, #0]
 8001e06:	605a      	str	r2, [r3, #4]
 8001e08:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001e0a:	4b21      	ldr	r3, [pc, #132]	@ (8001e90 <MX_TIM3_Init+0xa4>)
 8001e0c:	4a21      	ldr	r2, [pc, #132]	@ (8001e94 <MX_TIM3_Init+0xa8>)
 8001e0e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001e10:	4b1f      	ldr	r3, [pc, #124]	@ (8001e90 <MX_TIM3_Init+0xa4>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e16:	4b1e      	ldr	r3, [pc, #120]	@ (8001e90 <MX_TIM3_Init+0xa4>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001e1c:	4b1c      	ldr	r3, [pc, #112]	@ (8001e90 <MX_TIM3_Init+0xa4>)
 8001e1e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e22:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e24:	4b1a      	ldr	r3, [pc, #104]	@ (8001e90 <MX_TIM3_Init+0xa4>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e2a:	4b19      	ldr	r3, [pc, #100]	@ (8001e90 <MX_TIM3_Init+0xa4>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001e30:	2303      	movs	r3, #3
 8001e32:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001e34:	2300      	movs	r3, #0
 8001e36:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001e40:	2300      	movs	r3, #0
 8001e42:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001e44:	2300      	movs	r3, #0
 8001e46:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001e50:	2300      	movs	r3, #0
 8001e52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001e54:	f107 030c 	add.w	r3, r7, #12
 8001e58:	4619      	mov	r1, r3
 8001e5a:	480d      	ldr	r0, [pc, #52]	@ (8001e90 <MX_TIM3_Init+0xa4>)
 8001e5c:	f004 fbcc 	bl	80065f8 <HAL_TIM_Encoder_Init>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001e66:	f000 f97d 	bl	8002164 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e72:	463b      	mov	r3, r7
 8001e74:	4619      	mov	r1, r3
 8001e76:	4806      	ldr	r0, [pc, #24]	@ (8001e90 <MX_TIM3_Init+0xa4>)
 8001e78:	f005 fa80 	bl	800737c <HAL_TIMEx_MasterConfigSynchronization>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001e82:	f000 f96f 	bl	8002164 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001e86:	bf00      	nop
 8001e88:	3730      	adds	r7, #48	@ 0x30
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	20000400 	.word	0x20000400
 8001e94:	40000400 	.word	0x40000400

08001e98 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e9e:	1d3b      	adds	r3, r7, #4
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	601a      	str	r2, [r3, #0]
 8001ea4:	605a      	str	r2, [r3, #4]
 8001ea6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001ea8:	4b14      	ldr	r3, [pc, #80]	@ (8001efc <MX_TIM6_Init+0x64>)
 8001eaa:	4a15      	ldr	r2, [pc, #84]	@ (8001f00 <MX_TIM6_Init+0x68>)
 8001eac:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 19;
 8001eae:	4b13      	ldr	r3, [pc, #76]	@ (8001efc <MX_TIM6_Init+0x64>)
 8001eb0:	2213      	movs	r2, #19
 8001eb2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eb4:	4b11      	ldr	r3, [pc, #68]	@ (8001efc <MX_TIM6_Init+0x64>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 7999;
 8001eba:	4b10      	ldr	r3, [pc, #64]	@ (8001efc <MX_TIM6_Init+0x64>)
 8001ebc:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8001ec0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ec2:	4b0e      	ldr	r3, [pc, #56]	@ (8001efc <MX_TIM6_Init+0x64>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001ec8:	480c      	ldr	r0, [pc, #48]	@ (8001efc <MX_TIM6_Init+0x64>)
 8001eca:	f004 f99d 	bl	8006208 <HAL_TIM_Base_Init>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d001      	beq.n	8001ed8 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001ed4:	f000 f946 	bl	8002164 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001edc:	2300      	movs	r3, #0
 8001ede:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001ee0:	1d3b      	adds	r3, r7, #4
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	4805      	ldr	r0, [pc, #20]	@ (8001efc <MX_TIM6_Init+0x64>)
 8001ee6:	f005 fa49 	bl	800737c <HAL_TIMEx_MasterConfigSynchronization>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d001      	beq.n	8001ef4 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001ef0:	f000 f938 	bl	8002164 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001ef4:	bf00      	nop
 8001ef6:	3710      	adds	r7, #16
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	2000044c 	.word	0x2000044c
 8001f00:	40001000 	.word	0x40001000

08001f04 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b084      	sub	sp, #16
 8001f08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f0a:	1d3b      	adds	r3, r7, #4
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	601a      	str	r2, [r3, #0]
 8001f10:	605a      	str	r2, [r3, #4]
 8001f12:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001f14:	4b14      	ldr	r3, [pc, #80]	@ (8001f68 <MX_TIM7_Init+0x64>)
 8001f16:	4a15      	ldr	r2, [pc, #84]	@ (8001f6c <MX_TIM7_Init+0x68>)
 8001f18:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 19;
 8001f1a:	4b13      	ldr	r3, [pc, #76]	@ (8001f68 <MX_TIM7_Init+0x64>)
 8001f1c:	2213      	movs	r2, #19
 8001f1e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f20:	4b11      	ldr	r3, [pc, #68]	@ (8001f68 <MX_TIM7_Init+0x64>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 7999;
 8001f26:	4b10      	ldr	r3, [pc, #64]	@ (8001f68 <MX_TIM7_Init+0x64>)
 8001f28:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8001f2c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f2e:	4b0e      	ldr	r3, [pc, #56]	@ (8001f68 <MX_TIM7_Init+0x64>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001f34:	480c      	ldr	r0, [pc, #48]	@ (8001f68 <MX_TIM7_Init+0x64>)
 8001f36:	f004 f967 	bl	8006208 <HAL_TIM_Base_Init>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d001      	beq.n	8001f44 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001f40:	f000 f910 	bl	8002164 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f44:	2300      	movs	r3, #0
 8001f46:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001f4c:	1d3b      	adds	r3, r7, #4
 8001f4e:	4619      	mov	r1, r3
 8001f50:	4805      	ldr	r0, [pc, #20]	@ (8001f68 <MX_TIM7_Init+0x64>)
 8001f52:	f005 fa13 	bl	800737c <HAL_TIMEx_MasterConfigSynchronization>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d001      	beq.n	8001f60 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001f5c:	f000 f902 	bl	8002164 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001f60:	bf00      	nop
 8001f62:	3710      	adds	r7, #16
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	20000498 	.word	0x20000498
 8001f6c:	40001400 	.word	0x40001400

08001f70 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f74:	4b14      	ldr	r3, [pc, #80]	@ (8001fc8 <MX_USART2_UART_Init+0x58>)
 8001f76:	4a15      	ldr	r2, [pc, #84]	@ (8001fcc <MX_USART2_UART_Init+0x5c>)
 8001f78:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f7a:	4b13      	ldr	r3, [pc, #76]	@ (8001fc8 <MX_USART2_UART_Init+0x58>)
 8001f7c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001f80:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f82:	4b11      	ldr	r3, [pc, #68]	@ (8001fc8 <MX_USART2_UART_Init+0x58>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f88:	4b0f      	ldr	r3, [pc, #60]	@ (8001fc8 <MX_USART2_UART_Init+0x58>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f8e:	4b0e      	ldr	r3, [pc, #56]	@ (8001fc8 <MX_USART2_UART_Init+0x58>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f94:	4b0c      	ldr	r3, [pc, #48]	@ (8001fc8 <MX_USART2_UART_Init+0x58>)
 8001f96:	220c      	movs	r2, #12
 8001f98:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f9a:	4b0b      	ldr	r3, [pc, #44]	@ (8001fc8 <MX_USART2_UART_Init+0x58>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fa0:	4b09      	ldr	r3, [pc, #36]	@ (8001fc8 <MX_USART2_UART_Init+0x58>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001fa6:	4b08      	ldr	r3, [pc, #32]	@ (8001fc8 <MX_USART2_UART_Init+0x58>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fac:	4b06      	ldr	r3, [pc, #24]	@ (8001fc8 <MX_USART2_UART_Init+0x58>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001fb2:	4805      	ldr	r0, [pc, #20]	@ (8001fc8 <MX_USART2_UART_Init+0x58>)
 8001fb4:	f005 fae6 	bl	8007584 <HAL_UART_Init>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d001      	beq.n	8001fc2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001fbe:	f000 f8d1 	bl	8002164 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001fc2:	bf00      	nop
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	200004e4 	.word	0x200004e4
 8001fcc:	40004400 	.word	0x40004400

08001fd0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001fd6:	4b10      	ldr	r3, [pc, #64]	@ (8002018 <MX_DMA_Init+0x48>)
 8001fd8:	695b      	ldr	r3, [r3, #20]
 8001fda:	4a0f      	ldr	r2, [pc, #60]	@ (8002018 <MX_DMA_Init+0x48>)
 8001fdc:	f043 0301 	orr.w	r3, r3, #1
 8001fe0:	6153      	str	r3, [r2, #20]
 8001fe2:	4b0d      	ldr	r3, [pc, #52]	@ (8002018 <MX_DMA_Init+0x48>)
 8001fe4:	695b      	ldr	r3, [r3, #20]
 8001fe6:	f003 0301 	and.w	r3, r3, #1
 8001fea:	607b      	str	r3, [r7, #4]
 8001fec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001fee:	2200      	movs	r2, #0
 8001ff0:	2100      	movs	r1, #0
 8001ff2:	200c      	movs	r0, #12
 8001ff4:	f001 fd2f 	bl	8003a56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001ff8:	200c      	movs	r0, #12
 8001ffa:	f001 fd48 	bl	8003a8e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001ffe:	2200      	movs	r2, #0
 8002000:	2100      	movs	r1, #0
 8002002:	200d      	movs	r0, #13
 8002004:	f001 fd27 	bl	8003a56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002008:	200d      	movs	r0, #13
 800200a:	f001 fd40 	bl	8003a8e <HAL_NVIC_EnableIRQ>

}
 800200e:	bf00      	nop
 8002010:	3708      	adds	r7, #8
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	40021000 	.word	0x40021000

0800201c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b088      	sub	sp, #32
 8002020:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002022:	f107 030c 	add.w	r3, r7, #12
 8002026:	2200      	movs	r2, #0
 8002028:	601a      	str	r2, [r3, #0]
 800202a:	605a      	str	r2, [r3, #4]
 800202c:	609a      	str	r2, [r3, #8]
 800202e:	60da      	str	r2, [r3, #12]
 8002030:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002032:	4b3f      	ldr	r3, [pc, #252]	@ (8002130 <MX_GPIO_Init+0x114>)
 8002034:	695b      	ldr	r3, [r3, #20]
 8002036:	4a3e      	ldr	r2, [pc, #248]	@ (8002130 <MX_GPIO_Init+0x114>)
 8002038:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800203c:	6153      	str	r3, [r2, #20]
 800203e:	4b3c      	ldr	r3, [pc, #240]	@ (8002130 <MX_GPIO_Init+0x114>)
 8002040:	695b      	ldr	r3, [r3, #20]
 8002042:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002046:	60bb      	str	r3, [r7, #8]
 8002048:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800204a:	4b39      	ldr	r3, [pc, #228]	@ (8002130 <MX_GPIO_Init+0x114>)
 800204c:	695b      	ldr	r3, [r3, #20]
 800204e:	4a38      	ldr	r2, [pc, #224]	@ (8002130 <MX_GPIO_Init+0x114>)
 8002050:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002054:	6153      	str	r3, [r2, #20]
 8002056:	4b36      	ldr	r3, [pc, #216]	@ (8002130 <MX_GPIO_Init+0x114>)
 8002058:	695b      	ldr	r3, [r3, #20]
 800205a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800205e:	607b      	str	r3, [r7, #4]
 8002060:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002062:	4b33      	ldr	r3, [pc, #204]	@ (8002130 <MX_GPIO_Init+0x114>)
 8002064:	695b      	ldr	r3, [r3, #20]
 8002066:	4a32      	ldr	r2, [pc, #200]	@ (8002130 <MX_GPIO_Init+0x114>)
 8002068:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800206c:	6153      	str	r3, [r2, #20]
 800206e:	4b30      	ldr	r3, [pc, #192]	@ (8002130 <MX_GPIO_Init+0x114>)
 8002070:	695b      	ldr	r3, [r3, #20]
 8002072:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002076:	603b      	str	r3, [r7, #0]
 8002078:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR_L_GPIO_Port, DIR_L_Pin, GPIO_PIN_RESET);
 800207a:	2200      	movs	r2, #0
 800207c:	2102      	movs	r1, #2
 800207e:	482d      	ldr	r0, [pc, #180]	@ (8002134 <MX_GPIO_Init+0x118>)
 8002080:	f002 f828 	bl	80040d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR_R_GPIO_Port, DIR_R_Pin, GPIO_PIN_RESET);
 8002084:	2200      	movs	r2, #0
 8002086:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800208a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800208e:	f002 f821 	bl	80040d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Nucleo_LED_GPIO_Port, Nucleo_LED_Pin, GPIO_PIN_RESET);
 8002092:	2200      	movs	r2, #0
 8002094:	2108      	movs	r1, #8
 8002096:	4828      	ldr	r0, [pc, #160]	@ (8002138 <MX_GPIO_Init+0x11c>)
 8002098:	f002 f81c 	bl	80040d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DIR_L_Pin */
  GPIO_InitStruct.Pin = DIR_L_Pin;
 800209c:	2302      	movs	r3, #2
 800209e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020a0:	2301      	movs	r3, #1
 80020a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a4:	2300      	movs	r3, #0
 80020a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020a8:	2300      	movs	r3, #0
 80020aa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DIR_L_GPIO_Port, &GPIO_InitStruct);
 80020ac:	f107 030c 	add.w	r3, r7, #12
 80020b0:	4619      	mov	r1, r3
 80020b2:	4820      	ldr	r0, [pc, #128]	@ (8002134 <MX_GPIO_Init+0x118>)
 80020b4:	f001 fe9c 	bl	8003df0 <HAL_GPIO_Init>

  /*Configure GPIO pin : enc_L_Z_Pin */
  GPIO_InitStruct.Pin = enc_L_Z_Pin;
 80020b8:	2308      	movs	r3, #8
 80020ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020bc:	2300      	movs	r3, #0
 80020be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c0:	2300      	movs	r3, #0
 80020c2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(enc_L_Z_GPIO_Port, &GPIO_InitStruct);
 80020c4:	f107 030c 	add.w	r3, r7, #12
 80020c8:	4619      	mov	r1, r3
 80020ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020ce:	f001 fe8f 	bl	8003df0 <HAL_GPIO_Init>

  /*Configure GPIO pin : enc_R_Z_Pin */
  GPIO_InitStruct.Pin = enc_R_Z_Pin;
 80020d2:	2302      	movs	r3, #2
 80020d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020d6:	2300      	movs	r3, #0
 80020d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020da:	2300      	movs	r3, #0
 80020dc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(enc_R_Z_GPIO_Port, &GPIO_InitStruct);
 80020de:	f107 030c 	add.w	r3, r7, #12
 80020e2:	4619      	mov	r1, r3
 80020e4:	4814      	ldr	r0, [pc, #80]	@ (8002138 <MX_GPIO_Init+0x11c>)
 80020e6:	f001 fe83 	bl	8003df0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIR_R_Pin */
  GPIO_InitStruct.Pin = DIR_R_Pin;
 80020ea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80020ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020f0:	2301      	movs	r3, #1
 80020f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f4:	2300      	movs	r3, #0
 80020f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020f8:	2300      	movs	r3, #0
 80020fa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DIR_R_GPIO_Port, &GPIO_InitStruct);
 80020fc:	f107 030c 	add.w	r3, r7, #12
 8002100:	4619      	mov	r1, r3
 8002102:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002106:	f001 fe73 	bl	8003df0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Nucleo_LED_Pin */
  GPIO_InitStruct.Pin = Nucleo_LED_Pin;
 800210a:	2308      	movs	r3, #8
 800210c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800210e:	2301      	movs	r3, #1
 8002110:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002112:	2300      	movs	r3, #0
 8002114:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002116:	2300      	movs	r3, #0
 8002118:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Nucleo_LED_GPIO_Port, &GPIO_InitStruct);
 800211a:	f107 030c 	add.w	r3, r7, #12
 800211e:	4619      	mov	r1, r3
 8002120:	4805      	ldr	r0, [pc, #20]	@ (8002138 <MX_GPIO_Init+0x11c>)
 8002122:	f001 fe65 	bl	8003df0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002126:	bf00      	nop
 8002128:	3720      	adds	r7, #32
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	40021000 	.word	0x40021000
 8002134:	48001400 	.word	0x48001400
 8002138:	48000400 	.word	0x48000400

0800213c <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af00      	add	r7, sp, #0
 8002142:	60f8      	str	r0, [r7, #12]
 8002144:	60b9      	str	r1, [r7, #8]
 8002146:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2,(uint8_t *)ptr,len,10);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	b29a      	uxth	r2, r3
 800214c:	230a      	movs	r3, #10
 800214e:	68b9      	ldr	r1, [r7, #8]
 8002150:	4803      	ldr	r0, [pc, #12]	@ (8002160 <_write+0x24>)
 8002152:	f005 fa65 	bl	8007620 <HAL_UART_Transmit>
  return len;
 8002156:	687b      	ldr	r3, [r7, #4]
}
 8002158:	4618      	mov	r0, r3
 800215a:	3710      	adds	r7, #16
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	200004e4 	.word	0x200004e4

08002164 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002168:	b672      	cpsid	i
}
 800216a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800216c:	bf00      	nop
 800216e:	e7fd      	b.n	800216c <Error_Handler+0x8>

08002170 <calculateChecksum>:
#include <math.h>

#include "spi_data.h"

// チェックサムを計算する関数
uint8_t calculateChecksum(uint8_t* data, uint8_t length) {
 8002170:	b480      	push	{r7}
 8002172:	b085      	sub	sp, #20
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	460b      	mov	r3, r1
 800217a:	70fb      	strb	r3, [r7, #3]
	int sum = 0;
 800217c:	2300      	movs	r3, #0
 800217e:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < length; i++) {
 8002180:	2300      	movs	r3, #0
 8002182:	72fb      	strb	r3, [r7, #11]
 8002184:	e00a      	b.n	800219c <calculateChecksum+0x2c>
			sum += data[i];
 8002186:	7afb      	ldrb	r3, [r7, #11]
 8002188:	687a      	ldr	r2, [r7, #4]
 800218a:	4413      	add	r3, r2
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	461a      	mov	r2, r3
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	4413      	add	r3, r2
 8002194:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < length; i++) {
 8002196:	7afb      	ldrb	r3, [r7, #11]
 8002198:	3301      	adds	r3, #1
 800219a:	72fb      	strb	r3, [r7, #11]
 800219c:	7afa      	ldrb	r2, [r7, #11]
 800219e:	78fb      	ldrb	r3, [r7, #3]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d3f0      	bcc.n	8002186 <calculateChecksum+0x16>
	}
	// 合計の下位バイトを返す
	return (uint8_t)(sum & 0xFF);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	b2db      	uxtb	r3, r3
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3714      	adds	r7, #20
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr

080021b4 <commandDeserialize>:
	buffer += sizeof(float);
	data->check_sum = calculateChecksum(buffer, length);
	memcpy(buffer+length,&data->check_sum,sizeof(uint8_t));
}

bool commandDeserialize(Command* data, uint8_t* buffer){
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b084      	sub	sp, #16
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	6039      	str	r1, [r7, #0]
	canCommandDeserialize(&data->can_command, buffer);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6839      	ldr	r1, [r7, #0]
 80021c2:	4618      	mov	r0, r3
 80021c4:	f7fe fd18 	bl	8000bf8 <canCommandDeserialize>
	uint8_t length = CAN_COMMAND_BUFFER_SIZE;
 80021c8:	2301      	movs	r3, #1
 80021ca:	73fb      	strb	r3, [r7, #15]
	memcpy(&data->vel_l,buffer+length,sizeof(float));
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	3308      	adds	r3, #8
 80021d0:	7bfa      	ldrb	r2, [r7, #15]
 80021d2:	6839      	ldr	r1, [r7, #0]
 80021d4:	440a      	add	r2, r1
 80021d6:	6812      	ldr	r2, [r2, #0]
 80021d8:	601a      	str	r2, [r3, #0]
	length += sizeof(float);
 80021da:	7bfb      	ldrb	r3, [r7, #15]
 80021dc:	3304      	adds	r3, #4
 80021de:	73fb      	strb	r3, [r7, #15]
	memcpy(&data->vel_r,buffer+length,sizeof(float));
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	330c      	adds	r3, #12
 80021e4:	7bfa      	ldrb	r2, [r7, #15]
 80021e6:	6839      	ldr	r1, [r7, #0]
 80021e8:	440a      	add	r2, r1
 80021ea:	6812      	ldr	r2, [r2, #0]
 80021ec:	601a      	str	r2, [r3, #0]
	length += sizeof(float);
 80021ee:	7bfb      	ldrb	r3, [r7, #15]
 80021f0:	3304      	adds	r3, #4
 80021f2:	73fb      	strb	r3, [r7, #15]
	memcpy(&data->check_sum,buffer+length,sizeof(uint8_t));
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	3310      	adds	r3, #16
 80021f8:	7bfa      	ldrb	r2, [r7, #15]
 80021fa:	6839      	ldr	r1, [r7, #0]
 80021fc:	440a      	add	r2, r1
 80021fe:	7812      	ldrb	r2, [r2, #0]
 8002200:	701a      	strb	r2, [r3, #0]
	return calculateChecksum(buffer, length) == data->check_sum;
 8002202:	7bfb      	ldrb	r3, [r7, #15]
 8002204:	4619      	mov	r1, r3
 8002206:	6838      	ldr	r0, [r7, #0]
 8002208:	f7ff ffb2 	bl	8002170 <calculateChecksum>
 800220c:	4603      	mov	r3, r0
 800220e:	461a      	mov	r2, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	7c1b      	ldrb	r3, [r3, #16]
 8002214:	429a      	cmp	r2, r3
 8002216:	bf0c      	ite	eq
 8002218:	2301      	moveq	r3, #1
 800221a:	2300      	movne	r3, #0
 800221c:	b2db      	uxtb	r3, r3
}
 800221e:	4618      	mov	r0, r3
 8002220:	3710      	adds	r7, #16
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}

08002226 <resultSerialize>:

void resultSerialize(Result* data, uint8_t* buffer){
 8002226:	b580      	push	{r7, lr}
 8002228:	b084      	sub	sp, #16
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
 800222e:	6039      	str	r1, [r7, #0]
	uint8_t length = 0;
 8002230:	2300      	movs	r3, #0
 8002232:	73fb      	strb	r3, [r7, #15]
	powerResultSerialize(&data->power_result, buffer);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6839      	ldr	r1, [r7, #0]
 8002238:	4618      	mov	r0, r3
 800223a:	f7fe fd1f 	bl	8000c7c <powerResultSerialize>
	length += POWER_RESULT_BUFFER_SIZE;
 800223e:	7bfb      	ldrb	r3, [r7, #15]
 8002240:	3303      	adds	r3, #3
 8002242:	73fb      	strb	r3, [r7, #15]
	lockerResultSerialize(&data->locker_result,buffer+length);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	1d18      	adds	r0, r3, #4
 8002248:	7bfb      	ldrb	r3, [r7, #15]
 800224a:	683a      	ldr	r2, [r7, #0]
 800224c:	4413      	add	r3, r2
 800224e:	4619      	mov	r1, r3
 8002250:	f7fe fd5d 	bl	8000d0e <lockerResultSerialize>
	length += LOCKER_RESULT_BUFFER_SIZE;
 8002254:	7bfb      	ldrb	r3, [r7, #15]
 8002256:	3301      	adds	r3, #1
 8002258:	73fb      	strb	r3, [r7, #15]
	memcpy(buffer+length,&data->vel_l,sizeof(float));
 800225a:	7bfb      	ldrb	r3, [r7, #15]
 800225c:	683a      	ldr	r2, [r7, #0]
 800225e:	4413      	add	r3, r2
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	3208      	adds	r2, #8
 8002264:	6812      	ldr	r2, [r2, #0]
 8002266:	601a      	str	r2, [r3, #0]
	length += sizeof(float);
 8002268:	7bfb      	ldrb	r3, [r7, #15]
 800226a:	3304      	adds	r3, #4
 800226c:	73fb      	strb	r3, [r7, #15]
	memcpy(buffer+length,&data->vel_r,sizeof(float));
 800226e:	7bfb      	ldrb	r3, [r7, #15]
 8002270:	683a      	ldr	r2, [r7, #0]
 8002272:	4413      	add	r3, r2
 8002274:	687a      	ldr	r2, [r7, #4]
 8002276:	320c      	adds	r2, #12
 8002278:	6812      	ldr	r2, [r2, #0]
 800227a:	601a      	str	r2, [r3, #0]
	length += sizeof(float);
 800227c:	7bfb      	ldrb	r3, [r7, #15]
 800227e:	3304      	adds	r3, #4
 8002280:	73fb      	strb	r3, [r7, #15]
	memcpy(buffer+length,&data->cnt_l,sizeof(uint16_t));
 8002282:	7bfb      	ldrb	r3, [r7, #15]
 8002284:	683a      	ldr	r2, [r7, #0]
 8002286:	4413      	add	r3, r2
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	3210      	adds	r2, #16
 800228c:	8812      	ldrh	r2, [r2, #0]
 800228e:	b292      	uxth	r2, r2
 8002290:	801a      	strh	r2, [r3, #0]
	length += sizeof(uint16_t);
 8002292:	7bfb      	ldrb	r3, [r7, #15]
 8002294:	3302      	adds	r3, #2
 8002296:	73fb      	strb	r3, [r7, #15]
	memcpy(buffer+length,&data->cnt_r,sizeof(uint16_t));
 8002298:	7bfb      	ldrb	r3, [r7, #15]
 800229a:	683a      	ldr	r2, [r7, #0]
 800229c:	4413      	add	r3, r2
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	3212      	adds	r2, #18
 80022a2:	8812      	ldrh	r2, [r2, #0]
 80022a4:	b292      	uxth	r2, r2
 80022a6:	801a      	strh	r2, [r3, #0]
	length += sizeof(uint16_t);
 80022a8:	7bfb      	ldrb	r3, [r7, #15]
 80022aa:	3302      	adds	r3, #2
 80022ac:	73fb      	strb	r3, [r7, #15]
	data->check_sum = calculateChecksum(buffer,length);
 80022ae:	7bfb      	ldrb	r3, [r7, #15]
 80022b0:	4619      	mov	r1, r3
 80022b2:	6838      	ldr	r0, [r7, #0]
 80022b4:	f7ff ff5c 	bl	8002170 <calculateChecksum>
 80022b8:	4603      	mov	r3, r0
 80022ba:	461a      	mov	r2, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	751a      	strb	r2, [r3, #20]
	memcpy(buffer+length,&data->check_sum,sizeof(uint8_t));
 80022c0:	7bfb      	ldrb	r3, [r7, #15]
 80022c2:	683a      	ldr	r2, [r7, #0]
 80022c4:	4413      	add	r3, r2
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	3214      	adds	r2, #20
 80022ca:	7812      	ldrb	r2, [r2, #0]
 80022cc:	701a      	strb	r2, [r3, #0]
}
 80022ce:	bf00      	nop
 80022d0:	3710      	adds	r7, #16
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
	...

080022d8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022de:	4b0f      	ldr	r3, [pc, #60]	@ (800231c <HAL_MspInit+0x44>)
 80022e0:	699b      	ldr	r3, [r3, #24]
 80022e2:	4a0e      	ldr	r2, [pc, #56]	@ (800231c <HAL_MspInit+0x44>)
 80022e4:	f043 0301 	orr.w	r3, r3, #1
 80022e8:	6193      	str	r3, [r2, #24]
 80022ea:	4b0c      	ldr	r3, [pc, #48]	@ (800231c <HAL_MspInit+0x44>)
 80022ec:	699b      	ldr	r3, [r3, #24]
 80022ee:	f003 0301 	and.w	r3, r3, #1
 80022f2:	607b      	str	r3, [r7, #4]
 80022f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022f6:	4b09      	ldr	r3, [pc, #36]	@ (800231c <HAL_MspInit+0x44>)
 80022f8:	69db      	ldr	r3, [r3, #28]
 80022fa:	4a08      	ldr	r2, [pc, #32]	@ (800231c <HAL_MspInit+0x44>)
 80022fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002300:	61d3      	str	r3, [r2, #28]
 8002302:	4b06      	ldr	r3, [pc, #24]	@ (800231c <HAL_MspInit+0x44>)
 8002304:	69db      	ldr	r3, [r3, #28]
 8002306:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800230a:	603b      	str	r3, [r7, #0]
 800230c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800230e:	bf00      	nop
 8002310:	370c      	adds	r7, #12
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop
 800231c:	40021000 	.word	0x40021000

08002320 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b08a      	sub	sp, #40	@ 0x28
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002328:	f107 0314 	add.w	r3, r7, #20
 800232c:	2200      	movs	r2, #0
 800232e:	601a      	str	r2, [r3, #0]
 8002330:	605a      	str	r2, [r3, #4]
 8002332:	609a      	str	r2, [r3, #8]
 8002334:	60da      	str	r2, [r3, #12]
 8002336:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a1c      	ldr	r2, [pc, #112]	@ (80023b0 <HAL_CAN_MspInit+0x90>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d131      	bne.n	80023a6 <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002342:	4b1c      	ldr	r3, [pc, #112]	@ (80023b4 <HAL_CAN_MspInit+0x94>)
 8002344:	69db      	ldr	r3, [r3, #28]
 8002346:	4a1b      	ldr	r2, [pc, #108]	@ (80023b4 <HAL_CAN_MspInit+0x94>)
 8002348:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800234c:	61d3      	str	r3, [r2, #28]
 800234e:	4b19      	ldr	r3, [pc, #100]	@ (80023b4 <HAL_CAN_MspInit+0x94>)
 8002350:	69db      	ldr	r3, [r3, #28]
 8002352:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002356:	613b      	str	r3, [r7, #16]
 8002358:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800235a:	4b16      	ldr	r3, [pc, #88]	@ (80023b4 <HAL_CAN_MspInit+0x94>)
 800235c:	695b      	ldr	r3, [r3, #20]
 800235e:	4a15      	ldr	r2, [pc, #84]	@ (80023b4 <HAL_CAN_MspInit+0x94>)
 8002360:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002364:	6153      	str	r3, [r2, #20]
 8002366:	4b13      	ldr	r3, [pc, #76]	@ (80023b4 <HAL_CAN_MspInit+0x94>)
 8002368:	695b      	ldr	r3, [r3, #20]
 800236a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800236e:	60fb      	str	r3, [r7, #12]
 8002370:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002372:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002376:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002378:	2302      	movs	r3, #2
 800237a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800237c:	2300      	movs	r3, #0
 800237e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002380:	2303      	movs	r3, #3
 8002382:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8002384:	2309      	movs	r3, #9
 8002386:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002388:	f107 0314 	add.w	r3, r7, #20
 800238c:	4619      	mov	r1, r3
 800238e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002392:	f001 fd2d 	bl	8003df0 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CAN_RX0_IRQn, 0, 0);
 8002396:	2200      	movs	r2, #0
 8002398:	2100      	movs	r1, #0
 800239a:	2014      	movs	r0, #20
 800239c:	f001 fb5b 	bl	8003a56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX0_IRQn);
 80023a0:	2014      	movs	r0, #20
 80023a2:	f001 fb74 	bl	8003a8e <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN_MspInit 1 */

  }

}
 80023a6:	bf00      	nop
 80023a8:	3728      	adds	r7, #40	@ 0x28
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	40006400 	.word	0x40006400
 80023b4:	40021000 	.word	0x40021000

080023b8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b08a      	sub	sp, #40	@ 0x28
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023c0:	f107 0314 	add.w	r3, r7, #20
 80023c4:	2200      	movs	r2, #0
 80023c6:	601a      	str	r2, [r3, #0]
 80023c8:	605a      	str	r2, [r3, #4]
 80023ca:	609a      	str	r2, [r3, #8]
 80023cc:	60da      	str	r2, [r3, #12]
 80023ce:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a3d      	ldr	r2, [pc, #244]	@ (80024cc <HAL_SPI_MspInit+0x114>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d174      	bne.n	80024c4 <HAL_SPI_MspInit+0x10c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80023da:	4b3d      	ldr	r3, [pc, #244]	@ (80024d0 <HAL_SPI_MspInit+0x118>)
 80023dc:	699b      	ldr	r3, [r3, #24]
 80023de:	4a3c      	ldr	r2, [pc, #240]	@ (80024d0 <HAL_SPI_MspInit+0x118>)
 80023e0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80023e4:	6193      	str	r3, [r2, #24]
 80023e6:	4b3a      	ldr	r3, [pc, #232]	@ (80024d0 <HAL_SPI_MspInit+0x118>)
 80023e8:	699b      	ldr	r3, [r3, #24]
 80023ea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80023ee:	613b      	str	r3, [r7, #16]
 80023f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023f2:	4b37      	ldr	r3, [pc, #220]	@ (80024d0 <HAL_SPI_MspInit+0x118>)
 80023f4:	695b      	ldr	r3, [r3, #20]
 80023f6:	4a36      	ldr	r2, [pc, #216]	@ (80024d0 <HAL_SPI_MspInit+0x118>)
 80023f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023fc:	6153      	str	r3, [r2, #20]
 80023fe:	4b34      	ldr	r3, [pc, #208]	@ (80024d0 <HAL_SPI_MspInit+0x118>)
 8002400:	695b      	ldr	r3, [r3, #20]
 8002402:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002406:	60fb      	str	r3, [r7, #12]
 8002408:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800240a:	23f0      	movs	r3, #240	@ 0xf0
 800240c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800240e:	2302      	movs	r3, #2
 8002410:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002412:	2300      	movs	r3, #0
 8002414:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002416:	2303      	movs	r3, #3
 8002418:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800241a:	2305      	movs	r3, #5
 800241c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800241e:	f107 0314 	add.w	r3, r7, #20
 8002422:	4619      	mov	r1, r3
 8002424:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002428:	f001 fce2 	bl	8003df0 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 800242c:	4b29      	ldr	r3, [pc, #164]	@ (80024d4 <HAL_SPI_MspInit+0x11c>)
 800242e:	4a2a      	ldr	r2, [pc, #168]	@ (80024d8 <HAL_SPI_MspInit+0x120>)
 8002430:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002432:	4b28      	ldr	r3, [pc, #160]	@ (80024d4 <HAL_SPI_MspInit+0x11c>)
 8002434:	2200      	movs	r2, #0
 8002436:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002438:	4b26      	ldr	r3, [pc, #152]	@ (80024d4 <HAL_SPI_MspInit+0x11c>)
 800243a:	2200      	movs	r2, #0
 800243c:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800243e:	4b25      	ldr	r3, [pc, #148]	@ (80024d4 <HAL_SPI_MspInit+0x11c>)
 8002440:	2280      	movs	r2, #128	@ 0x80
 8002442:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002444:	4b23      	ldr	r3, [pc, #140]	@ (80024d4 <HAL_SPI_MspInit+0x11c>)
 8002446:	2200      	movs	r2, #0
 8002448:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800244a:	4b22      	ldr	r3, [pc, #136]	@ (80024d4 <HAL_SPI_MspInit+0x11c>)
 800244c:	2200      	movs	r2, #0
 800244e:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8002450:	4b20      	ldr	r3, [pc, #128]	@ (80024d4 <HAL_SPI_MspInit+0x11c>)
 8002452:	2200      	movs	r2, #0
 8002454:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002456:	4b1f      	ldr	r3, [pc, #124]	@ (80024d4 <HAL_SPI_MspInit+0x11c>)
 8002458:	2200      	movs	r2, #0
 800245a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800245c:	481d      	ldr	r0, [pc, #116]	@ (80024d4 <HAL_SPI_MspInit+0x11c>)
 800245e:	f001 fb30 	bl	8003ac2 <HAL_DMA_Init>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d001      	beq.n	800246c <HAL_SPI_MspInit+0xb4>
    {
      Error_Handler();
 8002468:	f7ff fe7c 	bl	8002164 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	4a19      	ldr	r2, [pc, #100]	@ (80024d4 <HAL_SPI_MspInit+0x11c>)
 8002470:	659a      	str	r2, [r3, #88]	@ 0x58
 8002472:	4a18      	ldr	r2, [pc, #96]	@ (80024d4 <HAL_SPI_MspInit+0x11c>)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6253      	str	r3, [r2, #36]	@ 0x24

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8002478:	4b18      	ldr	r3, [pc, #96]	@ (80024dc <HAL_SPI_MspInit+0x124>)
 800247a:	4a19      	ldr	r2, [pc, #100]	@ (80024e0 <HAL_SPI_MspInit+0x128>)
 800247c:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800247e:	4b17      	ldr	r3, [pc, #92]	@ (80024dc <HAL_SPI_MspInit+0x124>)
 8002480:	2210      	movs	r2, #16
 8002482:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002484:	4b15      	ldr	r3, [pc, #84]	@ (80024dc <HAL_SPI_MspInit+0x124>)
 8002486:	2200      	movs	r2, #0
 8002488:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800248a:	4b14      	ldr	r3, [pc, #80]	@ (80024dc <HAL_SPI_MspInit+0x124>)
 800248c:	2280      	movs	r2, #128	@ 0x80
 800248e:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002490:	4b12      	ldr	r3, [pc, #72]	@ (80024dc <HAL_SPI_MspInit+0x124>)
 8002492:	2200      	movs	r2, #0
 8002494:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002496:	4b11      	ldr	r3, [pc, #68]	@ (80024dc <HAL_SPI_MspInit+0x124>)
 8002498:	2200      	movs	r2, #0
 800249a:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800249c:	4b0f      	ldr	r3, [pc, #60]	@ (80024dc <HAL_SPI_MspInit+0x124>)
 800249e:	2200      	movs	r2, #0
 80024a0:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80024a2:	4b0e      	ldr	r3, [pc, #56]	@ (80024dc <HAL_SPI_MspInit+0x124>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80024a8:	480c      	ldr	r0, [pc, #48]	@ (80024dc <HAL_SPI_MspInit+0x124>)
 80024aa:	f001 fb0a 	bl	8003ac2 <HAL_DMA_Init>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d001      	beq.n	80024b8 <HAL_SPI_MspInit+0x100>
    {
      Error_Handler();
 80024b4:	f7ff fe56 	bl	8002164 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	4a08      	ldr	r2, [pc, #32]	@ (80024dc <HAL_SPI_MspInit+0x124>)
 80024bc:	655a      	str	r2, [r3, #84]	@ 0x54
 80024be:	4a07      	ldr	r2, [pc, #28]	@ (80024dc <HAL_SPI_MspInit+0x124>)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80024c4:	bf00      	nop
 80024c6:	3728      	adds	r7, #40	@ 0x28
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	40013000 	.word	0x40013000
 80024d0:	40021000 	.word	0x40021000
 80024d4:	200002e0 	.word	0x200002e0
 80024d8:	4002001c 	.word	0x4002001c
 80024dc:	20000324 	.word	0x20000324
 80024e0:	40020030 	.word	0x40020030

080024e4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b085      	sub	sp, #20
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a0a      	ldr	r2, [pc, #40]	@ (800251c <HAL_TIM_PWM_MspInit+0x38>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d10b      	bne.n	800250e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80024f6:	4b0a      	ldr	r3, [pc, #40]	@ (8002520 <HAL_TIM_PWM_MspInit+0x3c>)
 80024f8:	699b      	ldr	r3, [r3, #24]
 80024fa:	4a09      	ldr	r2, [pc, #36]	@ (8002520 <HAL_TIM_PWM_MspInit+0x3c>)
 80024fc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002500:	6193      	str	r3, [r2, #24]
 8002502:	4b07      	ldr	r3, [pc, #28]	@ (8002520 <HAL_TIM_PWM_MspInit+0x3c>)
 8002504:	699b      	ldr	r3, [r3, #24]
 8002506:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800250a:	60fb      	str	r3, [r7, #12]
 800250c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 800250e:	bf00      	nop
 8002510:	3714      	adds	r7, #20
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr
 800251a:	bf00      	nop
 800251c:	40012c00 	.word	0x40012c00
 8002520:	40021000 	.word	0x40021000

08002524 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b08c      	sub	sp, #48	@ 0x30
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800252c:	f107 031c 	add.w	r3, r7, #28
 8002530:	2200      	movs	r2, #0
 8002532:	601a      	str	r2, [r3, #0]
 8002534:	605a      	str	r2, [r3, #4]
 8002536:	609a      	str	r2, [r3, #8]
 8002538:	60da      	str	r2, [r3, #12]
 800253a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002544:	d129      	bne.n	800259a <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002546:	4b2d      	ldr	r3, [pc, #180]	@ (80025fc <HAL_TIM_Encoder_MspInit+0xd8>)
 8002548:	69db      	ldr	r3, [r3, #28]
 800254a:	4a2c      	ldr	r2, [pc, #176]	@ (80025fc <HAL_TIM_Encoder_MspInit+0xd8>)
 800254c:	f043 0301 	orr.w	r3, r3, #1
 8002550:	61d3      	str	r3, [r2, #28]
 8002552:	4b2a      	ldr	r3, [pc, #168]	@ (80025fc <HAL_TIM_Encoder_MspInit+0xd8>)
 8002554:	69db      	ldr	r3, [r3, #28]
 8002556:	f003 0301 	and.w	r3, r3, #1
 800255a:	61bb      	str	r3, [r7, #24]
 800255c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800255e:	4b27      	ldr	r3, [pc, #156]	@ (80025fc <HAL_TIM_Encoder_MspInit+0xd8>)
 8002560:	695b      	ldr	r3, [r3, #20]
 8002562:	4a26      	ldr	r2, [pc, #152]	@ (80025fc <HAL_TIM_Encoder_MspInit+0xd8>)
 8002564:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002568:	6153      	str	r3, [r2, #20]
 800256a:	4b24      	ldr	r3, [pc, #144]	@ (80025fc <HAL_TIM_Encoder_MspInit+0xd8>)
 800256c:	695b      	ldr	r3, [r3, #20]
 800256e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002572:	617b      	str	r3, [r7, #20]
 8002574:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = enc_L_A_Pin|enc_L_B_Pin;
 8002576:	2303      	movs	r3, #3
 8002578:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800257a:	2302      	movs	r3, #2
 800257c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800257e:	2300      	movs	r3, #0
 8002580:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002582:	2300      	movs	r3, #0
 8002584:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002586:	2301      	movs	r3, #1
 8002588:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800258a:	f107 031c 	add.w	r3, r7, #28
 800258e:	4619      	mov	r1, r3
 8002590:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002594:	f001 fc2c 	bl	8003df0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002598:	e02c      	b.n	80025f4 <HAL_TIM_Encoder_MspInit+0xd0>
  else if(htim_encoder->Instance==TIM3)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a18      	ldr	r2, [pc, #96]	@ (8002600 <HAL_TIM_Encoder_MspInit+0xdc>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d127      	bne.n	80025f4 <HAL_TIM_Encoder_MspInit+0xd0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80025a4:	4b15      	ldr	r3, [pc, #84]	@ (80025fc <HAL_TIM_Encoder_MspInit+0xd8>)
 80025a6:	69db      	ldr	r3, [r3, #28]
 80025a8:	4a14      	ldr	r2, [pc, #80]	@ (80025fc <HAL_TIM_Encoder_MspInit+0xd8>)
 80025aa:	f043 0302 	orr.w	r3, r3, #2
 80025ae:	61d3      	str	r3, [r2, #28]
 80025b0:	4b12      	ldr	r3, [pc, #72]	@ (80025fc <HAL_TIM_Encoder_MspInit+0xd8>)
 80025b2:	69db      	ldr	r3, [r3, #28]
 80025b4:	f003 0302 	and.w	r3, r3, #2
 80025b8:	613b      	str	r3, [r7, #16]
 80025ba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025bc:	4b0f      	ldr	r3, [pc, #60]	@ (80025fc <HAL_TIM_Encoder_MspInit+0xd8>)
 80025be:	695b      	ldr	r3, [r3, #20]
 80025c0:	4a0e      	ldr	r2, [pc, #56]	@ (80025fc <HAL_TIM_Encoder_MspInit+0xd8>)
 80025c2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025c6:	6153      	str	r3, [r2, #20]
 80025c8:	4b0c      	ldr	r3, [pc, #48]	@ (80025fc <HAL_TIM_Encoder_MspInit+0xd8>)
 80025ca:	695b      	ldr	r3, [r3, #20]
 80025cc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80025d0:	60fb      	str	r3, [r7, #12]
 80025d2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = enc_R_A_Pin|enc_R_B_Pin;
 80025d4:	2330      	movs	r3, #48	@ 0x30
 80025d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025d8:	2302      	movs	r3, #2
 80025da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025dc:	2300      	movs	r3, #0
 80025de:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025e0:	2300      	movs	r3, #0
 80025e2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80025e4:	2302      	movs	r3, #2
 80025e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025e8:	f107 031c 	add.w	r3, r7, #28
 80025ec:	4619      	mov	r1, r3
 80025ee:	4805      	ldr	r0, [pc, #20]	@ (8002604 <HAL_TIM_Encoder_MspInit+0xe0>)
 80025f0:	f001 fbfe 	bl	8003df0 <HAL_GPIO_Init>
}
 80025f4:	bf00      	nop
 80025f6:	3730      	adds	r7, #48	@ 0x30
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	40021000 	.word	0x40021000
 8002600:	40000400 	.word	0x40000400
 8002604:	48000400 	.word	0x48000400

08002608 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a16      	ldr	r2, [pc, #88]	@ (8002670 <HAL_TIM_Base_MspInit+0x68>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d114      	bne.n	8002644 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800261a:	4b16      	ldr	r3, [pc, #88]	@ (8002674 <HAL_TIM_Base_MspInit+0x6c>)
 800261c:	69db      	ldr	r3, [r3, #28]
 800261e:	4a15      	ldr	r2, [pc, #84]	@ (8002674 <HAL_TIM_Base_MspInit+0x6c>)
 8002620:	f043 0310 	orr.w	r3, r3, #16
 8002624:	61d3      	str	r3, [r2, #28]
 8002626:	4b13      	ldr	r3, [pc, #76]	@ (8002674 <HAL_TIM_Base_MspInit+0x6c>)
 8002628:	69db      	ldr	r3, [r3, #28]
 800262a:	f003 0310 	and.w	r3, r3, #16
 800262e:	60fb      	str	r3, [r7, #12]
 8002630:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, 0, 0);
 8002632:	2200      	movs	r2, #0
 8002634:	2100      	movs	r1, #0
 8002636:	2036      	movs	r0, #54	@ 0x36
 8002638:	f001 fa0d 	bl	8003a56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC1_IRQn);
 800263c:	2036      	movs	r0, #54	@ 0x36
 800263e:	f001 fa26 	bl	8003a8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8002642:	e010      	b.n	8002666 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM7)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a0b      	ldr	r2, [pc, #44]	@ (8002678 <HAL_TIM_Base_MspInit+0x70>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d10b      	bne.n	8002666 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800264e:	4b09      	ldr	r3, [pc, #36]	@ (8002674 <HAL_TIM_Base_MspInit+0x6c>)
 8002650:	69db      	ldr	r3, [r3, #28]
 8002652:	4a08      	ldr	r2, [pc, #32]	@ (8002674 <HAL_TIM_Base_MspInit+0x6c>)
 8002654:	f043 0320 	orr.w	r3, r3, #32
 8002658:	61d3      	str	r3, [r2, #28]
 800265a:	4b06      	ldr	r3, [pc, #24]	@ (8002674 <HAL_TIM_Base_MspInit+0x6c>)
 800265c:	69db      	ldr	r3, [r3, #28]
 800265e:	f003 0320 	and.w	r3, r3, #32
 8002662:	60bb      	str	r3, [r7, #8]
 8002664:	68bb      	ldr	r3, [r7, #8]
}
 8002666:	bf00      	nop
 8002668:	3710      	adds	r7, #16
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	40001000 	.word	0x40001000
 8002674:	40021000 	.word	0x40021000
 8002678:	40001400 	.word	0x40001400

0800267c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b088      	sub	sp, #32
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002684:	f107 030c 	add.w	r3, r7, #12
 8002688:	2200      	movs	r2, #0
 800268a:	601a      	str	r2, [r3, #0]
 800268c:	605a      	str	r2, [r3, #4]
 800268e:	609a      	str	r2, [r3, #8]
 8002690:	60da      	str	r2, [r3, #12]
 8002692:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a12      	ldr	r2, [pc, #72]	@ (80026e4 <HAL_TIM_MspPostInit+0x68>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d11d      	bne.n	80026da <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800269e:	4b12      	ldr	r3, [pc, #72]	@ (80026e8 <HAL_TIM_MspPostInit+0x6c>)
 80026a0:	695b      	ldr	r3, [r3, #20]
 80026a2:	4a11      	ldr	r2, [pc, #68]	@ (80026e8 <HAL_TIM_MspPostInit+0x6c>)
 80026a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026a8:	6153      	str	r3, [r2, #20]
 80026aa:	4b0f      	ldr	r3, [pc, #60]	@ (80026e8 <HAL_TIM_MspPostInit+0x6c>)
 80026ac:	695b      	ldr	r3, [r3, #20]
 80026ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026b2:	60bb      	str	r3, [r7, #8]
 80026b4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = PWM_L_Pin|PWM_R_Pin;
 80026b6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80026ba:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026bc:	2302      	movs	r3, #2
 80026be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c0:	2300      	movs	r3, #0
 80026c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026c4:	2300      	movs	r3, #0
 80026c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80026c8:	2306      	movs	r3, #6
 80026ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026cc:	f107 030c 	add.w	r3, r7, #12
 80026d0:	4619      	mov	r1, r3
 80026d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80026d6:	f001 fb8b 	bl	8003df0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80026da:	bf00      	nop
 80026dc:	3720      	adds	r7, #32
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	40012c00 	.word	0x40012c00
 80026e8:	40021000 	.word	0x40021000

080026ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b08a      	sub	sp, #40	@ 0x28
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026f4:	f107 0314 	add.w	r3, r7, #20
 80026f8:	2200      	movs	r2, #0
 80026fa:	601a      	str	r2, [r3, #0]
 80026fc:	605a      	str	r2, [r3, #4]
 80026fe:	609a      	str	r2, [r3, #8]
 8002700:	60da      	str	r2, [r3, #12]
 8002702:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a18      	ldr	r2, [pc, #96]	@ (800276c <HAL_UART_MspInit+0x80>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d129      	bne.n	8002762 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800270e:	4b18      	ldr	r3, [pc, #96]	@ (8002770 <HAL_UART_MspInit+0x84>)
 8002710:	69db      	ldr	r3, [r3, #28]
 8002712:	4a17      	ldr	r2, [pc, #92]	@ (8002770 <HAL_UART_MspInit+0x84>)
 8002714:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002718:	61d3      	str	r3, [r2, #28]
 800271a:	4b15      	ldr	r3, [pc, #84]	@ (8002770 <HAL_UART_MspInit+0x84>)
 800271c:	69db      	ldr	r3, [r3, #28]
 800271e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002722:	613b      	str	r3, [r7, #16]
 8002724:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002726:	4b12      	ldr	r3, [pc, #72]	@ (8002770 <HAL_UART_MspInit+0x84>)
 8002728:	695b      	ldr	r3, [r3, #20]
 800272a:	4a11      	ldr	r2, [pc, #68]	@ (8002770 <HAL_UART_MspInit+0x84>)
 800272c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002730:	6153      	str	r3, [r2, #20]
 8002732:	4b0f      	ldr	r3, [pc, #60]	@ (8002770 <HAL_UART_MspInit+0x84>)
 8002734:	695b      	ldr	r3, [r3, #20]
 8002736:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800273a:	60fb      	str	r3, [r7, #12]
 800273c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 800273e:	f248 0304 	movw	r3, #32772	@ 0x8004
 8002742:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002744:	2302      	movs	r3, #2
 8002746:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002748:	2300      	movs	r3, #0
 800274a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800274c:	2303      	movs	r3, #3
 800274e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002750:	2307      	movs	r3, #7
 8002752:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002754:	f107 0314 	add.w	r3, r7, #20
 8002758:	4619      	mov	r1, r3
 800275a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800275e:	f001 fb47 	bl	8003df0 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8002762:	bf00      	nop
 8002764:	3728      	adds	r7, #40	@ 0x28
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	40004400 	.word	0x40004400
 8002770:	40021000 	.word	0x40021000

08002774 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002778:	bf00      	nop
 800277a:	e7fd      	b.n	8002778 <NMI_Handler+0x4>

0800277c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002780:	bf00      	nop
 8002782:	e7fd      	b.n	8002780 <HardFault_Handler+0x4>

08002784 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002784:	b480      	push	{r7}
 8002786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002788:	bf00      	nop
 800278a:	e7fd      	b.n	8002788 <MemManage_Handler+0x4>

0800278c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002790:	bf00      	nop
 8002792:	e7fd      	b.n	8002790 <BusFault_Handler+0x4>

08002794 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002794:	b480      	push	{r7}
 8002796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002798:	bf00      	nop
 800279a:	e7fd      	b.n	8002798 <UsageFault_Handler+0x4>

0800279c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800279c:	b480      	push	{r7}
 800279e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027a0:	bf00      	nop
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr

080027aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027aa:	b480      	push	{r7}
 80027ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027ae:	bf00      	nop
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr

080027b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027b8:	b480      	push	{r7}
 80027ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027bc:	bf00      	nop
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr

080027c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027c6:	b580      	push	{r7, lr}
 80027c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027ca:	f000 f957 	bl	8002a7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027ce:	bf00      	nop
 80027d0:	bd80      	pop	{r7, pc}
	...

080027d4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80027d8:	4802      	ldr	r0, [pc, #8]	@ (80027e4 <DMA1_Channel2_IRQHandler+0x10>)
 80027da:	f001 fa18 	bl	8003c0e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80027de:	bf00      	nop
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	200002e0 	.word	0x200002e0

080027e8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80027ec:	4802      	ldr	r0, [pc, #8]	@ (80027f8 <DMA1_Channel3_IRQHandler+0x10>)
 80027ee:	f001 fa0e 	bl	8003c0e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80027f2:	bf00      	nop
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	20000324 	.word	0x20000324

080027fc <CAN_RX0_IRQHandler>:

/**
  * @brief This function handles CAN RX0 interrupt.
  */
void CAN_RX0_IRQHandler(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX0_IRQn 0 */

  /* USER CODE END CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8002800:	4802      	ldr	r0, [pc, #8]	@ (800280c <CAN_RX0_IRQHandler+0x10>)
 8002802:	f000 fe1e 	bl	8003442 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX0_IRQn 1 */

  /* USER CODE END CAN_RX0_IRQn 1 */
}
 8002806:	bf00      	nop
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	20000254 	.word	0x20000254

08002810 <TIM6_DAC1_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC1 underrun error interrupts.
  */
void TIM6_DAC1_IRQHandler(void)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC1_IRQn 0 */

  /* USER CODE END TIM6_DAC1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002814:	4802      	ldr	r0, [pc, #8]	@ (8002820 <TIM6_DAC1_IRQHandler+0x10>)
 8002816:	f004 f823 	bl	8006860 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC1_IRQn 1 */

  /* USER CODE END TIM6_DAC1_IRQn 1 */
}
 800281a:	bf00      	nop
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	2000044c 	.word	0x2000044c

08002824 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002824:	b480      	push	{r7}
 8002826:	af00      	add	r7, sp, #0
  return 1;
 8002828:	2301      	movs	r3, #1
}
 800282a:	4618      	mov	r0, r3
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr

08002834 <_kill>:

int _kill(int pid, int sig)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b082      	sub	sp, #8
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800283e:	f006 f97d 	bl	8008b3c <__errno>
 8002842:	4603      	mov	r3, r0
 8002844:	2216      	movs	r2, #22
 8002846:	601a      	str	r2, [r3, #0]
  return -1;
 8002848:	f04f 33ff 	mov.w	r3, #4294967295
}
 800284c:	4618      	mov	r0, r3
 800284e:	3708      	adds	r7, #8
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}

08002854 <_exit>:

void _exit (int status)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b082      	sub	sp, #8
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800285c:	f04f 31ff 	mov.w	r1, #4294967295
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	f7ff ffe7 	bl	8002834 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002866:	bf00      	nop
 8002868:	e7fd      	b.n	8002866 <_exit+0x12>

0800286a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800286a:	b580      	push	{r7, lr}
 800286c:	b086      	sub	sp, #24
 800286e:	af00      	add	r7, sp, #0
 8002870:	60f8      	str	r0, [r7, #12]
 8002872:	60b9      	str	r1, [r7, #8]
 8002874:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002876:	2300      	movs	r3, #0
 8002878:	617b      	str	r3, [r7, #20]
 800287a:	e00a      	b.n	8002892 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800287c:	f3af 8000 	nop.w
 8002880:	4601      	mov	r1, r0
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	1c5a      	adds	r2, r3, #1
 8002886:	60ba      	str	r2, [r7, #8]
 8002888:	b2ca      	uxtb	r2, r1
 800288a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	3301      	adds	r3, #1
 8002890:	617b      	str	r3, [r7, #20]
 8002892:	697a      	ldr	r2, [r7, #20]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	429a      	cmp	r2, r3
 8002898:	dbf0      	blt.n	800287c <_read+0x12>
  }

  return len;
 800289a:	687b      	ldr	r3, [r7, #4]
}
 800289c:	4618      	mov	r0, r3
 800289e:	3718      	adds	r7, #24
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}

080028a4 <_close>:
  }
  return len;
}

int _close(int file)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80028ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	370c      	adds	r7, #12
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr

080028bc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80028cc:	605a      	str	r2, [r3, #4]
  return 0;
 80028ce:	2300      	movs	r3, #0
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	370c      	adds	r7, #12
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr

080028dc <_isatty>:

int _isatty(int file)
{
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80028e4:	2301      	movs	r3, #1
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	370c      	adds	r7, #12
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr

080028f2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80028f2:	b480      	push	{r7}
 80028f4:	b085      	sub	sp, #20
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	60f8      	str	r0, [r7, #12]
 80028fa:	60b9      	str	r1, [r7, #8]
 80028fc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80028fe:	2300      	movs	r3, #0
}
 8002900:	4618      	mov	r0, r3
 8002902:	3714      	adds	r7, #20
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr

0800290c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b086      	sub	sp, #24
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002914:	4a14      	ldr	r2, [pc, #80]	@ (8002968 <_sbrk+0x5c>)
 8002916:	4b15      	ldr	r3, [pc, #84]	@ (800296c <_sbrk+0x60>)
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002920:	4b13      	ldr	r3, [pc, #76]	@ (8002970 <_sbrk+0x64>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d102      	bne.n	800292e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002928:	4b11      	ldr	r3, [pc, #68]	@ (8002970 <_sbrk+0x64>)
 800292a:	4a12      	ldr	r2, [pc, #72]	@ (8002974 <_sbrk+0x68>)
 800292c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800292e:	4b10      	ldr	r3, [pc, #64]	@ (8002970 <_sbrk+0x64>)
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4413      	add	r3, r2
 8002936:	693a      	ldr	r2, [r7, #16]
 8002938:	429a      	cmp	r2, r3
 800293a:	d207      	bcs.n	800294c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800293c:	f006 f8fe 	bl	8008b3c <__errno>
 8002940:	4603      	mov	r3, r0
 8002942:	220c      	movs	r2, #12
 8002944:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002946:	f04f 33ff 	mov.w	r3, #4294967295
 800294a:	e009      	b.n	8002960 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800294c:	4b08      	ldr	r3, [pc, #32]	@ (8002970 <_sbrk+0x64>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002952:	4b07      	ldr	r3, [pc, #28]	@ (8002970 <_sbrk+0x64>)
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4413      	add	r3, r2
 800295a:	4a05      	ldr	r2, [pc, #20]	@ (8002970 <_sbrk+0x64>)
 800295c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800295e:	68fb      	ldr	r3, [r7, #12]
}
 8002960:	4618      	mov	r0, r3
 8002962:	3718      	adds	r7, #24
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}
 8002968:	20003000 	.word	0x20003000
 800296c:	00000400 	.word	0x00000400
 8002970:	2000057c 	.word	0x2000057c
 8002974:	200006d0 	.word	0x200006d0

08002978 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002978:	b480      	push	{r7}
 800297a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800297c:	4b06      	ldr	r3, [pc, #24]	@ (8002998 <SystemInit+0x20>)
 800297e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002982:	4a05      	ldr	r2, [pc, #20]	@ (8002998 <SystemInit+0x20>)
 8002984:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002988:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800298c:	bf00      	nop
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop
 8002998:	e000ed00 	.word	0xe000ed00

0800299c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800299c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80029d4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80029a0:	f7ff ffea 	bl	8002978 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80029a4:	480c      	ldr	r0, [pc, #48]	@ (80029d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80029a6:	490d      	ldr	r1, [pc, #52]	@ (80029dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80029a8:	4a0d      	ldr	r2, [pc, #52]	@ (80029e0 <LoopForever+0xe>)
  movs r3, #0
 80029aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029ac:	e002      	b.n	80029b4 <LoopCopyDataInit>

080029ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029b2:	3304      	adds	r3, #4

080029b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029b8:	d3f9      	bcc.n	80029ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029ba:	4a0a      	ldr	r2, [pc, #40]	@ (80029e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80029bc:	4c0a      	ldr	r4, [pc, #40]	@ (80029e8 <LoopForever+0x16>)
  movs r3, #0
 80029be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029c0:	e001      	b.n	80029c6 <LoopFillZerobss>

080029c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029c4:	3204      	adds	r2, #4

080029c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029c8:	d3fb      	bcc.n	80029c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80029ca:	f006 f8bd 	bl	8008b48 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80029ce:	f7fe fb97 	bl	8001100 <main>

080029d2 <LoopForever>:

LoopForever:
    b LoopForever
 80029d2:	e7fe      	b.n	80029d2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80029d4:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80029d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029dc:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80029e0:	0800ad68 	.word	0x0800ad68
  ldr r2, =_sbss
 80029e4:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80029e8:	200006d0 	.word	0x200006d0

080029ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80029ec:	e7fe      	b.n	80029ec <ADC1_2_IRQHandler>
	...

080029f0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029f4:	4b08      	ldr	r3, [pc, #32]	@ (8002a18 <HAL_Init+0x28>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a07      	ldr	r2, [pc, #28]	@ (8002a18 <HAL_Init+0x28>)
 80029fa:	f043 0310 	orr.w	r3, r3, #16
 80029fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a00:	2003      	movs	r0, #3
 8002a02:	f001 f81d 	bl	8003a40 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a06:	2000      	movs	r0, #0
 8002a08:	f000 f808 	bl	8002a1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a0c:	f7ff fc64 	bl	80022d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a10:	2300      	movs	r3, #0
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	40022000 	.word	0x40022000

08002a1c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a24:	4b12      	ldr	r3, [pc, #72]	@ (8002a70 <HAL_InitTick+0x54>)
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	4b12      	ldr	r3, [pc, #72]	@ (8002a74 <HAL_InitTick+0x58>)
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002a32:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a36:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f001 f835 	bl	8003aaa <HAL_SYSTICK_Config>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d001      	beq.n	8002a4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e00e      	b.n	8002a68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2b0f      	cmp	r3, #15
 8002a4e:	d80a      	bhi.n	8002a66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a50:	2200      	movs	r2, #0
 8002a52:	6879      	ldr	r1, [r7, #4]
 8002a54:	f04f 30ff 	mov.w	r0, #4294967295
 8002a58:	f000 fffd 	bl	8003a56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a5c:	4a06      	ldr	r2, [pc, #24]	@ (8002a78 <HAL_InitTick+0x5c>)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002a62:	2300      	movs	r3, #0
 8002a64:	e000      	b.n	8002a68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3708      	adds	r7, #8
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	20000000 	.word	0x20000000
 8002a74:	20000008 	.word	0x20000008
 8002a78:	20000004 	.word	0x20000004

08002a7c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a80:	4b06      	ldr	r3, [pc, #24]	@ (8002a9c <HAL_IncTick+0x20>)
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	461a      	mov	r2, r3
 8002a86:	4b06      	ldr	r3, [pc, #24]	@ (8002aa0 <HAL_IncTick+0x24>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4413      	add	r3, r2
 8002a8c:	4a04      	ldr	r2, [pc, #16]	@ (8002aa0 <HAL_IncTick+0x24>)
 8002a8e:	6013      	str	r3, [r2, #0]
}
 8002a90:	bf00      	nop
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	20000008 	.word	0x20000008
 8002aa0:	20000580 	.word	0x20000580

08002aa4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	af00      	add	r7, sp, #0
  return uwTick;  
 8002aa8:	4b03      	ldr	r3, [pc, #12]	@ (8002ab8 <HAL_GetTick+0x14>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr
 8002ab6:	bf00      	nop
 8002ab8:	20000580 	.word	0x20000580

08002abc <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b084      	sub	sp, #16
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ac4:	f7ff ffee 	bl	8002aa4 <HAL_GetTick>
 8002ac8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ad4:	d005      	beq.n	8002ae2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ad6:	4b0a      	ldr	r3, [pc, #40]	@ (8002b00 <HAL_Delay+0x44>)
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	461a      	mov	r2, r3
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	4413      	add	r3, r2
 8002ae0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002ae2:	bf00      	nop
 8002ae4:	f7ff ffde 	bl	8002aa4 <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	68fa      	ldr	r2, [r7, #12]
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d8f7      	bhi.n	8002ae4 <HAL_Delay+0x28>
  {
  }
}
 8002af4:	bf00      	nop
 8002af6:	bf00      	nop
 8002af8:	3710      	adds	r7, #16
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	20000008 	.word	0x20000008

08002b04 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b084      	sub	sp, #16
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d101      	bne.n	8002b16 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e0ed      	b.n	8002cf2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d102      	bne.n	8002b28 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f7ff fbfc 	bl	8002320 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f042 0201 	orr.w	r2, r2, #1
 8002b36:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b38:	f7ff ffb4 	bl	8002aa4 <HAL_GetTick>
 8002b3c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002b3e:	e012      	b.n	8002b66 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002b40:	f7ff ffb0 	bl	8002aa4 <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	2b0a      	cmp	r3, #10
 8002b4c:	d90b      	bls.n	8002b66 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b52:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2205      	movs	r2, #5
 8002b5e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e0c5      	b.n	8002cf2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	f003 0301 	and.w	r3, r3, #1
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d0e5      	beq.n	8002b40 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f022 0202 	bic.w	r2, r2, #2
 8002b82:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b84:	f7ff ff8e 	bl	8002aa4 <HAL_GetTick>
 8002b88:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002b8a:	e012      	b.n	8002bb2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002b8c:	f7ff ff8a 	bl	8002aa4 <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	2b0a      	cmp	r3, #10
 8002b98:	d90b      	bls.n	8002bb2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b9e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2205      	movs	r2, #5
 8002baa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e09f      	b.n	8002cf2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f003 0302 	and.w	r3, r3, #2
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d1e5      	bne.n	8002b8c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	7e1b      	ldrb	r3, [r3, #24]
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d108      	bne.n	8002bda <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002bd6:	601a      	str	r2, [r3, #0]
 8002bd8:	e007      	b.n	8002bea <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002be8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	7e5b      	ldrb	r3, [r3, #25]
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d108      	bne.n	8002c04 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002c00:	601a      	str	r2, [r3, #0]
 8002c02:	e007      	b.n	8002c14 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c12:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	7e9b      	ldrb	r3, [r3, #26]
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d108      	bne.n	8002c2e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f042 0220 	orr.w	r2, r2, #32
 8002c2a:	601a      	str	r2, [r3, #0]
 8002c2c:	e007      	b.n	8002c3e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f022 0220 	bic.w	r2, r2, #32
 8002c3c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	7edb      	ldrb	r3, [r3, #27]
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d108      	bne.n	8002c58 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f022 0210 	bic.w	r2, r2, #16
 8002c54:	601a      	str	r2, [r3, #0]
 8002c56:	e007      	b.n	8002c68 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f042 0210 	orr.w	r2, r2, #16
 8002c66:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	7f1b      	ldrb	r3, [r3, #28]
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d108      	bne.n	8002c82 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f042 0208 	orr.w	r2, r2, #8
 8002c7e:	601a      	str	r2, [r3, #0]
 8002c80:	e007      	b.n	8002c92 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f022 0208 	bic.w	r2, r2, #8
 8002c90:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	7f5b      	ldrb	r3, [r3, #29]
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d108      	bne.n	8002cac <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f042 0204 	orr.w	r2, r2, #4
 8002ca8:	601a      	str	r2, [r3, #0]
 8002caa:	e007      	b.n	8002cbc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f022 0204 	bic.w	r2, r2, #4
 8002cba:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	689a      	ldr	r2, [r3, #8]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	431a      	orrs	r2, r3
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	691b      	ldr	r3, [r3, #16]
 8002cca:	431a      	orrs	r2, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	695b      	ldr	r3, [r3, #20]
 8002cd0:	ea42 0103 	orr.w	r1, r2, r3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	1e5a      	subs	r2, r3, #1
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	430a      	orrs	r2, r1
 8002ce0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002cf0:	2300      	movs	r3, #0
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3710      	adds	r7, #16
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}

08002cfa <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8002cfa:	b480      	push	{r7}
 8002cfc:	b087      	sub	sp, #28
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	6078      	str	r0, [r7, #4]
 8002d02:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d10:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002d12:	7cfb      	ldrb	r3, [r7, #19]
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d003      	beq.n	8002d20 <HAL_CAN_ConfigFilter+0x26>
 8002d18:	7cfb      	ldrb	r3, [r7, #19]
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	f040 80aa 	bne.w	8002e74 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002d26:	f043 0201 	orr.w	r2, r3, #1
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	695b      	ldr	r3, [r3, #20]
 8002d34:	f003 031f 	and.w	r3, r3, #31
 8002d38:	2201      	movs	r2, #1
 8002d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	43db      	mvns	r3, r3
 8002d4a:	401a      	ands	r2, r3
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	69db      	ldr	r3, [r3, #28]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d123      	bne.n	8002da2 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	43db      	mvns	r3, r3
 8002d64:	401a      	ands	r2, r3
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002d78:	683a      	ldr	r2, [r7, #0]
 8002d7a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002d7c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	3248      	adds	r2, #72	@ 0x48
 8002d82:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002d96:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002d98:	6979      	ldr	r1, [r7, #20]
 8002d9a:	3348      	adds	r3, #72	@ 0x48
 8002d9c:	00db      	lsls	r3, r3, #3
 8002d9e:	440b      	add	r3, r1
 8002da0:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	69db      	ldr	r3, [r3, #28]
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d122      	bne.n	8002df0 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	431a      	orrs	r2, r3
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002dc6:	683a      	ldr	r2, [r7, #0]
 8002dc8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002dca:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	3248      	adds	r2, #72	@ 0x48
 8002dd0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	68db      	ldr	r3, [r3, #12]
 8002dde:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002de4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002de6:	6979      	ldr	r1, [r7, #20]
 8002de8:	3348      	adds	r3, #72	@ 0x48
 8002dea:	00db      	lsls	r3, r3, #3
 8002dec:	440b      	add	r3, r1
 8002dee:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	699b      	ldr	r3, [r3, #24]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d109      	bne.n	8002e0c <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	43db      	mvns	r3, r3
 8002e02:	401a      	ands	r2, r3
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8002e0a:	e007      	b.n	8002e1c <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	431a      	orrs	r2, r3
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	691b      	ldr	r3, [r3, #16]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d109      	bne.n	8002e38 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	43db      	mvns	r3, r3
 8002e2e:	401a      	ands	r2, r3
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8002e36:	e007      	b.n	8002e48 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	431a      	orrs	r2, r3
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	6a1b      	ldr	r3, [r3, #32]
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d107      	bne.n	8002e60 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	431a      	orrs	r2, r3
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002e66:	f023 0201 	bic.w	r2, r3, #1
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8002e70:	2300      	movs	r3, #0
 8002e72:	e006      	b.n	8002e82 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e78:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
  }
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	371c      	adds	r7, #28
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr

08002e8e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002e8e:	b580      	push	{r7, lr}
 8002e90:	b084      	sub	sp, #16
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d12e      	bne.n	8002f00 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2202      	movs	r2, #2
 8002ea6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f022 0201 	bic.w	r2, r2, #1
 8002eb8:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002eba:	f7ff fdf3 	bl	8002aa4 <HAL_GetTick>
 8002ebe:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002ec0:	e012      	b.n	8002ee8 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002ec2:	f7ff fdef 	bl	8002aa4 <HAL_GetTick>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	1ad3      	subs	r3, r2, r3
 8002ecc:	2b0a      	cmp	r3, #10
 8002ece:	d90b      	bls.n	8002ee8 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ed4:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2205      	movs	r2, #5
 8002ee0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e012      	b.n	8002f0e <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	f003 0301 	and.w	r3, r3, #1
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d1e5      	bne.n	8002ec2 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8002efc:	2300      	movs	r3, #0
 8002efe:	e006      	b.n	8002f0e <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f04:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
  }
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3710      	adds	r7, #16
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}

08002f16 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 8002f16:	b580      	push	{r7, lr}
 8002f18:	b084      	sub	sp, #16
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d133      	bne.n	8002f92 <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f042 0201 	orr.w	r2, r2, #1
 8002f38:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002f3a:	f7ff fdb3 	bl	8002aa4 <HAL_GetTick>
 8002f3e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002f40:	e012      	b.n	8002f68 <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002f42:	f7ff fdaf 	bl	8002aa4 <HAL_GetTick>
 8002f46:	4602      	mov	r2, r0
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	2b0a      	cmp	r3, #10
 8002f4e:	d90b      	bls.n	8002f68 <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f54:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2205      	movs	r2, #5
 8002f60:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e01b      	b.n	8002fa0 <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	f003 0301 	and.w	r3, r3, #1
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d0e5      	beq.n	8002f42 <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f022 0202 	bic.w	r2, r2, #2
 8002f84:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2201      	movs	r2, #1
 8002f8a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	e006      	b.n	8002fa0 <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f96:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
  }
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3710      	adds	r7, #16
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}

08002fa8 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b089      	sub	sp, #36	@ 0x24
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	60f8      	str	r0, [r7, #12]
 8002fb0:	60b9      	str	r1, [r7, #8]
 8002fb2:	607a      	str	r2, [r7, #4]
 8002fb4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002fbc:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002fc6:	7ffb      	ldrb	r3, [r7, #31]
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d003      	beq.n	8002fd4 <HAL_CAN_AddTxMessage+0x2c>
 8002fcc:	7ffb      	ldrb	r3, [r7, #31]
 8002fce:	2b02      	cmp	r3, #2
 8002fd0:	f040 80ad 	bne.w	800312e <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002fd4:	69bb      	ldr	r3, [r7, #24]
 8002fd6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d10a      	bne.n	8002ff4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002fde:	69bb      	ldr	r3, [r7, #24]
 8002fe0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d105      	bne.n	8002ff4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002fe8:	69bb      	ldr	r3, [r7, #24]
 8002fea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	f000 8095 	beq.w	800311e <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002ff4:	69bb      	ldr	r3, [r7, #24]
 8002ff6:	0e1b      	lsrs	r3, r3, #24
 8002ff8:	f003 0303 	and.w	r3, r3, #3
 8002ffc:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002ffe:	2201      	movs	r2, #1
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	409a      	lsls	r2, r3
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d10d      	bne.n	800302c <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800301a:	68f9      	ldr	r1, [r7, #12]
 800301c:	6809      	ldr	r1, [r1, #0]
 800301e:	431a      	orrs	r2, r3
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	3318      	adds	r3, #24
 8003024:	011b      	lsls	r3, r3, #4
 8003026:	440b      	add	r3, r1
 8003028:	601a      	str	r2, [r3, #0]
 800302a:	e00f      	b.n	800304c <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003036:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800303c:	68f9      	ldr	r1, [r7, #12]
 800303e:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003040:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	3318      	adds	r3, #24
 8003046:	011b      	lsls	r3, r3, #4
 8003048:	440b      	add	r3, r1
 800304a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	6819      	ldr	r1, [r3, #0]
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	691a      	ldr	r2, [r3, #16]
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	3318      	adds	r3, #24
 8003058:	011b      	lsls	r3, r3, #4
 800305a:	440b      	add	r3, r1
 800305c:	3304      	adds	r3, #4
 800305e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	7d1b      	ldrb	r3, [r3, #20]
 8003064:	2b01      	cmp	r3, #1
 8003066:	d111      	bne.n	800308c <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	3318      	adds	r3, #24
 8003070:	011b      	lsls	r3, r3, #4
 8003072:	4413      	add	r3, r2
 8003074:	3304      	adds	r3, #4
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	68fa      	ldr	r2, [r7, #12]
 800307a:	6811      	ldr	r1, [r2, #0]
 800307c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	3318      	adds	r3, #24
 8003084:	011b      	lsls	r3, r3, #4
 8003086:	440b      	add	r3, r1
 8003088:	3304      	adds	r3, #4
 800308a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	3307      	adds	r3, #7
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	061a      	lsls	r2, r3, #24
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	3306      	adds	r3, #6
 8003098:	781b      	ldrb	r3, [r3, #0]
 800309a:	041b      	lsls	r3, r3, #16
 800309c:	431a      	orrs	r2, r3
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	3305      	adds	r3, #5
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	021b      	lsls	r3, r3, #8
 80030a6:	4313      	orrs	r3, r2
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	3204      	adds	r2, #4
 80030ac:	7812      	ldrb	r2, [r2, #0]
 80030ae:	4610      	mov	r0, r2
 80030b0:	68fa      	ldr	r2, [r7, #12]
 80030b2:	6811      	ldr	r1, [r2, #0]
 80030b4:	ea43 0200 	orr.w	r2, r3, r0
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	011b      	lsls	r3, r3, #4
 80030bc:	440b      	add	r3, r1
 80030be:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80030c2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	3303      	adds	r3, #3
 80030c8:	781b      	ldrb	r3, [r3, #0]
 80030ca:	061a      	lsls	r2, r3, #24
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	3302      	adds	r3, #2
 80030d0:	781b      	ldrb	r3, [r3, #0]
 80030d2:	041b      	lsls	r3, r3, #16
 80030d4:	431a      	orrs	r2, r3
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	3301      	adds	r3, #1
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	021b      	lsls	r3, r3, #8
 80030de:	4313      	orrs	r3, r2
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	7812      	ldrb	r2, [r2, #0]
 80030e4:	4610      	mov	r0, r2
 80030e6:	68fa      	ldr	r2, [r7, #12]
 80030e8:	6811      	ldr	r1, [r2, #0]
 80030ea:	ea43 0200 	orr.w	r2, r3, r0
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	011b      	lsls	r3, r3, #4
 80030f2:	440b      	add	r3, r1
 80030f4:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80030f8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	3318      	adds	r3, #24
 8003102:	011b      	lsls	r3, r3, #4
 8003104:	4413      	add	r3, r2
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	68fa      	ldr	r2, [r7, #12]
 800310a:	6811      	ldr	r1, [r2, #0]
 800310c:	f043 0201 	orr.w	r2, r3, #1
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	3318      	adds	r3, #24
 8003114:	011b      	lsls	r3, r3, #4
 8003116:	440b      	add	r3, r1
 8003118:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800311a:	2300      	movs	r3, #0
 800311c:	e00e      	b.n	800313c <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003122:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e006      	b.n	800313c <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003132:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
  }
}
 800313c:	4618      	mov	r0, r3
 800313e:	3724      	adds	r7, #36	@ 0x24
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr

08003148 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8003148:	b480      	push	{r7}
 800314a:	b085      	sub	sp, #20
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8003150:	2300      	movs	r3, #0
 8003152:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f893 3020 	ldrb.w	r3, [r3, #32]
 800315a:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 800315c:	7afb      	ldrb	r3, [r7, #11]
 800315e:	2b01      	cmp	r3, #1
 8003160:	d002      	beq.n	8003168 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8003162:	7afb      	ldrb	r3, [r7, #11]
 8003164:	2b02      	cmp	r3, #2
 8003166:	d11d      	bne.n	80031a4 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d002      	beq.n	800317c <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	3301      	adds	r3, #1
 800317a:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d002      	beq.n	8003190 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	3301      	adds	r3, #1
 800318e:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d002      	beq.n	80031a4 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	3301      	adds	r3, #1
 80031a2:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80031a4:	68fb      	ldr	r3, [r7, #12]
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3714      	adds	r7, #20
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr

080031b2 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80031b2:	b480      	push	{r7}
 80031b4:	b087      	sub	sp, #28
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	60f8      	str	r0, [r7, #12]
 80031ba:	60b9      	str	r1, [r7, #8]
 80031bc:	607a      	str	r2, [r7, #4]
 80031be:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031c6:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80031c8:	7dfb      	ldrb	r3, [r7, #23]
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d003      	beq.n	80031d6 <HAL_CAN_GetRxMessage+0x24>
 80031ce:	7dfb      	ldrb	r3, [r7, #23]
 80031d0:	2b02      	cmp	r3, #2
 80031d2:	f040 8103 	bne.w	80033dc <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d10e      	bne.n	80031fa <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	68db      	ldr	r3, [r3, #12]
 80031e2:	f003 0303 	and.w	r3, r3, #3
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d116      	bne.n	8003218 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ee:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e0f7      	b.n	80033ea <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	691b      	ldr	r3, [r3, #16]
 8003200:	f003 0303 	and.w	r3, r3, #3
 8003204:	2b00      	cmp	r3, #0
 8003206:	d107      	bne.n	8003218 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800320c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e0e8      	b.n	80033ea <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	331b      	adds	r3, #27
 8003220:	011b      	lsls	r3, r3, #4
 8003222:	4413      	add	r3, r2
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0204 	and.w	r2, r3, #4
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d10c      	bne.n	8003250 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	331b      	adds	r3, #27
 800323e:	011b      	lsls	r3, r3, #4
 8003240:	4413      	add	r3, r2
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	0d5b      	lsrs	r3, r3, #21
 8003246:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	601a      	str	r2, [r3, #0]
 800324e:	e00b      	b.n	8003268 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	331b      	adds	r3, #27
 8003258:	011b      	lsls	r3, r3, #4
 800325a:	4413      	add	r3, r2
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	08db      	lsrs	r3, r3, #3
 8003260:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	331b      	adds	r3, #27
 8003270:	011b      	lsls	r3, r3, #4
 8003272:	4413      	add	r3, r2
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 0202 	and.w	r2, r3, #2
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	331b      	adds	r3, #27
 8003286:	011b      	lsls	r3, r3, #4
 8003288:	4413      	add	r3, r2
 800328a:	3304      	adds	r3, #4
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0308 	and.w	r3, r3, #8
 8003292:	2b00      	cmp	r3, #0
 8003294:	d003      	beq.n	800329e <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2208      	movs	r2, #8
 800329a:	611a      	str	r2, [r3, #16]
 800329c:	e00b      	b.n	80032b6 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	331b      	adds	r3, #27
 80032a6:	011b      	lsls	r3, r3, #4
 80032a8:	4413      	add	r3, r2
 80032aa:	3304      	adds	r3, #4
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 020f 	and.w	r2, r3, #15
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	331b      	adds	r3, #27
 80032be:	011b      	lsls	r3, r3, #4
 80032c0:	4413      	add	r3, r2
 80032c2:	3304      	adds	r3, #4
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	0a1b      	lsrs	r3, r3, #8
 80032c8:	b2da      	uxtb	r2, r3
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	331b      	adds	r3, #27
 80032d6:	011b      	lsls	r3, r3, #4
 80032d8:	4413      	add	r3, r2
 80032da:	3304      	adds	r3, #4
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	0c1b      	lsrs	r3, r3, #16
 80032e0:	b29a      	uxth	r2, r3
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	011b      	lsls	r3, r3, #4
 80032ee:	4413      	add	r3, r2
 80032f0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	b2da      	uxtb	r2, r3
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	011b      	lsls	r3, r3, #4
 8003304:	4413      	add	r3, r2
 8003306:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	0a1a      	lsrs	r2, r3, #8
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	3301      	adds	r3, #1
 8003312:	b2d2      	uxtb	r2, r2
 8003314:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	011b      	lsls	r3, r3, #4
 800331e:	4413      	add	r3, r2
 8003320:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	0c1a      	lsrs	r2, r3, #16
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	3302      	adds	r3, #2
 800332c:	b2d2      	uxtb	r2, r2
 800332e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	011b      	lsls	r3, r3, #4
 8003338:	4413      	add	r3, r2
 800333a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	0e1a      	lsrs	r2, r3, #24
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	3303      	adds	r3, #3
 8003346:	b2d2      	uxtb	r2, r2
 8003348:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	011b      	lsls	r3, r3, #4
 8003352:	4413      	add	r3, r2
 8003354:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	3304      	adds	r3, #4
 800335e:	b2d2      	uxtb	r2, r2
 8003360:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	011b      	lsls	r3, r3, #4
 800336a:	4413      	add	r3, r2
 800336c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	0a1a      	lsrs	r2, r3, #8
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	3305      	adds	r3, #5
 8003378:	b2d2      	uxtb	r2, r2
 800337a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	011b      	lsls	r3, r3, #4
 8003384:	4413      	add	r3, r2
 8003386:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	0c1a      	lsrs	r2, r3, #16
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	3306      	adds	r3, #6
 8003392:	b2d2      	uxtb	r2, r2
 8003394:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	011b      	lsls	r3, r3, #4
 800339e:	4413      	add	r3, r2
 80033a0:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	0e1a      	lsrs	r2, r3, #24
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	3307      	adds	r3, #7
 80033ac:	b2d2      	uxtb	r2, r2
 80033ae:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d108      	bne.n	80033c8 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	68da      	ldr	r2, [r3, #12]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f042 0220 	orr.w	r2, r2, #32
 80033c4:	60da      	str	r2, [r3, #12]
 80033c6:	e007      	b.n	80033d8 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	691a      	ldr	r2, [r3, #16]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f042 0220 	orr.w	r2, r2, #32
 80033d6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80033d8:	2300      	movs	r3, #0
 80033da:	e006      	b.n	80033ea <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033e0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
  }
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	371c      	adds	r7, #28
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr

080033f6 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80033f6:	b480      	push	{r7}
 80033f8:	b085      	sub	sp, #20
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	6078      	str	r0, [r7, #4]
 80033fe:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003406:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003408:	7bfb      	ldrb	r3, [r7, #15]
 800340a:	2b01      	cmp	r3, #1
 800340c:	d002      	beq.n	8003414 <HAL_CAN_ActivateNotification+0x1e>
 800340e:	7bfb      	ldrb	r3, [r7, #15]
 8003410:	2b02      	cmp	r3, #2
 8003412:	d109      	bne.n	8003428 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	6959      	ldr	r1, [r3, #20]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	683a      	ldr	r2, [r7, #0]
 8003420:	430a      	orrs	r2, r1
 8003422:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003424:	2300      	movs	r3, #0
 8003426:	e006      	b.n	8003436 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800342c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
  }
}
 8003436:	4618      	mov	r0, r3
 8003438:	3714      	adds	r7, #20
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr

08003442 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003442:	b580      	push	{r7, lr}
 8003444:	b08a      	sub	sp, #40	@ 0x28
 8003446:	af00      	add	r7, sp, #0
 8003448:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800344a:	2300      	movs	r3, #0
 800344c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	695b      	ldr	r3, [r3, #20]
 8003454:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	691b      	ldr	r3, [r3, #16]
 8003474:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	699b      	ldr	r3, [r3, #24]
 800347c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800347e:	6a3b      	ldr	r3, [r7, #32]
 8003480:	f003 0301 	and.w	r3, r3, #1
 8003484:	2b00      	cmp	r3, #0
 8003486:	d07c      	beq.n	8003582 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003488:	69bb      	ldr	r3, [r7, #24]
 800348a:	f003 0301 	and.w	r3, r3, #1
 800348e:	2b00      	cmp	r3, #0
 8003490:	d023      	beq.n	80034da <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	2201      	movs	r2, #1
 8003498:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800349a:	69bb      	ldr	r3, [r7, #24]
 800349c:	f003 0302 	and.w	r3, r3, #2
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d003      	beq.n	80034ac <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f000 f983 	bl	80037b0 <HAL_CAN_TxMailbox0CompleteCallback>
 80034aa:	e016      	b.n	80034da <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80034ac:	69bb      	ldr	r3, [r7, #24]
 80034ae:	f003 0304 	and.w	r3, r3, #4
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d004      	beq.n	80034c0 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80034b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034b8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80034bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80034be:	e00c      	b.n	80034da <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	f003 0308 	and.w	r3, r3, #8
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d004      	beq.n	80034d4 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80034ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034cc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80034d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80034d2:	e002      	b.n	80034da <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f000 f989 	bl	80037ec <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80034da:	69bb      	ldr	r3, [r7, #24]
 80034dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d024      	beq.n	800352e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80034ec:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80034ee:	69bb      	ldr	r3, [r7, #24]
 80034f0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d003      	beq.n	8003500 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f000 f963 	bl	80037c4 <HAL_CAN_TxMailbox1CompleteCallback>
 80034fe:	e016      	b.n	800352e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003500:	69bb      	ldr	r3, [r7, #24]
 8003502:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003506:	2b00      	cmp	r3, #0
 8003508:	d004      	beq.n	8003514 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800350a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800350c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003510:	627b      	str	r3, [r7, #36]	@ 0x24
 8003512:	e00c      	b.n	800352e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800351a:	2b00      	cmp	r3, #0
 800351c:	d004      	beq.n	8003528 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800351e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003520:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003524:	627b      	str	r3, [r7, #36]	@ 0x24
 8003526:	e002      	b.n	800352e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f000 f969 	bl	8003800 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800352e:	69bb      	ldr	r3, [r7, #24]
 8003530:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003534:	2b00      	cmp	r3, #0
 8003536:	d024      	beq.n	8003582 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003540:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003548:	2b00      	cmp	r3, #0
 800354a:	d003      	beq.n	8003554 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f000 f943 	bl	80037d8 <HAL_CAN_TxMailbox2CompleteCallback>
 8003552:	e016      	b.n	8003582 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003554:	69bb      	ldr	r3, [r7, #24]
 8003556:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800355a:	2b00      	cmp	r3, #0
 800355c:	d004      	beq.n	8003568 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800355e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003560:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003564:	627b      	str	r3, [r7, #36]	@ 0x24
 8003566:	e00c      	b.n	8003582 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003568:	69bb      	ldr	r3, [r7, #24]
 800356a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d004      	beq.n	800357c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003574:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003578:	627b      	str	r3, [r7, #36]	@ 0x24
 800357a:	e002      	b.n	8003582 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	f000 f949 	bl	8003814 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003582:	6a3b      	ldr	r3, [r7, #32]
 8003584:	f003 0308 	and.w	r3, r3, #8
 8003588:	2b00      	cmp	r3, #0
 800358a:	d00c      	beq.n	80035a6 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	f003 0310 	and.w	r3, r3, #16
 8003592:	2b00      	cmp	r3, #0
 8003594:	d007      	beq.n	80035a6 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003598:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800359c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	2210      	movs	r2, #16
 80035a4:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80035a6:	6a3b      	ldr	r3, [r7, #32]
 80035a8:	f003 0304 	and.w	r3, r3, #4
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d00b      	beq.n	80035c8 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	f003 0308 	and.w	r3, r3, #8
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d006      	beq.n	80035c8 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	2208      	movs	r2, #8
 80035c0:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f000 f930 	bl	8003828 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80035c8:	6a3b      	ldr	r3, [r7, #32]
 80035ca:	f003 0302 	and.w	r3, r3, #2
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d009      	beq.n	80035e6 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	f003 0303 	and.w	r3, r3, #3
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d002      	beq.n	80035e6 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f7fd fcd7 	bl	8000f94 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80035e6:	6a3b      	ldr	r3, [r7, #32]
 80035e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d00c      	beq.n	800360a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	f003 0310 	and.w	r3, r3, #16
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d007      	beq.n	800360a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80035fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035fc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003600:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	2210      	movs	r2, #16
 8003608:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800360a:	6a3b      	ldr	r3, [r7, #32]
 800360c:	f003 0320 	and.w	r3, r3, #32
 8003610:	2b00      	cmp	r3, #0
 8003612:	d00b      	beq.n	800362c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	f003 0308 	and.w	r3, r3, #8
 800361a:	2b00      	cmp	r3, #0
 800361c:	d006      	beq.n	800362c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	2208      	movs	r2, #8
 8003624:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f000 f912 	bl	8003850 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800362c:	6a3b      	ldr	r3, [r7, #32]
 800362e:	f003 0310 	and.w	r3, r3, #16
 8003632:	2b00      	cmp	r3, #0
 8003634:	d009      	beq.n	800364a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	691b      	ldr	r3, [r3, #16]
 800363c:	f003 0303 	and.w	r3, r3, #3
 8003640:	2b00      	cmp	r3, #0
 8003642:	d002      	beq.n	800364a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	f000 f8f9 	bl	800383c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800364a:	6a3b      	ldr	r3, [r7, #32]
 800364c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003650:	2b00      	cmp	r3, #0
 8003652:	d00b      	beq.n	800366c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003654:	69fb      	ldr	r3, [r7, #28]
 8003656:	f003 0310 	and.w	r3, r3, #16
 800365a:	2b00      	cmp	r3, #0
 800365c:	d006      	beq.n	800366c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	2210      	movs	r2, #16
 8003664:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f000 f8fc 	bl	8003864 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800366c:	6a3b      	ldr	r3, [r7, #32]
 800366e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d00b      	beq.n	800368e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	f003 0308 	and.w	r3, r3, #8
 800367c:	2b00      	cmp	r3, #0
 800367e:	d006      	beq.n	800368e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	2208      	movs	r2, #8
 8003686:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f000 f8f5 	bl	8003878 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800368e:	6a3b      	ldr	r3, [r7, #32]
 8003690:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003694:	2b00      	cmp	r3, #0
 8003696:	d07b      	beq.n	8003790 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003698:	69fb      	ldr	r3, [r7, #28]
 800369a:	f003 0304 	and.w	r3, r3, #4
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d072      	beq.n	8003788 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80036a2:	6a3b      	ldr	r3, [r7, #32]
 80036a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d008      	beq.n	80036be <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d003      	beq.n	80036be <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80036b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036b8:	f043 0301 	orr.w	r3, r3, #1
 80036bc:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80036be:	6a3b      	ldr	r3, [r7, #32]
 80036c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d008      	beq.n	80036da <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d003      	beq.n	80036da <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80036d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036d4:	f043 0302 	orr.w	r3, r3, #2
 80036d8:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80036da:	6a3b      	ldr	r3, [r7, #32]
 80036dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d008      	beq.n	80036f6 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d003      	beq.n	80036f6 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80036ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036f0:	f043 0304 	orr.w	r3, r3, #4
 80036f4:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80036f6:	6a3b      	ldr	r3, [r7, #32]
 80036f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d043      	beq.n	8003788 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003706:	2b00      	cmp	r3, #0
 8003708:	d03e      	beq.n	8003788 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003710:	2b60      	cmp	r3, #96	@ 0x60
 8003712:	d02b      	beq.n	800376c <HAL_CAN_IRQHandler+0x32a>
 8003714:	2b60      	cmp	r3, #96	@ 0x60
 8003716:	d82e      	bhi.n	8003776 <HAL_CAN_IRQHandler+0x334>
 8003718:	2b50      	cmp	r3, #80	@ 0x50
 800371a:	d022      	beq.n	8003762 <HAL_CAN_IRQHandler+0x320>
 800371c:	2b50      	cmp	r3, #80	@ 0x50
 800371e:	d82a      	bhi.n	8003776 <HAL_CAN_IRQHandler+0x334>
 8003720:	2b40      	cmp	r3, #64	@ 0x40
 8003722:	d019      	beq.n	8003758 <HAL_CAN_IRQHandler+0x316>
 8003724:	2b40      	cmp	r3, #64	@ 0x40
 8003726:	d826      	bhi.n	8003776 <HAL_CAN_IRQHandler+0x334>
 8003728:	2b30      	cmp	r3, #48	@ 0x30
 800372a:	d010      	beq.n	800374e <HAL_CAN_IRQHandler+0x30c>
 800372c:	2b30      	cmp	r3, #48	@ 0x30
 800372e:	d822      	bhi.n	8003776 <HAL_CAN_IRQHandler+0x334>
 8003730:	2b10      	cmp	r3, #16
 8003732:	d002      	beq.n	800373a <HAL_CAN_IRQHandler+0x2f8>
 8003734:	2b20      	cmp	r3, #32
 8003736:	d005      	beq.n	8003744 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003738:	e01d      	b.n	8003776 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800373a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800373c:	f043 0308 	orr.w	r3, r3, #8
 8003740:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003742:	e019      	b.n	8003778 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003746:	f043 0310 	orr.w	r3, r3, #16
 800374a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800374c:	e014      	b.n	8003778 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800374e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003750:	f043 0320 	orr.w	r3, r3, #32
 8003754:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003756:	e00f      	b.n	8003778 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800375a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800375e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003760:	e00a      	b.n	8003778 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003764:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003768:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800376a:	e005      	b.n	8003778 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800376c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800376e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003772:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003774:	e000      	b.n	8003778 <HAL_CAN_IRQHandler+0x336>
            break;
 8003776:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	699a      	ldr	r2, [r3, #24]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003786:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	2204      	movs	r2, #4
 800378e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003792:	2b00      	cmp	r3, #0
 8003794:	d008      	beq.n	80037a8 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800379a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800379c:	431a      	orrs	r2, r3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 f872 	bl	800388c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80037a8:	bf00      	nop
 80037aa:	3728      	adds	r7, #40	@ 0x28
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}

080037b0 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b083      	sub	sp, #12
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80037b8:	bf00      	nop
 80037ba:	370c      	adds	r7, #12
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr

080037c4 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80037cc:	bf00      	nop
 80037ce:	370c      	adds	r7, #12
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr

080037d8 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80037e0:	bf00      	nop
 80037e2:	370c      	adds	r7, #12
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr

080037ec <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b083      	sub	sp, #12
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80037f4:	bf00      	nop
 80037f6:	370c      	adds	r7, #12
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr

08003800 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003800:	b480      	push	{r7}
 8003802:	b083      	sub	sp, #12
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003808:	bf00      	nop
 800380a:	370c      	adds	r7, #12
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr

08003814 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003814:	b480      	push	{r7}
 8003816:	b083      	sub	sp, #12
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800381c:	bf00      	nop
 800381e:	370c      	adds	r7, #12
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr

08003828 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003830:	bf00      	nop
 8003832:	370c      	adds	r7, #12
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr

0800383c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003844:	bf00      	nop
 8003846:	370c      	adds	r7, #12
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr

08003850 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003850:	b480      	push	{r7}
 8003852:	b083      	sub	sp, #12
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003858:	bf00      	nop
 800385a:	370c      	adds	r7, #12
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr

08003864 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003864:	b480      	push	{r7}
 8003866:	b083      	sub	sp, #12
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800386c:	bf00      	nop
 800386e:	370c      	adds	r7, #12
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr

08003878 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003878:	b480      	push	{r7}
 800387a:	b083      	sub	sp, #12
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003880:	bf00      	nop
 8003882:	370c      	adds	r7, #12
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr

0800388c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800388c:	b480      	push	{r7}
 800388e:	b083      	sub	sp, #12
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003894:	bf00      	nop
 8003896:	370c      	adds	r7, #12
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr

080038a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b085      	sub	sp, #20
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	f003 0307 	and.w	r3, r3, #7
 80038ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038b0:	4b0c      	ldr	r3, [pc, #48]	@ (80038e4 <__NVIC_SetPriorityGrouping+0x44>)
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038b6:	68ba      	ldr	r2, [r7, #8]
 80038b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80038bc:	4013      	ands	r3, r2
 80038be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80038c8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80038cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038d2:	4a04      	ldr	r2, [pc, #16]	@ (80038e4 <__NVIC_SetPriorityGrouping+0x44>)
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	60d3      	str	r3, [r2, #12]
}
 80038d8:	bf00      	nop
 80038da:	3714      	adds	r7, #20
 80038dc:	46bd      	mov	sp, r7
 80038de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e2:	4770      	bx	lr
 80038e4:	e000ed00 	.word	0xe000ed00

080038e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80038e8:	b480      	push	{r7}
 80038ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038ec:	4b04      	ldr	r3, [pc, #16]	@ (8003900 <__NVIC_GetPriorityGrouping+0x18>)
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	0a1b      	lsrs	r3, r3, #8
 80038f2:	f003 0307 	and.w	r3, r3, #7
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr
 8003900:	e000ed00 	.word	0xe000ed00

08003904 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003904:	b480      	push	{r7}
 8003906:	b083      	sub	sp, #12
 8003908:	af00      	add	r7, sp, #0
 800390a:	4603      	mov	r3, r0
 800390c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800390e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003912:	2b00      	cmp	r3, #0
 8003914:	db0b      	blt.n	800392e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003916:	79fb      	ldrb	r3, [r7, #7]
 8003918:	f003 021f 	and.w	r2, r3, #31
 800391c:	4907      	ldr	r1, [pc, #28]	@ (800393c <__NVIC_EnableIRQ+0x38>)
 800391e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003922:	095b      	lsrs	r3, r3, #5
 8003924:	2001      	movs	r0, #1
 8003926:	fa00 f202 	lsl.w	r2, r0, r2
 800392a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800392e:	bf00      	nop
 8003930:	370c      	adds	r7, #12
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr
 800393a:	bf00      	nop
 800393c:	e000e100 	.word	0xe000e100

08003940 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003940:	b480      	push	{r7}
 8003942:	b083      	sub	sp, #12
 8003944:	af00      	add	r7, sp, #0
 8003946:	4603      	mov	r3, r0
 8003948:	6039      	str	r1, [r7, #0]
 800394a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800394c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003950:	2b00      	cmp	r3, #0
 8003952:	db0a      	blt.n	800396a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	b2da      	uxtb	r2, r3
 8003958:	490c      	ldr	r1, [pc, #48]	@ (800398c <__NVIC_SetPriority+0x4c>)
 800395a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800395e:	0112      	lsls	r2, r2, #4
 8003960:	b2d2      	uxtb	r2, r2
 8003962:	440b      	add	r3, r1
 8003964:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003968:	e00a      	b.n	8003980 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	b2da      	uxtb	r2, r3
 800396e:	4908      	ldr	r1, [pc, #32]	@ (8003990 <__NVIC_SetPriority+0x50>)
 8003970:	79fb      	ldrb	r3, [r7, #7]
 8003972:	f003 030f 	and.w	r3, r3, #15
 8003976:	3b04      	subs	r3, #4
 8003978:	0112      	lsls	r2, r2, #4
 800397a:	b2d2      	uxtb	r2, r2
 800397c:	440b      	add	r3, r1
 800397e:	761a      	strb	r2, [r3, #24]
}
 8003980:	bf00      	nop
 8003982:	370c      	adds	r7, #12
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr
 800398c:	e000e100 	.word	0xe000e100
 8003990:	e000ed00 	.word	0xe000ed00

08003994 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003994:	b480      	push	{r7}
 8003996:	b089      	sub	sp, #36	@ 0x24
 8003998:	af00      	add	r7, sp, #0
 800399a:	60f8      	str	r0, [r7, #12]
 800399c:	60b9      	str	r1, [r7, #8]
 800399e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f003 0307 	and.w	r3, r3, #7
 80039a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039a8:	69fb      	ldr	r3, [r7, #28]
 80039aa:	f1c3 0307 	rsb	r3, r3, #7
 80039ae:	2b04      	cmp	r3, #4
 80039b0:	bf28      	it	cs
 80039b2:	2304      	movcs	r3, #4
 80039b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	3304      	adds	r3, #4
 80039ba:	2b06      	cmp	r3, #6
 80039bc:	d902      	bls.n	80039c4 <NVIC_EncodePriority+0x30>
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	3b03      	subs	r3, #3
 80039c2:	e000      	b.n	80039c6 <NVIC_EncodePriority+0x32>
 80039c4:	2300      	movs	r3, #0
 80039c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039c8:	f04f 32ff 	mov.w	r2, #4294967295
 80039cc:	69bb      	ldr	r3, [r7, #24]
 80039ce:	fa02 f303 	lsl.w	r3, r2, r3
 80039d2:	43da      	mvns	r2, r3
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	401a      	ands	r2, r3
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039dc:	f04f 31ff 	mov.w	r1, #4294967295
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	fa01 f303 	lsl.w	r3, r1, r3
 80039e6:	43d9      	mvns	r1, r3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039ec:	4313      	orrs	r3, r2
         );
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3724      	adds	r7, #36	@ 0x24
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr
	...

080039fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b082      	sub	sp, #8
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	3b01      	subs	r3, #1
 8003a08:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003a0c:	d301      	bcc.n	8003a12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e00f      	b.n	8003a32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a12:	4a0a      	ldr	r2, [pc, #40]	@ (8003a3c <SysTick_Config+0x40>)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	3b01      	subs	r3, #1
 8003a18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a1a:	210f      	movs	r1, #15
 8003a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a20:	f7ff ff8e 	bl	8003940 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a24:	4b05      	ldr	r3, [pc, #20]	@ (8003a3c <SysTick_Config+0x40>)
 8003a26:	2200      	movs	r2, #0
 8003a28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a2a:	4b04      	ldr	r3, [pc, #16]	@ (8003a3c <SysTick_Config+0x40>)
 8003a2c:	2207      	movs	r2, #7
 8003a2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a30:	2300      	movs	r3, #0
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3708      	adds	r7, #8
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	e000e010 	.word	0xe000e010

08003a40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b082      	sub	sp, #8
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f7ff ff29 	bl	80038a0 <__NVIC_SetPriorityGrouping>
}
 8003a4e:	bf00      	nop
 8003a50:	3708      	adds	r7, #8
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}

08003a56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a56:	b580      	push	{r7, lr}
 8003a58:	b086      	sub	sp, #24
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	60b9      	str	r1, [r7, #8]
 8003a60:	607a      	str	r2, [r7, #4]
 8003a62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003a64:	2300      	movs	r3, #0
 8003a66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a68:	f7ff ff3e 	bl	80038e8 <__NVIC_GetPriorityGrouping>
 8003a6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	68b9      	ldr	r1, [r7, #8]
 8003a72:	6978      	ldr	r0, [r7, #20]
 8003a74:	f7ff ff8e 	bl	8003994 <NVIC_EncodePriority>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a7e:	4611      	mov	r1, r2
 8003a80:	4618      	mov	r0, r3
 8003a82:	f7ff ff5d 	bl	8003940 <__NVIC_SetPriority>
}
 8003a86:	bf00      	nop
 8003a88:	3718      	adds	r7, #24
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}

08003a8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a8e:	b580      	push	{r7, lr}
 8003a90:	b082      	sub	sp, #8
 8003a92:	af00      	add	r7, sp, #0
 8003a94:	4603      	mov	r3, r0
 8003a96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f7ff ff31 	bl	8003904 <__NVIC_EnableIRQ>
}
 8003aa2:	bf00      	nop
 8003aa4:	3708      	adds	r7, #8
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}

08003aaa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003aaa:	b580      	push	{r7, lr}
 8003aac:	b082      	sub	sp, #8
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f7ff ffa2 	bl	80039fc <SysTick_Config>
 8003ab8:	4603      	mov	r3, r0
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3708      	adds	r7, #8
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}

08003ac2 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003ac2:	b580      	push	{r7, lr}
 8003ac4:	b084      	sub	sp, #16
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003aca:	2300      	movs	r3, #0
 8003acc:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d101      	bne.n	8003ad8 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e037      	b.n	8003b48 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2202      	movs	r2, #2
 8003adc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003aee:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8003af2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003afc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	68db      	ldr	r3, [r3, #12]
 8003b02:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b08:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	695b      	ldr	r3, [r3, #20]
 8003b0e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b14:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	69db      	ldr	r3, [r3, #28]
 8003b1a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003b1c:	68fa      	ldr	r2, [r7, #12]
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	68fa      	ldr	r2, [r7, #12]
 8003b28:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f000 f940 	bl	8003db0 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2200      	movs	r2, #0
 8003b34:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2201      	movs	r2, #1
 8003b3a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003b46:	2300      	movs	r3, #0
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3710      	adds	r7, #16
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}

08003b50 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b086      	sub	sp, #24
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	60f8      	str	r0, [r7, #12]
 8003b58:	60b9      	str	r1, [r7, #8]
 8003b5a:	607a      	str	r2, [r7, #4]
 8003b5c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d101      	bne.n	8003b70 <HAL_DMA_Start_IT+0x20>
 8003b6c:	2302      	movs	r3, #2
 8003b6e:	e04a      	b.n	8003c06 <HAL_DMA_Start_IT+0xb6>
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d13a      	bne.n	8003bf8 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2202      	movs	r2, #2
 8003b86:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f022 0201 	bic.w	r2, r2, #1
 8003b9e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	687a      	ldr	r2, [r7, #4]
 8003ba4:	68b9      	ldr	r1, [r7, #8]
 8003ba6:	68f8      	ldr	r0, [r7, #12]
 8003ba8:	f000 f8d4 	bl	8003d54 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d008      	beq.n	8003bc6 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f042 020e 	orr.w	r2, r2, #14
 8003bc2:	601a      	str	r2, [r3, #0]
 8003bc4:	e00f      	b.n	8003be6 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f042 020a 	orr.w	r2, r2, #10
 8003bd4:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f022 0204 	bic.w	r2, r2, #4
 8003be4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f042 0201 	orr.w	r2, r2, #1
 8003bf4:	601a      	str	r2, [r3, #0]
 8003bf6:	e005      	b.n	8003c04 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003c00:	2302      	movs	r3, #2
 8003c02:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003c04:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3718      	adds	r7, #24
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}

08003c0e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c0e:	b580      	push	{r7, lr}
 8003c10:	b084      	sub	sp, #16
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c2a:	2204      	movs	r2, #4
 8003c2c:	409a      	lsls	r2, r3
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	4013      	ands	r3, r2
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d024      	beq.n	8003c80 <HAL_DMA_IRQHandler+0x72>
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	f003 0304 	and.w	r3, r3, #4
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d01f      	beq.n	8003c80 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0320 	and.w	r3, r3, #32
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d107      	bne.n	8003c5e <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f022 0204 	bic.w	r2, r2, #4
 8003c5c:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c66:	2104      	movs	r1, #4
 8003c68:	fa01 f202 	lsl.w	r2, r1, r2
 8003c6c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d06a      	beq.n	8003d4c <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003c7e:	e065      	b.n	8003d4c <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c84:	2202      	movs	r2, #2
 8003c86:	409a      	lsls	r2, r3
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d02c      	beq.n	8003cea <HAL_DMA_IRQHandler+0xdc>
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	f003 0302 	and.w	r3, r3, #2
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d027      	beq.n	8003cea <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 0320 	and.w	r3, r3, #32
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d10b      	bne.n	8003cc0 <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f022 020a 	bic.w	r2, r2, #10
 8003cb6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cc8:	2102      	movs	r1, #2
 8003cca:	fa01 f202 	lsl.w	r2, r1, r2
 8003cce:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d035      	beq.n	8003d4c <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003ce8:	e030      	b.n	8003d4c <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cee:	2208      	movs	r2, #8
 8003cf0:	409a      	lsls	r2, r3
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d028      	beq.n	8003d4c <HAL_DMA_IRQHandler+0x13e>
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	f003 0308 	and.w	r3, r3, #8
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d023      	beq.n	8003d4c <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f022 020e 	bic.w	r2, r2, #14
 8003d12:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d1c:	2101      	movs	r1, #1
 8003d1e:	fa01 f202 	lsl.w	r2, r1, r2
 8003d22:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2201      	movs	r2, #1
 8003d28:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2200      	movs	r2, #0
 8003d36:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d004      	beq.n	8003d4c <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	4798      	blx	r3
    }
  }
}
 8003d4a:	e7ff      	b.n	8003d4c <HAL_DMA_IRQHandler+0x13e>
 8003d4c:	bf00      	nop
 8003d4e:	3710      	adds	r7, #16
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}

08003d54 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b085      	sub	sp, #20
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	60f8      	str	r0, [r7, #12]
 8003d5c:	60b9      	str	r1, [r7, #8]
 8003d5e:	607a      	str	r2, [r7, #4]
 8003d60:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d6a:	2101      	movs	r1, #1
 8003d6c:	fa01 f202 	lsl.w	r2, r1, r2
 8003d70:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	683a      	ldr	r2, [r7, #0]
 8003d78:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	2b10      	cmp	r3, #16
 8003d80:	d108      	bne.n	8003d94 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	68ba      	ldr	r2, [r7, #8]
 8003d90:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003d92:	e007      	b.n	8003da4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	68ba      	ldr	r2, [r7, #8]
 8003d9a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	60da      	str	r2, [r3, #12]
}
 8003da4:	bf00      	nop
 8003da6:	3714      	adds	r7, #20
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr

08003db0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b083      	sub	sp, #12
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	4b09      	ldr	r3, [pc, #36]	@ (8003de4 <DMA_CalcBaseAndBitshift+0x34>)
 8003dc0:	4413      	add	r3, r2
 8003dc2:	4a09      	ldr	r2, [pc, #36]	@ (8003de8 <DMA_CalcBaseAndBitshift+0x38>)
 8003dc4:	fba2 2303 	umull	r2, r3, r2, r3
 8003dc8:	091b      	lsrs	r3, r3, #4
 8003dca:	009a      	lsls	r2, r3, #2
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	4a06      	ldr	r2, [pc, #24]	@ (8003dec <DMA_CalcBaseAndBitshift+0x3c>)
 8003dd4:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 8003dd6:	bf00      	nop
 8003dd8:	370c      	adds	r7, #12
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr
 8003de2:	bf00      	nop
 8003de4:	bffdfff8 	.word	0xbffdfff8
 8003de8:	cccccccd 	.word	0xcccccccd
 8003dec:	40020000 	.word	0x40020000

08003df0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b087      	sub	sp, #28
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003dfe:	e14e      	b.n	800409e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	2101      	movs	r1, #1
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	fa01 f303 	lsl.w	r3, r1, r3
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	f000 8140 	beq.w	8004098 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	f003 0303 	and.w	r3, r3, #3
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d005      	beq.n	8003e30 <HAL_GPIO_Init+0x40>
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	f003 0303 	and.w	r3, r3, #3
 8003e2c:	2b02      	cmp	r3, #2
 8003e2e:	d130      	bne.n	8003e92 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	005b      	lsls	r3, r3, #1
 8003e3a:	2203      	movs	r2, #3
 8003e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e40:	43db      	mvns	r3, r3
 8003e42:	693a      	ldr	r2, [r7, #16]
 8003e44:	4013      	ands	r3, r2
 8003e46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	68da      	ldr	r2, [r3, #12]
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	005b      	lsls	r3, r3, #1
 8003e50:	fa02 f303 	lsl.w	r3, r2, r3
 8003e54:	693a      	ldr	r2, [r7, #16]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	693a      	ldr	r2, [r7, #16]
 8003e5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e66:	2201      	movs	r2, #1
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6e:	43db      	mvns	r3, r3
 8003e70:	693a      	ldr	r2, [r7, #16]
 8003e72:	4013      	ands	r3, r2
 8003e74:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	091b      	lsrs	r3, r3, #4
 8003e7c:	f003 0201 	and.w	r2, r3, #1
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	fa02 f303 	lsl.w	r3, r2, r3
 8003e86:	693a      	ldr	r2, [r7, #16]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	693a      	ldr	r2, [r7, #16]
 8003e90:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	f003 0303 	and.w	r3, r3, #3
 8003e9a:	2b03      	cmp	r3, #3
 8003e9c:	d017      	beq.n	8003ece <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	68db      	ldr	r3, [r3, #12]
 8003ea2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	005b      	lsls	r3, r3, #1
 8003ea8:	2203      	movs	r2, #3
 8003eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8003eae:	43db      	mvns	r3, r3
 8003eb0:	693a      	ldr	r2, [r7, #16]
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	689a      	ldr	r2, [r3, #8]
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	005b      	lsls	r3, r3, #1
 8003ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec2:	693a      	ldr	r2, [r7, #16]
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	693a      	ldr	r2, [r7, #16]
 8003ecc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	f003 0303 	and.w	r3, r3, #3
 8003ed6:	2b02      	cmp	r3, #2
 8003ed8:	d123      	bne.n	8003f22 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	08da      	lsrs	r2, r3, #3
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	3208      	adds	r2, #8
 8003ee2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ee6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	f003 0307 	and.w	r3, r3, #7
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	220f      	movs	r2, #15
 8003ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef6:	43db      	mvns	r3, r3
 8003ef8:	693a      	ldr	r2, [r7, #16]
 8003efa:	4013      	ands	r3, r2
 8003efc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	691a      	ldr	r2, [r3, #16]
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	f003 0307 	and.w	r3, r3, #7
 8003f08:	009b      	lsls	r3, r3, #2
 8003f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0e:	693a      	ldr	r2, [r7, #16]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	08da      	lsrs	r2, r3, #3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	3208      	adds	r2, #8
 8003f1c:	6939      	ldr	r1, [r7, #16]
 8003f1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	005b      	lsls	r3, r3, #1
 8003f2c:	2203      	movs	r2, #3
 8003f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f32:	43db      	mvns	r3, r3
 8003f34:	693a      	ldr	r2, [r7, #16]
 8003f36:	4013      	ands	r3, r2
 8003f38:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	f003 0203 	and.w	r2, r3, #3
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	005b      	lsls	r3, r3, #1
 8003f46:	fa02 f303 	lsl.w	r3, r2, r3
 8003f4a:	693a      	ldr	r2, [r7, #16]
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	693a      	ldr	r2, [r7, #16]
 8003f54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	f000 809a 	beq.w	8004098 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f64:	4b55      	ldr	r3, [pc, #340]	@ (80040bc <HAL_GPIO_Init+0x2cc>)
 8003f66:	699b      	ldr	r3, [r3, #24]
 8003f68:	4a54      	ldr	r2, [pc, #336]	@ (80040bc <HAL_GPIO_Init+0x2cc>)
 8003f6a:	f043 0301 	orr.w	r3, r3, #1
 8003f6e:	6193      	str	r3, [r2, #24]
 8003f70:	4b52      	ldr	r3, [pc, #328]	@ (80040bc <HAL_GPIO_Init+0x2cc>)
 8003f72:	699b      	ldr	r3, [r3, #24]
 8003f74:	f003 0301 	and.w	r3, r3, #1
 8003f78:	60bb      	str	r3, [r7, #8]
 8003f7a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003f7c:	4a50      	ldr	r2, [pc, #320]	@ (80040c0 <HAL_GPIO_Init+0x2d0>)
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	089b      	lsrs	r3, r3, #2
 8003f82:	3302      	adds	r3, #2
 8003f84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f88:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	f003 0303 	and.w	r3, r3, #3
 8003f90:	009b      	lsls	r3, r3, #2
 8003f92:	220f      	movs	r2, #15
 8003f94:	fa02 f303 	lsl.w	r3, r2, r3
 8003f98:	43db      	mvns	r3, r3
 8003f9a:	693a      	ldr	r2, [r7, #16]
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003fa6:	d013      	beq.n	8003fd0 <HAL_GPIO_Init+0x1e0>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	4a46      	ldr	r2, [pc, #280]	@ (80040c4 <HAL_GPIO_Init+0x2d4>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d00d      	beq.n	8003fcc <HAL_GPIO_Init+0x1dc>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	4a45      	ldr	r2, [pc, #276]	@ (80040c8 <HAL_GPIO_Init+0x2d8>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d007      	beq.n	8003fc8 <HAL_GPIO_Init+0x1d8>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	4a44      	ldr	r2, [pc, #272]	@ (80040cc <HAL_GPIO_Init+0x2dc>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d101      	bne.n	8003fc4 <HAL_GPIO_Init+0x1d4>
 8003fc0:	2303      	movs	r3, #3
 8003fc2:	e006      	b.n	8003fd2 <HAL_GPIO_Init+0x1e2>
 8003fc4:	2305      	movs	r3, #5
 8003fc6:	e004      	b.n	8003fd2 <HAL_GPIO_Init+0x1e2>
 8003fc8:	2302      	movs	r3, #2
 8003fca:	e002      	b.n	8003fd2 <HAL_GPIO_Init+0x1e2>
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e000      	b.n	8003fd2 <HAL_GPIO_Init+0x1e2>
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	697a      	ldr	r2, [r7, #20]
 8003fd4:	f002 0203 	and.w	r2, r2, #3
 8003fd8:	0092      	lsls	r2, r2, #2
 8003fda:	4093      	lsls	r3, r2
 8003fdc:	693a      	ldr	r2, [r7, #16]
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003fe2:	4937      	ldr	r1, [pc, #220]	@ (80040c0 <HAL_GPIO_Init+0x2d0>)
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	089b      	lsrs	r3, r3, #2
 8003fe8:	3302      	adds	r3, #2
 8003fea:	693a      	ldr	r2, [r7, #16]
 8003fec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ff0:	4b37      	ldr	r3, [pc, #220]	@ (80040d0 <HAL_GPIO_Init+0x2e0>)
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	43db      	mvns	r3, r3
 8003ffa:	693a      	ldr	r2, [r7, #16]
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004008:	2b00      	cmp	r3, #0
 800400a:	d003      	beq.n	8004014 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 800400c:	693a      	ldr	r2, [r7, #16]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	4313      	orrs	r3, r2
 8004012:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004014:	4a2e      	ldr	r2, [pc, #184]	@ (80040d0 <HAL_GPIO_Init+0x2e0>)
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800401a:	4b2d      	ldr	r3, [pc, #180]	@ (80040d0 <HAL_GPIO_Init+0x2e0>)
 800401c:	68db      	ldr	r3, [r3, #12]
 800401e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	43db      	mvns	r3, r3
 8004024:	693a      	ldr	r2, [r7, #16]
 8004026:	4013      	ands	r3, r2
 8004028:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004032:	2b00      	cmp	r3, #0
 8004034:	d003      	beq.n	800403e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8004036:	693a      	ldr	r2, [r7, #16]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	4313      	orrs	r3, r2
 800403c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800403e:	4a24      	ldr	r2, [pc, #144]	@ (80040d0 <HAL_GPIO_Init+0x2e0>)
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004044:	4b22      	ldr	r3, [pc, #136]	@ (80040d0 <HAL_GPIO_Init+0x2e0>)
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	43db      	mvns	r3, r3
 800404e:	693a      	ldr	r2, [r7, #16]
 8004050:	4013      	ands	r3, r2
 8004052:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800405c:	2b00      	cmp	r3, #0
 800405e:	d003      	beq.n	8004068 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8004060:	693a      	ldr	r2, [r7, #16]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	4313      	orrs	r3, r2
 8004066:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004068:	4a19      	ldr	r2, [pc, #100]	@ (80040d0 <HAL_GPIO_Init+0x2e0>)
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800406e:	4b18      	ldr	r3, [pc, #96]	@ (80040d0 <HAL_GPIO_Init+0x2e0>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	43db      	mvns	r3, r3
 8004078:	693a      	ldr	r2, [r7, #16]
 800407a:	4013      	ands	r3, r2
 800407c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004086:	2b00      	cmp	r3, #0
 8004088:	d003      	beq.n	8004092 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800408a:	693a      	ldr	r2, [r7, #16]
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	4313      	orrs	r3, r2
 8004090:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004092:	4a0f      	ldr	r2, [pc, #60]	@ (80040d0 <HAL_GPIO_Init+0x2e0>)
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	3301      	adds	r3, #1
 800409c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	fa22 f303 	lsr.w	r3, r2, r3
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	f47f aea9 	bne.w	8003e00 <HAL_GPIO_Init+0x10>
  }
}
 80040ae:	bf00      	nop
 80040b0:	bf00      	nop
 80040b2:	371c      	adds	r7, #28
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr
 80040bc:	40021000 	.word	0x40021000
 80040c0:	40010000 	.word	0x40010000
 80040c4:	48000400 	.word	0x48000400
 80040c8:	48000800 	.word	0x48000800
 80040cc:	48000c00 	.word	0x48000c00
 80040d0:	40010400 	.word	0x40010400

080040d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b083      	sub	sp, #12
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	460b      	mov	r3, r1
 80040de:	807b      	strh	r3, [r7, #2]
 80040e0:	4613      	mov	r3, r2
 80040e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80040e4:	787b      	ldrb	r3, [r7, #1]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d003      	beq.n	80040f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80040ea:	887a      	ldrh	r2, [r7, #2]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80040f0:	e002      	b.n	80040f8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80040f2:	887a      	ldrh	r2, [r7, #2]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80040f8:	bf00      	nop
 80040fa:	370c      	adds	r7, #12
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr

08004104 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004104:	b480      	push	{r7}
 8004106:	b085      	sub	sp, #20
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	460b      	mov	r3, r1
 800410e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	695b      	ldr	r3, [r3, #20]
 8004114:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004116:	887a      	ldrh	r2, [r7, #2]
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	4013      	ands	r3, r2
 800411c:	041a      	lsls	r2, r3, #16
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	43d9      	mvns	r1, r3
 8004122:	887b      	ldrh	r3, [r7, #2]
 8004124:	400b      	ands	r3, r1
 8004126:	431a      	orrs	r2, r3
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	619a      	str	r2, [r3, #24]
}
 800412c:	bf00      	nop
 800412e:	3714      	adds	r7, #20
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr

08004138 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 800413e:	af00      	add	r7, sp, #0
 8004140:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004144:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004148:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800414a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800414e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d102      	bne.n	800415e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	f001 b823 	b.w	80051a4 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800415e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004162:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 0301 	and.w	r3, r3, #1
 800416e:	2b00      	cmp	r3, #0
 8004170:	f000 817d 	beq.w	800446e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004174:	4bbc      	ldr	r3, [pc, #752]	@ (8004468 <HAL_RCC_OscConfig+0x330>)
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	f003 030c 	and.w	r3, r3, #12
 800417c:	2b04      	cmp	r3, #4
 800417e:	d00c      	beq.n	800419a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004180:	4bb9      	ldr	r3, [pc, #740]	@ (8004468 <HAL_RCC_OscConfig+0x330>)
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	f003 030c 	and.w	r3, r3, #12
 8004188:	2b08      	cmp	r3, #8
 800418a:	d15c      	bne.n	8004246 <HAL_RCC_OscConfig+0x10e>
 800418c:	4bb6      	ldr	r3, [pc, #728]	@ (8004468 <HAL_RCC_OscConfig+0x330>)
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004194:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004198:	d155      	bne.n	8004246 <HAL_RCC_OscConfig+0x10e>
 800419a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800419e:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041a2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80041a6:	fa93 f3a3 	rbit	r3, r3
 80041aa:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80041ae:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041b2:	fab3 f383 	clz	r3, r3
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	095b      	lsrs	r3, r3, #5
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	f043 0301 	orr.w	r3, r3, #1
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d102      	bne.n	80041cc <HAL_RCC_OscConfig+0x94>
 80041c6:	4ba8      	ldr	r3, [pc, #672]	@ (8004468 <HAL_RCC_OscConfig+0x330>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	e015      	b.n	80041f8 <HAL_RCC_OscConfig+0xc0>
 80041cc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80041d0:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041d4:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 80041d8:	fa93 f3a3 	rbit	r3, r3
 80041dc:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80041e0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80041e4:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80041e8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80041ec:	fa93 f3a3 	rbit	r3, r3
 80041f0:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80041f4:	4b9c      	ldr	r3, [pc, #624]	@ (8004468 <HAL_RCC_OscConfig+0x330>)
 80041f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041f8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80041fc:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8004200:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8004204:	fa92 f2a2 	rbit	r2, r2
 8004208:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 800420c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8004210:	fab2 f282 	clz	r2, r2
 8004214:	b2d2      	uxtb	r2, r2
 8004216:	f042 0220 	orr.w	r2, r2, #32
 800421a:	b2d2      	uxtb	r2, r2
 800421c:	f002 021f 	and.w	r2, r2, #31
 8004220:	2101      	movs	r1, #1
 8004222:	fa01 f202 	lsl.w	r2, r1, r2
 8004226:	4013      	ands	r3, r2
 8004228:	2b00      	cmp	r3, #0
 800422a:	f000 811f 	beq.w	800446c <HAL_RCC_OscConfig+0x334>
 800422e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004232:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	2b00      	cmp	r3, #0
 800423c:	f040 8116 	bne.w	800446c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	f000 bfaf 	b.w	80051a4 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004246:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800424a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004256:	d106      	bne.n	8004266 <HAL_RCC_OscConfig+0x12e>
 8004258:	4b83      	ldr	r3, [pc, #524]	@ (8004468 <HAL_RCC_OscConfig+0x330>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a82      	ldr	r2, [pc, #520]	@ (8004468 <HAL_RCC_OscConfig+0x330>)
 800425e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004262:	6013      	str	r3, [r2, #0]
 8004264:	e036      	b.n	80042d4 <HAL_RCC_OscConfig+0x19c>
 8004266:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800426a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d10c      	bne.n	8004290 <HAL_RCC_OscConfig+0x158>
 8004276:	4b7c      	ldr	r3, [pc, #496]	@ (8004468 <HAL_RCC_OscConfig+0x330>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a7b      	ldr	r2, [pc, #492]	@ (8004468 <HAL_RCC_OscConfig+0x330>)
 800427c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004280:	6013      	str	r3, [r2, #0]
 8004282:	4b79      	ldr	r3, [pc, #484]	@ (8004468 <HAL_RCC_OscConfig+0x330>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a78      	ldr	r2, [pc, #480]	@ (8004468 <HAL_RCC_OscConfig+0x330>)
 8004288:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800428c:	6013      	str	r3, [r2, #0]
 800428e:	e021      	b.n	80042d4 <HAL_RCC_OscConfig+0x19c>
 8004290:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004294:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80042a0:	d10c      	bne.n	80042bc <HAL_RCC_OscConfig+0x184>
 80042a2:	4b71      	ldr	r3, [pc, #452]	@ (8004468 <HAL_RCC_OscConfig+0x330>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a70      	ldr	r2, [pc, #448]	@ (8004468 <HAL_RCC_OscConfig+0x330>)
 80042a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80042ac:	6013      	str	r3, [r2, #0]
 80042ae:	4b6e      	ldr	r3, [pc, #440]	@ (8004468 <HAL_RCC_OscConfig+0x330>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a6d      	ldr	r2, [pc, #436]	@ (8004468 <HAL_RCC_OscConfig+0x330>)
 80042b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042b8:	6013      	str	r3, [r2, #0]
 80042ba:	e00b      	b.n	80042d4 <HAL_RCC_OscConfig+0x19c>
 80042bc:	4b6a      	ldr	r3, [pc, #424]	@ (8004468 <HAL_RCC_OscConfig+0x330>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a69      	ldr	r2, [pc, #420]	@ (8004468 <HAL_RCC_OscConfig+0x330>)
 80042c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042c6:	6013      	str	r3, [r2, #0]
 80042c8:	4b67      	ldr	r3, [pc, #412]	@ (8004468 <HAL_RCC_OscConfig+0x330>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a66      	ldr	r2, [pc, #408]	@ (8004468 <HAL_RCC_OscConfig+0x330>)
 80042ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80042d2:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80042d4:	4b64      	ldr	r3, [pc, #400]	@ (8004468 <HAL_RCC_OscConfig+0x330>)
 80042d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042d8:	f023 020f 	bic.w	r2, r3, #15
 80042dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042e0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	495f      	ldr	r1, [pc, #380]	@ (8004468 <HAL_RCC_OscConfig+0x330>)
 80042ea:	4313      	orrs	r3, r2
 80042ec:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80042ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042f2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d059      	beq.n	80043b2 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042fe:	f7fe fbd1 	bl	8002aa4 <HAL_GetTick>
 8004302:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004306:	e00a      	b.n	800431e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004308:	f7fe fbcc 	bl	8002aa4 <HAL_GetTick>
 800430c:	4602      	mov	r2, r0
 800430e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004312:	1ad3      	subs	r3, r2, r3
 8004314:	2b64      	cmp	r3, #100	@ 0x64
 8004316:	d902      	bls.n	800431e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8004318:	2303      	movs	r3, #3
 800431a:	f000 bf43 	b.w	80051a4 <HAL_RCC_OscConfig+0x106c>
 800431e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004322:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004326:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 800432a:	fa93 f3a3 	rbit	r3, r3
 800432e:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8004332:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004336:	fab3 f383 	clz	r3, r3
 800433a:	b2db      	uxtb	r3, r3
 800433c:	095b      	lsrs	r3, r3, #5
 800433e:	b2db      	uxtb	r3, r3
 8004340:	f043 0301 	orr.w	r3, r3, #1
 8004344:	b2db      	uxtb	r3, r3
 8004346:	2b01      	cmp	r3, #1
 8004348:	d102      	bne.n	8004350 <HAL_RCC_OscConfig+0x218>
 800434a:	4b47      	ldr	r3, [pc, #284]	@ (8004468 <HAL_RCC_OscConfig+0x330>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	e015      	b.n	800437c <HAL_RCC_OscConfig+0x244>
 8004350:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004354:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004358:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 800435c:	fa93 f3a3 	rbit	r3, r3
 8004360:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8004364:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004368:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 800436c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8004370:	fa93 f3a3 	rbit	r3, r3
 8004374:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8004378:	4b3b      	ldr	r3, [pc, #236]	@ (8004468 <HAL_RCC_OscConfig+0x330>)
 800437a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800437c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004380:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8004384:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8004388:	fa92 f2a2 	rbit	r2, r2
 800438c:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8004390:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8004394:	fab2 f282 	clz	r2, r2
 8004398:	b2d2      	uxtb	r2, r2
 800439a:	f042 0220 	orr.w	r2, r2, #32
 800439e:	b2d2      	uxtb	r2, r2
 80043a0:	f002 021f 	and.w	r2, r2, #31
 80043a4:	2101      	movs	r1, #1
 80043a6:	fa01 f202 	lsl.w	r2, r1, r2
 80043aa:	4013      	ands	r3, r2
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d0ab      	beq.n	8004308 <HAL_RCC_OscConfig+0x1d0>
 80043b0:	e05d      	b.n	800446e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043b2:	f7fe fb77 	bl	8002aa4 <HAL_GetTick>
 80043b6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043ba:	e00a      	b.n	80043d2 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043bc:	f7fe fb72 	bl	8002aa4 <HAL_GetTick>
 80043c0:	4602      	mov	r2, r0
 80043c2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80043c6:	1ad3      	subs	r3, r2, r3
 80043c8:	2b64      	cmp	r3, #100	@ 0x64
 80043ca:	d902      	bls.n	80043d2 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80043cc:	2303      	movs	r3, #3
 80043ce:	f000 bee9 	b.w	80051a4 <HAL_RCC_OscConfig+0x106c>
 80043d2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80043d6:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043da:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80043de:	fa93 f3a3 	rbit	r3, r3
 80043e2:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 80043e6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043ea:	fab3 f383 	clz	r3, r3
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	095b      	lsrs	r3, r3, #5
 80043f2:	b2db      	uxtb	r3, r3
 80043f4:	f043 0301 	orr.w	r3, r3, #1
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d102      	bne.n	8004404 <HAL_RCC_OscConfig+0x2cc>
 80043fe:	4b1a      	ldr	r3, [pc, #104]	@ (8004468 <HAL_RCC_OscConfig+0x330>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	e015      	b.n	8004430 <HAL_RCC_OscConfig+0x2f8>
 8004404:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004408:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800440c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8004410:	fa93 f3a3 	rbit	r3, r3
 8004414:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8004418:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800441c:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8004420:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8004424:	fa93 f3a3 	rbit	r3, r3
 8004428:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 800442c:	4b0e      	ldr	r3, [pc, #56]	@ (8004468 <HAL_RCC_OscConfig+0x330>)
 800442e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004430:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004434:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8004438:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 800443c:	fa92 f2a2 	rbit	r2, r2
 8004440:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8004444:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8004448:	fab2 f282 	clz	r2, r2
 800444c:	b2d2      	uxtb	r2, r2
 800444e:	f042 0220 	orr.w	r2, r2, #32
 8004452:	b2d2      	uxtb	r2, r2
 8004454:	f002 021f 	and.w	r2, r2, #31
 8004458:	2101      	movs	r1, #1
 800445a:	fa01 f202 	lsl.w	r2, r1, r2
 800445e:	4013      	ands	r3, r2
 8004460:	2b00      	cmp	r3, #0
 8004462:	d1ab      	bne.n	80043bc <HAL_RCC_OscConfig+0x284>
 8004464:	e003      	b.n	800446e <HAL_RCC_OscConfig+0x336>
 8004466:	bf00      	nop
 8004468:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800446c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800446e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004472:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 0302 	and.w	r3, r3, #2
 800447e:	2b00      	cmp	r3, #0
 8004480:	f000 817d 	beq.w	800477e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004484:	4ba6      	ldr	r3, [pc, #664]	@ (8004720 <HAL_RCC_OscConfig+0x5e8>)
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	f003 030c 	and.w	r3, r3, #12
 800448c:	2b00      	cmp	r3, #0
 800448e:	d00b      	beq.n	80044a8 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004490:	4ba3      	ldr	r3, [pc, #652]	@ (8004720 <HAL_RCC_OscConfig+0x5e8>)
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	f003 030c 	and.w	r3, r3, #12
 8004498:	2b08      	cmp	r3, #8
 800449a:	d172      	bne.n	8004582 <HAL_RCC_OscConfig+0x44a>
 800449c:	4ba0      	ldr	r3, [pc, #640]	@ (8004720 <HAL_RCC_OscConfig+0x5e8>)
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d16c      	bne.n	8004582 <HAL_RCC_OscConfig+0x44a>
 80044a8:	2302      	movs	r3, #2
 80044aa:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044ae:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80044b2:	fa93 f3a3 	rbit	r3, r3
 80044b6:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 80044ba:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044be:	fab3 f383 	clz	r3, r3
 80044c2:	b2db      	uxtb	r3, r3
 80044c4:	095b      	lsrs	r3, r3, #5
 80044c6:	b2db      	uxtb	r3, r3
 80044c8:	f043 0301 	orr.w	r3, r3, #1
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d102      	bne.n	80044d8 <HAL_RCC_OscConfig+0x3a0>
 80044d2:	4b93      	ldr	r3, [pc, #588]	@ (8004720 <HAL_RCC_OscConfig+0x5e8>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	e013      	b.n	8004500 <HAL_RCC_OscConfig+0x3c8>
 80044d8:	2302      	movs	r3, #2
 80044da:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044de:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80044e2:	fa93 f3a3 	rbit	r3, r3
 80044e6:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80044ea:	2302      	movs	r3, #2
 80044ec:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80044f0:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80044f4:	fa93 f3a3 	rbit	r3, r3
 80044f8:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80044fc:	4b88      	ldr	r3, [pc, #544]	@ (8004720 <HAL_RCC_OscConfig+0x5e8>)
 80044fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004500:	2202      	movs	r2, #2
 8004502:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8004506:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 800450a:	fa92 f2a2 	rbit	r2, r2
 800450e:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8004512:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8004516:	fab2 f282 	clz	r2, r2
 800451a:	b2d2      	uxtb	r2, r2
 800451c:	f042 0220 	orr.w	r2, r2, #32
 8004520:	b2d2      	uxtb	r2, r2
 8004522:	f002 021f 	and.w	r2, r2, #31
 8004526:	2101      	movs	r1, #1
 8004528:	fa01 f202 	lsl.w	r2, r1, r2
 800452c:	4013      	ands	r3, r2
 800452e:	2b00      	cmp	r3, #0
 8004530:	d00a      	beq.n	8004548 <HAL_RCC_OscConfig+0x410>
 8004532:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004536:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	691b      	ldr	r3, [r3, #16]
 800453e:	2b01      	cmp	r3, #1
 8004540:	d002      	beq.n	8004548 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	f000 be2e 	b.w	80051a4 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004548:	4b75      	ldr	r3, [pc, #468]	@ (8004720 <HAL_RCC_OscConfig+0x5e8>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004550:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004554:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	695b      	ldr	r3, [r3, #20]
 800455c:	21f8      	movs	r1, #248	@ 0xf8
 800455e:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004562:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8004566:	fa91 f1a1 	rbit	r1, r1
 800456a:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 800456e:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8004572:	fab1 f181 	clz	r1, r1
 8004576:	b2c9      	uxtb	r1, r1
 8004578:	408b      	lsls	r3, r1
 800457a:	4969      	ldr	r1, [pc, #420]	@ (8004720 <HAL_RCC_OscConfig+0x5e8>)
 800457c:	4313      	orrs	r3, r2
 800457e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004580:	e0fd      	b.n	800477e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004582:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004586:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	691b      	ldr	r3, [r3, #16]
 800458e:	2b00      	cmp	r3, #0
 8004590:	f000 8088 	beq.w	80046a4 <HAL_RCC_OscConfig+0x56c>
 8004594:	2301      	movs	r3, #1
 8004596:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800459a:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 800459e:	fa93 f3a3 	rbit	r3, r3
 80045a2:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 80045a6:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045aa:	fab3 f383 	clz	r3, r3
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80045b4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80045b8:	009b      	lsls	r3, r3, #2
 80045ba:	461a      	mov	r2, r3
 80045bc:	2301      	movs	r3, #1
 80045be:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045c0:	f7fe fa70 	bl	8002aa4 <HAL_GetTick>
 80045c4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045c8:	e00a      	b.n	80045e0 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045ca:	f7fe fa6b 	bl	8002aa4 <HAL_GetTick>
 80045ce:	4602      	mov	r2, r0
 80045d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80045d4:	1ad3      	subs	r3, r2, r3
 80045d6:	2b02      	cmp	r3, #2
 80045d8:	d902      	bls.n	80045e0 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80045da:	2303      	movs	r3, #3
 80045dc:	f000 bde2 	b.w	80051a4 <HAL_RCC_OscConfig+0x106c>
 80045e0:	2302      	movs	r3, #2
 80045e2:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045e6:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80045ea:	fa93 f3a3 	rbit	r3, r3
 80045ee:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 80045f2:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045f6:	fab3 f383 	clz	r3, r3
 80045fa:	b2db      	uxtb	r3, r3
 80045fc:	095b      	lsrs	r3, r3, #5
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	f043 0301 	orr.w	r3, r3, #1
 8004604:	b2db      	uxtb	r3, r3
 8004606:	2b01      	cmp	r3, #1
 8004608:	d102      	bne.n	8004610 <HAL_RCC_OscConfig+0x4d8>
 800460a:	4b45      	ldr	r3, [pc, #276]	@ (8004720 <HAL_RCC_OscConfig+0x5e8>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	e013      	b.n	8004638 <HAL_RCC_OscConfig+0x500>
 8004610:	2302      	movs	r3, #2
 8004612:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004616:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800461a:	fa93 f3a3 	rbit	r3, r3
 800461e:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8004622:	2302      	movs	r3, #2
 8004624:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8004628:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800462c:	fa93 f3a3 	rbit	r3, r3
 8004630:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8004634:	4b3a      	ldr	r3, [pc, #232]	@ (8004720 <HAL_RCC_OscConfig+0x5e8>)
 8004636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004638:	2202      	movs	r2, #2
 800463a:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 800463e:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8004642:	fa92 f2a2 	rbit	r2, r2
 8004646:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 800464a:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 800464e:	fab2 f282 	clz	r2, r2
 8004652:	b2d2      	uxtb	r2, r2
 8004654:	f042 0220 	orr.w	r2, r2, #32
 8004658:	b2d2      	uxtb	r2, r2
 800465a:	f002 021f 	and.w	r2, r2, #31
 800465e:	2101      	movs	r1, #1
 8004660:	fa01 f202 	lsl.w	r2, r1, r2
 8004664:	4013      	ands	r3, r2
 8004666:	2b00      	cmp	r3, #0
 8004668:	d0af      	beq.n	80045ca <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800466a:	4b2d      	ldr	r3, [pc, #180]	@ (8004720 <HAL_RCC_OscConfig+0x5e8>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004672:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004676:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	695b      	ldr	r3, [r3, #20]
 800467e:	21f8      	movs	r1, #248	@ 0xf8
 8004680:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004684:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8004688:	fa91 f1a1 	rbit	r1, r1
 800468c:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8004690:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8004694:	fab1 f181 	clz	r1, r1
 8004698:	b2c9      	uxtb	r1, r1
 800469a:	408b      	lsls	r3, r1
 800469c:	4920      	ldr	r1, [pc, #128]	@ (8004720 <HAL_RCC_OscConfig+0x5e8>)
 800469e:	4313      	orrs	r3, r2
 80046a0:	600b      	str	r3, [r1, #0]
 80046a2:	e06c      	b.n	800477e <HAL_RCC_OscConfig+0x646>
 80046a4:	2301      	movs	r3, #1
 80046a6:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046aa:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80046ae:	fa93 f3a3 	rbit	r3, r3
 80046b2:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 80046b6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046ba:	fab3 f383 	clz	r3, r3
 80046be:	b2db      	uxtb	r3, r3
 80046c0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80046c4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80046c8:	009b      	lsls	r3, r3, #2
 80046ca:	461a      	mov	r2, r3
 80046cc:	2300      	movs	r3, #0
 80046ce:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046d0:	f7fe f9e8 	bl	8002aa4 <HAL_GetTick>
 80046d4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046d8:	e00a      	b.n	80046f0 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046da:	f7fe f9e3 	bl	8002aa4 <HAL_GetTick>
 80046de:	4602      	mov	r2, r0
 80046e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80046e4:	1ad3      	subs	r3, r2, r3
 80046e6:	2b02      	cmp	r3, #2
 80046e8:	d902      	bls.n	80046f0 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80046ea:	2303      	movs	r3, #3
 80046ec:	f000 bd5a 	b.w	80051a4 <HAL_RCC_OscConfig+0x106c>
 80046f0:	2302      	movs	r3, #2
 80046f2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046f6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80046fa:	fa93 f3a3 	rbit	r3, r3
 80046fe:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8004702:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004706:	fab3 f383 	clz	r3, r3
 800470a:	b2db      	uxtb	r3, r3
 800470c:	095b      	lsrs	r3, r3, #5
 800470e:	b2db      	uxtb	r3, r3
 8004710:	f043 0301 	orr.w	r3, r3, #1
 8004714:	b2db      	uxtb	r3, r3
 8004716:	2b01      	cmp	r3, #1
 8004718:	d104      	bne.n	8004724 <HAL_RCC_OscConfig+0x5ec>
 800471a:	4b01      	ldr	r3, [pc, #4]	@ (8004720 <HAL_RCC_OscConfig+0x5e8>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	e015      	b.n	800474c <HAL_RCC_OscConfig+0x614>
 8004720:	40021000 	.word	0x40021000
 8004724:	2302      	movs	r3, #2
 8004726:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800472a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800472e:	fa93 f3a3 	rbit	r3, r3
 8004732:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8004736:	2302      	movs	r3, #2
 8004738:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 800473c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004740:	fa93 f3a3 	rbit	r3, r3
 8004744:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8004748:	4bc8      	ldr	r3, [pc, #800]	@ (8004a6c <HAL_RCC_OscConfig+0x934>)
 800474a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800474c:	2202      	movs	r2, #2
 800474e:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8004752:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8004756:	fa92 f2a2 	rbit	r2, r2
 800475a:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 800475e:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8004762:	fab2 f282 	clz	r2, r2
 8004766:	b2d2      	uxtb	r2, r2
 8004768:	f042 0220 	orr.w	r2, r2, #32
 800476c:	b2d2      	uxtb	r2, r2
 800476e:	f002 021f 	and.w	r2, r2, #31
 8004772:	2101      	movs	r1, #1
 8004774:	fa01 f202 	lsl.w	r2, r1, r2
 8004778:	4013      	ands	r3, r2
 800477a:	2b00      	cmp	r3, #0
 800477c:	d1ad      	bne.n	80046da <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800477e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004782:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f003 0308 	and.w	r3, r3, #8
 800478e:	2b00      	cmp	r3, #0
 8004790:	f000 8110 	beq.w	80049b4 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004794:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004798:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	699b      	ldr	r3, [r3, #24]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d079      	beq.n	8004898 <HAL_RCC_OscConfig+0x760>
 80047a4:	2301      	movs	r3, #1
 80047a6:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047aa:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80047ae:	fa93 f3a3 	rbit	r3, r3
 80047b2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 80047b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047ba:	fab3 f383 	clz	r3, r3
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	461a      	mov	r2, r3
 80047c2:	4bab      	ldr	r3, [pc, #684]	@ (8004a70 <HAL_RCC_OscConfig+0x938>)
 80047c4:	4413      	add	r3, r2
 80047c6:	009b      	lsls	r3, r3, #2
 80047c8:	461a      	mov	r2, r3
 80047ca:	2301      	movs	r3, #1
 80047cc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047ce:	f7fe f969 	bl	8002aa4 <HAL_GetTick>
 80047d2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047d6:	e00a      	b.n	80047ee <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047d8:	f7fe f964 	bl	8002aa4 <HAL_GetTick>
 80047dc:	4602      	mov	r2, r0
 80047de:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80047e2:	1ad3      	subs	r3, r2, r3
 80047e4:	2b02      	cmp	r3, #2
 80047e6:	d902      	bls.n	80047ee <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80047e8:	2303      	movs	r3, #3
 80047ea:	f000 bcdb 	b.w	80051a4 <HAL_RCC_OscConfig+0x106c>
 80047ee:	2302      	movs	r3, #2
 80047f0:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047f4:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80047f8:	fa93 f3a3 	rbit	r3, r3
 80047fc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004800:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004804:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8004808:	2202      	movs	r2, #2
 800480a:	601a      	str	r2, [r3, #0]
 800480c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004810:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	fa93 f2a3 	rbit	r2, r3
 800481a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800481e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004822:	601a      	str	r2, [r3, #0]
 8004824:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004828:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800482c:	2202      	movs	r2, #2
 800482e:	601a      	str	r2, [r3, #0]
 8004830:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004834:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	fa93 f2a3 	rbit	r2, r3
 800483e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004842:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8004846:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004848:	4b88      	ldr	r3, [pc, #544]	@ (8004a6c <HAL_RCC_OscConfig+0x934>)
 800484a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800484c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004850:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8004854:	2102      	movs	r1, #2
 8004856:	6019      	str	r1, [r3, #0]
 8004858:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800485c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	fa93 f1a3 	rbit	r1, r3
 8004866:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800486a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800486e:	6019      	str	r1, [r3, #0]
  return result;
 8004870:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004874:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	fab3 f383 	clz	r3, r3
 800487e:	b2db      	uxtb	r3, r3
 8004880:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8004884:	b2db      	uxtb	r3, r3
 8004886:	f003 031f 	and.w	r3, r3, #31
 800488a:	2101      	movs	r1, #1
 800488c:	fa01 f303 	lsl.w	r3, r1, r3
 8004890:	4013      	ands	r3, r2
 8004892:	2b00      	cmp	r3, #0
 8004894:	d0a0      	beq.n	80047d8 <HAL_RCC_OscConfig+0x6a0>
 8004896:	e08d      	b.n	80049b4 <HAL_RCC_OscConfig+0x87c>
 8004898:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800489c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80048a0:	2201      	movs	r2, #1
 80048a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048a8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	fa93 f2a3 	rbit	r2, r3
 80048b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048b6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80048ba:	601a      	str	r2, [r3, #0]
  return result;
 80048bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048c0:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80048c4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048c6:	fab3 f383 	clz	r3, r3
 80048ca:	b2db      	uxtb	r3, r3
 80048cc:	461a      	mov	r2, r3
 80048ce:	4b68      	ldr	r3, [pc, #416]	@ (8004a70 <HAL_RCC_OscConfig+0x938>)
 80048d0:	4413      	add	r3, r2
 80048d2:	009b      	lsls	r3, r3, #2
 80048d4:	461a      	mov	r2, r3
 80048d6:	2300      	movs	r3, #0
 80048d8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048da:	f7fe f8e3 	bl	8002aa4 <HAL_GetTick>
 80048de:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048e2:	e00a      	b.n	80048fa <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048e4:	f7fe f8de 	bl	8002aa4 <HAL_GetTick>
 80048e8:	4602      	mov	r2, r0
 80048ea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80048ee:	1ad3      	subs	r3, r2, r3
 80048f0:	2b02      	cmp	r3, #2
 80048f2:	d902      	bls.n	80048fa <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80048f4:	2303      	movs	r3, #3
 80048f6:	f000 bc55 	b.w	80051a4 <HAL_RCC_OscConfig+0x106c>
 80048fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048fe:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8004902:	2202      	movs	r2, #2
 8004904:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004906:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800490a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	fa93 f2a3 	rbit	r2, r3
 8004914:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004918:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800491c:	601a      	str	r2, [r3, #0]
 800491e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004922:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8004926:	2202      	movs	r2, #2
 8004928:	601a      	str	r2, [r3, #0]
 800492a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800492e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	fa93 f2a3 	rbit	r2, r3
 8004938:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800493c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8004940:	601a      	str	r2, [r3, #0]
 8004942:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004946:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800494a:	2202      	movs	r2, #2
 800494c:	601a      	str	r2, [r3, #0]
 800494e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004952:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	fa93 f2a3 	rbit	r2, r3
 800495c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004960:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8004964:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004966:	4b41      	ldr	r3, [pc, #260]	@ (8004a6c <HAL_RCC_OscConfig+0x934>)
 8004968:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800496a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800496e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8004972:	2102      	movs	r1, #2
 8004974:	6019      	str	r1, [r3, #0]
 8004976:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800497a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	fa93 f1a3 	rbit	r1, r3
 8004984:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004988:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800498c:	6019      	str	r1, [r3, #0]
  return result;
 800498e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004992:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	fab3 f383 	clz	r3, r3
 800499c:	b2db      	uxtb	r3, r3
 800499e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80049a2:	b2db      	uxtb	r3, r3
 80049a4:	f003 031f 	and.w	r3, r3, #31
 80049a8:	2101      	movs	r1, #1
 80049aa:	fa01 f303 	lsl.w	r3, r1, r3
 80049ae:	4013      	ands	r3, r2
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d197      	bne.n	80048e4 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049b8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f003 0304 	and.w	r3, r3, #4
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	f000 81a1 	beq.w	8004d0c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049ca:	2300      	movs	r3, #0
 80049cc:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049d0:	4b26      	ldr	r3, [pc, #152]	@ (8004a6c <HAL_RCC_OscConfig+0x934>)
 80049d2:	69db      	ldr	r3, [r3, #28]
 80049d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d116      	bne.n	8004a0a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049dc:	4b23      	ldr	r3, [pc, #140]	@ (8004a6c <HAL_RCC_OscConfig+0x934>)
 80049de:	69db      	ldr	r3, [r3, #28]
 80049e0:	4a22      	ldr	r2, [pc, #136]	@ (8004a6c <HAL_RCC_OscConfig+0x934>)
 80049e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80049e6:	61d3      	str	r3, [r2, #28]
 80049e8:	4b20      	ldr	r3, [pc, #128]	@ (8004a6c <HAL_RCC_OscConfig+0x934>)
 80049ea:	69db      	ldr	r3, [r3, #28]
 80049ec:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80049f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049f4:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80049f8:	601a      	str	r2, [r3, #0]
 80049fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049fe:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8004a02:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004a04:	2301      	movs	r3, #1
 8004a06:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a0a:	4b1a      	ldr	r3, [pc, #104]	@ (8004a74 <HAL_RCC_OscConfig+0x93c>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d11a      	bne.n	8004a4c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a16:	4b17      	ldr	r3, [pc, #92]	@ (8004a74 <HAL_RCC_OscConfig+0x93c>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a16      	ldr	r2, [pc, #88]	@ (8004a74 <HAL_RCC_OscConfig+0x93c>)
 8004a1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a20:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a22:	f7fe f83f 	bl	8002aa4 <HAL_GetTick>
 8004a26:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a2a:	e009      	b.n	8004a40 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a2c:	f7fe f83a 	bl	8002aa4 <HAL_GetTick>
 8004a30:	4602      	mov	r2, r0
 8004a32:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004a36:	1ad3      	subs	r3, r2, r3
 8004a38:	2b64      	cmp	r3, #100	@ 0x64
 8004a3a:	d901      	bls.n	8004a40 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8004a3c:	2303      	movs	r3, #3
 8004a3e:	e3b1      	b.n	80051a4 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a40:	4b0c      	ldr	r3, [pc, #48]	@ (8004a74 <HAL_RCC_OscConfig+0x93c>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d0ef      	beq.n	8004a2c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a50:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	68db      	ldr	r3, [r3, #12]
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d10d      	bne.n	8004a78 <HAL_RCC_OscConfig+0x940>
 8004a5c:	4b03      	ldr	r3, [pc, #12]	@ (8004a6c <HAL_RCC_OscConfig+0x934>)
 8004a5e:	6a1b      	ldr	r3, [r3, #32]
 8004a60:	4a02      	ldr	r2, [pc, #8]	@ (8004a6c <HAL_RCC_OscConfig+0x934>)
 8004a62:	f043 0301 	orr.w	r3, r3, #1
 8004a66:	6213      	str	r3, [r2, #32]
 8004a68:	e03c      	b.n	8004ae4 <HAL_RCC_OscConfig+0x9ac>
 8004a6a:	bf00      	nop
 8004a6c:	40021000 	.word	0x40021000
 8004a70:	10908120 	.word	0x10908120
 8004a74:	40007000 	.word	0x40007000
 8004a78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a7c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d10c      	bne.n	8004aa2 <HAL_RCC_OscConfig+0x96a>
 8004a88:	4bc1      	ldr	r3, [pc, #772]	@ (8004d90 <HAL_RCC_OscConfig+0xc58>)
 8004a8a:	6a1b      	ldr	r3, [r3, #32]
 8004a8c:	4ac0      	ldr	r2, [pc, #768]	@ (8004d90 <HAL_RCC_OscConfig+0xc58>)
 8004a8e:	f023 0301 	bic.w	r3, r3, #1
 8004a92:	6213      	str	r3, [r2, #32]
 8004a94:	4bbe      	ldr	r3, [pc, #760]	@ (8004d90 <HAL_RCC_OscConfig+0xc58>)
 8004a96:	6a1b      	ldr	r3, [r3, #32]
 8004a98:	4abd      	ldr	r2, [pc, #756]	@ (8004d90 <HAL_RCC_OscConfig+0xc58>)
 8004a9a:	f023 0304 	bic.w	r3, r3, #4
 8004a9e:	6213      	str	r3, [r2, #32]
 8004aa0:	e020      	b.n	8004ae4 <HAL_RCC_OscConfig+0x9ac>
 8004aa2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004aa6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	68db      	ldr	r3, [r3, #12]
 8004aae:	2b05      	cmp	r3, #5
 8004ab0:	d10c      	bne.n	8004acc <HAL_RCC_OscConfig+0x994>
 8004ab2:	4bb7      	ldr	r3, [pc, #732]	@ (8004d90 <HAL_RCC_OscConfig+0xc58>)
 8004ab4:	6a1b      	ldr	r3, [r3, #32]
 8004ab6:	4ab6      	ldr	r2, [pc, #728]	@ (8004d90 <HAL_RCC_OscConfig+0xc58>)
 8004ab8:	f043 0304 	orr.w	r3, r3, #4
 8004abc:	6213      	str	r3, [r2, #32]
 8004abe:	4bb4      	ldr	r3, [pc, #720]	@ (8004d90 <HAL_RCC_OscConfig+0xc58>)
 8004ac0:	6a1b      	ldr	r3, [r3, #32]
 8004ac2:	4ab3      	ldr	r2, [pc, #716]	@ (8004d90 <HAL_RCC_OscConfig+0xc58>)
 8004ac4:	f043 0301 	orr.w	r3, r3, #1
 8004ac8:	6213      	str	r3, [r2, #32]
 8004aca:	e00b      	b.n	8004ae4 <HAL_RCC_OscConfig+0x9ac>
 8004acc:	4bb0      	ldr	r3, [pc, #704]	@ (8004d90 <HAL_RCC_OscConfig+0xc58>)
 8004ace:	6a1b      	ldr	r3, [r3, #32]
 8004ad0:	4aaf      	ldr	r2, [pc, #700]	@ (8004d90 <HAL_RCC_OscConfig+0xc58>)
 8004ad2:	f023 0301 	bic.w	r3, r3, #1
 8004ad6:	6213      	str	r3, [r2, #32]
 8004ad8:	4bad      	ldr	r3, [pc, #692]	@ (8004d90 <HAL_RCC_OscConfig+0xc58>)
 8004ada:	6a1b      	ldr	r3, [r3, #32]
 8004adc:	4aac      	ldr	r2, [pc, #688]	@ (8004d90 <HAL_RCC_OscConfig+0xc58>)
 8004ade:	f023 0304 	bic.w	r3, r3, #4
 8004ae2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ae4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ae8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	f000 8081 	beq.w	8004bf8 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004af6:	f7fd ffd5 	bl	8002aa4 <HAL_GetTick>
 8004afa:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004afe:	e00b      	b.n	8004b18 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b00:	f7fd ffd0 	bl	8002aa4 <HAL_GetTick>
 8004b04:	4602      	mov	r2, r0
 8004b06:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004b0a:	1ad3      	subs	r3, r2, r3
 8004b0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d901      	bls.n	8004b18 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8004b14:	2303      	movs	r3, #3
 8004b16:	e345      	b.n	80051a4 <HAL_RCC_OscConfig+0x106c>
 8004b18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b1c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004b20:	2202      	movs	r2, #2
 8004b22:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b28:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	fa93 f2a3 	rbit	r2, r3
 8004b32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b36:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8004b3a:	601a      	str	r2, [r3, #0]
 8004b3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b40:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004b44:	2202      	movs	r2, #2
 8004b46:	601a      	str	r2, [r3, #0]
 8004b48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b4c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	fa93 f2a3 	rbit	r2, r3
 8004b56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b5a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8004b5e:	601a      	str	r2, [r3, #0]
  return result;
 8004b60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b64:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8004b68:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b6a:	fab3 f383 	clz	r3, r3
 8004b6e:	b2db      	uxtb	r3, r3
 8004b70:	095b      	lsrs	r3, r3, #5
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	f043 0302 	orr.w	r3, r3, #2
 8004b78:	b2db      	uxtb	r3, r3
 8004b7a:	2b02      	cmp	r3, #2
 8004b7c:	d102      	bne.n	8004b84 <HAL_RCC_OscConfig+0xa4c>
 8004b7e:	4b84      	ldr	r3, [pc, #528]	@ (8004d90 <HAL_RCC_OscConfig+0xc58>)
 8004b80:	6a1b      	ldr	r3, [r3, #32]
 8004b82:	e013      	b.n	8004bac <HAL_RCC_OscConfig+0xa74>
 8004b84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b88:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8004b8c:	2202      	movs	r2, #2
 8004b8e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b94:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	fa93 f2a3 	rbit	r2, r3
 8004b9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ba2:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8004ba6:	601a      	str	r2, [r3, #0]
 8004ba8:	4b79      	ldr	r3, [pc, #484]	@ (8004d90 <HAL_RCC_OscConfig+0xc58>)
 8004baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bac:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004bb0:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8004bb4:	2102      	movs	r1, #2
 8004bb6:	6011      	str	r1, [r2, #0]
 8004bb8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004bbc:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8004bc0:	6812      	ldr	r2, [r2, #0]
 8004bc2:	fa92 f1a2 	rbit	r1, r2
 8004bc6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004bca:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8004bce:	6011      	str	r1, [r2, #0]
  return result;
 8004bd0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004bd4:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8004bd8:	6812      	ldr	r2, [r2, #0]
 8004bda:	fab2 f282 	clz	r2, r2
 8004bde:	b2d2      	uxtb	r2, r2
 8004be0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004be4:	b2d2      	uxtb	r2, r2
 8004be6:	f002 021f 	and.w	r2, r2, #31
 8004bea:	2101      	movs	r1, #1
 8004bec:	fa01 f202 	lsl.w	r2, r1, r2
 8004bf0:	4013      	ands	r3, r2
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d084      	beq.n	8004b00 <HAL_RCC_OscConfig+0x9c8>
 8004bf6:	e07f      	b.n	8004cf8 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bf8:	f7fd ff54 	bl	8002aa4 <HAL_GetTick>
 8004bfc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c00:	e00b      	b.n	8004c1a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c02:	f7fd ff4f 	bl	8002aa4 <HAL_GetTick>
 8004c06:	4602      	mov	r2, r0
 8004c08:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004c0c:	1ad3      	subs	r3, r2, r3
 8004c0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d901      	bls.n	8004c1a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8004c16:	2303      	movs	r3, #3
 8004c18:	e2c4      	b.n	80051a4 <HAL_RCC_OscConfig+0x106c>
 8004c1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c1e:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8004c22:	2202      	movs	r2, #2
 8004c24:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c2a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	fa93 f2a3 	rbit	r2, r3
 8004c34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c38:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8004c3c:	601a      	str	r2, [r3, #0]
 8004c3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c42:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8004c46:	2202      	movs	r2, #2
 8004c48:	601a      	str	r2, [r3, #0]
 8004c4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c4e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	fa93 f2a3 	rbit	r2, r3
 8004c58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c5c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8004c60:	601a      	str	r2, [r3, #0]
  return result;
 8004c62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c66:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8004c6a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c6c:	fab3 f383 	clz	r3, r3
 8004c70:	b2db      	uxtb	r3, r3
 8004c72:	095b      	lsrs	r3, r3, #5
 8004c74:	b2db      	uxtb	r3, r3
 8004c76:	f043 0302 	orr.w	r3, r3, #2
 8004c7a:	b2db      	uxtb	r3, r3
 8004c7c:	2b02      	cmp	r3, #2
 8004c7e:	d102      	bne.n	8004c86 <HAL_RCC_OscConfig+0xb4e>
 8004c80:	4b43      	ldr	r3, [pc, #268]	@ (8004d90 <HAL_RCC_OscConfig+0xc58>)
 8004c82:	6a1b      	ldr	r3, [r3, #32]
 8004c84:	e013      	b.n	8004cae <HAL_RCC_OscConfig+0xb76>
 8004c86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c8a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8004c8e:	2202      	movs	r2, #2
 8004c90:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c96:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	fa93 f2a3 	rbit	r2, r3
 8004ca0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ca4:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8004ca8:	601a      	str	r2, [r3, #0]
 8004caa:	4b39      	ldr	r3, [pc, #228]	@ (8004d90 <HAL_RCC_OscConfig+0xc58>)
 8004cac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cae:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004cb2:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8004cb6:	2102      	movs	r1, #2
 8004cb8:	6011      	str	r1, [r2, #0]
 8004cba:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004cbe:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8004cc2:	6812      	ldr	r2, [r2, #0]
 8004cc4:	fa92 f1a2 	rbit	r1, r2
 8004cc8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004ccc:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8004cd0:	6011      	str	r1, [r2, #0]
  return result;
 8004cd2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004cd6:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8004cda:	6812      	ldr	r2, [r2, #0]
 8004cdc:	fab2 f282 	clz	r2, r2
 8004ce0:	b2d2      	uxtb	r2, r2
 8004ce2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004ce6:	b2d2      	uxtb	r2, r2
 8004ce8:	f002 021f 	and.w	r2, r2, #31
 8004cec:	2101      	movs	r1, #1
 8004cee:	fa01 f202 	lsl.w	r2, r1, r2
 8004cf2:	4013      	ands	r3, r2
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d184      	bne.n	8004c02 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004cf8:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d105      	bne.n	8004d0c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d00:	4b23      	ldr	r3, [pc, #140]	@ (8004d90 <HAL_RCC_OscConfig+0xc58>)
 8004d02:	69db      	ldr	r3, [r3, #28]
 8004d04:	4a22      	ldr	r2, [pc, #136]	@ (8004d90 <HAL_RCC_OscConfig+0xc58>)
 8004d06:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d0a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d10:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	69db      	ldr	r3, [r3, #28]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	f000 8242 	beq.w	80051a2 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004d1e:	4b1c      	ldr	r3, [pc, #112]	@ (8004d90 <HAL_RCC_OscConfig+0xc58>)
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	f003 030c 	and.w	r3, r3, #12
 8004d26:	2b08      	cmp	r3, #8
 8004d28:	f000 8213 	beq.w	8005152 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d30:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	69db      	ldr	r3, [r3, #28]
 8004d38:	2b02      	cmp	r3, #2
 8004d3a:	f040 8162 	bne.w	8005002 <HAL_RCC_OscConfig+0xeca>
 8004d3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d42:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8004d46:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004d4a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d50:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	fa93 f2a3 	rbit	r2, r3
 8004d5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d5e:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8004d62:	601a      	str	r2, [r3, #0]
  return result;
 8004d64:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d68:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8004d6c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d6e:	fab3 f383 	clz	r3, r3
 8004d72:	b2db      	uxtb	r3, r3
 8004d74:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004d78:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004d7c:	009b      	lsls	r3, r3, #2
 8004d7e:	461a      	mov	r2, r3
 8004d80:	2300      	movs	r3, #0
 8004d82:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d84:	f7fd fe8e 	bl	8002aa4 <HAL_GetTick>
 8004d88:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d8c:	e00c      	b.n	8004da8 <HAL_RCC_OscConfig+0xc70>
 8004d8e:	bf00      	nop
 8004d90:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d94:	f7fd fe86 	bl	8002aa4 <HAL_GetTick>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004d9e:	1ad3      	subs	r3, r2, r3
 8004da0:	2b02      	cmp	r3, #2
 8004da2:	d901      	bls.n	8004da8 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8004da4:	2303      	movs	r3, #3
 8004da6:	e1fd      	b.n	80051a4 <HAL_RCC_OscConfig+0x106c>
 8004da8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004dac:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8004db0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004db4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004db6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004dba:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	fa93 f2a3 	rbit	r2, r3
 8004dc4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004dc8:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8004dcc:	601a      	str	r2, [r3, #0]
  return result;
 8004dce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004dd2:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8004dd6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004dd8:	fab3 f383 	clz	r3, r3
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	095b      	lsrs	r3, r3, #5
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	f043 0301 	orr.w	r3, r3, #1
 8004de6:	b2db      	uxtb	r3, r3
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	d102      	bne.n	8004df2 <HAL_RCC_OscConfig+0xcba>
 8004dec:	4bb0      	ldr	r3, [pc, #704]	@ (80050b0 <HAL_RCC_OscConfig+0xf78>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	e027      	b.n	8004e42 <HAL_RCC_OscConfig+0xd0a>
 8004df2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004df6:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8004dfa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004dfe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e04:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	fa93 f2a3 	rbit	r2, r3
 8004e0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e12:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8004e16:	601a      	str	r2, [r3, #0]
 8004e18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e1c:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8004e20:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004e24:	601a      	str	r2, [r3, #0]
 8004e26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e2a:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	fa93 f2a3 	rbit	r2, r3
 8004e34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e38:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8004e3c:	601a      	str	r2, [r3, #0]
 8004e3e:	4b9c      	ldr	r3, [pc, #624]	@ (80050b0 <HAL_RCC_OscConfig+0xf78>)
 8004e40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e42:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004e46:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8004e4a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004e4e:	6011      	str	r1, [r2, #0]
 8004e50:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004e54:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8004e58:	6812      	ldr	r2, [r2, #0]
 8004e5a:	fa92 f1a2 	rbit	r1, r2
 8004e5e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004e62:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8004e66:	6011      	str	r1, [r2, #0]
  return result;
 8004e68:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004e6c:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8004e70:	6812      	ldr	r2, [r2, #0]
 8004e72:	fab2 f282 	clz	r2, r2
 8004e76:	b2d2      	uxtb	r2, r2
 8004e78:	f042 0220 	orr.w	r2, r2, #32
 8004e7c:	b2d2      	uxtb	r2, r2
 8004e7e:	f002 021f 	and.w	r2, r2, #31
 8004e82:	2101      	movs	r1, #1
 8004e84:	fa01 f202 	lsl.w	r2, r1, r2
 8004e88:	4013      	ands	r3, r2
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d182      	bne.n	8004d94 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e8e:	4b88      	ldr	r3, [pc, #544]	@ (80050b0 <HAL_RCC_OscConfig+0xf78>)
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004e96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e9a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004ea2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ea6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	6a1b      	ldr	r3, [r3, #32]
 8004eae:	430b      	orrs	r3, r1
 8004eb0:	497f      	ldr	r1, [pc, #508]	@ (80050b0 <HAL_RCC_OscConfig+0xf78>)
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	604b      	str	r3, [r1, #4]
 8004eb6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004eba:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8004ebe:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004ec2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ec4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ec8:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	fa93 f2a3 	rbit	r2, r3
 8004ed2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ed6:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8004eda:	601a      	str	r2, [r3, #0]
  return result;
 8004edc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ee0:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8004ee4:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ee6:	fab3 f383 	clz	r3, r3
 8004eea:	b2db      	uxtb	r3, r3
 8004eec:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004ef0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004ef4:	009b      	lsls	r3, r3, #2
 8004ef6:	461a      	mov	r2, r3
 8004ef8:	2301      	movs	r3, #1
 8004efa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004efc:	f7fd fdd2 	bl	8002aa4 <HAL_GetTick>
 8004f00:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004f04:	e009      	b.n	8004f1a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f06:	f7fd fdcd 	bl	8002aa4 <HAL_GetTick>
 8004f0a:	4602      	mov	r2, r0
 8004f0c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004f10:	1ad3      	subs	r3, r2, r3
 8004f12:	2b02      	cmp	r3, #2
 8004f14:	d901      	bls.n	8004f1a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8004f16:	2303      	movs	r3, #3
 8004f18:	e144      	b.n	80051a4 <HAL_RCC_OscConfig+0x106c>
 8004f1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f1e:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8004f22:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004f26:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f2c:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	fa93 f2a3 	rbit	r2, r3
 8004f36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f3a:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8004f3e:	601a      	str	r2, [r3, #0]
  return result;
 8004f40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f44:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8004f48:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004f4a:	fab3 f383 	clz	r3, r3
 8004f4e:	b2db      	uxtb	r3, r3
 8004f50:	095b      	lsrs	r3, r3, #5
 8004f52:	b2db      	uxtb	r3, r3
 8004f54:	f043 0301 	orr.w	r3, r3, #1
 8004f58:	b2db      	uxtb	r3, r3
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d102      	bne.n	8004f64 <HAL_RCC_OscConfig+0xe2c>
 8004f5e:	4b54      	ldr	r3, [pc, #336]	@ (80050b0 <HAL_RCC_OscConfig+0xf78>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	e027      	b.n	8004fb4 <HAL_RCC_OscConfig+0xe7c>
 8004f64:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f68:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8004f6c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004f70:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f76:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	fa93 f2a3 	rbit	r2, r3
 8004f80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f84:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8004f88:	601a      	str	r2, [r3, #0]
 8004f8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f8e:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8004f92:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004f96:	601a      	str	r2, [r3, #0]
 8004f98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f9c:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	fa93 f2a3 	rbit	r2, r3
 8004fa6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004faa:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8004fae:	601a      	str	r2, [r3, #0]
 8004fb0:	4b3f      	ldr	r3, [pc, #252]	@ (80050b0 <HAL_RCC_OscConfig+0xf78>)
 8004fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fb4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004fb8:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8004fbc:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004fc0:	6011      	str	r1, [r2, #0]
 8004fc2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004fc6:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8004fca:	6812      	ldr	r2, [r2, #0]
 8004fcc:	fa92 f1a2 	rbit	r1, r2
 8004fd0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004fd4:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8004fd8:	6011      	str	r1, [r2, #0]
  return result;
 8004fda:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004fde:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8004fe2:	6812      	ldr	r2, [r2, #0]
 8004fe4:	fab2 f282 	clz	r2, r2
 8004fe8:	b2d2      	uxtb	r2, r2
 8004fea:	f042 0220 	orr.w	r2, r2, #32
 8004fee:	b2d2      	uxtb	r2, r2
 8004ff0:	f002 021f 	and.w	r2, r2, #31
 8004ff4:	2101      	movs	r1, #1
 8004ff6:	fa01 f202 	lsl.w	r2, r1, r2
 8004ffa:	4013      	ands	r3, r2
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d082      	beq.n	8004f06 <HAL_RCC_OscConfig+0xdce>
 8005000:	e0cf      	b.n	80051a2 <HAL_RCC_OscConfig+0x106a>
 8005002:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005006:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800500a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800500e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005010:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005014:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	fa93 f2a3 	rbit	r2, r3
 800501e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005022:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8005026:	601a      	str	r2, [r3, #0]
  return result;
 8005028:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800502c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8005030:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005032:	fab3 f383 	clz	r3, r3
 8005036:	b2db      	uxtb	r3, r3
 8005038:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800503c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8005040:	009b      	lsls	r3, r3, #2
 8005042:	461a      	mov	r2, r3
 8005044:	2300      	movs	r3, #0
 8005046:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005048:	f7fd fd2c 	bl	8002aa4 <HAL_GetTick>
 800504c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005050:	e009      	b.n	8005066 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005052:	f7fd fd27 	bl	8002aa4 <HAL_GetTick>
 8005056:	4602      	mov	r2, r0
 8005058:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800505c:	1ad3      	subs	r3, r2, r3
 800505e:	2b02      	cmp	r3, #2
 8005060:	d901      	bls.n	8005066 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8005062:	2303      	movs	r3, #3
 8005064:	e09e      	b.n	80051a4 <HAL_RCC_OscConfig+0x106c>
 8005066:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800506a:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800506e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005072:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005074:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005078:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	fa93 f2a3 	rbit	r2, r3
 8005082:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005086:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800508a:	601a      	str	r2, [r3, #0]
  return result;
 800508c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005090:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8005094:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005096:	fab3 f383 	clz	r3, r3
 800509a:	b2db      	uxtb	r3, r3
 800509c:	095b      	lsrs	r3, r3, #5
 800509e:	b2db      	uxtb	r3, r3
 80050a0:	f043 0301 	orr.w	r3, r3, #1
 80050a4:	b2db      	uxtb	r3, r3
 80050a6:	2b01      	cmp	r3, #1
 80050a8:	d104      	bne.n	80050b4 <HAL_RCC_OscConfig+0xf7c>
 80050aa:	4b01      	ldr	r3, [pc, #4]	@ (80050b0 <HAL_RCC_OscConfig+0xf78>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	e029      	b.n	8005104 <HAL_RCC_OscConfig+0xfcc>
 80050b0:	40021000 	.word	0x40021000
 80050b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80050b8:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80050bc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80050c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80050c6:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	fa93 f2a3 	rbit	r2, r3
 80050d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80050d4:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80050d8:	601a      	str	r2, [r3, #0]
 80050da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80050de:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80050e2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80050e6:	601a      	str	r2, [r3, #0]
 80050e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80050ec:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	fa93 f2a3 	rbit	r2, r3
 80050f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80050fa:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80050fe:	601a      	str	r2, [r3, #0]
 8005100:	4b2b      	ldr	r3, [pc, #172]	@ (80051b0 <HAL_RCC_OscConfig+0x1078>)
 8005102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005104:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005108:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800510c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8005110:	6011      	str	r1, [r2, #0]
 8005112:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005116:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800511a:	6812      	ldr	r2, [r2, #0]
 800511c:	fa92 f1a2 	rbit	r1, r2
 8005120:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005124:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8005128:	6011      	str	r1, [r2, #0]
  return result;
 800512a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800512e:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8005132:	6812      	ldr	r2, [r2, #0]
 8005134:	fab2 f282 	clz	r2, r2
 8005138:	b2d2      	uxtb	r2, r2
 800513a:	f042 0220 	orr.w	r2, r2, #32
 800513e:	b2d2      	uxtb	r2, r2
 8005140:	f002 021f 	and.w	r2, r2, #31
 8005144:	2101      	movs	r1, #1
 8005146:	fa01 f202 	lsl.w	r2, r1, r2
 800514a:	4013      	ands	r3, r2
 800514c:	2b00      	cmp	r3, #0
 800514e:	d180      	bne.n	8005052 <HAL_RCC_OscConfig+0xf1a>
 8005150:	e027      	b.n	80051a2 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005152:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005156:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	69db      	ldr	r3, [r3, #28]
 800515e:	2b01      	cmp	r3, #1
 8005160:	d101      	bne.n	8005166 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	e01e      	b.n	80051a4 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005166:	4b12      	ldr	r3, [pc, #72]	@ (80051b0 <HAL_RCC_OscConfig+0x1078>)
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800516e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8005172:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005176:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800517a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	6a1b      	ldr	r3, [r3, #32]
 8005182:	429a      	cmp	r2, r3
 8005184:	d10b      	bne.n	800519e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8005186:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800518a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800518e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005192:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800519a:	429a      	cmp	r2, r3
 800519c:	d001      	beq.n	80051a2 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	e000      	b.n	80051a4 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80051a2:	2300      	movs	r3, #0
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}
 80051ae:	bf00      	nop
 80051b0:	40021000 	.word	0x40021000

080051b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b09e      	sub	sp, #120	@ 0x78
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80051be:	2300      	movs	r3, #0
 80051c0:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d101      	bne.n	80051cc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80051c8:	2301      	movs	r3, #1
 80051ca:	e162      	b.n	8005492 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80051cc:	4b90      	ldr	r3, [pc, #576]	@ (8005410 <HAL_RCC_ClockConfig+0x25c>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f003 0307 	and.w	r3, r3, #7
 80051d4:	683a      	ldr	r2, [r7, #0]
 80051d6:	429a      	cmp	r2, r3
 80051d8:	d910      	bls.n	80051fc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051da:	4b8d      	ldr	r3, [pc, #564]	@ (8005410 <HAL_RCC_ClockConfig+0x25c>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f023 0207 	bic.w	r2, r3, #7
 80051e2:	498b      	ldr	r1, [pc, #556]	@ (8005410 <HAL_RCC_ClockConfig+0x25c>)
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	4313      	orrs	r3, r2
 80051e8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051ea:	4b89      	ldr	r3, [pc, #548]	@ (8005410 <HAL_RCC_ClockConfig+0x25c>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f003 0307 	and.w	r3, r3, #7
 80051f2:	683a      	ldr	r2, [r7, #0]
 80051f4:	429a      	cmp	r2, r3
 80051f6:	d001      	beq.n	80051fc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80051f8:	2301      	movs	r3, #1
 80051fa:	e14a      	b.n	8005492 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f003 0302 	and.w	r3, r3, #2
 8005204:	2b00      	cmp	r3, #0
 8005206:	d008      	beq.n	800521a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005208:	4b82      	ldr	r3, [pc, #520]	@ (8005414 <HAL_RCC_ClockConfig+0x260>)
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	497f      	ldr	r1, [pc, #508]	@ (8005414 <HAL_RCC_ClockConfig+0x260>)
 8005216:	4313      	orrs	r3, r2
 8005218:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f003 0301 	and.w	r3, r3, #1
 8005222:	2b00      	cmp	r3, #0
 8005224:	f000 80dc 	beq.w	80053e0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	2b01      	cmp	r3, #1
 800522e:	d13c      	bne.n	80052aa <HAL_RCC_ClockConfig+0xf6>
 8005230:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005234:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005236:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005238:	fa93 f3a3 	rbit	r3, r3
 800523c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800523e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005240:	fab3 f383 	clz	r3, r3
 8005244:	b2db      	uxtb	r3, r3
 8005246:	095b      	lsrs	r3, r3, #5
 8005248:	b2db      	uxtb	r3, r3
 800524a:	f043 0301 	orr.w	r3, r3, #1
 800524e:	b2db      	uxtb	r3, r3
 8005250:	2b01      	cmp	r3, #1
 8005252:	d102      	bne.n	800525a <HAL_RCC_ClockConfig+0xa6>
 8005254:	4b6f      	ldr	r3, [pc, #444]	@ (8005414 <HAL_RCC_ClockConfig+0x260>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	e00f      	b.n	800527a <HAL_RCC_ClockConfig+0xc6>
 800525a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800525e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005260:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005262:	fa93 f3a3 	rbit	r3, r3
 8005266:	667b      	str	r3, [r7, #100]	@ 0x64
 8005268:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800526c:	663b      	str	r3, [r7, #96]	@ 0x60
 800526e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005270:	fa93 f3a3 	rbit	r3, r3
 8005274:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005276:	4b67      	ldr	r3, [pc, #412]	@ (8005414 <HAL_RCC_ClockConfig+0x260>)
 8005278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800527a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800527e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005280:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005282:	fa92 f2a2 	rbit	r2, r2
 8005286:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8005288:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800528a:	fab2 f282 	clz	r2, r2
 800528e:	b2d2      	uxtb	r2, r2
 8005290:	f042 0220 	orr.w	r2, r2, #32
 8005294:	b2d2      	uxtb	r2, r2
 8005296:	f002 021f 	and.w	r2, r2, #31
 800529a:	2101      	movs	r1, #1
 800529c:	fa01 f202 	lsl.w	r2, r1, r2
 80052a0:	4013      	ands	r3, r2
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d17b      	bne.n	800539e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	e0f3      	b.n	8005492 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	2b02      	cmp	r3, #2
 80052b0:	d13c      	bne.n	800532c <HAL_RCC_ClockConfig+0x178>
 80052b2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80052b6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80052ba:	fa93 f3a3 	rbit	r3, r3
 80052be:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80052c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052c2:	fab3 f383 	clz	r3, r3
 80052c6:	b2db      	uxtb	r3, r3
 80052c8:	095b      	lsrs	r3, r3, #5
 80052ca:	b2db      	uxtb	r3, r3
 80052cc:	f043 0301 	orr.w	r3, r3, #1
 80052d0:	b2db      	uxtb	r3, r3
 80052d2:	2b01      	cmp	r3, #1
 80052d4:	d102      	bne.n	80052dc <HAL_RCC_ClockConfig+0x128>
 80052d6:	4b4f      	ldr	r3, [pc, #316]	@ (8005414 <HAL_RCC_ClockConfig+0x260>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	e00f      	b.n	80052fc <HAL_RCC_ClockConfig+0x148>
 80052dc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80052e0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80052e4:	fa93 f3a3 	rbit	r3, r3
 80052e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80052ea:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80052ee:	643b      	str	r3, [r7, #64]	@ 0x40
 80052f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80052f2:	fa93 f3a3 	rbit	r3, r3
 80052f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80052f8:	4b46      	ldr	r3, [pc, #280]	@ (8005414 <HAL_RCC_ClockConfig+0x260>)
 80052fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052fc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005300:	63ba      	str	r2, [r7, #56]	@ 0x38
 8005302:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005304:	fa92 f2a2 	rbit	r2, r2
 8005308:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 800530a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800530c:	fab2 f282 	clz	r2, r2
 8005310:	b2d2      	uxtb	r2, r2
 8005312:	f042 0220 	orr.w	r2, r2, #32
 8005316:	b2d2      	uxtb	r2, r2
 8005318:	f002 021f 	and.w	r2, r2, #31
 800531c:	2101      	movs	r1, #1
 800531e:	fa01 f202 	lsl.w	r2, r1, r2
 8005322:	4013      	ands	r3, r2
 8005324:	2b00      	cmp	r3, #0
 8005326:	d13a      	bne.n	800539e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005328:	2301      	movs	r3, #1
 800532a:	e0b2      	b.n	8005492 <HAL_RCC_ClockConfig+0x2de>
 800532c:	2302      	movs	r3, #2
 800532e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005330:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005332:	fa93 f3a3 	rbit	r3, r3
 8005336:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8005338:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800533a:	fab3 f383 	clz	r3, r3
 800533e:	b2db      	uxtb	r3, r3
 8005340:	095b      	lsrs	r3, r3, #5
 8005342:	b2db      	uxtb	r3, r3
 8005344:	f043 0301 	orr.w	r3, r3, #1
 8005348:	b2db      	uxtb	r3, r3
 800534a:	2b01      	cmp	r3, #1
 800534c:	d102      	bne.n	8005354 <HAL_RCC_ClockConfig+0x1a0>
 800534e:	4b31      	ldr	r3, [pc, #196]	@ (8005414 <HAL_RCC_ClockConfig+0x260>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	e00d      	b.n	8005370 <HAL_RCC_ClockConfig+0x1bc>
 8005354:	2302      	movs	r3, #2
 8005356:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005358:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800535a:	fa93 f3a3 	rbit	r3, r3
 800535e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005360:	2302      	movs	r3, #2
 8005362:	623b      	str	r3, [r7, #32]
 8005364:	6a3b      	ldr	r3, [r7, #32]
 8005366:	fa93 f3a3 	rbit	r3, r3
 800536a:	61fb      	str	r3, [r7, #28]
 800536c:	4b29      	ldr	r3, [pc, #164]	@ (8005414 <HAL_RCC_ClockConfig+0x260>)
 800536e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005370:	2202      	movs	r2, #2
 8005372:	61ba      	str	r2, [r7, #24]
 8005374:	69ba      	ldr	r2, [r7, #24]
 8005376:	fa92 f2a2 	rbit	r2, r2
 800537a:	617a      	str	r2, [r7, #20]
  return result;
 800537c:	697a      	ldr	r2, [r7, #20]
 800537e:	fab2 f282 	clz	r2, r2
 8005382:	b2d2      	uxtb	r2, r2
 8005384:	f042 0220 	orr.w	r2, r2, #32
 8005388:	b2d2      	uxtb	r2, r2
 800538a:	f002 021f 	and.w	r2, r2, #31
 800538e:	2101      	movs	r1, #1
 8005390:	fa01 f202 	lsl.w	r2, r1, r2
 8005394:	4013      	ands	r3, r2
 8005396:	2b00      	cmp	r3, #0
 8005398:	d101      	bne.n	800539e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800539a:	2301      	movs	r3, #1
 800539c:	e079      	b.n	8005492 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800539e:	4b1d      	ldr	r3, [pc, #116]	@ (8005414 <HAL_RCC_ClockConfig+0x260>)
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	f023 0203 	bic.w	r2, r3, #3
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	491a      	ldr	r1, [pc, #104]	@ (8005414 <HAL_RCC_ClockConfig+0x260>)
 80053ac:	4313      	orrs	r3, r2
 80053ae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80053b0:	f7fd fb78 	bl	8002aa4 <HAL_GetTick>
 80053b4:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053b6:	e00a      	b.n	80053ce <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053b8:	f7fd fb74 	bl	8002aa4 <HAL_GetTick>
 80053bc:	4602      	mov	r2, r0
 80053be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80053c0:	1ad3      	subs	r3, r2, r3
 80053c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d901      	bls.n	80053ce <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80053ca:	2303      	movs	r3, #3
 80053cc:	e061      	b.n	8005492 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053ce:	4b11      	ldr	r3, [pc, #68]	@ (8005414 <HAL_RCC_ClockConfig+0x260>)
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	f003 020c 	and.w	r2, r3, #12
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	009b      	lsls	r3, r3, #2
 80053dc:	429a      	cmp	r2, r3
 80053de:	d1eb      	bne.n	80053b8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80053e0:	4b0b      	ldr	r3, [pc, #44]	@ (8005410 <HAL_RCC_ClockConfig+0x25c>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f003 0307 	and.w	r3, r3, #7
 80053e8:	683a      	ldr	r2, [r7, #0]
 80053ea:	429a      	cmp	r2, r3
 80053ec:	d214      	bcs.n	8005418 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053ee:	4b08      	ldr	r3, [pc, #32]	@ (8005410 <HAL_RCC_ClockConfig+0x25c>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f023 0207 	bic.w	r2, r3, #7
 80053f6:	4906      	ldr	r1, [pc, #24]	@ (8005410 <HAL_RCC_ClockConfig+0x25c>)
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	4313      	orrs	r3, r2
 80053fc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053fe:	4b04      	ldr	r3, [pc, #16]	@ (8005410 <HAL_RCC_ClockConfig+0x25c>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f003 0307 	and.w	r3, r3, #7
 8005406:	683a      	ldr	r2, [r7, #0]
 8005408:	429a      	cmp	r2, r3
 800540a:	d005      	beq.n	8005418 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800540c:	2301      	movs	r3, #1
 800540e:	e040      	b.n	8005492 <HAL_RCC_ClockConfig+0x2de>
 8005410:	40022000 	.word	0x40022000
 8005414:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f003 0304 	and.w	r3, r3, #4
 8005420:	2b00      	cmp	r3, #0
 8005422:	d008      	beq.n	8005436 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005424:	4b1d      	ldr	r3, [pc, #116]	@ (800549c <HAL_RCC_ClockConfig+0x2e8>)
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	68db      	ldr	r3, [r3, #12]
 8005430:	491a      	ldr	r1, [pc, #104]	@ (800549c <HAL_RCC_ClockConfig+0x2e8>)
 8005432:	4313      	orrs	r3, r2
 8005434:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f003 0308 	and.w	r3, r3, #8
 800543e:	2b00      	cmp	r3, #0
 8005440:	d009      	beq.n	8005456 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005442:	4b16      	ldr	r3, [pc, #88]	@ (800549c <HAL_RCC_ClockConfig+0x2e8>)
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	691b      	ldr	r3, [r3, #16]
 800544e:	00db      	lsls	r3, r3, #3
 8005450:	4912      	ldr	r1, [pc, #72]	@ (800549c <HAL_RCC_ClockConfig+0x2e8>)
 8005452:	4313      	orrs	r3, r2
 8005454:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005456:	f000 f829 	bl	80054ac <HAL_RCC_GetSysClockFreq>
 800545a:	4601      	mov	r1, r0
 800545c:	4b0f      	ldr	r3, [pc, #60]	@ (800549c <HAL_RCC_ClockConfig+0x2e8>)
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005464:	22f0      	movs	r2, #240	@ 0xf0
 8005466:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005468:	693a      	ldr	r2, [r7, #16]
 800546a:	fa92 f2a2 	rbit	r2, r2
 800546e:	60fa      	str	r2, [r7, #12]
  return result;
 8005470:	68fa      	ldr	r2, [r7, #12]
 8005472:	fab2 f282 	clz	r2, r2
 8005476:	b2d2      	uxtb	r2, r2
 8005478:	40d3      	lsrs	r3, r2
 800547a:	4a09      	ldr	r2, [pc, #36]	@ (80054a0 <HAL_RCC_ClockConfig+0x2ec>)
 800547c:	5cd3      	ldrb	r3, [r2, r3]
 800547e:	fa21 f303 	lsr.w	r3, r1, r3
 8005482:	4a08      	ldr	r2, [pc, #32]	@ (80054a4 <HAL_RCC_ClockConfig+0x2f0>)
 8005484:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8005486:	4b08      	ldr	r3, [pc, #32]	@ (80054a8 <HAL_RCC_ClockConfig+0x2f4>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4618      	mov	r0, r3
 800548c:	f7fd fac6 	bl	8002a1c <HAL_InitTick>
  
  return HAL_OK;
 8005490:	2300      	movs	r3, #0
}
 8005492:	4618      	mov	r0, r3
 8005494:	3778      	adds	r7, #120	@ 0x78
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}
 800549a:	bf00      	nop
 800549c:	40021000 	.word	0x40021000
 80054a0:	0800a9ac 	.word	0x0800a9ac
 80054a4:	20000000 	.word	0x20000000
 80054a8:	20000004 	.word	0x20000004

080054ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b087      	sub	sp, #28
 80054b0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80054b2:	2300      	movs	r3, #0
 80054b4:	60fb      	str	r3, [r7, #12]
 80054b6:	2300      	movs	r3, #0
 80054b8:	60bb      	str	r3, [r7, #8]
 80054ba:	2300      	movs	r3, #0
 80054bc:	617b      	str	r3, [r7, #20]
 80054be:	2300      	movs	r3, #0
 80054c0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80054c2:	2300      	movs	r3, #0
 80054c4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80054c6:	4b1e      	ldr	r3, [pc, #120]	@ (8005540 <HAL_RCC_GetSysClockFreq+0x94>)
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f003 030c 	and.w	r3, r3, #12
 80054d2:	2b04      	cmp	r3, #4
 80054d4:	d002      	beq.n	80054dc <HAL_RCC_GetSysClockFreq+0x30>
 80054d6:	2b08      	cmp	r3, #8
 80054d8:	d003      	beq.n	80054e2 <HAL_RCC_GetSysClockFreq+0x36>
 80054da:	e026      	b.n	800552a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80054dc:	4b19      	ldr	r3, [pc, #100]	@ (8005544 <HAL_RCC_GetSysClockFreq+0x98>)
 80054de:	613b      	str	r3, [r7, #16]
      break;
 80054e0:	e026      	b.n	8005530 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	0c9b      	lsrs	r3, r3, #18
 80054e6:	f003 030f 	and.w	r3, r3, #15
 80054ea:	4a17      	ldr	r2, [pc, #92]	@ (8005548 <HAL_RCC_GetSysClockFreq+0x9c>)
 80054ec:	5cd3      	ldrb	r3, [r2, r3]
 80054ee:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80054f0:	4b13      	ldr	r3, [pc, #76]	@ (8005540 <HAL_RCC_GetSysClockFreq+0x94>)
 80054f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054f4:	f003 030f 	and.w	r3, r3, #15
 80054f8:	4a14      	ldr	r2, [pc, #80]	@ (800554c <HAL_RCC_GetSysClockFreq+0xa0>)
 80054fa:	5cd3      	ldrb	r3, [r2, r3]
 80054fc:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005504:	2b00      	cmp	r3, #0
 8005506:	d008      	beq.n	800551a <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005508:	4a0e      	ldr	r2, [pc, #56]	@ (8005544 <HAL_RCC_GetSysClockFreq+0x98>)
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	fb02 f303 	mul.w	r3, r2, r3
 8005516:	617b      	str	r3, [r7, #20]
 8005518:	e004      	b.n	8005524 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	4a0c      	ldr	r2, [pc, #48]	@ (8005550 <HAL_RCC_GetSysClockFreq+0xa4>)
 800551e:	fb02 f303 	mul.w	r3, r2, r3
 8005522:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	613b      	str	r3, [r7, #16]
      break;
 8005528:	e002      	b.n	8005530 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800552a:	4b06      	ldr	r3, [pc, #24]	@ (8005544 <HAL_RCC_GetSysClockFreq+0x98>)
 800552c:	613b      	str	r3, [r7, #16]
      break;
 800552e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005530:	693b      	ldr	r3, [r7, #16]
}
 8005532:	4618      	mov	r0, r3
 8005534:	371c      	adds	r7, #28
 8005536:	46bd      	mov	sp, r7
 8005538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553c:	4770      	bx	lr
 800553e:	bf00      	nop
 8005540:	40021000 	.word	0x40021000
 8005544:	007a1200 	.word	0x007a1200
 8005548:	0800a9c4 	.word	0x0800a9c4
 800554c:	0800a9d4 	.word	0x0800a9d4
 8005550:	003d0900 	.word	0x003d0900

08005554 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005554:	b480      	push	{r7}
 8005556:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005558:	4b03      	ldr	r3, [pc, #12]	@ (8005568 <HAL_RCC_GetHCLKFreq+0x14>)
 800555a:	681b      	ldr	r3, [r3, #0]
}
 800555c:	4618      	mov	r0, r3
 800555e:	46bd      	mov	sp, r7
 8005560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005564:	4770      	bx	lr
 8005566:	bf00      	nop
 8005568:	20000000 	.word	0x20000000

0800556c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b082      	sub	sp, #8
 8005570:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8005572:	f7ff ffef 	bl	8005554 <HAL_RCC_GetHCLKFreq>
 8005576:	4601      	mov	r1, r0
 8005578:	4b0b      	ldr	r3, [pc, #44]	@ (80055a8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005580:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8005584:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005586:	687a      	ldr	r2, [r7, #4]
 8005588:	fa92 f2a2 	rbit	r2, r2
 800558c:	603a      	str	r2, [r7, #0]
  return result;
 800558e:	683a      	ldr	r2, [r7, #0]
 8005590:	fab2 f282 	clz	r2, r2
 8005594:	b2d2      	uxtb	r2, r2
 8005596:	40d3      	lsrs	r3, r2
 8005598:	4a04      	ldr	r2, [pc, #16]	@ (80055ac <HAL_RCC_GetPCLK1Freq+0x40>)
 800559a:	5cd3      	ldrb	r3, [r2, r3]
 800559c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80055a0:	4618      	mov	r0, r3
 80055a2:	3708      	adds	r7, #8
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}
 80055a8:	40021000 	.word	0x40021000
 80055ac:	0800a9bc 	.word	0x0800a9bc

080055b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b082      	sub	sp, #8
 80055b4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80055b6:	f7ff ffcd 	bl	8005554 <HAL_RCC_GetHCLKFreq>
 80055ba:	4601      	mov	r1, r0
 80055bc:	4b0b      	ldr	r3, [pc, #44]	@ (80055ec <HAL_RCC_GetPCLK2Freq+0x3c>)
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 80055c4:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 80055c8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055ca:	687a      	ldr	r2, [r7, #4]
 80055cc:	fa92 f2a2 	rbit	r2, r2
 80055d0:	603a      	str	r2, [r7, #0]
  return result;
 80055d2:	683a      	ldr	r2, [r7, #0]
 80055d4:	fab2 f282 	clz	r2, r2
 80055d8:	b2d2      	uxtb	r2, r2
 80055da:	40d3      	lsrs	r3, r2
 80055dc:	4a04      	ldr	r2, [pc, #16]	@ (80055f0 <HAL_RCC_GetPCLK2Freq+0x40>)
 80055de:	5cd3      	ldrb	r3, [r2, r3]
 80055e0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80055e4:	4618      	mov	r0, r3
 80055e6:	3708      	adds	r7, #8
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}
 80055ec:	40021000 	.word	0x40021000
 80055f0:	0800a9bc 	.word	0x0800a9bc

080055f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b092      	sub	sp, #72	@ 0x48
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80055fc:	2300      	movs	r3, #0
 80055fe:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8005600:	2300      	movs	r3, #0
 8005602:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005604:	2300      	movs	r3, #0
 8005606:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005612:	2b00      	cmp	r3, #0
 8005614:	f000 80cd 	beq.w	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005618:	4b86      	ldr	r3, [pc, #536]	@ (8005834 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800561a:	69db      	ldr	r3, [r3, #28]
 800561c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005620:	2b00      	cmp	r3, #0
 8005622:	d10e      	bne.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005624:	4b83      	ldr	r3, [pc, #524]	@ (8005834 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005626:	69db      	ldr	r3, [r3, #28]
 8005628:	4a82      	ldr	r2, [pc, #520]	@ (8005834 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800562a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800562e:	61d3      	str	r3, [r2, #28]
 8005630:	4b80      	ldr	r3, [pc, #512]	@ (8005834 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005632:	69db      	ldr	r3, [r3, #28]
 8005634:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005638:	60bb      	str	r3, [r7, #8]
 800563a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800563c:	2301      	movs	r3, #1
 800563e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005642:	4b7d      	ldr	r3, [pc, #500]	@ (8005838 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800564a:	2b00      	cmp	r3, #0
 800564c:	d118      	bne.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800564e:	4b7a      	ldr	r3, [pc, #488]	@ (8005838 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a79      	ldr	r2, [pc, #484]	@ (8005838 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8005654:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005658:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800565a:	f7fd fa23 	bl	8002aa4 <HAL_GetTick>
 800565e:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005660:	e008      	b.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005662:	f7fd fa1f 	bl	8002aa4 <HAL_GetTick>
 8005666:	4602      	mov	r2, r0
 8005668:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800566a:	1ad3      	subs	r3, r2, r3
 800566c:	2b64      	cmp	r3, #100	@ 0x64
 800566e:	d901      	bls.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005670:	2303      	movs	r3, #3
 8005672:	e0db      	b.n	800582c <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005674:	4b70      	ldr	r3, [pc, #448]	@ (8005838 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800567c:	2b00      	cmp	r3, #0
 800567e:	d0f0      	beq.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005680:	4b6c      	ldr	r3, [pc, #432]	@ (8005834 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005682:	6a1b      	ldr	r3, [r3, #32]
 8005684:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005688:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800568a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800568c:	2b00      	cmp	r3, #0
 800568e:	d07d      	beq.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005698:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800569a:	429a      	cmp	r2, r3
 800569c:	d076      	beq.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800569e:	4b65      	ldr	r3, [pc, #404]	@ (8005834 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80056a0:	6a1b      	ldr	r3, [r3, #32]
 80056a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80056a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80056a8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80056ac:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056b0:	fa93 f3a3 	rbit	r3, r3
 80056b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80056b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80056b8:	fab3 f383 	clz	r3, r3
 80056bc:	b2db      	uxtb	r3, r3
 80056be:	461a      	mov	r2, r3
 80056c0:	4b5e      	ldr	r3, [pc, #376]	@ (800583c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80056c2:	4413      	add	r3, r2
 80056c4:	009b      	lsls	r3, r3, #2
 80056c6:	461a      	mov	r2, r3
 80056c8:	2301      	movs	r3, #1
 80056ca:	6013      	str	r3, [r2, #0]
 80056cc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80056d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056d4:	fa93 f3a3 	rbit	r3, r3
 80056d8:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80056da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80056dc:	fab3 f383 	clz	r3, r3
 80056e0:	b2db      	uxtb	r3, r3
 80056e2:	461a      	mov	r2, r3
 80056e4:	4b55      	ldr	r3, [pc, #340]	@ (800583c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80056e6:	4413      	add	r3, r2
 80056e8:	009b      	lsls	r3, r3, #2
 80056ea:	461a      	mov	r2, r3
 80056ec:	2300      	movs	r3, #0
 80056ee:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80056f0:	4a50      	ldr	r2, [pc, #320]	@ (8005834 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80056f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056f4:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80056f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056f8:	f003 0301 	and.w	r3, r3, #1
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d045      	beq.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005700:	f7fd f9d0 	bl	8002aa4 <HAL_GetTick>
 8005704:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005706:	e00a      	b.n	800571e <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005708:	f7fd f9cc 	bl	8002aa4 <HAL_GetTick>
 800570c:	4602      	mov	r2, r0
 800570e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005710:	1ad3      	subs	r3, r2, r3
 8005712:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005716:	4293      	cmp	r3, r2
 8005718:	d901      	bls.n	800571e <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800571a:	2303      	movs	r3, #3
 800571c:	e086      	b.n	800582c <HAL_RCCEx_PeriphCLKConfig+0x238>
 800571e:	2302      	movs	r3, #2
 8005720:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005722:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005724:	fa93 f3a3 	rbit	r3, r3
 8005728:	627b      	str	r3, [r7, #36]	@ 0x24
 800572a:	2302      	movs	r3, #2
 800572c:	623b      	str	r3, [r7, #32]
 800572e:	6a3b      	ldr	r3, [r7, #32]
 8005730:	fa93 f3a3 	rbit	r3, r3
 8005734:	61fb      	str	r3, [r7, #28]
  return result;
 8005736:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005738:	fab3 f383 	clz	r3, r3
 800573c:	b2db      	uxtb	r3, r3
 800573e:	095b      	lsrs	r3, r3, #5
 8005740:	b2db      	uxtb	r3, r3
 8005742:	f043 0302 	orr.w	r3, r3, #2
 8005746:	b2db      	uxtb	r3, r3
 8005748:	2b02      	cmp	r3, #2
 800574a:	d102      	bne.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800574c:	4b39      	ldr	r3, [pc, #228]	@ (8005834 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800574e:	6a1b      	ldr	r3, [r3, #32]
 8005750:	e007      	b.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8005752:	2302      	movs	r3, #2
 8005754:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005756:	69bb      	ldr	r3, [r7, #24]
 8005758:	fa93 f3a3 	rbit	r3, r3
 800575c:	617b      	str	r3, [r7, #20]
 800575e:	4b35      	ldr	r3, [pc, #212]	@ (8005834 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005760:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005762:	2202      	movs	r2, #2
 8005764:	613a      	str	r2, [r7, #16]
 8005766:	693a      	ldr	r2, [r7, #16]
 8005768:	fa92 f2a2 	rbit	r2, r2
 800576c:	60fa      	str	r2, [r7, #12]
  return result;
 800576e:	68fa      	ldr	r2, [r7, #12]
 8005770:	fab2 f282 	clz	r2, r2
 8005774:	b2d2      	uxtb	r2, r2
 8005776:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800577a:	b2d2      	uxtb	r2, r2
 800577c:	f002 021f 	and.w	r2, r2, #31
 8005780:	2101      	movs	r1, #1
 8005782:	fa01 f202 	lsl.w	r2, r1, r2
 8005786:	4013      	ands	r3, r2
 8005788:	2b00      	cmp	r3, #0
 800578a:	d0bd      	beq.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800578c:	4b29      	ldr	r3, [pc, #164]	@ (8005834 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800578e:	6a1b      	ldr	r3, [r3, #32]
 8005790:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	4926      	ldr	r1, [pc, #152]	@ (8005834 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800579a:	4313      	orrs	r3, r2
 800579c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800579e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	d105      	bne.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057a6:	4b23      	ldr	r3, [pc, #140]	@ (8005834 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80057a8:	69db      	ldr	r3, [r3, #28]
 80057aa:	4a22      	ldr	r2, [pc, #136]	@ (8005834 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80057ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80057b0:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f003 0301 	and.w	r3, r3, #1
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d008      	beq.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80057be:	4b1d      	ldr	r3, [pc, #116]	@ (8005834 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80057c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057c2:	f023 0203 	bic.w	r2, r3, #3
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	689b      	ldr	r3, [r3, #8]
 80057ca:	491a      	ldr	r1, [pc, #104]	@ (8005834 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80057cc:	4313      	orrs	r3, r2
 80057ce:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f003 0320 	and.w	r3, r3, #32
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d008      	beq.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80057dc:	4b15      	ldr	r3, [pc, #84]	@ (8005834 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80057de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057e0:	f023 0210 	bic.w	r2, r3, #16
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	68db      	ldr	r3, [r3, #12]
 80057e8:	4912      	ldr	r1, [pc, #72]	@ (8005834 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80057ea:	4313      	orrs	r3, r2
 80057ec:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d008      	beq.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80057fa:	4b0e      	ldr	r3, [pc, #56]	@ (8005834 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80057fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057fe:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	691b      	ldr	r3, [r3, #16]
 8005806:	490b      	ldr	r1, [pc, #44]	@ (8005834 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005808:	4313      	orrs	r3, r2
 800580a:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005814:	2b00      	cmp	r3, #0
 8005816:	d008      	beq.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005818:	4b06      	ldr	r3, [pc, #24]	@ (8005834 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800581a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800581c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	695b      	ldr	r3, [r3, #20]
 8005824:	4903      	ldr	r1, [pc, #12]	@ (8005834 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005826:	4313      	orrs	r3, r2
 8005828:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800582a:	2300      	movs	r3, #0
}
 800582c:	4618      	mov	r0, r3
 800582e:	3748      	adds	r7, #72	@ 0x48
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}
 8005834:	40021000 	.word	0x40021000
 8005838:	40007000 	.word	0x40007000
 800583c:	10908100 	.word	0x10908100

08005840 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b084      	sub	sp, #16
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d101      	bne.n	8005852 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	e095      	b.n	800597e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005856:	2b00      	cmp	r3, #0
 8005858:	d108      	bne.n	800586c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005862:	d009      	beq.n	8005878 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2200      	movs	r2, #0
 8005868:	61da      	str	r2, [r3, #28]
 800586a:	e005      	b.n	8005878 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2200      	movs	r2, #0
 8005870:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2200      	movs	r2, #0
 8005876:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2200      	movs	r2, #0
 800587c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005884:	b2db      	uxtb	r3, r3
 8005886:	2b00      	cmp	r3, #0
 8005888:	d106      	bne.n	8005898 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2200      	movs	r2, #0
 800588e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f7fc fd90 	bl	80023b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2202      	movs	r2, #2
 800589c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	681a      	ldr	r2, [r3, #0]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80058ae:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	68db      	ldr	r3, [r3, #12]
 80058b4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80058b8:	d902      	bls.n	80058c0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80058ba:	2300      	movs	r3, #0
 80058bc:	60fb      	str	r3, [r7, #12]
 80058be:	e002      	b.n	80058c6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80058c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80058c4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	68db      	ldr	r3, [r3, #12]
 80058ca:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80058ce:	d007      	beq.n	80058e0 <HAL_SPI_Init+0xa0>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	68db      	ldr	r3, [r3, #12]
 80058d4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80058d8:	d002      	beq.n	80058e0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2200      	movs	r2, #0
 80058de:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80058f0:	431a      	orrs	r2, r3
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	691b      	ldr	r3, [r3, #16]
 80058f6:	f003 0302 	and.w	r3, r3, #2
 80058fa:	431a      	orrs	r2, r3
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	695b      	ldr	r3, [r3, #20]
 8005900:	f003 0301 	and.w	r3, r3, #1
 8005904:	431a      	orrs	r2, r3
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	699b      	ldr	r3, [r3, #24]
 800590a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800590e:	431a      	orrs	r2, r3
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	69db      	ldr	r3, [r3, #28]
 8005914:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005918:	431a      	orrs	r2, r3
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6a1b      	ldr	r3, [r3, #32]
 800591e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005922:	ea42 0103 	orr.w	r1, r2, r3
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800592a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	430a      	orrs	r2, r1
 8005934:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	699b      	ldr	r3, [r3, #24]
 800593a:	0c1b      	lsrs	r3, r3, #16
 800593c:	f003 0204 	and.w	r2, r3, #4
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005944:	f003 0310 	and.w	r3, r3, #16
 8005948:	431a      	orrs	r2, r3
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800594e:	f003 0308 	and.w	r3, r3, #8
 8005952:	431a      	orrs	r2, r3
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	68db      	ldr	r3, [r3, #12]
 8005958:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800595c:	ea42 0103 	orr.w	r1, r2, r3
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	430a      	orrs	r2, r1
 800596c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2200      	movs	r2, #0
 8005972:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2201      	movs	r2, #1
 8005978:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800597c:	2300      	movs	r3, #0
}
 800597e:	4618      	mov	r0, r3
 8005980:	3710      	adds	r7, #16
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}
	...

08005988 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b086      	sub	sp, #24
 800598c:	af00      	add	r7, sp, #0
 800598e:	60f8      	str	r0, [r7, #12]
 8005990:	60b9      	str	r1, [r7, #8]
 8005992:	607a      	str	r2, [r7, #4]
 8005994:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005996:	2300      	movs	r3, #0
 8005998:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80059a0:	2b01      	cmp	r3, #1
 80059a2:	d101      	bne.n	80059a8 <HAL_SPI_TransmitReceive_DMA+0x20>
 80059a4:	2302      	movs	r3, #2
 80059a6:	e164      	b.n	8005c72 <HAL_SPI_TransmitReceive_DMA+0x2ea>
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2201      	movs	r2, #1
 80059ac:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80059b6:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 80059be:	7dbb      	ldrb	r3, [r7, #22]
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d00d      	beq.n	80059e0 <HAL_SPI_TransmitReceive_DMA+0x58>
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80059ca:	d106      	bne.n	80059da <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	689b      	ldr	r3, [r3, #8]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d102      	bne.n	80059da <HAL_SPI_TransmitReceive_DMA+0x52>
 80059d4:	7dbb      	ldrb	r3, [r7, #22]
 80059d6:	2b04      	cmp	r3, #4
 80059d8:	d002      	beq.n	80059e0 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 80059da:	2302      	movs	r3, #2
 80059dc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80059de:	e143      	b.n	8005c68 <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d005      	beq.n	80059f2 <HAL_SPI_TransmitReceive_DMA+0x6a>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d002      	beq.n	80059f2 <HAL_SPI_TransmitReceive_DMA+0x6a>
 80059ec:	887b      	ldrh	r3, [r7, #2]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d102      	bne.n	80059f8 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80059f6:	e137      	b.n	8005c68 <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80059fe:	b2db      	uxtb	r3, r3
 8005a00:	2b04      	cmp	r3, #4
 8005a02:	d003      	beq.n	8005a0c <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	2205      	movs	r2, #5
 8005a08:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	68ba      	ldr	r2, [r7, #8]
 8005a16:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	887a      	ldrh	r2, [r7, #2]
 8005a1c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	887a      	ldrh	r2, [r7, #2]
 8005a22:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	687a      	ldr	r2, [r7, #4]
 8005a28:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	887a      	ldrh	r2, [r7, #2]
 8005a2e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	887a      	ldrh	r2, [r7, #2]
 8005a36:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2200      	movs	r2, #0
 8005a44:	651a      	str	r2, [r3, #80]	@ 0x50
    goto error;
  }
#endif /* STM32F302xC || STM32F303xC || STM32F373xC || STM32F358xx || STM32F378xx */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	685a      	ldr	r2, [r3, #4]
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f422 42c0 	bic.w	r2, r2, #24576	@ 0x6000
 8005a54:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	68db      	ldr	r3, [r3, #12]
 8005a5a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005a5e:	d908      	bls.n	8005a72 <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	685a      	ldr	r2, [r3, #4]
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005a6e:	605a      	str	r2, [r3, #4]
 8005a70:	e06f      	b.n	8005b52 <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	685a      	ldr	r2, [r3, #4]
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005a80:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a86:	695b      	ldr	r3, [r3, #20]
 8005a88:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a8c:	d126      	bne.n	8005adc <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8005a92:	f003 0301 	and.w	r3, r3, #1
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d10f      	bne.n	8005aba <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	685a      	ldr	r2, [r3, #4]
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005aa8:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	085b      	lsrs	r3, r3, #1
 8005ab2:	b29a      	uxth	r2, r3
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005ab8:	e010      	b.n	8005adc <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	685a      	ldr	r2, [r3, #4]
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005ac8:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ace:	b29b      	uxth	r3, r3
 8005ad0:	085b      	lsrs	r3, r3, #1
 8005ad2:	b29b      	uxth	r3, r3
 8005ad4:	3301      	adds	r3, #1
 8005ad6:	b29a      	uxth	r2, r3
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ae0:	695b      	ldr	r3, [r3, #20]
 8005ae2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ae6:	d134      	bne.n	8005b52 <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	685a      	ldr	r2, [r3, #4]
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005af6:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005afe:	b29b      	uxth	r3, r3
 8005b00:	f003 0301 	and.w	r3, r3, #1
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d111      	bne.n	8005b2c <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	685a      	ldr	r2, [r3, #4]
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005b16:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005b1e:	b29b      	uxth	r3, r3
 8005b20:	085b      	lsrs	r3, r3, #1
 8005b22:	b29a      	uxth	r2, r3
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8005b2a:	e012      	b.n	8005b52 <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	685a      	ldr	r2, [r3, #4]
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005b3a:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005b42:	b29b      	uxth	r3, r3
 8005b44:	085b      	lsrs	r3, r3, #1
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	3301      	adds	r3, #1
 8005b4a:	b29a      	uxth	r2, r3
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005b58:	b2db      	uxtb	r3, r3
 8005b5a:	2b04      	cmp	r3, #4
 8005b5c:	d108      	bne.n	8005b70 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b62:	4a46      	ldr	r2, [pc, #280]	@ (8005c7c <HAL_SPI_TransmitReceive_DMA+0x2f4>)
 8005b64:	62da      	str	r2, [r3, #44]	@ 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b6a:	4a45      	ldr	r2, [pc, #276]	@ (8005c80 <HAL_SPI_TransmitReceive_DMA+0x2f8>)
 8005b6c:	629a      	str	r2, [r3, #40]	@ 0x28
 8005b6e:	e007      	b.n	8005b80 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b74:	4a43      	ldr	r2, [pc, #268]	@ (8005c84 <HAL_SPI_TransmitReceive_DMA+0x2fc>)
 8005b76:	62da      	str	r2, [r3, #44]	@ 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b7c:	4a42      	ldr	r2, [pc, #264]	@ (8005c88 <HAL_SPI_TransmitReceive_DMA+0x300>)
 8005b7e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b84:	4a41      	ldr	r2, [pc, #260]	@ (8005c8c <HAL_SPI_TransmitReceive_DMA+0x304>)
 8005b86:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	330c      	adds	r3, #12
 8005b9a:	4619      	mov	r1, r3
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ba0:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005ba8:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8005baa:	f7fd ffd1 	bl	8003b50 <HAL_DMA_Start_IT>
 8005bae:	4603      	mov	r3, r0
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d008      	beq.n	8005bc6 <HAL_SPI_TransmitReceive_DMA+0x23e>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005bb8:	f043 0210 	orr.w	r2, r3, #16
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	661a      	str	r2, [r3, #96]	@ 0x60
    errorcode = HAL_ERROR;
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	75fb      	strb	r3, [r7, #23]

    goto error;
 8005bc4:	e050      	b.n	8005c68 <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	685a      	ldr	r2, [r3, #4]
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f042 0201 	orr.w	r2, r2, #1
 8005bd4:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bda:	2200      	movs	r2, #0
 8005bdc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi->hdmatx->XferCpltCallback     = NULL;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005be2:	2200      	movs	r2, #0
 8005be4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi->hdmatx->XferErrorCallback    = NULL;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bea:	2200      	movs	r2, #0
 8005bec:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->hdmatx->XferAbortCallback    = NULL;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bfe:	4619      	mov	r1, r3
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	330c      	adds	r3, #12
 8005c06:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c0c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005c0e:	f7fd ff9f 	bl	8003b50 <HAL_DMA_Start_IT>
 8005c12:	4603      	mov	r3, r0
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d008      	beq.n	8005c2a <HAL_SPI_TransmitReceive_DMA+0x2a2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c1c:	f043 0210 	orr.w	r2, r3, #16
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	661a      	str	r2, [r3, #96]	@ 0x60
    errorcode = HAL_ERROR;
 8005c24:	2301      	movs	r3, #1
 8005c26:	75fb      	strb	r3, [r7, #23]

    goto error;
 8005c28:	e01e      	b.n	8005c68 <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c34:	2b40      	cmp	r3, #64	@ 0x40
 8005c36:	d007      	beq.n	8005c48 <HAL_SPI_TransmitReceive_DMA+0x2c0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	681a      	ldr	r2, [r3, #0]
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005c46:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	685a      	ldr	r2, [r3, #4]
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f042 0220 	orr.w	r2, r2, #32
 8005c56:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	685a      	ldr	r2, [r3, #4]
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f042 0202 	orr.w	r2, r2, #2
 8005c66:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8005c70:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	3718      	adds	r7, #24
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}
 8005c7a:	bf00      	nop
 8005c7c:	08005e19 	.word	0x08005e19
 8005c80:	08005ce1 	.word	0x08005ce1
 8005c84:	08005e35 	.word	0x08005e35
 8005c88:	08005d89 	.word	0x08005d89
 8005c8c:	08005e51 	.word	0x08005e51

08005c90 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b083      	sub	sp, #12
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8005c98:	bf00      	nop
 8005c9a:	370c      	adds	r7, #12
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca2:	4770      	bx	lr

08005ca4 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b083      	sub	sp, #12
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8005cac:	bf00      	nop
 8005cae:	370c      	adds	r7, #12
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb6:	4770      	bx	lr

08005cb8 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b083      	sub	sp, #12
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8005cc0:	bf00      	nop
 8005cc2:	370c      	adds	r7, #12
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cca:	4770      	bx	lr

08005ccc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b083      	sub	sp, #12
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005cd4:	bf00      	nop
 8005cd6:	370c      	adds	r7, #12
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cde:	4770      	bx	lr

08005ce0 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b084      	sub	sp, #16
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cec:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005cee:	f7fc fed9 	bl	8002aa4 <HAL_GetTick>
 8005cf2:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f003 0320 	and.w	r3, r3, #32
 8005cfe:	2b20      	cmp	r3, #32
 8005d00:	d03c      	beq.n	8005d7c <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	685a      	ldr	r2, [r3, #4]
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f022 0220 	bic.w	r2, r2, #32
 8005d10:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	689b      	ldr	r3, [r3, #8]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d10d      	bne.n	8005d36 <SPI_DMAReceiveCplt+0x56>
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005d22:	d108      	bne.n	8005d36 <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	685a      	ldr	r2, [r3, #4]
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f022 0203 	bic.w	r2, r2, #3
 8005d32:	605a      	str	r2, [r3, #4]
 8005d34:	e007      	b.n	8005d46 <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	685a      	ldr	r2, [r3, #4]
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f022 0201 	bic.w	r2, r2, #1
 8005d44:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005d46:	68ba      	ldr	r2, [r7, #8]
 8005d48:	2164      	movs	r1, #100	@ 0x64
 8005d4a:	68f8      	ldr	r0, [r7, #12]
 8005d4c:	f000 f9be 	bl	80060cc <SPI_EndRxTransaction>
 8005d50:	4603      	mov	r3, r0
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d002      	beq.n	8005d5c <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	2220      	movs	r2, #32
 8005d5a:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    hspi->RxXferCount = 0U;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	2201      	movs	r2, #1
 8005d68:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d003      	beq.n	8005d7c <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005d74:	68f8      	ldr	r0, [r7, #12]
 8005d76:	f7ff ffa9 	bl	8005ccc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005d7a:	e002      	b.n	8005d82 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8005d7c:	68f8      	ldr	r0, [r7, #12]
 8005d7e:	f7ff ff87 	bl	8005c90 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005d82:	3710      	adds	r7, #16
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bd80      	pop	{r7, pc}

08005d88 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b084      	sub	sp, #16
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d94:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005d96:	f7fc fe85 	bl	8002aa4 <HAL_GetTick>
 8005d9a:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f003 0320 	and.w	r3, r3, #32
 8005da6:	2b20      	cmp	r3, #32
 8005da8:	d030      	beq.n	8005e0c <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	685a      	ldr	r2, [r3, #4]
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f022 0220 	bic.w	r2, r2, #32
 8005db8:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005dba:	68ba      	ldr	r2, [r7, #8]
 8005dbc:	2164      	movs	r1, #100	@ 0x64
 8005dbe:	68f8      	ldr	r0, [r7, #12]
 8005dc0:	f000 f9dc 	bl	800617c <SPI_EndRxTxTransaction>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d005      	beq.n	8005dd6 <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005dce:	f043 0220 	orr.w	r2, r3, #32
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	685a      	ldr	r2, [r3, #4]
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f022 0203 	bic.w	r2, r2, #3
 8005de4:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2200      	movs	r2, #0
 8005dea:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->RxXferCount = 0U;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2200      	movs	r2, #0
 8005df0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	2201      	movs	r2, #1
 8005df8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d003      	beq.n	8005e0c <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005e04:	68f8      	ldr	r0, [r7, #12]
 8005e06:	f7ff ff61 	bl	8005ccc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005e0a:	e002      	b.n	8005e12 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8005e0c:	68f8      	ldr	r0, [r7, #12]
 8005e0e:	f7fa ffe3 	bl	8000dd8 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005e12:	3710      	adds	r7, #16
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd80      	pop	{r7, pc}

08005e18 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b084      	sub	sp, #16
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e24:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8005e26:	68f8      	ldr	r0, [r7, #12]
 8005e28:	f7ff ff3c 	bl	8005ca4 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005e2c:	bf00      	nop
 8005e2e:	3710      	adds	r7, #16
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bd80      	pop	{r7, pc}

08005e34 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b084      	sub	sp, #16
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e40:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8005e42:	68f8      	ldr	r0, [r7, #12]
 8005e44:	f7ff ff38 	bl	8005cb8 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005e48:	bf00      	nop
 8005e4a:	3710      	adds	r7, #16
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}

08005e50 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b084      	sub	sp, #16
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e5c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	685a      	ldr	r2, [r3, #4]
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f022 0203 	bic.w	r2, r2, #3
 8005e6c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e72:	f043 0210 	orr.w	r2, r3, #16
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2201      	movs	r2, #1
 8005e7e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005e82:	68f8      	ldr	r0, [r7, #12]
 8005e84:	f7ff ff22 	bl	8005ccc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005e88:	bf00      	nop
 8005e8a:	3710      	adds	r7, #16
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}

08005e90 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b088      	sub	sp, #32
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	60f8      	str	r0, [r7, #12]
 8005e98:	60b9      	str	r1, [r7, #8]
 8005e9a:	603b      	str	r3, [r7, #0]
 8005e9c:	4613      	mov	r3, r2
 8005e9e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005ea0:	f7fc fe00 	bl	8002aa4 <HAL_GetTick>
 8005ea4:	4602      	mov	r2, r0
 8005ea6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ea8:	1a9b      	subs	r3, r3, r2
 8005eaa:	683a      	ldr	r2, [r7, #0]
 8005eac:	4413      	add	r3, r2
 8005eae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005eb0:	f7fc fdf8 	bl	8002aa4 <HAL_GetTick>
 8005eb4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005eb6:	4b39      	ldr	r3, [pc, #228]	@ (8005f9c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	015b      	lsls	r3, r3, #5
 8005ebc:	0d1b      	lsrs	r3, r3, #20
 8005ebe:	69fa      	ldr	r2, [r7, #28]
 8005ec0:	fb02 f303 	mul.w	r3, r2, r3
 8005ec4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005ec6:	e054      	b.n	8005f72 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ece:	d050      	beq.n	8005f72 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005ed0:	f7fc fde8 	bl	8002aa4 <HAL_GetTick>
 8005ed4:	4602      	mov	r2, r0
 8005ed6:	69bb      	ldr	r3, [r7, #24]
 8005ed8:	1ad3      	subs	r3, r2, r3
 8005eda:	69fa      	ldr	r2, [r7, #28]
 8005edc:	429a      	cmp	r2, r3
 8005ede:	d902      	bls.n	8005ee6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005ee0:	69fb      	ldr	r3, [r7, #28]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d13d      	bne.n	8005f62 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	685a      	ldr	r2, [r3, #4]
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005ef4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005efe:	d111      	bne.n	8005f24 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	689b      	ldr	r3, [r3, #8]
 8005f04:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f08:	d004      	beq.n	8005f14 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	689b      	ldr	r3, [r3, #8]
 8005f0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f12:	d107      	bne.n	8005f24 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	681a      	ldr	r2, [r3, #0]
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005f22:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f28:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f2c:	d10f      	bne.n	8005f4e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	681a      	ldr	r2, [r3, #0]
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005f3c:	601a      	str	r2, [r3, #0]
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	681a      	ldr	r2, [r3, #0]
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005f4c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2201      	movs	r2, #1
 8005f52:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005f5e:	2303      	movs	r3, #3
 8005f60:	e017      	b.n	8005f92 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d101      	bne.n	8005f6c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005f68:	2300      	movs	r3, #0
 8005f6a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	3b01      	subs	r3, #1
 8005f70:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	689a      	ldr	r2, [r3, #8]
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	4013      	ands	r3, r2
 8005f7c:	68ba      	ldr	r2, [r7, #8]
 8005f7e:	429a      	cmp	r2, r3
 8005f80:	bf0c      	ite	eq
 8005f82:	2301      	moveq	r3, #1
 8005f84:	2300      	movne	r3, #0
 8005f86:	b2db      	uxtb	r3, r3
 8005f88:	461a      	mov	r2, r3
 8005f8a:	79fb      	ldrb	r3, [r7, #7]
 8005f8c:	429a      	cmp	r2, r3
 8005f8e:	d19b      	bne.n	8005ec8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005f90:	2300      	movs	r3, #0
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	3720      	adds	r7, #32
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}
 8005f9a:	bf00      	nop
 8005f9c:	20000000 	.word	0x20000000

08005fa0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b08a      	sub	sp, #40	@ 0x28
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	60f8      	str	r0, [r7, #12]
 8005fa8:	60b9      	str	r1, [r7, #8]
 8005faa:	607a      	str	r2, [r7, #4]
 8005fac:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005fae:	2300      	movs	r3, #0
 8005fb0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005fb2:	f7fc fd77 	bl	8002aa4 <HAL_GetTick>
 8005fb6:	4602      	mov	r2, r0
 8005fb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fba:	1a9b      	subs	r3, r3, r2
 8005fbc:	683a      	ldr	r2, [r7, #0]
 8005fbe:	4413      	add	r3, r2
 8005fc0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8005fc2:	f7fc fd6f 	bl	8002aa4 <HAL_GetTick>
 8005fc6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	330c      	adds	r3, #12
 8005fce:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005fd0:	4b3d      	ldr	r3, [pc, #244]	@ (80060c8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005fd2:	681a      	ldr	r2, [r3, #0]
 8005fd4:	4613      	mov	r3, r2
 8005fd6:	009b      	lsls	r3, r3, #2
 8005fd8:	4413      	add	r3, r2
 8005fda:	00da      	lsls	r2, r3, #3
 8005fdc:	1ad3      	subs	r3, r2, r3
 8005fde:	0d1b      	lsrs	r3, r3, #20
 8005fe0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fe2:	fb02 f303 	mul.w	r3, r2, r3
 8005fe6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005fe8:	e060      	b.n	80060ac <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005ff0:	d107      	bne.n	8006002 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d104      	bne.n	8006002 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005ff8:	69fb      	ldr	r3, [r7, #28]
 8005ffa:	781b      	ldrb	r3, [r3, #0]
 8005ffc:	b2db      	uxtb	r3, r3
 8005ffe:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006000:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006008:	d050      	beq.n	80060ac <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800600a:	f7fc fd4b 	bl	8002aa4 <HAL_GetTick>
 800600e:	4602      	mov	r2, r0
 8006010:	6a3b      	ldr	r3, [r7, #32]
 8006012:	1ad3      	subs	r3, r2, r3
 8006014:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006016:	429a      	cmp	r2, r3
 8006018:	d902      	bls.n	8006020 <SPI_WaitFifoStateUntilTimeout+0x80>
 800601a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800601c:	2b00      	cmp	r3, #0
 800601e:	d13d      	bne.n	800609c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	685a      	ldr	r2, [r3, #4]
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800602e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006038:	d111      	bne.n	800605e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	689b      	ldr	r3, [r3, #8]
 800603e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006042:	d004      	beq.n	800604e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	689b      	ldr	r3, [r3, #8]
 8006048:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800604c:	d107      	bne.n	800605e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	681a      	ldr	r2, [r3, #0]
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800605c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006062:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006066:	d10f      	bne.n	8006088 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	681a      	ldr	r2, [r3, #0]
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006076:	601a      	str	r2, [r3, #0]
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	681a      	ldr	r2, [r3, #0]
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006086:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	2201      	movs	r2, #1
 800608c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2200      	movs	r2, #0
 8006094:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006098:	2303      	movs	r3, #3
 800609a:	e010      	b.n	80060be <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800609c:	69bb      	ldr	r3, [r7, #24]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d101      	bne.n	80060a6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80060a2:	2300      	movs	r3, #0
 80060a4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80060a6:	69bb      	ldr	r3, [r7, #24]
 80060a8:	3b01      	subs	r3, #1
 80060aa:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	689a      	ldr	r2, [r3, #8]
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	4013      	ands	r3, r2
 80060b6:	687a      	ldr	r2, [r7, #4]
 80060b8:	429a      	cmp	r2, r3
 80060ba:	d196      	bne.n	8005fea <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80060bc:	2300      	movs	r3, #0
}
 80060be:	4618      	mov	r0, r3
 80060c0:	3728      	adds	r7, #40	@ 0x28
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}
 80060c6:	bf00      	nop
 80060c8:	20000000 	.word	0x20000000

080060cc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b086      	sub	sp, #24
 80060d0:	af02      	add	r7, sp, #8
 80060d2:	60f8      	str	r0, [r7, #12]
 80060d4:	60b9      	str	r1, [r7, #8]
 80060d6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80060e0:	d111      	bne.n	8006106 <SPI_EndRxTransaction+0x3a>
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	689b      	ldr	r3, [r3, #8]
 80060e6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80060ea:	d004      	beq.n	80060f6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	689b      	ldr	r3, [r3, #8]
 80060f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80060f4:	d107      	bne.n	8006106 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	681a      	ldr	r2, [r3, #0]
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006104:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	9300      	str	r3, [sp, #0]
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	2200      	movs	r2, #0
 800610e:	2180      	movs	r1, #128	@ 0x80
 8006110:	68f8      	ldr	r0, [r7, #12]
 8006112:	f7ff febd 	bl	8005e90 <SPI_WaitFlagStateUntilTimeout>
 8006116:	4603      	mov	r3, r0
 8006118:	2b00      	cmp	r3, #0
 800611a:	d007      	beq.n	800612c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006120:	f043 0220 	orr.w	r2, r3, #32
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006128:	2303      	movs	r3, #3
 800612a:	e023      	b.n	8006174 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006134:	d11d      	bne.n	8006172 <SPI_EndRxTransaction+0xa6>
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	689b      	ldr	r3, [r3, #8]
 800613a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800613e:	d004      	beq.n	800614a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	689b      	ldr	r3, [r3, #8]
 8006144:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006148:	d113      	bne.n	8006172 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	9300      	str	r3, [sp, #0]
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	2200      	movs	r2, #0
 8006152:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8006156:	68f8      	ldr	r0, [r7, #12]
 8006158:	f7ff ff22 	bl	8005fa0 <SPI_WaitFifoStateUntilTimeout>
 800615c:	4603      	mov	r3, r0
 800615e:	2b00      	cmp	r3, #0
 8006160:	d007      	beq.n	8006172 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006166:	f043 0220 	orr.w	r2, r3, #32
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800616e:	2303      	movs	r3, #3
 8006170:	e000      	b.n	8006174 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8006172:	2300      	movs	r3, #0
}
 8006174:	4618      	mov	r0, r3
 8006176:	3710      	adds	r7, #16
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}

0800617c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b086      	sub	sp, #24
 8006180:	af02      	add	r7, sp, #8
 8006182:	60f8      	str	r0, [r7, #12]
 8006184:	60b9      	str	r1, [r7, #8]
 8006186:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	9300      	str	r3, [sp, #0]
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	2200      	movs	r2, #0
 8006190:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8006194:	68f8      	ldr	r0, [r7, #12]
 8006196:	f7ff ff03 	bl	8005fa0 <SPI_WaitFifoStateUntilTimeout>
 800619a:	4603      	mov	r3, r0
 800619c:	2b00      	cmp	r3, #0
 800619e:	d007      	beq.n	80061b0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061a4:	f043 0220 	orr.w	r2, r3, #32
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80061ac:	2303      	movs	r3, #3
 80061ae:	e027      	b.n	8006200 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	9300      	str	r3, [sp, #0]
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	2200      	movs	r2, #0
 80061b8:	2180      	movs	r1, #128	@ 0x80
 80061ba:	68f8      	ldr	r0, [r7, #12]
 80061bc:	f7ff fe68 	bl	8005e90 <SPI_WaitFlagStateUntilTimeout>
 80061c0:	4603      	mov	r3, r0
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d007      	beq.n	80061d6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061ca:	f043 0220 	orr.w	r2, r3, #32
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80061d2:	2303      	movs	r3, #3
 80061d4:	e014      	b.n	8006200 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	9300      	str	r3, [sp, #0]
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	2200      	movs	r2, #0
 80061de:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80061e2:	68f8      	ldr	r0, [r7, #12]
 80061e4:	f7ff fedc 	bl	8005fa0 <SPI_WaitFifoStateUntilTimeout>
 80061e8:	4603      	mov	r3, r0
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d007      	beq.n	80061fe <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061f2:	f043 0220 	orr.w	r2, r3, #32
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80061fa:	2303      	movs	r3, #3
 80061fc:	e000      	b.n	8006200 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80061fe:	2300      	movs	r3, #0
}
 8006200:	4618      	mov	r0, r3
 8006202:	3710      	adds	r7, #16
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}

08006208 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b082      	sub	sp, #8
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d101      	bne.n	800621a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006216:	2301      	movs	r3, #1
 8006218:	e049      	b.n	80062ae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006220:	b2db      	uxtb	r3, r3
 8006222:	2b00      	cmp	r3, #0
 8006224:	d106      	bne.n	8006234 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2200      	movs	r2, #0
 800622a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f7fc f9ea 	bl	8002608 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2202      	movs	r2, #2
 8006238:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681a      	ldr	r2, [r3, #0]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	3304      	adds	r3, #4
 8006244:	4619      	mov	r1, r3
 8006246:	4610      	mov	r0, r2
 8006248:	f000 fd48 	bl	8006cdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2201      	movs	r2, #1
 8006250:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2201      	movs	r2, #1
 8006258:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2201      	movs	r2, #1
 8006260:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2201      	movs	r2, #1
 8006268:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2201      	movs	r2, #1
 8006270:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2201      	movs	r2, #1
 8006278:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2201      	movs	r2, #1
 8006280:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2201      	movs	r2, #1
 8006288:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2201      	movs	r2, #1
 8006290:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2201      	movs	r2, #1
 8006298:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2201      	movs	r2, #1
 80062a0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2201      	movs	r2, #1
 80062a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80062ac:	2300      	movs	r3, #0
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	3708      	adds	r7, #8
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}
	...

080062b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80062b8:	b480      	push	{r7}
 80062ba:	b085      	sub	sp, #20
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80062c6:	b2db      	uxtb	r3, r3
 80062c8:	2b01      	cmp	r3, #1
 80062ca:	d001      	beq.n	80062d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80062cc:	2301      	movs	r3, #1
 80062ce:	e040      	b.n	8006352 <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2202      	movs	r2, #2
 80062d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	68da      	ldr	r2, [r3, #12]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f042 0201 	orr.w	r2, r2, #1
 80062e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a1c      	ldr	r2, [pc, #112]	@ (8006360 <HAL_TIM_Base_Start_IT+0xa8>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d00e      	beq.n	8006310 <HAL_TIM_Base_Start_IT+0x58>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062fa:	d009      	beq.n	8006310 <HAL_TIM_Base_Start_IT+0x58>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a18      	ldr	r2, [pc, #96]	@ (8006364 <HAL_TIM_Base_Start_IT+0xac>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d004      	beq.n	8006310 <HAL_TIM_Base_Start_IT+0x58>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a17      	ldr	r2, [pc, #92]	@ (8006368 <HAL_TIM_Base_Start_IT+0xb0>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d115      	bne.n	800633c <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	689a      	ldr	r2, [r3, #8]
 8006316:	4b15      	ldr	r3, [pc, #84]	@ (800636c <HAL_TIM_Base_Start_IT+0xb4>)
 8006318:	4013      	ands	r3, r2
 800631a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	2b06      	cmp	r3, #6
 8006320:	d015      	beq.n	800634e <HAL_TIM_Base_Start_IT+0x96>
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006328:	d011      	beq.n	800634e <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	681a      	ldr	r2, [r3, #0]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f042 0201 	orr.w	r2, r2, #1
 8006338:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800633a:	e008      	b.n	800634e <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	681a      	ldr	r2, [r3, #0]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f042 0201 	orr.w	r2, r2, #1
 800634a:	601a      	str	r2, [r3, #0]
 800634c:	e000      	b.n	8006350 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800634e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006350:	2300      	movs	r3, #0
}
 8006352:	4618      	mov	r0, r3
 8006354:	3714      	adds	r7, #20
 8006356:	46bd      	mov	sp, r7
 8006358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635c:	4770      	bx	lr
 800635e:	bf00      	nop
 8006360:	40012c00 	.word	0x40012c00
 8006364:	40000400 	.word	0x40000400
 8006368:	40014000 	.word	0x40014000
 800636c:	00010007 	.word	0x00010007

08006370 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b082      	sub	sp, #8
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d101      	bne.n	8006382 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800637e:	2301      	movs	r3, #1
 8006380:	e049      	b.n	8006416 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006388:	b2db      	uxtb	r3, r3
 800638a:	2b00      	cmp	r3, #0
 800638c:	d106      	bne.n	800639c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2200      	movs	r2, #0
 8006392:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f7fc f8a4 	bl	80024e4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2202      	movs	r2, #2
 80063a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681a      	ldr	r2, [r3, #0]
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	3304      	adds	r3, #4
 80063ac:	4619      	mov	r1, r3
 80063ae:	4610      	mov	r0, r2
 80063b0:	f000 fc94 	bl	8006cdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2201      	movs	r2, #1
 80063b8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2201      	movs	r2, #1
 80063c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2201      	movs	r2, #1
 80063c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2201      	movs	r2, #1
 80063d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2201      	movs	r2, #1
 80063d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2201      	movs	r2, #1
 80063e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2201      	movs	r2, #1
 80063e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2201      	movs	r2, #1
 80063f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2201      	movs	r2, #1
 80063f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2201      	movs	r2, #1
 8006400:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2201      	movs	r2, #1
 8006408:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2201      	movs	r2, #1
 8006410:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006414:	2300      	movs	r3, #0
}
 8006416:	4618      	mov	r0, r3
 8006418:	3708      	adds	r7, #8
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}
	...

08006420 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b084      	sub	sp, #16
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
 8006428:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d109      	bne.n	8006444 <HAL_TIM_PWM_Start+0x24>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006436:	b2db      	uxtb	r3, r3
 8006438:	2b01      	cmp	r3, #1
 800643a:	bf14      	ite	ne
 800643c:	2301      	movne	r3, #1
 800643e:	2300      	moveq	r3, #0
 8006440:	b2db      	uxtb	r3, r3
 8006442:	e03c      	b.n	80064be <HAL_TIM_PWM_Start+0x9e>
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	2b04      	cmp	r3, #4
 8006448:	d109      	bne.n	800645e <HAL_TIM_PWM_Start+0x3e>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006450:	b2db      	uxtb	r3, r3
 8006452:	2b01      	cmp	r3, #1
 8006454:	bf14      	ite	ne
 8006456:	2301      	movne	r3, #1
 8006458:	2300      	moveq	r3, #0
 800645a:	b2db      	uxtb	r3, r3
 800645c:	e02f      	b.n	80064be <HAL_TIM_PWM_Start+0x9e>
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	2b08      	cmp	r3, #8
 8006462:	d109      	bne.n	8006478 <HAL_TIM_PWM_Start+0x58>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800646a:	b2db      	uxtb	r3, r3
 800646c:	2b01      	cmp	r3, #1
 800646e:	bf14      	ite	ne
 8006470:	2301      	movne	r3, #1
 8006472:	2300      	moveq	r3, #0
 8006474:	b2db      	uxtb	r3, r3
 8006476:	e022      	b.n	80064be <HAL_TIM_PWM_Start+0x9e>
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	2b0c      	cmp	r3, #12
 800647c:	d109      	bne.n	8006492 <HAL_TIM_PWM_Start+0x72>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006484:	b2db      	uxtb	r3, r3
 8006486:	2b01      	cmp	r3, #1
 8006488:	bf14      	ite	ne
 800648a:	2301      	movne	r3, #1
 800648c:	2300      	moveq	r3, #0
 800648e:	b2db      	uxtb	r3, r3
 8006490:	e015      	b.n	80064be <HAL_TIM_PWM_Start+0x9e>
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	2b10      	cmp	r3, #16
 8006496:	d109      	bne.n	80064ac <HAL_TIM_PWM_Start+0x8c>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800649e:	b2db      	uxtb	r3, r3
 80064a0:	2b01      	cmp	r3, #1
 80064a2:	bf14      	ite	ne
 80064a4:	2301      	movne	r3, #1
 80064a6:	2300      	moveq	r3, #0
 80064a8:	b2db      	uxtb	r3, r3
 80064aa:	e008      	b.n	80064be <HAL_TIM_PWM_Start+0x9e>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80064b2:	b2db      	uxtb	r3, r3
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	bf14      	ite	ne
 80064b8:	2301      	movne	r3, #1
 80064ba:	2300      	moveq	r3, #0
 80064bc:	b2db      	uxtb	r3, r3
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d001      	beq.n	80064c6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80064c2:	2301      	movs	r3, #1
 80064c4:	e088      	b.n	80065d8 <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d104      	bne.n	80064d6 <HAL_TIM_PWM_Start+0xb6>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2202      	movs	r2, #2
 80064d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80064d4:	e023      	b.n	800651e <HAL_TIM_PWM_Start+0xfe>
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	2b04      	cmp	r3, #4
 80064da:	d104      	bne.n	80064e6 <HAL_TIM_PWM_Start+0xc6>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2202      	movs	r2, #2
 80064e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80064e4:	e01b      	b.n	800651e <HAL_TIM_PWM_Start+0xfe>
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	2b08      	cmp	r3, #8
 80064ea:	d104      	bne.n	80064f6 <HAL_TIM_PWM_Start+0xd6>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2202      	movs	r2, #2
 80064f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80064f4:	e013      	b.n	800651e <HAL_TIM_PWM_Start+0xfe>
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	2b0c      	cmp	r3, #12
 80064fa:	d104      	bne.n	8006506 <HAL_TIM_PWM_Start+0xe6>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2202      	movs	r2, #2
 8006500:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006504:	e00b      	b.n	800651e <HAL_TIM_PWM_Start+0xfe>
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	2b10      	cmp	r3, #16
 800650a:	d104      	bne.n	8006516 <HAL_TIM_PWM_Start+0xf6>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2202      	movs	r2, #2
 8006510:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006514:	e003      	b.n	800651e <HAL_TIM_PWM_Start+0xfe>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2202      	movs	r2, #2
 800651a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	2201      	movs	r2, #1
 8006524:	6839      	ldr	r1, [r7, #0]
 8006526:	4618      	mov	r0, r3
 8006528:	f000 ff02 	bl	8007330 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a2b      	ldr	r2, [pc, #172]	@ (80065e0 <HAL_TIM_PWM_Start+0x1c0>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d00e      	beq.n	8006554 <HAL_TIM_PWM_Start+0x134>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a2a      	ldr	r2, [pc, #168]	@ (80065e4 <HAL_TIM_PWM_Start+0x1c4>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d009      	beq.n	8006554 <HAL_TIM_PWM_Start+0x134>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a28      	ldr	r2, [pc, #160]	@ (80065e8 <HAL_TIM_PWM_Start+0x1c8>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d004      	beq.n	8006554 <HAL_TIM_PWM_Start+0x134>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a27      	ldr	r2, [pc, #156]	@ (80065ec <HAL_TIM_PWM_Start+0x1cc>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d101      	bne.n	8006558 <HAL_TIM_PWM_Start+0x138>
 8006554:	2301      	movs	r3, #1
 8006556:	e000      	b.n	800655a <HAL_TIM_PWM_Start+0x13a>
 8006558:	2300      	movs	r3, #0
 800655a:	2b00      	cmp	r3, #0
 800655c:	d007      	beq.n	800656e <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800656c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a1b      	ldr	r2, [pc, #108]	@ (80065e0 <HAL_TIM_PWM_Start+0x1c0>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d00e      	beq.n	8006596 <HAL_TIM_PWM_Start+0x176>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006580:	d009      	beq.n	8006596 <HAL_TIM_PWM_Start+0x176>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a1a      	ldr	r2, [pc, #104]	@ (80065f0 <HAL_TIM_PWM_Start+0x1d0>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d004      	beq.n	8006596 <HAL_TIM_PWM_Start+0x176>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a14      	ldr	r2, [pc, #80]	@ (80065e4 <HAL_TIM_PWM_Start+0x1c4>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d115      	bne.n	80065c2 <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	689a      	ldr	r2, [r3, #8]
 800659c:	4b15      	ldr	r3, [pc, #84]	@ (80065f4 <HAL_TIM_PWM_Start+0x1d4>)
 800659e:	4013      	ands	r3, r2
 80065a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	2b06      	cmp	r3, #6
 80065a6:	d015      	beq.n	80065d4 <HAL_TIM_PWM_Start+0x1b4>
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80065ae:	d011      	beq.n	80065d4 <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	681a      	ldr	r2, [r3, #0]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f042 0201 	orr.w	r2, r2, #1
 80065be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065c0:	e008      	b.n	80065d4 <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	681a      	ldr	r2, [r3, #0]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f042 0201 	orr.w	r2, r2, #1
 80065d0:	601a      	str	r2, [r3, #0]
 80065d2:	e000      	b.n	80065d6 <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065d4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80065d6:	2300      	movs	r3, #0
}
 80065d8:	4618      	mov	r0, r3
 80065da:	3710      	adds	r7, #16
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}
 80065e0:	40012c00 	.word	0x40012c00
 80065e4:	40014000 	.word	0x40014000
 80065e8:	40014400 	.word	0x40014400
 80065ec:	40014800 	.word	0x40014800
 80065f0:	40000400 	.word	0x40000400
 80065f4:	00010007 	.word	0x00010007

080065f8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b086      	sub	sp, #24
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
 8006600:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d101      	bne.n	800660c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006608:	2301      	movs	r3, #1
 800660a:	e097      	b.n	800673c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006612:	b2db      	uxtb	r3, r3
 8006614:	2b00      	cmp	r3, #0
 8006616:	d106      	bne.n	8006626 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2200      	movs	r2, #0
 800661c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f7fb ff7f 	bl	8002524 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2202      	movs	r2, #2
 800662a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	689b      	ldr	r3, [r3, #8]
 8006634:	687a      	ldr	r2, [r7, #4]
 8006636:	6812      	ldr	r2, [r2, #0]
 8006638:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800663c:	f023 0307 	bic.w	r3, r3, #7
 8006640:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681a      	ldr	r2, [r3, #0]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	3304      	adds	r3, #4
 800664a:	4619      	mov	r1, r3
 800664c:	4610      	mov	r0, r2
 800664e:	f000 fb45 	bl	8006cdc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	689b      	ldr	r3, [r3, #8]
 8006658:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	699b      	ldr	r3, [r3, #24]
 8006660:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	6a1b      	ldr	r3, [r3, #32]
 8006668:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	697a      	ldr	r2, [r7, #20]
 8006670:	4313      	orrs	r3, r2
 8006672:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800667a:	f023 0303 	bic.w	r3, r3, #3
 800667e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	689a      	ldr	r2, [r3, #8]
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	699b      	ldr	r3, [r3, #24]
 8006688:	021b      	lsls	r3, r3, #8
 800668a:	4313      	orrs	r3, r2
 800668c:	693a      	ldr	r2, [r7, #16]
 800668e:	4313      	orrs	r3, r2
 8006690:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8006698:	f023 030c 	bic.w	r3, r3, #12
 800669c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80066a4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80066a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	68da      	ldr	r2, [r3, #12]
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	69db      	ldr	r3, [r3, #28]
 80066b2:	021b      	lsls	r3, r3, #8
 80066b4:	4313      	orrs	r3, r2
 80066b6:	693a      	ldr	r2, [r7, #16]
 80066b8:	4313      	orrs	r3, r2
 80066ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	691b      	ldr	r3, [r3, #16]
 80066c0:	011a      	lsls	r2, r3, #4
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	6a1b      	ldr	r3, [r3, #32]
 80066c6:	031b      	lsls	r3, r3, #12
 80066c8:	4313      	orrs	r3, r2
 80066ca:	693a      	ldr	r2, [r7, #16]
 80066cc:	4313      	orrs	r3, r2
 80066ce:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80066d6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80066de:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	685a      	ldr	r2, [r3, #4]
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	695b      	ldr	r3, [r3, #20]
 80066e8:	011b      	lsls	r3, r3, #4
 80066ea:	4313      	orrs	r3, r2
 80066ec:	68fa      	ldr	r2, [r7, #12]
 80066ee:	4313      	orrs	r3, r2
 80066f0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	697a      	ldr	r2, [r7, #20]
 80066f8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	693a      	ldr	r2, [r7, #16]
 8006700:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	68fa      	ldr	r2, [r7, #12]
 8006708:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2201      	movs	r2, #1
 800670e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2201      	movs	r2, #1
 8006716:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2201      	movs	r2, #1
 800671e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2201      	movs	r2, #1
 8006726:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2201      	movs	r2, #1
 800672e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2201      	movs	r2, #1
 8006736:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800673a:	2300      	movs	r3, #0
}
 800673c:	4618      	mov	r0, r3
 800673e:	3718      	adds	r7, #24
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}

08006744 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b084      	sub	sp, #16
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
 800674c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006754:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800675c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006764:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800676c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d110      	bne.n	8006796 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006774:	7bfb      	ldrb	r3, [r7, #15]
 8006776:	2b01      	cmp	r3, #1
 8006778:	d102      	bne.n	8006780 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800677a:	7b7b      	ldrb	r3, [r7, #13]
 800677c:	2b01      	cmp	r3, #1
 800677e:	d001      	beq.n	8006784 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006780:	2301      	movs	r3, #1
 8006782:	e069      	b.n	8006858 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2202      	movs	r2, #2
 8006788:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2202      	movs	r2, #2
 8006790:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006794:	e031      	b.n	80067fa <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	2b04      	cmp	r3, #4
 800679a:	d110      	bne.n	80067be <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800679c:	7bbb      	ldrb	r3, [r7, #14]
 800679e:	2b01      	cmp	r3, #1
 80067a0:	d102      	bne.n	80067a8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80067a2:	7b3b      	ldrb	r3, [r7, #12]
 80067a4:	2b01      	cmp	r3, #1
 80067a6:	d001      	beq.n	80067ac <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80067a8:	2301      	movs	r3, #1
 80067aa:	e055      	b.n	8006858 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2202      	movs	r2, #2
 80067b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2202      	movs	r2, #2
 80067b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80067bc:	e01d      	b.n	80067fa <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80067be:	7bfb      	ldrb	r3, [r7, #15]
 80067c0:	2b01      	cmp	r3, #1
 80067c2:	d108      	bne.n	80067d6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80067c4:	7bbb      	ldrb	r3, [r7, #14]
 80067c6:	2b01      	cmp	r3, #1
 80067c8:	d105      	bne.n	80067d6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80067ca:	7b7b      	ldrb	r3, [r7, #13]
 80067cc:	2b01      	cmp	r3, #1
 80067ce:	d102      	bne.n	80067d6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80067d0:	7b3b      	ldrb	r3, [r7, #12]
 80067d2:	2b01      	cmp	r3, #1
 80067d4:	d001      	beq.n	80067da <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80067d6:	2301      	movs	r3, #1
 80067d8:	e03e      	b.n	8006858 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2202      	movs	r2, #2
 80067de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2202      	movs	r2, #2
 80067e6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2202      	movs	r2, #2
 80067ee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2202      	movs	r2, #2
 80067f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d003      	beq.n	8006808 <HAL_TIM_Encoder_Start+0xc4>
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	2b04      	cmp	r3, #4
 8006804:	d008      	beq.n	8006818 <HAL_TIM_Encoder_Start+0xd4>
 8006806:	e00f      	b.n	8006828 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	2201      	movs	r2, #1
 800680e:	2100      	movs	r1, #0
 8006810:	4618      	mov	r0, r3
 8006812:	f000 fd8d 	bl	8007330 <TIM_CCxChannelCmd>
      break;
 8006816:	e016      	b.n	8006846 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	2201      	movs	r2, #1
 800681e:	2104      	movs	r1, #4
 8006820:	4618      	mov	r0, r3
 8006822:	f000 fd85 	bl	8007330 <TIM_CCxChannelCmd>
      break;
 8006826:	e00e      	b.n	8006846 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	2201      	movs	r2, #1
 800682e:	2100      	movs	r1, #0
 8006830:	4618      	mov	r0, r3
 8006832:	f000 fd7d 	bl	8007330 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	2201      	movs	r2, #1
 800683c:	2104      	movs	r1, #4
 800683e:	4618      	mov	r0, r3
 8006840:	f000 fd76 	bl	8007330 <TIM_CCxChannelCmd>
      break;
 8006844:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	681a      	ldr	r2, [r3, #0]
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f042 0201 	orr.w	r2, r2, #1
 8006854:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006856:	2300      	movs	r3, #0
}
 8006858:	4618      	mov	r0, r3
 800685a:	3710      	adds	r7, #16
 800685c:	46bd      	mov	sp, r7
 800685e:	bd80      	pop	{r7, pc}

08006860 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b084      	sub	sp, #16
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	68db      	ldr	r3, [r3, #12]
 800686e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	691b      	ldr	r3, [r3, #16]
 8006876:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	f003 0302 	and.w	r3, r3, #2
 800687e:	2b00      	cmp	r3, #0
 8006880:	d020      	beq.n	80068c4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	f003 0302 	and.w	r3, r3, #2
 8006888:	2b00      	cmp	r3, #0
 800688a:	d01b      	beq.n	80068c4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f06f 0202 	mvn.w	r2, #2
 8006894:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2201      	movs	r2, #1
 800689a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	699b      	ldr	r3, [r3, #24]
 80068a2:	f003 0303 	and.w	r3, r3, #3
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d003      	beq.n	80068b2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	f000 f9f8 	bl	8006ca0 <HAL_TIM_IC_CaptureCallback>
 80068b0:	e005      	b.n	80068be <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f000 f9ea 	bl	8006c8c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068b8:	6878      	ldr	r0, [r7, #4]
 80068ba:	f000 f9fb 	bl	8006cb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2200      	movs	r2, #0
 80068c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	f003 0304 	and.w	r3, r3, #4
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d020      	beq.n	8006910 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	f003 0304 	and.w	r3, r3, #4
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d01b      	beq.n	8006910 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f06f 0204 	mvn.w	r2, #4
 80068e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2202      	movs	r2, #2
 80068e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	699b      	ldr	r3, [r3, #24]
 80068ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d003      	beq.n	80068fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f000 f9d2 	bl	8006ca0 <HAL_TIM_IC_CaptureCallback>
 80068fc:	e005      	b.n	800690a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f000 f9c4 	bl	8006c8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	f000 f9d5 	bl	8006cb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2200      	movs	r2, #0
 800690e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	f003 0308 	and.w	r3, r3, #8
 8006916:	2b00      	cmp	r3, #0
 8006918:	d020      	beq.n	800695c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	f003 0308 	and.w	r3, r3, #8
 8006920:	2b00      	cmp	r3, #0
 8006922:	d01b      	beq.n	800695c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f06f 0208 	mvn.w	r2, #8
 800692c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2204      	movs	r2, #4
 8006932:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	69db      	ldr	r3, [r3, #28]
 800693a:	f003 0303 	and.w	r3, r3, #3
 800693e:	2b00      	cmp	r3, #0
 8006940:	d003      	beq.n	800694a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f000 f9ac 	bl	8006ca0 <HAL_TIM_IC_CaptureCallback>
 8006948:	e005      	b.n	8006956 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f000 f99e 	bl	8006c8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	f000 f9af 	bl	8006cb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2200      	movs	r2, #0
 800695a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	f003 0310 	and.w	r3, r3, #16
 8006962:	2b00      	cmp	r3, #0
 8006964:	d020      	beq.n	80069a8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	f003 0310 	and.w	r3, r3, #16
 800696c:	2b00      	cmp	r3, #0
 800696e:	d01b      	beq.n	80069a8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f06f 0210 	mvn.w	r2, #16
 8006978:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2208      	movs	r2, #8
 800697e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	69db      	ldr	r3, [r3, #28]
 8006986:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800698a:	2b00      	cmp	r3, #0
 800698c:	d003      	beq.n	8006996 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f000 f986 	bl	8006ca0 <HAL_TIM_IC_CaptureCallback>
 8006994:	e005      	b.n	80069a2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f000 f978 	bl	8006c8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	f000 f989 	bl	8006cb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2200      	movs	r2, #0
 80069a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	f003 0301 	and.w	r3, r3, #1
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d00c      	beq.n	80069cc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	f003 0301 	and.w	r3, r3, #1
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d007      	beq.n	80069cc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f06f 0201 	mvn.w	r2, #1
 80069c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f7fa fb7a 	bl	80010c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d00c      	beq.n	80069f0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d007      	beq.n	80069f0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80069e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f000 fdb6 	bl	800755c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d00c      	beq.n	8006a14 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d007      	beq.n	8006a14 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006a0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f000 fdae 	bl	8007570 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d00c      	beq.n	8006a38 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d007      	beq.n	8006a38 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006a30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f000 f948 	bl	8006cc8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	f003 0320 	and.w	r3, r3, #32
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d00c      	beq.n	8006a5c <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	f003 0320 	and.w	r3, r3, #32
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d007      	beq.n	8006a5c <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f06f 0220 	mvn.w	r2, #32
 8006a54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f000 fd76 	bl	8007548 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006a5c:	bf00      	nop
 8006a5e:	3710      	adds	r7, #16
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}

08006a64 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b086      	sub	sp, #24
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	60f8      	str	r0, [r7, #12]
 8006a6c:	60b9      	str	r1, [r7, #8]
 8006a6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a70:	2300      	movs	r3, #0
 8006a72:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a7a:	2b01      	cmp	r3, #1
 8006a7c:	d101      	bne.n	8006a82 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006a7e:	2302      	movs	r3, #2
 8006a80:	e0ff      	b.n	8006c82 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	2201      	movs	r2, #1
 8006a86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2b14      	cmp	r3, #20
 8006a8e:	f200 80f0 	bhi.w	8006c72 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006a92:	a201      	add	r2, pc, #4	@ (adr r2, 8006a98 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a98:	08006aed 	.word	0x08006aed
 8006a9c:	08006c73 	.word	0x08006c73
 8006aa0:	08006c73 	.word	0x08006c73
 8006aa4:	08006c73 	.word	0x08006c73
 8006aa8:	08006b2d 	.word	0x08006b2d
 8006aac:	08006c73 	.word	0x08006c73
 8006ab0:	08006c73 	.word	0x08006c73
 8006ab4:	08006c73 	.word	0x08006c73
 8006ab8:	08006b6f 	.word	0x08006b6f
 8006abc:	08006c73 	.word	0x08006c73
 8006ac0:	08006c73 	.word	0x08006c73
 8006ac4:	08006c73 	.word	0x08006c73
 8006ac8:	08006baf 	.word	0x08006baf
 8006acc:	08006c73 	.word	0x08006c73
 8006ad0:	08006c73 	.word	0x08006c73
 8006ad4:	08006c73 	.word	0x08006c73
 8006ad8:	08006bf1 	.word	0x08006bf1
 8006adc:	08006c73 	.word	0x08006c73
 8006ae0:	08006c73 	.word	0x08006c73
 8006ae4:	08006c73 	.word	0x08006c73
 8006ae8:	08006c31 	.word	0x08006c31
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	68b9      	ldr	r1, [r7, #8]
 8006af2:	4618      	mov	r0, r3
 8006af4:	f000 f976 	bl	8006de4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	699a      	ldr	r2, [r3, #24]
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f042 0208 	orr.w	r2, r2, #8
 8006b06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	699a      	ldr	r2, [r3, #24]
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f022 0204 	bic.w	r2, r2, #4
 8006b16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	6999      	ldr	r1, [r3, #24]
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	691a      	ldr	r2, [r3, #16]
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	430a      	orrs	r2, r1
 8006b28:	619a      	str	r2, [r3, #24]
      break;
 8006b2a:	e0a5      	b.n	8006c78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	68b9      	ldr	r1, [r7, #8]
 8006b32:	4618      	mov	r0, r3
 8006b34:	f000 f9dc 	bl	8006ef0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	699a      	ldr	r2, [r3, #24]
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006b46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	699a      	ldr	r2, [r3, #24]
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006b56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	6999      	ldr	r1, [r3, #24]
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	691b      	ldr	r3, [r3, #16]
 8006b62:	021a      	lsls	r2, r3, #8
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	430a      	orrs	r2, r1
 8006b6a:	619a      	str	r2, [r3, #24]
      break;
 8006b6c:	e084      	b.n	8006c78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	68b9      	ldr	r1, [r7, #8]
 8006b74:	4618      	mov	r0, r3
 8006b76:	f000 fa3b 	bl	8006ff0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	69da      	ldr	r2, [r3, #28]
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f042 0208 	orr.w	r2, r2, #8
 8006b88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	69da      	ldr	r2, [r3, #28]
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f022 0204 	bic.w	r2, r2, #4
 8006b98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	69d9      	ldr	r1, [r3, #28]
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	691a      	ldr	r2, [r3, #16]
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	430a      	orrs	r2, r1
 8006baa:	61da      	str	r2, [r3, #28]
      break;
 8006bac:	e064      	b.n	8006c78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	68b9      	ldr	r1, [r7, #8]
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	f000 fa99 	bl	80070ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	69da      	ldr	r2, [r3, #28]
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006bc8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	69da      	ldr	r2, [r3, #28]
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006bd8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	69d9      	ldr	r1, [r3, #28]
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	691b      	ldr	r3, [r3, #16]
 8006be4:	021a      	lsls	r2, r3, #8
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	430a      	orrs	r2, r1
 8006bec:	61da      	str	r2, [r3, #28]
      break;
 8006bee:	e043      	b.n	8006c78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	68b9      	ldr	r1, [r7, #8]
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	f000 fadc 	bl	80071b4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f042 0208 	orr.w	r2, r2, #8
 8006c0a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f022 0204 	bic.w	r2, r2, #4
 8006c1a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	691a      	ldr	r2, [r3, #16]
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	430a      	orrs	r2, r1
 8006c2c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006c2e:	e023      	b.n	8006c78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	68b9      	ldr	r1, [r7, #8]
 8006c36:	4618      	mov	r0, r3
 8006c38:	f000 fb1a 	bl	8007270 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006c4a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006c5a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	691b      	ldr	r3, [r3, #16]
 8006c66:	021a      	lsls	r2, r3, #8
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	430a      	orrs	r2, r1
 8006c6e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006c70:	e002      	b.n	8006c78 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8006c72:	2301      	movs	r3, #1
 8006c74:	75fb      	strb	r3, [r7, #23]
      break;
 8006c76:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006c80:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c82:	4618      	mov	r0, r3
 8006c84:	3718      	adds	r7, #24
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bd80      	pop	{r7, pc}
 8006c8a:	bf00      	nop

08006c8c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b083      	sub	sp, #12
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006c94:	bf00      	nop
 8006c96:	370c      	adds	r7, #12
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9e:	4770      	bx	lr

08006ca0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b083      	sub	sp, #12
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006ca8:	bf00      	nop
 8006caa:	370c      	adds	r7, #12
 8006cac:	46bd      	mov	sp, r7
 8006cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb2:	4770      	bx	lr

08006cb4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b083      	sub	sp, #12
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006cbc:	bf00      	nop
 8006cbe:	370c      	adds	r7, #12
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc6:	4770      	bx	lr

08006cc8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b083      	sub	sp, #12
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006cd0:	bf00      	nop
 8006cd2:	370c      	adds	r7, #12
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cda:	4770      	bx	lr

08006cdc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b085      	sub	sp, #20
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
 8006ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	4a38      	ldr	r2, [pc, #224]	@ (8006dd0 <TIM_Base_SetConfig+0xf4>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d007      	beq.n	8006d04 <TIM_Base_SetConfig+0x28>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006cfa:	d003      	beq.n	8006d04 <TIM_Base_SetConfig+0x28>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	4a35      	ldr	r2, [pc, #212]	@ (8006dd4 <TIM_Base_SetConfig+0xf8>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d108      	bne.n	8006d16 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	685b      	ldr	r3, [r3, #4]
 8006d10:	68fa      	ldr	r2, [r7, #12]
 8006d12:	4313      	orrs	r3, r2
 8006d14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	4a2d      	ldr	r2, [pc, #180]	@ (8006dd0 <TIM_Base_SetConfig+0xf4>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d013      	beq.n	8006d46 <TIM_Base_SetConfig+0x6a>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d24:	d00f      	beq.n	8006d46 <TIM_Base_SetConfig+0x6a>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	4a2a      	ldr	r2, [pc, #168]	@ (8006dd4 <TIM_Base_SetConfig+0xf8>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d00b      	beq.n	8006d46 <TIM_Base_SetConfig+0x6a>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	4a29      	ldr	r2, [pc, #164]	@ (8006dd8 <TIM_Base_SetConfig+0xfc>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d007      	beq.n	8006d46 <TIM_Base_SetConfig+0x6a>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	4a28      	ldr	r2, [pc, #160]	@ (8006ddc <TIM_Base_SetConfig+0x100>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d003      	beq.n	8006d46 <TIM_Base_SetConfig+0x6a>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	4a27      	ldr	r2, [pc, #156]	@ (8006de0 <TIM_Base_SetConfig+0x104>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d108      	bne.n	8006d58 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	68db      	ldr	r3, [r3, #12]
 8006d52:	68fa      	ldr	r2, [r7, #12]
 8006d54:	4313      	orrs	r3, r2
 8006d56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	695b      	ldr	r3, [r3, #20]
 8006d62:	4313      	orrs	r3, r2
 8006d64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	68fa      	ldr	r2, [r7, #12]
 8006d6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	689a      	ldr	r2, [r3, #8]
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	681a      	ldr	r2, [r3, #0]
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	4a14      	ldr	r2, [pc, #80]	@ (8006dd0 <TIM_Base_SetConfig+0xf4>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d00b      	beq.n	8006d9c <TIM_Base_SetConfig+0xc0>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	4a14      	ldr	r2, [pc, #80]	@ (8006dd8 <TIM_Base_SetConfig+0xfc>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d007      	beq.n	8006d9c <TIM_Base_SetConfig+0xc0>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	4a13      	ldr	r2, [pc, #76]	@ (8006ddc <TIM_Base_SetConfig+0x100>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d003      	beq.n	8006d9c <TIM_Base_SetConfig+0xc0>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	4a12      	ldr	r2, [pc, #72]	@ (8006de0 <TIM_Base_SetConfig+0x104>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d103      	bne.n	8006da4 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	691a      	ldr	r2, [r3, #16]
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2201      	movs	r2, #1
 8006da8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	691b      	ldr	r3, [r3, #16]
 8006dae:	f003 0301 	and.w	r3, r3, #1
 8006db2:	2b01      	cmp	r3, #1
 8006db4:	d105      	bne.n	8006dc2 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	691b      	ldr	r3, [r3, #16]
 8006dba:	f023 0201 	bic.w	r2, r3, #1
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	611a      	str	r2, [r3, #16]
  }
}
 8006dc2:	bf00      	nop
 8006dc4:	3714      	adds	r7, #20
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dcc:	4770      	bx	lr
 8006dce:	bf00      	nop
 8006dd0:	40012c00 	.word	0x40012c00
 8006dd4:	40000400 	.word	0x40000400
 8006dd8:	40014000 	.word	0x40014000
 8006ddc:	40014400 	.word	0x40014400
 8006de0:	40014800 	.word	0x40014800

08006de4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b087      	sub	sp, #28
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
 8006dec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6a1b      	ldr	r3, [r3, #32]
 8006df2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6a1b      	ldr	r3, [r3, #32]
 8006df8:	f023 0201 	bic.w	r2, r3, #1
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	699b      	ldr	r3, [r3, #24]
 8006e0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006e12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	f023 0303 	bic.w	r3, r3, #3
 8006e1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	68fa      	ldr	r2, [r7, #12]
 8006e26:	4313      	orrs	r3, r2
 8006e28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006e2a:	697b      	ldr	r3, [r7, #20]
 8006e2c:	f023 0302 	bic.w	r3, r3, #2
 8006e30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	689b      	ldr	r3, [r3, #8]
 8006e36:	697a      	ldr	r2, [r7, #20]
 8006e38:	4313      	orrs	r3, r2
 8006e3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	4a28      	ldr	r2, [pc, #160]	@ (8006ee0 <TIM_OC1_SetConfig+0xfc>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d00b      	beq.n	8006e5c <TIM_OC1_SetConfig+0x78>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	4a27      	ldr	r2, [pc, #156]	@ (8006ee4 <TIM_OC1_SetConfig+0x100>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d007      	beq.n	8006e5c <TIM_OC1_SetConfig+0x78>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	4a26      	ldr	r2, [pc, #152]	@ (8006ee8 <TIM_OC1_SetConfig+0x104>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d003      	beq.n	8006e5c <TIM_OC1_SetConfig+0x78>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	4a25      	ldr	r2, [pc, #148]	@ (8006eec <TIM_OC1_SetConfig+0x108>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d10c      	bne.n	8006e76 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006e5c:	697b      	ldr	r3, [r7, #20]
 8006e5e:	f023 0308 	bic.w	r3, r3, #8
 8006e62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	68db      	ldr	r3, [r3, #12]
 8006e68:	697a      	ldr	r2, [r7, #20]
 8006e6a:	4313      	orrs	r3, r2
 8006e6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006e6e:	697b      	ldr	r3, [r7, #20]
 8006e70:	f023 0304 	bic.w	r3, r3, #4
 8006e74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	4a19      	ldr	r2, [pc, #100]	@ (8006ee0 <TIM_OC1_SetConfig+0xfc>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d00b      	beq.n	8006e96 <TIM_OC1_SetConfig+0xb2>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	4a18      	ldr	r2, [pc, #96]	@ (8006ee4 <TIM_OC1_SetConfig+0x100>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d007      	beq.n	8006e96 <TIM_OC1_SetConfig+0xb2>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	4a17      	ldr	r2, [pc, #92]	@ (8006ee8 <TIM_OC1_SetConfig+0x104>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d003      	beq.n	8006e96 <TIM_OC1_SetConfig+0xb2>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	4a16      	ldr	r2, [pc, #88]	@ (8006eec <TIM_OC1_SetConfig+0x108>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d111      	bne.n	8006eba <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006e96:	693b      	ldr	r3, [r7, #16]
 8006e98:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006e9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006e9e:	693b      	ldr	r3, [r7, #16]
 8006ea0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006ea4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	695b      	ldr	r3, [r3, #20]
 8006eaa:	693a      	ldr	r2, [r7, #16]
 8006eac:	4313      	orrs	r3, r2
 8006eae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	699b      	ldr	r3, [r3, #24]
 8006eb4:	693a      	ldr	r2, [r7, #16]
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	693a      	ldr	r2, [r7, #16]
 8006ebe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	68fa      	ldr	r2, [r7, #12]
 8006ec4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	685a      	ldr	r2, [r3, #4]
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	697a      	ldr	r2, [r7, #20]
 8006ed2:	621a      	str	r2, [r3, #32]
}
 8006ed4:	bf00      	nop
 8006ed6:	371c      	adds	r7, #28
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ede:	4770      	bx	lr
 8006ee0:	40012c00 	.word	0x40012c00
 8006ee4:	40014000 	.word	0x40014000
 8006ee8:	40014400 	.word	0x40014400
 8006eec:	40014800 	.word	0x40014800

08006ef0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b087      	sub	sp, #28
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
 8006ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6a1b      	ldr	r3, [r3, #32]
 8006efe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6a1b      	ldr	r3, [r3, #32]
 8006f04:	f023 0210 	bic.w	r2, r3, #16
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	685b      	ldr	r3, [r3, #4]
 8006f10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	699b      	ldr	r3, [r3, #24]
 8006f16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006f1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006f2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	021b      	lsls	r3, r3, #8
 8006f32:	68fa      	ldr	r2, [r7, #12]
 8006f34:	4313      	orrs	r3, r2
 8006f36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006f38:	697b      	ldr	r3, [r7, #20]
 8006f3a:	f023 0320 	bic.w	r3, r3, #32
 8006f3e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	689b      	ldr	r3, [r3, #8]
 8006f44:	011b      	lsls	r3, r3, #4
 8006f46:	697a      	ldr	r2, [r7, #20]
 8006f48:	4313      	orrs	r3, r2
 8006f4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	4a24      	ldr	r2, [pc, #144]	@ (8006fe0 <TIM_OC2_SetConfig+0xf0>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d10d      	bne.n	8006f70 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006f54:	697b      	ldr	r3, [r7, #20]
 8006f56:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006f5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	68db      	ldr	r3, [r3, #12]
 8006f60:	011b      	lsls	r3, r3, #4
 8006f62:	697a      	ldr	r2, [r7, #20]
 8006f64:	4313      	orrs	r3, r2
 8006f66:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006f68:	697b      	ldr	r3, [r7, #20]
 8006f6a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f6e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	4a1b      	ldr	r2, [pc, #108]	@ (8006fe0 <TIM_OC2_SetConfig+0xf0>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d00b      	beq.n	8006f90 <TIM_OC2_SetConfig+0xa0>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	4a1a      	ldr	r2, [pc, #104]	@ (8006fe4 <TIM_OC2_SetConfig+0xf4>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d007      	beq.n	8006f90 <TIM_OC2_SetConfig+0xa0>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	4a19      	ldr	r2, [pc, #100]	@ (8006fe8 <TIM_OC2_SetConfig+0xf8>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d003      	beq.n	8006f90 <TIM_OC2_SetConfig+0xa0>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	4a18      	ldr	r2, [pc, #96]	@ (8006fec <TIM_OC2_SetConfig+0xfc>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d113      	bne.n	8006fb8 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006f90:	693b      	ldr	r3, [r7, #16]
 8006f92:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006f96:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006f98:	693b      	ldr	r3, [r7, #16]
 8006f9a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006f9e:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	695b      	ldr	r3, [r3, #20]
 8006fa4:	009b      	lsls	r3, r3, #2
 8006fa6:	693a      	ldr	r2, [r7, #16]
 8006fa8:	4313      	orrs	r3, r2
 8006faa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	699b      	ldr	r3, [r3, #24]
 8006fb0:	009b      	lsls	r3, r3, #2
 8006fb2:	693a      	ldr	r2, [r7, #16]
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	693a      	ldr	r2, [r7, #16]
 8006fbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	68fa      	ldr	r2, [r7, #12]
 8006fc2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	685a      	ldr	r2, [r3, #4]
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	697a      	ldr	r2, [r7, #20]
 8006fd0:	621a      	str	r2, [r3, #32]
}
 8006fd2:	bf00      	nop
 8006fd4:	371c      	adds	r7, #28
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fdc:	4770      	bx	lr
 8006fde:	bf00      	nop
 8006fe0:	40012c00 	.word	0x40012c00
 8006fe4:	40014000 	.word	0x40014000
 8006fe8:	40014400 	.word	0x40014400
 8006fec:	40014800 	.word	0x40014800

08006ff0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b087      	sub	sp, #28
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
 8006ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6a1b      	ldr	r3, [r3, #32]
 8006ffe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6a1b      	ldr	r3, [r3, #32]
 8007004:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	685b      	ldr	r3, [r3, #4]
 8007010:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	69db      	ldr	r3, [r3, #28]
 8007016:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800701e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007022:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	f023 0303 	bic.w	r3, r3, #3
 800702a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	68fa      	ldr	r2, [r7, #12]
 8007032:	4313      	orrs	r3, r2
 8007034:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800703c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	689b      	ldr	r3, [r3, #8]
 8007042:	021b      	lsls	r3, r3, #8
 8007044:	697a      	ldr	r2, [r7, #20]
 8007046:	4313      	orrs	r3, r2
 8007048:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	4a23      	ldr	r2, [pc, #140]	@ (80070dc <TIM_OC3_SetConfig+0xec>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d10d      	bne.n	800706e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007058:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	68db      	ldr	r3, [r3, #12]
 800705e:	021b      	lsls	r3, r3, #8
 8007060:	697a      	ldr	r2, [r7, #20]
 8007062:	4313      	orrs	r3, r2
 8007064:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800706c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	4a1a      	ldr	r2, [pc, #104]	@ (80070dc <TIM_OC3_SetConfig+0xec>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d00b      	beq.n	800708e <TIM_OC3_SetConfig+0x9e>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	4a19      	ldr	r2, [pc, #100]	@ (80070e0 <TIM_OC3_SetConfig+0xf0>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d007      	beq.n	800708e <TIM_OC3_SetConfig+0x9e>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	4a18      	ldr	r2, [pc, #96]	@ (80070e4 <TIM_OC3_SetConfig+0xf4>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d003      	beq.n	800708e <TIM_OC3_SetConfig+0x9e>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	4a17      	ldr	r2, [pc, #92]	@ (80070e8 <TIM_OC3_SetConfig+0xf8>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d113      	bne.n	80070b6 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800708e:	693b      	ldr	r3, [r7, #16]
 8007090:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007094:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800709c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	695b      	ldr	r3, [r3, #20]
 80070a2:	011b      	lsls	r3, r3, #4
 80070a4:	693a      	ldr	r2, [r7, #16]
 80070a6:	4313      	orrs	r3, r2
 80070a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	699b      	ldr	r3, [r3, #24]
 80070ae:	011b      	lsls	r3, r3, #4
 80070b0:	693a      	ldr	r2, [r7, #16]
 80070b2:	4313      	orrs	r3, r2
 80070b4:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	693a      	ldr	r2, [r7, #16]
 80070ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	68fa      	ldr	r2, [r7, #12]
 80070c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	685a      	ldr	r2, [r3, #4]
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	697a      	ldr	r2, [r7, #20]
 80070ce:	621a      	str	r2, [r3, #32]
}
 80070d0:	bf00      	nop
 80070d2:	371c      	adds	r7, #28
 80070d4:	46bd      	mov	sp, r7
 80070d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070da:	4770      	bx	lr
 80070dc:	40012c00 	.word	0x40012c00
 80070e0:	40014000 	.word	0x40014000
 80070e4:	40014400 	.word	0x40014400
 80070e8:	40014800 	.word	0x40014800

080070ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80070ec:	b480      	push	{r7}
 80070ee:	b087      	sub	sp, #28
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
 80070f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6a1b      	ldr	r3, [r3, #32]
 80070fa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6a1b      	ldr	r3, [r3, #32]
 8007100:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	685b      	ldr	r3, [r3, #4]
 800710c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	69db      	ldr	r3, [r3, #28]
 8007112:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800711a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800711e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007126:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	021b      	lsls	r3, r3, #8
 800712e:	68fa      	ldr	r2, [r7, #12]
 8007130:	4313      	orrs	r3, r2
 8007132:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007134:	693b      	ldr	r3, [r7, #16]
 8007136:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800713a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	689b      	ldr	r3, [r3, #8]
 8007140:	031b      	lsls	r3, r3, #12
 8007142:	693a      	ldr	r2, [r7, #16]
 8007144:	4313      	orrs	r3, r2
 8007146:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	4a16      	ldr	r2, [pc, #88]	@ (80071a4 <TIM_OC4_SetConfig+0xb8>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d00b      	beq.n	8007168 <TIM_OC4_SetConfig+0x7c>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	4a15      	ldr	r2, [pc, #84]	@ (80071a8 <TIM_OC4_SetConfig+0xbc>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d007      	beq.n	8007168 <TIM_OC4_SetConfig+0x7c>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	4a14      	ldr	r2, [pc, #80]	@ (80071ac <TIM_OC4_SetConfig+0xc0>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d003      	beq.n	8007168 <TIM_OC4_SetConfig+0x7c>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	4a13      	ldr	r2, [pc, #76]	@ (80071b0 <TIM_OC4_SetConfig+0xc4>)
 8007164:	4293      	cmp	r3, r2
 8007166:	d109      	bne.n	800717c <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007168:	697b      	ldr	r3, [r7, #20]
 800716a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800716e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	695b      	ldr	r3, [r3, #20]
 8007174:	019b      	lsls	r3, r3, #6
 8007176:	697a      	ldr	r2, [r7, #20]
 8007178:	4313      	orrs	r3, r2
 800717a:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	697a      	ldr	r2, [r7, #20]
 8007180:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	68fa      	ldr	r2, [r7, #12]
 8007186:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	685a      	ldr	r2, [r3, #4]
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	693a      	ldr	r2, [r7, #16]
 8007194:	621a      	str	r2, [r3, #32]
}
 8007196:	bf00      	nop
 8007198:	371c      	adds	r7, #28
 800719a:	46bd      	mov	sp, r7
 800719c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a0:	4770      	bx	lr
 80071a2:	bf00      	nop
 80071a4:	40012c00 	.word	0x40012c00
 80071a8:	40014000 	.word	0x40014000
 80071ac:	40014400 	.word	0x40014400
 80071b0:	40014800 	.word	0x40014800

080071b4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80071b4:	b480      	push	{r7}
 80071b6:	b087      	sub	sp, #28
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
 80071bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6a1b      	ldr	r3, [r3, #32]
 80071c2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6a1b      	ldr	r3, [r3, #32]
 80071c8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	685b      	ldr	r3, [r3, #4]
 80071d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80071e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	68fa      	ldr	r2, [r7, #12]
 80071ee:	4313      	orrs	r3, r2
 80071f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80071f2:	693b      	ldr	r3, [r7, #16]
 80071f4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80071f8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	689b      	ldr	r3, [r3, #8]
 80071fe:	041b      	lsls	r3, r3, #16
 8007200:	693a      	ldr	r2, [r7, #16]
 8007202:	4313      	orrs	r3, r2
 8007204:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	4a15      	ldr	r2, [pc, #84]	@ (8007260 <TIM_OC5_SetConfig+0xac>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d00b      	beq.n	8007226 <TIM_OC5_SetConfig+0x72>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	4a14      	ldr	r2, [pc, #80]	@ (8007264 <TIM_OC5_SetConfig+0xb0>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d007      	beq.n	8007226 <TIM_OC5_SetConfig+0x72>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	4a13      	ldr	r2, [pc, #76]	@ (8007268 <TIM_OC5_SetConfig+0xb4>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d003      	beq.n	8007226 <TIM_OC5_SetConfig+0x72>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	4a12      	ldr	r2, [pc, #72]	@ (800726c <TIM_OC5_SetConfig+0xb8>)
 8007222:	4293      	cmp	r3, r2
 8007224:	d109      	bne.n	800723a <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800722c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	695b      	ldr	r3, [r3, #20]
 8007232:	021b      	lsls	r3, r3, #8
 8007234:	697a      	ldr	r2, [r7, #20]
 8007236:	4313      	orrs	r3, r2
 8007238:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	697a      	ldr	r2, [r7, #20]
 800723e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	68fa      	ldr	r2, [r7, #12]
 8007244:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	685a      	ldr	r2, [r3, #4]
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	693a      	ldr	r2, [r7, #16]
 8007252:	621a      	str	r2, [r3, #32]
}
 8007254:	bf00      	nop
 8007256:	371c      	adds	r7, #28
 8007258:	46bd      	mov	sp, r7
 800725a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725e:	4770      	bx	lr
 8007260:	40012c00 	.word	0x40012c00
 8007264:	40014000 	.word	0x40014000
 8007268:	40014400 	.word	0x40014400
 800726c:	40014800 	.word	0x40014800

08007270 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007270:	b480      	push	{r7}
 8007272:	b087      	sub	sp, #28
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
 8007278:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6a1b      	ldr	r3, [r3, #32]
 800727e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6a1b      	ldr	r3, [r3, #32]
 8007284:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	685b      	ldr	r3, [r3, #4]
 8007290:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800729e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80072a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	021b      	lsls	r3, r3, #8
 80072aa:	68fa      	ldr	r2, [r7, #12]
 80072ac:	4313      	orrs	r3, r2
 80072ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80072b0:	693b      	ldr	r3, [r7, #16]
 80072b2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80072b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	689b      	ldr	r3, [r3, #8]
 80072bc:	051b      	lsls	r3, r3, #20
 80072be:	693a      	ldr	r2, [r7, #16]
 80072c0:	4313      	orrs	r3, r2
 80072c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	4a16      	ldr	r2, [pc, #88]	@ (8007320 <TIM_OC6_SetConfig+0xb0>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d00b      	beq.n	80072e4 <TIM_OC6_SetConfig+0x74>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	4a15      	ldr	r2, [pc, #84]	@ (8007324 <TIM_OC6_SetConfig+0xb4>)
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d007      	beq.n	80072e4 <TIM_OC6_SetConfig+0x74>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	4a14      	ldr	r2, [pc, #80]	@ (8007328 <TIM_OC6_SetConfig+0xb8>)
 80072d8:	4293      	cmp	r3, r2
 80072da:	d003      	beq.n	80072e4 <TIM_OC6_SetConfig+0x74>
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	4a13      	ldr	r2, [pc, #76]	@ (800732c <TIM_OC6_SetConfig+0xbc>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d109      	bne.n	80072f8 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80072ea:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	695b      	ldr	r3, [r3, #20]
 80072f0:	029b      	lsls	r3, r3, #10
 80072f2:	697a      	ldr	r2, [r7, #20]
 80072f4:	4313      	orrs	r3, r2
 80072f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	697a      	ldr	r2, [r7, #20]
 80072fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	68fa      	ldr	r2, [r7, #12]
 8007302:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	685a      	ldr	r2, [r3, #4]
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	693a      	ldr	r2, [r7, #16]
 8007310:	621a      	str	r2, [r3, #32]
}
 8007312:	bf00      	nop
 8007314:	371c      	adds	r7, #28
 8007316:	46bd      	mov	sp, r7
 8007318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731c:	4770      	bx	lr
 800731e:	bf00      	nop
 8007320:	40012c00 	.word	0x40012c00
 8007324:	40014000 	.word	0x40014000
 8007328:	40014400 	.word	0x40014400
 800732c:	40014800 	.word	0x40014800

08007330 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007330:	b480      	push	{r7}
 8007332:	b087      	sub	sp, #28
 8007334:	af00      	add	r7, sp, #0
 8007336:	60f8      	str	r0, [r7, #12]
 8007338:	60b9      	str	r1, [r7, #8]
 800733a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	f003 031f 	and.w	r3, r3, #31
 8007342:	2201      	movs	r2, #1
 8007344:	fa02 f303 	lsl.w	r3, r2, r3
 8007348:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	6a1a      	ldr	r2, [r3, #32]
 800734e:	697b      	ldr	r3, [r7, #20]
 8007350:	43db      	mvns	r3, r3
 8007352:	401a      	ands	r2, r3
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	6a1a      	ldr	r2, [r3, #32]
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	f003 031f 	and.w	r3, r3, #31
 8007362:	6879      	ldr	r1, [r7, #4]
 8007364:	fa01 f303 	lsl.w	r3, r1, r3
 8007368:	431a      	orrs	r2, r3
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	621a      	str	r2, [r3, #32]
}
 800736e:	bf00      	nop
 8007370:	371c      	adds	r7, #28
 8007372:	46bd      	mov	sp, r7
 8007374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007378:	4770      	bx	lr
	...

0800737c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800737c:	b480      	push	{r7}
 800737e:	b085      	sub	sp, #20
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
 8007384:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800738c:	2b01      	cmp	r3, #1
 800738e:	d101      	bne.n	8007394 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007390:	2302      	movs	r3, #2
 8007392:	e054      	b.n	800743e <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2201      	movs	r2, #1
 8007398:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2202      	movs	r2, #2
 80073a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	685b      	ldr	r3, [r3, #4]
 80073aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	689b      	ldr	r3, [r3, #8]
 80073b2:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	4a24      	ldr	r2, [pc, #144]	@ (800744c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d108      	bne.n	80073d0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80073c4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	685b      	ldr	r3, [r3, #4]
 80073ca:	68fa      	ldr	r2, [r7, #12]
 80073cc:	4313      	orrs	r3, r2
 80073ce:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80073d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	68fa      	ldr	r2, [r7, #12]
 80073de:	4313      	orrs	r3, r2
 80073e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	68fa      	ldr	r2, [r7, #12]
 80073e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4a17      	ldr	r2, [pc, #92]	@ (800744c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d00e      	beq.n	8007412 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073fc:	d009      	beq.n	8007412 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4a13      	ldr	r2, [pc, #76]	@ (8007450 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d004      	beq.n	8007412 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4a11      	ldr	r2, [pc, #68]	@ (8007454 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d10c      	bne.n	800742c <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007418:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	689b      	ldr	r3, [r3, #8]
 800741e:	68ba      	ldr	r2, [r7, #8]
 8007420:	4313      	orrs	r3, r2
 8007422:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	68ba      	ldr	r2, [r7, #8]
 800742a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2201      	movs	r2, #1
 8007430:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2200      	movs	r2, #0
 8007438:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800743c:	2300      	movs	r3, #0
}
 800743e:	4618      	mov	r0, r3
 8007440:	3714      	adds	r7, #20
 8007442:	46bd      	mov	sp, r7
 8007444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007448:	4770      	bx	lr
 800744a:	bf00      	nop
 800744c:	40012c00 	.word	0x40012c00
 8007450:	40000400 	.word	0x40000400
 8007454:	40014000 	.word	0x40014000

08007458 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007458:	b480      	push	{r7}
 800745a:	b085      	sub	sp, #20
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
 8007460:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007462:	2300      	movs	r3, #0
 8007464:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800746c:	2b01      	cmp	r3, #1
 800746e:	d101      	bne.n	8007474 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007470:	2302      	movs	r3, #2
 8007472:	e060      	b.n	8007536 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2201      	movs	r2, #1
 8007478:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	68db      	ldr	r3, [r3, #12]
 8007486:	4313      	orrs	r3, r2
 8007488:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	689b      	ldr	r3, [r3, #8]
 8007494:	4313      	orrs	r3, r2
 8007496:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	685b      	ldr	r3, [r3, #4]
 80074a2:	4313      	orrs	r3, r2
 80074a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4313      	orrs	r3, r2
 80074b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	691b      	ldr	r3, [r3, #16]
 80074be:	4313      	orrs	r3, r2
 80074c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	695b      	ldr	r3, [r3, #20]
 80074cc:	4313      	orrs	r3, r2
 80074ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074da:	4313      	orrs	r3, r2
 80074dc:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	699b      	ldr	r3, [r3, #24]
 80074e8:	041b      	lsls	r3, r3, #16
 80074ea:	4313      	orrs	r3, r2
 80074ec:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	4a14      	ldr	r2, [pc, #80]	@ (8007544 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d115      	bne.n	8007524 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007502:	051b      	lsls	r3, r3, #20
 8007504:	4313      	orrs	r3, r2
 8007506:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	69db      	ldr	r3, [r3, #28]
 8007512:	4313      	orrs	r3, r2
 8007514:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	6a1b      	ldr	r3, [r3, #32]
 8007520:	4313      	orrs	r3, r2
 8007522:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	68fa      	ldr	r2, [r7, #12]
 800752a:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2200      	movs	r2, #0
 8007530:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007534:	2300      	movs	r3, #0
}
 8007536:	4618      	mov	r0, r3
 8007538:	3714      	adds	r7, #20
 800753a:	46bd      	mov	sp, r7
 800753c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007540:	4770      	bx	lr
 8007542:	bf00      	nop
 8007544:	40012c00 	.word	0x40012c00

08007548 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007548:	b480      	push	{r7}
 800754a:	b083      	sub	sp, #12
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007550:	bf00      	nop
 8007552:	370c      	adds	r7, #12
 8007554:	46bd      	mov	sp, r7
 8007556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755a:	4770      	bx	lr

0800755c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800755c:	b480      	push	{r7}
 800755e:	b083      	sub	sp, #12
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007564:	bf00      	nop
 8007566:	370c      	adds	r7, #12
 8007568:	46bd      	mov	sp, r7
 800756a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756e:	4770      	bx	lr

08007570 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007570:	b480      	push	{r7}
 8007572:	b083      	sub	sp, #12
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007578:	bf00      	nop
 800757a:	370c      	adds	r7, #12
 800757c:	46bd      	mov	sp, r7
 800757e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007582:	4770      	bx	lr

08007584 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b082      	sub	sp, #8
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d101      	bne.n	8007596 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007592:	2301      	movs	r3, #1
 8007594:	e040      	b.n	8007618 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800759a:	2b00      	cmp	r3, #0
 800759c:	d106      	bne.n	80075ac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2200      	movs	r2, #0
 80075a2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f7fb f8a0 	bl	80026ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2224      	movs	r2, #36	@ 0x24
 80075b0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	681a      	ldr	r2, [r3, #0]
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f022 0201 	bic.w	r2, r2, #1
 80075c0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d002      	beq.n	80075d0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f000 f9e8 	bl	80079a0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f000 f8af 	bl	8007734 <UART_SetConfig>
 80075d6:	4603      	mov	r3, r0
 80075d8:	2b01      	cmp	r3, #1
 80075da:	d101      	bne.n	80075e0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80075dc:	2301      	movs	r3, #1
 80075de:	e01b      	b.n	8007618 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	685a      	ldr	r2, [r3, #4]
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80075ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	689a      	ldr	r2, [r3, #8]
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80075fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	681a      	ldr	r2, [r3, #0]
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f042 0201 	orr.w	r2, r2, #1
 800760e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	f000 fa67 	bl	8007ae4 <UART_CheckIdleState>
 8007616:	4603      	mov	r3, r0
}
 8007618:	4618      	mov	r0, r3
 800761a:	3708      	adds	r7, #8
 800761c:	46bd      	mov	sp, r7
 800761e:	bd80      	pop	{r7, pc}

08007620 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b08a      	sub	sp, #40	@ 0x28
 8007624:	af02      	add	r7, sp, #8
 8007626:	60f8      	str	r0, [r7, #12]
 8007628:	60b9      	str	r1, [r7, #8]
 800762a:	603b      	str	r3, [r7, #0]
 800762c:	4613      	mov	r3, r2
 800762e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007634:	2b20      	cmp	r3, #32
 8007636:	d177      	bne.n	8007728 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d002      	beq.n	8007644 <HAL_UART_Transmit+0x24>
 800763e:	88fb      	ldrh	r3, [r7, #6]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d101      	bne.n	8007648 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007644:	2301      	movs	r3, #1
 8007646:	e070      	b.n	800772a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	2200      	movs	r2, #0
 800764c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	2221      	movs	r2, #33	@ 0x21
 8007654:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007656:	f7fb fa25 	bl	8002aa4 <HAL_GetTick>
 800765a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	88fa      	ldrh	r2, [r7, #6]
 8007660:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	88fa      	ldrh	r2, [r7, #6]
 8007668:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	689b      	ldr	r3, [r3, #8]
 8007670:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007674:	d108      	bne.n	8007688 <HAL_UART_Transmit+0x68>
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	691b      	ldr	r3, [r3, #16]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d104      	bne.n	8007688 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800767e:	2300      	movs	r3, #0
 8007680:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	61bb      	str	r3, [r7, #24]
 8007686:	e003      	b.n	8007690 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800768c:	2300      	movs	r3, #0
 800768e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007690:	e02f      	b.n	80076f2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	9300      	str	r3, [sp, #0]
 8007696:	697b      	ldr	r3, [r7, #20]
 8007698:	2200      	movs	r2, #0
 800769a:	2180      	movs	r1, #128	@ 0x80
 800769c:	68f8      	ldr	r0, [r7, #12]
 800769e:	f000 fac9 	bl	8007c34 <UART_WaitOnFlagUntilTimeout>
 80076a2:	4603      	mov	r3, r0
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d004      	beq.n	80076b2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	2220      	movs	r2, #32
 80076ac:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80076ae:	2303      	movs	r3, #3
 80076b0:	e03b      	b.n	800772a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80076b2:	69fb      	ldr	r3, [r7, #28]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d10b      	bne.n	80076d0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80076b8:	69bb      	ldr	r3, [r7, #24]
 80076ba:	881a      	ldrh	r2, [r3, #0]
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80076c4:	b292      	uxth	r2, r2
 80076c6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80076c8:	69bb      	ldr	r3, [r7, #24]
 80076ca:	3302      	adds	r3, #2
 80076cc:	61bb      	str	r3, [r7, #24]
 80076ce:	e007      	b.n	80076e0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80076d0:	69fb      	ldr	r3, [r7, #28]
 80076d2:	781a      	ldrb	r2, [r3, #0]
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80076da:	69fb      	ldr	r3, [r7, #28]
 80076dc:	3301      	adds	r3, #1
 80076de:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80076e6:	b29b      	uxth	r3, r3
 80076e8:	3b01      	subs	r3, #1
 80076ea:	b29a      	uxth	r2, r3
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80076f8:	b29b      	uxth	r3, r3
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d1c9      	bne.n	8007692 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	9300      	str	r3, [sp, #0]
 8007702:	697b      	ldr	r3, [r7, #20]
 8007704:	2200      	movs	r2, #0
 8007706:	2140      	movs	r1, #64	@ 0x40
 8007708:	68f8      	ldr	r0, [r7, #12]
 800770a:	f000 fa93 	bl	8007c34 <UART_WaitOnFlagUntilTimeout>
 800770e:	4603      	mov	r3, r0
 8007710:	2b00      	cmp	r3, #0
 8007712:	d004      	beq.n	800771e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	2220      	movs	r2, #32
 8007718:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800771a:	2303      	movs	r3, #3
 800771c:	e005      	b.n	800772a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	2220      	movs	r2, #32
 8007722:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8007724:	2300      	movs	r3, #0
 8007726:	e000      	b.n	800772a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8007728:	2302      	movs	r3, #2
  }
}
 800772a:	4618      	mov	r0, r3
 800772c:	3720      	adds	r7, #32
 800772e:	46bd      	mov	sp, r7
 8007730:	bd80      	pop	{r7, pc}
	...

08007734 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b088      	sub	sp, #32
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800773c:	2300      	movs	r3, #0
 800773e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	689a      	ldr	r2, [r3, #8]
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	691b      	ldr	r3, [r3, #16]
 8007748:	431a      	orrs	r2, r3
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	695b      	ldr	r3, [r3, #20]
 800774e:	431a      	orrs	r2, r3
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	69db      	ldr	r3, [r3, #28]
 8007754:	4313      	orrs	r3, r2
 8007756:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	681a      	ldr	r2, [r3, #0]
 800775e:	4b8a      	ldr	r3, [pc, #552]	@ (8007988 <UART_SetConfig+0x254>)
 8007760:	4013      	ands	r3, r2
 8007762:	687a      	ldr	r2, [r7, #4]
 8007764:	6812      	ldr	r2, [r2, #0]
 8007766:	6979      	ldr	r1, [r7, #20]
 8007768:	430b      	orrs	r3, r1
 800776a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	685b      	ldr	r3, [r3, #4]
 8007772:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	68da      	ldr	r2, [r3, #12]
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	430a      	orrs	r2, r1
 8007780:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	699b      	ldr	r3, [r3, #24]
 8007786:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6a1b      	ldr	r3, [r3, #32]
 800778c:	697a      	ldr	r2, [r7, #20]
 800778e:	4313      	orrs	r3, r2
 8007790:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	689b      	ldr	r3, [r3, #8]
 8007798:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	697a      	ldr	r2, [r7, #20]
 80077a2:	430a      	orrs	r2, r1
 80077a4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4a78      	ldr	r2, [pc, #480]	@ (800798c <UART_SetConfig+0x258>)
 80077ac:	4293      	cmp	r3, r2
 80077ae:	d120      	bne.n	80077f2 <UART_SetConfig+0xbe>
 80077b0:	4b77      	ldr	r3, [pc, #476]	@ (8007990 <UART_SetConfig+0x25c>)
 80077b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077b4:	f003 0303 	and.w	r3, r3, #3
 80077b8:	2b03      	cmp	r3, #3
 80077ba:	d817      	bhi.n	80077ec <UART_SetConfig+0xb8>
 80077bc:	a201      	add	r2, pc, #4	@ (adr r2, 80077c4 <UART_SetConfig+0x90>)
 80077be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077c2:	bf00      	nop
 80077c4:	080077d5 	.word	0x080077d5
 80077c8:	080077e1 	.word	0x080077e1
 80077cc:	080077e7 	.word	0x080077e7
 80077d0:	080077db 	.word	0x080077db
 80077d4:	2300      	movs	r3, #0
 80077d6:	77fb      	strb	r3, [r7, #31]
 80077d8:	e01d      	b.n	8007816 <UART_SetConfig+0xe2>
 80077da:	2302      	movs	r3, #2
 80077dc:	77fb      	strb	r3, [r7, #31]
 80077de:	e01a      	b.n	8007816 <UART_SetConfig+0xe2>
 80077e0:	2304      	movs	r3, #4
 80077e2:	77fb      	strb	r3, [r7, #31]
 80077e4:	e017      	b.n	8007816 <UART_SetConfig+0xe2>
 80077e6:	2308      	movs	r3, #8
 80077e8:	77fb      	strb	r3, [r7, #31]
 80077ea:	e014      	b.n	8007816 <UART_SetConfig+0xe2>
 80077ec:	2310      	movs	r3, #16
 80077ee:	77fb      	strb	r3, [r7, #31]
 80077f0:	e011      	b.n	8007816 <UART_SetConfig+0xe2>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	4a67      	ldr	r2, [pc, #412]	@ (8007994 <UART_SetConfig+0x260>)
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d102      	bne.n	8007802 <UART_SetConfig+0xce>
 80077fc:	2300      	movs	r3, #0
 80077fe:	77fb      	strb	r3, [r7, #31]
 8007800:	e009      	b.n	8007816 <UART_SetConfig+0xe2>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	4a64      	ldr	r2, [pc, #400]	@ (8007998 <UART_SetConfig+0x264>)
 8007808:	4293      	cmp	r3, r2
 800780a:	d102      	bne.n	8007812 <UART_SetConfig+0xde>
 800780c:	2300      	movs	r3, #0
 800780e:	77fb      	strb	r3, [r7, #31]
 8007810:	e001      	b.n	8007816 <UART_SetConfig+0xe2>
 8007812:	2310      	movs	r3, #16
 8007814:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	69db      	ldr	r3, [r3, #28]
 800781a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800781e:	d15a      	bne.n	80078d6 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8007820:	7ffb      	ldrb	r3, [r7, #31]
 8007822:	2b08      	cmp	r3, #8
 8007824:	d827      	bhi.n	8007876 <UART_SetConfig+0x142>
 8007826:	a201      	add	r2, pc, #4	@ (adr r2, 800782c <UART_SetConfig+0xf8>)
 8007828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800782c:	08007851 	.word	0x08007851
 8007830:	08007859 	.word	0x08007859
 8007834:	08007861 	.word	0x08007861
 8007838:	08007877 	.word	0x08007877
 800783c:	08007867 	.word	0x08007867
 8007840:	08007877 	.word	0x08007877
 8007844:	08007877 	.word	0x08007877
 8007848:	08007877 	.word	0x08007877
 800784c:	0800786f 	.word	0x0800786f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007850:	f7fd fe8c 	bl	800556c <HAL_RCC_GetPCLK1Freq>
 8007854:	61b8      	str	r0, [r7, #24]
        break;
 8007856:	e013      	b.n	8007880 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007858:	f7fd feaa 	bl	80055b0 <HAL_RCC_GetPCLK2Freq>
 800785c:	61b8      	str	r0, [r7, #24]
        break;
 800785e:	e00f      	b.n	8007880 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007860:	4b4e      	ldr	r3, [pc, #312]	@ (800799c <UART_SetConfig+0x268>)
 8007862:	61bb      	str	r3, [r7, #24]
        break;
 8007864:	e00c      	b.n	8007880 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007866:	f7fd fe21 	bl	80054ac <HAL_RCC_GetSysClockFreq>
 800786a:	61b8      	str	r0, [r7, #24]
        break;
 800786c:	e008      	b.n	8007880 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800786e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007872:	61bb      	str	r3, [r7, #24]
        break;
 8007874:	e004      	b.n	8007880 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8007876:	2300      	movs	r3, #0
 8007878:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800787a:	2301      	movs	r3, #1
 800787c:	77bb      	strb	r3, [r7, #30]
        break;
 800787e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007880:	69bb      	ldr	r3, [r7, #24]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d074      	beq.n	8007970 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007886:	69bb      	ldr	r3, [r7, #24]
 8007888:	005a      	lsls	r2, r3, #1
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	685b      	ldr	r3, [r3, #4]
 800788e:	085b      	lsrs	r3, r3, #1
 8007890:	441a      	add	r2, r3
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	685b      	ldr	r3, [r3, #4]
 8007896:	fbb2 f3f3 	udiv	r3, r2, r3
 800789a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800789c:	693b      	ldr	r3, [r7, #16]
 800789e:	2b0f      	cmp	r3, #15
 80078a0:	d916      	bls.n	80078d0 <UART_SetConfig+0x19c>
 80078a2:	693b      	ldr	r3, [r7, #16]
 80078a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80078a8:	d212      	bcs.n	80078d0 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80078aa:	693b      	ldr	r3, [r7, #16]
 80078ac:	b29b      	uxth	r3, r3
 80078ae:	f023 030f 	bic.w	r3, r3, #15
 80078b2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80078b4:	693b      	ldr	r3, [r7, #16]
 80078b6:	085b      	lsrs	r3, r3, #1
 80078b8:	b29b      	uxth	r3, r3
 80078ba:	f003 0307 	and.w	r3, r3, #7
 80078be:	b29a      	uxth	r2, r3
 80078c0:	89fb      	ldrh	r3, [r7, #14]
 80078c2:	4313      	orrs	r3, r2
 80078c4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	89fa      	ldrh	r2, [r7, #14]
 80078cc:	60da      	str	r2, [r3, #12]
 80078ce:	e04f      	b.n	8007970 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80078d0:	2301      	movs	r3, #1
 80078d2:	77bb      	strb	r3, [r7, #30]
 80078d4:	e04c      	b.n	8007970 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80078d6:	7ffb      	ldrb	r3, [r7, #31]
 80078d8:	2b08      	cmp	r3, #8
 80078da:	d828      	bhi.n	800792e <UART_SetConfig+0x1fa>
 80078dc:	a201      	add	r2, pc, #4	@ (adr r2, 80078e4 <UART_SetConfig+0x1b0>)
 80078de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078e2:	bf00      	nop
 80078e4:	08007909 	.word	0x08007909
 80078e8:	08007911 	.word	0x08007911
 80078ec:	08007919 	.word	0x08007919
 80078f0:	0800792f 	.word	0x0800792f
 80078f4:	0800791f 	.word	0x0800791f
 80078f8:	0800792f 	.word	0x0800792f
 80078fc:	0800792f 	.word	0x0800792f
 8007900:	0800792f 	.word	0x0800792f
 8007904:	08007927 	.word	0x08007927
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007908:	f7fd fe30 	bl	800556c <HAL_RCC_GetPCLK1Freq>
 800790c:	61b8      	str	r0, [r7, #24]
        break;
 800790e:	e013      	b.n	8007938 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007910:	f7fd fe4e 	bl	80055b0 <HAL_RCC_GetPCLK2Freq>
 8007914:	61b8      	str	r0, [r7, #24]
        break;
 8007916:	e00f      	b.n	8007938 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007918:	4b20      	ldr	r3, [pc, #128]	@ (800799c <UART_SetConfig+0x268>)
 800791a:	61bb      	str	r3, [r7, #24]
        break;
 800791c:	e00c      	b.n	8007938 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800791e:	f7fd fdc5 	bl	80054ac <HAL_RCC_GetSysClockFreq>
 8007922:	61b8      	str	r0, [r7, #24]
        break;
 8007924:	e008      	b.n	8007938 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007926:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800792a:	61bb      	str	r3, [r7, #24]
        break;
 800792c:	e004      	b.n	8007938 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800792e:	2300      	movs	r3, #0
 8007930:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007932:	2301      	movs	r3, #1
 8007934:	77bb      	strb	r3, [r7, #30]
        break;
 8007936:	bf00      	nop
    }

    if (pclk != 0U)
 8007938:	69bb      	ldr	r3, [r7, #24]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d018      	beq.n	8007970 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	685b      	ldr	r3, [r3, #4]
 8007942:	085a      	lsrs	r2, r3, #1
 8007944:	69bb      	ldr	r3, [r7, #24]
 8007946:	441a      	add	r2, r3
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	685b      	ldr	r3, [r3, #4]
 800794c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007950:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007952:	693b      	ldr	r3, [r7, #16]
 8007954:	2b0f      	cmp	r3, #15
 8007956:	d909      	bls.n	800796c <UART_SetConfig+0x238>
 8007958:	693b      	ldr	r3, [r7, #16]
 800795a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800795e:	d205      	bcs.n	800796c <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007960:	693b      	ldr	r3, [r7, #16]
 8007962:	b29a      	uxth	r2, r3
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	60da      	str	r2, [r3, #12]
 800796a:	e001      	b.n	8007970 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800796c:	2301      	movs	r3, #1
 800796e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2200      	movs	r2, #0
 8007974:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2200      	movs	r2, #0
 800797a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800797c:	7fbb      	ldrb	r3, [r7, #30]
}
 800797e:	4618      	mov	r0, r3
 8007980:	3720      	adds	r7, #32
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}
 8007986:	bf00      	nop
 8007988:	efff69f3 	.word	0xefff69f3
 800798c:	40013800 	.word	0x40013800
 8007990:	40021000 	.word	0x40021000
 8007994:	40004400 	.word	0x40004400
 8007998:	40004800 	.word	0x40004800
 800799c:	007a1200 	.word	0x007a1200

080079a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80079a0:	b480      	push	{r7}
 80079a2:	b083      	sub	sp, #12
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079ac:	f003 0308 	and.w	r3, r3, #8
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d00a      	beq.n	80079ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	685b      	ldr	r3, [r3, #4]
 80079ba:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	430a      	orrs	r2, r1
 80079c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079ce:	f003 0301 	and.w	r3, r3, #1
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d00a      	beq.n	80079ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	685b      	ldr	r3, [r3, #4]
 80079dc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	430a      	orrs	r2, r1
 80079ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079f0:	f003 0302 	and.w	r3, r3, #2
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d00a      	beq.n	8007a0e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	685b      	ldr	r3, [r3, #4]
 80079fe:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	430a      	orrs	r2, r1
 8007a0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a12:	f003 0304 	and.w	r3, r3, #4
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d00a      	beq.n	8007a30 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	685b      	ldr	r3, [r3, #4]
 8007a20:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	430a      	orrs	r2, r1
 8007a2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a34:	f003 0310 	and.w	r3, r3, #16
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d00a      	beq.n	8007a52 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	689b      	ldr	r3, [r3, #8]
 8007a42:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	430a      	orrs	r2, r1
 8007a50:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a56:	f003 0320 	and.w	r3, r3, #32
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d00a      	beq.n	8007a74 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	689b      	ldr	r3, [r3, #8]
 8007a64:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	430a      	orrs	r2, r1
 8007a72:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d01a      	beq.n	8007ab6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	685b      	ldr	r3, [r3, #4]
 8007a86:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	430a      	orrs	r2, r1
 8007a94:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a9a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007a9e:	d10a      	bne.n	8007ab6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	685b      	ldr	r3, [r3, #4]
 8007aa6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	430a      	orrs	r2, r1
 8007ab4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007aba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d00a      	beq.n	8007ad8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	685b      	ldr	r3, [r3, #4]
 8007ac8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	430a      	orrs	r2, r1
 8007ad6:	605a      	str	r2, [r3, #4]
  }
}
 8007ad8:	bf00      	nop
 8007ada:	370c      	adds	r7, #12
 8007adc:	46bd      	mov	sp, r7
 8007ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae2:	4770      	bx	lr

08007ae4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b098      	sub	sp, #96	@ 0x60
 8007ae8:	af02      	add	r7, sp, #8
 8007aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2200      	movs	r2, #0
 8007af0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007af4:	f7fa ffd6 	bl	8002aa4 <HAL_GetTick>
 8007af8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f003 0308 	and.w	r3, r3, #8
 8007b04:	2b08      	cmp	r3, #8
 8007b06:	d12e      	bne.n	8007b66 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b08:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007b0c:	9300      	str	r3, [sp, #0]
 8007b0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007b10:	2200      	movs	r2, #0
 8007b12:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f000 f88c 	bl	8007c34 <UART_WaitOnFlagUntilTimeout>
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d021      	beq.n	8007b66 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b2a:	e853 3f00 	ldrex	r3, [r3]
 8007b2e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007b30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b32:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007b36:	653b      	str	r3, [r7, #80]	@ 0x50
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	461a      	mov	r2, r3
 8007b3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007b40:	647b      	str	r3, [r7, #68]	@ 0x44
 8007b42:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b44:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007b46:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007b48:	e841 2300 	strex	r3, r2, [r1]
 8007b4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007b4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d1e6      	bne.n	8007b22 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2220      	movs	r2, #32
 8007b58:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b62:	2303      	movs	r3, #3
 8007b64:	e062      	b.n	8007c2c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f003 0304 	and.w	r3, r3, #4
 8007b70:	2b04      	cmp	r3, #4
 8007b72:	d149      	bne.n	8007c08 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b74:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007b78:	9300      	str	r3, [sp, #0]
 8007b7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f000 f856 	bl	8007c34 <UART_WaitOnFlagUntilTimeout>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d03c      	beq.n	8007c08 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b96:	e853 3f00 	ldrex	r3, [r3]
 8007b9a:	623b      	str	r3, [r7, #32]
   return(result);
 8007b9c:	6a3b      	ldr	r3, [r7, #32]
 8007b9e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007ba2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	461a      	mov	r2, r3
 8007baa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007bac:	633b      	str	r3, [r7, #48]	@ 0x30
 8007bae:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bb0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007bb2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007bb4:	e841 2300 	strex	r3, r2, [r1]
 8007bb8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007bba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d1e6      	bne.n	8007b8e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	3308      	adds	r3, #8
 8007bc6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bc8:	693b      	ldr	r3, [r7, #16]
 8007bca:	e853 3f00 	ldrex	r3, [r3]
 8007bce:	60fb      	str	r3, [r7, #12]
   return(result);
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	f023 0301 	bic.w	r3, r3, #1
 8007bd6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	3308      	adds	r3, #8
 8007bde:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007be0:	61fa      	str	r2, [r7, #28]
 8007be2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007be4:	69b9      	ldr	r1, [r7, #24]
 8007be6:	69fa      	ldr	r2, [r7, #28]
 8007be8:	e841 2300 	strex	r3, r2, [r1]
 8007bec:	617b      	str	r3, [r7, #20]
   return(result);
 8007bee:	697b      	ldr	r3, [r7, #20]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d1e5      	bne.n	8007bc0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2220      	movs	r2, #32
 8007bf8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2200      	movs	r2, #0
 8007c00:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c04:	2303      	movs	r3, #3
 8007c06:	e011      	b.n	8007c2c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2220      	movs	r2, #32
 8007c0c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2220      	movs	r2, #32
 8007c12:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2200      	movs	r2, #0
 8007c1a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2200      	movs	r2, #0
 8007c20:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2200      	movs	r2, #0
 8007c26:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007c2a:	2300      	movs	r3, #0
}
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	3758      	adds	r7, #88	@ 0x58
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bd80      	pop	{r7, pc}

08007c34 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b084      	sub	sp, #16
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	60f8      	str	r0, [r7, #12]
 8007c3c:	60b9      	str	r1, [r7, #8]
 8007c3e:	603b      	str	r3, [r7, #0]
 8007c40:	4613      	mov	r3, r2
 8007c42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c44:	e04f      	b.n	8007ce6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c46:	69bb      	ldr	r3, [r7, #24]
 8007c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c4c:	d04b      	beq.n	8007ce6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c4e:	f7fa ff29 	bl	8002aa4 <HAL_GetTick>
 8007c52:	4602      	mov	r2, r0
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	1ad3      	subs	r3, r2, r3
 8007c58:	69ba      	ldr	r2, [r7, #24]
 8007c5a:	429a      	cmp	r2, r3
 8007c5c:	d302      	bcc.n	8007c64 <UART_WaitOnFlagUntilTimeout+0x30>
 8007c5e:	69bb      	ldr	r3, [r7, #24]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d101      	bne.n	8007c68 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007c64:	2303      	movs	r3, #3
 8007c66:	e04e      	b.n	8007d06 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f003 0304 	and.w	r3, r3, #4
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d037      	beq.n	8007ce6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	2b80      	cmp	r3, #128	@ 0x80
 8007c7a:	d034      	beq.n	8007ce6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007c7c:	68bb      	ldr	r3, [r7, #8]
 8007c7e:	2b40      	cmp	r3, #64	@ 0x40
 8007c80:	d031      	beq.n	8007ce6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	69db      	ldr	r3, [r3, #28]
 8007c88:	f003 0308 	and.w	r3, r3, #8
 8007c8c:	2b08      	cmp	r3, #8
 8007c8e:	d110      	bne.n	8007cb2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	2208      	movs	r2, #8
 8007c96:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007c98:	68f8      	ldr	r0, [r7, #12]
 8007c9a:	f000 f838 	bl	8007d0e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	2208      	movs	r2, #8
 8007ca2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007cae:	2301      	movs	r3, #1
 8007cb0:	e029      	b.n	8007d06 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	69db      	ldr	r3, [r3, #28]
 8007cb8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007cbc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007cc0:	d111      	bne.n	8007ce6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007cca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007ccc:	68f8      	ldr	r0, [r7, #12]
 8007cce:	f000 f81e 	bl	8007d0e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	2220      	movs	r2, #32
 8007cd6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	2200      	movs	r2, #0
 8007cde:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007ce2:	2303      	movs	r3, #3
 8007ce4:	e00f      	b.n	8007d06 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	69da      	ldr	r2, [r3, #28]
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	4013      	ands	r3, r2
 8007cf0:	68ba      	ldr	r2, [r7, #8]
 8007cf2:	429a      	cmp	r2, r3
 8007cf4:	bf0c      	ite	eq
 8007cf6:	2301      	moveq	r3, #1
 8007cf8:	2300      	movne	r3, #0
 8007cfa:	b2db      	uxtb	r3, r3
 8007cfc:	461a      	mov	r2, r3
 8007cfe:	79fb      	ldrb	r3, [r7, #7]
 8007d00:	429a      	cmp	r2, r3
 8007d02:	d0a0      	beq.n	8007c46 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007d04:	2300      	movs	r3, #0
}
 8007d06:	4618      	mov	r0, r3
 8007d08:	3710      	adds	r7, #16
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	bd80      	pop	{r7, pc}

08007d0e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007d0e:	b480      	push	{r7}
 8007d10:	b095      	sub	sp, #84	@ 0x54
 8007d12:	af00      	add	r7, sp, #0
 8007d14:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d1e:	e853 3f00 	ldrex	r3, [r3]
 8007d22:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007d24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d26:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007d2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	461a      	mov	r2, r3
 8007d32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d34:	643b      	str	r3, [r7, #64]	@ 0x40
 8007d36:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d38:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007d3a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007d3c:	e841 2300 	strex	r3, r2, [r1]
 8007d40:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007d42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d1e6      	bne.n	8007d16 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	3308      	adds	r3, #8
 8007d4e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d50:	6a3b      	ldr	r3, [r7, #32]
 8007d52:	e853 3f00 	ldrex	r3, [r3]
 8007d56:	61fb      	str	r3, [r7, #28]
   return(result);
 8007d58:	69fb      	ldr	r3, [r7, #28]
 8007d5a:	f023 0301 	bic.w	r3, r3, #1
 8007d5e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	3308      	adds	r3, #8
 8007d66:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007d68:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007d6a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d6c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007d6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007d70:	e841 2300 	strex	r3, r2, [r1]
 8007d74:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d1e5      	bne.n	8007d48 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d80:	2b01      	cmp	r3, #1
 8007d82:	d118      	bne.n	8007db6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	e853 3f00 	ldrex	r3, [r3]
 8007d90:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d92:	68bb      	ldr	r3, [r7, #8]
 8007d94:	f023 0310 	bic.w	r3, r3, #16
 8007d98:	647b      	str	r3, [r7, #68]	@ 0x44
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	461a      	mov	r2, r3
 8007da0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007da2:	61bb      	str	r3, [r7, #24]
 8007da4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007da6:	6979      	ldr	r1, [r7, #20]
 8007da8:	69ba      	ldr	r2, [r7, #24]
 8007daa:	e841 2300 	strex	r3, r2, [r1]
 8007dae:	613b      	str	r3, [r7, #16]
   return(result);
 8007db0:	693b      	ldr	r3, [r7, #16]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d1e6      	bne.n	8007d84 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2220      	movs	r2, #32
 8007dba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007dca:	bf00      	nop
 8007dcc:	3754      	adds	r7, #84	@ 0x54
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd4:	4770      	bx	lr

08007dd6 <__cvt>:
 8007dd6:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007dda:	ec57 6b10 	vmov	r6, r7, d0
 8007dde:	2f00      	cmp	r7, #0
 8007de0:	460c      	mov	r4, r1
 8007de2:	4619      	mov	r1, r3
 8007de4:	463b      	mov	r3, r7
 8007de6:	bfbb      	ittet	lt
 8007de8:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007dec:	461f      	movlt	r7, r3
 8007dee:	2300      	movge	r3, #0
 8007df0:	232d      	movlt	r3, #45	@ 0x2d
 8007df2:	700b      	strb	r3, [r1, #0]
 8007df4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007df6:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007dfa:	4691      	mov	r9, r2
 8007dfc:	f023 0820 	bic.w	r8, r3, #32
 8007e00:	bfbc      	itt	lt
 8007e02:	4632      	movlt	r2, r6
 8007e04:	4616      	movlt	r6, r2
 8007e06:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007e0a:	d005      	beq.n	8007e18 <__cvt+0x42>
 8007e0c:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007e10:	d100      	bne.n	8007e14 <__cvt+0x3e>
 8007e12:	3401      	adds	r4, #1
 8007e14:	2102      	movs	r1, #2
 8007e16:	e000      	b.n	8007e1a <__cvt+0x44>
 8007e18:	2103      	movs	r1, #3
 8007e1a:	ab03      	add	r3, sp, #12
 8007e1c:	9301      	str	r3, [sp, #4]
 8007e1e:	ab02      	add	r3, sp, #8
 8007e20:	9300      	str	r3, [sp, #0]
 8007e22:	ec47 6b10 	vmov	d0, r6, r7
 8007e26:	4653      	mov	r3, sl
 8007e28:	4622      	mov	r2, r4
 8007e2a:	f000 ff3d 	bl	8008ca8 <_dtoa_r>
 8007e2e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007e32:	4605      	mov	r5, r0
 8007e34:	d119      	bne.n	8007e6a <__cvt+0x94>
 8007e36:	f019 0f01 	tst.w	r9, #1
 8007e3a:	d00e      	beq.n	8007e5a <__cvt+0x84>
 8007e3c:	eb00 0904 	add.w	r9, r0, r4
 8007e40:	2200      	movs	r2, #0
 8007e42:	2300      	movs	r3, #0
 8007e44:	4630      	mov	r0, r6
 8007e46:	4639      	mov	r1, r7
 8007e48:	f7f8 fe3e 	bl	8000ac8 <__aeabi_dcmpeq>
 8007e4c:	b108      	cbz	r0, 8007e52 <__cvt+0x7c>
 8007e4e:	f8cd 900c 	str.w	r9, [sp, #12]
 8007e52:	2230      	movs	r2, #48	@ 0x30
 8007e54:	9b03      	ldr	r3, [sp, #12]
 8007e56:	454b      	cmp	r3, r9
 8007e58:	d31e      	bcc.n	8007e98 <__cvt+0xc2>
 8007e5a:	9b03      	ldr	r3, [sp, #12]
 8007e5c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007e5e:	1b5b      	subs	r3, r3, r5
 8007e60:	4628      	mov	r0, r5
 8007e62:	6013      	str	r3, [r2, #0]
 8007e64:	b004      	add	sp, #16
 8007e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e6a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007e6e:	eb00 0904 	add.w	r9, r0, r4
 8007e72:	d1e5      	bne.n	8007e40 <__cvt+0x6a>
 8007e74:	7803      	ldrb	r3, [r0, #0]
 8007e76:	2b30      	cmp	r3, #48	@ 0x30
 8007e78:	d10a      	bne.n	8007e90 <__cvt+0xba>
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	4630      	mov	r0, r6
 8007e80:	4639      	mov	r1, r7
 8007e82:	f7f8 fe21 	bl	8000ac8 <__aeabi_dcmpeq>
 8007e86:	b918      	cbnz	r0, 8007e90 <__cvt+0xba>
 8007e88:	f1c4 0401 	rsb	r4, r4, #1
 8007e8c:	f8ca 4000 	str.w	r4, [sl]
 8007e90:	f8da 3000 	ldr.w	r3, [sl]
 8007e94:	4499      	add	r9, r3
 8007e96:	e7d3      	b.n	8007e40 <__cvt+0x6a>
 8007e98:	1c59      	adds	r1, r3, #1
 8007e9a:	9103      	str	r1, [sp, #12]
 8007e9c:	701a      	strb	r2, [r3, #0]
 8007e9e:	e7d9      	b.n	8007e54 <__cvt+0x7e>

08007ea0 <__exponent>:
 8007ea0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007ea2:	2900      	cmp	r1, #0
 8007ea4:	bfba      	itte	lt
 8007ea6:	4249      	neglt	r1, r1
 8007ea8:	232d      	movlt	r3, #45	@ 0x2d
 8007eaa:	232b      	movge	r3, #43	@ 0x2b
 8007eac:	2909      	cmp	r1, #9
 8007eae:	7002      	strb	r2, [r0, #0]
 8007eb0:	7043      	strb	r3, [r0, #1]
 8007eb2:	dd29      	ble.n	8007f08 <__exponent+0x68>
 8007eb4:	f10d 0307 	add.w	r3, sp, #7
 8007eb8:	461d      	mov	r5, r3
 8007eba:	270a      	movs	r7, #10
 8007ebc:	461a      	mov	r2, r3
 8007ebe:	fbb1 f6f7 	udiv	r6, r1, r7
 8007ec2:	fb07 1416 	mls	r4, r7, r6, r1
 8007ec6:	3430      	adds	r4, #48	@ 0x30
 8007ec8:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007ecc:	460c      	mov	r4, r1
 8007ece:	2c63      	cmp	r4, #99	@ 0x63
 8007ed0:	f103 33ff 	add.w	r3, r3, #4294967295
 8007ed4:	4631      	mov	r1, r6
 8007ed6:	dcf1      	bgt.n	8007ebc <__exponent+0x1c>
 8007ed8:	3130      	adds	r1, #48	@ 0x30
 8007eda:	1e94      	subs	r4, r2, #2
 8007edc:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007ee0:	1c41      	adds	r1, r0, #1
 8007ee2:	4623      	mov	r3, r4
 8007ee4:	42ab      	cmp	r3, r5
 8007ee6:	d30a      	bcc.n	8007efe <__exponent+0x5e>
 8007ee8:	f10d 0309 	add.w	r3, sp, #9
 8007eec:	1a9b      	subs	r3, r3, r2
 8007eee:	42ac      	cmp	r4, r5
 8007ef0:	bf88      	it	hi
 8007ef2:	2300      	movhi	r3, #0
 8007ef4:	3302      	adds	r3, #2
 8007ef6:	4403      	add	r3, r0
 8007ef8:	1a18      	subs	r0, r3, r0
 8007efa:	b003      	add	sp, #12
 8007efc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007efe:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007f02:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007f06:	e7ed      	b.n	8007ee4 <__exponent+0x44>
 8007f08:	2330      	movs	r3, #48	@ 0x30
 8007f0a:	3130      	adds	r1, #48	@ 0x30
 8007f0c:	7083      	strb	r3, [r0, #2]
 8007f0e:	70c1      	strb	r1, [r0, #3]
 8007f10:	1d03      	adds	r3, r0, #4
 8007f12:	e7f1      	b.n	8007ef8 <__exponent+0x58>

08007f14 <_printf_float>:
 8007f14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f18:	b08d      	sub	sp, #52	@ 0x34
 8007f1a:	460c      	mov	r4, r1
 8007f1c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007f20:	4616      	mov	r6, r2
 8007f22:	461f      	mov	r7, r3
 8007f24:	4605      	mov	r5, r0
 8007f26:	f000 fdbf 	bl	8008aa8 <_localeconv_r>
 8007f2a:	6803      	ldr	r3, [r0, #0]
 8007f2c:	9304      	str	r3, [sp, #16]
 8007f2e:	4618      	mov	r0, r3
 8007f30:	f7f8 f99e 	bl	8000270 <strlen>
 8007f34:	2300      	movs	r3, #0
 8007f36:	930a      	str	r3, [sp, #40]	@ 0x28
 8007f38:	f8d8 3000 	ldr.w	r3, [r8]
 8007f3c:	9005      	str	r0, [sp, #20]
 8007f3e:	3307      	adds	r3, #7
 8007f40:	f023 0307 	bic.w	r3, r3, #7
 8007f44:	f103 0208 	add.w	r2, r3, #8
 8007f48:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007f4c:	f8d4 b000 	ldr.w	fp, [r4]
 8007f50:	f8c8 2000 	str.w	r2, [r8]
 8007f54:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007f58:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007f5c:	9307      	str	r3, [sp, #28]
 8007f5e:	f8cd 8018 	str.w	r8, [sp, #24]
 8007f62:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007f66:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007f6a:	4b9c      	ldr	r3, [pc, #624]	@ (80081dc <_printf_float+0x2c8>)
 8007f6c:	f04f 32ff 	mov.w	r2, #4294967295
 8007f70:	f7f8 fddc 	bl	8000b2c <__aeabi_dcmpun>
 8007f74:	bb70      	cbnz	r0, 8007fd4 <_printf_float+0xc0>
 8007f76:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007f7a:	4b98      	ldr	r3, [pc, #608]	@ (80081dc <_printf_float+0x2c8>)
 8007f7c:	f04f 32ff 	mov.w	r2, #4294967295
 8007f80:	f7f8 fdb6 	bl	8000af0 <__aeabi_dcmple>
 8007f84:	bb30      	cbnz	r0, 8007fd4 <_printf_float+0xc0>
 8007f86:	2200      	movs	r2, #0
 8007f88:	2300      	movs	r3, #0
 8007f8a:	4640      	mov	r0, r8
 8007f8c:	4649      	mov	r1, r9
 8007f8e:	f7f8 fda5 	bl	8000adc <__aeabi_dcmplt>
 8007f92:	b110      	cbz	r0, 8007f9a <_printf_float+0x86>
 8007f94:	232d      	movs	r3, #45	@ 0x2d
 8007f96:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007f9a:	4a91      	ldr	r2, [pc, #580]	@ (80081e0 <_printf_float+0x2cc>)
 8007f9c:	4b91      	ldr	r3, [pc, #580]	@ (80081e4 <_printf_float+0x2d0>)
 8007f9e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007fa2:	bf94      	ite	ls
 8007fa4:	4690      	movls	r8, r2
 8007fa6:	4698      	movhi	r8, r3
 8007fa8:	2303      	movs	r3, #3
 8007faa:	6123      	str	r3, [r4, #16]
 8007fac:	f02b 0304 	bic.w	r3, fp, #4
 8007fb0:	6023      	str	r3, [r4, #0]
 8007fb2:	f04f 0900 	mov.w	r9, #0
 8007fb6:	9700      	str	r7, [sp, #0]
 8007fb8:	4633      	mov	r3, r6
 8007fba:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007fbc:	4621      	mov	r1, r4
 8007fbe:	4628      	mov	r0, r5
 8007fc0:	f000 f9d2 	bl	8008368 <_printf_common>
 8007fc4:	3001      	adds	r0, #1
 8007fc6:	f040 808d 	bne.w	80080e4 <_printf_float+0x1d0>
 8007fca:	f04f 30ff 	mov.w	r0, #4294967295
 8007fce:	b00d      	add	sp, #52	@ 0x34
 8007fd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fd4:	4642      	mov	r2, r8
 8007fd6:	464b      	mov	r3, r9
 8007fd8:	4640      	mov	r0, r8
 8007fda:	4649      	mov	r1, r9
 8007fdc:	f7f8 fda6 	bl	8000b2c <__aeabi_dcmpun>
 8007fe0:	b140      	cbz	r0, 8007ff4 <_printf_float+0xe0>
 8007fe2:	464b      	mov	r3, r9
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	bfbc      	itt	lt
 8007fe8:	232d      	movlt	r3, #45	@ 0x2d
 8007fea:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007fee:	4a7e      	ldr	r2, [pc, #504]	@ (80081e8 <_printf_float+0x2d4>)
 8007ff0:	4b7e      	ldr	r3, [pc, #504]	@ (80081ec <_printf_float+0x2d8>)
 8007ff2:	e7d4      	b.n	8007f9e <_printf_float+0x8a>
 8007ff4:	6863      	ldr	r3, [r4, #4]
 8007ff6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007ffa:	9206      	str	r2, [sp, #24]
 8007ffc:	1c5a      	adds	r2, r3, #1
 8007ffe:	d13b      	bne.n	8008078 <_printf_float+0x164>
 8008000:	2306      	movs	r3, #6
 8008002:	6063      	str	r3, [r4, #4]
 8008004:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008008:	2300      	movs	r3, #0
 800800a:	6022      	str	r2, [r4, #0]
 800800c:	9303      	str	r3, [sp, #12]
 800800e:	ab0a      	add	r3, sp, #40	@ 0x28
 8008010:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008014:	ab09      	add	r3, sp, #36	@ 0x24
 8008016:	9300      	str	r3, [sp, #0]
 8008018:	6861      	ldr	r1, [r4, #4]
 800801a:	ec49 8b10 	vmov	d0, r8, r9
 800801e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008022:	4628      	mov	r0, r5
 8008024:	f7ff fed7 	bl	8007dd6 <__cvt>
 8008028:	9b06      	ldr	r3, [sp, #24]
 800802a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800802c:	2b47      	cmp	r3, #71	@ 0x47
 800802e:	4680      	mov	r8, r0
 8008030:	d129      	bne.n	8008086 <_printf_float+0x172>
 8008032:	1cc8      	adds	r0, r1, #3
 8008034:	db02      	blt.n	800803c <_printf_float+0x128>
 8008036:	6863      	ldr	r3, [r4, #4]
 8008038:	4299      	cmp	r1, r3
 800803a:	dd41      	ble.n	80080c0 <_printf_float+0x1ac>
 800803c:	f1aa 0a02 	sub.w	sl, sl, #2
 8008040:	fa5f fa8a 	uxtb.w	sl, sl
 8008044:	3901      	subs	r1, #1
 8008046:	4652      	mov	r2, sl
 8008048:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800804c:	9109      	str	r1, [sp, #36]	@ 0x24
 800804e:	f7ff ff27 	bl	8007ea0 <__exponent>
 8008052:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008054:	1813      	adds	r3, r2, r0
 8008056:	2a01      	cmp	r2, #1
 8008058:	4681      	mov	r9, r0
 800805a:	6123      	str	r3, [r4, #16]
 800805c:	dc02      	bgt.n	8008064 <_printf_float+0x150>
 800805e:	6822      	ldr	r2, [r4, #0]
 8008060:	07d2      	lsls	r2, r2, #31
 8008062:	d501      	bpl.n	8008068 <_printf_float+0x154>
 8008064:	3301      	adds	r3, #1
 8008066:	6123      	str	r3, [r4, #16]
 8008068:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800806c:	2b00      	cmp	r3, #0
 800806e:	d0a2      	beq.n	8007fb6 <_printf_float+0xa2>
 8008070:	232d      	movs	r3, #45	@ 0x2d
 8008072:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008076:	e79e      	b.n	8007fb6 <_printf_float+0xa2>
 8008078:	9a06      	ldr	r2, [sp, #24]
 800807a:	2a47      	cmp	r2, #71	@ 0x47
 800807c:	d1c2      	bne.n	8008004 <_printf_float+0xf0>
 800807e:	2b00      	cmp	r3, #0
 8008080:	d1c0      	bne.n	8008004 <_printf_float+0xf0>
 8008082:	2301      	movs	r3, #1
 8008084:	e7bd      	b.n	8008002 <_printf_float+0xee>
 8008086:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800808a:	d9db      	bls.n	8008044 <_printf_float+0x130>
 800808c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008090:	d118      	bne.n	80080c4 <_printf_float+0x1b0>
 8008092:	2900      	cmp	r1, #0
 8008094:	6863      	ldr	r3, [r4, #4]
 8008096:	dd0b      	ble.n	80080b0 <_printf_float+0x19c>
 8008098:	6121      	str	r1, [r4, #16]
 800809a:	b913      	cbnz	r3, 80080a2 <_printf_float+0x18e>
 800809c:	6822      	ldr	r2, [r4, #0]
 800809e:	07d0      	lsls	r0, r2, #31
 80080a0:	d502      	bpl.n	80080a8 <_printf_float+0x194>
 80080a2:	3301      	adds	r3, #1
 80080a4:	440b      	add	r3, r1
 80080a6:	6123      	str	r3, [r4, #16]
 80080a8:	65a1      	str	r1, [r4, #88]	@ 0x58
 80080aa:	f04f 0900 	mov.w	r9, #0
 80080ae:	e7db      	b.n	8008068 <_printf_float+0x154>
 80080b0:	b913      	cbnz	r3, 80080b8 <_printf_float+0x1a4>
 80080b2:	6822      	ldr	r2, [r4, #0]
 80080b4:	07d2      	lsls	r2, r2, #31
 80080b6:	d501      	bpl.n	80080bc <_printf_float+0x1a8>
 80080b8:	3302      	adds	r3, #2
 80080ba:	e7f4      	b.n	80080a6 <_printf_float+0x192>
 80080bc:	2301      	movs	r3, #1
 80080be:	e7f2      	b.n	80080a6 <_printf_float+0x192>
 80080c0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80080c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80080c6:	4299      	cmp	r1, r3
 80080c8:	db05      	blt.n	80080d6 <_printf_float+0x1c2>
 80080ca:	6823      	ldr	r3, [r4, #0]
 80080cc:	6121      	str	r1, [r4, #16]
 80080ce:	07d8      	lsls	r0, r3, #31
 80080d0:	d5ea      	bpl.n	80080a8 <_printf_float+0x194>
 80080d2:	1c4b      	adds	r3, r1, #1
 80080d4:	e7e7      	b.n	80080a6 <_printf_float+0x192>
 80080d6:	2900      	cmp	r1, #0
 80080d8:	bfd4      	ite	le
 80080da:	f1c1 0202 	rsble	r2, r1, #2
 80080de:	2201      	movgt	r2, #1
 80080e0:	4413      	add	r3, r2
 80080e2:	e7e0      	b.n	80080a6 <_printf_float+0x192>
 80080e4:	6823      	ldr	r3, [r4, #0]
 80080e6:	055a      	lsls	r2, r3, #21
 80080e8:	d407      	bmi.n	80080fa <_printf_float+0x1e6>
 80080ea:	6923      	ldr	r3, [r4, #16]
 80080ec:	4642      	mov	r2, r8
 80080ee:	4631      	mov	r1, r6
 80080f0:	4628      	mov	r0, r5
 80080f2:	47b8      	blx	r7
 80080f4:	3001      	adds	r0, #1
 80080f6:	d12b      	bne.n	8008150 <_printf_float+0x23c>
 80080f8:	e767      	b.n	8007fca <_printf_float+0xb6>
 80080fa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80080fe:	f240 80dd 	bls.w	80082bc <_printf_float+0x3a8>
 8008102:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008106:	2200      	movs	r2, #0
 8008108:	2300      	movs	r3, #0
 800810a:	f7f8 fcdd 	bl	8000ac8 <__aeabi_dcmpeq>
 800810e:	2800      	cmp	r0, #0
 8008110:	d033      	beq.n	800817a <_printf_float+0x266>
 8008112:	4a37      	ldr	r2, [pc, #220]	@ (80081f0 <_printf_float+0x2dc>)
 8008114:	2301      	movs	r3, #1
 8008116:	4631      	mov	r1, r6
 8008118:	4628      	mov	r0, r5
 800811a:	47b8      	blx	r7
 800811c:	3001      	adds	r0, #1
 800811e:	f43f af54 	beq.w	8007fca <_printf_float+0xb6>
 8008122:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008126:	4543      	cmp	r3, r8
 8008128:	db02      	blt.n	8008130 <_printf_float+0x21c>
 800812a:	6823      	ldr	r3, [r4, #0]
 800812c:	07d8      	lsls	r0, r3, #31
 800812e:	d50f      	bpl.n	8008150 <_printf_float+0x23c>
 8008130:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008134:	4631      	mov	r1, r6
 8008136:	4628      	mov	r0, r5
 8008138:	47b8      	blx	r7
 800813a:	3001      	adds	r0, #1
 800813c:	f43f af45 	beq.w	8007fca <_printf_float+0xb6>
 8008140:	f04f 0900 	mov.w	r9, #0
 8008144:	f108 38ff 	add.w	r8, r8, #4294967295
 8008148:	f104 0a1a 	add.w	sl, r4, #26
 800814c:	45c8      	cmp	r8, r9
 800814e:	dc09      	bgt.n	8008164 <_printf_float+0x250>
 8008150:	6823      	ldr	r3, [r4, #0]
 8008152:	079b      	lsls	r3, r3, #30
 8008154:	f100 8103 	bmi.w	800835e <_printf_float+0x44a>
 8008158:	68e0      	ldr	r0, [r4, #12]
 800815a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800815c:	4298      	cmp	r0, r3
 800815e:	bfb8      	it	lt
 8008160:	4618      	movlt	r0, r3
 8008162:	e734      	b.n	8007fce <_printf_float+0xba>
 8008164:	2301      	movs	r3, #1
 8008166:	4652      	mov	r2, sl
 8008168:	4631      	mov	r1, r6
 800816a:	4628      	mov	r0, r5
 800816c:	47b8      	blx	r7
 800816e:	3001      	adds	r0, #1
 8008170:	f43f af2b 	beq.w	8007fca <_printf_float+0xb6>
 8008174:	f109 0901 	add.w	r9, r9, #1
 8008178:	e7e8      	b.n	800814c <_printf_float+0x238>
 800817a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800817c:	2b00      	cmp	r3, #0
 800817e:	dc39      	bgt.n	80081f4 <_printf_float+0x2e0>
 8008180:	4a1b      	ldr	r2, [pc, #108]	@ (80081f0 <_printf_float+0x2dc>)
 8008182:	2301      	movs	r3, #1
 8008184:	4631      	mov	r1, r6
 8008186:	4628      	mov	r0, r5
 8008188:	47b8      	blx	r7
 800818a:	3001      	adds	r0, #1
 800818c:	f43f af1d 	beq.w	8007fca <_printf_float+0xb6>
 8008190:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008194:	ea59 0303 	orrs.w	r3, r9, r3
 8008198:	d102      	bne.n	80081a0 <_printf_float+0x28c>
 800819a:	6823      	ldr	r3, [r4, #0]
 800819c:	07d9      	lsls	r1, r3, #31
 800819e:	d5d7      	bpl.n	8008150 <_printf_float+0x23c>
 80081a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80081a4:	4631      	mov	r1, r6
 80081a6:	4628      	mov	r0, r5
 80081a8:	47b8      	blx	r7
 80081aa:	3001      	adds	r0, #1
 80081ac:	f43f af0d 	beq.w	8007fca <_printf_float+0xb6>
 80081b0:	f04f 0a00 	mov.w	sl, #0
 80081b4:	f104 0b1a 	add.w	fp, r4, #26
 80081b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081ba:	425b      	negs	r3, r3
 80081bc:	4553      	cmp	r3, sl
 80081be:	dc01      	bgt.n	80081c4 <_printf_float+0x2b0>
 80081c0:	464b      	mov	r3, r9
 80081c2:	e793      	b.n	80080ec <_printf_float+0x1d8>
 80081c4:	2301      	movs	r3, #1
 80081c6:	465a      	mov	r2, fp
 80081c8:	4631      	mov	r1, r6
 80081ca:	4628      	mov	r0, r5
 80081cc:	47b8      	blx	r7
 80081ce:	3001      	adds	r0, #1
 80081d0:	f43f aefb 	beq.w	8007fca <_printf_float+0xb6>
 80081d4:	f10a 0a01 	add.w	sl, sl, #1
 80081d8:	e7ee      	b.n	80081b8 <_printf_float+0x2a4>
 80081da:	bf00      	nop
 80081dc:	7fefffff 	.word	0x7fefffff
 80081e0:	0800a9e4 	.word	0x0800a9e4
 80081e4:	0800a9e8 	.word	0x0800a9e8
 80081e8:	0800a9ec 	.word	0x0800a9ec
 80081ec:	0800a9f0 	.word	0x0800a9f0
 80081f0:	0800a9f4 	.word	0x0800a9f4
 80081f4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80081f6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80081fa:	4553      	cmp	r3, sl
 80081fc:	bfa8      	it	ge
 80081fe:	4653      	movge	r3, sl
 8008200:	2b00      	cmp	r3, #0
 8008202:	4699      	mov	r9, r3
 8008204:	dc36      	bgt.n	8008274 <_printf_float+0x360>
 8008206:	f04f 0b00 	mov.w	fp, #0
 800820a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800820e:	f104 021a 	add.w	r2, r4, #26
 8008212:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008214:	9306      	str	r3, [sp, #24]
 8008216:	eba3 0309 	sub.w	r3, r3, r9
 800821a:	455b      	cmp	r3, fp
 800821c:	dc31      	bgt.n	8008282 <_printf_float+0x36e>
 800821e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008220:	459a      	cmp	sl, r3
 8008222:	dc3a      	bgt.n	800829a <_printf_float+0x386>
 8008224:	6823      	ldr	r3, [r4, #0]
 8008226:	07da      	lsls	r2, r3, #31
 8008228:	d437      	bmi.n	800829a <_printf_float+0x386>
 800822a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800822c:	ebaa 0903 	sub.w	r9, sl, r3
 8008230:	9b06      	ldr	r3, [sp, #24]
 8008232:	ebaa 0303 	sub.w	r3, sl, r3
 8008236:	4599      	cmp	r9, r3
 8008238:	bfa8      	it	ge
 800823a:	4699      	movge	r9, r3
 800823c:	f1b9 0f00 	cmp.w	r9, #0
 8008240:	dc33      	bgt.n	80082aa <_printf_float+0x396>
 8008242:	f04f 0800 	mov.w	r8, #0
 8008246:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800824a:	f104 0b1a 	add.w	fp, r4, #26
 800824e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008250:	ebaa 0303 	sub.w	r3, sl, r3
 8008254:	eba3 0309 	sub.w	r3, r3, r9
 8008258:	4543      	cmp	r3, r8
 800825a:	f77f af79 	ble.w	8008150 <_printf_float+0x23c>
 800825e:	2301      	movs	r3, #1
 8008260:	465a      	mov	r2, fp
 8008262:	4631      	mov	r1, r6
 8008264:	4628      	mov	r0, r5
 8008266:	47b8      	blx	r7
 8008268:	3001      	adds	r0, #1
 800826a:	f43f aeae 	beq.w	8007fca <_printf_float+0xb6>
 800826e:	f108 0801 	add.w	r8, r8, #1
 8008272:	e7ec      	b.n	800824e <_printf_float+0x33a>
 8008274:	4642      	mov	r2, r8
 8008276:	4631      	mov	r1, r6
 8008278:	4628      	mov	r0, r5
 800827a:	47b8      	blx	r7
 800827c:	3001      	adds	r0, #1
 800827e:	d1c2      	bne.n	8008206 <_printf_float+0x2f2>
 8008280:	e6a3      	b.n	8007fca <_printf_float+0xb6>
 8008282:	2301      	movs	r3, #1
 8008284:	4631      	mov	r1, r6
 8008286:	4628      	mov	r0, r5
 8008288:	9206      	str	r2, [sp, #24]
 800828a:	47b8      	blx	r7
 800828c:	3001      	adds	r0, #1
 800828e:	f43f ae9c 	beq.w	8007fca <_printf_float+0xb6>
 8008292:	9a06      	ldr	r2, [sp, #24]
 8008294:	f10b 0b01 	add.w	fp, fp, #1
 8008298:	e7bb      	b.n	8008212 <_printf_float+0x2fe>
 800829a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800829e:	4631      	mov	r1, r6
 80082a0:	4628      	mov	r0, r5
 80082a2:	47b8      	blx	r7
 80082a4:	3001      	adds	r0, #1
 80082a6:	d1c0      	bne.n	800822a <_printf_float+0x316>
 80082a8:	e68f      	b.n	8007fca <_printf_float+0xb6>
 80082aa:	9a06      	ldr	r2, [sp, #24]
 80082ac:	464b      	mov	r3, r9
 80082ae:	4442      	add	r2, r8
 80082b0:	4631      	mov	r1, r6
 80082b2:	4628      	mov	r0, r5
 80082b4:	47b8      	blx	r7
 80082b6:	3001      	adds	r0, #1
 80082b8:	d1c3      	bne.n	8008242 <_printf_float+0x32e>
 80082ba:	e686      	b.n	8007fca <_printf_float+0xb6>
 80082bc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80082c0:	f1ba 0f01 	cmp.w	sl, #1
 80082c4:	dc01      	bgt.n	80082ca <_printf_float+0x3b6>
 80082c6:	07db      	lsls	r3, r3, #31
 80082c8:	d536      	bpl.n	8008338 <_printf_float+0x424>
 80082ca:	2301      	movs	r3, #1
 80082cc:	4642      	mov	r2, r8
 80082ce:	4631      	mov	r1, r6
 80082d0:	4628      	mov	r0, r5
 80082d2:	47b8      	blx	r7
 80082d4:	3001      	adds	r0, #1
 80082d6:	f43f ae78 	beq.w	8007fca <_printf_float+0xb6>
 80082da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80082de:	4631      	mov	r1, r6
 80082e0:	4628      	mov	r0, r5
 80082e2:	47b8      	blx	r7
 80082e4:	3001      	adds	r0, #1
 80082e6:	f43f ae70 	beq.w	8007fca <_printf_float+0xb6>
 80082ea:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80082ee:	2200      	movs	r2, #0
 80082f0:	2300      	movs	r3, #0
 80082f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80082f6:	f7f8 fbe7 	bl	8000ac8 <__aeabi_dcmpeq>
 80082fa:	b9c0      	cbnz	r0, 800832e <_printf_float+0x41a>
 80082fc:	4653      	mov	r3, sl
 80082fe:	f108 0201 	add.w	r2, r8, #1
 8008302:	4631      	mov	r1, r6
 8008304:	4628      	mov	r0, r5
 8008306:	47b8      	blx	r7
 8008308:	3001      	adds	r0, #1
 800830a:	d10c      	bne.n	8008326 <_printf_float+0x412>
 800830c:	e65d      	b.n	8007fca <_printf_float+0xb6>
 800830e:	2301      	movs	r3, #1
 8008310:	465a      	mov	r2, fp
 8008312:	4631      	mov	r1, r6
 8008314:	4628      	mov	r0, r5
 8008316:	47b8      	blx	r7
 8008318:	3001      	adds	r0, #1
 800831a:	f43f ae56 	beq.w	8007fca <_printf_float+0xb6>
 800831e:	f108 0801 	add.w	r8, r8, #1
 8008322:	45d0      	cmp	r8, sl
 8008324:	dbf3      	blt.n	800830e <_printf_float+0x3fa>
 8008326:	464b      	mov	r3, r9
 8008328:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800832c:	e6df      	b.n	80080ee <_printf_float+0x1da>
 800832e:	f04f 0800 	mov.w	r8, #0
 8008332:	f104 0b1a 	add.w	fp, r4, #26
 8008336:	e7f4      	b.n	8008322 <_printf_float+0x40e>
 8008338:	2301      	movs	r3, #1
 800833a:	4642      	mov	r2, r8
 800833c:	e7e1      	b.n	8008302 <_printf_float+0x3ee>
 800833e:	2301      	movs	r3, #1
 8008340:	464a      	mov	r2, r9
 8008342:	4631      	mov	r1, r6
 8008344:	4628      	mov	r0, r5
 8008346:	47b8      	blx	r7
 8008348:	3001      	adds	r0, #1
 800834a:	f43f ae3e 	beq.w	8007fca <_printf_float+0xb6>
 800834e:	f108 0801 	add.w	r8, r8, #1
 8008352:	68e3      	ldr	r3, [r4, #12]
 8008354:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008356:	1a5b      	subs	r3, r3, r1
 8008358:	4543      	cmp	r3, r8
 800835a:	dcf0      	bgt.n	800833e <_printf_float+0x42a>
 800835c:	e6fc      	b.n	8008158 <_printf_float+0x244>
 800835e:	f04f 0800 	mov.w	r8, #0
 8008362:	f104 0919 	add.w	r9, r4, #25
 8008366:	e7f4      	b.n	8008352 <_printf_float+0x43e>

08008368 <_printf_common>:
 8008368:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800836c:	4616      	mov	r6, r2
 800836e:	4698      	mov	r8, r3
 8008370:	688a      	ldr	r2, [r1, #8]
 8008372:	690b      	ldr	r3, [r1, #16]
 8008374:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008378:	4293      	cmp	r3, r2
 800837a:	bfb8      	it	lt
 800837c:	4613      	movlt	r3, r2
 800837e:	6033      	str	r3, [r6, #0]
 8008380:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008384:	4607      	mov	r7, r0
 8008386:	460c      	mov	r4, r1
 8008388:	b10a      	cbz	r2, 800838e <_printf_common+0x26>
 800838a:	3301      	adds	r3, #1
 800838c:	6033      	str	r3, [r6, #0]
 800838e:	6823      	ldr	r3, [r4, #0]
 8008390:	0699      	lsls	r1, r3, #26
 8008392:	bf42      	ittt	mi
 8008394:	6833      	ldrmi	r3, [r6, #0]
 8008396:	3302      	addmi	r3, #2
 8008398:	6033      	strmi	r3, [r6, #0]
 800839a:	6825      	ldr	r5, [r4, #0]
 800839c:	f015 0506 	ands.w	r5, r5, #6
 80083a0:	d106      	bne.n	80083b0 <_printf_common+0x48>
 80083a2:	f104 0a19 	add.w	sl, r4, #25
 80083a6:	68e3      	ldr	r3, [r4, #12]
 80083a8:	6832      	ldr	r2, [r6, #0]
 80083aa:	1a9b      	subs	r3, r3, r2
 80083ac:	42ab      	cmp	r3, r5
 80083ae:	dc26      	bgt.n	80083fe <_printf_common+0x96>
 80083b0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80083b4:	6822      	ldr	r2, [r4, #0]
 80083b6:	3b00      	subs	r3, #0
 80083b8:	bf18      	it	ne
 80083ba:	2301      	movne	r3, #1
 80083bc:	0692      	lsls	r2, r2, #26
 80083be:	d42b      	bmi.n	8008418 <_printf_common+0xb0>
 80083c0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80083c4:	4641      	mov	r1, r8
 80083c6:	4638      	mov	r0, r7
 80083c8:	47c8      	blx	r9
 80083ca:	3001      	adds	r0, #1
 80083cc:	d01e      	beq.n	800840c <_printf_common+0xa4>
 80083ce:	6823      	ldr	r3, [r4, #0]
 80083d0:	6922      	ldr	r2, [r4, #16]
 80083d2:	f003 0306 	and.w	r3, r3, #6
 80083d6:	2b04      	cmp	r3, #4
 80083d8:	bf02      	ittt	eq
 80083da:	68e5      	ldreq	r5, [r4, #12]
 80083dc:	6833      	ldreq	r3, [r6, #0]
 80083de:	1aed      	subeq	r5, r5, r3
 80083e0:	68a3      	ldr	r3, [r4, #8]
 80083e2:	bf0c      	ite	eq
 80083e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80083e8:	2500      	movne	r5, #0
 80083ea:	4293      	cmp	r3, r2
 80083ec:	bfc4      	itt	gt
 80083ee:	1a9b      	subgt	r3, r3, r2
 80083f0:	18ed      	addgt	r5, r5, r3
 80083f2:	2600      	movs	r6, #0
 80083f4:	341a      	adds	r4, #26
 80083f6:	42b5      	cmp	r5, r6
 80083f8:	d11a      	bne.n	8008430 <_printf_common+0xc8>
 80083fa:	2000      	movs	r0, #0
 80083fc:	e008      	b.n	8008410 <_printf_common+0xa8>
 80083fe:	2301      	movs	r3, #1
 8008400:	4652      	mov	r2, sl
 8008402:	4641      	mov	r1, r8
 8008404:	4638      	mov	r0, r7
 8008406:	47c8      	blx	r9
 8008408:	3001      	adds	r0, #1
 800840a:	d103      	bne.n	8008414 <_printf_common+0xac>
 800840c:	f04f 30ff 	mov.w	r0, #4294967295
 8008410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008414:	3501      	adds	r5, #1
 8008416:	e7c6      	b.n	80083a6 <_printf_common+0x3e>
 8008418:	18e1      	adds	r1, r4, r3
 800841a:	1c5a      	adds	r2, r3, #1
 800841c:	2030      	movs	r0, #48	@ 0x30
 800841e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008422:	4422      	add	r2, r4
 8008424:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008428:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800842c:	3302      	adds	r3, #2
 800842e:	e7c7      	b.n	80083c0 <_printf_common+0x58>
 8008430:	2301      	movs	r3, #1
 8008432:	4622      	mov	r2, r4
 8008434:	4641      	mov	r1, r8
 8008436:	4638      	mov	r0, r7
 8008438:	47c8      	blx	r9
 800843a:	3001      	adds	r0, #1
 800843c:	d0e6      	beq.n	800840c <_printf_common+0xa4>
 800843e:	3601      	adds	r6, #1
 8008440:	e7d9      	b.n	80083f6 <_printf_common+0x8e>
	...

08008444 <_printf_i>:
 8008444:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008448:	7e0f      	ldrb	r7, [r1, #24]
 800844a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800844c:	2f78      	cmp	r7, #120	@ 0x78
 800844e:	4691      	mov	r9, r2
 8008450:	4680      	mov	r8, r0
 8008452:	460c      	mov	r4, r1
 8008454:	469a      	mov	sl, r3
 8008456:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800845a:	d807      	bhi.n	800846c <_printf_i+0x28>
 800845c:	2f62      	cmp	r7, #98	@ 0x62
 800845e:	d80a      	bhi.n	8008476 <_printf_i+0x32>
 8008460:	2f00      	cmp	r7, #0
 8008462:	f000 80d2 	beq.w	800860a <_printf_i+0x1c6>
 8008466:	2f58      	cmp	r7, #88	@ 0x58
 8008468:	f000 80b9 	beq.w	80085de <_printf_i+0x19a>
 800846c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008470:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008474:	e03a      	b.n	80084ec <_printf_i+0xa8>
 8008476:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800847a:	2b15      	cmp	r3, #21
 800847c:	d8f6      	bhi.n	800846c <_printf_i+0x28>
 800847e:	a101      	add	r1, pc, #4	@ (adr r1, 8008484 <_printf_i+0x40>)
 8008480:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008484:	080084dd 	.word	0x080084dd
 8008488:	080084f1 	.word	0x080084f1
 800848c:	0800846d 	.word	0x0800846d
 8008490:	0800846d 	.word	0x0800846d
 8008494:	0800846d 	.word	0x0800846d
 8008498:	0800846d 	.word	0x0800846d
 800849c:	080084f1 	.word	0x080084f1
 80084a0:	0800846d 	.word	0x0800846d
 80084a4:	0800846d 	.word	0x0800846d
 80084a8:	0800846d 	.word	0x0800846d
 80084ac:	0800846d 	.word	0x0800846d
 80084b0:	080085f1 	.word	0x080085f1
 80084b4:	0800851b 	.word	0x0800851b
 80084b8:	080085ab 	.word	0x080085ab
 80084bc:	0800846d 	.word	0x0800846d
 80084c0:	0800846d 	.word	0x0800846d
 80084c4:	08008613 	.word	0x08008613
 80084c8:	0800846d 	.word	0x0800846d
 80084cc:	0800851b 	.word	0x0800851b
 80084d0:	0800846d 	.word	0x0800846d
 80084d4:	0800846d 	.word	0x0800846d
 80084d8:	080085b3 	.word	0x080085b3
 80084dc:	6833      	ldr	r3, [r6, #0]
 80084de:	1d1a      	adds	r2, r3, #4
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	6032      	str	r2, [r6, #0]
 80084e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80084e8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80084ec:	2301      	movs	r3, #1
 80084ee:	e09d      	b.n	800862c <_printf_i+0x1e8>
 80084f0:	6833      	ldr	r3, [r6, #0]
 80084f2:	6820      	ldr	r0, [r4, #0]
 80084f4:	1d19      	adds	r1, r3, #4
 80084f6:	6031      	str	r1, [r6, #0]
 80084f8:	0606      	lsls	r6, r0, #24
 80084fa:	d501      	bpl.n	8008500 <_printf_i+0xbc>
 80084fc:	681d      	ldr	r5, [r3, #0]
 80084fe:	e003      	b.n	8008508 <_printf_i+0xc4>
 8008500:	0645      	lsls	r5, r0, #25
 8008502:	d5fb      	bpl.n	80084fc <_printf_i+0xb8>
 8008504:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008508:	2d00      	cmp	r5, #0
 800850a:	da03      	bge.n	8008514 <_printf_i+0xd0>
 800850c:	232d      	movs	r3, #45	@ 0x2d
 800850e:	426d      	negs	r5, r5
 8008510:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008514:	4859      	ldr	r0, [pc, #356]	@ (800867c <_printf_i+0x238>)
 8008516:	230a      	movs	r3, #10
 8008518:	e011      	b.n	800853e <_printf_i+0xfa>
 800851a:	6821      	ldr	r1, [r4, #0]
 800851c:	6833      	ldr	r3, [r6, #0]
 800851e:	0608      	lsls	r0, r1, #24
 8008520:	f853 5b04 	ldr.w	r5, [r3], #4
 8008524:	d402      	bmi.n	800852c <_printf_i+0xe8>
 8008526:	0649      	lsls	r1, r1, #25
 8008528:	bf48      	it	mi
 800852a:	b2ad      	uxthmi	r5, r5
 800852c:	2f6f      	cmp	r7, #111	@ 0x6f
 800852e:	4853      	ldr	r0, [pc, #332]	@ (800867c <_printf_i+0x238>)
 8008530:	6033      	str	r3, [r6, #0]
 8008532:	bf14      	ite	ne
 8008534:	230a      	movne	r3, #10
 8008536:	2308      	moveq	r3, #8
 8008538:	2100      	movs	r1, #0
 800853a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800853e:	6866      	ldr	r6, [r4, #4]
 8008540:	60a6      	str	r6, [r4, #8]
 8008542:	2e00      	cmp	r6, #0
 8008544:	bfa2      	ittt	ge
 8008546:	6821      	ldrge	r1, [r4, #0]
 8008548:	f021 0104 	bicge.w	r1, r1, #4
 800854c:	6021      	strge	r1, [r4, #0]
 800854e:	b90d      	cbnz	r5, 8008554 <_printf_i+0x110>
 8008550:	2e00      	cmp	r6, #0
 8008552:	d04b      	beq.n	80085ec <_printf_i+0x1a8>
 8008554:	4616      	mov	r6, r2
 8008556:	fbb5 f1f3 	udiv	r1, r5, r3
 800855a:	fb03 5711 	mls	r7, r3, r1, r5
 800855e:	5dc7      	ldrb	r7, [r0, r7]
 8008560:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008564:	462f      	mov	r7, r5
 8008566:	42bb      	cmp	r3, r7
 8008568:	460d      	mov	r5, r1
 800856a:	d9f4      	bls.n	8008556 <_printf_i+0x112>
 800856c:	2b08      	cmp	r3, #8
 800856e:	d10b      	bne.n	8008588 <_printf_i+0x144>
 8008570:	6823      	ldr	r3, [r4, #0]
 8008572:	07df      	lsls	r7, r3, #31
 8008574:	d508      	bpl.n	8008588 <_printf_i+0x144>
 8008576:	6923      	ldr	r3, [r4, #16]
 8008578:	6861      	ldr	r1, [r4, #4]
 800857a:	4299      	cmp	r1, r3
 800857c:	bfde      	ittt	le
 800857e:	2330      	movle	r3, #48	@ 0x30
 8008580:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008584:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008588:	1b92      	subs	r2, r2, r6
 800858a:	6122      	str	r2, [r4, #16]
 800858c:	f8cd a000 	str.w	sl, [sp]
 8008590:	464b      	mov	r3, r9
 8008592:	aa03      	add	r2, sp, #12
 8008594:	4621      	mov	r1, r4
 8008596:	4640      	mov	r0, r8
 8008598:	f7ff fee6 	bl	8008368 <_printf_common>
 800859c:	3001      	adds	r0, #1
 800859e:	d14a      	bne.n	8008636 <_printf_i+0x1f2>
 80085a0:	f04f 30ff 	mov.w	r0, #4294967295
 80085a4:	b004      	add	sp, #16
 80085a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085aa:	6823      	ldr	r3, [r4, #0]
 80085ac:	f043 0320 	orr.w	r3, r3, #32
 80085b0:	6023      	str	r3, [r4, #0]
 80085b2:	4833      	ldr	r0, [pc, #204]	@ (8008680 <_printf_i+0x23c>)
 80085b4:	2778      	movs	r7, #120	@ 0x78
 80085b6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80085ba:	6823      	ldr	r3, [r4, #0]
 80085bc:	6831      	ldr	r1, [r6, #0]
 80085be:	061f      	lsls	r7, r3, #24
 80085c0:	f851 5b04 	ldr.w	r5, [r1], #4
 80085c4:	d402      	bmi.n	80085cc <_printf_i+0x188>
 80085c6:	065f      	lsls	r7, r3, #25
 80085c8:	bf48      	it	mi
 80085ca:	b2ad      	uxthmi	r5, r5
 80085cc:	6031      	str	r1, [r6, #0]
 80085ce:	07d9      	lsls	r1, r3, #31
 80085d0:	bf44      	itt	mi
 80085d2:	f043 0320 	orrmi.w	r3, r3, #32
 80085d6:	6023      	strmi	r3, [r4, #0]
 80085d8:	b11d      	cbz	r5, 80085e2 <_printf_i+0x19e>
 80085da:	2310      	movs	r3, #16
 80085dc:	e7ac      	b.n	8008538 <_printf_i+0xf4>
 80085de:	4827      	ldr	r0, [pc, #156]	@ (800867c <_printf_i+0x238>)
 80085e0:	e7e9      	b.n	80085b6 <_printf_i+0x172>
 80085e2:	6823      	ldr	r3, [r4, #0]
 80085e4:	f023 0320 	bic.w	r3, r3, #32
 80085e8:	6023      	str	r3, [r4, #0]
 80085ea:	e7f6      	b.n	80085da <_printf_i+0x196>
 80085ec:	4616      	mov	r6, r2
 80085ee:	e7bd      	b.n	800856c <_printf_i+0x128>
 80085f0:	6833      	ldr	r3, [r6, #0]
 80085f2:	6825      	ldr	r5, [r4, #0]
 80085f4:	6961      	ldr	r1, [r4, #20]
 80085f6:	1d18      	adds	r0, r3, #4
 80085f8:	6030      	str	r0, [r6, #0]
 80085fa:	062e      	lsls	r6, r5, #24
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	d501      	bpl.n	8008604 <_printf_i+0x1c0>
 8008600:	6019      	str	r1, [r3, #0]
 8008602:	e002      	b.n	800860a <_printf_i+0x1c6>
 8008604:	0668      	lsls	r0, r5, #25
 8008606:	d5fb      	bpl.n	8008600 <_printf_i+0x1bc>
 8008608:	8019      	strh	r1, [r3, #0]
 800860a:	2300      	movs	r3, #0
 800860c:	6123      	str	r3, [r4, #16]
 800860e:	4616      	mov	r6, r2
 8008610:	e7bc      	b.n	800858c <_printf_i+0x148>
 8008612:	6833      	ldr	r3, [r6, #0]
 8008614:	1d1a      	adds	r2, r3, #4
 8008616:	6032      	str	r2, [r6, #0]
 8008618:	681e      	ldr	r6, [r3, #0]
 800861a:	6862      	ldr	r2, [r4, #4]
 800861c:	2100      	movs	r1, #0
 800861e:	4630      	mov	r0, r6
 8008620:	f7f7 fdd6 	bl	80001d0 <memchr>
 8008624:	b108      	cbz	r0, 800862a <_printf_i+0x1e6>
 8008626:	1b80      	subs	r0, r0, r6
 8008628:	6060      	str	r0, [r4, #4]
 800862a:	6863      	ldr	r3, [r4, #4]
 800862c:	6123      	str	r3, [r4, #16]
 800862e:	2300      	movs	r3, #0
 8008630:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008634:	e7aa      	b.n	800858c <_printf_i+0x148>
 8008636:	6923      	ldr	r3, [r4, #16]
 8008638:	4632      	mov	r2, r6
 800863a:	4649      	mov	r1, r9
 800863c:	4640      	mov	r0, r8
 800863e:	47d0      	blx	sl
 8008640:	3001      	adds	r0, #1
 8008642:	d0ad      	beq.n	80085a0 <_printf_i+0x15c>
 8008644:	6823      	ldr	r3, [r4, #0]
 8008646:	079b      	lsls	r3, r3, #30
 8008648:	d413      	bmi.n	8008672 <_printf_i+0x22e>
 800864a:	68e0      	ldr	r0, [r4, #12]
 800864c:	9b03      	ldr	r3, [sp, #12]
 800864e:	4298      	cmp	r0, r3
 8008650:	bfb8      	it	lt
 8008652:	4618      	movlt	r0, r3
 8008654:	e7a6      	b.n	80085a4 <_printf_i+0x160>
 8008656:	2301      	movs	r3, #1
 8008658:	4632      	mov	r2, r6
 800865a:	4649      	mov	r1, r9
 800865c:	4640      	mov	r0, r8
 800865e:	47d0      	blx	sl
 8008660:	3001      	adds	r0, #1
 8008662:	d09d      	beq.n	80085a0 <_printf_i+0x15c>
 8008664:	3501      	adds	r5, #1
 8008666:	68e3      	ldr	r3, [r4, #12]
 8008668:	9903      	ldr	r1, [sp, #12]
 800866a:	1a5b      	subs	r3, r3, r1
 800866c:	42ab      	cmp	r3, r5
 800866e:	dcf2      	bgt.n	8008656 <_printf_i+0x212>
 8008670:	e7eb      	b.n	800864a <_printf_i+0x206>
 8008672:	2500      	movs	r5, #0
 8008674:	f104 0619 	add.w	r6, r4, #25
 8008678:	e7f5      	b.n	8008666 <_printf_i+0x222>
 800867a:	bf00      	nop
 800867c:	0800a9f6 	.word	0x0800a9f6
 8008680:	0800aa07 	.word	0x0800aa07

08008684 <std>:
 8008684:	2300      	movs	r3, #0
 8008686:	b510      	push	{r4, lr}
 8008688:	4604      	mov	r4, r0
 800868a:	e9c0 3300 	strd	r3, r3, [r0]
 800868e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008692:	6083      	str	r3, [r0, #8]
 8008694:	8181      	strh	r1, [r0, #12]
 8008696:	6643      	str	r3, [r0, #100]	@ 0x64
 8008698:	81c2      	strh	r2, [r0, #14]
 800869a:	6183      	str	r3, [r0, #24]
 800869c:	4619      	mov	r1, r3
 800869e:	2208      	movs	r2, #8
 80086a0:	305c      	adds	r0, #92	@ 0x5c
 80086a2:	f000 f9f9 	bl	8008a98 <memset>
 80086a6:	4b0d      	ldr	r3, [pc, #52]	@ (80086dc <std+0x58>)
 80086a8:	6263      	str	r3, [r4, #36]	@ 0x24
 80086aa:	4b0d      	ldr	r3, [pc, #52]	@ (80086e0 <std+0x5c>)
 80086ac:	62a3      	str	r3, [r4, #40]	@ 0x28
 80086ae:	4b0d      	ldr	r3, [pc, #52]	@ (80086e4 <std+0x60>)
 80086b0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80086b2:	4b0d      	ldr	r3, [pc, #52]	@ (80086e8 <std+0x64>)
 80086b4:	6323      	str	r3, [r4, #48]	@ 0x30
 80086b6:	4b0d      	ldr	r3, [pc, #52]	@ (80086ec <std+0x68>)
 80086b8:	6224      	str	r4, [r4, #32]
 80086ba:	429c      	cmp	r4, r3
 80086bc:	d006      	beq.n	80086cc <std+0x48>
 80086be:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80086c2:	4294      	cmp	r4, r2
 80086c4:	d002      	beq.n	80086cc <std+0x48>
 80086c6:	33d0      	adds	r3, #208	@ 0xd0
 80086c8:	429c      	cmp	r4, r3
 80086ca:	d105      	bne.n	80086d8 <std+0x54>
 80086cc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80086d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80086d4:	f000 ba5c 	b.w	8008b90 <__retarget_lock_init_recursive>
 80086d8:	bd10      	pop	{r4, pc}
 80086da:	bf00      	nop
 80086dc:	080088e9 	.word	0x080088e9
 80086e0:	0800890b 	.word	0x0800890b
 80086e4:	08008943 	.word	0x08008943
 80086e8:	08008967 	.word	0x08008967
 80086ec:	20000584 	.word	0x20000584

080086f0 <stdio_exit_handler>:
 80086f0:	4a02      	ldr	r2, [pc, #8]	@ (80086fc <stdio_exit_handler+0xc>)
 80086f2:	4903      	ldr	r1, [pc, #12]	@ (8008700 <stdio_exit_handler+0x10>)
 80086f4:	4803      	ldr	r0, [pc, #12]	@ (8008704 <stdio_exit_handler+0x14>)
 80086f6:	f000 b869 	b.w	80087cc <_fwalk_sglue>
 80086fa:	bf00      	nop
 80086fc:	2000000c 	.word	0x2000000c
 8008700:	0800a4c1 	.word	0x0800a4c1
 8008704:	2000001c 	.word	0x2000001c

08008708 <cleanup_stdio>:
 8008708:	6841      	ldr	r1, [r0, #4]
 800870a:	4b0c      	ldr	r3, [pc, #48]	@ (800873c <cleanup_stdio+0x34>)
 800870c:	4299      	cmp	r1, r3
 800870e:	b510      	push	{r4, lr}
 8008710:	4604      	mov	r4, r0
 8008712:	d001      	beq.n	8008718 <cleanup_stdio+0x10>
 8008714:	f001 fed4 	bl	800a4c0 <_fflush_r>
 8008718:	68a1      	ldr	r1, [r4, #8]
 800871a:	4b09      	ldr	r3, [pc, #36]	@ (8008740 <cleanup_stdio+0x38>)
 800871c:	4299      	cmp	r1, r3
 800871e:	d002      	beq.n	8008726 <cleanup_stdio+0x1e>
 8008720:	4620      	mov	r0, r4
 8008722:	f001 fecd 	bl	800a4c0 <_fflush_r>
 8008726:	68e1      	ldr	r1, [r4, #12]
 8008728:	4b06      	ldr	r3, [pc, #24]	@ (8008744 <cleanup_stdio+0x3c>)
 800872a:	4299      	cmp	r1, r3
 800872c:	d004      	beq.n	8008738 <cleanup_stdio+0x30>
 800872e:	4620      	mov	r0, r4
 8008730:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008734:	f001 bec4 	b.w	800a4c0 <_fflush_r>
 8008738:	bd10      	pop	{r4, pc}
 800873a:	bf00      	nop
 800873c:	20000584 	.word	0x20000584
 8008740:	200005ec 	.word	0x200005ec
 8008744:	20000654 	.word	0x20000654

08008748 <global_stdio_init.part.0>:
 8008748:	b510      	push	{r4, lr}
 800874a:	4b0b      	ldr	r3, [pc, #44]	@ (8008778 <global_stdio_init.part.0+0x30>)
 800874c:	4c0b      	ldr	r4, [pc, #44]	@ (800877c <global_stdio_init.part.0+0x34>)
 800874e:	4a0c      	ldr	r2, [pc, #48]	@ (8008780 <global_stdio_init.part.0+0x38>)
 8008750:	601a      	str	r2, [r3, #0]
 8008752:	4620      	mov	r0, r4
 8008754:	2200      	movs	r2, #0
 8008756:	2104      	movs	r1, #4
 8008758:	f7ff ff94 	bl	8008684 <std>
 800875c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008760:	2201      	movs	r2, #1
 8008762:	2109      	movs	r1, #9
 8008764:	f7ff ff8e 	bl	8008684 <std>
 8008768:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800876c:	2202      	movs	r2, #2
 800876e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008772:	2112      	movs	r1, #18
 8008774:	f7ff bf86 	b.w	8008684 <std>
 8008778:	200006bc 	.word	0x200006bc
 800877c:	20000584 	.word	0x20000584
 8008780:	080086f1 	.word	0x080086f1

08008784 <__sfp_lock_acquire>:
 8008784:	4801      	ldr	r0, [pc, #4]	@ (800878c <__sfp_lock_acquire+0x8>)
 8008786:	f000 ba04 	b.w	8008b92 <__retarget_lock_acquire_recursive>
 800878a:	bf00      	nop
 800878c:	200006c5 	.word	0x200006c5

08008790 <__sfp_lock_release>:
 8008790:	4801      	ldr	r0, [pc, #4]	@ (8008798 <__sfp_lock_release+0x8>)
 8008792:	f000 b9ff 	b.w	8008b94 <__retarget_lock_release_recursive>
 8008796:	bf00      	nop
 8008798:	200006c5 	.word	0x200006c5

0800879c <__sinit>:
 800879c:	b510      	push	{r4, lr}
 800879e:	4604      	mov	r4, r0
 80087a0:	f7ff fff0 	bl	8008784 <__sfp_lock_acquire>
 80087a4:	6a23      	ldr	r3, [r4, #32]
 80087a6:	b11b      	cbz	r3, 80087b0 <__sinit+0x14>
 80087a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80087ac:	f7ff bff0 	b.w	8008790 <__sfp_lock_release>
 80087b0:	4b04      	ldr	r3, [pc, #16]	@ (80087c4 <__sinit+0x28>)
 80087b2:	6223      	str	r3, [r4, #32]
 80087b4:	4b04      	ldr	r3, [pc, #16]	@ (80087c8 <__sinit+0x2c>)
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d1f5      	bne.n	80087a8 <__sinit+0xc>
 80087bc:	f7ff ffc4 	bl	8008748 <global_stdio_init.part.0>
 80087c0:	e7f2      	b.n	80087a8 <__sinit+0xc>
 80087c2:	bf00      	nop
 80087c4:	08008709 	.word	0x08008709
 80087c8:	200006bc 	.word	0x200006bc

080087cc <_fwalk_sglue>:
 80087cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80087d0:	4607      	mov	r7, r0
 80087d2:	4688      	mov	r8, r1
 80087d4:	4614      	mov	r4, r2
 80087d6:	2600      	movs	r6, #0
 80087d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80087dc:	f1b9 0901 	subs.w	r9, r9, #1
 80087e0:	d505      	bpl.n	80087ee <_fwalk_sglue+0x22>
 80087e2:	6824      	ldr	r4, [r4, #0]
 80087e4:	2c00      	cmp	r4, #0
 80087e6:	d1f7      	bne.n	80087d8 <_fwalk_sglue+0xc>
 80087e8:	4630      	mov	r0, r6
 80087ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80087ee:	89ab      	ldrh	r3, [r5, #12]
 80087f0:	2b01      	cmp	r3, #1
 80087f2:	d907      	bls.n	8008804 <_fwalk_sglue+0x38>
 80087f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80087f8:	3301      	adds	r3, #1
 80087fa:	d003      	beq.n	8008804 <_fwalk_sglue+0x38>
 80087fc:	4629      	mov	r1, r5
 80087fe:	4638      	mov	r0, r7
 8008800:	47c0      	blx	r8
 8008802:	4306      	orrs	r6, r0
 8008804:	3568      	adds	r5, #104	@ 0x68
 8008806:	e7e9      	b.n	80087dc <_fwalk_sglue+0x10>

08008808 <iprintf>:
 8008808:	b40f      	push	{r0, r1, r2, r3}
 800880a:	b507      	push	{r0, r1, r2, lr}
 800880c:	4906      	ldr	r1, [pc, #24]	@ (8008828 <iprintf+0x20>)
 800880e:	ab04      	add	r3, sp, #16
 8008810:	6808      	ldr	r0, [r1, #0]
 8008812:	f853 2b04 	ldr.w	r2, [r3], #4
 8008816:	6881      	ldr	r1, [r0, #8]
 8008818:	9301      	str	r3, [sp, #4]
 800881a:	f001 fcb5 	bl	800a188 <_vfiprintf_r>
 800881e:	b003      	add	sp, #12
 8008820:	f85d eb04 	ldr.w	lr, [sp], #4
 8008824:	b004      	add	sp, #16
 8008826:	4770      	bx	lr
 8008828:	20000018 	.word	0x20000018

0800882c <_puts_r>:
 800882c:	6a03      	ldr	r3, [r0, #32]
 800882e:	b570      	push	{r4, r5, r6, lr}
 8008830:	6884      	ldr	r4, [r0, #8]
 8008832:	4605      	mov	r5, r0
 8008834:	460e      	mov	r6, r1
 8008836:	b90b      	cbnz	r3, 800883c <_puts_r+0x10>
 8008838:	f7ff ffb0 	bl	800879c <__sinit>
 800883c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800883e:	07db      	lsls	r3, r3, #31
 8008840:	d405      	bmi.n	800884e <_puts_r+0x22>
 8008842:	89a3      	ldrh	r3, [r4, #12]
 8008844:	0598      	lsls	r0, r3, #22
 8008846:	d402      	bmi.n	800884e <_puts_r+0x22>
 8008848:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800884a:	f000 f9a2 	bl	8008b92 <__retarget_lock_acquire_recursive>
 800884e:	89a3      	ldrh	r3, [r4, #12]
 8008850:	0719      	lsls	r1, r3, #28
 8008852:	d502      	bpl.n	800885a <_puts_r+0x2e>
 8008854:	6923      	ldr	r3, [r4, #16]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d135      	bne.n	80088c6 <_puts_r+0x9a>
 800885a:	4621      	mov	r1, r4
 800885c:	4628      	mov	r0, r5
 800885e:	f000 f8c5 	bl	80089ec <__swsetup_r>
 8008862:	b380      	cbz	r0, 80088c6 <_puts_r+0x9a>
 8008864:	f04f 35ff 	mov.w	r5, #4294967295
 8008868:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800886a:	07da      	lsls	r2, r3, #31
 800886c:	d405      	bmi.n	800887a <_puts_r+0x4e>
 800886e:	89a3      	ldrh	r3, [r4, #12]
 8008870:	059b      	lsls	r3, r3, #22
 8008872:	d402      	bmi.n	800887a <_puts_r+0x4e>
 8008874:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008876:	f000 f98d 	bl	8008b94 <__retarget_lock_release_recursive>
 800887a:	4628      	mov	r0, r5
 800887c:	bd70      	pop	{r4, r5, r6, pc}
 800887e:	2b00      	cmp	r3, #0
 8008880:	da04      	bge.n	800888c <_puts_r+0x60>
 8008882:	69a2      	ldr	r2, [r4, #24]
 8008884:	429a      	cmp	r2, r3
 8008886:	dc17      	bgt.n	80088b8 <_puts_r+0x8c>
 8008888:	290a      	cmp	r1, #10
 800888a:	d015      	beq.n	80088b8 <_puts_r+0x8c>
 800888c:	6823      	ldr	r3, [r4, #0]
 800888e:	1c5a      	adds	r2, r3, #1
 8008890:	6022      	str	r2, [r4, #0]
 8008892:	7019      	strb	r1, [r3, #0]
 8008894:	68a3      	ldr	r3, [r4, #8]
 8008896:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800889a:	3b01      	subs	r3, #1
 800889c:	60a3      	str	r3, [r4, #8]
 800889e:	2900      	cmp	r1, #0
 80088a0:	d1ed      	bne.n	800887e <_puts_r+0x52>
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	da11      	bge.n	80088ca <_puts_r+0x9e>
 80088a6:	4622      	mov	r2, r4
 80088a8:	210a      	movs	r1, #10
 80088aa:	4628      	mov	r0, r5
 80088ac:	f000 f85f 	bl	800896e <__swbuf_r>
 80088b0:	3001      	adds	r0, #1
 80088b2:	d0d7      	beq.n	8008864 <_puts_r+0x38>
 80088b4:	250a      	movs	r5, #10
 80088b6:	e7d7      	b.n	8008868 <_puts_r+0x3c>
 80088b8:	4622      	mov	r2, r4
 80088ba:	4628      	mov	r0, r5
 80088bc:	f000 f857 	bl	800896e <__swbuf_r>
 80088c0:	3001      	adds	r0, #1
 80088c2:	d1e7      	bne.n	8008894 <_puts_r+0x68>
 80088c4:	e7ce      	b.n	8008864 <_puts_r+0x38>
 80088c6:	3e01      	subs	r6, #1
 80088c8:	e7e4      	b.n	8008894 <_puts_r+0x68>
 80088ca:	6823      	ldr	r3, [r4, #0]
 80088cc:	1c5a      	adds	r2, r3, #1
 80088ce:	6022      	str	r2, [r4, #0]
 80088d0:	220a      	movs	r2, #10
 80088d2:	701a      	strb	r2, [r3, #0]
 80088d4:	e7ee      	b.n	80088b4 <_puts_r+0x88>
	...

080088d8 <puts>:
 80088d8:	4b02      	ldr	r3, [pc, #8]	@ (80088e4 <puts+0xc>)
 80088da:	4601      	mov	r1, r0
 80088dc:	6818      	ldr	r0, [r3, #0]
 80088de:	f7ff bfa5 	b.w	800882c <_puts_r>
 80088e2:	bf00      	nop
 80088e4:	20000018 	.word	0x20000018

080088e8 <__sread>:
 80088e8:	b510      	push	{r4, lr}
 80088ea:	460c      	mov	r4, r1
 80088ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088f0:	f000 f900 	bl	8008af4 <_read_r>
 80088f4:	2800      	cmp	r0, #0
 80088f6:	bfab      	itete	ge
 80088f8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80088fa:	89a3      	ldrhlt	r3, [r4, #12]
 80088fc:	181b      	addge	r3, r3, r0
 80088fe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008902:	bfac      	ite	ge
 8008904:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008906:	81a3      	strhlt	r3, [r4, #12]
 8008908:	bd10      	pop	{r4, pc}

0800890a <__swrite>:
 800890a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800890e:	461f      	mov	r7, r3
 8008910:	898b      	ldrh	r3, [r1, #12]
 8008912:	05db      	lsls	r3, r3, #23
 8008914:	4605      	mov	r5, r0
 8008916:	460c      	mov	r4, r1
 8008918:	4616      	mov	r6, r2
 800891a:	d505      	bpl.n	8008928 <__swrite+0x1e>
 800891c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008920:	2302      	movs	r3, #2
 8008922:	2200      	movs	r2, #0
 8008924:	f000 f8d4 	bl	8008ad0 <_lseek_r>
 8008928:	89a3      	ldrh	r3, [r4, #12]
 800892a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800892e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008932:	81a3      	strh	r3, [r4, #12]
 8008934:	4632      	mov	r2, r6
 8008936:	463b      	mov	r3, r7
 8008938:	4628      	mov	r0, r5
 800893a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800893e:	f000 b8eb 	b.w	8008b18 <_write_r>

08008942 <__sseek>:
 8008942:	b510      	push	{r4, lr}
 8008944:	460c      	mov	r4, r1
 8008946:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800894a:	f000 f8c1 	bl	8008ad0 <_lseek_r>
 800894e:	1c43      	adds	r3, r0, #1
 8008950:	89a3      	ldrh	r3, [r4, #12]
 8008952:	bf15      	itete	ne
 8008954:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008956:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800895a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800895e:	81a3      	strheq	r3, [r4, #12]
 8008960:	bf18      	it	ne
 8008962:	81a3      	strhne	r3, [r4, #12]
 8008964:	bd10      	pop	{r4, pc}

08008966 <__sclose>:
 8008966:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800896a:	f000 b8a1 	b.w	8008ab0 <_close_r>

0800896e <__swbuf_r>:
 800896e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008970:	460e      	mov	r6, r1
 8008972:	4614      	mov	r4, r2
 8008974:	4605      	mov	r5, r0
 8008976:	b118      	cbz	r0, 8008980 <__swbuf_r+0x12>
 8008978:	6a03      	ldr	r3, [r0, #32]
 800897a:	b90b      	cbnz	r3, 8008980 <__swbuf_r+0x12>
 800897c:	f7ff ff0e 	bl	800879c <__sinit>
 8008980:	69a3      	ldr	r3, [r4, #24]
 8008982:	60a3      	str	r3, [r4, #8]
 8008984:	89a3      	ldrh	r3, [r4, #12]
 8008986:	071a      	lsls	r2, r3, #28
 8008988:	d501      	bpl.n	800898e <__swbuf_r+0x20>
 800898a:	6923      	ldr	r3, [r4, #16]
 800898c:	b943      	cbnz	r3, 80089a0 <__swbuf_r+0x32>
 800898e:	4621      	mov	r1, r4
 8008990:	4628      	mov	r0, r5
 8008992:	f000 f82b 	bl	80089ec <__swsetup_r>
 8008996:	b118      	cbz	r0, 80089a0 <__swbuf_r+0x32>
 8008998:	f04f 37ff 	mov.w	r7, #4294967295
 800899c:	4638      	mov	r0, r7
 800899e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80089a0:	6823      	ldr	r3, [r4, #0]
 80089a2:	6922      	ldr	r2, [r4, #16]
 80089a4:	1a98      	subs	r0, r3, r2
 80089a6:	6963      	ldr	r3, [r4, #20]
 80089a8:	b2f6      	uxtb	r6, r6
 80089aa:	4283      	cmp	r3, r0
 80089ac:	4637      	mov	r7, r6
 80089ae:	dc05      	bgt.n	80089bc <__swbuf_r+0x4e>
 80089b0:	4621      	mov	r1, r4
 80089b2:	4628      	mov	r0, r5
 80089b4:	f001 fd84 	bl	800a4c0 <_fflush_r>
 80089b8:	2800      	cmp	r0, #0
 80089ba:	d1ed      	bne.n	8008998 <__swbuf_r+0x2a>
 80089bc:	68a3      	ldr	r3, [r4, #8]
 80089be:	3b01      	subs	r3, #1
 80089c0:	60a3      	str	r3, [r4, #8]
 80089c2:	6823      	ldr	r3, [r4, #0]
 80089c4:	1c5a      	adds	r2, r3, #1
 80089c6:	6022      	str	r2, [r4, #0]
 80089c8:	701e      	strb	r6, [r3, #0]
 80089ca:	6962      	ldr	r2, [r4, #20]
 80089cc:	1c43      	adds	r3, r0, #1
 80089ce:	429a      	cmp	r2, r3
 80089d0:	d004      	beq.n	80089dc <__swbuf_r+0x6e>
 80089d2:	89a3      	ldrh	r3, [r4, #12]
 80089d4:	07db      	lsls	r3, r3, #31
 80089d6:	d5e1      	bpl.n	800899c <__swbuf_r+0x2e>
 80089d8:	2e0a      	cmp	r6, #10
 80089da:	d1df      	bne.n	800899c <__swbuf_r+0x2e>
 80089dc:	4621      	mov	r1, r4
 80089de:	4628      	mov	r0, r5
 80089e0:	f001 fd6e 	bl	800a4c0 <_fflush_r>
 80089e4:	2800      	cmp	r0, #0
 80089e6:	d0d9      	beq.n	800899c <__swbuf_r+0x2e>
 80089e8:	e7d6      	b.n	8008998 <__swbuf_r+0x2a>
	...

080089ec <__swsetup_r>:
 80089ec:	b538      	push	{r3, r4, r5, lr}
 80089ee:	4b29      	ldr	r3, [pc, #164]	@ (8008a94 <__swsetup_r+0xa8>)
 80089f0:	4605      	mov	r5, r0
 80089f2:	6818      	ldr	r0, [r3, #0]
 80089f4:	460c      	mov	r4, r1
 80089f6:	b118      	cbz	r0, 8008a00 <__swsetup_r+0x14>
 80089f8:	6a03      	ldr	r3, [r0, #32]
 80089fa:	b90b      	cbnz	r3, 8008a00 <__swsetup_r+0x14>
 80089fc:	f7ff fece 	bl	800879c <__sinit>
 8008a00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a04:	0719      	lsls	r1, r3, #28
 8008a06:	d422      	bmi.n	8008a4e <__swsetup_r+0x62>
 8008a08:	06da      	lsls	r2, r3, #27
 8008a0a:	d407      	bmi.n	8008a1c <__swsetup_r+0x30>
 8008a0c:	2209      	movs	r2, #9
 8008a0e:	602a      	str	r2, [r5, #0]
 8008a10:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a14:	81a3      	strh	r3, [r4, #12]
 8008a16:	f04f 30ff 	mov.w	r0, #4294967295
 8008a1a:	e033      	b.n	8008a84 <__swsetup_r+0x98>
 8008a1c:	0758      	lsls	r0, r3, #29
 8008a1e:	d512      	bpl.n	8008a46 <__swsetup_r+0x5a>
 8008a20:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008a22:	b141      	cbz	r1, 8008a36 <__swsetup_r+0x4a>
 8008a24:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008a28:	4299      	cmp	r1, r3
 8008a2a:	d002      	beq.n	8008a32 <__swsetup_r+0x46>
 8008a2c:	4628      	mov	r0, r5
 8008a2e:	f000 feff 	bl	8009830 <_free_r>
 8008a32:	2300      	movs	r3, #0
 8008a34:	6363      	str	r3, [r4, #52]	@ 0x34
 8008a36:	89a3      	ldrh	r3, [r4, #12]
 8008a38:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008a3c:	81a3      	strh	r3, [r4, #12]
 8008a3e:	2300      	movs	r3, #0
 8008a40:	6063      	str	r3, [r4, #4]
 8008a42:	6923      	ldr	r3, [r4, #16]
 8008a44:	6023      	str	r3, [r4, #0]
 8008a46:	89a3      	ldrh	r3, [r4, #12]
 8008a48:	f043 0308 	orr.w	r3, r3, #8
 8008a4c:	81a3      	strh	r3, [r4, #12]
 8008a4e:	6923      	ldr	r3, [r4, #16]
 8008a50:	b94b      	cbnz	r3, 8008a66 <__swsetup_r+0x7a>
 8008a52:	89a3      	ldrh	r3, [r4, #12]
 8008a54:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008a58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a5c:	d003      	beq.n	8008a66 <__swsetup_r+0x7a>
 8008a5e:	4621      	mov	r1, r4
 8008a60:	4628      	mov	r0, r5
 8008a62:	f001 fd7b 	bl	800a55c <__smakebuf_r>
 8008a66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a6a:	f013 0201 	ands.w	r2, r3, #1
 8008a6e:	d00a      	beq.n	8008a86 <__swsetup_r+0x9a>
 8008a70:	2200      	movs	r2, #0
 8008a72:	60a2      	str	r2, [r4, #8]
 8008a74:	6962      	ldr	r2, [r4, #20]
 8008a76:	4252      	negs	r2, r2
 8008a78:	61a2      	str	r2, [r4, #24]
 8008a7a:	6922      	ldr	r2, [r4, #16]
 8008a7c:	b942      	cbnz	r2, 8008a90 <__swsetup_r+0xa4>
 8008a7e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008a82:	d1c5      	bne.n	8008a10 <__swsetup_r+0x24>
 8008a84:	bd38      	pop	{r3, r4, r5, pc}
 8008a86:	0799      	lsls	r1, r3, #30
 8008a88:	bf58      	it	pl
 8008a8a:	6962      	ldrpl	r2, [r4, #20]
 8008a8c:	60a2      	str	r2, [r4, #8]
 8008a8e:	e7f4      	b.n	8008a7a <__swsetup_r+0x8e>
 8008a90:	2000      	movs	r0, #0
 8008a92:	e7f7      	b.n	8008a84 <__swsetup_r+0x98>
 8008a94:	20000018 	.word	0x20000018

08008a98 <memset>:
 8008a98:	4402      	add	r2, r0
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	4293      	cmp	r3, r2
 8008a9e:	d100      	bne.n	8008aa2 <memset+0xa>
 8008aa0:	4770      	bx	lr
 8008aa2:	f803 1b01 	strb.w	r1, [r3], #1
 8008aa6:	e7f9      	b.n	8008a9c <memset+0x4>

08008aa8 <_localeconv_r>:
 8008aa8:	4800      	ldr	r0, [pc, #0]	@ (8008aac <_localeconv_r+0x4>)
 8008aaa:	4770      	bx	lr
 8008aac:	20000158 	.word	0x20000158

08008ab0 <_close_r>:
 8008ab0:	b538      	push	{r3, r4, r5, lr}
 8008ab2:	4d06      	ldr	r5, [pc, #24]	@ (8008acc <_close_r+0x1c>)
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	4604      	mov	r4, r0
 8008ab8:	4608      	mov	r0, r1
 8008aba:	602b      	str	r3, [r5, #0]
 8008abc:	f7f9 fef2 	bl	80028a4 <_close>
 8008ac0:	1c43      	adds	r3, r0, #1
 8008ac2:	d102      	bne.n	8008aca <_close_r+0x1a>
 8008ac4:	682b      	ldr	r3, [r5, #0]
 8008ac6:	b103      	cbz	r3, 8008aca <_close_r+0x1a>
 8008ac8:	6023      	str	r3, [r4, #0]
 8008aca:	bd38      	pop	{r3, r4, r5, pc}
 8008acc:	200006c0 	.word	0x200006c0

08008ad0 <_lseek_r>:
 8008ad0:	b538      	push	{r3, r4, r5, lr}
 8008ad2:	4d07      	ldr	r5, [pc, #28]	@ (8008af0 <_lseek_r+0x20>)
 8008ad4:	4604      	mov	r4, r0
 8008ad6:	4608      	mov	r0, r1
 8008ad8:	4611      	mov	r1, r2
 8008ada:	2200      	movs	r2, #0
 8008adc:	602a      	str	r2, [r5, #0]
 8008ade:	461a      	mov	r2, r3
 8008ae0:	f7f9 ff07 	bl	80028f2 <_lseek>
 8008ae4:	1c43      	adds	r3, r0, #1
 8008ae6:	d102      	bne.n	8008aee <_lseek_r+0x1e>
 8008ae8:	682b      	ldr	r3, [r5, #0]
 8008aea:	b103      	cbz	r3, 8008aee <_lseek_r+0x1e>
 8008aec:	6023      	str	r3, [r4, #0]
 8008aee:	bd38      	pop	{r3, r4, r5, pc}
 8008af0:	200006c0 	.word	0x200006c0

08008af4 <_read_r>:
 8008af4:	b538      	push	{r3, r4, r5, lr}
 8008af6:	4d07      	ldr	r5, [pc, #28]	@ (8008b14 <_read_r+0x20>)
 8008af8:	4604      	mov	r4, r0
 8008afa:	4608      	mov	r0, r1
 8008afc:	4611      	mov	r1, r2
 8008afe:	2200      	movs	r2, #0
 8008b00:	602a      	str	r2, [r5, #0]
 8008b02:	461a      	mov	r2, r3
 8008b04:	f7f9 feb1 	bl	800286a <_read>
 8008b08:	1c43      	adds	r3, r0, #1
 8008b0a:	d102      	bne.n	8008b12 <_read_r+0x1e>
 8008b0c:	682b      	ldr	r3, [r5, #0]
 8008b0e:	b103      	cbz	r3, 8008b12 <_read_r+0x1e>
 8008b10:	6023      	str	r3, [r4, #0]
 8008b12:	bd38      	pop	{r3, r4, r5, pc}
 8008b14:	200006c0 	.word	0x200006c0

08008b18 <_write_r>:
 8008b18:	b538      	push	{r3, r4, r5, lr}
 8008b1a:	4d07      	ldr	r5, [pc, #28]	@ (8008b38 <_write_r+0x20>)
 8008b1c:	4604      	mov	r4, r0
 8008b1e:	4608      	mov	r0, r1
 8008b20:	4611      	mov	r1, r2
 8008b22:	2200      	movs	r2, #0
 8008b24:	602a      	str	r2, [r5, #0]
 8008b26:	461a      	mov	r2, r3
 8008b28:	f7f9 fb08 	bl	800213c <_write>
 8008b2c:	1c43      	adds	r3, r0, #1
 8008b2e:	d102      	bne.n	8008b36 <_write_r+0x1e>
 8008b30:	682b      	ldr	r3, [r5, #0]
 8008b32:	b103      	cbz	r3, 8008b36 <_write_r+0x1e>
 8008b34:	6023      	str	r3, [r4, #0]
 8008b36:	bd38      	pop	{r3, r4, r5, pc}
 8008b38:	200006c0 	.word	0x200006c0

08008b3c <__errno>:
 8008b3c:	4b01      	ldr	r3, [pc, #4]	@ (8008b44 <__errno+0x8>)
 8008b3e:	6818      	ldr	r0, [r3, #0]
 8008b40:	4770      	bx	lr
 8008b42:	bf00      	nop
 8008b44:	20000018 	.word	0x20000018

08008b48 <__libc_init_array>:
 8008b48:	b570      	push	{r4, r5, r6, lr}
 8008b4a:	4d0d      	ldr	r5, [pc, #52]	@ (8008b80 <__libc_init_array+0x38>)
 8008b4c:	4c0d      	ldr	r4, [pc, #52]	@ (8008b84 <__libc_init_array+0x3c>)
 8008b4e:	1b64      	subs	r4, r4, r5
 8008b50:	10a4      	asrs	r4, r4, #2
 8008b52:	2600      	movs	r6, #0
 8008b54:	42a6      	cmp	r6, r4
 8008b56:	d109      	bne.n	8008b6c <__libc_init_array+0x24>
 8008b58:	4d0b      	ldr	r5, [pc, #44]	@ (8008b88 <__libc_init_array+0x40>)
 8008b5a:	4c0c      	ldr	r4, [pc, #48]	@ (8008b8c <__libc_init_array+0x44>)
 8008b5c:	f001 fe80 	bl	800a860 <_init>
 8008b60:	1b64      	subs	r4, r4, r5
 8008b62:	10a4      	asrs	r4, r4, #2
 8008b64:	2600      	movs	r6, #0
 8008b66:	42a6      	cmp	r6, r4
 8008b68:	d105      	bne.n	8008b76 <__libc_init_array+0x2e>
 8008b6a:	bd70      	pop	{r4, r5, r6, pc}
 8008b6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b70:	4798      	blx	r3
 8008b72:	3601      	adds	r6, #1
 8008b74:	e7ee      	b.n	8008b54 <__libc_init_array+0xc>
 8008b76:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b7a:	4798      	blx	r3
 8008b7c:	3601      	adds	r6, #1
 8008b7e:	e7f2      	b.n	8008b66 <__libc_init_array+0x1e>
 8008b80:	0800ad60 	.word	0x0800ad60
 8008b84:	0800ad60 	.word	0x0800ad60
 8008b88:	0800ad60 	.word	0x0800ad60
 8008b8c:	0800ad64 	.word	0x0800ad64

08008b90 <__retarget_lock_init_recursive>:
 8008b90:	4770      	bx	lr

08008b92 <__retarget_lock_acquire_recursive>:
 8008b92:	4770      	bx	lr

08008b94 <__retarget_lock_release_recursive>:
 8008b94:	4770      	bx	lr

08008b96 <quorem>:
 8008b96:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b9a:	6903      	ldr	r3, [r0, #16]
 8008b9c:	690c      	ldr	r4, [r1, #16]
 8008b9e:	42a3      	cmp	r3, r4
 8008ba0:	4607      	mov	r7, r0
 8008ba2:	db7e      	blt.n	8008ca2 <quorem+0x10c>
 8008ba4:	3c01      	subs	r4, #1
 8008ba6:	f101 0814 	add.w	r8, r1, #20
 8008baa:	00a3      	lsls	r3, r4, #2
 8008bac:	f100 0514 	add.w	r5, r0, #20
 8008bb0:	9300      	str	r3, [sp, #0]
 8008bb2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008bb6:	9301      	str	r3, [sp, #4]
 8008bb8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008bbc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008bc0:	3301      	adds	r3, #1
 8008bc2:	429a      	cmp	r2, r3
 8008bc4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008bc8:	fbb2 f6f3 	udiv	r6, r2, r3
 8008bcc:	d32e      	bcc.n	8008c2c <quorem+0x96>
 8008bce:	f04f 0a00 	mov.w	sl, #0
 8008bd2:	46c4      	mov	ip, r8
 8008bd4:	46ae      	mov	lr, r5
 8008bd6:	46d3      	mov	fp, sl
 8008bd8:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008bdc:	b298      	uxth	r0, r3
 8008bde:	fb06 a000 	mla	r0, r6, r0, sl
 8008be2:	0c02      	lsrs	r2, r0, #16
 8008be4:	0c1b      	lsrs	r3, r3, #16
 8008be6:	fb06 2303 	mla	r3, r6, r3, r2
 8008bea:	f8de 2000 	ldr.w	r2, [lr]
 8008bee:	b280      	uxth	r0, r0
 8008bf0:	b292      	uxth	r2, r2
 8008bf2:	1a12      	subs	r2, r2, r0
 8008bf4:	445a      	add	r2, fp
 8008bf6:	f8de 0000 	ldr.w	r0, [lr]
 8008bfa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008bfe:	b29b      	uxth	r3, r3
 8008c00:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008c04:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008c08:	b292      	uxth	r2, r2
 8008c0a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008c0e:	45e1      	cmp	r9, ip
 8008c10:	f84e 2b04 	str.w	r2, [lr], #4
 8008c14:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008c18:	d2de      	bcs.n	8008bd8 <quorem+0x42>
 8008c1a:	9b00      	ldr	r3, [sp, #0]
 8008c1c:	58eb      	ldr	r3, [r5, r3]
 8008c1e:	b92b      	cbnz	r3, 8008c2c <quorem+0x96>
 8008c20:	9b01      	ldr	r3, [sp, #4]
 8008c22:	3b04      	subs	r3, #4
 8008c24:	429d      	cmp	r5, r3
 8008c26:	461a      	mov	r2, r3
 8008c28:	d32f      	bcc.n	8008c8a <quorem+0xf4>
 8008c2a:	613c      	str	r4, [r7, #16]
 8008c2c:	4638      	mov	r0, r7
 8008c2e:	f001 f979 	bl	8009f24 <__mcmp>
 8008c32:	2800      	cmp	r0, #0
 8008c34:	db25      	blt.n	8008c82 <quorem+0xec>
 8008c36:	4629      	mov	r1, r5
 8008c38:	2000      	movs	r0, #0
 8008c3a:	f858 2b04 	ldr.w	r2, [r8], #4
 8008c3e:	f8d1 c000 	ldr.w	ip, [r1]
 8008c42:	fa1f fe82 	uxth.w	lr, r2
 8008c46:	fa1f f38c 	uxth.w	r3, ip
 8008c4a:	eba3 030e 	sub.w	r3, r3, lr
 8008c4e:	4403      	add	r3, r0
 8008c50:	0c12      	lsrs	r2, r2, #16
 8008c52:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008c56:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008c5a:	b29b      	uxth	r3, r3
 8008c5c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008c60:	45c1      	cmp	r9, r8
 8008c62:	f841 3b04 	str.w	r3, [r1], #4
 8008c66:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008c6a:	d2e6      	bcs.n	8008c3a <quorem+0xa4>
 8008c6c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008c70:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008c74:	b922      	cbnz	r2, 8008c80 <quorem+0xea>
 8008c76:	3b04      	subs	r3, #4
 8008c78:	429d      	cmp	r5, r3
 8008c7a:	461a      	mov	r2, r3
 8008c7c:	d30b      	bcc.n	8008c96 <quorem+0x100>
 8008c7e:	613c      	str	r4, [r7, #16]
 8008c80:	3601      	adds	r6, #1
 8008c82:	4630      	mov	r0, r6
 8008c84:	b003      	add	sp, #12
 8008c86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c8a:	6812      	ldr	r2, [r2, #0]
 8008c8c:	3b04      	subs	r3, #4
 8008c8e:	2a00      	cmp	r2, #0
 8008c90:	d1cb      	bne.n	8008c2a <quorem+0x94>
 8008c92:	3c01      	subs	r4, #1
 8008c94:	e7c6      	b.n	8008c24 <quorem+0x8e>
 8008c96:	6812      	ldr	r2, [r2, #0]
 8008c98:	3b04      	subs	r3, #4
 8008c9a:	2a00      	cmp	r2, #0
 8008c9c:	d1ef      	bne.n	8008c7e <quorem+0xe8>
 8008c9e:	3c01      	subs	r4, #1
 8008ca0:	e7ea      	b.n	8008c78 <quorem+0xe2>
 8008ca2:	2000      	movs	r0, #0
 8008ca4:	e7ee      	b.n	8008c84 <quorem+0xee>
	...

08008ca8 <_dtoa_r>:
 8008ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cac:	69c7      	ldr	r7, [r0, #28]
 8008cae:	b099      	sub	sp, #100	@ 0x64
 8008cb0:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008cb4:	ec55 4b10 	vmov	r4, r5, d0
 8008cb8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8008cba:	9109      	str	r1, [sp, #36]	@ 0x24
 8008cbc:	4683      	mov	fp, r0
 8008cbe:	920e      	str	r2, [sp, #56]	@ 0x38
 8008cc0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008cc2:	b97f      	cbnz	r7, 8008ce4 <_dtoa_r+0x3c>
 8008cc4:	2010      	movs	r0, #16
 8008cc6:	f000 fdfd 	bl	80098c4 <malloc>
 8008cca:	4602      	mov	r2, r0
 8008ccc:	f8cb 001c 	str.w	r0, [fp, #28]
 8008cd0:	b920      	cbnz	r0, 8008cdc <_dtoa_r+0x34>
 8008cd2:	4ba7      	ldr	r3, [pc, #668]	@ (8008f70 <_dtoa_r+0x2c8>)
 8008cd4:	21ef      	movs	r1, #239	@ 0xef
 8008cd6:	48a7      	ldr	r0, [pc, #668]	@ (8008f74 <_dtoa_r+0x2cc>)
 8008cd8:	f001 fcbc 	bl	800a654 <__assert_func>
 8008cdc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008ce0:	6007      	str	r7, [r0, #0]
 8008ce2:	60c7      	str	r7, [r0, #12]
 8008ce4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008ce8:	6819      	ldr	r1, [r3, #0]
 8008cea:	b159      	cbz	r1, 8008d04 <_dtoa_r+0x5c>
 8008cec:	685a      	ldr	r2, [r3, #4]
 8008cee:	604a      	str	r2, [r1, #4]
 8008cf0:	2301      	movs	r3, #1
 8008cf2:	4093      	lsls	r3, r2
 8008cf4:	608b      	str	r3, [r1, #8]
 8008cf6:	4658      	mov	r0, fp
 8008cf8:	f000 feda 	bl	8009ab0 <_Bfree>
 8008cfc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008d00:	2200      	movs	r2, #0
 8008d02:	601a      	str	r2, [r3, #0]
 8008d04:	1e2b      	subs	r3, r5, #0
 8008d06:	bfb9      	ittee	lt
 8008d08:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008d0c:	9303      	strlt	r3, [sp, #12]
 8008d0e:	2300      	movge	r3, #0
 8008d10:	6033      	strge	r3, [r6, #0]
 8008d12:	9f03      	ldr	r7, [sp, #12]
 8008d14:	4b98      	ldr	r3, [pc, #608]	@ (8008f78 <_dtoa_r+0x2d0>)
 8008d16:	bfbc      	itt	lt
 8008d18:	2201      	movlt	r2, #1
 8008d1a:	6032      	strlt	r2, [r6, #0]
 8008d1c:	43bb      	bics	r3, r7
 8008d1e:	d112      	bne.n	8008d46 <_dtoa_r+0x9e>
 8008d20:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008d22:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008d26:	6013      	str	r3, [r2, #0]
 8008d28:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008d2c:	4323      	orrs	r3, r4
 8008d2e:	f000 854d 	beq.w	80097cc <_dtoa_r+0xb24>
 8008d32:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008d34:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8008f8c <_dtoa_r+0x2e4>
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	f000 854f 	beq.w	80097dc <_dtoa_r+0xb34>
 8008d3e:	f10a 0303 	add.w	r3, sl, #3
 8008d42:	f000 bd49 	b.w	80097d8 <_dtoa_r+0xb30>
 8008d46:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	ec51 0b17 	vmov	r0, r1, d7
 8008d50:	2300      	movs	r3, #0
 8008d52:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8008d56:	f7f7 feb7 	bl	8000ac8 <__aeabi_dcmpeq>
 8008d5a:	4680      	mov	r8, r0
 8008d5c:	b158      	cbz	r0, 8008d76 <_dtoa_r+0xce>
 8008d5e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008d60:	2301      	movs	r3, #1
 8008d62:	6013      	str	r3, [r2, #0]
 8008d64:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008d66:	b113      	cbz	r3, 8008d6e <_dtoa_r+0xc6>
 8008d68:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008d6a:	4b84      	ldr	r3, [pc, #528]	@ (8008f7c <_dtoa_r+0x2d4>)
 8008d6c:	6013      	str	r3, [r2, #0]
 8008d6e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8008f90 <_dtoa_r+0x2e8>
 8008d72:	f000 bd33 	b.w	80097dc <_dtoa_r+0xb34>
 8008d76:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008d7a:	aa16      	add	r2, sp, #88	@ 0x58
 8008d7c:	a917      	add	r1, sp, #92	@ 0x5c
 8008d7e:	4658      	mov	r0, fp
 8008d80:	f001 f980 	bl	800a084 <__d2b>
 8008d84:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008d88:	4681      	mov	r9, r0
 8008d8a:	2e00      	cmp	r6, #0
 8008d8c:	d077      	beq.n	8008e7e <_dtoa_r+0x1d6>
 8008d8e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008d90:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8008d94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008d98:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008d9c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008da0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008da4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008da8:	4619      	mov	r1, r3
 8008daa:	2200      	movs	r2, #0
 8008dac:	4b74      	ldr	r3, [pc, #464]	@ (8008f80 <_dtoa_r+0x2d8>)
 8008dae:	f7f7 fa6b 	bl	8000288 <__aeabi_dsub>
 8008db2:	a369      	add	r3, pc, #420	@ (adr r3, 8008f58 <_dtoa_r+0x2b0>)
 8008db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008db8:	f7f7 fc1e 	bl	80005f8 <__aeabi_dmul>
 8008dbc:	a368      	add	r3, pc, #416	@ (adr r3, 8008f60 <_dtoa_r+0x2b8>)
 8008dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dc2:	f7f7 fa63 	bl	800028c <__adddf3>
 8008dc6:	4604      	mov	r4, r0
 8008dc8:	4630      	mov	r0, r6
 8008dca:	460d      	mov	r5, r1
 8008dcc:	f7f7 fbaa 	bl	8000524 <__aeabi_i2d>
 8008dd0:	a365      	add	r3, pc, #404	@ (adr r3, 8008f68 <_dtoa_r+0x2c0>)
 8008dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dd6:	f7f7 fc0f 	bl	80005f8 <__aeabi_dmul>
 8008dda:	4602      	mov	r2, r0
 8008ddc:	460b      	mov	r3, r1
 8008dde:	4620      	mov	r0, r4
 8008de0:	4629      	mov	r1, r5
 8008de2:	f7f7 fa53 	bl	800028c <__adddf3>
 8008de6:	4604      	mov	r4, r0
 8008de8:	460d      	mov	r5, r1
 8008dea:	f7f7 feb5 	bl	8000b58 <__aeabi_d2iz>
 8008dee:	2200      	movs	r2, #0
 8008df0:	4607      	mov	r7, r0
 8008df2:	2300      	movs	r3, #0
 8008df4:	4620      	mov	r0, r4
 8008df6:	4629      	mov	r1, r5
 8008df8:	f7f7 fe70 	bl	8000adc <__aeabi_dcmplt>
 8008dfc:	b140      	cbz	r0, 8008e10 <_dtoa_r+0x168>
 8008dfe:	4638      	mov	r0, r7
 8008e00:	f7f7 fb90 	bl	8000524 <__aeabi_i2d>
 8008e04:	4622      	mov	r2, r4
 8008e06:	462b      	mov	r3, r5
 8008e08:	f7f7 fe5e 	bl	8000ac8 <__aeabi_dcmpeq>
 8008e0c:	b900      	cbnz	r0, 8008e10 <_dtoa_r+0x168>
 8008e0e:	3f01      	subs	r7, #1
 8008e10:	2f16      	cmp	r7, #22
 8008e12:	d851      	bhi.n	8008eb8 <_dtoa_r+0x210>
 8008e14:	4b5b      	ldr	r3, [pc, #364]	@ (8008f84 <_dtoa_r+0x2dc>)
 8008e16:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e1e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008e22:	f7f7 fe5b 	bl	8000adc <__aeabi_dcmplt>
 8008e26:	2800      	cmp	r0, #0
 8008e28:	d048      	beq.n	8008ebc <_dtoa_r+0x214>
 8008e2a:	3f01      	subs	r7, #1
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	9312      	str	r3, [sp, #72]	@ 0x48
 8008e30:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008e32:	1b9b      	subs	r3, r3, r6
 8008e34:	1e5a      	subs	r2, r3, #1
 8008e36:	bf44      	itt	mi
 8008e38:	f1c3 0801 	rsbmi	r8, r3, #1
 8008e3c:	2300      	movmi	r3, #0
 8008e3e:	9208      	str	r2, [sp, #32]
 8008e40:	bf54      	ite	pl
 8008e42:	f04f 0800 	movpl.w	r8, #0
 8008e46:	9308      	strmi	r3, [sp, #32]
 8008e48:	2f00      	cmp	r7, #0
 8008e4a:	db39      	blt.n	8008ec0 <_dtoa_r+0x218>
 8008e4c:	9b08      	ldr	r3, [sp, #32]
 8008e4e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8008e50:	443b      	add	r3, r7
 8008e52:	9308      	str	r3, [sp, #32]
 8008e54:	2300      	movs	r3, #0
 8008e56:	930a      	str	r3, [sp, #40]	@ 0x28
 8008e58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e5a:	2b09      	cmp	r3, #9
 8008e5c:	d864      	bhi.n	8008f28 <_dtoa_r+0x280>
 8008e5e:	2b05      	cmp	r3, #5
 8008e60:	bfc4      	itt	gt
 8008e62:	3b04      	subgt	r3, #4
 8008e64:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8008e66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e68:	f1a3 0302 	sub.w	r3, r3, #2
 8008e6c:	bfcc      	ite	gt
 8008e6e:	2400      	movgt	r4, #0
 8008e70:	2401      	movle	r4, #1
 8008e72:	2b03      	cmp	r3, #3
 8008e74:	d863      	bhi.n	8008f3e <_dtoa_r+0x296>
 8008e76:	e8df f003 	tbb	[pc, r3]
 8008e7a:	372a      	.short	0x372a
 8008e7c:	5535      	.short	0x5535
 8008e7e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8008e82:	441e      	add	r6, r3
 8008e84:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008e88:	2b20      	cmp	r3, #32
 8008e8a:	bfc1      	itttt	gt
 8008e8c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008e90:	409f      	lslgt	r7, r3
 8008e92:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008e96:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008e9a:	bfd6      	itet	le
 8008e9c:	f1c3 0320 	rsble	r3, r3, #32
 8008ea0:	ea47 0003 	orrgt.w	r0, r7, r3
 8008ea4:	fa04 f003 	lslle.w	r0, r4, r3
 8008ea8:	f7f7 fb2c 	bl	8000504 <__aeabi_ui2d>
 8008eac:	2201      	movs	r2, #1
 8008eae:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008eb2:	3e01      	subs	r6, #1
 8008eb4:	9214      	str	r2, [sp, #80]	@ 0x50
 8008eb6:	e777      	b.n	8008da8 <_dtoa_r+0x100>
 8008eb8:	2301      	movs	r3, #1
 8008eba:	e7b8      	b.n	8008e2e <_dtoa_r+0x186>
 8008ebc:	9012      	str	r0, [sp, #72]	@ 0x48
 8008ebe:	e7b7      	b.n	8008e30 <_dtoa_r+0x188>
 8008ec0:	427b      	negs	r3, r7
 8008ec2:	930a      	str	r3, [sp, #40]	@ 0x28
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	eba8 0807 	sub.w	r8, r8, r7
 8008eca:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008ecc:	e7c4      	b.n	8008e58 <_dtoa_r+0x1b0>
 8008ece:	2300      	movs	r3, #0
 8008ed0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008ed2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	dc35      	bgt.n	8008f44 <_dtoa_r+0x29c>
 8008ed8:	2301      	movs	r3, #1
 8008eda:	9300      	str	r3, [sp, #0]
 8008edc:	9307      	str	r3, [sp, #28]
 8008ede:	461a      	mov	r2, r3
 8008ee0:	920e      	str	r2, [sp, #56]	@ 0x38
 8008ee2:	e00b      	b.n	8008efc <_dtoa_r+0x254>
 8008ee4:	2301      	movs	r3, #1
 8008ee6:	e7f3      	b.n	8008ed0 <_dtoa_r+0x228>
 8008ee8:	2300      	movs	r3, #0
 8008eea:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008eec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008eee:	18fb      	adds	r3, r7, r3
 8008ef0:	9300      	str	r3, [sp, #0]
 8008ef2:	3301      	adds	r3, #1
 8008ef4:	2b01      	cmp	r3, #1
 8008ef6:	9307      	str	r3, [sp, #28]
 8008ef8:	bfb8      	it	lt
 8008efa:	2301      	movlt	r3, #1
 8008efc:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008f00:	2100      	movs	r1, #0
 8008f02:	2204      	movs	r2, #4
 8008f04:	f102 0514 	add.w	r5, r2, #20
 8008f08:	429d      	cmp	r5, r3
 8008f0a:	d91f      	bls.n	8008f4c <_dtoa_r+0x2a4>
 8008f0c:	6041      	str	r1, [r0, #4]
 8008f0e:	4658      	mov	r0, fp
 8008f10:	f000 fd8e 	bl	8009a30 <_Balloc>
 8008f14:	4682      	mov	sl, r0
 8008f16:	2800      	cmp	r0, #0
 8008f18:	d13c      	bne.n	8008f94 <_dtoa_r+0x2ec>
 8008f1a:	4b1b      	ldr	r3, [pc, #108]	@ (8008f88 <_dtoa_r+0x2e0>)
 8008f1c:	4602      	mov	r2, r0
 8008f1e:	f240 11af 	movw	r1, #431	@ 0x1af
 8008f22:	e6d8      	b.n	8008cd6 <_dtoa_r+0x2e>
 8008f24:	2301      	movs	r3, #1
 8008f26:	e7e0      	b.n	8008eea <_dtoa_r+0x242>
 8008f28:	2401      	movs	r4, #1
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f2e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008f30:	f04f 33ff 	mov.w	r3, #4294967295
 8008f34:	9300      	str	r3, [sp, #0]
 8008f36:	9307      	str	r3, [sp, #28]
 8008f38:	2200      	movs	r2, #0
 8008f3a:	2312      	movs	r3, #18
 8008f3c:	e7d0      	b.n	8008ee0 <_dtoa_r+0x238>
 8008f3e:	2301      	movs	r3, #1
 8008f40:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008f42:	e7f5      	b.n	8008f30 <_dtoa_r+0x288>
 8008f44:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008f46:	9300      	str	r3, [sp, #0]
 8008f48:	9307      	str	r3, [sp, #28]
 8008f4a:	e7d7      	b.n	8008efc <_dtoa_r+0x254>
 8008f4c:	3101      	adds	r1, #1
 8008f4e:	0052      	lsls	r2, r2, #1
 8008f50:	e7d8      	b.n	8008f04 <_dtoa_r+0x25c>
 8008f52:	bf00      	nop
 8008f54:	f3af 8000 	nop.w
 8008f58:	636f4361 	.word	0x636f4361
 8008f5c:	3fd287a7 	.word	0x3fd287a7
 8008f60:	8b60c8b3 	.word	0x8b60c8b3
 8008f64:	3fc68a28 	.word	0x3fc68a28
 8008f68:	509f79fb 	.word	0x509f79fb
 8008f6c:	3fd34413 	.word	0x3fd34413
 8008f70:	0800aa25 	.word	0x0800aa25
 8008f74:	0800aa3c 	.word	0x0800aa3c
 8008f78:	7ff00000 	.word	0x7ff00000
 8008f7c:	0800a9f5 	.word	0x0800a9f5
 8008f80:	3ff80000 	.word	0x3ff80000
 8008f84:	0800ab38 	.word	0x0800ab38
 8008f88:	0800aa94 	.word	0x0800aa94
 8008f8c:	0800aa21 	.word	0x0800aa21
 8008f90:	0800a9f4 	.word	0x0800a9f4
 8008f94:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008f98:	6018      	str	r0, [r3, #0]
 8008f9a:	9b07      	ldr	r3, [sp, #28]
 8008f9c:	2b0e      	cmp	r3, #14
 8008f9e:	f200 80a4 	bhi.w	80090ea <_dtoa_r+0x442>
 8008fa2:	2c00      	cmp	r4, #0
 8008fa4:	f000 80a1 	beq.w	80090ea <_dtoa_r+0x442>
 8008fa8:	2f00      	cmp	r7, #0
 8008faa:	dd33      	ble.n	8009014 <_dtoa_r+0x36c>
 8008fac:	4bad      	ldr	r3, [pc, #692]	@ (8009264 <_dtoa_r+0x5bc>)
 8008fae:	f007 020f 	and.w	r2, r7, #15
 8008fb2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008fb6:	ed93 7b00 	vldr	d7, [r3]
 8008fba:	05f8      	lsls	r0, r7, #23
 8008fbc:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008fc0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008fc4:	d516      	bpl.n	8008ff4 <_dtoa_r+0x34c>
 8008fc6:	4ba8      	ldr	r3, [pc, #672]	@ (8009268 <_dtoa_r+0x5c0>)
 8008fc8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008fcc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008fd0:	f7f7 fc3c 	bl	800084c <__aeabi_ddiv>
 8008fd4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008fd8:	f004 040f 	and.w	r4, r4, #15
 8008fdc:	2603      	movs	r6, #3
 8008fde:	4da2      	ldr	r5, [pc, #648]	@ (8009268 <_dtoa_r+0x5c0>)
 8008fe0:	b954      	cbnz	r4, 8008ff8 <_dtoa_r+0x350>
 8008fe2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008fe6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008fea:	f7f7 fc2f 	bl	800084c <__aeabi_ddiv>
 8008fee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ff2:	e028      	b.n	8009046 <_dtoa_r+0x39e>
 8008ff4:	2602      	movs	r6, #2
 8008ff6:	e7f2      	b.n	8008fde <_dtoa_r+0x336>
 8008ff8:	07e1      	lsls	r1, r4, #31
 8008ffa:	d508      	bpl.n	800900e <_dtoa_r+0x366>
 8008ffc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009000:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009004:	f7f7 faf8 	bl	80005f8 <__aeabi_dmul>
 8009008:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800900c:	3601      	adds	r6, #1
 800900e:	1064      	asrs	r4, r4, #1
 8009010:	3508      	adds	r5, #8
 8009012:	e7e5      	b.n	8008fe0 <_dtoa_r+0x338>
 8009014:	f000 80d2 	beq.w	80091bc <_dtoa_r+0x514>
 8009018:	427c      	negs	r4, r7
 800901a:	4b92      	ldr	r3, [pc, #584]	@ (8009264 <_dtoa_r+0x5bc>)
 800901c:	4d92      	ldr	r5, [pc, #584]	@ (8009268 <_dtoa_r+0x5c0>)
 800901e:	f004 020f 	and.w	r2, r4, #15
 8009022:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800902a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800902e:	f7f7 fae3 	bl	80005f8 <__aeabi_dmul>
 8009032:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009036:	1124      	asrs	r4, r4, #4
 8009038:	2300      	movs	r3, #0
 800903a:	2602      	movs	r6, #2
 800903c:	2c00      	cmp	r4, #0
 800903e:	f040 80b2 	bne.w	80091a6 <_dtoa_r+0x4fe>
 8009042:	2b00      	cmp	r3, #0
 8009044:	d1d3      	bne.n	8008fee <_dtoa_r+0x346>
 8009046:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009048:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800904c:	2b00      	cmp	r3, #0
 800904e:	f000 80b7 	beq.w	80091c0 <_dtoa_r+0x518>
 8009052:	4b86      	ldr	r3, [pc, #536]	@ (800926c <_dtoa_r+0x5c4>)
 8009054:	2200      	movs	r2, #0
 8009056:	4620      	mov	r0, r4
 8009058:	4629      	mov	r1, r5
 800905a:	f7f7 fd3f 	bl	8000adc <__aeabi_dcmplt>
 800905e:	2800      	cmp	r0, #0
 8009060:	f000 80ae 	beq.w	80091c0 <_dtoa_r+0x518>
 8009064:	9b07      	ldr	r3, [sp, #28]
 8009066:	2b00      	cmp	r3, #0
 8009068:	f000 80aa 	beq.w	80091c0 <_dtoa_r+0x518>
 800906c:	9b00      	ldr	r3, [sp, #0]
 800906e:	2b00      	cmp	r3, #0
 8009070:	dd37      	ble.n	80090e2 <_dtoa_r+0x43a>
 8009072:	1e7b      	subs	r3, r7, #1
 8009074:	9304      	str	r3, [sp, #16]
 8009076:	4620      	mov	r0, r4
 8009078:	4b7d      	ldr	r3, [pc, #500]	@ (8009270 <_dtoa_r+0x5c8>)
 800907a:	2200      	movs	r2, #0
 800907c:	4629      	mov	r1, r5
 800907e:	f7f7 fabb 	bl	80005f8 <__aeabi_dmul>
 8009082:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009086:	9c00      	ldr	r4, [sp, #0]
 8009088:	3601      	adds	r6, #1
 800908a:	4630      	mov	r0, r6
 800908c:	f7f7 fa4a 	bl	8000524 <__aeabi_i2d>
 8009090:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009094:	f7f7 fab0 	bl	80005f8 <__aeabi_dmul>
 8009098:	4b76      	ldr	r3, [pc, #472]	@ (8009274 <_dtoa_r+0x5cc>)
 800909a:	2200      	movs	r2, #0
 800909c:	f7f7 f8f6 	bl	800028c <__adddf3>
 80090a0:	4605      	mov	r5, r0
 80090a2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80090a6:	2c00      	cmp	r4, #0
 80090a8:	f040 808d 	bne.w	80091c6 <_dtoa_r+0x51e>
 80090ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80090b0:	4b71      	ldr	r3, [pc, #452]	@ (8009278 <_dtoa_r+0x5d0>)
 80090b2:	2200      	movs	r2, #0
 80090b4:	f7f7 f8e8 	bl	8000288 <__aeabi_dsub>
 80090b8:	4602      	mov	r2, r0
 80090ba:	460b      	mov	r3, r1
 80090bc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80090c0:	462a      	mov	r2, r5
 80090c2:	4633      	mov	r3, r6
 80090c4:	f7f7 fd28 	bl	8000b18 <__aeabi_dcmpgt>
 80090c8:	2800      	cmp	r0, #0
 80090ca:	f040 828b 	bne.w	80095e4 <_dtoa_r+0x93c>
 80090ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80090d2:	462a      	mov	r2, r5
 80090d4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80090d8:	f7f7 fd00 	bl	8000adc <__aeabi_dcmplt>
 80090dc:	2800      	cmp	r0, #0
 80090de:	f040 8128 	bne.w	8009332 <_dtoa_r+0x68a>
 80090e2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80090e6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80090ea:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	f2c0 815a 	blt.w	80093a6 <_dtoa_r+0x6fe>
 80090f2:	2f0e      	cmp	r7, #14
 80090f4:	f300 8157 	bgt.w	80093a6 <_dtoa_r+0x6fe>
 80090f8:	4b5a      	ldr	r3, [pc, #360]	@ (8009264 <_dtoa_r+0x5bc>)
 80090fa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80090fe:	ed93 7b00 	vldr	d7, [r3]
 8009102:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009104:	2b00      	cmp	r3, #0
 8009106:	ed8d 7b00 	vstr	d7, [sp]
 800910a:	da03      	bge.n	8009114 <_dtoa_r+0x46c>
 800910c:	9b07      	ldr	r3, [sp, #28]
 800910e:	2b00      	cmp	r3, #0
 8009110:	f340 8101 	ble.w	8009316 <_dtoa_r+0x66e>
 8009114:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009118:	4656      	mov	r6, sl
 800911a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800911e:	4620      	mov	r0, r4
 8009120:	4629      	mov	r1, r5
 8009122:	f7f7 fb93 	bl	800084c <__aeabi_ddiv>
 8009126:	f7f7 fd17 	bl	8000b58 <__aeabi_d2iz>
 800912a:	4680      	mov	r8, r0
 800912c:	f7f7 f9fa 	bl	8000524 <__aeabi_i2d>
 8009130:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009134:	f7f7 fa60 	bl	80005f8 <__aeabi_dmul>
 8009138:	4602      	mov	r2, r0
 800913a:	460b      	mov	r3, r1
 800913c:	4620      	mov	r0, r4
 800913e:	4629      	mov	r1, r5
 8009140:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009144:	f7f7 f8a0 	bl	8000288 <__aeabi_dsub>
 8009148:	f806 4b01 	strb.w	r4, [r6], #1
 800914c:	9d07      	ldr	r5, [sp, #28]
 800914e:	eba6 040a 	sub.w	r4, r6, sl
 8009152:	42a5      	cmp	r5, r4
 8009154:	4602      	mov	r2, r0
 8009156:	460b      	mov	r3, r1
 8009158:	f040 8117 	bne.w	800938a <_dtoa_r+0x6e2>
 800915c:	f7f7 f896 	bl	800028c <__adddf3>
 8009160:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009164:	4604      	mov	r4, r0
 8009166:	460d      	mov	r5, r1
 8009168:	f7f7 fcd6 	bl	8000b18 <__aeabi_dcmpgt>
 800916c:	2800      	cmp	r0, #0
 800916e:	f040 80f9 	bne.w	8009364 <_dtoa_r+0x6bc>
 8009172:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009176:	4620      	mov	r0, r4
 8009178:	4629      	mov	r1, r5
 800917a:	f7f7 fca5 	bl	8000ac8 <__aeabi_dcmpeq>
 800917e:	b118      	cbz	r0, 8009188 <_dtoa_r+0x4e0>
 8009180:	f018 0f01 	tst.w	r8, #1
 8009184:	f040 80ee 	bne.w	8009364 <_dtoa_r+0x6bc>
 8009188:	4649      	mov	r1, r9
 800918a:	4658      	mov	r0, fp
 800918c:	f000 fc90 	bl	8009ab0 <_Bfree>
 8009190:	2300      	movs	r3, #0
 8009192:	7033      	strb	r3, [r6, #0]
 8009194:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009196:	3701      	adds	r7, #1
 8009198:	601f      	str	r7, [r3, #0]
 800919a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800919c:	2b00      	cmp	r3, #0
 800919e:	f000 831d 	beq.w	80097dc <_dtoa_r+0xb34>
 80091a2:	601e      	str	r6, [r3, #0]
 80091a4:	e31a      	b.n	80097dc <_dtoa_r+0xb34>
 80091a6:	07e2      	lsls	r2, r4, #31
 80091a8:	d505      	bpl.n	80091b6 <_dtoa_r+0x50e>
 80091aa:	e9d5 2300 	ldrd	r2, r3, [r5]
 80091ae:	f7f7 fa23 	bl	80005f8 <__aeabi_dmul>
 80091b2:	3601      	adds	r6, #1
 80091b4:	2301      	movs	r3, #1
 80091b6:	1064      	asrs	r4, r4, #1
 80091b8:	3508      	adds	r5, #8
 80091ba:	e73f      	b.n	800903c <_dtoa_r+0x394>
 80091bc:	2602      	movs	r6, #2
 80091be:	e742      	b.n	8009046 <_dtoa_r+0x39e>
 80091c0:	9c07      	ldr	r4, [sp, #28]
 80091c2:	9704      	str	r7, [sp, #16]
 80091c4:	e761      	b.n	800908a <_dtoa_r+0x3e2>
 80091c6:	4b27      	ldr	r3, [pc, #156]	@ (8009264 <_dtoa_r+0x5bc>)
 80091c8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80091ca:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80091ce:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80091d2:	4454      	add	r4, sl
 80091d4:	2900      	cmp	r1, #0
 80091d6:	d053      	beq.n	8009280 <_dtoa_r+0x5d8>
 80091d8:	4928      	ldr	r1, [pc, #160]	@ (800927c <_dtoa_r+0x5d4>)
 80091da:	2000      	movs	r0, #0
 80091dc:	f7f7 fb36 	bl	800084c <__aeabi_ddiv>
 80091e0:	4633      	mov	r3, r6
 80091e2:	462a      	mov	r2, r5
 80091e4:	f7f7 f850 	bl	8000288 <__aeabi_dsub>
 80091e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80091ec:	4656      	mov	r6, sl
 80091ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80091f2:	f7f7 fcb1 	bl	8000b58 <__aeabi_d2iz>
 80091f6:	4605      	mov	r5, r0
 80091f8:	f7f7 f994 	bl	8000524 <__aeabi_i2d>
 80091fc:	4602      	mov	r2, r0
 80091fe:	460b      	mov	r3, r1
 8009200:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009204:	f7f7 f840 	bl	8000288 <__aeabi_dsub>
 8009208:	3530      	adds	r5, #48	@ 0x30
 800920a:	4602      	mov	r2, r0
 800920c:	460b      	mov	r3, r1
 800920e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009212:	f806 5b01 	strb.w	r5, [r6], #1
 8009216:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800921a:	f7f7 fc5f 	bl	8000adc <__aeabi_dcmplt>
 800921e:	2800      	cmp	r0, #0
 8009220:	d171      	bne.n	8009306 <_dtoa_r+0x65e>
 8009222:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009226:	4911      	ldr	r1, [pc, #68]	@ (800926c <_dtoa_r+0x5c4>)
 8009228:	2000      	movs	r0, #0
 800922a:	f7f7 f82d 	bl	8000288 <__aeabi_dsub>
 800922e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009232:	f7f7 fc53 	bl	8000adc <__aeabi_dcmplt>
 8009236:	2800      	cmp	r0, #0
 8009238:	f040 8095 	bne.w	8009366 <_dtoa_r+0x6be>
 800923c:	42a6      	cmp	r6, r4
 800923e:	f43f af50 	beq.w	80090e2 <_dtoa_r+0x43a>
 8009242:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009246:	4b0a      	ldr	r3, [pc, #40]	@ (8009270 <_dtoa_r+0x5c8>)
 8009248:	2200      	movs	r2, #0
 800924a:	f7f7 f9d5 	bl	80005f8 <__aeabi_dmul>
 800924e:	4b08      	ldr	r3, [pc, #32]	@ (8009270 <_dtoa_r+0x5c8>)
 8009250:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009254:	2200      	movs	r2, #0
 8009256:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800925a:	f7f7 f9cd 	bl	80005f8 <__aeabi_dmul>
 800925e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009262:	e7c4      	b.n	80091ee <_dtoa_r+0x546>
 8009264:	0800ab38 	.word	0x0800ab38
 8009268:	0800ab10 	.word	0x0800ab10
 800926c:	3ff00000 	.word	0x3ff00000
 8009270:	40240000 	.word	0x40240000
 8009274:	401c0000 	.word	0x401c0000
 8009278:	40140000 	.word	0x40140000
 800927c:	3fe00000 	.word	0x3fe00000
 8009280:	4631      	mov	r1, r6
 8009282:	4628      	mov	r0, r5
 8009284:	f7f7 f9b8 	bl	80005f8 <__aeabi_dmul>
 8009288:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800928c:	9415      	str	r4, [sp, #84]	@ 0x54
 800928e:	4656      	mov	r6, sl
 8009290:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009294:	f7f7 fc60 	bl	8000b58 <__aeabi_d2iz>
 8009298:	4605      	mov	r5, r0
 800929a:	f7f7 f943 	bl	8000524 <__aeabi_i2d>
 800929e:	4602      	mov	r2, r0
 80092a0:	460b      	mov	r3, r1
 80092a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80092a6:	f7f6 ffef 	bl	8000288 <__aeabi_dsub>
 80092aa:	3530      	adds	r5, #48	@ 0x30
 80092ac:	f806 5b01 	strb.w	r5, [r6], #1
 80092b0:	4602      	mov	r2, r0
 80092b2:	460b      	mov	r3, r1
 80092b4:	42a6      	cmp	r6, r4
 80092b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80092ba:	f04f 0200 	mov.w	r2, #0
 80092be:	d124      	bne.n	800930a <_dtoa_r+0x662>
 80092c0:	4bac      	ldr	r3, [pc, #688]	@ (8009574 <_dtoa_r+0x8cc>)
 80092c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80092c6:	f7f6 ffe1 	bl	800028c <__adddf3>
 80092ca:	4602      	mov	r2, r0
 80092cc:	460b      	mov	r3, r1
 80092ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80092d2:	f7f7 fc21 	bl	8000b18 <__aeabi_dcmpgt>
 80092d6:	2800      	cmp	r0, #0
 80092d8:	d145      	bne.n	8009366 <_dtoa_r+0x6be>
 80092da:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80092de:	49a5      	ldr	r1, [pc, #660]	@ (8009574 <_dtoa_r+0x8cc>)
 80092e0:	2000      	movs	r0, #0
 80092e2:	f7f6 ffd1 	bl	8000288 <__aeabi_dsub>
 80092e6:	4602      	mov	r2, r0
 80092e8:	460b      	mov	r3, r1
 80092ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80092ee:	f7f7 fbf5 	bl	8000adc <__aeabi_dcmplt>
 80092f2:	2800      	cmp	r0, #0
 80092f4:	f43f aef5 	beq.w	80090e2 <_dtoa_r+0x43a>
 80092f8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80092fa:	1e73      	subs	r3, r6, #1
 80092fc:	9315      	str	r3, [sp, #84]	@ 0x54
 80092fe:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009302:	2b30      	cmp	r3, #48	@ 0x30
 8009304:	d0f8      	beq.n	80092f8 <_dtoa_r+0x650>
 8009306:	9f04      	ldr	r7, [sp, #16]
 8009308:	e73e      	b.n	8009188 <_dtoa_r+0x4e0>
 800930a:	4b9b      	ldr	r3, [pc, #620]	@ (8009578 <_dtoa_r+0x8d0>)
 800930c:	f7f7 f974 	bl	80005f8 <__aeabi_dmul>
 8009310:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009314:	e7bc      	b.n	8009290 <_dtoa_r+0x5e8>
 8009316:	d10c      	bne.n	8009332 <_dtoa_r+0x68a>
 8009318:	4b98      	ldr	r3, [pc, #608]	@ (800957c <_dtoa_r+0x8d4>)
 800931a:	2200      	movs	r2, #0
 800931c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009320:	f7f7 f96a 	bl	80005f8 <__aeabi_dmul>
 8009324:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009328:	f7f7 fbec 	bl	8000b04 <__aeabi_dcmpge>
 800932c:	2800      	cmp	r0, #0
 800932e:	f000 8157 	beq.w	80095e0 <_dtoa_r+0x938>
 8009332:	2400      	movs	r4, #0
 8009334:	4625      	mov	r5, r4
 8009336:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009338:	43db      	mvns	r3, r3
 800933a:	9304      	str	r3, [sp, #16]
 800933c:	4656      	mov	r6, sl
 800933e:	2700      	movs	r7, #0
 8009340:	4621      	mov	r1, r4
 8009342:	4658      	mov	r0, fp
 8009344:	f000 fbb4 	bl	8009ab0 <_Bfree>
 8009348:	2d00      	cmp	r5, #0
 800934a:	d0dc      	beq.n	8009306 <_dtoa_r+0x65e>
 800934c:	b12f      	cbz	r7, 800935a <_dtoa_r+0x6b2>
 800934e:	42af      	cmp	r7, r5
 8009350:	d003      	beq.n	800935a <_dtoa_r+0x6b2>
 8009352:	4639      	mov	r1, r7
 8009354:	4658      	mov	r0, fp
 8009356:	f000 fbab 	bl	8009ab0 <_Bfree>
 800935a:	4629      	mov	r1, r5
 800935c:	4658      	mov	r0, fp
 800935e:	f000 fba7 	bl	8009ab0 <_Bfree>
 8009362:	e7d0      	b.n	8009306 <_dtoa_r+0x65e>
 8009364:	9704      	str	r7, [sp, #16]
 8009366:	4633      	mov	r3, r6
 8009368:	461e      	mov	r6, r3
 800936a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800936e:	2a39      	cmp	r2, #57	@ 0x39
 8009370:	d107      	bne.n	8009382 <_dtoa_r+0x6da>
 8009372:	459a      	cmp	sl, r3
 8009374:	d1f8      	bne.n	8009368 <_dtoa_r+0x6c0>
 8009376:	9a04      	ldr	r2, [sp, #16]
 8009378:	3201      	adds	r2, #1
 800937a:	9204      	str	r2, [sp, #16]
 800937c:	2230      	movs	r2, #48	@ 0x30
 800937e:	f88a 2000 	strb.w	r2, [sl]
 8009382:	781a      	ldrb	r2, [r3, #0]
 8009384:	3201      	adds	r2, #1
 8009386:	701a      	strb	r2, [r3, #0]
 8009388:	e7bd      	b.n	8009306 <_dtoa_r+0x65e>
 800938a:	4b7b      	ldr	r3, [pc, #492]	@ (8009578 <_dtoa_r+0x8d0>)
 800938c:	2200      	movs	r2, #0
 800938e:	f7f7 f933 	bl	80005f8 <__aeabi_dmul>
 8009392:	2200      	movs	r2, #0
 8009394:	2300      	movs	r3, #0
 8009396:	4604      	mov	r4, r0
 8009398:	460d      	mov	r5, r1
 800939a:	f7f7 fb95 	bl	8000ac8 <__aeabi_dcmpeq>
 800939e:	2800      	cmp	r0, #0
 80093a0:	f43f aebb 	beq.w	800911a <_dtoa_r+0x472>
 80093a4:	e6f0      	b.n	8009188 <_dtoa_r+0x4e0>
 80093a6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80093a8:	2a00      	cmp	r2, #0
 80093aa:	f000 80db 	beq.w	8009564 <_dtoa_r+0x8bc>
 80093ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80093b0:	2a01      	cmp	r2, #1
 80093b2:	f300 80bf 	bgt.w	8009534 <_dtoa_r+0x88c>
 80093b6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80093b8:	2a00      	cmp	r2, #0
 80093ba:	f000 80b7 	beq.w	800952c <_dtoa_r+0x884>
 80093be:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80093c2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80093c4:	4646      	mov	r6, r8
 80093c6:	9a08      	ldr	r2, [sp, #32]
 80093c8:	2101      	movs	r1, #1
 80093ca:	441a      	add	r2, r3
 80093cc:	4658      	mov	r0, fp
 80093ce:	4498      	add	r8, r3
 80093d0:	9208      	str	r2, [sp, #32]
 80093d2:	f000 fc21 	bl	8009c18 <__i2b>
 80093d6:	4605      	mov	r5, r0
 80093d8:	b15e      	cbz	r6, 80093f2 <_dtoa_r+0x74a>
 80093da:	9b08      	ldr	r3, [sp, #32]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	dd08      	ble.n	80093f2 <_dtoa_r+0x74a>
 80093e0:	42b3      	cmp	r3, r6
 80093e2:	9a08      	ldr	r2, [sp, #32]
 80093e4:	bfa8      	it	ge
 80093e6:	4633      	movge	r3, r6
 80093e8:	eba8 0803 	sub.w	r8, r8, r3
 80093ec:	1af6      	subs	r6, r6, r3
 80093ee:	1ad3      	subs	r3, r2, r3
 80093f0:	9308      	str	r3, [sp, #32]
 80093f2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80093f4:	b1f3      	cbz	r3, 8009434 <_dtoa_r+0x78c>
 80093f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	f000 80b7 	beq.w	800956c <_dtoa_r+0x8c4>
 80093fe:	b18c      	cbz	r4, 8009424 <_dtoa_r+0x77c>
 8009400:	4629      	mov	r1, r5
 8009402:	4622      	mov	r2, r4
 8009404:	4658      	mov	r0, fp
 8009406:	f000 fcc7 	bl	8009d98 <__pow5mult>
 800940a:	464a      	mov	r2, r9
 800940c:	4601      	mov	r1, r0
 800940e:	4605      	mov	r5, r0
 8009410:	4658      	mov	r0, fp
 8009412:	f000 fc17 	bl	8009c44 <__multiply>
 8009416:	4649      	mov	r1, r9
 8009418:	9004      	str	r0, [sp, #16]
 800941a:	4658      	mov	r0, fp
 800941c:	f000 fb48 	bl	8009ab0 <_Bfree>
 8009420:	9b04      	ldr	r3, [sp, #16]
 8009422:	4699      	mov	r9, r3
 8009424:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009426:	1b1a      	subs	r2, r3, r4
 8009428:	d004      	beq.n	8009434 <_dtoa_r+0x78c>
 800942a:	4649      	mov	r1, r9
 800942c:	4658      	mov	r0, fp
 800942e:	f000 fcb3 	bl	8009d98 <__pow5mult>
 8009432:	4681      	mov	r9, r0
 8009434:	2101      	movs	r1, #1
 8009436:	4658      	mov	r0, fp
 8009438:	f000 fbee 	bl	8009c18 <__i2b>
 800943c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800943e:	4604      	mov	r4, r0
 8009440:	2b00      	cmp	r3, #0
 8009442:	f000 81cf 	beq.w	80097e4 <_dtoa_r+0xb3c>
 8009446:	461a      	mov	r2, r3
 8009448:	4601      	mov	r1, r0
 800944a:	4658      	mov	r0, fp
 800944c:	f000 fca4 	bl	8009d98 <__pow5mult>
 8009450:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009452:	2b01      	cmp	r3, #1
 8009454:	4604      	mov	r4, r0
 8009456:	f300 8095 	bgt.w	8009584 <_dtoa_r+0x8dc>
 800945a:	9b02      	ldr	r3, [sp, #8]
 800945c:	2b00      	cmp	r3, #0
 800945e:	f040 8087 	bne.w	8009570 <_dtoa_r+0x8c8>
 8009462:	9b03      	ldr	r3, [sp, #12]
 8009464:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009468:	2b00      	cmp	r3, #0
 800946a:	f040 8089 	bne.w	8009580 <_dtoa_r+0x8d8>
 800946e:	9b03      	ldr	r3, [sp, #12]
 8009470:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009474:	0d1b      	lsrs	r3, r3, #20
 8009476:	051b      	lsls	r3, r3, #20
 8009478:	b12b      	cbz	r3, 8009486 <_dtoa_r+0x7de>
 800947a:	9b08      	ldr	r3, [sp, #32]
 800947c:	3301      	adds	r3, #1
 800947e:	9308      	str	r3, [sp, #32]
 8009480:	f108 0801 	add.w	r8, r8, #1
 8009484:	2301      	movs	r3, #1
 8009486:	930a      	str	r3, [sp, #40]	@ 0x28
 8009488:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800948a:	2b00      	cmp	r3, #0
 800948c:	f000 81b0 	beq.w	80097f0 <_dtoa_r+0xb48>
 8009490:	6923      	ldr	r3, [r4, #16]
 8009492:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009496:	6918      	ldr	r0, [r3, #16]
 8009498:	f000 fb72 	bl	8009b80 <__hi0bits>
 800949c:	f1c0 0020 	rsb	r0, r0, #32
 80094a0:	9b08      	ldr	r3, [sp, #32]
 80094a2:	4418      	add	r0, r3
 80094a4:	f010 001f 	ands.w	r0, r0, #31
 80094a8:	d077      	beq.n	800959a <_dtoa_r+0x8f2>
 80094aa:	f1c0 0320 	rsb	r3, r0, #32
 80094ae:	2b04      	cmp	r3, #4
 80094b0:	dd6b      	ble.n	800958a <_dtoa_r+0x8e2>
 80094b2:	9b08      	ldr	r3, [sp, #32]
 80094b4:	f1c0 001c 	rsb	r0, r0, #28
 80094b8:	4403      	add	r3, r0
 80094ba:	4480      	add	r8, r0
 80094bc:	4406      	add	r6, r0
 80094be:	9308      	str	r3, [sp, #32]
 80094c0:	f1b8 0f00 	cmp.w	r8, #0
 80094c4:	dd05      	ble.n	80094d2 <_dtoa_r+0x82a>
 80094c6:	4649      	mov	r1, r9
 80094c8:	4642      	mov	r2, r8
 80094ca:	4658      	mov	r0, fp
 80094cc:	f000 fcbe 	bl	8009e4c <__lshift>
 80094d0:	4681      	mov	r9, r0
 80094d2:	9b08      	ldr	r3, [sp, #32]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	dd05      	ble.n	80094e4 <_dtoa_r+0x83c>
 80094d8:	4621      	mov	r1, r4
 80094da:	461a      	mov	r2, r3
 80094dc:	4658      	mov	r0, fp
 80094de:	f000 fcb5 	bl	8009e4c <__lshift>
 80094e2:	4604      	mov	r4, r0
 80094e4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d059      	beq.n	800959e <_dtoa_r+0x8f6>
 80094ea:	4621      	mov	r1, r4
 80094ec:	4648      	mov	r0, r9
 80094ee:	f000 fd19 	bl	8009f24 <__mcmp>
 80094f2:	2800      	cmp	r0, #0
 80094f4:	da53      	bge.n	800959e <_dtoa_r+0x8f6>
 80094f6:	1e7b      	subs	r3, r7, #1
 80094f8:	9304      	str	r3, [sp, #16]
 80094fa:	4649      	mov	r1, r9
 80094fc:	2300      	movs	r3, #0
 80094fe:	220a      	movs	r2, #10
 8009500:	4658      	mov	r0, fp
 8009502:	f000 faf7 	bl	8009af4 <__multadd>
 8009506:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009508:	4681      	mov	r9, r0
 800950a:	2b00      	cmp	r3, #0
 800950c:	f000 8172 	beq.w	80097f4 <_dtoa_r+0xb4c>
 8009510:	2300      	movs	r3, #0
 8009512:	4629      	mov	r1, r5
 8009514:	220a      	movs	r2, #10
 8009516:	4658      	mov	r0, fp
 8009518:	f000 faec 	bl	8009af4 <__multadd>
 800951c:	9b00      	ldr	r3, [sp, #0]
 800951e:	2b00      	cmp	r3, #0
 8009520:	4605      	mov	r5, r0
 8009522:	dc67      	bgt.n	80095f4 <_dtoa_r+0x94c>
 8009524:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009526:	2b02      	cmp	r3, #2
 8009528:	dc41      	bgt.n	80095ae <_dtoa_r+0x906>
 800952a:	e063      	b.n	80095f4 <_dtoa_r+0x94c>
 800952c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800952e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009532:	e746      	b.n	80093c2 <_dtoa_r+0x71a>
 8009534:	9b07      	ldr	r3, [sp, #28]
 8009536:	1e5c      	subs	r4, r3, #1
 8009538:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800953a:	42a3      	cmp	r3, r4
 800953c:	bfbf      	itttt	lt
 800953e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009540:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8009542:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8009544:	1ae3      	sublt	r3, r4, r3
 8009546:	bfb4      	ite	lt
 8009548:	18d2      	addlt	r2, r2, r3
 800954a:	1b1c      	subge	r4, r3, r4
 800954c:	9b07      	ldr	r3, [sp, #28]
 800954e:	bfbc      	itt	lt
 8009550:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8009552:	2400      	movlt	r4, #0
 8009554:	2b00      	cmp	r3, #0
 8009556:	bfb5      	itete	lt
 8009558:	eba8 0603 	sublt.w	r6, r8, r3
 800955c:	9b07      	ldrge	r3, [sp, #28]
 800955e:	2300      	movlt	r3, #0
 8009560:	4646      	movge	r6, r8
 8009562:	e730      	b.n	80093c6 <_dtoa_r+0x71e>
 8009564:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009566:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009568:	4646      	mov	r6, r8
 800956a:	e735      	b.n	80093d8 <_dtoa_r+0x730>
 800956c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800956e:	e75c      	b.n	800942a <_dtoa_r+0x782>
 8009570:	2300      	movs	r3, #0
 8009572:	e788      	b.n	8009486 <_dtoa_r+0x7de>
 8009574:	3fe00000 	.word	0x3fe00000
 8009578:	40240000 	.word	0x40240000
 800957c:	40140000 	.word	0x40140000
 8009580:	9b02      	ldr	r3, [sp, #8]
 8009582:	e780      	b.n	8009486 <_dtoa_r+0x7de>
 8009584:	2300      	movs	r3, #0
 8009586:	930a      	str	r3, [sp, #40]	@ 0x28
 8009588:	e782      	b.n	8009490 <_dtoa_r+0x7e8>
 800958a:	d099      	beq.n	80094c0 <_dtoa_r+0x818>
 800958c:	9a08      	ldr	r2, [sp, #32]
 800958e:	331c      	adds	r3, #28
 8009590:	441a      	add	r2, r3
 8009592:	4498      	add	r8, r3
 8009594:	441e      	add	r6, r3
 8009596:	9208      	str	r2, [sp, #32]
 8009598:	e792      	b.n	80094c0 <_dtoa_r+0x818>
 800959a:	4603      	mov	r3, r0
 800959c:	e7f6      	b.n	800958c <_dtoa_r+0x8e4>
 800959e:	9b07      	ldr	r3, [sp, #28]
 80095a0:	9704      	str	r7, [sp, #16]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	dc20      	bgt.n	80095e8 <_dtoa_r+0x940>
 80095a6:	9300      	str	r3, [sp, #0]
 80095a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095aa:	2b02      	cmp	r3, #2
 80095ac:	dd1e      	ble.n	80095ec <_dtoa_r+0x944>
 80095ae:	9b00      	ldr	r3, [sp, #0]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	f47f aec0 	bne.w	8009336 <_dtoa_r+0x68e>
 80095b6:	4621      	mov	r1, r4
 80095b8:	2205      	movs	r2, #5
 80095ba:	4658      	mov	r0, fp
 80095bc:	f000 fa9a 	bl	8009af4 <__multadd>
 80095c0:	4601      	mov	r1, r0
 80095c2:	4604      	mov	r4, r0
 80095c4:	4648      	mov	r0, r9
 80095c6:	f000 fcad 	bl	8009f24 <__mcmp>
 80095ca:	2800      	cmp	r0, #0
 80095cc:	f77f aeb3 	ble.w	8009336 <_dtoa_r+0x68e>
 80095d0:	4656      	mov	r6, sl
 80095d2:	2331      	movs	r3, #49	@ 0x31
 80095d4:	f806 3b01 	strb.w	r3, [r6], #1
 80095d8:	9b04      	ldr	r3, [sp, #16]
 80095da:	3301      	adds	r3, #1
 80095dc:	9304      	str	r3, [sp, #16]
 80095de:	e6ae      	b.n	800933e <_dtoa_r+0x696>
 80095e0:	9c07      	ldr	r4, [sp, #28]
 80095e2:	9704      	str	r7, [sp, #16]
 80095e4:	4625      	mov	r5, r4
 80095e6:	e7f3      	b.n	80095d0 <_dtoa_r+0x928>
 80095e8:	9b07      	ldr	r3, [sp, #28]
 80095ea:	9300      	str	r3, [sp, #0]
 80095ec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	f000 8104 	beq.w	80097fc <_dtoa_r+0xb54>
 80095f4:	2e00      	cmp	r6, #0
 80095f6:	dd05      	ble.n	8009604 <_dtoa_r+0x95c>
 80095f8:	4629      	mov	r1, r5
 80095fa:	4632      	mov	r2, r6
 80095fc:	4658      	mov	r0, fp
 80095fe:	f000 fc25 	bl	8009e4c <__lshift>
 8009602:	4605      	mov	r5, r0
 8009604:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009606:	2b00      	cmp	r3, #0
 8009608:	d05a      	beq.n	80096c0 <_dtoa_r+0xa18>
 800960a:	6869      	ldr	r1, [r5, #4]
 800960c:	4658      	mov	r0, fp
 800960e:	f000 fa0f 	bl	8009a30 <_Balloc>
 8009612:	4606      	mov	r6, r0
 8009614:	b928      	cbnz	r0, 8009622 <_dtoa_r+0x97a>
 8009616:	4b84      	ldr	r3, [pc, #528]	@ (8009828 <_dtoa_r+0xb80>)
 8009618:	4602      	mov	r2, r0
 800961a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800961e:	f7ff bb5a 	b.w	8008cd6 <_dtoa_r+0x2e>
 8009622:	692a      	ldr	r2, [r5, #16]
 8009624:	3202      	adds	r2, #2
 8009626:	0092      	lsls	r2, r2, #2
 8009628:	f105 010c 	add.w	r1, r5, #12
 800962c:	300c      	adds	r0, #12
 800962e:	f001 f803 	bl	800a638 <memcpy>
 8009632:	2201      	movs	r2, #1
 8009634:	4631      	mov	r1, r6
 8009636:	4658      	mov	r0, fp
 8009638:	f000 fc08 	bl	8009e4c <__lshift>
 800963c:	f10a 0301 	add.w	r3, sl, #1
 8009640:	9307      	str	r3, [sp, #28]
 8009642:	9b00      	ldr	r3, [sp, #0]
 8009644:	4453      	add	r3, sl
 8009646:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009648:	9b02      	ldr	r3, [sp, #8]
 800964a:	f003 0301 	and.w	r3, r3, #1
 800964e:	462f      	mov	r7, r5
 8009650:	930a      	str	r3, [sp, #40]	@ 0x28
 8009652:	4605      	mov	r5, r0
 8009654:	9b07      	ldr	r3, [sp, #28]
 8009656:	4621      	mov	r1, r4
 8009658:	3b01      	subs	r3, #1
 800965a:	4648      	mov	r0, r9
 800965c:	9300      	str	r3, [sp, #0]
 800965e:	f7ff fa9a 	bl	8008b96 <quorem>
 8009662:	4639      	mov	r1, r7
 8009664:	9002      	str	r0, [sp, #8]
 8009666:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800966a:	4648      	mov	r0, r9
 800966c:	f000 fc5a 	bl	8009f24 <__mcmp>
 8009670:	462a      	mov	r2, r5
 8009672:	9008      	str	r0, [sp, #32]
 8009674:	4621      	mov	r1, r4
 8009676:	4658      	mov	r0, fp
 8009678:	f000 fc70 	bl	8009f5c <__mdiff>
 800967c:	68c2      	ldr	r2, [r0, #12]
 800967e:	4606      	mov	r6, r0
 8009680:	bb02      	cbnz	r2, 80096c4 <_dtoa_r+0xa1c>
 8009682:	4601      	mov	r1, r0
 8009684:	4648      	mov	r0, r9
 8009686:	f000 fc4d 	bl	8009f24 <__mcmp>
 800968a:	4602      	mov	r2, r0
 800968c:	4631      	mov	r1, r6
 800968e:	4658      	mov	r0, fp
 8009690:	920e      	str	r2, [sp, #56]	@ 0x38
 8009692:	f000 fa0d 	bl	8009ab0 <_Bfree>
 8009696:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009698:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800969a:	9e07      	ldr	r6, [sp, #28]
 800969c:	ea43 0102 	orr.w	r1, r3, r2
 80096a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80096a2:	4319      	orrs	r1, r3
 80096a4:	d110      	bne.n	80096c8 <_dtoa_r+0xa20>
 80096a6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80096aa:	d029      	beq.n	8009700 <_dtoa_r+0xa58>
 80096ac:	9b08      	ldr	r3, [sp, #32]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	dd02      	ble.n	80096b8 <_dtoa_r+0xa10>
 80096b2:	9b02      	ldr	r3, [sp, #8]
 80096b4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80096b8:	9b00      	ldr	r3, [sp, #0]
 80096ba:	f883 8000 	strb.w	r8, [r3]
 80096be:	e63f      	b.n	8009340 <_dtoa_r+0x698>
 80096c0:	4628      	mov	r0, r5
 80096c2:	e7bb      	b.n	800963c <_dtoa_r+0x994>
 80096c4:	2201      	movs	r2, #1
 80096c6:	e7e1      	b.n	800968c <_dtoa_r+0x9e4>
 80096c8:	9b08      	ldr	r3, [sp, #32]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	db04      	blt.n	80096d8 <_dtoa_r+0xa30>
 80096ce:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80096d0:	430b      	orrs	r3, r1
 80096d2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80096d4:	430b      	orrs	r3, r1
 80096d6:	d120      	bne.n	800971a <_dtoa_r+0xa72>
 80096d8:	2a00      	cmp	r2, #0
 80096da:	dded      	ble.n	80096b8 <_dtoa_r+0xa10>
 80096dc:	4649      	mov	r1, r9
 80096de:	2201      	movs	r2, #1
 80096e0:	4658      	mov	r0, fp
 80096e2:	f000 fbb3 	bl	8009e4c <__lshift>
 80096e6:	4621      	mov	r1, r4
 80096e8:	4681      	mov	r9, r0
 80096ea:	f000 fc1b 	bl	8009f24 <__mcmp>
 80096ee:	2800      	cmp	r0, #0
 80096f0:	dc03      	bgt.n	80096fa <_dtoa_r+0xa52>
 80096f2:	d1e1      	bne.n	80096b8 <_dtoa_r+0xa10>
 80096f4:	f018 0f01 	tst.w	r8, #1
 80096f8:	d0de      	beq.n	80096b8 <_dtoa_r+0xa10>
 80096fa:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80096fe:	d1d8      	bne.n	80096b2 <_dtoa_r+0xa0a>
 8009700:	9a00      	ldr	r2, [sp, #0]
 8009702:	2339      	movs	r3, #57	@ 0x39
 8009704:	7013      	strb	r3, [r2, #0]
 8009706:	4633      	mov	r3, r6
 8009708:	461e      	mov	r6, r3
 800970a:	3b01      	subs	r3, #1
 800970c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009710:	2a39      	cmp	r2, #57	@ 0x39
 8009712:	d052      	beq.n	80097ba <_dtoa_r+0xb12>
 8009714:	3201      	adds	r2, #1
 8009716:	701a      	strb	r2, [r3, #0]
 8009718:	e612      	b.n	8009340 <_dtoa_r+0x698>
 800971a:	2a00      	cmp	r2, #0
 800971c:	dd07      	ble.n	800972e <_dtoa_r+0xa86>
 800971e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009722:	d0ed      	beq.n	8009700 <_dtoa_r+0xa58>
 8009724:	9a00      	ldr	r2, [sp, #0]
 8009726:	f108 0301 	add.w	r3, r8, #1
 800972a:	7013      	strb	r3, [r2, #0]
 800972c:	e608      	b.n	8009340 <_dtoa_r+0x698>
 800972e:	9b07      	ldr	r3, [sp, #28]
 8009730:	9a07      	ldr	r2, [sp, #28]
 8009732:	f803 8c01 	strb.w	r8, [r3, #-1]
 8009736:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009738:	4293      	cmp	r3, r2
 800973a:	d028      	beq.n	800978e <_dtoa_r+0xae6>
 800973c:	4649      	mov	r1, r9
 800973e:	2300      	movs	r3, #0
 8009740:	220a      	movs	r2, #10
 8009742:	4658      	mov	r0, fp
 8009744:	f000 f9d6 	bl	8009af4 <__multadd>
 8009748:	42af      	cmp	r7, r5
 800974a:	4681      	mov	r9, r0
 800974c:	f04f 0300 	mov.w	r3, #0
 8009750:	f04f 020a 	mov.w	r2, #10
 8009754:	4639      	mov	r1, r7
 8009756:	4658      	mov	r0, fp
 8009758:	d107      	bne.n	800976a <_dtoa_r+0xac2>
 800975a:	f000 f9cb 	bl	8009af4 <__multadd>
 800975e:	4607      	mov	r7, r0
 8009760:	4605      	mov	r5, r0
 8009762:	9b07      	ldr	r3, [sp, #28]
 8009764:	3301      	adds	r3, #1
 8009766:	9307      	str	r3, [sp, #28]
 8009768:	e774      	b.n	8009654 <_dtoa_r+0x9ac>
 800976a:	f000 f9c3 	bl	8009af4 <__multadd>
 800976e:	4629      	mov	r1, r5
 8009770:	4607      	mov	r7, r0
 8009772:	2300      	movs	r3, #0
 8009774:	220a      	movs	r2, #10
 8009776:	4658      	mov	r0, fp
 8009778:	f000 f9bc 	bl	8009af4 <__multadd>
 800977c:	4605      	mov	r5, r0
 800977e:	e7f0      	b.n	8009762 <_dtoa_r+0xaba>
 8009780:	9b00      	ldr	r3, [sp, #0]
 8009782:	2b00      	cmp	r3, #0
 8009784:	bfcc      	ite	gt
 8009786:	461e      	movgt	r6, r3
 8009788:	2601      	movle	r6, #1
 800978a:	4456      	add	r6, sl
 800978c:	2700      	movs	r7, #0
 800978e:	4649      	mov	r1, r9
 8009790:	2201      	movs	r2, #1
 8009792:	4658      	mov	r0, fp
 8009794:	f000 fb5a 	bl	8009e4c <__lshift>
 8009798:	4621      	mov	r1, r4
 800979a:	4681      	mov	r9, r0
 800979c:	f000 fbc2 	bl	8009f24 <__mcmp>
 80097a0:	2800      	cmp	r0, #0
 80097a2:	dcb0      	bgt.n	8009706 <_dtoa_r+0xa5e>
 80097a4:	d102      	bne.n	80097ac <_dtoa_r+0xb04>
 80097a6:	f018 0f01 	tst.w	r8, #1
 80097aa:	d1ac      	bne.n	8009706 <_dtoa_r+0xa5e>
 80097ac:	4633      	mov	r3, r6
 80097ae:	461e      	mov	r6, r3
 80097b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80097b4:	2a30      	cmp	r2, #48	@ 0x30
 80097b6:	d0fa      	beq.n	80097ae <_dtoa_r+0xb06>
 80097b8:	e5c2      	b.n	8009340 <_dtoa_r+0x698>
 80097ba:	459a      	cmp	sl, r3
 80097bc:	d1a4      	bne.n	8009708 <_dtoa_r+0xa60>
 80097be:	9b04      	ldr	r3, [sp, #16]
 80097c0:	3301      	adds	r3, #1
 80097c2:	9304      	str	r3, [sp, #16]
 80097c4:	2331      	movs	r3, #49	@ 0x31
 80097c6:	f88a 3000 	strb.w	r3, [sl]
 80097ca:	e5b9      	b.n	8009340 <_dtoa_r+0x698>
 80097cc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80097ce:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800982c <_dtoa_r+0xb84>
 80097d2:	b11b      	cbz	r3, 80097dc <_dtoa_r+0xb34>
 80097d4:	f10a 0308 	add.w	r3, sl, #8
 80097d8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80097da:	6013      	str	r3, [r2, #0]
 80097dc:	4650      	mov	r0, sl
 80097de:	b019      	add	sp, #100	@ 0x64
 80097e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097e6:	2b01      	cmp	r3, #1
 80097e8:	f77f ae37 	ble.w	800945a <_dtoa_r+0x7b2>
 80097ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80097ee:	930a      	str	r3, [sp, #40]	@ 0x28
 80097f0:	2001      	movs	r0, #1
 80097f2:	e655      	b.n	80094a0 <_dtoa_r+0x7f8>
 80097f4:	9b00      	ldr	r3, [sp, #0]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	f77f aed6 	ble.w	80095a8 <_dtoa_r+0x900>
 80097fc:	4656      	mov	r6, sl
 80097fe:	4621      	mov	r1, r4
 8009800:	4648      	mov	r0, r9
 8009802:	f7ff f9c8 	bl	8008b96 <quorem>
 8009806:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800980a:	f806 8b01 	strb.w	r8, [r6], #1
 800980e:	9b00      	ldr	r3, [sp, #0]
 8009810:	eba6 020a 	sub.w	r2, r6, sl
 8009814:	4293      	cmp	r3, r2
 8009816:	ddb3      	ble.n	8009780 <_dtoa_r+0xad8>
 8009818:	4649      	mov	r1, r9
 800981a:	2300      	movs	r3, #0
 800981c:	220a      	movs	r2, #10
 800981e:	4658      	mov	r0, fp
 8009820:	f000 f968 	bl	8009af4 <__multadd>
 8009824:	4681      	mov	r9, r0
 8009826:	e7ea      	b.n	80097fe <_dtoa_r+0xb56>
 8009828:	0800aa94 	.word	0x0800aa94
 800982c:	0800aa18 	.word	0x0800aa18

08009830 <_free_r>:
 8009830:	b538      	push	{r3, r4, r5, lr}
 8009832:	4605      	mov	r5, r0
 8009834:	2900      	cmp	r1, #0
 8009836:	d041      	beq.n	80098bc <_free_r+0x8c>
 8009838:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800983c:	1f0c      	subs	r4, r1, #4
 800983e:	2b00      	cmp	r3, #0
 8009840:	bfb8      	it	lt
 8009842:	18e4      	addlt	r4, r4, r3
 8009844:	f000 f8e8 	bl	8009a18 <__malloc_lock>
 8009848:	4a1d      	ldr	r2, [pc, #116]	@ (80098c0 <_free_r+0x90>)
 800984a:	6813      	ldr	r3, [r2, #0]
 800984c:	b933      	cbnz	r3, 800985c <_free_r+0x2c>
 800984e:	6063      	str	r3, [r4, #4]
 8009850:	6014      	str	r4, [r2, #0]
 8009852:	4628      	mov	r0, r5
 8009854:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009858:	f000 b8e4 	b.w	8009a24 <__malloc_unlock>
 800985c:	42a3      	cmp	r3, r4
 800985e:	d908      	bls.n	8009872 <_free_r+0x42>
 8009860:	6820      	ldr	r0, [r4, #0]
 8009862:	1821      	adds	r1, r4, r0
 8009864:	428b      	cmp	r3, r1
 8009866:	bf01      	itttt	eq
 8009868:	6819      	ldreq	r1, [r3, #0]
 800986a:	685b      	ldreq	r3, [r3, #4]
 800986c:	1809      	addeq	r1, r1, r0
 800986e:	6021      	streq	r1, [r4, #0]
 8009870:	e7ed      	b.n	800984e <_free_r+0x1e>
 8009872:	461a      	mov	r2, r3
 8009874:	685b      	ldr	r3, [r3, #4]
 8009876:	b10b      	cbz	r3, 800987c <_free_r+0x4c>
 8009878:	42a3      	cmp	r3, r4
 800987a:	d9fa      	bls.n	8009872 <_free_r+0x42>
 800987c:	6811      	ldr	r1, [r2, #0]
 800987e:	1850      	adds	r0, r2, r1
 8009880:	42a0      	cmp	r0, r4
 8009882:	d10b      	bne.n	800989c <_free_r+0x6c>
 8009884:	6820      	ldr	r0, [r4, #0]
 8009886:	4401      	add	r1, r0
 8009888:	1850      	adds	r0, r2, r1
 800988a:	4283      	cmp	r3, r0
 800988c:	6011      	str	r1, [r2, #0]
 800988e:	d1e0      	bne.n	8009852 <_free_r+0x22>
 8009890:	6818      	ldr	r0, [r3, #0]
 8009892:	685b      	ldr	r3, [r3, #4]
 8009894:	6053      	str	r3, [r2, #4]
 8009896:	4408      	add	r0, r1
 8009898:	6010      	str	r0, [r2, #0]
 800989a:	e7da      	b.n	8009852 <_free_r+0x22>
 800989c:	d902      	bls.n	80098a4 <_free_r+0x74>
 800989e:	230c      	movs	r3, #12
 80098a0:	602b      	str	r3, [r5, #0]
 80098a2:	e7d6      	b.n	8009852 <_free_r+0x22>
 80098a4:	6820      	ldr	r0, [r4, #0]
 80098a6:	1821      	adds	r1, r4, r0
 80098a8:	428b      	cmp	r3, r1
 80098aa:	bf04      	itt	eq
 80098ac:	6819      	ldreq	r1, [r3, #0]
 80098ae:	685b      	ldreq	r3, [r3, #4]
 80098b0:	6063      	str	r3, [r4, #4]
 80098b2:	bf04      	itt	eq
 80098b4:	1809      	addeq	r1, r1, r0
 80098b6:	6021      	streq	r1, [r4, #0]
 80098b8:	6054      	str	r4, [r2, #4]
 80098ba:	e7ca      	b.n	8009852 <_free_r+0x22>
 80098bc:	bd38      	pop	{r3, r4, r5, pc}
 80098be:	bf00      	nop
 80098c0:	200006cc 	.word	0x200006cc

080098c4 <malloc>:
 80098c4:	4b02      	ldr	r3, [pc, #8]	@ (80098d0 <malloc+0xc>)
 80098c6:	4601      	mov	r1, r0
 80098c8:	6818      	ldr	r0, [r3, #0]
 80098ca:	f000 b825 	b.w	8009918 <_malloc_r>
 80098ce:	bf00      	nop
 80098d0:	20000018 	.word	0x20000018

080098d4 <sbrk_aligned>:
 80098d4:	b570      	push	{r4, r5, r6, lr}
 80098d6:	4e0f      	ldr	r6, [pc, #60]	@ (8009914 <sbrk_aligned+0x40>)
 80098d8:	460c      	mov	r4, r1
 80098da:	6831      	ldr	r1, [r6, #0]
 80098dc:	4605      	mov	r5, r0
 80098de:	b911      	cbnz	r1, 80098e6 <sbrk_aligned+0x12>
 80098e0:	f000 fe9a 	bl	800a618 <_sbrk_r>
 80098e4:	6030      	str	r0, [r6, #0]
 80098e6:	4621      	mov	r1, r4
 80098e8:	4628      	mov	r0, r5
 80098ea:	f000 fe95 	bl	800a618 <_sbrk_r>
 80098ee:	1c43      	adds	r3, r0, #1
 80098f0:	d103      	bne.n	80098fa <sbrk_aligned+0x26>
 80098f2:	f04f 34ff 	mov.w	r4, #4294967295
 80098f6:	4620      	mov	r0, r4
 80098f8:	bd70      	pop	{r4, r5, r6, pc}
 80098fa:	1cc4      	adds	r4, r0, #3
 80098fc:	f024 0403 	bic.w	r4, r4, #3
 8009900:	42a0      	cmp	r0, r4
 8009902:	d0f8      	beq.n	80098f6 <sbrk_aligned+0x22>
 8009904:	1a21      	subs	r1, r4, r0
 8009906:	4628      	mov	r0, r5
 8009908:	f000 fe86 	bl	800a618 <_sbrk_r>
 800990c:	3001      	adds	r0, #1
 800990e:	d1f2      	bne.n	80098f6 <sbrk_aligned+0x22>
 8009910:	e7ef      	b.n	80098f2 <sbrk_aligned+0x1e>
 8009912:	bf00      	nop
 8009914:	200006c8 	.word	0x200006c8

08009918 <_malloc_r>:
 8009918:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800991c:	1ccd      	adds	r5, r1, #3
 800991e:	f025 0503 	bic.w	r5, r5, #3
 8009922:	3508      	adds	r5, #8
 8009924:	2d0c      	cmp	r5, #12
 8009926:	bf38      	it	cc
 8009928:	250c      	movcc	r5, #12
 800992a:	2d00      	cmp	r5, #0
 800992c:	4606      	mov	r6, r0
 800992e:	db01      	blt.n	8009934 <_malloc_r+0x1c>
 8009930:	42a9      	cmp	r1, r5
 8009932:	d904      	bls.n	800993e <_malloc_r+0x26>
 8009934:	230c      	movs	r3, #12
 8009936:	6033      	str	r3, [r6, #0]
 8009938:	2000      	movs	r0, #0
 800993a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800993e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009a14 <_malloc_r+0xfc>
 8009942:	f000 f869 	bl	8009a18 <__malloc_lock>
 8009946:	f8d8 3000 	ldr.w	r3, [r8]
 800994a:	461c      	mov	r4, r3
 800994c:	bb44      	cbnz	r4, 80099a0 <_malloc_r+0x88>
 800994e:	4629      	mov	r1, r5
 8009950:	4630      	mov	r0, r6
 8009952:	f7ff ffbf 	bl	80098d4 <sbrk_aligned>
 8009956:	1c43      	adds	r3, r0, #1
 8009958:	4604      	mov	r4, r0
 800995a:	d158      	bne.n	8009a0e <_malloc_r+0xf6>
 800995c:	f8d8 4000 	ldr.w	r4, [r8]
 8009960:	4627      	mov	r7, r4
 8009962:	2f00      	cmp	r7, #0
 8009964:	d143      	bne.n	80099ee <_malloc_r+0xd6>
 8009966:	2c00      	cmp	r4, #0
 8009968:	d04b      	beq.n	8009a02 <_malloc_r+0xea>
 800996a:	6823      	ldr	r3, [r4, #0]
 800996c:	4639      	mov	r1, r7
 800996e:	4630      	mov	r0, r6
 8009970:	eb04 0903 	add.w	r9, r4, r3
 8009974:	f000 fe50 	bl	800a618 <_sbrk_r>
 8009978:	4581      	cmp	r9, r0
 800997a:	d142      	bne.n	8009a02 <_malloc_r+0xea>
 800997c:	6821      	ldr	r1, [r4, #0]
 800997e:	1a6d      	subs	r5, r5, r1
 8009980:	4629      	mov	r1, r5
 8009982:	4630      	mov	r0, r6
 8009984:	f7ff ffa6 	bl	80098d4 <sbrk_aligned>
 8009988:	3001      	adds	r0, #1
 800998a:	d03a      	beq.n	8009a02 <_malloc_r+0xea>
 800998c:	6823      	ldr	r3, [r4, #0]
 800998e:	442b      	add	r3, r5
 8009990:	6023      	str	r3, [r4, #0]
 8009992:	f8d8 3000 	ldr.w	r3, [r8]
 8009996:	685a      	ldr	r2, [r3, #4]
 8009998:	bb62      	cbnz	r2, 80099f4 <_malloc_r+0xdc>
 800999a:	f8c8 7000 	str.w	r7, [r8]
 800999e:	e00f      	b.n	80099c0 <_malloc_r+0xa8>
 80099a0:	6822      	ldr	r2, [r4, #0]
 80099a2:	1b52      	subs	r2, r2, r5
 80099a4:	d420      	bmi.n	80099e8 <_malloc_r+0xd0>
 80099a6:	2a0b      	cmp	r2, #11
 80099a8:	d917      	bls.n	80099da <_malloc_r+0xc2>
 80099aa:	1961      	adds	r1, r4, r5
 80099ac:	42a3      	cmp	r3, r4
 80099ae:	6025      	str	r5, [r4, #0]
 80099b0:	bf18      	it	ne
 80099b2:	6059      	strne	r1, [r3, #4]
 80099b4:	6863      	ldr	r3, [r4, #4]
 80099b6:	bf08      	it	eq
 80099b8:	f8c8 1000 	streq.w	r1, [r8]
 80099bc:	5162      	str	r2, [r4, r5]
 80099be:	604b      	str	r3, [r1, #4]
 80099c0:	4630      	mov	r0, r6
 80099c2:	f000 f82f 	bl	8009a24 <__malloc_unlock>
 80099c6:	f104 000b 	add.w	r0, r4, #11
 80099ca:	1d23      	adds	r3, r4, #4
 80099cc:	f020 0007 	bic.w	r0, r0, #7
 80099d0:	1ac2      	subs	r2, r0, r3
 80099d2:	bf1c      	itt	ne
 80099d4:	1a1b      	subne	r3, r3, r0
 80099d6:	50a3      	strne	r3, [r4, r2]
 80099d8:	e7af      	b.n	800993a <_malloc_r+0x22>
 80099da:	6862      	ldr	r2, [r4, #4]
 80099dc:	42a3      	cmp	r3, r4
 80099de:	bf0c      	ite	eq
 80099e0:	f8c8 2000 	streq.w	r2, [r8]
 80099e4:	605a      	strne	r2, [r3, #4]
 80099e6:	e7eb      	b.n	80099c0 <_malloc_r+0xa8>
 80099e8:	4623      	mov	r3, r4
 80099ea:	6864      	ldr	r4, [r4, #4]
 80099ec:	e7ae      	b.n	800994c <_malloc_r+0x34>
 80099ee:	463c      	mov	r4, r7
 80099f0:	687f      	ldr	r7, [r7, #4]
 80099f2:	e7b6      	b.n	8009962 <_malloc_r+0x4a>
 80099f4:	461a      	mov	r2, r3
 80099f6:	685b      	ldr	r3, [r3, #4]
 80099f8:	42a3      	cmp	r3, r4
 80099fa:	d1fb      	bne.n	80099f4 <_malloc_r+0xdc>
 80099fc:	2300      	movs	r3, #0
 80099fe:	6053      	str	r3, [r2, #4]
 8009a00:	e7de      	b.n	80099c0 <_malloc_r+0xa8>
 8009a02:	230c      	movs	r3, #12
 8009a04:	6033      	str	r3, [r6, #0]
 8009a06:	4630      	mov	r0, r6
 8009a08:	f000 f80c 	bl	8009a24 <__malloc_unlock>
 8009a0c:	e794      	b.n	8009938 <_malloc_r+0x20>
 8009a0e:	6005      	str	r5, [r0, #0]
 8009a10:	e7d6      	b.n	80099c0 <_malloc_r+0xa8>
 8009a12:	bf00      	nop
 8009a14:	200006cc 	.word	0x200006cc

08009a18 <__malloc_lock>:
 8009a18:	4801      	ldr	r0, [pc, #4]	@ (8009a20 <__malloc_lock+0x8>)
 8009a1a:	f7ff b8ba 	b.w	8008b92 <__retarget_lock_acquire_recursive>
 8009a1e:	bf00      	nop
 8009a20:	200006c4 	.word	0x200006c4

08009a24 <__malloc_unlock>:
 8009a24:	4801      	ldr	r0, [pc, #4]	@ (8009a2c <__malloc_unlock+0x8>)
 8009a26:	f7ff b8b5 	b.w	8008b94 <__retarget_lock_release_recursive>
 8009a2a:	bf00      	nop
 8009a2c:	200006c4 	.word	0x200006c4

08009a30 <_Balloc>:
 8009a30:	b570      	push	{r4, r5, r6, lr}
 8009a32:	69c6      	ldr	r6, [r0, #28]
 8009a34:	4604      	mov	r4, r0
 8009a36:	460d      	mov	r5, r1
 8009a38:	b976      	cbnz	r6, 8009a58 <_Balloc+0x28>
 8009a3a:	2010      	movs	r0, #16
 8009a3c:	f7ff ff42 	bl	80098c4 <malloc>
 8009a40:	4602      	mov	r2, r0
 8009a42:	61e0      	str	r0, [r4, #28]
 8009a44:	b920      	cbnz	r0, 8009a50 <_Balloc+0x20>
 8009a46:	4b18      	ldr	r3, [pc, #96]	@ (8009aa8 <_Balloc+0x78>)
 8009a48:	4818      	ldr	r0, [pc, #96]	@ (8009aac <_Balloc+0x7c>)
 8009a4a:	216b      	movs	r1, #107	@ 0x6b
 8009a4c:	f000 fe02 	bl	800a654 <__assert_func>
 8009a50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009a54:	6006      	str	r6, [r0, #0]
 8009a56:	60c6      	str	r6, [r0, #12]
 8009a58:	69e6      	ldr	r6, [r4, #28]
 8009a5a:	68f3      	ldr	r3, [r6, #12]
 8009a5c:	b183      	cbz	r3, 8009a80 <_Balloc+0x50>
 8009a5e:	69e3      	ldr	r3, [r4, #28]
 8009a60:	68db      	ldr	r3, [r3, #12]
 8009a62:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009a66:	b9b8      	cbnz	r0, 8009a98 <_Balloc+0x68>
 8009a68:	2101      	movs	r1, #1
 8009a6a:	fa01 f605 	lsl.w	r6, r1, r5
 8009a6e:	1d72      	adds	r2, r6, #5
 8009a70:	0092      	lsls	r2, r2, #2
 8009a72:	4620      	mov	r0, r4
 8009a74:	f000 fe0c 	bl	800a690 <_calloc_r>
 8009a78:	b160      	cbz	r0, 8009a94 <_Balloc+0x64>
 8009a7a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009a7e:	e00e      	b.n	8009a9e <_Balloc+0x6e>
 8009a80:	2221      	movs	r2, #33	@ 0x21
 8009a82:	2104      	movs	r1, #4
 8009a84:	4620      	mov	r0, r4
 8009a86:	f000 fe03 	bl	800a690 <_calloc_r>
 8009a8a:	69e3      	ldr	r3, [r4, #28]
 8009a8c:	60f0      	str	r0, [r6, #12]
 8009a8e:	68db      	ldr	r3, [r3, #12]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d1e4      	bne.n	8009a5e <_Balloc+0x2e>
 8009a94:	2000      	movs	r0, #0
 8009a96:	bd70      	pop	{r4, r5, r6, pc}
 8009a98:	6802      	ldr	r2, [r0, #0]
 8009a9a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009aa4:	e7f7      	b.n	8009a96 <_Balloc+0x66>
 8009aa6:	bf00      	nop
 8009aa8:	0800aa25 	.word	0x0800aa25
 8009aac:	0800aaa5 	.word	0x0800aaa5

08009ab0 <_Bfree>:
 8009ab0:	b570      	push	{r4, r5, r6, lr}
 8009ab2:	69c6      	ldr	r6, [r0, #28]
 8009ab4:	4605      	mov	r5, r0
 8009ab6:	460c      	mov	r4, r1
 8009ab8:	b976      	cbnz	r6, 8009ad8 <_Bfree+0x28>
 8009aba:	2010      	movs	r0, #16
 8009abc:	f7ff ff02 	bl	80098c4 <malloc>
 8009ac0:	4602      	mov	r2, r0
 8009ac2:	61e8      	str	r0, [r5, #28]
 8009ac4:	b920      	cbnz	r0, 8009ad0 <_Bfree+0x20>
 8009ac6:	4b09      	ldr	r3, [pc, #36]	@ (8009aec <_Bfree+0x3c>)
 8009ac8:	4809      	ldr	r0, [pc, #36]	@ (8009af0 <_Bfree+0x40>)
 8009aca:	218f      	movs	r1, #143	@ 0x8f
 8009acc:	f000 fdc2 	bl	800a654 <__assert_func>
 8009ad0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009ad4:	6006      	str	r6, [r0, #0]
 8009ad6:	60c6      	str	r6, [r0, #12]
 8009ad8:	b13c      	cbz	r4, 8009aea <_Bfree+0x3a>
 8009ada:	69eb      	ldr	r3, [r5, #28]
 8009adc:	6862      	ldr	r2, [r4, #4]
 8009ade:	68db      	ldr	r3, [r3, #12]
 8009ae0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009ae4:	6021      	str	r1, [r4, #0]
 8009ae6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009aea:	bd70      	pop	{r4, r5, r6, pc}
 8009aec:	0800aa25 	.word	0x0800aa25
 8009af0:	0800aaa5 	.word	0x0800aaa5

08009af4 <__multadd>:
 8009af4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009af8:	690d      	ldr	r5, [r1, #16]
 8009afa:	4607      	mov	r7, r0
 8009afc:	460c      	mov	r4, r1
 8009afe:	461e      	mov	r6, r3
 8009b00:	f101 0c14 	add.w	ip, r1, #20
 8009b04:	2000      	movs	r0, #0
 8009b06:	f8dc 3000 	ldr.w	r3, [ip]
 8009b0a:	b299      	uxth	r1, r3
 8009b0c:	fb02 6101 	mla	r1, r2, r1, r6
 8009b10:	0c1e      	lsrs	r6, r3, #16
 8009b12:	0c0b      	lsrs	r3, r1, #16
 8009b14:	fb02 3306 	mla	r3, r2, r6, r3
 8009b18:	b289      	uxth	r1, r1
 8009b1a:	3001      	adds	r0, #1
 8009b1c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009b20:	4285      	cmp	r5, r0
 8009b22:	f84c 1b04 	str.w	r1, [ip], #4
 8009b26:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009b2a:	dcec      	bgt.n	8009b06 <__multadd+0x12>
 8009b2c:	b30e      	cbz	r6, 8009b72 <__multadd+0x7e>
 8009b2e:	68a3      	ldr	r3, [r4, #8]
 8009b30:	42ab      	cmp	r3, r5
 8009b32:	dc19      	bgt.n	8009b68 <__multadd+0x74>
 8009b34:	6861      	ldr	r1, [r4, #4]
 8009b36:	4638      	mov	r0, r7
 8009b38:	3101      	adds	r1, #1
 8009b3a:	f7ff ff79 	bl	8009a30 <_Balloc>
 8009b3e:	4680      	mov	r8, r0
 8009b40:	b928      	cbnz	r0, 8009b4e <__multadd+0x5a>
 8009b42:	4602      	mov	r2, r0
 8009b44:	4b0c      	ldr	r3, [pc, #48]	@ (8009b78 <__multadd+0x84>)
 8009b46:	480d      	ldr	r0, [pc, #52]	@ (8009b7c <__multadd+0x88>)
 8009b48:	21ba      	movs	r1, #186	@ 0xba
 8009b4a:	f000 fd83 	bl	800a654 <__assert_func>
 8009b4e:	6922      	ldr	r2, [r4, #16]
 8009b50:	3202      	adds	r2, #2
 8009b52:	f104 010c 	add.w	r1, r4, #12
 8009b56:	0092      	lsls	r2, r2, #2
 8009b58:	300c      	adds	r0, #12
 8009b5a:	f000 fd6d 	bl	800a638 <memcpy>
 8009b5e:	4621      	mov	r1, r4
 8009b60:	4638      	mov	r0, r7
 8009b62:	f7ff ffa5 	bl	8009ab0 <_Bfree>
 8009b66:	4644      	mov	r4, r8
 8009b68:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009b6c:	3501      	adds	r5, #1
 8009b6e:	615e      	str	r6, [r3, #20]
 8009b70:	6125      	str	r5, [r4, #16]
 8009b72:	4620      	mov	r0, r4
 8009b74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b78:	0800aa94 	.word	0x0800aa94
 8009b7c:	0800aaa5 	.word	0x0800aaa5

08009b80 <__hi0bits>:
 8009b80:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009b84:	4603      	mov	r3, r0
 8009b86:	bf36      	itet	cc
 8009b88:	0403      	lslcc	r3, r0, #16
 8009b8a:	2000      	movcs	r0, #0
 8009b8c:	2010      	movcc	r0, #16
 8009b8e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009b92:	bf3c      	itt	cc
 8009b94:	021b      	lslcc	r3, r3, #8
 8009b96:	3008      	addcc	r0, #8
 8009b98:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009b9c:	bf3c      	itt	cc
 8009b9e:	011b      	lslcc	r3, r3, #4
 8009ba0:	3004      	addcc	r0, #4
 8009ba2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009ba6:	bf3c      	itt	cc
 8009ba8:	009b      	lslcc	r3, r3, #2
 8009baa:	3002      	addcc	r0, #2
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	db05      	blt.n	8009bbc <__hi0bits+0x3c>
 8009bb0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009bb4:	f100 0001 	add.w	r0, r0, #1
 8009bb8:	bf08      	it	eq
 8009bba:	2020      	moveq	r0, #32
 8009bbc:	4770      	bx	lr

08009bbe <__lo0bits>:
 8009bbe:	6803      	ldr	r3, [r0, #0]
 8009bc0:	4602      	mov	r2, r0
 8009bc2:	f013 0007 	ands.w	r0, r3, #7
 8009bc6:	d00b      	beq.n	8009be0 <__lo0bits+0x22>
 8009bc8:	07d9      	lsls	r1, r3, #31
 8009bca:	d421      	bmi.n	8009c10 <__lo0bits+0x52>
 8009bcc:	0798      	lsls	r0, r3, #30
 8009bce:	bf49      	itett	mi
 8009bd0:	085b      	lsrmi	r3, r3, #1
 8009bd2:	089b      	lsrpl	r3, r3, #2
 8009bd4:	2001      	movmi	r0, #1
 8009bd6:	6013      	strmi	r3, [r2, #0]
 8009bd8:	bf5c      	itt	pl
 8009bda:	6013      	strpl	r3, [r2, #0]
 8009bdc:	2002      	movpl	r0, #2
 8009bde:	4770      	bx	lr
 8009be0:	b299      	uxth	r1, r3
 8009be2:	b909      	cbnz	r1, 8009be8 <__lo0bits+0x2a>
 8009be4:	0c1b      	lsrs	r3, r3, #16
 8009be6:	2010      	movs	r0, #16
 8009be8:	b2d9      	uxtb	r1, r3
 8009bea:	b909      	cbnz	r1, 8009bf0 <__lo0bits+0x32>
 8009bec:	3008      	adds	r0, #8
 8009bee:	0a1b      	lsrs	r3, r3, #8
 8009bf0:	0719      	lsls	r1, r3, #28
 8009bf2:	bf04      	itt	eq
 8009bf4:	091b      	lsreq	r3, r3, #4
 8009bf6:	3004      	addeq	r0, #4
 8009bf8:	0799      	lsls	r1, r3, #30
 8009bfa:	bf04      	itt	eq
 8009bfc:	089b      	lsreq	r3, r3, #2
 8009bfe:	3002      	addeq	r0, #2
 8009c00:	07d9      	lsls	r1, r3, #31
 8009c02:	d403      	bmi.n	8009c0c <__lo0bits+0x4e>
 8009c04:	085b      	lsrs	r3, r3, #1
 8009c06:	f100 0001 	add.w	r0, r0, #1
 8009c0a:	d003      	beq.n	8009c14 <__lo0bits+0x56>
 8009c0c:	6013      	str	r3, [r2, #0]
 8009c0e:	4770      	bx	lr
 8009c10:	2000      	movs	r0, #0
 8009c12:	4770      	bx	lr
 8009c14:	2020      	movs	r0, #32
 8009c16:	4770      	bx	lr

08009c18 <__i2b>:
 8009c18:	b510      	push	{r4, lr}
 8009c1a:	460c      	mov	r4, r1
 8009c1c:	2101      	movs	r1, #1
 8009c1e:	f7ff ff07 	bl	8009a30 <_Balloc>
 8009c22:	4602      	mov	r2, r0
 8009c24:	b928      	cbnz	r0, 8009c32 <__i2b+0x1a>
 8009c26:	4b05      	ldr	r3, [pc, #20]	@ (8009c3c <__i2b+0x24>)
 8009c28:	4805      	ldr	r0, [pc, #20]	@ (8009c40 <__i2b+0x28>)
 8009c2a:	f240 1145 	movw	r1, #325	@ 0x145
 8009c2e:	f000 fd11 	bl	800a654 <__assert_func>
 8009c32:	2301      	movs	r3, #1
 8009c34:	6144      	str	r4, [r0, #20]
 8009c36:	6103      	str	r3, [r0, #16]
 8009c38:	bd10      	pop	{r4, pc}
 8009c3a:	bf00      	nop
 8009c3c:	0800aa94 	.word	0x0800aa94
 8009c40:	0800aaa5 	.word	0x0800aaa5

08009c44 <__multiply>:
 8009c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c48:	4614      	mov	r4, r2
 8009c4a:	690a      	ldr	r2, [r1, #16]
 8009c4c:	6923      	ldr	r3, [r4, #16]
 8009c4e:	429a      	cmp	r2, r3
 8009c50:	bfa8      	it	ge
 8009c52:	4623      	movge	r3, r4
 8009c54:	460f      	mov	r7, r1
 8009c56:	bfa4      	itt	ge
 8009c58:	460c      	movge	r4, r1
 8009c5a:	461f      	movge	r7, r3
 8009c5c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009c60:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009c64:	68a3      	ldr	r3, [r4, #8]
 8009c66:	6861      	ldr	r1, [r4, #4]
 8009c68:	eb0a 0609 	add.w	r6, sl, r9
 8009c6c:	42b3      	cmp	r3, r6
 8009c6e:	b085      	sub	sp, #20
 8009c70:	bfb8      	it	lt
 8009c72:	3101      	addlt	r1, #1
 8009c74:	f7ff fedc 	bl	8009a30 <_Balloc>
 8009c78:	b930      	cbnz	r0, 8009c88 <__multiply+0x44>
 8009c7a:	4602      	mov	r2, r0
 8009c7c:	4b44      	ldr	r3, [pc, #272]	@ (8009d90 <__multiply+0x14c>)
 8009c7e:	4845      	ldr	r0, [pc, #276]	@ (8009d94 <__multiply+0x150>)
 8009c80:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009c84:	f000 fce6 	bl	800a654 <__assert_func>
 8009c88:	f100 0514 	add.w	r5, r0, #20
 8009c8c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009c90:	462b      	mov	r3, r5
 8009c92:	2200      	movs	r2, #0
 8009c94:	4543      	cmp	r3, r8
 8009c96:	d321      	bcc.n	8009cdc <__multiply+0x98>
 8009c98:	f107 0114 	add.w	r1, r7, #20
 8009c9c:	f104 0214 	add.w	r2, r4, #20
 8009ca0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8009ca4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009ca8:	9302      	str	r3, [sp, #8]
 8009caa:	1b13      	subs	r3, r2, r4
 8009cac:	3b15      	subs	r3, #21
 8009cae:	f023 0303 	bic.w	r3, r3, #3
 8009cb2:	3304      	adds	r3, #4
 8009cb4:	f104 0715 	add.w	r7, r4, #21
 8009cb8:	42ba      	cmp	r2, r7
 8009cba:	bf38      	it	cc
 8009cbc:	2304      	movcc	r3, #4
 8009cbe:	9301      	str	r3, [sp, #4]
 8009cc0:	9b02      	ldr	r3, [sp, #8]
 8009cc2:	9103      	str	r1, [sp, #12]
 8009cc4:	428b      	cmp	r3, r1
 8009cc6:	d80c      	bhi.n	8009ce2 <__multiply+0x9e>
 8009cc8:	2e00      	cmp	r6, #0
 8009cca:	dd03      	ble.n	8009cd4 <__multiply+0x90>
 8009ccc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d05b      	beq.n	8009d8c <__multiply+0x148>
 8009cd4:	6106      	str	r6, [r0, #16]
 8009cd6:	b005      	add	sp, #20
 8009cd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cdc:	f843 2b04 	str.w	r2, [r3], #4
 8009ce0:	e7d8      	b.n	8009c94 <__multiply+0x50>
 8009ce2:	f8b1 a000 	ldrh.w	sl, [r1]
 8009ce6:	f1ba 0f00 	cmp.w	sl, #0
 8009cea:	d024      	beq.n	8009d36 <__multiply+0xf2>
 8009cec:	f104 0e14 	add.w	lr, r4, #20
 8009cf0:	46a9      	mov	r9, r5
 8009cf2:	f04f 0c00 	mov.w	ip, #0
 8009cf6:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009cfa:	f8d9 3000 	ldr.w	r3, [r9]
 8009cfe:	fa1f fb87 	uxth.w	fp, r7
 8009d02:	b29b      	uxth	r3, r3
 8009d04:	fb0a 330b 	mla	r3, sl, fp, r3
 8009d08:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8009d0c:	f8d9 7000 	ldr.w	r7, [r9]
 8009d10:	4463      	add	r3, ip
 8009d12:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009d16:	fb0a c70b 	mla	r7, sl, fp, ip
 8009d1a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8009d1e:	b29b      	uxth	r3, r3
 8009d20:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009d24:	4572      	cmp	r2, lr
 8009d26:	f849 3b04 	str.w	r3, [r9], #4
 8009d2a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009d2e:	d8e2      	bhi.n	8009cf6 <__multiply+0xb2>
 8009d30:	9b01      	ldr	r3, [sp, #4]
 8009d32:	f845 c003 	str.w	ip, [r5, r3]
 8009d36:	9b03      	ldr	r3, [sp, #12]
 8009d38:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009d3c:	3104      	adds	r1, #4
 8009d3e:	f1b9 0f00 	cmp.w	r9, #0
 8009d42:	d021      	beq.n	8009d88 <__multiply+0x144>
 8009d44:	682b      	ldr	r3, [r5, #0]
 8009d46:	f104 0c14 	add.w	ip, r4, #20
 8009d4a:	46ae      	mov	lr, r5
 8009d4c:	f04f 0a00 	mov.w	sl, #0
 8009d50:	f8bc b000 	ldrh.w	fp, [ip]
 8009d54:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009d58:	fb09 770b 	mla	r7, r9, fp, r7
 8009d5c:	4457      	add	r7, sl
 8009d5e:	b29b      	uxth	r3, r3
 8009d60:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009d64:	f84e 3b04 	str.w	r3, [lr], #4
 8009d68:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009d6c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009d70:	f8be 3000 	ldrh.w	r3, [lr]
 8009d74:	fb09 330a 	mla	r3, r9, sl, r3
 8009d78:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009d7c:	4562      	cmp	r2, ip
 8009d7e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009d82:	d8e5      	bhi.n	8009d50 <__multiply+0x10c>
 8009d84:	9f01      	ldr	r7, [sp, #4]
 8009d86:	51eb      	str	r3, [r5, r7]
 8009d88:	3504      	adds	r5, #4
 8009d8a:	e799      	b.n	8009cc0 <__multiply+0x7c>
 8009d8c:	3e01      	subs	r6, #1
 8009d8e:	e79b      	b.n	8009cc8 <__multiply+0x84>
 8009d90:	0800aa94 	.word	0x0800aa94
 8009d94:	0800aaa5 	.word	0x0800aaa5

08009d98 <__pow5mult>:
 8009d98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d9c:	4615      	mov	r5, r2
 8009d9e:	f012 0203 	ands.w	r2, r2, #3
 8009da2:	4607      	mov	r7, r0
 8009da4:	460e      	mov	r6, r1
 8009da6:	d007      	beq.n	8009db8 <__pow5mult+0x20>
 8009da8:	4c25      	ldr	r4, [pc, #148]	@ (8009e40 <__pow5mult+0xa8>)
 8009daa:	3a01      	subs	r2, #1
 8009dac:	2300      	movs	r3, #0
 8009dae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009db2:	f7ff fe9f 	bl	8009af4 <__multadd>
 8009db6:	4606      	mov	r6, r0
 8009db8:	10ad      	asrs	r5, r5, #2
 8009dba:	d03d      	beq.n	8009e38 <__pow5mult+0xa0>
 8009dbc:	69fc      	ldr	r4, [r7, #28]
 8009dbe:	b97c      	cbnz	r4, 8009de0 <__pow5mult+0x48>
 8009dc0:	2010      	movs	r0, #16
 8009dc2:	f7ff fd7f 	bl	80098c4 <malloc>
 8009dc6:	4602      	mov	r2, r0
 8009dc8:	61f8      	str	r0, [r7, #28]
 8009dca:	b928      	cbnz	r0, 8009dd8 <__pow5mult+0x40>
 8009dcc:	4b1d      	ldr	r3, [pc, #116]	@ (8009e44 <__pow5mult+0xac>)
 8009dce:	481e      	ldr	r0, [pc, #120]	@ (8009e48 <__pow5mult+0xb0>)
 8009dd0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009dd4:	f000 fc3e 	bl	800a654 <__assert_func>
 8009dd8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009ddc:	6004      	str	r4, [r0, #0]
 8009dde:	60c4      	str	r4, [r0, #12]
 8009de0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009de4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009de8:	b94c      	cbnz	r4, 8009dfe <__pow5mult+0x66>
 8009dea:	f240 2171 	movw	r1, #625	@ 0x271
 8009dee:	4638      	mov	r0, r7
 8009df0:	f7ff ff12 	bl	8009c18 <__i2b>
 8009df4:	2300      	movs	r3, #0
 8009df6:	f8c8 0008 	str.w	r0, [r8, #8]
 8009dfa:	4604      	mov	r4, r0
 8009dfc:	6003      	str	r3, [r0, #0]
 8009dfe:	f04f 0900 	mov.w	r9, #0
 8009e02:	07eb      	lsls	r3, r5, #31
 8009e04:	d50a      	bpl.n	8009e1c <__pow5mult+0x84>
 8009e06:	4631      	mov	r1, r6
 8009e08:	4622      	mov	r2, r4
 8009e0a:	4638      	mov	r0, r7
 8009e0c:	f7ff ff1a 	bl	8009c44 <__multiply>
 8009e10:	4631      	mov	r1, r6
 8009e12:	4680      	mov	r8, r0
 8009e14:	4638      	mov	r0, r7
 8009e16:	f7ff fe4b 	bl	8009ab0 <_Bfree>
 8009e1a:	4646      	mov	r6, r8
 8009e1c:	106d      	asrs	r5, r5, #1
 8009e1e:	d00b      	beq.n	8009e38 <__pow5mult+0xa0>
 8009e20:	6820      	ldr	r0, [r4, #0]
 8009e22:	b938      	cbnz	r0, 8009e34 <__pow5mult+0x9c>
 8009e24:	4622      	mov	r2, r4
 8009e26:	4621      	mov	r1, r4
 8009e28:	4638      	mov	r0, r7
 8009e2a:	f7ff ff0b 	bl	8009c44 <__multiply>
 8009e2e:	6020      	str	r0, [r4, #0]
 8009e30:	f8c0 9000 	str.w	r9, [r0]
 8009e34:	4604      	mov	r4, r0
 8009e36:	e7e4      	b.n	8009e02 <__pow5mult+0x6a>
 8009e38:	4630      	mov	r0, r6
 8009e3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e3e:	bf00      	nop
 8009e40:	0800ab00 	.word	0x0800ab00
 8009e44:	0800aa25 	.word	0x0800aa25
 8009e48:	0800aaa5 	.word	0x0800aaa5

08009e4c <__lshift>:
 8009e4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e50:	460c      	mov	r4, r1
 8009e52:	6849      	ldr	r1, [r1, #4]
 8009e54:	6923      	ldr	r3, [r4, #16]
 8009e56:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009e5a:	68a3      	ldr	r3, [r4, #8]
 8009e5c:	4607      	mov	r7, r0
 8009e5e:	4691      	mov	r9, r2
 8009e60:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009e64:	f108 0601 	add.w	r6, r8, #1
 8009e68:	42b3      	cmp	r3, r6
 8009e6a:	db0b      	blt.n	8009e84 <__lshift+0x38>
 8009e6c:	4638      	mov	r0, r7
 8009e6e:	f7ff fddf 	bl	8009a30 <_Balloc>
 8009e72:	4605      	mov	r5, r0
 8009e74:	b948      	cbnz	r0, 8009e8a <__lshift+0x3e>
 8009e76:	4602      	mov	r2, r0
 8009e78:	4b28      	ldr	r3, [pc, #160]	@ (8009f1c <__lshift+0xd0>)
 8009e7a:	4829      	ldr	r0, [pc, #164]	@ (8009f20 <__lshift+0xd4>)
 8009e7c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009e80:	f000 fbe8 	bl	800a654 <__assert_func>
 8009e84:	3101      	adds	r1, #1
 8009e86:	005b      	lsls	r3, r3, #1
 8009e88:	e7ee      	b.n	8009e68 <__lshift+0x1c>
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	f100 0114 	add.w	r1, r0, #20
 8009e90:	f100 0210 	add.w	r2, r0, #16
 8009e94:	4618      	mov	r0, r3
 8009e96:	4553      	cmp	r3, sl
 8009e98:	db33      	blt.n	8009f02 <__lshift+0xb6>
 8009e9a:	6920      	ldr	r0, [r4, #16]
 8009e9c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009ea0:	f104 0314 	add.w	r3, r4, #20
 8009ea4:	f019 091f 	ands.w	r9, r9, #31
 8009ea8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009eac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009eb0:	d02b      	beq.n	8009f0a <__lshift+0xbe>
 8009eb2:	f1c9 0e20 	rsb	lr, r9, #32
 8009eb6:	468a      	mov	sl, r1
 8009eb8:	2200      	movs	r2, #0
 8009eba:	6818      	ldr	r0, [r3, #0]
 8009ebc:	fa00 f009 	lsl.w	r0, r0, r9
 8009ec0:	4310      	orrs	r0, r2
 8009ec2:	f84a 0b04 	str.w	r0, [sl], #4
 8009ec6:	f853 2b04 	ldr.w	r2, [r3], #4
 8009eca:	459c      	cmp	ip, r3
 8009ecc:	fa22 f20e 	lsr.w	r2, r2, lr
 8009ed0:	d8f3      	bhi.n	8009eba <__lshift+0x6e>
 8009ed2:	ebac 0304 	sub.w	r3, ip, r4
 8009ed6:	3b15      	subs	r3, #21
 8009ed8:	f023 0303 	bic.w	r3, r3, #3
 8009edc:	3304      	adds	r3, #4
 8009ede:	f104 0015 	add.w	r0, r4, #21
 8009ee2:	4584      	cmp	ip, r0
 8009ee4:	bf38      	it	cc
 8009ee6:	2304      	movcc	r3, #4
 8009ee8:	50ca      	str	r2, [r1, r3]
 8009eea:	b10a      	cbz	r2, 8009ef0 <__lshift+0xa4>
 8009eec:	f108 0602 	add.w	r6, r8, #2
 8009ef0:	3e01      	subs	r6, #1
 8009ef2:	4638      	mov	r0, r7
 8009ef4:	612e      	str	r6, [r5, #16]
 8009ef6:	4621      	mov	r1, r4
 8009ef8:	f7ff fdda 	bl	8009ab0 <_Bfree>
 8009efc:	4628      	mov	r0, r5
 8009efe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f02:	f842 0f04 	str.w	r0, [r2, #4]!
 8009f06:	3301      	adds	r3, #1
 8009f08:	e7c5      	b.n	8009e96 <__lshift+0x4a>
 8009f0a:	3904      	subs	r1, #4
 8009f0c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f10:	f841 2f04 	str.w	r2, [r1, #4]!
 8009f14:	459c      	cmp	ip, r3
 8009f16:	d8f9      	bhi.n	8009f0c <__lshift+0xc0>
 8009f18:	e7ea      	b.n	8009ef0 <__lshift+0xa4>
 8009f1a:	bf00      	nop
 8009f1c:	0800aa94 	.word	0x0800aa94
 8009f20:	0800aaa5 	.word	0x0800aaa5

08009f24 <__mcmp>:
 8009f24:	690a      	ldr	r2, [r1, #16]
 8009f26:	4603      	mov	r3, r0
 8009f28:	6900      	ldr	r0, [r0, #16]
 8009f2a:	1a80      	subs	r0, r0, r2
 8009f2c:	b530      	push	{r4, r5, lr}
 8009f2e:	d10e      	bne.n	8009f4e <__mcmp+0x2a>
 8009f30:	3314      	adds	r3, #20
 8009f32:	3114      	adds	r1, #20
 8009f34:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009f38:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009f3c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009f40:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009f44:	4295      	cmp	r5, r2
 8009f46:	d003      	beq.n	8009f50 <__mcmp+0x2c>
 8009f48:	d205      	bcs.n	8009f56 <__mcmp+0x32>
 8009f4a:	f04f 30ff 	mov.w	r0, #4294967295
 8009f4e:	bd30      	pop	{r4, r5, pc}
 8009f50:	42a3      	cmp	r3, r4
 8009f52:	d3f3      	bcc.n	8009f3c <__mcmp+0x18>
 8009f54:	e7fb      	b.n	8009f4e <__mcmp+0x2a>
 8009f56:	2001      	movs	r0, #1
 8009f58:	e7f9      	b.n	8009f4e <__mcmp+0x2a>
	...

08009f5c <__mdiff>:
 8009f5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f60:	4689      	mov	r9, r1
 8009f62:	4606      	mov	r6, r0
 8009f64:	4611      	mov	r1, r2
 8009f66:	4648      	mov	r0, r9
 8009f68:	4614      	mov	r4, r2
 8009f6a:	f7ff ffdb 	bl	8009f24 <__mcmp>
 8009f6e:	1e05      	subs	r5, r0, #0
 8009f70:	d112      	bne.n	8009f98 <__mdiff+0x3c>
 8009f72:	4629      	mov	r1, r5
 8009f74:	4630      	mov	r0, r6
 8009f76:	f7ff fd5b 	bl	8009a30 <_Balloc>
 8009f7a:	4602      	mov	r2, r0
 8009f7c:	b928      	cbnz	r0, 8009f8a <__mdiff+0x2e>
 8009f7e:	4b3f      	ldr	r3, [pc, #252]	@ (800a07c <__mdiff+0x120>)
 8009f80:	f240 2137 	movw	r1, #567	@ 0x237
 8009f84:	483e      	ldr	r0, [pc, #248]	@ (800a080 <__mdiff+0x124>)
 8009f86:	f000 fb65 	bl	800a654 <__assert_func>
 8009f8a:	2301      	movs	r3, #1
 8009f8c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009f90:	4610      	mov	r0, r2
 8009f92:	b003      	add	sp, #12
 8009f94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f98:	bfbc      	itt	lt
 8009f9a:	464b      	movlt	r3, r9
 8009f9c:	46a1      	movlt	r9, r4
 8009f9e:	4630      	mov	r0, r6
 8009fa0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009fa4:	bfba      	itte	lt
 8009fa6:	461c      	movlt	r4, r3
 8009fa8:	2501      	movlt	r5, #1
 8009faa:	2500      	movge	r5, #0
 8009fac:	f7ff fd40 	bl	8009a30 <_Balloc>
 8009fb0:	4602      	mov	r2, r0
 8009fb2:	b918      	cbnz	r0, 8009fbc <__mdiff+0x60>
 8009fb4:	4b31      	ldr	r3, [pc, #196]	@ (800a07c <__mdiff+0x120>)
 8009fb6:	f240 2145 	movw	r1, #581	@ 0x245
 8009fba:	e7e3      	b.n	8009f84 <__mdiff+0x28>
 8009fbc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009fc0:	6926      	ldr	r6, [r4, #16]
 8009fc2:	60c5      	str	r5, [r0, #12]
 8009fc4:	f109 0310 	add.w	r3, r9, #16
 8009fc8:	f109 0514 	add.w	r5, r9, #20
 8009fcc:	f104 0e14 	add.w	lr, r4, #20
 8009fd0:	f100 0b14 	add.w	fp, r0, #20
 8009fd4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009fd8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009fdc:	9301      	str	r3, [sp, #4]
 8009fde:	46d9      	mov	r9, fp
 8009fe0:	f04f 0c00 	mov.w	ip, #0
 8009fe4:	9b01      	ldr	r3, [sp, #4]
 8009fe6:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009fea:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009fee:	9301      	str	r3, [sp, #4]
 8009ff0:	fa1f f38a 	uxth.w	r3, sl
 8009ff4:	4619      	mov	r1, r3
 8009ff6:	b283      	uxth	r3, r0
 8009ff8:	1acb      	subs	r3, r1, r3
 8009ffa:	0c00      	lsrs	r0, r0, #16
 8009ffc:	4463      	add	r3, ip
 8009ffe:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a002:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a006:	b29b      	uxth	r3, r3
 800a008:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a00c:	4576      	cmp	r6, lr
 800a00e:	f849 3b04 	str.w	r3, [r9], #4
 800a012:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a016:	d8e5      	bhi.n	8009fe4 <__mdiff+0x88>
 800a018:	1b33      	subs	r3, r6, r4
 800a01a:	3b15      	subs	r3, #21
 800a01c:	f023 0303 	bic.w	r3, r3, #3
 800a020:	3415      	adds	r4, #21
 800a022:	3304      	adds	r3, #4
 800a024:	42a6      	cmp	r6, r4
 800a026:	bf38      	it	cc
 800a028:	2304      	movcc	r3, #4
 800a02a:	441d      	add	r5, r3
 800a02c:	445b      	add	r3, fp
 800a02e:	461e      	mov	r6, r3
 800a030:	462c      	mov	r4, r5
 800a032:	4544      	cmp	r4, r8
 800a034:	d30e      	bcc.n	800a054 <__mdiff+0xf8>
 800a036:	f108 0103 	add.w	r1, r8, #3
 800a03a:	1b49      	subs	r1, r1, r5
 800a03c:	f021 0103 	bic.w	r1, r1, #3
 800a040:	3d03      	subs	r5, #3
 800a042:	45a8      	cmp	r8, r5
 800a044:	bf38      	it	cc
 800a046:	2100      	movcc	r1, #0
 800a048:	440b      	add	r3, r1
 800a04a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a04e:	b191      	cbz	r1, 800a076 <__mdiff+0x11a>
 800a050:	6117      	str	r7, [r2, #16]
 800a052:	e79d      	b.n	8009f90 <__mdiff+0x34>
 800a054:	f854 1b04 	ldr.w	r1, [r4], #4
 800a058:	46e6      	mov	lr, ip
 800a05a:	0c08      	lsrs	r0, r1, #16
 800a05c:	fa1c fc81 	uxtah	ip, ip, r1
 800a060:	4471      	add	r1, lr
 800a062:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a066:	b289      	uxth	r1, r1
 800a068:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a06c:	f846 1b04 	str.w	r1, [r6], #4
 800a070:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a074:	e7dd      	b.n	800a032 <__mdiff+0xd6>
 800a076:	3f01      	subs	r7, #1
 800a078:	e7e7      	b.n	800a04a <__mdiff+0xee>
 800a07a:	bf00      	nop
 800a07c:	0800aa94 	.word	0x0800aa94
 800a080:	0800aaa5 	.word	0x0800aaa5

0800a084 <__d2b>:
 800a084:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a088:	460f      	mov	r7, r1
 800a08a:	2101      	movs	r1, #1
 800a08c:	ec59 8b10 	vmov	r8, r9, d0
 800a090:	4616      	mov	r6, r2
 800a092:	f7ff fccd 	bl	8009a30 <_Balloc>
 800a096:	4604      	mov	r4, r0
 800a098:	b930      	cbnz	r0, 800a0a8 <__d2b+0x24>
 800a09a:	4602      	mov	r2, r0
 800a09c:	4b23      	ldr	r3, [pc, #140]	@ (800a12c <__d2b+0xa8>)
 800a09e:	4824      	ldr	r0, [pc, #144]	@ (800a130 <__d2b+0xac>)
 800a0a0:	f240 310f 	movw	r1, #783	@ 0x30f
 800a0a4:	f000 fad6 	bl	800a654 <__assert_func>
 800a0a8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a0ac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a0b0:	b10d      	cbz	r5, 800a0b6 <__d2b+0x32>
 800a0b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a0b6:	9301      	str	r3, [sp, #4]
 800a0b8:	f1b8 0300 	subs.w	r3, r8, #0
 800a0bc:	d023      	beq.n	800a106 <__d2b+0x82>
 800a0be:	4668      	mov	r0, sp
 800a0c0:	9300      	str	r3, [sp, #0]
 800a0c2:	f7ff fd7c 	bl	8009bbe <__lo0bits>
 800a0c6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a0ca:	b1d0      	cbz	r0, 800a102 <__d2b+0x7e>
 800a0cc:	f1c0 0320 	rsb	r3, r0, #32
 800a0d0:	fa02 f303 	lsl.w	r3, r2, r3
 800a0d4:	430b      	orrs	r3, r1
 800a0d6:	40c2      	lsrs	r2, r0
 800a0d8:	6163      	str	r3, [r4, #20]
 800a0da:	9201      	str	r2, [sp, #4]
 800a0dc:	9b01      	ldr	r3, [sp, #4]
 800a0de:	61a3      	str	r3, [r4, #24]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	bf0c      	ite	eq
 800a0e4:	2201      	moveq	r2, #1
 800a0e6:	2202      	movne	r2, #2
 800a0e8:	6122      	str	r2, [r4, #16]
 800a0ea:	b1a5      	cbz	r5, 800a116 <__d2b+0x92>
 800a0ec:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a0f0:	4405      	add	r5, r0
 800a0f2:	603d      	str	r5, [r7, #0]
 800a0f4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a0f8:	6030      	str	r0, [r6, #0]
 800a0fa:	4620      	mov	r0, r4
 800a0fc:	b003      	add	sp, #12
 800a0fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a102:	6161      	str	r1, [r4, #20]
 800a104:	e7ea      	b.n	800a0dc <__d2b+0x58>
 800a106:	a801      	add	r0, sp, #4
 800a108:	f7ff fd59 	bl	8009bbe <__lo0bits>
 800a10c:	9b01      	ldr	r3, [sp, #4]
 800a10e:	6163      	str	r3, [r4, #20]
 800a110:	3020      	adds	r0, #32
 800a112:	2201      	movs	r2, #1
 800a114:	e7e8      	b.n	800a0e8 <__d2b+0x64>
 800a116:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a11a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a11e:	6038      	str	r0, [r7, #0]
 800a120:	6918      	ldr	r0, [r3, #16]
 800a122:	f7ff fd2d 	bl	8009b80 <__hi0bits>
 800a126:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a12a:	e7e5      	b.n	800a0f8 <__d2b+0x74>
 800a12c:	0800aa94 	.word	0x0800aa94
 800a130:	0800aaa5 	.word	0x0800aaa5

0800a134 <__sfputc_r>:
 800a134:	6893      	ldr	r3, [r2, #8]
 800a136:	3b01      	subs	r3, #1
 800a138:	2b00      	cmp	r3, #0
 800a13a:	b410      	push	{r4}
 800a13c:	6093      	str	r3, [r2, #8]
 800a13e:	da08      	bge.n	800a152 <__sfputc_r+0x1e>
 800a140:	6994      	ldr	r4, [r2, #24]
 800a142:	42a3      	cmp	r3, r4
 800a144:	db01      	blt.n	800a14a <__sfputc_r+0x16>
 800a146:	290a      	cmp	r1, #10
 800a148:	d103      	bne.n	800a152 <__sfputc_r+0x1e>
 800a14a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a14e:	f7fe bc0e 	b.w	800896e <__swbuf_r>
 800a152:	6813      	ldr	r3, [r2, #0]
 800a154:	1c58      	adds	r0, r3, #1
 800a156:	6010      	str	r0, [r2, #0]
 800a158:	7019      	strb	r1, [r3, #0]
 800a15a:	4608      	mov	r0, r1
 800a15c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a160:	4770      	bx	lr

0800a162 <__sfputs_r>:
 800a162:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a164:	4606      	mov	r6, r0
 800a166:	460f      	mov	r7, r1
 800a168:	4614      	mov	r4, r2
 800a16a:	18d5      	adds	r5, r2, r3
 800a16c:	42ac      	cmp	r4, r5
 800a16e:	d101      	bne.n	800a174 <__sfputs_r+0x12>
 800a170:	2000      	movs	r0, #0
 800a172:	e007      	b.n	800a184 <__sfputs_r+0x22>
 800a174:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a178:	463a      	mov	r2, r7
 800a17a:	4630      	mov	r0, r6
 800a17c:	f7ff ffda 	bl	800a134 <__sfputc_r>
 800a180:	1c43      	adds	r3, r0, #1
 800a182:	d1f3      	bne.n	800a16c <__sfputs_r+0xa>
 800a184:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a188 <_vfiprintf_r>:
 800a188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a18c:	460d      	mov	r5, r1
 800a18e:	b09d      	sub	sp, #116	@ 0x74
 800a190:	4614      	mov	r4, r2
 800a192:	4698      	mov	r8, r3
 800a194:	4606      	mov	r6, r0
 800a196:	b118      	cbz	r0, 800a1a0 <_vfiprintf_r+0x18>
 800a198:	6a03      	ldr	r3, [r0, #32]
 800a19a:	b90b      	cbnz	r3, 800a1a0 <_vfiprintf_r+0x18>
 800a19c:	f7fe fafe 	bl	800879c <__sinit>
 800a1a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a1a2:	07d9      	lsls	r1, r3, #31
 800a1a4:	d405      	bmi.n	800a1b2 <_vfiprintf_r+0x2a>
 800a1a6:	89ab      	ldrh	r3, [r5, #12]
 800a1a8:	059a      	lsls	r2, r3, #22
 800a1aa:	d402      	bmi.n	800a1b2 <_vfiprintf_r+0x2a>
 800a1ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a1ae:	f7fe fcf0 	bl	8008b92 <__retarget_lock_acquire_recursive>
 800a1b2:	89ab      	ldrh	r3, [r5, #12]
 800a1b4:	071b      	lsls	r3, r3, #28
 800a1b6:	d501      	bpl.n	800a1bc <_vfiprintf_r+0x34>
 800a1b8:	692b      	ldr	r3, [r5, #16]
 800a1ba:	b99b      	cbnz	r3, 800a1e4 <_vfiprintf_r+0x5c>
 800a1bc:	4629      	mov	r1, r5
 800a1be:	4630      	mov	r0, r6
 800a1c0:	f7fe fc14 	bl	80089ec <__swsetup_r>
 800a1c4:	b170      	cbz	r0, 800a1e4 <_vfiprintf_r+0x5c>
 800a1c6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a1c8:	07dc      	lsls	r4, r3, #31
 800a1ca:	d504      	bpl.n	800a1d6 <_vfiprintf_r+0x4e>
 800a1cc:	f04f 30ff 	mov.w	r0, #4294967295
 800a1d0:	b01d      	add	sp, #116	@ 0x74
 800a1d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1d6:	89ab      	ldrh	r3, [r5, #12]
 800a1d8:	0598      	lsls	r0, r3, #22
 800a1da:	d4f7      	bmi.n	800a1cc <_vfiprintf_r+0x44>
 800a1dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a1de:	f7fe fcd9 	bl	8008b94 <__retarget_lock_release_recursive>
 800a1e2:	e7f3      	b.n	800a1cc <_vfiprintf_r+0x44>
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	9309      	str	r3, [sp, #36]	@ 0x24
 800a1e8:	2320      	movs	r3, #32
 800a1ea:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a1ee:	f8cd 800c 	str.w	r8, [sp, #12]
 800a1f2:	2330      	movs	r3, #48	@ 0x30
 800a1f4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a3a4 <_vfiprintf_r+0x21c>
 800a1f8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a1fc:	f04f 0901 	mov.w	r9, #1
 800a200:	4623      	mov	r3, r4
 800a202:	469a      	mov	sl, r3
 800a204:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a208:	b10a      	cbz	r2, 800a20e <_vfiprintf_r+0x86>
 800a20a:	2a25      	cmp	r2, #37	@ 0x25
 800a20c:	d1f9      	bne.n	800a202 <_vfiprintf_r+0x7a>
 800a20e:	ebba 0b04 	subs.w	fp, sl, r4
 800a212:	d00b      	beq.n	800a22c <_vfiprintf_r+0xa4>
 800a214:	465b      	mov	r3, fp
 800a216:	4622      	mov	r2, r4
 800a218:	4629      	mov	r1, r5
 800a21a:	4630      	mov	r0, r6
 800a21c:	f7ff ffa1 	bl	800a162 <__sfputs_r>
 800a220:	3001      	adds	r0, #1
 800a222:	f000 80a7 	beq.w	800a374 <_vfiprintf_r+0x1ec>
 800a226:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a228:	445a      	add	r2, fp
 800a22a:	9209      	str	r2, [sp, #36]	@ 0x24
 800a22c:	f89a 3000 	ldrb.w	r3, [sl]
 800a230:	2b00      	cmp	r3, #0
 800a232:	f000 809f 	beq.w	800a374 <_vfiprintf_r+0x1ec>
 800a236:	2300      	movs	r3, #0
 800a238:	f04f 32ff 	mov.w	r2, #4294967295
 800a23c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a240:	f10a 0a01 	add.w	sl, sl, #1
 800a244:	9304      	str	r3, [sp, #16]
 800a246:	9307      	str	r3, [sp, #28]
 800a248:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a24c:	931a      	str	r3, [sp, #104]	@ 0x68
 800a24e:	4654      	mov	r4, sl
 800a250:	2205      	movs	r2, #5
 800a252:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a256:	4853      	ldr	r0, [pc, #332]	@ (800a3a4 <_vfiprintf_r+0x21c>)
 800a258:	f7f5 ffba 	bl	80001d0 <memchr>
 800a25c:	9a04      	ldr	r2, [sp, #16]
 800a25e:	b9d8      	cbnz	r0, 800a298 <_vfiprintf_r+0x110>
 800a260:	06d1      	lsls	r1, r2, #27
 800a262:	bf44      	itt	mi
 800a264:	2320      	movmi	r3, #32
 800a266:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a26a:	0713      	lsls	r3, r2, #28
 800a26c:	bf44      	itt	mi
 800a26e:	232b      	movmi	r3, #43	@ 0x2b
 800a270:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a274:	f89a 3000 	ldrb.w	r3, [sl]
 800a278:	2b2a      	cmp	r3, #42	@ 0x2a
 800a27a:	d015      	beq.n	800a2a8 <_vfiprintf_r+0x120>
 800a27c:	9a07      	ldr	r2, [sp, #28]
 800a27e:	4654      	mov	r4, sl
 800a280:	2000      	movs	r0, #0
 800a282:	f04f 0c0a 	mov.w	ip, #10
 800a286:	4621      	mov	r1, r4
 800a288:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a28c:	3b30      	subs	r3, #48	@ 0x30
 800a28e:	2b09      	cmp	r3, #9
 800a290:	d94b      	bls.n	800a32a <_vfiprintf_r+0x1a2>
 800a292:	b1b0      	cbz	r0, 800a2c2 <_vfiprintf_r+0x13a>
 800a294:	9207      	str	r2, [sp, #28]
 800a296:	e014      	b.n	800a2c2 <_vfiprintf_r+0x13a>
 800a298:	eba0 0308 	sub.w	r3, r0, r8
 800a29c:	fa09 f303 	lsl.w	r3, r9, r3
 800a2a0:	4313      	orrs	r3, r2
 800a2a2:	9304      	str	r3, [sp, #16]
 800a2a4:	46a2      	mov	sl, r4
 800a2a6:	e7d2      	b.n	800a24e <_vfiprintf_r+0xc6>
 800a2a8:	9b03      	ldr	r3, [sp, #12]
 800a2aa:	1d19      	adds	r1, r3, #4
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	9103      	str	r1, [sp, #12]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	bfbb      	ittet	lt
 800a2b4:	425b      	neglt	r3, r3
 800a2b6:	f042 0202 	orrlt.w	r2, r2, #2
 800a2ba:	9307      	strge	r3, [sp, #28]
 800a2bc:	9307      	strlt	r3, [sp, #28]
 800a2be:	bfb8      	it	lt
 800a2c0:	9204      	strlt	r2, [sp, #16]
 800a2c2:	7823      	ldrb	r3, [r4, #0]
 800a2c4:	2b2e      	cmp	r3, #46	@ 0x2e
 800a2c6:	d10a      	bne.n	800a2de <_vfiprintf_r+0x156>
 800a2c8:	7863      	ldrb	r3, [r4, #1]
 800a2ca:	2b2a      	cmp	r3, #42	@ 0x2a
 800a2cc:	d132      	bne.n	800a334 <_vfiprintf_r+0x1ac>
 800a2ce:	9b03      	ldr	r3, [sp, #12]
 800a2d0:	1d1a      	adds	r2, r3, #4
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	9203      	str	r2, [sp, #12]
 800a2d6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a2da:	3402      	adds	r4, #2
 800a2dc:	9305      	str	r3, [sp, #20]
 800a2de:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a3b4 <_vfiprintf_r+0x22c>
 800a2e2:	7821      	ldrb	r1, [r4, #0]
 800a2e4:	2203      	movs	r2, #3
 800a2e6:	4650      	mov	r0, sl
 800a2e8:	f7f5 ff72 	bl	80001d0 <memchr>
 800a2ec:	b138      	cbz	r0, 800a2fe <_vfiprintf_r+0x176>
 800a2ee:	9b04      	ldr	r3, [sp, #16]
 800a2f0:	eba0 000a 	sub.w	r0, r0, sl
 800a2f4:	2240      	movs	r2, #64	@ 0x40
 800a2f6:	4082      	lsls	r2, r0
 800a2f8:	4313      	orrs	r3, r2
 800a2fa:	3401      	adds	r4, #1
 800a2fc:	9304      	str	r3, [sp, #16]
 800a2fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a302:	4829      	ldr	r0, [pc, #164]	@ (800a3a8 <_vfiprintf_r+0x220>)
 800a304:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a308:	2206      	movs	r2, #6
 800a30a:	f7f5 ff61 	bl	80001d0 <memchr>
 800a30e:	2800      	cmp	r0, #0
 800a310:	d03f      	beq.n	800a392 <_vfiprintf_r+0x20a>
 800a312:	4b26      	ldr	r3, [pc, #152]	@ (800a3ac <_vfiprintf_r+0x224>)
 800a314:	bb1b      	cbnz	r3, 800a35e <_vfiprintf_r+0x1d6>
 800a316:	9b03      	ldr	r3, [sp, #12]
 800a318:	3307      	adds	r3, #7
 800a31a:	f023 0307 	bic.w	r3, r3, #7
 800a31e:	3308      	adds	r3, #8
 800a320:	9303      	str	r3, [sp, #12]
 800a322:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a324:	443b      	add	r3, r7
 800a326:	9309      	str	r3, [sp, #36]	@ 0x24
 800a328:	e76a      	b.n	800a200 <_vfiprintf_r+0x78>
 800a32a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a32e:	460c      	mov	r4, r1
 800a330:	2001      	movs	r0, #1
 800a332:	e7a8      	b.n	800a286 <_vfiprintf_r+0xfe>
 800a334:	2300      	movs	r3, #0
 800a336:	3401      	adds	r4, #1
 800a338:	9305      	str	r3, [sp, #20]
 800a33a:	4619      	mov	r1, r3
 800a33c:	f04f 0c0a 	mov.w	ip, #10
 800a340:	4620      	mov	r0, r4
 800a342:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a346:	3a30      	subs	r2, #48	@ 0x30
 800a348:	2a09      	cmp	r2, #9
 800a34a:	d903      	bls.n	800a354 <_vfiprintf_r+0x1cc>
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d0c6      	beq.n	800a2de <_vfiprintf_r+0x156>
 800a350:	9105      	str	r1, [sp, #20]
 800a352:	e7c4      	b.n	800a2de <_vfiprintf_r+0x156>
 800a354:	fb0c 2101 	mla	r1, ip, r1, r2
 800a358:	4604      	mov	r4, r0
 800a35a:	2301      	movs	r3, #1
 800a35c:	e7f0      	b.n	800a340 <_vfiprintf_r+0x1b8>
 800a35e:	ab03      	add	r3, sp, #12
 800a360:	9300      	str	r3, [sp, #0]
 800a362:	462a      	mov	r2, r5
 800a364:	4b12      	ldr	r3, [pc, #72]	@ (800a3b0 <_vfiprintf_r+0x228>)
 800a366:	a904      	add	r1, sp, #16
 800a368:	4630      	mov	r0, r6
 800a36a:	f7fd fdd3 	bl	8007f14 <_printf_float>
 800a36e:	4607      	mov	r7, r0
 800a370:	1c78      	adds	r0, r7, #1
 800a372:	d1d6      	bne.n	800a322 <_vfiprintf_r+0x19a>
 800a374:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a376:	07d9      	lsls	r1, r3, #31
 800a378:	d405      	bmi.n	800a386 <_vfiprintf_r+0x1fe>
 800a37a:	89ab      	ldrh	r3, [r5, #12]
 800a37c:	059a      	lsls	r2, r3, #22
 800a37e:	d402      	bmi.n	800a386 <_vfiprintf_r+0x1fe>
 800a380:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a382:	f7fe fc07 	bl	8008b94 <__retarget_lock_release_recursive>
 800a386:	89ab      	ldrh	r3, [r5, #12]
 800a388:	065b      	lsls	r3, r3, #25
 800a38a:	f53f af1f 	bmi.w	800a1cc <_vfiprintf_r+0x44>
 800a38e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a390:	e71e      	b.n	800a1d0 <_vfiprintf_r+0x48>
 800a392:	ab03      	add	r3, sp, #12
 800a394:	9300      	str	r3, [sp, #0]
 800a396:	462a      	mov	r2, r5
 800a398:	4b05      	ldr	r3, [pc, #20]	@ (800a3b0 <_vfiprintf_r+0x228>)
 800a39a:	a904      	add	r1, sp, #16
 800a39c:	4630      	mov	r0, r6
 800a39e:	f7fe f851 	bl	8008444 <_printf_i>
 800a3a2:	e7e4      	b.n	800a36e <_vfiprintf_r+0x1e6>
 800a3a4:	0800ac00 	.word	0x0800ac00
 800a3a8:	0800ac0a 	.word	0x0800ac0a
 800a3ac:	08007f15 	.word	0x08007f15
 800a3b0:	0800a163 	.word	0x0800a163
 800a3b4:	0800ac06 	.word	0x0800ac06

0800a3b8 <__sflush_r>:
 800a3b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a3bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3c0:	0716      	lsls	r6, r2, #28
 800a3c2:	4605      	mov	r5, r0
 800a3c4:	460c      	mov	r4, r1
 800a3c6:	d454      	bmi.n	800a472 <__sflush_r+0xba>
 800a3c8:	684b      	ldr	r3, [r1, #4]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	dc02      	bgt.n	800a3d4 <__sflush_r+0x1c>
 800a3ce:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	dd48      	ble.n	800a466 <__sflush_r+0xae>
 800a3d4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a3d6:	2e00      	cmp	r6, #0
 800a3d8:	d045      	beq.n	800a466 <__sflush_r+0xae>
 800a3da:	2300      	movs	r3, #0
 800a3dc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a3e0:	682f      	ldr	r7, [r5, #0]
 800a3e2:	6a21      	ldr	r1, [r4, #32]
 800a3e4:	602b      	str	r3, [r5, #0]
 800a3e6:	d030      	beq.n	800a44a <__sflush_r+0x92>
 800a3e8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a3ea:	89a3      	ldrh	r3, [r4, #12]
 800a3ec:	0759      	lsls	r1, r3, #29
 800a3ee:	d505      	bpl.n	800a3fc <__sflush_r+0x44>
 800a3f0:	6863      	ldr	r3, [r4, #4]
 800a3f2:	1ad2      	subs	r2, r2, r3
 800a3f4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a3f6:	b10b      	cbz	r3, 800a3fc <__sflush_r+0x44>
 800a3f8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a3fa:	1ad2      	subs	r2, r2, r3
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a400:	6a21      	ldr	r1, [r4, #32]
 800a402:	4628      	mov	r0, r5
 800a404:	47b0      	blx	r6
 800a406:	1c43      	adds	r3, r0, #1
 800a408:	89a3      	ldrh	r3, [r4, #12]
 800a40a:	d106      	bne.n	800a41a <__sflush_r+0x62>
 800a40c:	6829      	ldr	r1, [r5, #0]
 800a40e:	291d      	cmp	r1, #29
 800a410:	d82b      	bhi.n	800a46a <__sflush_r+0xb2>
 800a412:	4a2a      	ldr	r2, [pc, #168]	@ (800a4bc <__sflush_r+0x104>)
 800a414:	410a      	asrs	r2, r1
 800a416:	07d6      	lsls	r6, r2, #31
 800a418:	d427      	bmi.n	800a46a <__sflush_r+0xb2>
 800a41a:	2200      	movs	r2, #0
 800a41c:	6062      	str	r2, [r4, #4]
 800a41e:	04d9      	lsls	r1, r3, #19
 800a420:	6922      	ldr	r2, [r4, #16]
 800a422:	6022      	str	r2, [r4, #0]
 800a424:	d504      	bpl.n	800a430 <__sflush_r+0x78>
 800a426:	1c42      	adds	r2, r0, #1
 800a428:	d101      	bne.n	800a42e <__sflush_r+0x76>
 800a42a:	682b      	ldr	r3, [r5, #0]
 800a42c:	b903      	cbnz	r3, 800a430 <__sflush_r+0x78>
 800a42e:	6560      	str	r0, [r4, #84]	@ 0x54
 800a430:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a432:	602f      	str	r7, [r5, #0]
 800a434:	b1b9      	cbz	r1, 800a466 <__sflush_r+0xae>
 800a436:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a43a:	4299      	cmp	r1, r3
 800a43c:	d002      	beq.n	800a444 <__sflush_r+0x8c>
 800a43e:	4628      	mov	r0, r5
 800a440:	f7ff f9f6 	bl	8009830 <_free_r>
 800a444:	2300      	movs	r3, #0
 800a446:	6363      	str	r3, [r4, #52]	@ 0x34
 800a448:	e00d      	b.n	800a466 <__sflush_r+0xae>
 800a44a:	2301      	movs	r3, #1
 800a44c:	4628      	mov	r0, r5
 800a44e:	47b0      	blx	r6
 800a450:	4602      	mov	r2, r0
 800a452:	1c50      	adds	r0, r2, #1
 800a454:	d1c9      	bne.n	800a3ea <__sflush_r+0x32>
 800a456:	682b      	ldr	r3, [r5, #0]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d0c6      	beq.n	800a3ea <__sflush_r+0x32>
 800a45c:	2b1d      	cmp	r3, #29
 800a45e:	d001      	beq.n	800a464 <__sflush_r+0xac>
 800a460:	2b16      	cmp	r3, #22
 800a462:	d11e      	bne.n	800a4a2 <__sflush_r+0xea>
 800a464:	602f      	str	r7, [r5, #0]
 800a466:	2000      	movs	r0, #0
 800a468:	e022      	b.n	800a4b0 <__sflush_r+0xf8>
 800a46a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a46e:	b21b      	sxth	r3, r3
 800a470:	e01b      	b.n	800a4aa <__sflush_r+0xf2>
 800a472:	690f      	ldr	r7, [r1, #16]
 800a474:	2f00      	cmp	r7, #0
 800a476:	d0f6      	beq.n	800a466 <__sflush_r+0xae>
 800a478:	0793      	lsls	r3, r2, #30
 800a47a:	680e      	ldr	r6, [r1, #0]
 800a47c:	bf08      	it	eq
 800a47e:	694b      	ldreq	r3, [r1, #20]
 800a480:	600f      	str	r7, [r1, #0]
 800a482:	bf18      	it	ne
 800a484:	2300      	movne	r3, #0
 800a486:	eba6 0807 	sub.w	r8, r6, r7
 800a48a:	608b      	str	r3, [r1, #8]
 800a48c:	f1b8 0f00 	cmp.w	r8, #0
 800a490:	dde9      	ble.n	800a466 <__sflush_r+0xae>
 800a492:	6a21      	ldr	r1, [r4, #32]
 800a494:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a496:	4643      	mov	r3, r8
 800a498:	463a      	mov	r2, r7
 800a49a:	4628      	mov	r0, r5
 800a49c:	47b0      	blx	r6
 800a49e:	2800      	cmp	r0, #0
 800a4a0:	dc08      	bgt.n	800a4b4 <__sflush_r+0xfc>
 800a4a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a4a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a4aa:	81a3      	strh	r3, [r4, #12]
 800a4ac:	f04f 30ff 	mov.w	r0, #4294967295
 800a4b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4b4:	4407      	add	r7, r0
 800a4b6:	eba8 0800 	sub.w	r8, r8, r0
 800a4ba:	e7e7      	b.n	800a48c <__sflush_r+0xd4>
 800a4bc:	dfbffffe 	.word	0xdfbffffe

0800a4c0 <_fflush_r>:
 800a4c0:	b538      	push	{r3, r4, r5, lr}
 800a4c2:	690b      	ldr	r3, [r1, #16]
 800a4c4:	4605      	mov	r5, r0
 800a4c6:	460c      	mov	r4, r1
 800a4c8:	b913      	cbnz	r3, 800a4d0 <_fflush_r+0x10>
 800a4ca:	2500      	movs	r5, #0
 800a4cc:	4628      	mov	r0, r5
 800a4ce:	bd38      	pop	{r3, r4, r5, pc}
 800a4d0:	b118      	cbz	r0, 800a4da <_fflush_r+0x1a>
 800a4d2:	6a03      	ldr	r3, [r0, #32]
 800a4d4:	b90b      	cbnz	r3, 800a4da <_fflush_r+0x1a>
 800a4d6:	f7fe f961 	bl	800879c <__sinit>
 800a4da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d0f3      	beq.n	800a4ca <_fflush_r+0xa>
 800a4e2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a4e4:	07d0      	lsls	r0, r2, #31
 800a4e6:	d404      	bmi.n	800a4f2 <_fflush_r+0x32>
 800a4e8:	0599      	lsls	r1, r3, #22
 800a4ea:	d402      	bmi.n	800a4f2 <_fflush_r+0x32>
 800a4ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a4ee:	f7fe fb50 	bl	8008b92 <__retarget_lock_acquire_recursive>
 800a4f2:	4628      	mov	r0, r5
 800a4f4:	4621      	mov	r1, r4
 800a4f6:	f7ff ff5f 	bl	800a3b8 <__sflush_r>
 800a4fa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a4fc:	07da      	lsls	r2, r3, #31
 800a4fe:	4605      	mov	r5, r0
 800a500:	d4e4      	bmi.n	800a4cc <_fflush_r+0xc>
 800a502:	89a3      	ldrh	r3, [r4, #12]
 800a504:	059b      	lsls	r3, r3, #22
 800a506:	d4e1      	bmi.n	800a4cc <_fflush_r+0xc>
 800a508:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a50a:	f7fe fb43 	bl	8008b94 <__retarget_lock_release_recursive>
 800a50e:	e7dd      	b.n	800a4cc <_fflush_r+0xc>

0800a510 <__swhatbuf_r>:
 800a510:	b570      	push	{r4, r5, r6, lr}
 800a512:	460c      	mov	r4, r1
 800a514:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a518:	2900      	cmp	r1, #0
 800a51a:	b096      	sub	sp, #88	@ 0x58
 800a51c:	4615      	mov	r5, r2
 800a51e:	461e      	mov	r6, r3
 800a520:	da0d      	bge.n	800a53e <__swhatbuf_r+0x2e>
 800a522:	89a3      	ldrh	r3, [r4, #12]
 800a524:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a528:	f04f 0100 	mov.w	r1, #0
 800a52c:	bf14      	ite	ne
 800a52e:	2340      	movne	r3, #64	@ 0x40
 800a530:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a534:	2000      	movs	r0, #0
 800a536:	6031      	str	r1, [r6, #0]
 800a538:	602b      	str	r3, [r5, #0]
 800a53a:	b016      	add	sp, #88	@ 0x58
 800a53c:	bd70      	pop	{r4, r5, r6, pc}
 800a53e:	466a      	mov	r2, sp
 800a540:	f000 f848 	bl	800a5d4 <_fstat_r>
 800a544:	2800      	cmp	r0, #0
 800a546:	dbec      	blt.n	800a522 <__swhatbuf_r+0x12>
 800a548:	9901      	ldr	r1, [sp, #4]
 800a54a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a54e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a552:	4259      	negs	r1, r3
 800a554:	4159      	adcs	r1, r3
 800a556:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a55a:	e7eb      	b.n	800a534 <__swhatbuf_r+0x24>

0800a55c <__smakebuf_r>:
 800a55c:	898b      	ldrh	r3, [r1, #12]
 800a55e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a560:	079d      	lsls	r5, r3, #30
 800a562:	4606      	mov	r6, r0
 800a564:	460c      	mov	r4, r1
 800a566:	d507      	bpl.n	800a578 <__smakebuf_r+0x1c>
 800a568:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a56c:	6023      	str	r3, [r4, #0]
 800a56e:	6123      	str	r3, [r4, #16]
 800a570:	2301      	movs	r3, #1
 800a572:	6163      	str	r3, [r4, #20]
 800a574:	b003      	add	sp, #12
 800a576:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a578:	ab01      	add	r3, sp, #4
 800a57a:	466a      	mov	r2, sp
 800a57c:	f7ff ffc8 	bl	800a510 <__swhatbuf_r>
 800a580:	9f00      	ldr	r7, [sp, #0]
 800a582:	4605      	mov	r5, r0
 800a584:	4639      	mov	r1, r7
 800a586:	4630      	mov	r0, r6
 800a588:	f7ff f9c6 	bl	8009918 <_malloc_r>
 800a58c:	b948      	cbnz	r0, 800a5a2 <__smakebuf_r+0x46>
 800a58e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a592:	059a      	lsls	r2, r3, #22
 800a594:	d4ee      	bmi.n	800a574 <__smakebuf_r+0x18>
 800a596:	f023 0303 	bic.w	r3, r3, #3
 800a59a:	f043 0302 	orr.w	r3, r3, #2
 800a59e:	81a3      	strh	r3, [r4, #12]
 800a5a0:	e7e2      	b.n	800a568 <__smakebuf_r+0xc>
 800a5a2:	89a3      	ldrh	r3, [r4, #12]
 800a5a4:	6020      	str	r0, [r4, #0]
 800a5a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a5aa:	81a3      	strh	r3, [r4, #12]
 800a5ac:	9b01      	ldr	r3, [sp, #4]
 800a5ae:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a5b2:	b15b      	cbz	r3, 800a5cc <__smakebuf_r+0x70>
 800a5b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a5b8:	4630      	mov	r0, r6
 800a5ba:	f000 f81d 	bl	800a5f8 <_isatty_r>
 800a5be:	b128      	cbz	r0, 800a5cc <__smakebuf_r+0x70>
 800a5c0:	89a3      	ldrh	r3, [r4, #12]
 800a5c2:	f023 0303 	bic.w	r3, r3, #3
 800a5c6:	f043 0301 	orr.w	r3, r3, #1
 800a5ca:	81a3      	strh	r3, [r4, #12]
 800a5cc:	89a3      	ldrh	r3, [r4, #12]
 800a5ce:	431d      	orrs	r5, r3
 800a5d0:	81a5      	strh	r5, [r4, #12]
 800a5d2:	e7cf      	b.n	800a574 <__smakebuf_r+0x18>

0800a5d4 <_fstat_r>:
 800a5d4:	b538      	push	{r3, r4, r5, lr}
 800a5d6:	4d07      	ldr	r5, [pc, #28]	@ (800a5f4 <_fstat_r+0x20>)
 800a5d8:	2300      	movs	r3, #0
 800a5da:	4604      	mov	r4, r0
 800a5dc:	4608      	mov	r0, r1
 800a5de:	4611      	mov	r1, r2
 800a5e0:	602b      	str	r3, [r5, #0]
 800a5e2:	f7f8 f96b 	bl	80028bc <_fstat>
 800a5e6:	1c43      	adds	r3, r0, #1
 800a5e8:	d102      	bne.n	800a5f0 <_fstat_r+0x1c>
 800a5ea:	682b      	ldr	r3, [r5, #0]
 800a5ec:	b103      	cbz	r3, 800a5f0 <_fstat_r+0x1c>
 800a5ee:	6023      	str	r3, [r4, #0]
 800a5f0:	bd38      	pop	{r3, r4, r5, pc}
 800a5f2:	bf00      	nop
 800a5f4:	200006c0 	.word	0x200006c0

0800a5f8 <_isatty_r>:
 800a5f8:	b538      	push	{r3, r4, r5, lr}
 800a5fa:	4d06      	ldr	r5, [pc, #24]	@ (800a614 <_isatty_r+0x1c>)
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	4604      	mov	r4, r0
 800a600:	4608      	mov	r0, r1
 800a602:	602b      	str	r3, [r5, #0]
 800a604:	f7f8 f96a 	bl	80028dc <_isatty>
 800a608:	1c43      	adds	r3, r0, #1
 800a60a:	d102      	bne.n	800a612 <_isatty_r+0x1a>
 800a60c:	682b      	ldr	r3, [r5, #0]
 800a60e:	b103      	cbz	r3, 800a612 <_isatty_r+0x1a>
 800a610:	6023      	str	r3, [r4, #0]
 800a612:	bd38      	pop	{r3, r4, r5, pc}
 800a614:	200006c0 	.word	0x200006c0

0800a618 <_sbrk_r>:
 800a618:	b538      	push	{r3, r4, r5, lr}
 800a61a:	4d06      	ldr	r5, [pc, #24]	@ (800a634 <_sbrk_r+0x1c>)
 800a61c:	2300      	movs	r3, #0
 800a61e:	4604      	mov	r4, r0
 800a620:	4608      	mov	r0, r1
 800a622:	602b      	str	r3, [r5, #0]
 800a624:	f7f8 f972 	bl	800290c <_sbrk>
 800a628:	1c43      	adds	r3, r0, #1
 800a62a:	d102      	bne.n	800a632 <_sbrk_r+0x1a>
 800a62c:	682b      	ldr	r3, [r5, #0]
 800a62e:	b103      	cbz	r3, 800a632 <_sbrk_r+0x1a>
 800a630:	6023      	str	r3, [r4, #0]
 800a632:	bd38      	pop	{r3, r4, r5, pc}
 800a634:	200006c0 	.word	0x200006c0

0800a638 <memcpy>:
 800a638:	440a      	add	r2, r1
 800a63a:	4291      	cmp	r1, r2
 800a63c:	f100 33ff 	add.w	r3, r0, #4294967295
 800a640:	d100      	bne.n	800a644 <memcpy+0xc>
 800a642:	4770      	bx	lr
 800a644:	b510      	push	{r4, lr}
 800a646:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a64a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a64e:	4291      	cmp	r1, r2
 800a650:	d1f9      	bne.n	800a646 <memcpy+0xe>
 800a652:	bd10      	pop	{r4, pc}

0800a654 <__assert_func>:
 800a654:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a656:	4614      	mov	r4, r2
 800a658:	461a      	mov	r2, r3
 800a65a:	4b09      	ldr	r3, [pc, #36]	@ (800a680 <__assert_func+0x2c>)
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	4605      	mov	r5, r0
 800a660:	68d8      	ldr	r0, [r3, #12]
 800a662:	b954      	cbnz	r4, 800a67a <__assert_func+0x26>
 800a664:	4b07      	ldr	r3, [pc, #28]	@ (800a684 <__assert_func+0x30>)
 800a666:	461c      	mov	r4, r3
 800a668:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a66c:	9100      	str	r1, [sp, #0]
 800a66e:	462b      	mov	r3, r5
 800a670:	4905      	ldr	r1, [pc, #20]	@ (800a688 <__assert_func+0x34>)
 800a672:	f000 f841 	bl	800a6f8 <fiprintf>
 800a676:	f000 f851 	bl	800a71c <abort>
 800a67a:	4b04      	ldr	r3, [pc, #16]	@ (800a68c <__assert_func+0x38>)
 800a67c:	e7f4      	b.n	800a668 <__assert_func+0x14>
 800a67e:	bf00      	nop
 800a680:	20000018 	.word	0x20000018
 800a684:	0800ac56 	.word	0x0800ac56
 800a688:	0800ac28 	.word	0x0800ac28
 800a68c:	0800ac1b 	.word	0x0800ac1b

0800a690 <_calloc_r>:
 800a690:	b570      	push	{r4, r5, r6, lr}
 800a692:	fba1 5402 	umull	r5, r4, r1, r2
 800a696:	b93c      	cbnz	r4, 800a6a8 <_calloc_r+0x18>
 800a698:	4629      	mov	r1, r5
 800a69a:	f7ff f93d 	bl	8009918 <_malloc_r>
 800a69e:	4606      	mov	r6, r0
 800a6a0:	b928      	cbnz	r0, 800a6ae <_calloc_r+0x1e>
 800a6a2:	2600      	movs	r6, #0
 800a6a4:	4630      	mov	r0, r6
 800a6a6:	bd70      	pop	{r4, r5, r6, pc}
 800a6a8:	220c      	movs	r2, #12
 800a6aa:	6002      	str	r2, [r0, #0]
 800a6ac:	e7f9      	b.n	800a6a2 <_calloc_r+0x12>
 800a6ae:	462a      	mov	r2, r5
 800a6b0:	4621      	mov	r1, r4
 800a6b2:	f7fe f9f1 	bl	8008a98 <memset>
 800a6b6:	e7f5      	b.n	800a6a4 <_calloc_r+0x14>

0800a6b8 <__ascii_mbtowc>:
 800a6b8:	b082      	sub	sp, #8
 800a6ba:	b901      	cbnz	r1, 800a6be <__ascii_mbtowc+0x6>
 800a6bc:	a901      	add	r1, sp, #4
 800a6be:	b142      	cbz	r2, 800a6d2 <__ascii_mbtowc+0x1a>
 800a6c0:	b14b      	cbz	r3, 800a6d6 <__ascii_mbtowc+0x1e>
 800a6c2:	7813      	ldrb	r3, [r2, #0]
 800a6c4:	600b      	str	r3, [r1, #0]
 800a6c6:	7812      	ldrb	r2, [r2, #0]
 800a6c8:	1e10      	subs	r0, r2, #0
 800a6ca:	bf18      	it	ne
 800a6cc:	2001      	movne	r0, #1
 800a6ce:	b002      	add	sp, #8
 800a6d0:	4770      	bx	lr
 800a6d2:	4610      	mov	r0, r2
 800a6d4:	e7fb      	b.n	800a6ce <__ascii_mbtowc+0x16>
 800a6d6:	f06f 0001 	mvn.w	r0, #1
 800a6da:	e7f8      	b.n	800a6ce <__ascii_mbtowc+0x16>

0800a6dc <__ascii_wctomb>:
 800a6dc:	4603      	mov	r3, r0
 800a6de:	4608      	mov	r0, r1
 800a6e0:	b141      	cbz	r1, 800a6f4 <__ascii_wctomb+0x18>
 800a6e2:	2aff      	cmp	r2, #255	@ 0xff
 800a6e4:	d904      	bls.n	800a6f0 <__ascii_wctomb+0x14>
 800a6e6:	228a      	movs	r2, #138	@ 0x8a
 800a6e8:	601a      	str	r2, [r3, #0]
 800a6ea:	f04f 30ff 	mov.w	r0, #4294967295
 800a6ee:	4770      	bx	lr
 800a6f0:	700a      	strb	r2, [r1, #0]
 800a6f2:	2001      	movs	r0, #1
 800a6f4:	4770      	bx	lr
	...

0800a6f8 <fiprintf>:
 800a6f8:	b40e      	push	{r1, r2, r3}
 800a6fa:	b503      	push	{r0, r1, lr}
 800a6fc:	4601      	mov	r1, r0
 800a6fe:	ab03      	add	r3, sp, #12
 800a700:	4805      	ldr	r0, [pc, #20]	@ (800a718 <fiprintf+0x20>)
 800a702:	f853 2b04 	ldr.w	r2, [r3], #4
 800a706:	6800      	ldr	r0, [r0, #0]
 800a708:	9301      	str	r3, [sp, #4]
 800a70a:	f7ff fd3d 	bl	800a188 <_vfiprintf_r>
 800a70e:	b002      	add	sp, #8
 800a710:	f85d eb04 	ldr.w	lr, [sp], #4
 800a714:	b003      	add	sp, #12
 800a716:	4770      	bx	lr
 800a718:	20000018 	.word	0x20000018

0800a71c <abort>:
 800a71c:	b508      	push	{r3, lr}
 800a71e:	2006      	movs	r0, #6
 800a720:	f000 f82c 	bl	800a77c <raise>
 800a724:	2001      	movs	r0, #1
 800a726:	f7f8 f895 	bl	8002854 <_exit>

0800a72a <_raise_r>:
 800a72a:	291f      	cmp	r1, #31
 800a72c:	b538      	push	{r3, r4, r5, lr}
 800a72e:	4605      	mov	r5, r0
 800a730:	460c      	mov	r4, r1
 800a732:	d904      	bls.n	800a73e <_raise_r+0x14>
 800a734:	2316      	movs	r3, #22
 800a736:	6003      	str	r3, [r0, #0]
 800a738:	f04f 30ff 	mov.w	r0, #4294967295
 800a73c:	bd38      	pop	{r3, r4, r5, pc}
 800a73e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a740:	b112      	cbz	r2, 800a748 <_raise_r+0x1e>
 800a742:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a746:	b94b      	cbnz	r3, 800a75c <_raise_r+0x32>
 800a748:	4628      	mov	r0, r5
 800a74a:	f000 f831 	bl	800a7b0 <_getpid_r>
 800a74e:	4622      	mov	r2, r4
 800a750:	4601      	mov	r1, r0
 800a752:	4628      	mov	r0, r5
 800a754:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a758:	f000 b818 	b.w	800a78c <_kill_r>
 800a75c:	2b01      	cmp	r3, #1
 800a75e:	d00a      	beq.n	800a776 <_raise_r+0x4c>
 800a760:	1c59      	adds	r1, r3, #1
 800a762:	d103      	bne.n	800a76c <_raise_r+0x42>
 800a764:	2316      	movs	r3, #22
 800a766:	6003      	str	r3, [r0, #0]
 800a768:	2001      	movs	r0, #1
 800a76a:	e7e7      	b.n	800a73c <_raise_r+0x12>
 800a76c:	2100      	movs	r1, #0
 800a76e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a772:	4620      	mov	r0, r4
 800a774:	4798      	blx	r3
 800a776:	2000      	movs	r0, #0
 800a778:	e7e0      	b.n	800a73c <_raise_r+0x12>
	...

0800a77c <raise>:
 800a77c:	4b02      	ldr	r3, [pc, #8]	@ (800a788 <raise+0xc>)
 800a77e:	4601      	mov	r1, r0
 800a780:	6818      	ldr	r0, [r3, #0]
 800a782:	f7ff bfd2 	b.w	800a72a <_raise_r>
 800a786:	bf00      	nop
 800a788:	20000018 	.word	0x20000018

0800a78c <_kill_r>:
 800a78c:	b538      	push	{r3, r4, r5, lr}
 800a78e:	4d07      	ldr	r5, [pc, #28]	@ (800a7ac <_kill_r+0x20>)
 800a790:	2300      	movs	r3, #0
 800a792:	4604      	mov	r4, r0
 800a794:	4608      	mov	r0, r1
 800a796:	4611      	mov	r1, r2
 800a798:	602b      	str	r3, [r5, #0]
 800a79a:	f7f8 f84b 	bl	8002834 <_kill>
 800a79e:	1c43      	adds	r3, r0, #1
 800a7a0:	d102      	bne.n	800a7a8 <_kill_r+0x1c>
 800a7a2:	682b      	ldr	r3, [r5, #0]
 800a7a4:	b103      	cbz	r3, 800a7a8 <_kill_r+0x1c>
 800a7a6:	6023      	str	r3, [r4, #0]
 800a7a8:	bd38      	pop	{r3, r4, r5, pc}
 800a7aa:	bf00      	nop
 800a7ac:	200006c0 	.word	0x200006c0

0800a7b0 <_getpid_r>:
 800a7b0:	f7f8 b838 	b.w	8002824 <_getpid>

0800a7b4 <fmaxf>:
 800a7b4:	b508      	push	{r3, lr}
 800a7b6:	ed2d 8b02 	vpush	{d8}
 800a7ba:	eeb0 8a40 	vmov.f32	s16, s0
 800a7be:	eef0 8a60 	vmov.f32	s17, s1
 800a7c2:	f000 f831 	bl	800a828 <__fpclassifyf>
 800a7c6:	b930      	cbnz	r0, 800a7d6 <fmaxf+0x22>
 800a7c8:	eeb0 8a68 	vmov.f32	s16, s17
 800a7cc:	eeb0 0a48 	vmov.f32	s0, s16
 800a7d0:	ecbd 8b02 	vpop	{d8}
 800a7d4:	bd08      	pop	{r3, pc}
 800a7d6:	eeb0 0a68 	vmov.f32	s0, s17
 800a7da:	f000 f825 	bl	800a828 <__fpclassifyf>
 800a7de:	2800      	cmp	r0, #0
 800a7e0:	d0f4      	beq.n	800a7cc <fmaxf+0x18>
 800a7e2:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800a7e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7ea:	dded      	ble.n	800a7c8 <fmaxf+0x14>
 800a7ec:	e7ee      	b.n	800a7cc <fmaxf+0x18>

0800a7ee <fminf>:
 800a7ee:	b508      	push	{r3, lr}
 800a7f0:	ed2d 8b02 	vpush	{d8}
 800a7f4:	eeb0 8a40 	vmov.f32	s16, s0
 800a7f8:	eef0 8a60 	vmov.f32	s17, s1
 800a7fc:	f000 f814 	bl	800a828 <__fpclassifyf>
 800a800:	b930      	cbnz	r0, 800a810 <fminf+0x22>
 800a802:	eeb0 8a68 	vmov.f32	s16, s17
 800a806:	eeb0 0a48 	vmov.f32	s0, s16
 800a80a:	ecbd 8b02 	vpop	{d8}
 800a80e:	bd08      	pop	{r3, pc}
 800a810:	eeb0 0a68 	vmov.f32	s0, s17
 800a814:	f000 f808 	bl	800a828 <__fpclassifyf>
 800a818:	2800      	cmp	r0, #0
 800a81a:	d0f4      	beq.n	800a806 <fminf+0x18>
 800a81c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800a820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a824:	d5ed      	bpl.n	800a802 <fminf+0x14>
 800a826:	e7ee      	b.n	800a806 <fminf+0x18>

0800a828 <__fpclassifyf>:
 800a828:	ee10 3a10 	vmov	r3, s0
 800a82c:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 800a830:	d00d      	beq.n	800a84e <__fpclassifyf+0x26>
 800a832:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 800a836:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 800a83a:	d30a      	bcc.n	800a852 <__fpclassifyf+0x2a>
 800a83c:	4b07      	ldr	r3, [pc, #28]	@ (800a85c <__fpclassifyf+0x34>)
 800a83e:	1e42      	subs	r2, r0, #1
 800a840:	429a      	cmp	r2, r3
 800a842:	d908      	bls.n	800a856 <__fpclassifyf+0x2e>
 800a844:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 800a848:	4258      	negs	r0, r3
 800a84a:	4158      	adcs	r0, r3
 800a84c:	4770      	bx	lr
 800a84e:	2002      	movs	r0, #2
 800a850:	4770      	bx	lr
 800a852:	2004      	movs	r0, #4
 800a854:	4770      	bx	lr
 800a856:	2003      	movs	r0, #3
 800a858:	4770      	bx	lr
 800a85a:	bf00      	nop
 800a85c:	007ffffe 	.word	0x007ffffe

0800a860 <_init>:
 800a860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a862:	bf00      	nop
 800a864:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a866:	bc08      	pop	{r3}
 800a868:	469e      	mov	lr, r3
 800a86a:	4770      	bx	lr

0800a86c <_fini>:
 800a86c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a86e:	bf00      	nop
 800a870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a872:	bc08      	pop	{r3}
 800a874:	469e      	mov	lr, r3
 800a876:	4770      	bx	lr
