
MDC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a310  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f0  0800a4a0  0800a4a0  0000b4a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a890  0800a890  0000c1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a890  0800a890  0000b890  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a898  0800a898  0000c1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a898  0800a898  0000b898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a89c  0800a89c  0000b89c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800a8a0  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c1d4  2**0
                  CONTENTS
 10 .bss          000004fc  200001d4  200001d4  0000c1d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200006d0  200006d0  0000c1d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c1d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001328e  00000000  00000000  0000c204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000027ea  00000000  00000000  0001f492  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011a0  00000000  00000000  00021c80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000dba  00000000  00000000  00022e20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d638  00000000  00000000  00023bda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000152df  00000000  00000000  00041212  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ac0ba  00000000  00000000  000564f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001025ab  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005b90  00000000  00000000  001025f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  00108180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a488 	.word	0x0800a488

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	0800a488 	.word	0x0800a488

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <powerCommandSerialize>:
 *      Author: ryuto
 */

#include "can_data.h"

void powerCommandSerialize(PowerCommand* data, uint8_t* buffer){
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
 8000bb0:	6039      	str	r1, [r7, #0]
	*buffer =  (uint8_t)(data->motor_output) + ((uint8_t)data->power_off << 1);
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	461a      	mov	r2, r3
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	785b      	ldrb	r3, [r3, #1]
 8000bbc:	005b      	lsls	r3, r3, #1
 8000bbe:	b2db      	uxtb	r3, r3
 8000bc0:	4413      	add	r3, r2
 8000bc2:	b2da      	uxtb	r2, r3
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	701a      	strb	r2, [r3, #0]
}
 8000bc8:	bf00      	nop
 8000bca:	370c      	adds	r7, #12
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr

08000bd4 <powerCommandDeserialize>:

void powerCommandDeserialize(PowerCommand* data, uint8_t* buffer){
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
 8000bdc:	6039      	str	r1, [r7, #0]
	data->motor_output = (buffer[0]&0x01)==0x01;
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	f003 0301 	and.w	r3, r3, #1
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	bf14      	ite	ne
 8000bea:	2301      	movne	r3, #1
 8000bec:	2300      	moveq	r3, #0
 8000bee:	b2da      	uxtb	r2, r3
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	701a      	strb	r2, [r3, #0]
	data->power_off = (buffer[0]&0x02)==0x02;
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	f003 0302 	and.w	r3, r3, #2
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	bf14      	ite	ne
 8000c00:	2301      	movne	r3, #1
 8000c02:	2300      	moveq	r3, #0
 8000c04:	b2da      	uxtb	r2, r3
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	705a      	strb	r2, [r3, #1]
}
 8000c0a:	bf00      	nop
 8000c0c:	370c      	adds	r7, #12
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr

08000c16 <powerResultSerialize>:

void powerResultSerialize(PowerResult* data, uint8_t* buffer){
 8000c16:	b480      	push	{r7}
 8000c18:	b083      	sub	sp, #12
 8000c1a:	af00      	add	r7, sp, #0
 8000c1c:	6078      	str	r0, [r7, #4]
 8000c1e:	6039      	str	r1, [r7, #0]
	memcpy(buffer, data, sizeof(PowerResult));
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	881b      	ldrh	r3, [r3, #0]
 8000c24:	b29a      	uxth	r2, r3
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	801a      	strh	r2, [r3, #0]
}
 8000c2a:	bf00      	nop
 8000c2c:	370c      	adds	r7, #12
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr

08000c36 <powerResultDeserialize>:

void powerResultDeserialize(PowerResult* data, uint8_t* buffer){
 8000c36:	b480      	push	{r7}
 8000c38:	b083      	sub	sp, #12
 8000c3a:	af00      	add	r7, sp, #0
 8000c3c:	6078      	str	r0, [r7, #4]
 8000c3e:	6039      	str	r1, [r7, #0]
	memcpy(data, buffer, sizeof(PowerResult));
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	881b      	ldrh	r3, [r3, #0]
 8000c44:	b29a      	uxth	r2, r3
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	801a      	strh	r2, [r3, #0]
}
 8000c4a:	bf00      	nop
 8000c4c:	370c      	adds	r7, #12
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
	...

08000c58 <spiInit>:

static SPI_HandleTypeDef* g_hspi;

static bool g_spi_updated = false;

void spiInit(SPI_HandleTypeDef *hspi){
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
	g_hspi = hspi;
 8000c60:	4a06      	ldr	r2, [pc, #24]	@ (8000c7c <spiInit+0x24>)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	6013      	str	r3, [r2, #0]
	HAL_SPI_TransmitReceive_DMA(hspi, g_spi_tx_data, g_spi_rx_data, sizeof(g_spi_tx_data));
 8000c66:	230f      	movs	r3, #15
 8000c68:	4a05      	ldr	r2, [pc, #20]	@ (8000c80 <spiInit+0x28>)
 8000c6a:	4906      	ldr	r1, [pc, #24]	@ (8000c84 <spiInit+0x2c>)
 8000c6c:	6878      	ldr	r0, [r7, #4]
 8000c6e:	f004 fc33 	bl	80054d8 <HAL_SPI_TransmitReceive_DMA>
}
 8000c72:	bf00      	nop
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	20000210 	.word	0x20000210
 8000c80:	20000200 	.word	0x20000200
 8000c84:	200001f0 	.word	0x200001f0

08000c88 <getSpiData>:

void getSpiData(Command* cmd){
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
	g_spi_updated = false;
 8000c90:	4b05      	ldr	r3, [pc, #20]	@ (8000ca8 <getSpiData+0x20>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	701a      	strb	r2, [r3, #0]
	commandDeserialize(cmd, g_spi_rx_data);
 8000c96:	4905      	ldr	r1, [pc, #20]	@ (8000cac <getSpiData+0x24>)
 8000c98:	6878      	ldr	r0, [r7, #4]
 8000c9a:	f000 ff9f 	bl	8001bdc <commandDeserialize>
}
 8000c9e:	bf00      	nop
 8000ca0:	3708      	adds	r7, #8
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	20000214 	.word	0x20000214
 8000cac:	20000200 	.word	0x20000200

08000cb0 <setSpiData>:

void setSpiData(Result* res){
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
	resultSerialize(res, g_spi_tx_data);
 8000cb8:	4903      	ldr	r1, [pc, #12]	@ (8000cc8 <setSpiData+0x18>)
 8000cba:	6878      	ldr	r0, [r7, #4]
 8000cbc:	f000 ffc7 	bl	8001c4e <resultSerialize>
}
 8000cc0:	bf00      	nop
 8000cc2:	3708      	adds	r7, #8
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	200001f0 	.word	0x200001f0

08000ccc <isSpiUpdated>:

bool isSpiUpdated(){
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
	return g_spi_updated;
 8000cd0:	4b03      	ldr	r3, [pc, #12]	@ (8000ce0 <isSpiUpdated+0x14>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	20000214 	.word	0x20000214

08000ce4 <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi){
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
	g_spi_updated = true;
 8000cec:	4b05      	ldr	r3, [pc, #20]	@ (8000d04 <HAL_SPI_TxRxCpltCallback+0x20>)
 8000cee:	2201      	movs	r2, #1
 8000cf0:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit_DMA(hspi, g_spi_tx_data, sizeof(g_spi_tx_data));
 8000cf2:	220f      	movs	r2, #15
 8000cf4:	4904      	ldr	r1, [pc, #16]	@ (8000d08 <HAL_SPI_TxRxCpltCallback+0x24>)
 8000cf6:	6878      	ldr	r0, [r7, #4]
 8000cf8:	f004 fafe 	bl	80052f8 <HAL_SPI_Transmit_DMA>
}
 8000cfc:	bf00      	nop
 8000cfe:	3708      	adds	r7, #8
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	20000214 	.word	0x20000214
 8000d08:	200001f0 	.word	0x200001f0

08000d0c <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi){
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b086      	sub	sp, #24
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
	g_spi_updated = true;
 8000d14:	4b0b      	ldr	r3, [pc, #44]	@ (8000d44 <HAL_SPI_TxCpltCallback+0x38>)
 8000d16:	2201      	movs	r2, #1
 8000d18:	701a      	strb	r2, [r3, #0]
	uint8_t tx_buffer[SPI_BUFFER_SIZE] = {0};
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	60bb      	str	r3, [r7, #8]
 8000d1e:	f107 030c 	add.w	r3, r7, #12
 8000d22:	2200      	movs	r2, #0
 8000d24:	601a      	str	r2, [r3, #0]
 8000d26:	605a      	str	r2, [r3, #4]
 8000d28:	f8c3 2007 	str.w	r2, [r3, #7]
	HAL_SPI_TransmitReceive_DMA(hspi, tx_buffer, g_spi_rx_data, sizeof(g_spi_rx_data));
 8000d2c:	f107 0108 	add.w	r1, r7, #8
 8000d30:	230f      	movs	r3, #15
 8000d32:	4a05      	ldr	r2, [pc, #20]	@ (8000d48 <HAL_SPI_TxCpltCallback+0x3c>)
 8000d34:	6878      	ldr	r0, [r7, #4]
 8000d36:	f004 fbcf 	bl	80054d8 <HAL_SPI_TransmitReceive_DMA>
}
 8000d3a:	bf00      	nop
 8000d3c:	3718      	adds	r7, #24
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	20000214 	.word	0x20000214
 8000d48:	20000200 	.word	0x20000200

08000d4c <canInit>:

static CAN_FilterTypeDef g_filter;

static bool g_power_updated = false;

void canInit(CAN_HandleTypeDef *hcan){
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
	g_hcan = hcan;
 8000d54:	4a17      	ldr	r2, [pc, #92]	@ (8000db4 <canInit+0x68>)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	6013      	str	r3, [r2, #0]

	g_filter.FilterIdHigh         = 0;                        // フィルターID(上位16ビット)
 8000d5a:	4b17      	ldr	r3, [pc, #92]	@ (8000db8 <canInit+0x6c>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
	g_filter.FilterIdLow          = 0;                        // フィルターID(下位16ビット)
 8000d60:	4b15      	ldr	r3, [pc, #84]	@ (8000db8 <canInit+0x6c>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	605a      	str	r2, [r3, #4]
	g_filter.FilterMaskIdHigh     = 0;                        // フィルターマスク(上位16ビット)
 8000d66:	4b14      	ldr	r3, [pc, #80]	@ (8000db8 <canInit+0x6c>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	609a      	str	r2, [r3, #8]
	g_filter.FilterMaskIdLow      = 0;                        // フィルターマスク(下位16ビット)
 8000d6c:	4b12      	ldr	r3, [pc, #72]	@ (8000db8 <canInit+0x6c>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	60da      	str	r2, [r3, #12]
	g_filter.FilterScale          = CAN_FILTERSCALE_32BIT;    // フィルタースケール
 8000d72:	4b11      	ldr	r3, [pc, #68]	@ (8000db8 <canInit+0x6c>)
 8000d74:	2201      	movs	r2, #1
 8000d76:	61da      	str	r2, [r3, #28]
	g_filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;         // フィルターに割り当てるFIFO
 8000d78:	4b0f      	ldr	r3, [pc, #60]	@ (8000db8 <canInit+0x6c>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	611a      	str	r2, [r3, #16]
	g_filter.FilterBank           = 0;                        // フィルターバンクNo
 8000d7e:	4b0e      	ldr	r3, [pc, #56]	@ (8000db8 <canInit+0x6c>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	615a      	str	r2, [r3, #20]
	g_filter.FilterMode           = CAN_FILTERMODE_IDMASK;    // フィルターモード
 8000d84:	4b0c      	ldr	r3, [pc, #48]	@ (8000db8 <canInit+0x6c>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	619a      	str	r2, [r3, #24]
	g_filter.SlaveStartFilterBank = 14;                       // スレーブCANの開始フィルターバンクNo
 8000d8a:	4b0b      	ldr	r3, [pc, #44]	@ (8000db8 <canInit+0x6c>)
 8000d8c:	220e      	movs	r2, #14
 8000d8e:	625a      	str	r2, [r3, #36]	@ 0x24
	g_filter.FilterActivation     = ENABLE;                   // フィルター無効／有効
 8000d90:	4b09      	ldr	r3, [pc, #36]	@ (8000db8 <canInit+0x6c>)
 8000d92:	2201      	movs	r2, #1
 8000d94:	621a      	str	r2, [r3, #32]
	HAL_CAN_Start(hcan);
 8000d96:	6878      	ldr	r0, [r7, #4]
 8000d98:	f001 fd93 	bl	80028c2 <HAL_CAN_Start>
	HAL_CAN_ConfigFilter(hcan, &g_filter);
 8000d9c:	4906      	ldr	r1, [pc, #24]	@ (8000db8 <canInit+0x6c>)
 8000d9e:	6878      	ldr	r0, [r7, #4]
 8000da0:	f001 fcc5 	bl	800272e <HAL_CAN_ConfigFilter>
	HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000da4:	2102      	movs	r1, #2
 8000da6:	6878      	ldr	r0, [r7, #4]
 8000da8:	f001 fff6 	bl	8002d98 <HAL_CAN_ActivateNotification>
}
 8000dac:	bf00      	nop
 8000dae:	3708      	adds	r7, #8
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	20000220 	.word	0x20000220
 8000db8:	20000224 	.word	0x20000224

08000dbc <getPowerCanData>:

void getPowerCanData(PowerResult* res){
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
	g_power_updated = false;
 8000dc4:	4b05      	ldr	r3, [pc, #20]	@ (8000ddc <getPowerCanData+0x20>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	701a      	strb	r2, [r3, #0]
	powerResultDeserialize(res, g_power_rx_data);
 8000dca:	4905      	ldr	r1, [pc, #20]	@ (8000de0 <getPowerCanData+0x24>)
 8000dcc:	6878      	ldr	r0, [r7, #4]
 8000dce:	f7ff ff32 	bl	8000c36 <powerResultDeserialize>
}
 8000dd2:	bf00      	nop
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	2000024c 	.word	0x2000024c
 8000de0:	2000021c 	.word	0x2000021c

08000de4 <setPowerCanData>:

void setPowerCanData(PowerCommand* cmd){
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
	powerCommandSerialize(cmd, g_power_tx_data);
 8000dec:	4903      	ldr	r1, [pc, #12]	@ (8000dfc <setPowerCanData+0x18>)
 8000dee:	6878      	ldr	r0, [r7, #4]
 8000df0:	f7ff feda 	bl	8000ba8 <powerCommandSerialize>
}
 8000df4:	bf00      	nop
 8000df6:	3708      	adds	r7, #8
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	20000218 	.word	0x20000218

08000e00 <isPowerUpdated>:

bool isPowerUpdated(){
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
		return g_power_updated;
 8000e04:	4b03      	ldr	r3, [pc, #12]	@ (8000e14 <isPowerUpdated+0x14>)
 8000e06:	781b      	ldrb	r3, [r3, #0]
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	2000024c 	.word	0x2000024c

08000e18 <sendPowerCanData>:

void sendPowerCanData(){
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b088      	sub	sp, #32
 8000e1c:	af00      	add	r7, sp, #0
	CAN_TxHeaderTypeDef TxHeader;
	uint32_t TxMailbox;
	uint8_t data[POWER_COMMAND_BUFFER_SIZE];
	if(0 < HAL_CAN_GetTxMailboxesFreeLevel(g_hcan)){
 8000e1e:	4b11      	ldr	r3, [pc, #68]	@ (8000e64 <sendPowerCanData+0x4c>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4618      	mov	r0, r3
 8000e24:	f001 fe61 	bl	8002aea <HAL_CAN_GetTxMailboxesFreeLevel>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d015      	beq.n	8000e5a <sendPowerCanData+0x42>
	    TxHeader.StdId = POWER_CAN_ID;                 // CAN ID
 8000e2e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e32:	60bb      	str	r3, [r7, #8]
	    TxHeader.RTR = CAN_RTR_DATA;            // フレームタイプはデータフレーム
 8000e34:	2300      	movs	r3, #0
 8000e36:	617b      	str	r3, [r7, #20]
	    TxHeader.IDE = CAN_ID_STD;              // 標準ID(11ﾋﾞｯﾄ)
 8000e38:	2300      	movs	r3, #0
 8000e3a:	613b      	str	r3, [r7, #16]
	    TxHeader.DLC = 8;                       // データ長は8バイトに
 8000e3c:	2308      	movs	r3, #8
 8000e3e:	61bb      	str	r3, [r7, #24]
	    TxHeader.TransmitGlobalTime = DISABLE;  // ???
 8000e40:	2300      	movs	r3, #0
 8000e42:	773b      	strb	r3, [r7, #28]
	    memcpy(data,g_power_tx_data,sizeof(g_power_tx_data));
 8000e44:	4b08      	ldr	r3, [pc, #32]	@ (8000e68 <sendPowerCanData+0x50>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	703b      	strb	r3, [r7, #0]
	    HAL_CAN_AddTxMessage(g_hcan, &TxHeader, data, &TxMailbox);
 8000e4a:	4b06      	ldr	r3, [pc, #24]	@ (8000e64 <sendPowerCanData+0x4c>)
 8000e4c:	6818      	ldr	r0, [r3, #0]
 8000e4e:	1d3b      	adds	r3, r7, #4
 8000e50:	463a      	mov	r2, r7
 8000e52:	f107 0108 	add.w	r1, r7, #8
 8000e56:	f001 fd78 	bl	800294a <HAL_CAN_AddTxMessage>
	}
}
 8000e5a:	bf00      	nop
 8000e5c:	3720      	adds	r7, #32
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	20000220 	.word	0x20000220
 8000e68:	20000218 	.word	0x20000218

08000e6c <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b08c      	sub	sp, #48	@ 0x30
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
    CAN_RxHeaderTypeDef RxHeader;
    uint8_t data[POWER_RESULT_BUFFER_SIZE];
    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, data) == HAL_OK)
 8000e74:	f107 030c 	add.w	r3, r7, #12
 8000e78:	f107 0210 	add.w	r2, r7, #16
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	6878      	ldr	r0, [r7, #4]
 8000e80:	f001 fe68 	bl	8002b54 <HAL_CAN_GetRxMessage>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d10b      	bne.n	8000ea2 <HAL_CAN_RxFifo0MsgPendingCallback+0x36>
    {
        uint32_t id = RxHeader.StdId;
 8000e8a:	693b      	ldr	r3, [r7, #16]
 8000e8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        if(id == POWER_CAN_ID){
 8000e8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000e94:	d105      	bne.n	8000ea2 <HAL_CAN_RxFifo0MsgPendingCallback+0x36>
        	g_power_updated = true;
 8000e96:	4b05      	ldr	r3, [pc, #20]	@ (8000eac <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 8000e98:	2201      	movs	r2, #1
 8000e9a:	701a      	strb	r2, [r3, #0]
        	memcpy(g_power_rx_data,data,sizeof(g_power_rx_data));
 8000e9c:	89ba      	ldrh	r2, [r7, #12]
 8000e9e:	4b04      	ldr	r3, [pc, #16]	@ (8000eb0 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 8000ea0:	801a      	strh	r2, [r3, #0]
        }
    }
}
 8000ea2:	bf00      	nop
 8000ea4:	3730      	adds	r7, #48	@ 0x30
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	2000024c 	.word	0x2000024c
 8000eb0:	2000021c 	.word	0x2000021c

08000eb4 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN 0 */
bool g_main_loop_flag;
bool g_control;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
	if(htim == &htim6)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	4a1d      	ldr	r2, [pc, #116]	@ (8000f34 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	d12c      	bne.n	8000f1e <HAL_TIM_PeriodElapsedCallback+0x6a>
	{
		static size_t spi_timeout_cnt=0;
		if(isSpiUpdated()) spi_timeout_cnt = 0;
 8000ec4:	f7ff ff02 	bl	8000ccc <isSpiUpdated>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d002      	beq.n	8000ed4 <HAL_TIM_PeriodElapsedCallback+0x20>
 8000ece:	4b1a      	ldr	r3, [pc, #104]	@ (8000f38 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
		if(spi_timeout_cnt++ >= 5) {
 8000ed4:	4b18      	ldr	r3, [pc, #96]	@ (8000f38 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	1c5a      	adds	r2, r3, #1
 8000eda:	4917      	ldr	r1, [pc, #92]	@ (8000f38 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000edc:	600a      	str	r2, [r1, #0]
 8000ede:	2b04      	cmp	r3, #4
 8000ee0:	d905      	bls.n	8000eee <HAL_TIM_PeriodElapsedCallback+0x3a>
			g_control = false;
 8000ee2:	4b16      	ldr	r3, [pc, #88]	@ (8000f3c <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	701a      	strb	r2, [r3, #0]
			printf("SPI TIMEOUT ERROR\r\n");
 8000ee8:	4815      	ldr	r0, [pc, #84]	@ (8000f40 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000eea:	f007 fb09 	bl	8008500 <puts>
		}
		static size_t power_timeout_cnt=0;
		if(isPowerUpdated()) power_timeout_cnt = 0;
 8000eee:	f7ff ff87 	bl	8000e00 <isPowerUpdated>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d002      	beq.n	8000efe <HAL_TIM_PeriodElapsedCallback+0x4a>
 8000ef8:	4b12      	ldr	r3, [pc, #72]	@ (8000f44 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	601a      	str	r2, [r3, #0]
		if(power_timeout_cnt++ >= 5) {
 8000efe:	4b11      	ldr	r3, [pc, #68]	@ (8000f44 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	3301      	adds	r3, #1
 8000f04:	4a0f      	ldr	r2, [pc, #60]	@ (8000f44 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000f06:	6013      	str	r3, [r2, #0]
			//g_control = false;
			//printf("POWER TIMEOUT ERROR\r\n");//todo
		}
		if(g_main_loop_flag){
 8000f08:	4b0f      	ldr	r3, [pc, #60]	@ (8000f48 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d003      	beq.n	8000f18 <HAL_TIM_PeriodElapsedCallback+0x64>
			printf("Control cycle is slow\r\n");
 8000f10:	480e      	ldr	r0, [pc, #56]	@ (8000f4c <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000f12:	f007 faf5 	bl	8008500 <puts>
 8000f16:	e002      	b.n	8000f1e <HAL_TIM_PeriodElapsedCallback+0x6a>
		}
		else{
			g_main_loop_flag = true;
 8000f18:	4b0b      	ldr	r3, [pc, #44]	@ (8000f48 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	701a      	strb	r2, [r3, #0]
		}
	}
	if(htim == &htim7){
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4a0b      	ldr	r2, [pc, #44]	@ (8000f50 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d101      	bne.n	8000f2a <HAL_TIM_PeriodElapsedCallback+0x76>
		sendPowerCanData();
 8000f26:	f7ff ff77 	bl	8000e18 <sendPowerCanData>
	}

}
 8000f2a:	bf00      	nop
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	20000448 	.word	0x20000448
 8000f38:	2000056c 	.word	0x2000056c
 8000f3c:	20000569 	.word	0x20000569
 8000f40:	0800a4a0 	.word	0x0800a4a0
 8000f44:	20000570 	.word	0x20000570
 8000f48:	20000568 	.word	0x20000568
 8000f4c:	0800a4b4 	.word	0x0800a4b4
 8000f50:	20000494 	.word	0x20000494

08000f54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000f58:	b09e      	sub	sp, #120	@ 0x78
 8000f5a:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f5c:	f001 fa62 	bl	8002424 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f60:	f000 faba 	bl	80014d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f64:	f000 fd82 	bl	8001a6c <MX_GPIO_Init>
  MX_DMA_Init();
 8000f68:	f000 fd5a 	bl	8001a20 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000f6c:	f000 fd28 	bl	80019c0 <MX_USART2_UART_Init>
  MX_CAN_Init();
 8000f70:	f000 fb06 	bl	8001580 <MX_CAN_Init>
  MX_SPI1_Init();
 8000f74:	f000 fb3a 	bl	80015ec <MX_SPI1_Init>
  MX_TIM1_Init();
 8000f78:	f000 fb70 	bl	800165c <MX_TIM1_Init>
  MX_TIM2_Init();
 8000f7c:	f000 fc0a 	bl	8001794 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000f80:	f000 fc5c 	bl	800183c <MX_TIM3_Init>
  MX_TIM6_Init();
 8000f84:	f000 fcb0 	bl	80018e8 <MX_TIM6_Init>
  MX_TIM7_Init();
 8000f88:	f000 fce4 	bl	8001954 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
	PIController pid;
	pid.kp = 5.0f;
 8000f8c:	4b4c      	ldr	r3, [pc, #304]	@ (80010c0 <main+0x16c>)
 8000f8e:	627b      	str	r3, [r7, #36]	@ 0x24
	pid.ki = 5.0f;
 8000f90:	4b4b      	ldr	r3, [pc, #300]	@ (80010c0 <main+0x16c>)
 8000f92:	62bb      	str	r3, [r7, #40]	@ 0x28
	pid.integral_l = 0.0f;
 8000f94:	f04f 0300 	mov.w	r3, #0
 8000f98:	62fb      	str	r3, [r7, #44]	@ 0x2c
	pid.integral_r = 0.0f;
 8000f9a:	f04f 0300 	mov.w	r3, #0
 8000f9e:	633b      	str	r3, [r7, #48]	@ 0x30
	spiInit(&hspi1);
 8000fa0:	4848      	ldr	r0, [pc, #288]	@ (80010c4 <main+0x170>)
 8000fa2:	f7ff fe59 	bl	8000c58 <spiInit>
	canInit(&hcan);
 8000fa6:	4848      	ldr	r0, [pc, #288]	@ (80010c8 <main+0x174>)
 8000fa8:	f7ff fed0 	bl	8000d4c <canInit>
	HAL_TIM_Encoder_Start( &htim2, TIM_CHANNEL_ALL );
 8000fac:	213c      	movs	r1, #60	@ 0x3c
 8000fae:	4847      	ldr	r0, [pc, #284]	@ (80010cc <main+0x178>)
 8000fb0:	f005 f9dc 	bl	800636c <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start( &htim3, TIM_CHANNEL_ALL );
 8000fb4:	213c      	movs	r1, #60	@ 0x3c
 8000fb6:	4846      	ldr	r0, [pc, #280]	@ (80010d0 <main+0x17c>)
 8000fb8:	f005 f9d8 	bl	800636c <HAL_TIM_Encoder_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000fbc:	2104      	movs	r1, #4
 8000fbe:	4845      	ldr	r0, [pc, #276]	@ (80010d4 <main+0x180>)
 8000fc0:	f005 f842 	bl	8006048 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000fc4:	2108      	movs	r1, #8
 8000fc6:	4843      	ldr	r0, [pc, #268]	@ (80010d4 <main+0x180>)
 8000fc8:	f005 f83e 	bl	8006048 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start_IT(&htim6);
 8000fcc:	4842      	ldr	r0, [pc, #264]	@ (80010d8 <main+0x184>)
 8000fce:	f004 ff87 	bl	8005ee0 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 8000fd2:	4842      	ldr	r0, [pc, #264]	@ (80010dc <main+0x188>)
 8000fd4:	f004 ff84 	bl	8005ee0 <HAL_TIM_Base_Start_IT>
	HAL_Delay(100);
 8000fd8:	2064      	movs	r0, #100	@ 0x64
 8000fda:	f001 fa89 	bl	80024f0 <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  	//wait main_loop_flag
		while(g_main_loop_flag == false){}
 8000fde:	bf00      	nop
 8000fe0:	4b3f      	ldr	r3, [pc, #252]	@ (80010e0 <main+0x18c>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	f083 0301 	eor.w	r3, r3, #1
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d1f8      	bne.n	8000fe0 <main+0x8c>

		//SPI
		Command command;
		getSpiData(&command);
 8000fee:	f107 0314 	add.w	r3, r7, #20
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f7ff fe48 	bl	8000c88 <getSpiData>
		//CAN
		setPowerCanData(&command.power_command);
 8000ff8:	f107 0314 	add.w	r3, r7, #20
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f7ff fef1 	bl	8000de4 <setPowerCanData>

		//todo
		command.vel_l = 1.0f;
 8001002:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001006:	61bb      	str	r3, [r7, #24]
		command.vel_r = 0.0f;
 8001008:	f04f 0300 	mov.w	r3, #0
 800100c:	61fb      	str	r3, [r7, #28]

		//encoder
		static int last_cnt_l;
		static int last_cnt_r;

		int cnt_l = (int16_t)TIM2->CNT;
 800100e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001012:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001014:	b21b      	sxth	r3, r3
 8001016:	643b      	str	r3, [r7, #64]	@ 0x40
		int cnt_r = (int16_t)TIM3->CNT;
 8001018:	4b32      	ldr	r3, [pc, #200]	@ (80010e4 <main+0x190>)
 800101a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800101c:	b21b      	sxth	r3, r3
 800101e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		if(abs(last_cnt_l - cnt_l) > 0x8000){
 8001020:	4b31      	ldr	r3, [pc, #196]	@ (80010e8 <main+0x194>)
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001026:	1ad3      	subs	r3, r2, r3
 8001028:	2b00      	cmp	r3, #0
 800102a:	bfb8      	it	lt
 800102c:	425b      	neglt	r3, r3
 800102e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001032:	dd26      	ble.n	8001082 <main+0x12e>
			if (last_cnt_l > 0 && cnt_l < 0 && (last_cnt_l - cnt_l) > 0){
 8001034:	4b2c      	ldr	r3, [pc, #176]	@ (80010e8 <main+0x194>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	2b00      	cmp	r3, #0
 800103a:	dd0f      	ble.n	800105c <main+0x108>
 800103c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800103e:	2b00      	cmp	r3, #0
 8001040:	da0c      	bge.n	800105c <main+0x108>
 8001042:	4b29      	ldr	r3, [pc, #164]	@ (80010e8 <main+0x194>)
 8001044:	681a      	ldr	r2, [r3, #0]
 8001046:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001048:	1ad3      	subs	r3, r2, r3
 800104a:	2b00      	cmp	r3, #0
 800104c:	dd06      	ble.n	800105c <main+0x108>
				last_cnt_l -= 0x10000; //オーバーフロー
 800104e:	4b26      	ldr	r3, [pc, #152]	@ (80010e8 <main+0x194>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
 8001056:	4a24      	ldr	r2, [pc, #144]	@ (80010e8 <main+0x194>)
 8001058:	6013      	str	r3, [r2, #0]
 800105a:	e012      	b.n	8001082 <main+0x12e>
			}
			else if (last_cnt_l < 0 && cnt_l > 0 && (last_cnt_l - cnt_l) < 0){
 800105c:	4b22      	ldr	r3, [pc, #136]	@ (80010e8 <main+0x194>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	2b00      	cmp	r3, #0
 8001062:	da0e      	bge.n	8001082 <main+0x12e>
 8001064:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001066:	2b00      	cmp	r3, #0
 8001068:	dd0b      	ble.n	8001082 <main+0x12e>
 800106a:	4b1f      	ldr	r3, [pc, #124]	@ (80010e8 <main+0x194>)
 800106c:	681a      	ldr	r2, [r3, #0]
 800106e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001070:	1ad3      	subs	r3, r2, r3
 8001072:	2b00      	cmp	r3, #0
 8001074:	da05      	bge.n	8001082 <main+0x12e>
				last_cnt_l += 0x10000; //アンダーフロー
 8001076:	4b1c      	ldr	r3, [pc, #112]	@ (80010e8 <main+0x194>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 800107e:	4a1a      	ldr	r2, [pc, #104]	@ (80010e8 <main+0x194>)
 8001080:	6013      	str	r3, [r2, #0]
			}
		}
		if(abs(last_cnt_r - cnt_r) > 0x8000){
 8001082:	4b1a      	ldr	r3, [pc, #104]	@ (80010ec <main+0x198>)
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001088:	1ad3      	subs	r3, r2, r3
 800108a:	2b00      	cmp	r3, #0
 800108c:	bfb8      	it	lt
 800108e:	425b      	neglt	r3, r3
 8001090:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001094:	dd3f      	ble.n	8001116 <main+0x1c2>
			if (last_cnt_r > 0 && cnt_r < 0 && (last_cnt_r - cnt_r) > 0){
 8001096:	4b15      	ldr	r3, [pc, #84]	@ (80010ec <main+0x198>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	2b00      	cmp	r3, #0
 800109c:	dd28      	ble.n	80010f0 <main+0x19c>
 800109e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	da25      	bge.n	80010f0 <main+0x19c>
 80010a4:	4b11      	ldr	r3, [pc, #68]	@ (80010ec <main+0x198>)
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80010aa:	1ad3      	subs	r3, r2, r3
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	dd1f      	ble.n	80010f0 <main+0x19c>
				last_cnt_r -= 0x10000; //オーバーフロー
 80010b0:	4b0e      	ldr	r3, [pc, #56]	@ (80010ec <main+0x198>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
 80010b8:	4a0c      	ldr	r2, [pc, #48]	@ (80010ec <main+0x198>)
 80010ba:	6013      	str	r3, [r2, #0]
 80010bc:	e02b      	b.n	8001116 <main+0x1c2>
 80010be:	bf00      	nop
 80010c0:	40a00000 	.word	0x40a00000
 80010c4:	20000278 	.word	0x20000278
 80010c8:	20000250 	.word	0x20000250
 80010cc:	200003b0 	.word	0x200003b0
 80010d0:	200003fc 	.word	0x200003fc
 80010d4:	20000364 	.word	0x20000364
 80010d8:	20000448 	.word	0x20000448
 80010dc:	20000494 	.word	0x20000494
 80010e0:	20000568 	.word	0x20000568
 80010e4:	40000400 	.word	0x40000400
 80010e8:	20000574 	.word	0x20000574
 80010ec:	20000578 	.word	0x20000578
			}
			else if (last_cnt_r < 0 && cnt_r > 0 && (last_cnt_r - cnt_r) < 0){
 80010f0:	4bbe      	ldr	r3, [pc, #760]	@ (80013ec <main+0x498>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	da0e      	bge.n	8001116 <main+0x1c2>
 80010f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	dd0b      	ble.n	8001116 <main+0x1c2>
 80010fe:	4bbb      	ldr	r3, [pc, #748]	@ (80013ec <main+0x498>)
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	2b00      	cmp	r3, #0
 8001108:	da05      	bge.n	8001116 <main+0x1c2>
				last_cnt_r += 0x10000; //アンダーフロー
 800110a:	4bb8      	ldr	r3, [pc, #736]	@ (80013ec <main+0x498>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8001112:	4ab6      	ldr	r2, [pc, #728]	@ (80013ec <main+0x498>)
 8001114:	6013      	str	r3, [r2, #0]
			}
		}
		float vel_l = ((float) (cnt_l - last_cnt_l) * ENC_TO_TIRE * RATE) / RESOLUTION;
 8001116:	4bb6      	ldr	r3, [pc, #728]	@ (80013f0 <main+0x49c>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800111c:	1ad3      	subs	r3, r2, r3
 800111e:	ee07 3a90 	vmov	s15, r3
 8001122:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001126:	ed9f 7ab3 	vldr	s14, [pc, #716]	@ 80013f4 <main+0x4a0>
 800112a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800112e:	eddf 7ab2 	vldr	s15, [pc, #712]	@ 80013f8 <main+0x4a4>
 8001132:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001136:	ee67 6a27 	vmul.f32	s13, s14, s15
 800113a:	eddf 7ab0 	vldr	s15, [pc, #704]	@ 80013fc <main+0x4a8>
 800113e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001142:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001146:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
		float vel_r = -((float) (cnt_r - last_cnt_r) * ENC_TO_TIRE * RATE) / RESOLUTION;
 800114a:	4ba8      	ldr	r3, [pc, #672]	@ (80013ec <main+0x498>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001150:	1ad3      	subs	r3, r2, r3
 8001152:	ee07 3a90 	vmov	s15, r3
 8001156:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800115a:	ed9f 7aa6 	vldr	s14, [pc, #664]	@ 80013f4 <main+0x4a0>
 800115e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001162:	eddf 7aa5 	vldr	s15, [pc, #660]	@ 80013f8 <main+0x4a4>
 8001166:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800116a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800116e:	eef1 6a67 	vneg.f32	s13, s15
 8001172:	eddf 7aa2 	vldr	s15, [pc, #648]	@ 80013fc <main+0x4a8>
 8001176:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800117a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800117e:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		last_cnt_l = cnt_l;
 8001182:	4a9b      	ldr	r2, [pc, #620]	@ (80013f0 <main+0x49c>)
 8001184:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001186:	6013      	str	r3, [r2, #0]
		last_cnt_r = cnt_r;
 8001188:	4a98      	ldr	r2, [pc, #608]	@ (80013ec <main+0x498>)
 800118a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800118c:	6013      	str	r3, [r2, #0]

		//PI control
		float volt_l;
		float volt_r;
		//todo
		g_control = true;
 800118e:	4b9c      	ldr	r3, [pc, #624]	@ (8001400 <main+0x4ac>)
 8001190:	2201      	movs	r2, #1
 8001192:	701a      	strb	r2, [r3, #0]
		if (g_control) {
 8001194:	4b9a      	ldr	r3, [pc, #616]	@ (8001400 <main+0x4ac>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	2b00      	cmp	r3, #0
 800119a:	f000 80d9 	beq.w	8001350 <main+0x3fc>
			float e_l = command.vel_l - vel_l;
 800119e:	ed97 7a06 	vldr	s14, [r7, #24]
 80011a2:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80011a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011aa:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
			float e_r = command.vel_r - vel_r;
 80011ae:	ed97 7a07 	vldr	s14, [r7, #28]
 80011b2:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80011b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011ba:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
			if(fabsf(e_l)>10.0f) e_l = 0;
 80011be:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 80011c2:	eef0 7ae7 	vabs.f32	s15, s15
 80011c6:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80011ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011d2:	dd02      	ble.n	80011da <main+0x286>
 80011d4:	f04f 0300 	mov.w	r3, #0
 80011d8:	657b      	str	r3, [r7, #84]	@ 0x54
			if(fabsf(e_r)>10.0f) e_r = 0;
 80011da:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 80011de:	eef0 7ae7 	vabs.f32	s15, s15
 80011e2:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80011e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011ee:	dd02      	ble.n	80011f6 <main+0x2a2>
 80011f0:	f04f 0300 	mov.w	r3, #0
 80011f4:	653b      	str	r3, [r7, #80]	@ 0x50
			pid.integral_l += e_l * DT;
 80011f6:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80011fa:	eddf 6a82 	vldr	s13, [pc, #520]	@ 8001404 <main+0x4b0>
 80011fe:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8001202:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001206:	ee77 7a27 	vadd.f32	s15, s14, s15
 800120a:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
			pid.integral_r += e_r * DT;
 800120e:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8001212:	eddf 6a7c 	vldr	s13, [pc, #496]	@ 8001404 <main+0x4b0>
 8001216:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 800121a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800121e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001222:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
			pid.integral_l = fmaxf(fminf(pid.integral_l,2.5f),-2.5f);
 8001226:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800122a:	eef0 0a04 	vmov.f32	s1, #4	@ 0x40200000  2.5
 800122e:	eeb0 0a67 	vmov.f32	s0, s15
 8001232:	f009 f8f0 	bl	800a416 <fminf>
 8001236:	eef0 7a40 	vmov.f32	s15, s0
 800123a:	eef8 0a04 	vmov.f32	s1, #132	@ 0xc0200000 -2.5
 800123e:	eeb0 0a67 	vmov.f32	s0, s15
 8001242:	f009 f8cb 	bl	800a3dc <fmaxf>
 8001246:	eef0 7a40 	vmov.f32	s15, s0
 800124a:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
			pid.integral_r = fmaxf(fminf(pid.integral_r,2.5f),-2.5f);
 800124e:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001252:	eef0 0a04 	vmov.f32	s1, #4	@ 0x40200000  2.5
 8001256:	eeb0 0a67 	vmov.f32	s0, s15
 800125a:	f009 f8dc 	bl	800a416 <fminf>
 800125e:	eef0 7a40 	vmov.f32	s15, s0
 8001262:	eef8 0a04 	vmov.f32	s1, #132	@ 0xc0200000 -2.5
 8001266:	eeb0 0a67 	vmov.f32	s0, s15
 800126a:	f009 f8b7 	bl	800a3dc <fmaxf>
 800126e:	eef0 7a40 	vmov.f32	s15, s0
 8001272:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
			volt_l = pid.kp * e_l + pid.ki * pid.integral_l;
 8001276:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800127a:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800127e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001282:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8001286:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800128a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800128e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001292:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
			volt_r = pid.kp * e_r + pid.ki * pid.integral_r;
 8001296:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800129a:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 800129e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012a2:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 80012a6:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80012aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012b2:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
			//線形化
			volt_l = (volt_l > 0.0f) ? volt_l + 0.9f : volt_l - 0.9f;
 80012b6:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 80012ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012c2:	dd06      	ble.n	80012d2 <main+0x37e>
 80012c4:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 80012c8:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 8001408 <main+0x4b4>
 80012cc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80012d0:	e005      	b.n	80012de <main+0x38a>
 80012d2:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 80012d6:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 8001408 <main+0x4b4>
 80012da:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80012de:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
			volt_r = (volt_r > 0.0f) ? volt_r + 0.9f : volt_r - 0.9f;
 80012e2:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 80012e6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ee:	dd06      	ble.n	80012fe <main+0x3aa>
 80012f0:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 80012f4:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 8001408 <main+0x4b4>
 80012f8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80012fc:	e005      	b.n	800130a <main+0x3b6>
 80012fe:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8001302:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 8001408 <main+0x4b4>
 8001306:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800130a:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
//			volt_l = fmaxf(fminf(volt_l,12.0f),-12.0f);
//			volt_r = fmaxf(fminf(volt_r,12.0f),-12.0f);
			volt_l = fmaxf(fminf(volt_l, 6.0f), -6.0f);
 800130e:	eef1 0a08 	vmov.f32	s1, #24	@ 0x40c00000  6.0
 8001312:	ed97 0a17 	vldr	s0, [r7, #92]	@ 0x5c
 8001316:	f009 f87e 	bl	800a416 <fminf>
 800131a:	eef0 7a40 	vmov.f32	s15, s0
 800131e:	eef9 0a08 	vmov.f32	s1, #152	@ 0xc0c00000 -6.0
 8001322:	eeb0 0a67 	vmov.f32	s0, s15
 8001326:	f009 f859 	bl	800a3dc <fmaxf>
 800132a:	ed87 0a17 	vstr	s0, [r7, #92]	@ 0x5c
			volt_r = fmaxf(fminf(volt_r, 6.0f), -6.0f);
 800132e:	eef1 0a08 	vmov.f32	s1, #24	@ 0x40c00000  6.0
 8001332:	ed97 0a16 	vldr	s0, [r7, #88]	@ 0x58
 8001336:	f009 f86e 	bl	800a416 <fminf>
 800133a:	eef0 7a40 	vmov.f32	s15, s0
 800133e:	eef9 0a08 	vmov.f32	s1, #152	@ 0xc0c00000 -6.0
 8001342:	eeb0 0a67 	vmov.f32	s0, s15
 8001346:	f009 f849 	bl	800a3dc <fmaxf>
 800134a:	ed87 0a16 	vstr	s0, [r7, #88]	@ 0x58
 800134e:	e00b      	b.n	8001368 <main+0x414>
			// タイヤ速度異常
			// SPI通信異常
			// CAN通信異常


			pid.integral_l = 0.0f;
 8001350:	f04f 0300 	mov.w	r3, #0
 8001354:	62fb      	str	r3, [r7, #44]	@ 0x2c
			pid.integral_r = 0.0f;
 8001356:	f04f 0300 	mov.w	r3, #0
 800135a:	633b      	str	r3, [r7, #48]	@ 0x30
			volt_l = 0.0f;
 800135c:	f04f 0300 	mov.w	r3, #0
 8001360:	65fb      	str	r3, [r7, #92]	@ 0x5c
			volt_r = 0.0f;
 8001362:	f04f 0300 	mov.w	r3, #0
 8001366:	65bb      	str	r3, [r7, #88]	@ 0x58
		//PWM
		uint32_t pwm_l;
		uint32_t pwm_r;
		bool dir_l;
		bool dir_r;
		if (g_control){
 8001368:	4b25      	ldr	r3, [pc, #148]	@ (8001400 <main+0x4ac>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d04f      	beq.n	8001410 <main+0x4bc>
			pwm_l = (uint32_t)(MAX_DUTY_CNT * (fabsf(volt_l)/12.0f));
 8001370:	eddf 7a26 	vldr	s15, [pc, #152]	@ 800140c <main+0x4b8>
 8001374:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001378:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 800137c:	eef0 6ae7 	vabs.f32	s13, s15
 8001380:	eeb2 6a08 	vmov.f32	s12, #40	@ 0x41400000  12.0
 8001384:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001388:	ee67 7a27 	vmul.f32	s15, s14, s15
 800138c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001390:	ee17 3a90 	vmov	r3, s15
 8001394:	64fb      	str	r3, [r7, #76]	@ 0x4c
			pwm_r = (uint32_t)(MAX_DUTY_CNT * (fabsf(volt_r)/12.0f));
 8001396:	eddf 7a1d 	vldr	s15, [pc, #116]	@ 800140c <main+0x4b8>
 800139a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800139e:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 80013a2:	eef0 6ae7 	vabs.f32	s13, s15
 80013a6:	eeb2 6a08 	vmov.f32	s12, #40	@ 0x41400000  12.0
 80013aa:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80013ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013b6:	ee17 3a90 	vmov	r3, s15
 80013ba:	64bb      	str	r3, [r7, #72]	@ 0x48
			dir_l = (volt_l > 0.0f) ? true : false;
 80013bc:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 80013c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013c8:	bfcc      	ite	gt
 80013ca:	2301      	movgt	r3, #1
 80013cc:	2300      	movle	r3, #0
 80013ce:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
			dir_r = (volt_r < 0.0f) ? true : false;
 80013d2:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 80013d6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013de:	bf4c      	ite	mi
 80013e0:	2301      	movmi	r3, #1
 80013e2:	2300      	movpl	r3, #0
 80013e4:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 80013e8:	e01c      	b.n	8001424 <main+0x4d0>
 80013ea:	bf00      	nop
 80013ec:	20000578 	.word	0x20000578
 80013f0:	20000574 	.word	0x20000574
 80013f4:	3eb6db6e 	.word	0x3eb6db6e
 80013f8:	00000032 	.word	0x00000032
 80013fc:	00001000 	.word	0x00001000
 8001400:	20000569 	.word	0x20000569
 8001404:	3ca3d70a 	.word	0x3ca3d70a
 8001408:	3f666666 	.word	0x3f666666
 800140c:	00001f3f 	.word	0x00001f3f
		}
		else{
			pwm_l = 0;
 8001410:	2300      	movs	r3, #0
 8001412:	64fb      	str	r3, [r7, #76]	@ 0x4c
			pwm_r = 0;
 8001414:	2300      	movs	r3, #0
 8001416:	64bb      	str	r3, [r7, #72]	@ 0x48
			dir_l = false;
 8001418:	2300      	movs	r3, #0
 800141a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
			dir_r = false;
 800141e:	2300      	movs	r3, #0
 8001420:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
		}
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pwm_l);
 8001424:	4b27      	ldr	r3, [pc, #156]	@ (80014c4 <main+0x570>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800142a:	639a      	str	r2, [r3, #56]	@ 0x38
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, pwm_r);
 800142c:	4b25      	ldr	r3, [pc, #148]	@ (80014c4 <main+0x570>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001432:	63da      	str	r2, [r3, #60]	@ 0x3c
		HAL_GPIO_WritePin(DIR_L_GPIO_Port, DIR_L_Pin, dir_l);
 8001434:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8001438:	461a      	mov	r2, r3
 800143a:	2102      	movs	r1, #2
 800143c:	4822      	ldr	r0, [pc, #136]	@ (80014c8 <main+0x574>)
 800143e:	f002 fb1b 	bl	8003a78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DIR_R_GPIO_Port, DIR_R_Pin, dir_r);
 8001442:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8001446:	461a      	mov	r2, r3
 8001448:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800144c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001450:	f002 fb12 	bl	8003a78 <HAL_GPIO_WritePin>
		//return SPI&CAN
		Result result;
		getPowerCanData(&result.power_result);
 8001454:	463b      	mov	r3, r7
 8001456:	4618      	mov	r0, r3
 8001458:	f7ff fcb0 	bl	8000dbc <getPowerCanData>
		result.vel_l = vel_l;
 800145c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800145e:	607b      	str	r3, [r7, #4]
		result.vel_r = vel_r;
 8001460:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001462:	60bb      	str	r3, [r7, #8]
		result.cnt_l = TIM2->CNT;
 8001464:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001468:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800146a:	b29b      	uxth	r3, r3
 800146c:	81bb      	strh	r3, [r7, #12]
		result.cnt_r = TIM3->CNT;
 800146e:	4b17      	ldr	r3, [pc, #92]	@ (80014cc <main+0x578>)
 8001470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001472:	b29b      	uxth	r3, r3
 8001474:	81fb      	strh	r3, [r7, #14]
		setSpiData(&result);
 8001476:	463b      	mov	r3, r7
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff fc19 	bl	8000cb0 <setSpiData>
		printf("vel:(%f,%f), volt:(%f,%f)\r\n",vel_l,vel_r,volt_l,volt_r);
 800147e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8001480:	f7ff f862 	bl	8000548 <__aeabi_f2d>
 8001484:	4682      	mov	sl, r0
 8001486:	468b      	mov	fp, r1
 8001488:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800148a:	f7ff f85d 	bl	8000548 <__aeabi_f2d>
 800148e:	4604      	mov	r4, r0
 8001490:	460d      	mov	r5, r1
 8001492:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8001494:	f7ff f858 	bl	8000548 <__aeabi_f2d>
 8001498:	4680      	mov	r8, r0
 800149a:	4689      	mov	r9, r1
 800149c:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800149e:	f7ff f853 	bl	8000548 <__aeabi_f2d>
 80014a2:	4602      	mov	r2, r0
 80014a4:	460b      	mov	r3, r1
 80014a6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80014aa:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80014ae:	e9cd 4500 	strd	r4, r5, [sp]
 80014b2:	4652      	mov	r2, sl
 80014b4:	465b      	mov	r3, fp
 80014b6:	4806      	ldr	r0, [pc, #24]	@ (80014d0 <main+0x57c>)
 80014b8:	f006 ffba 	bl	8008430 <iprintf>
		g_main_loop_flag = false;
 80014bc:	4b05      	ldr	r3, [pc, #20]	@ (80014d4 <main+0x580>)
 80014be:	2200      	movs	r2, #0
 80014c0:	701a      	strb	r2, [r3, #0]
  {
 80014c2:	e58c      	b.n	8000fde <main+0x8a>
 80014c4:	20000364 	.word	0x20000364
 80014c8:	48001400 	.word	0x48001400
 80014cc:	40000400 	.word	0x40000400
 80014d0:	0800a4cc 	.word	0x0800a4cc
 80014d4:	20000568 	.word	0x20000568

080014d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b096      	sub	sp, #88	@ 0x58
 80014dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014de:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80014e2:	2228      	movs	r2, #40	@ 0x28
 80014e4:	2100      	movs	r1, #0
 80014e6:	4618      	mov	r0, r3
 80014e8:	f007 f8ea 	bl	80086c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014ec:	f107 031c 	add.w	r3, r7, #28
 80014f0:	2200      	movs	r2, #0
 80014f2:	601a      	str	r2, [r3, #0]
 80014f4:	605a      	str	r2, [r3, #4]
 80014f6:	609a      	str	r2, [r3, #8]
 80014f8:	60da      	str	r2, [r3, #12]
 80014fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014fc:	1d3b      	adds	r3, r7, #4
 80014fe:	2200      	movs	r2, #0
 8001500:	601a      	str	r2, [r3, #0]
 8001502:	605a      	str	r2, [r3, #4]
 8001504:	609a      	str	r2, [r3, #8]
 8001506:	60da      	str	r2, [r3, #12]
 8001508:	611a      	str	r2, [r3, #16]
 800150a:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800150c:	2302      	movs	r3, #2
 800150e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001510:	2301      	movs	r3, #1
 8001512:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001514:	2310      	movs	r3, #16
 8001516:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001518:	2300      	movs	r3, #0
 800151a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800151c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001520:	4618      	mov	r0, r3
 8001522:	f002 fac1 	bl	8003aa8 <HAL_RCC_OscConfig>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800152c:	f000 fb2e 	bl	8001b8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001530:	230f      	movs	r3, #15
 8001532:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001534:	2300      	movs	r3, #0
 8001536:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001538:	2300      	movs	r3, #0
 800153a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800153c:	2300      	movs	r3, #0
 800153e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001540:	2300      	movs	r3, #0
 8001542:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001544:	f107 031c 	add.w	r3, r7, #28
 8001548:	2100      	movs	r1, #0
 800154a:	4618      	mov	r0, r3
 800154c:	f003 faea 	bl	8004b24 <HAL_RCC_ClockConfig>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001556:	f000 fb19 	bl	8001b8c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 800155a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800155e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8001560:	2300      	movs	r3, #0
 8001562:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001564:	1d3b      	adds	r3, r7, #4
 8001566:	4618      	mov	r0, r3
 8001568:	f003 fcfc 	bl	8004f64 <HAL_RCCEx_PeriphCLKConfig>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001572:	f000 fb0b 	bl	8001b8c <Error_Handler>
  }
}
 8001576:	bf00      	nop
 8001578:	3758      	adds	r7, #88	@ 0x58
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
	...

08001580 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8001584:	4b17      	ldr	r3, [pc, #92]	@ (80015e4 <MX_CAN_Init+0x64>)
 8001586:	4a18      	ldr	r2, [pc, #96]	@ (80015e8 <MX_CAN_Init+0x68>)
 8001588:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 1;
 800158a:	4b16      	ldr	r3, [pc, #88]	@ (80015e4 <MX_CAN_Init+0x64>)
 800158c:	2201      	movs	r2, #1
 800158e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001590:	4b14      	ldr	r3, [pc, #80]	@ (80015e4 <MX_CAN_Init+0x64>)
 8001592:	2200      	movs	r2, #0
 8001594:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001596:	4b13      	ldr	r3, [pc, #76]	@ (80015e4 <MX_CAN_Init+0x64>)
 8001598:	2200      	movs	r2, #0
 800159a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_10TQ;
 800159c:	4b11      	ldr	r3, [pc, #68]	@ (80015e4 <MX_CAN_Init+0x64>)
 800159e:	f44f 2210 	mov.w	r2, #589824	@ 0x90000
 80015a2:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_5TQ;
 80015a4:	4b0f      	ldr	r3, [pc, #60]	@ (80015e4 <MX_CAN_Init+0x64>)
 80015a6:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80015aa:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80015ac:	4b0d      	ldr	r3, [pc, #52]	@ (80015e4 <MX_CAN_Init+0x64>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80015b2:	4b0c      	ldr	r3, [pc, #48]	@ (80015e4 <MX_CAN_Init+0x64>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80015b8:	4b0a      	ldr	r3, [pc, #40]	@ (80015e4 <MX_CAN_Init+0x64>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80015be:	4b09      	ldr	r3, [pc, #36]	@ (80015e4 <MX_CAN_Init+0x64>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80015c4:	4b07      	ldr	r3, [pc, #28]	@ (80015e4 <MX_CAN_Init+0x64>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80015ca:	4b06      	ldr	r3, [pc, #24]	@ (80015e4 <MX_CAN_Init+0x64>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80015d0:	4804      	ldr	r0, [pc, #16]	@ (80015e4 <MX_CAN_Init+0x64>)
 80015d2:	f000 ffb1 	bl	8002538 <HAL_CAN_Init>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80015dc:	f000 fad6 	bl	8001b8c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80015e0:	bf00      	nop
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	20000250 	.word	0x20000250
 80015e8:	40006400 	.word	0x40006400

080015ec <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80015f0:	4b18      	ldr	r3, [pc, #96]	@ (8001654 <MX_SPI1_Init+0x68>)
 80015f2:	4a19      	ldr	r2, [pc, #100]	@ (8001658 <MX_SPI1_Init+0x6c>)
 80015f4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 80015f6:	4b17      	ldr	r3, [pc, #92]	@ (8001654 <MX_SPI1_Init+0x68>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80015fc:	4b15      	ldr	r3, [pc, #84]	@ (8001654 <MX_SPI1_Init+0x68>)
 80015fe:	2200      	movs	r2, #0
 8001600:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001602:	4b14      	ldr	r3, [pc, #80]	@ (8001654 <MX_SPI1_Init+0x68>)
 8001604:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001608:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800160a:	4b12      	ldr	r3, [pc, #72]	@ (8001654 <MX_SPI1_Init+0x68>)
 800160c:	2200      	movs	r2, #0
 800160e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001610:	4b10      	ldr	r3, [pc, #64]	@ (8001654 <MX_SPI1_Init+0x68>)
 8001612:	2200      	movs	r2, #0
 8001614:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8001616:	4b0f      	ldr	r3, [pc, #60]	@ (8001654 <MX_SPI1_Init+0x68>)
 8001618:	2200      	movs	r2, #0
 800161a:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800161c:	4b0d      	ldr	r3, [pc, #52]	@ (8001654 <MX_SPI1_Init+0x68>)
 800161e:	2200      	movs	r2, #0
 8001620:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001622:	4b0c      	ldr	r3, [pc, #48]	@ (8001654 <MX_SPI1_Init+0x68>)
 8001624:	2200      	movs	r2, #0
 8001626:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001628:	4b0a      	ldr	r3, [pc, #40]	@ (8001654 <MX_SPI1_Init+0x68>)
 800162a:	2200      	movs	r2, #0
 800162c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800162e:	4b09      	ldr	r3, [pc, #36]	@ (8001654 <MX_SPI1_Init+0x68>)
 8001630:	2207      	movs	r2, #7
 8001632:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001634:	4b07      	ldr	r3, [pc, #28]	@ (8001654 <MX_SPI1_Init+0x68>)
 8001636:	2200      	movs	r2, #0
 8001638:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800163a:	4b06      	ldr	r3, [pc, #24]	@ (8001654 <MX_SPI1_Init+0x68>)
 800163c:	2200      	movs	r2, #0
 800163e:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001640:	4804      	ldr	r0, [pc, #16]	@ (8001654 <MX_SPI1_Init+0x68>)
 8001642:	f003 fdb5 	bl	80051b0 <HAL_SPI_Init>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 800164c:	f000 fa9e 	bl	8001b8c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001650:	bf00      	nop
 8001652:	bd80      	pop	{r7, pc}
 8001654:	20000278 	.word	0x20000278
 8001658:	40013000 	.word	0x40013000

0800165c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b096      	sub	sp, #88	@ 0x58
 8001660:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001662:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001666:	2200      	movs	r2, #0
 8001668:	601a      	str	r2, [r3, #0]
 800166a:	605a      	str	r2, [r3, #4]
 800166c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800166e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001672:	2200      	movs	r2, #0
 8001674:	601a      	str	r2, [r3, #0]
 8001676:	605a      	str	r2, [r3, #4]
 8001678:	609a      	str	r2, [r3, #8]
 800167a:	60da      	str	r2, [r3, #12]
 800167c:	611a      	str	r2, [r3, #16]
 800167e:	615a      	str	r2, [r3, #20]
 8001680:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001682:	1d3b      	adds	r3, r7, #4
 8001684:	222c      	movs	r2, #44	@ 0x2c
 8001686:	2100      	movs	r1, #0
 8001688:	4618      	mov	r0, r3
 800168a:	f007 f819 	bl	80086c0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800168e:	4b3f      	ldr	r3, [pc, #252]	@ (800178c <MX_TIM1_Init+0x130>)
 8001690:	4a3f      	ldr	r2, [pc, #252]	@ (8001790 <MX_TIM1_Init+0x134>)
 8001692:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001694:	4b3d      	ldr	r3, [pc, #244]	@ (800178c <MX_TIM1_Init+0x130>)
 8001696:	2200      	movs	r2, #0
 8001698:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800169a:	4b3c      	ldr	r3, [pc, #240]	@ (800178c <MX_TIM1_Init+0x130>)
 800169c:	2200      	movs	r2, #0
 800169e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 7999;
 80016a0:	4b3a      	ldr	r3, [pc, #232]	@ (800178c <MX_TIM1_Init+0x130>)
 80016a2:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80016a6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016a8:	4b38      	ldr	r3, [pc, #224]	@ (800178c <MX_TIM1_Init+0x130>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80016ae:	4b37      	ldr	r3, [pc, #220]	@ (800178c <MX_TIM1_Init+0x130>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016b4:	4b35      	ldr	r3, [pc, #212]	@ (800178c <MX_TIM1_Init+0x130>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80016ba:	4834      	ldr	r0, [pc, #208]	@ (800178c <MX_TIM1_Init+0x130>)
 80016bc:	f004 fc6c 	bl	8005f98 <HAL_TIM_PWM_Init>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80016c6:	f000 fa61 	bl	8001b8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016ca:	2300      	movs	r3, #0
 80016cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80016ce:	2300      	movs	r3, #0
 80016d0:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016d2:	2300      	movs	r3, #0
 80016d4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80016d6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80016da:	4619      	mov	r1, r3
 80016dc:	482b      	ldr	r0, [pc, #172]	@ (800178c <MX_TIM1_Init+0x130>)
 80016de:	f005 fc61 	bl	8006fa4 <HAL_TIMEx_MasterConfigSynchronization>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80016e8:	f000 fa50 	bl	8001b8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016ec:	2360      	movs	r3, #96	@ 0x60
 80016ee:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 80016f0:	2300      	movs	r3, #0
 80016f2:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016f4:	2300      	movs	r3, #0
 80016f6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80016f8:	2300      	movs	r3, #0
 80016fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016fc:	2300      	movs	r3, #0
 80016fe:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001700:	2300      	movs	r3, #0
 8001702:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001704:	2300      	movs	r3, #0
 8001706:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001708:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800170c:	2204      	movs	r2, #4
 800170e:	4619      	mov	r1, r3
 8001710:	481e      	ldr	r0, [pc, #120]	@ (800178c <MX_TIM1_Init+0x130>)
 8001712:	f004 ffbb 	bl	800668c <HAL_TIM_PWM_ConfigChannel>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800171c:	f000 fa36 	bl	8001b8c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001720:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001724:	2208      	movs	r2, #8
 8001726:	4619      	mov	r1, r3
 8001728:	4818      	ldr	r0, [pc, #96]	@ (800178c <MX_TIM1_Init+0x130>)
 800172a:	f004 ffaf 	bl	800668c <HAL_TIM_PWM_ConfigChannel>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d001      	beq.n	8001738 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8001734:	f000 fa2a 	bl	8001b8c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001738:	2300      	movs	r3, #0
 800173a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800173c:	2300      	movs	r3, #0
 800173e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001740:	2300      	movs	r3, #0
 8001742:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001744:	2300      	movs	r3, #0
 8001746:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001748:	2300      	movs	r3, #0
 800174a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800174c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001750:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001752:	2300      	movs	r3, #0
 8001754:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001756:	2300      	movs	r3, #0
 8001758:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800175a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800175e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001760:	2300      	movs	r3, #0
 8001762:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001764:	2300      	movs	r3, #0
 8001766:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001768:	1d3b      	adds	r3, r7, #4
 800176a:	4619      	mov	r1, r3
 800176c:	4807      	ldr	r0, [pc, #28]	@ (800178c <MX_TIM1_Init+0x130>)
 800176e:	f005 fc87 	bl	8007080 <HAL_TIMEx_ConfigBreakDeadTime>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <MX_TIM1_Init+0x120>
  {
    Error_Handler();
 8001778:	f000 fa08 	bl	8001b8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800177c:	4803      	ldr	r0, [pc, #12]	@ (800178c <MX_TIM1_Init+0x130>)
 800177e:	f000 fc8d 	bl	800209c <HAL_TIM_MspPostInit>

}
 8001782:	bf00      	nop
 8001784:	3758      	adds	r7, #88	@ 0x58
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	20000364 	.word	0x20000364
 8001790:	40012c00 	.word	0x40012c00

08001794 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b08c      	sub	sp, #48	@ 0x30
 8001798:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800179a:	f107 030c 	add.w	r3, r7, #12
 800179e:	2224      	movs	r2, #36	@ 0x24
 80017a0:	2100      	movs	r1, #0
 80017a2:	4618      	mov	r0, r3
 80017a4:	f006 ff8c 	bl	80086c0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017a8:	463b      	mov	r3, r7
 80017aa:	2200      	movs	r2, #0
 80017ac:	601a      	str	r2, [r3, #0]
 80017ae:	605a      	str	r2, [r3, #4]
 80017b0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80017b2:	4b21      	ldr	r3, [pc, #132]	@ (8001838 <MX_TIM2_Init+0xa4>)
 80017b4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80017b8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80017ba:	4b1f      	ldr	r3, [pc, #124]	@ (8001838 <MX_TIM2_Init+0xa4>)
 80017bc:	2200      	movs	r2, #0
 80017be:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017c0:	4b1d      	ldr	r3, [pc, #116]	@ (8001838 <MX_TIM2_Init+0xa4>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65525;
 80017c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001838 <MX_TIM2_Init+0xa4>)
 80017c8:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80017cc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017ce:	4b1a      	ldr	r3, [pc, #104]	@ (8001838 <MX_TIM2_Init+0xa4>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017d4:	4b18      	ldr	r3, [pc, #96]	@ (8001838 <MX_TIM2_Init+0xa4>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80017da:	2303      	movs	r3, #3
 80017dc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80017de:	2300      	movs	r3, #0
 80017e0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80017e2:	2301      	movs	r3, #1
 80017e4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80017e6:	2300      	movs	r3, #0
 80017e8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80017ea:	2300      	movs	r3, #0
 80017ec:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80017ee:	2300      	movs	r3, #0
 80017f0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80017f2:	2301      	movs	r3, #1
 80017f4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80017f6:	2300      	movs	r3, #0
 80017f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80017fa:	2300      	movs	r3, #0
 80017fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80017fe:	f107 030c 	add.w	r3, r7, #12
 8001802:	4619      	mov	r1, r3
 8001804:	480c      	ldr	r0, [pc, #48]	@ (8001838 <MX_TIM2_Init+0xa4>)
 8001806:	f004 fd0b 	bl	8006220 <HAL_TIM_Encoder_Init>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001810:	f000 f9bc 	bl	8001b8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001814:	2300      	movs	r3, #0
 8001816:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001818:	2300      	movs	r3, #0
 800181a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800181c:	463b      	mov	r3, r7
 800181e:	4619      	mov	r1, r3
 8001820:	4805      	ldr	r0, [pc, #20]	@ (8001838 <MX_TIM2_Init+0xa4>)
 8001822:	f005 fbbf 	bl	8006fa4 <HAL_TIMEx_MasterConfigSynchronization>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 800182c:	f000 f9ae 	bl	8001b8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001830:	bf00      	nop
 8001832:	3730      	adds	r7, #48	@ 0x30
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	200003b0 	.word	0x200003b0

0800183c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b08c      	sub	sp, #48	@ 0x30
 8001840:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001842:	f107 030c 	add.w	r3, r7, #12
 8001846:	2224      	movs	r2, #36	@ 0x24
 8001848:	2100      	movs	r1, #0
 800184a:	4618      	mov	r0, r3
 800184c:	f006 ff38 	bl	80086c0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001850:	463b      	mov	r3, r7
 8001852:	2200      	movs	r2, #0
 8001854:	601a      	str	r2, [r3, #0]
 8001856:	605a      	str	r2, [r3, #4]
 8001858:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800185a:	4b21      	ldr	r3, [pc, #132]	@ (80018e0 <MX_TIM3_Init+0xa4>)
 800185c:	4a21      	ldr	r2, [pc, #132]	@ (80018e4 <MX_TIM3_Init+0xa8>)
 800185e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001860:	4b1f      	ldr	r3, [pc, #124]	@ (80018e0 <MX_TIM3_Init+0xa4>)
 8001862:	2200      	movs	r2, #0
 8001864:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001866:	4b1e      	ldr	r3, [pc, #120]	@ (80018e0 <MX_TIM3_Init+0xa4>)
 8001868:	2200      	movs	r2, #0
 800186a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800186c:	4b1c      	ldr	r3, [pc, #112]	@ (80018e0 <MX_TIM3_Init+0xa4>)
 800186e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001872:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001874:	4b1a      	ldr	r3, [pc, #104]	@ (80018e0 <MX_TIM3_Init+0xa4>)
 8001876:	2200      	movs	r2, #0
 8001878:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800187a:	4b19      	ldr	r3, [pc, #100]	@ (80018e0 <MX_TIM3_Init+0xa4>)
 800187c:	2200      	movs	r2, #0
 800187e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001880:	2301      	movs	r3, #1
 8001882:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001884:	2300      	movs	r3, #0
 8001886:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001888:	2301      	movs	r3, #1
 800188a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800188c:	2300      	movs	r3, #0
 800188e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001890:	2300      	movs	r3, #0
 8001892:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001894:	2300      	movs	r3, #0
 8001896:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001898:	2301      	movs	r3, #1
 800189a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800189c:	2300      	movs	r3, #0
 800189e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80018a0:	2300      	movs	r3, #0
 80018a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80018a4:	f107 030c 	add.w	r3, r7, #12
 80018a8:	4619      	mov	r1, r3
 80018aa:	480d      	ldr	r0, [pc, #52]	@ (80018e0 <MX_TIM3_Init+0xa4>)
 80018ac:	f004 fcb8 	bl	8006220 <HAL_TIM_Encoder_Init>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80018b6:	f000 f969 	bl	8001b8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018ba:	2300      	movs	r3, #0
 80018bc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018be:	2300      	movs	r3, #0
 80018c0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80018c2:	463b      	mov	r3, r7
 80018c4:	4619      	mov	r1, r3
 80018c6:	4806      	ldr	r0, [pc, #24]	@ (80018e0 <MX_TIM3_Init+0xa4>)
 80018c8:	f005 fb6c 	bl	8006fa4 <HAL_TIMEx_MasterConfigSynchronization>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80018d2:	f000 f95b 	bl	8001b8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80018d6:	bf00      	nop
 80018d8:	3730      	adds	r7, #48	@ 0x30
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	200003fc 	.word	0x200003fc
 80018e4:	40000400 	.word	0x40000400

080018e8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b084      	sub	sp, #16
 80018ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018ee:	1d3b      	adds	r3, r7, #4
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]
 80018f4:	605a      	str	r2, [r3, #4]
 80018f6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80018f8:	4b14      	ldr	r3, [pc, #80]	@ (800194c <MX_TIM6_Init+0x64>)
 80018fa:	4a15      	ldr	r2, [pc, #84]	@ (8001950 <MX_TIM6_Init+0x68>)
 80018fc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 19;
 80018fe:	4b13      	ldr	r3, [pc, #76]	@ (800194c <MX_TIM6_Init+0x64>)
 8001900:	2213      	movs	r2, #19
 8001902:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001904:	4b11      	ldr	r3, [pc, #68]	@ (800194c <MX_TIM6_Init+0x64>)
 8001906:	2200      	movs	r2, #0
 8001908:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 7999;
 800190a:	4b10      	ldr	r3, [pc, #64]	@ (800194c <MX_TIM6_Init+0x64>)
 800190c:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8001910:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001912:	4b0e      	ldr	r3, [pc, #56]	@ (800194c <MX_TIM6_Init+0x64>)
 8001914:	2200      	movs	r2, #0
 8001916:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001918:	480c      	ldr	r0, [pc, #48]	@ (800194c <MX_TIM6_Init+0x64>)
 800191a:	f004 fa89 	bl	8005e30 <HAL_TIM_Base_Init>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001924:	f000 f932 	bl	8001b8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001928:	2300      	movs	r3, #0
 800192a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800192c:	2300      	movs	r3, #0
 800192e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001930:	1d3b      	adds	r3, r7, #4
 8001932:	4619      	mov	r1, r3
 8001934:	4805      	ldr	r0, [pc, #20]	@ (800194c <MX_TIM6_Init+0x64>)
 8001936:	f005 fb35 	bl	8006fa4 <HAL_TIMEx_MasterConfigSynchronization>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001940:	f000 f924 	bl	8001b8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001944:	bf00      	nop
 8001946:	3710      	adds	r7, #16
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	20000448 	.word	0x20000448
 8001950:	40001000 	.word	0x40001000

08001954 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800195a:	1d3b      	adds	r3, r7, #4
 800195c:	2200      	movs	r2, #0
 800195e:	601a      	str	r2, [r3, #0]
 8001960:	605a      	str	r2, [r3, #4]
 8001962:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001964:	4b14      	ldr	r3, [pc, #80]	@ (80019b8 <MX_TIM7_Init+0x64>)
 8001966:	4a15      	ldr	r2, [pc, #84]	@ (80019bc <MX_TIM7_Init+0x68>)
 8001968:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 19;
 800196a:	4b13      	ldr	r3, [pc, #76]	@ (80019b8 <MX_TIM7_Init+0x64>)
 800196c:	2213      	movs	r2, #19
 800196e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001970:	4b11      	ldr	r3, [pc, #68]	@ (80019b8 <MX_TIM7_Init+0x64>)
 8001972:	2200      	movs	r2, #0
 8001974:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 7999;
 8001976:	4b10      	ldr	r3, [pc, #64]	@ (80019b8 <MX_TIM7_Init+0x64>)
 8001978:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 800197c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800197e:	4b0e      	ldr	r3, [pc, #56]	@ (80019b8 <MX_TIM7_Init+0x64>)
 8001980:	2200      	movs	r2, #0
 8001982:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001984:	480c      	ldr	r0, [pc, #48]	@ (80019b8 <MX_TIM7_Init+0x64>)
 8001986:	f004 fa53 	bl	8005e30 <HAL_TIM_Base_Init>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001990:	f000 f8fc 	bl	8001b8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001994:	2300      	movs	r3, #0
 8001996:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001998:	2300      	movs	r3, #0
 800199a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800199c:	1d3b      	adds	r3, r7, #4
 800199e:	4619      	mov	r1, r3
 80019a0:	4805      	ldr	r0, [pc, #20]	@ (80019b8 <MX_TIM7_Init+0x64>)
 80019a2:	f005 faff 	bl	8006fa4 <HAL_TIMEx_MasterConfigSynchronization>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80019ac:	f000 f8ee 	bl	8001b8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80019b0:	bf00      	nop
 80019b2:	3710      	adds	r7, #16
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	20000494 	.word	0x20000494
 80019bc:	40001400 	.word	0x40001400

080019c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80019c4:	4b14      	ldr	r3, [pc, #80]	@ (8001a18 <MX_USART2_UART_Init+0x58>)
 80019c6:	4a15      	ldr	r2, [pc, #84]	@ (8001a1c <MX_USART2_UART_Init+0x5c>)
 80019c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80019ca:	4b13      	ldr	r3, [pc, #76]	@ (8001a18 <MX_USART2_UART_Init+0x58>)
 80019cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80019d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80019d2:	4b11      	ldr	r3, [pc, #68]	@ (8001a18 <MX_USART2_UART_Init+0x58>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80019d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001a18 <MX_USART2_UART_Init+0x58>)
 80019da:	2200      	movs	r2, #0
 80019dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80019de:	4b0e      	ldr	r3, [pc, #56]	@ (8001a18 <MX_USART2_UART_Init+0x58>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80019e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001a18 <MX_USART2_UART_Init+0x58>)
 80019e6:	220c      	movs	r2, #12
 80019e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001a18 <MX_USART2_UART_Init+0x58>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80019f0:	4b09      	ldr	r3, [pc, #36]	@ (8001a18 <MX_USART2_UART_Init+0x58>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019f6:	4b08      	ldr	r3, [pc, #32]	@ (8001a18 <MX_USART2_UART_Init+0x58>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019fc:	4b06      	ldr	r3, [pc, #24]	@ (8001a18 <MX_USART2_UART_Init+0x58>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a02:	4805      	ldr	r0, [pc, #20]	@ (8001a18 <MX_USART2_UART_Init+0x58>)
 8001a04:	f005 fbd2 	bl	80071ac <HAL_UART_Init>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001a0e:	f000 f8bd 	bl	8001b8c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a12:	bf00      	nop
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	200004e0 	.word	0x200004e0
 8001a1c:	40004400 	.word	0x40004400

08001a20 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a26:	4b10      	ldr	r3, [pc, #64]	@ (8001a68 <MX_DMA_Init+0x48>)
 8001a28:	695b      	ldr	r3, [r3, #20]
 8001a2a:	4a0f      	ldr	r2, [pc, #60]	@ (8001a68 <MX_DMA_Init+0x48>)
 8001a2c:	f043 0301 	orr.w	r3, r3, #1
 8001a30:	6153      	str	r3, [r2, #20]
 8001a32:	4b0d      	ldr	r3, [pc, #52]	@ (8001a68 <MX_DMA_Init+0x48>)
 8001a34:	695b      	ldr	r3, [r3, #20]
 8001a36:	f003 0301 	and.w	r3, r3, #1
 8001a3a:	607b      	str	r3, [r7, #4]
 8001a3c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001a3e:	2200      	movs	r2, #0
 8001a40:	2100      	movs	r1, #0
 8001a42:	200c      	movs	r0, #12
 8001a44:	f001 fcd9 	bl	80033fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001a48:	200c      	movs	r0, #12
 8001a4a:	f001 fcf2 	bl	8003432 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001a4e:	2200      	movs	r2, #0
 8001a50:	2100      	movs	r1, #0
 8001a52:	200d      	movs	r0, #13
 8001a54:	f001 fcd1 	bl	80033fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001a58:	200d      	movs	r0, #13
 8001a5a:	f001 fcea 	bl	8003432 <HAL_NVIC_EnableIRQ>

}
 8001a5e:	bf00      	nop
 8001a60:	3708      	adds	r7, #8
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	40021000 	.word	0x40021000

08001a6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b088      	sub	sp, #32
 8001a70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a72:	f107 030c 	add.w	r3, r7, #12
 8001a76:	2200      	movs	r2, #0
 8001a78:	601a      	str	r2, [r3, #0]
 8001a7a:	605a      	str	r2, [r3, #4]
 8001a7c:	609a      	str	r2, [r3, #8]
 8001a7e:	60da      	str	r2, [r3, #12]
 8001a80:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a82:	4b35      	ldr	r3, [pc, #212]	@ (8001b58 <MX_GPIO_Init+0xec>)
 8001a84:	695b      	ldr	r3, [r3, #20]
 8001a86:	4a34      	ldr	r2, [pc, #208]	@ (8001b58 <MX_GPIO_Init+0xec>)
 8001a88:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001a8c:	6153      	str	r3, [r2, #20]
 8001a8e:	4b32      	ldr	r3, [pc, #200]	@ (8001b58 <MX_GPIO_Init+0xec>)
 8001a90:	695b      	ldr	r3, [r3, #20]
 8001a92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a96:	60bb      	str	r3, [r7, #8]
 8001a98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a9a:	4b2f      	ldr	r3, [pc, #188]	@ (8001b58 <MX_GPIO_Init+0xec>)
 8001a9c:	695b      	ldr	r3, [r3, #20]
 8001a9e:	4a2e      	ldr	r2, [pc, #184]	@ (8001b58 <MX_GPIO_Init+0xec>)
 8001aa0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001aa4:	6153      	str	r3, [r2, #20]
 8001aa6:	4b2c      	ldr	r3, [pc, #176]	@ (8001b58 <MX_GPIO_Init+0xec>)
 8001aa8:	695b      	ldr	r3, [r3, #20]
 8001aaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aae:	607b      	str	r3, [r7, #4]
 8001ab0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ab2:	4b29      	ldr	r3, [pc, #164]	@ (8001b58 <MX_GPIO_Init+0xec>)
 8001ab4:	695b      	ldr	r3, [r3, #20]
 8001ab6:	4a28      	ldr	r2, [pc, #160]	@ (8001b58 <MX_GPIO_Init+0xec>)
 8001ab8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001abc:	6153      	str	r3, [r2, #20]
 8001abe:	4b26      	ldr	r3, [pc, #152]	@ (8001b58 <MX_GPIO_Init+0xec>)
 8001ac0:	695b      	ldr	r3, [r3, #20]
 8001ac2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001ac6:	603b      	str	r3, [r7, #0]
 8001ac8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR_L_GPIO_Port, DIR_L_Pin, GPIO_PIN_RESET);
 8001aca:	2200      	movs	r2, #0
 8001acc:	2102      	movs	r1, #2
 8001ace:	4823      	ldr	r0, [pc, #140]	@ (8001b5c <MX_GPIO_Init+0xf0>)
 8001ad0:	f001 ffd2 	bl	8003a78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR_R_GPIO_Port, DIR_R_Pin, GPIO_PIN_RESET);
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001ada:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ade:	f001 ffcb 	bl	8003a78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DIR_L_Pin */
  GPIO_InitStruct.Pin = DIR_L_Pin;
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aea:	2300      	movs	r3, #0
 8001aec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aee:	2300      	movs	r3, #0
 8001af0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DIR_L_GPIO_Port, &GPIO_InitStruct);
 8001af2:	f107 030c 	add.w	r3, r7, #12
 8001af6:	4619      	mov	r1, r3
 8001af8:	4818      	ldr	r0, [pc, #96]	@ (8001b5c <MX_GPIO_Init+0xf0>)
 8001afa:	f001 fe4b 	bl	8003794 <HAL_GPIO_Init>

  /*Configure GPIO pin : enc_L_Z_Pin */
  GPIO_InitStruct.Pin = enc_L_Z_Pin;
 8001afe:	2308      	movs	r3, #8
 8001b00:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b02:	2300      	movs	r3, #0
 8001b04:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b06:	2300      	movs	r3, #0
 8001b08:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(enc_L_Z_GPIO_Port, &GPIO_InitStruct);
 8001b0a:	f107 030c 	add.w	r3, r7, #12
 8001b0e:	4619      	mov	r1, r3
 8001b10:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b14:	f001 fe3e 	bl	8003794 <HAL_GPIO_Init>

  /*Configure GPIO pin : enc_R_Z_Pin */
  GPIO_InitStruct.Pin = enc_R_Z_Pin;
 8001b18:	2302      	movs	r3, #2
 8001b1a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b20:	2300      	movs	r3, #0
 8001b22:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(enc_R_Z_GPIO_Port, &GPIO_InitStruct);
 8001b24:	f107 030c 	add.w	r3, r7, #12
 8001b28:	4619      	mov	r1, r3
 8001b2a:	480d      	ldr	r0, [pc, #52]	@ (8001b60 <MX_GPIO_Init+0xf4>)
 8001b2c:	f001 fe32 	bl	8003794 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIR_R_Pin */
  GPIO_InitStruct.Pin = DIR_R_Pin;
 8001b30:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b34:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b36:	2301      	movs	r3, #1
 8001b38:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DIR_R_GPIO_Port, &GPIO_InitStruct);
 8001b42:	f107 030c 	add.w	r3, r7, #12
 8001b46:	4619      	mov	r1, r3
 8001b48:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b4c:	f001 fe22 	bl	8003794 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b50:	bf00      	nop
 8001b52:	3720      	adds	r7, #32
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	40021000 	.word	0x40021000
 8001b5c:	48001400 	.word	0x48001400
 8001b60:	48000400 	.word	0x48000400

08001b64 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	60f8      	str	r0, [r7, #12]
 8001b6c:	60b9      	str	r1, [r7, #8]
 8001b6e:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2,(uint8_t *)ptr,len,10);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	b29a      	uxth	r2, r3
 8001b74:	230a      	movs	r3, #10
 8001b76:	68b9      	ldr	r1, [r7, #8]
 8001b78:	4803      	ldr	r0, [pc, #12]	@ (8001b88 <_write+0x24>)
 8001b7a:	f005 fb65 	bl	8007248 <HAL_UART_Transmit>
  return len;
 8001b7e:	687b      	ldr	r3, [r7, #4]
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3710      	adds	r7, #16
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	200004e0 	.word	0x200004e0

08001b8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b90:	b672      	cpsid	i
}
 8001b92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b94:	bf00      	nop
 8001b96:	e7fd      	b.n	8001b94 <Error_Handler+0x8>

08001b98 <calculateChecksum>:
#include <math.h>

#include "spi_data.h"

// チェックサムを計算する関数
uint8_t calculateChecksum(uint8_t* data, uint8_t length) {
 8001b98:	b480      	push	{r7}
 8001b9a:	b085      	sub	sp, #20
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	70fb      	strb	r3, [r7, #3]
	int sum = 0;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < length; i++) {
 8001ba8:	2300      	movs	r3, #0
 8001baa:	72fb      	strb	r3, [r7, #11]
 8001bac:	e00a      	b.n	8001bc4 <calculateChecksum+0x2c>
			sum += data[i];
 8001bae:	7afb      	ldrb	r3, [r7, #11]
 8001bb0:	687a      	ldr	r2, [r7, #4]
 8001bb2:	4413      	add	r3, r2
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	4413      	add	r3, r2
 8001bbc:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < length; i++) {
 8001bbe:	7afb      	ldrb	r3, [r7, #11]
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	72fb      	strb	r3, [r7, #11]
 8001bc4:	7afa      	ldrb	r2, [r7, #11]
 8001bc6:	78fb      	ldrb	r3, [r7, #3]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d3f0      	bcc.n	8001bae <calculateChecksum+0x16>
	}
	// 合計の下位バイトを返す
	return (uint8_t)(sum & 0xFF);
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	b2db      	uxtb	r3, r3
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3714      	adds	r7, #20
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr

08001bdc <commandDeserialize>:
	buffer += sizeof(float);
	data->check_sum = calculateChecksum(buffer, length);
	memcpy(buffer+length,&data->check_sum,sizeof(uint8_t));
}

bool commandDeserialize(Command* data, uint8_t* buffer){
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	6039      	str	r1, [r7, #0]
	powerCommandDeserialize(&data->power_command, buffer);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6839      	ldr	r1, [r7, #0]
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7fe fff2 	bl	8000bd4 <powerCommandDeserialize>
	uint8_t length = POWER_COMMAND_BUFFER_SIZE;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	73fb      	strb	r3, [r7, #15]
	memcpy(&data->vel_l,buffer+length,sizeof(float));
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	3304      	adds	r3, #4
 8001bf8:	7bfa      	ldrb	r2, [r7, #15]
 8001bfa:	6839      	ldr	r1, [r7, #0]
 8001bfc:	440a      	add	r2, r1
 8001bfe:	6812      	ldr	r2, [r2, #0]
 8001c00:	601a      	str	r2, [r3, #0]
	length += sizeof(float);
 8001c02:	7bfb      	ldrb	r3, [r7, #15]
 8001c04:	3304      	adds	r3, #4
 8001c06:	73fb      	strb	r3, [r7, #15]
	memcpy(&data->vel_r,buffer+length,sizeof(float));
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	3308      	adds	r3, #8
 8001c0c:	7bfa      	ldrb	r2, [r7, #15]
 8001c0e:	6839      	ldr	r1, [r7, #0]
 8001c10:	440a      	add	r2, r1
 8001c12:	6812      	ldr	r2, [r2, #0]
 8001c14:	601a      	str	r2, [r3, #0]
	length += sizeof(float);
 8001c16:	7bfb      	ldrb	r3, [r7, #15]
 8001c18:	3304      	adds	r3, #4
 8001c1a:	73fb      	strb	r3, [r7, #15]
	memcpy(&data->check_sum,buffer+length,sizeof(uint8_t));
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	330c      	adds	r3, #12
 8001c20:	7bfa      	ldrb	r2, [r7, #15]
 8001c22:	6839      	ldr	r1, [r7, #0]
 8001c24:	440a      	add	r2, r1
 8001c26:	7812      	ldrb	r2, [r2, #0]
 8001c28:	701a      	strb	r2, [r3, #0]
	return calculateChecksum(buffer, length) == data->check_sum;
 8001c2a:	7bfb      	ldrb	r3, [r7, #15]
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	6838      	ldr	r0, [r7, #0]
 8001c30:	f7ff ffb2 	bl	8001b98 <calculateChecksum>
 8001c34:	4603      	mov	r3, r0
 8001c36:	461a      	mov	r2, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	7b1b      	ldrb	r3, [r3, #12]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	bf0c      	ite	eq
 8001c40:	2301      	moveq	r3, #1
 8001c42:	2300      	movne	r3, #0
 8001c44:	b2db      	uxtb	r3, r3
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3710      	adds	r7, #16
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}

08001c4e <resultSerialize>:

void resultSerialize(Result* data, uint8_t* buffer){
 8001c4e:	b580      	push	{r7, lr}
 8001c50:	b084      	sub	sp, #16
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	6078      	str	r0, [r7, #4]
 8001c56:	6039      	str	r1, [r7, #0]
	uint8_t length = 0;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	73fb      	strb	r3, [r7, #15]
	powerResultSerialize(&data->power_result, buffer);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6839      	ldr	r1, [r7, #0]
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7fe ffd8 	bl	8000c16 <powerResultSerialize>
	length += POWER_RESULT_BUFFER_SIZE;
 8001c66:	7bfb      	ldrb	r3, [r7, #15]
 8001c68:	3302      	adds	r3, #2
 8001c6a:	73fb      	strb	r3, [r7, #15]
	memcpy(buffer+length,&data->vel_l,sizeof(float));
 8001c6c:	7bfb      	ldrb	r3, [r7, #15]
 8001c6e:	683a      	ldr	r2, [r7, #0]
 8001c70:	4413      	add	r3, r2
 8001c72:	687a      	ldr	r2, [r7, #4]
 8001c74:	3204      	adds	r2, #4
 8001c76:	6812      	ldr	r2, [r2, #0]
 8001c78:	601a      	str	r2, [r3, #0]
	length += sizeof(float);
 8001c7a:	7bfb      	ldrb	r3, [r7, #15]
 8001c7c:	3304      	adds	r3, #4
 8001c7e:	73fb      	strb	r3, [r7, #15]
	memcpy(buffer+length,&data->vel_r,sizeof(float));
 8001c80:	7bfb      	ldrb	r3, [r7, #15]
 8001c82:	683a      	ldr	r2, [r7, #0]
 8001c84:	4413      	add	r3, r2
 8001c86:	687a      	ldr	r2, [r7, #4]
 8001c88:	3208      	adds	r2, #8
 8001c8a:	6812      	ldr	r2, [r2, #0]
 8001c8c:	601a      	str	r2, [r3, #0]
	length += sizeof(float);
 8001c8e:	7bfb      	ldrb	r3, [r7, #15]
 8001c90:	3304      	adds	r3, #4
 8001c92:	73fb      	strb	r3, [r7, #15]
	memcpy(buffer+length,&data->cnt_l,sizeof(uint16_t));
 8001c94:	7bfb      	ldrb	r3, [r7, #15]
 8001c96:	683a      	ldr	r2, [r7, #0]
 8001c98:	4413      	add	r3, r2
 8001c9a:	687a      	ldr	r2, [r7, #4]
 8001c9c:	320c      	adds	r2, #12
 8001c9e:	8812      	ldrh	r2, [r2, #0]
 8001ca0:	b292      	uxth	r2, r2
 8001ca2:	801a      	strh	r2, [r3, #0]
	length += sizeof(uint16_t);
 8001ca4:	7bfb      	ldrb	r3, [r7, #15]
 8001ca6:	3302      	adds	r3, #2
 8001ca8:	73fb      	strb	r3, [r7, #15]
	memcpy(buffer+length,&data->cnt_r,sizeof(uint16_t));
 8001caa:	7bfb      	ldrb	r3, [r7, #15]
 8001cac:	683a      	ldr	r2, [r7, #0]
 8001cae:	4413      	add	r3, r2
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	320e      	adds	r2, #14
 8001cb4:	8812      	ldrh	r2, [r2, #0]
 8001cb6:	b292      	uxth	r2, r2
 8001cb8:	801a      	strh	r2, [r3, #0]
	length += sizeof(uint16_t);
 8001cba:	7bfb      	ldrb	r3, [r7, #15]
 8001cbc:	3302      	adds	r3, #2
 8001cbe:	73fb      	strb	r3, [r7, #15]
	data->check_sum = calculateChecksum(buffer,length);
 8001cc0:	7bfb      	ldrb	r3, [r7, #15]
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	6838      	ldr	r0, [r7, #0]
 8001cc6:	f7ff ff67 	bl	8001b98 <calculateChecksum>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	461a      	mov	r2, r3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	741a      	strb	r2, [r3, #16]
	memcpy(buffer+length,&data->check_sum,sizeof(uint8_t));
 8001cd2:	7bfb      	ldrb	r3, [r7, #15]
 8001cd4:	683a      	ldr	r2, [r7, #0]
 8001cd6:	4413      	add	r3, r2
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	3210      	adds	r2, #16
 8001cdc:	7812      	ldrb	r2, [r2, #0]
 8001cde:	701a      	strb	r2, [r3, #0]
}
 8001ce0:	bf00      	nop
 8001ce2:	3710      	adds	r7, #16
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cee:	4b0f      	ldr	r3, [pc, #60]	@ (8001d2c <HAL_MspInit+0x44>)
 8001cf0:	699b      	ldr	r3, [r3, #24]
 8001cf2:	4a0e      	ldr	r2, [pc, #56]	@ (8001d2c <HAL_MspInit+0x44>)
 8001cf4:	f043 0301 	orr.w	r3, r3, #1
 8001cf8:	6193      	str	r3, [r2, #24]
 8001cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8001d2c <HAL_MspInit+0x44>)
 8001cfc:	699b      	ldr	r3, [r3, #24]
 8001cfe:	f003 0301 	and.w	r3, r3, #1
 8001d02:	607b      	str	r3, [r7, #4]
 8001d04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d06:	4b09      	ldr	r3, [pc, #36]	@ (8001d2c <HAL_MspInit+0x44>)
 8001d08:	69db      	ldr	r3, [r3, #28]
 8001d0a:	4a08      	ldr	r2, [pc, #32]	@ (8001d2c <HAL_MspInit+0x44>)
 8001d0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d10:	61d3      	str	r3, [r2, #28]
 8001d12:	4b06      	ldr	r3, [pc, #24]	@ (8001d2c <HAL_MspInit+0x44>)
 8001d14:	69db      	ldr	r3, [r3, #28]
 8001d16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d1a:	603b      	str	r3, [r7, #0]
 8001d1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d1e:	bf00      	nop
 8001d20:	370c      	adds	r7, #12
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	40021000 	.word	0x40021000

08001d30 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b08a      	sub	sp, #40	@ 0x28
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d38:	f107 0314 	add.w	r3, r7, #20
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	601a      	str	r2, [r3, #0]
 8001d40:	605a      	str	r2, [r3, #4]
 8001d42:	609a      	str	r2, [r3, #8]
 8001d44:	60da      	str	r2, [r3, #12]
 8001d46:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a1c      	ldr	r2, [pc, #112]	@ (8001dc0 <HAL_CAN_MspInit+0x90>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d131      	bne.n	8001db6 <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001d52:	4b1c      	ldr	r3, [pc, #112]	@ (8001dc4 <HAL_CAN_MspInit+0x94>)
 8001d54:	69db      	ldr	r3, [r3, #28]
 8001d56:	4a1b      	ldr	r2, [pc, #108]	@ (8001dc4 <HAL_CAN_MspInit+0x94>)
 8001d58:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001d5c:	61d3      	str	r3, [r2, #28]
 8001d5e:	4b19      	ldr	r3, [pc, #100]	@ (8001dc4 <HAL_CAN_MspInit+0x94>)
 8001d60:	69db      	ldr	r3, [r3, #28]
 8001d62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d66:	613b      	str	r3, [r7, #16]
 8001d68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d6a:	4b16      	ldr	r3, [pc, #88]	@ (8001dc4 <HAL_CAN_MspInit+0x94>)
 8001d6c:	695b      	ldr	r3, [r3, #20]
 8001d6e:	4a15      	ldr	r2, [pc, #84]	@ (8001dc4 <HAL_CAN_MspInit+0x94>)
 8001d70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d74:	6153      	str	r3, [r2, #20]
 8001d76:	4b13      	ldr	r3, [pc, #76]	@ (8001dc4 <HAL_CAN_MspInit+0x94>)
 8001d78:	695b      	ldr	r3, [r3, #20]
 8001d7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d7e:	60fb      	str	r3, [r7, #12]
 8001d80:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001d82:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001d86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d88:	2302      	movs	r3, #2
 8001d8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d90:	2303      	movs	r3, #3
 8001d92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8001d94:	2309      	movs	r3, #9
 8001d96:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d98:	f107 0314 	add.w	r3, r7, #20
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001da2:	f001 fcf7 	bl	8003794 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CAN_RX0_IRQn, 0, 0);
 8001da6:	2200      	movs	r2, #0
 8001da8:	2100      	movs	r1, #0
 8001daa:	2014      	movs	r0, #20
 8001dac:	f001 fb25 	bl	80033fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX0_IRQn);
 8001db0:	2014      	movs	r0, #20
 8001db2:	f001 fb3e 	bl	8003432 <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN_MspInit 1 */

  }

}
 8001db6:	bf00      	nop
 8001db8:	3728      	adds	r7, #40	@ 0x28
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	40006400 	.word	0x40006400
 8001dc4:	40021000 	.word	0x40021000

08001dc8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b08a      	sub	sp, #40	@ 0x28
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd0:	f107 0314 	add.w	r3, r7, #20
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	601a      	str	r2, [r3, #0]
 8001dd8:	605a      	str	r2, [r3, #4]
 8001dda:	609a      	str	r2, [r3, #8]
 8001ddc:	60da      	str	r2, [r3, #12]
 8001dde:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a3d      	ldr	r2, [pc, #244]	@ (8001edc <HAL_SPI_MspInit+0x114>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d174      	bne.n	8001ed4 <HAL_SPI_MspInit+0x10c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001dea:	4b3d      	ldr	r3, [pc, #244]	@ (8001ee0 <HAL_SPI_MspInit+0x118>)
 8001dec:	699b      	ldr	r3, [r3, #24]
 8001dee:	4a3c      	ldr	r2, [pc, #240]	@ (8001ee0 <HAL_SPI_MspInit+0x118>)
 8001df0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001df4:	6193      	str	r3, [r2, #24]
 8001df6:	4b3a      	ldr	r3, [pc, #232]	@ (8001ee0 <HAL_SPI_MspInit+0x118>)
 8001df8:	699b      	ldr	r3, [r3, #24]
 8001dfa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001dfe:	613b      	str	r3, [r7, #16]
 8001e00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e02:	4b37      	ldr	r3, [pc, #220]	@ (8001ee0 <HAL_SPI_MspInit+0x118>)
 8001e04:	695b      	ldr	r3, [r3, #20]
 8001e06:	4a36      	ldr	r2, [pc, #216]	@ (8001ee0 <HAL_SPI_MspInit+0x118>)
 8001e08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e0c:	6153      	str	r3, [r2, #20]
 8001e0e:	4b34      	ldr	r3, [pc, #208]	@ (8001ee0 <HAL_SPI_MspInit+0x118>)
 8001e10:	695b      	ldr	r3, [r3, #20]
 8001e12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e16:	60fb      	str	r3, [r7, #12]
 8001e18:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001e1a:	23f0      	movs	r3, #240	@ 0xf0
 8001e1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e1e:	2302      	movs	r3, #2
 8001e20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e22:	2300      	movs	r3, #0
 8001e24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e26:	2303      	movs	r3, #3
 8001e28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e2a:	2305      	movs	r3, #5
 8001e2c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e2e:	f107 0314 	add.w	r3, r7, #20
 8001e32:	4619      	mov	r1, r3
 8001e34:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e38:	f001 fcac 	bl	8003794 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8001e3c:	4b29      	ldr	r3, [pc, #164]	@ (8001ee4 <HAL_SPI_MspInit+0x11c>)
 8001e3e:	4a2a      	ldr	r2, [pc, #168]	@ (8001ee8 <HAL_SPI_MspInit+0x120>)
 8001e40:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e42:	4b28      	ldr	r3, [pc, #160]	@ (8001ee4 <HAL_SPI_MspInit+0x11c>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e48:	4b26      	ldr	r3, [pc, #152]	@ (8001ee4 <HAL_SPI_MspInit+0x11c>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e4e:	4b25      	ldr	r3, [pc, #148]	@ (8001ee4 <HAL_SPI_MspInit+0x11c>)
 8001e50:	2280      	movs	r2, #128	@ 0x80
 8001e52:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e54:	4b23      	ldr	r3, [pc, #140]	@ (8001ee4 <HAL_SPI_MspInit+0x11c>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e5a:	4b22      	ldr	r3, [pc, #136]	@ (8001ee4 <HAL_SPI_MspInit+0x11c>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001e60:	4b20      	ldr	r3, [pc, #128]	@ (8001ee4 <HAL_SPI_MspInit+0x11c>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001e66:	4b1f      	ldr	r3, [pc, #124]	@ (8001ee4 <HAL_SPI_MspInit+0x11c>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001e6c:	481d      	ldr	r0, [pc, #116]	@ (8001ee4 <HAL_SPI_MspInit+0x11c>)
 8001e6e:	f001 fafa 	bl	8003466 <HAL_DMA_Init>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d001      	beq.n	8001e7c <HAL_SPI_MspInit+0xb4>
    {
      Error_Handler();
 8001e78:	f7ff fe88 	bl	8001b8c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	4a19      	ldr	r2, [pc, #100]	@ (8001ee4 <HAL_SPI_MspInit+0x11c>)
 8001e80:	659a      	str	r2, [r3, #88]	@ 0x58
 8001e82:	4a18      	ldr	r2, [pc, #96]	@ (8001ee4 <HAL_SPI_MspInit+0x11c>)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6253      	str	r3, [r2, #36]	@ 0x24

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8001e88:	4b18      	ldr	r3, [pc, #96]	@ (8001eec <HAL_SPI_MspInit+0x124>)
 8001e8a:	4a19      	ldr	r2, [pc, #100]	@ (8001ef0 <HAL_SPI_MspInit+0x128>)
 8001e8c:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e8e:	4b17      	ldr	r3, [pc, #92]	@ (8001eec <HAL_SPI_MspInit+0x124>)
 8001e90:	2210      	movs	r2, #16
 8001e92:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e94:	4b15      	ldr	r3, [pc, #84]	@ (8001eec <HAL_SPI_MspInit+0x124>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001e9a:	4b14      	ldr	r3, [pc, #80]	@ (8001eec <HAL_SPI_MspInit+0x124>)
 8001e9c:	2280      	movs	r2, #128	@ 0x80
 8001e9e:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ea0:	4b12      	ldr	r3, [pc, #72]	@ (8001eec <HAL_SPI_MspInit+0x124>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ea6:	4b11      	ldr	r3, [pc, #68]	@ (8001eec <HAL_SPI_MspInit+0x124>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001eac:	4b0f      	ldr	r3, [pc, #60]	@ (8001eec <HAL_SPI_MspInit+0x124>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001eb2:	4b0e      	ldr	r3, [pc, #56]	@ (8001eec <HAL_SPI_MspInit+0x124>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001eb8:	480c      	ldr	r0, [pc, #48]	@ (8001eec <HAL_SPI_MspInit+0x124>)
 8001eba:	f001 fad4 	bl	8003466 <HAL_DMA_Init>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d001      	beq.n	8001ec8 <HAL_SPI_MspInit+0x100>
    {
      Error_Handler();
 8001ec4:	f7ff fe62 	bl	8001b8c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	4a08      	ldr	r2, [pc, #32]	@ (8001eec <HAL_SPI_MspInit+0x124>)
 8001ecc:	655a      	str	r2, [r3, #84]	@ 0x54
 8001ece:	4a07      	ldr	r2, [pc, #28]	@ (8001eec <HAL_SPI_MspInit+0x124>)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001ed4:	bf00      	nop
 8001ed6:	3728      	adds	r7, #40	@ 0x28
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	40013000 	.word	0x40013000
 8001ee0:	40021000 	.word	0x40021000
 8001ee4:	200002dc 	.word	0x200002dc
 8001ee8:	4002001c 	.word	0x4002001c
 8001eec:	20000320 	.word	0x20000320
 8001ef0:	40020030 	.word	0x40020030

08001ef4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b085      	sub	sp, #20
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a0a      	ldr	r2, [pc, #40]	@ (8001f2c <HAL_TIM_PWM_MspInit+0x38>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d10b      	bne.n	8001f1e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f06:	4b0a      	ldr	r3, [pc, #40]	@ (8001f30 <HAL_TIM_PWM_MspInit+0x3c>)
 8001f08:	699b      	ldr	r3, [r3, #24]
 8001f0a:	4a09      	ldr	r2, [pc, #36]	@ (8001f30 <HAL_TIM_PWM_MspInit+0x3c>)
 8001f0c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001f10:	6193      	str	r3, [r2, #24]
 8001f12:	4b07      	ldr	r3, [pc, #28]	@ (8001f30 <HAL_TIM_PWM_MspInit+0x3c>)
 8001f14:	699b      	ldr	r3, [r3, #24]
 8001f16:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f1a:	60fb      	str	r3, [r7, #12]
 8001f1c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001f1e:	bf00      	nop
 8001f20:	3714      	adds	r7, #20
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	40012c00 	.word	0x40012c00
 8001f30:	40021000 	.word	0x40021000

08001f34 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b08c      	sub	sp, #48	@ 0x30
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f3c:	f107 031c 	add.w	r3, r7, #28
 8001f40:	2200      	movs	r2, #0
 8001f42:	601a      	str	r2, [r3, #0]
 8001f44:	605a      	str	r2, [r3, #4]
 8001f46:	609a      	str	r2, [r3, #8]
 8001f48:	60da      	str	r2, [r3, #12]
 8001f4a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f54:	d129      	bne.n	8001faa <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f56:	4b2d      	ldr	r3, [pc, #180]	@ (800200c <HAL_TIM_Encoder_MspInit+0xd8>)
 8001f58:	69db      	ldr	r3, [r3, #28]
 8001f5a:	4a2c      	ldr	r2, [pc, #176]	@ (800200c <HAL_TIM_Encoder_MspInit+0xd8>)
 8001f5c:	f043 0301 	orr.w	r3, r3, #1
 8001f60:	61d3      	str	r3, [r2, #28]
 8001f62:	4b2a      	ldr	r3, [pc, #168]	@ (800200c <HAL_TIM_Encoder_MspInit+0xd8>)
 8001f64:	69db      	ldr	r3, [r3, #28]
 8001f66:	f003 0301 	and.w	r3, r3, #1
 8001f6a:	61bb      	str	r3, [r7, #24]
 8001f6c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f6e:	4b27      	ldr	r3, [pc, #156]	@ (800200c <HAL_TIM_Encoder_MspInit+0xd8>)
 8001f70:	695b      	ldr	r3, [r3, #20]
 8001f72:	4a26      	ldr	r2, [pc, #152]	@ (800200c <HAL_TIM_Encoder_MspInit+0xd8>)
 8001f74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f78:	6153      	str	r3, [r2, #20]
 8001f7a:	4b24      	ldr	r3, [pc, #144]	@ (800200c <HAL_TIM_Encoder_MspInit+0xd8>)
 8001f7c:	695b      	ldr	r3, [r3, #20]
 8001f7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f82:	617b      	str	r3, [r7, #20]
 8001f84:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = enc_L_A_Pin|enc_L_B_Pin;
 8001f86:	2303      	movs	r3, #3
 8001f88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f8a:	2302      	movs	r3, #2
 8001f8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f92:	2300      	movs	r3, #0
 8001f94:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f96:	2301      	movs	r3, #1
 8001f98:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f9a:	f107 031c 	add.w	r3, r7, #28
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001fa4:	f001 fbf6 	bl	8003794 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001fa8:	e02c      	b.n	8002004 <HAL_TIM_Encoder_MspInit+0xd0>
  else if(htim_encoder->Instance==TIM3)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a18      	ldr	r2, [pc, #96]	@ (8002010 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d127      	bne.n	8002004 <HAL_TIM_Encoder_MspInit+0xd0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001fb4:	4b15      	ldr	r3, [pc, #84]	@ (800200c <HAL_TIM_Encoder_MspInit+0xd8>)
 8001fb6:	69db      	ldr	r3, [r3, #28]
 8001fb8:	4a14      	ldr	r2, [pc, #80]	@ (800200c <HAL_TIM_Encoder_MspInit+0xd8>)
 8001fba:	f043 0302 	orr.w	r3, r3, #2
 8001fbe:	61d3      	str	r3, [r2, #28]
 8001fc0:	4b12      	ldr	r3, [pc, #72]	@ (800200c <HAL_TIM_Encoder_MspInit+0xd8>)
 8001fc2:	69db      	ldr	r3, [r3, #28]
 8001fc4:	f003 0302 	and.w	r3, r3, #2
 8001fc8:	613b      	str	r3, [r7, #16]
 8001fca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fcc:	4b0f      	ldr	r3, [pc, #60]	@ (800200c <HAL_TIM_Encoder_MspInit+0xd8>)
 8001fce:	695b      	ldr	r3, [r3, #20]
 8001fd0:	4a0e      	ldr	r2, [pc, #56]	@ (800200c <HAL_TIM_Encoder_MspInit+0xd8>)
 8001fd2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001fd6:	6153      	str	r3, [r2, #20]
 8001fd8:	4b0c      	ldr	r3, [pc, #48]	@ (800200c <HAL_TIM_Encoder_MspInit+0xd8>)
 8001fda:	695b      	ldr	r3, [r3, #20]
 8001fdc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001fe0:	60fb      	str	r3, [r7, #12]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = enc_R_A_Pin|enc_R_B_Pin;
 8001fe4:	2330      	movs	r3, #48	@ 0x30
 8001fe6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe8:	2302      	movs	r3, #2
 8001fea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fec:	2300      	movs	r3, #0
 8001fee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ff8:	f107 031c 	add.w	r3, r7, #28
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	4805      	ldr	r0, [pc, #20]	@ (8002014 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002000:	f001 fbc8 	bl	8003794 <HAL_GPIO_Init>
}
 8002004:	bf00      	nop
 8002006:	3730      	adds	r7, #48	@ 0x30
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	40021000 	.word	0x40021000
 8002010:	40000400 	.word	0x40000400
 8002014:	48000400 	.word	0x48000400

08002018 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b084      	sub	sp, #16
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a1a      	ldr	r2, [pc, #104]	@ (8002090 <HAL_TIM_Base_MspInit+0x78>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d114      	bne.n	8002054 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800202a:	4b1a      	ldr	r3, [pc, #104]	@ (8002094 <HAL_TIM_Base_MspInit+0x7c>)
 800202c:	69db      	ldr	r3, [r3, #28]
 800202e:	4a19      	ldr	r2, [pc, #100]	@ (8002094 <HAL_TIM_Base_MspInit+0x7c>)
 8002030:	f043 0310 	orr.w	r3, r3, #16
 8002034:	61d3      	str	r3, [r2, #28]
 8002036:	4b17      	ldr	r3, [pc, #92]	@ (8002094 <HAL_TIM_Base_MspInit+0x7c>)
 8002038:	69db      	ldr	r3, [r3, #28]
 800203a:	f003 0310 	and.w	r3, r3, #16
 800203e:	60fb      	str	r3, [r7, #12]
 8002040:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, 0, 0);
 8002042:	2200      	movs	r2, #0
 8002044:	2100      	movs	r1, #0
 8002046:	2036      	movs	r0, #54	@ 0x36
 8002048:	f001 f9d7 	bl	80033fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC1_IRQn);
 800204c:	2036      	movs	r0, #54	@ 0x36
 800204e:	f001 f9f0 	bl	8003432 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8002052:	e018      	b.n	8002086 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM7)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a0f      	ldr	r2, [pc, #60]	@ (8002098 <HAL_TIM_Base_MspInit+0x80>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d113      	bne.n	8002086 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800205e:	4b0d      	ldr	r3, [pc, #52]	@ (8002094 <HAL_TIM_Base_MspInit+0x7c>)
 8002060:	69db      	ldr	r3, [r3, #28]
 8002062:	4a0c      	ldr	r2, [pc, #48]	@ (8002094 <HAL_TIM_Base_MspInit+0x7c>)
 8002064:	f043 0320 	orr.w	r3, r3, #32
 8002068:	61d3      	str	r3, [r2, #28]
 800206a:	4b0a      	ldr	r3, [pc, #40]	@ (8002094 <HAL_TIM_Base_MspInit+0x7c>)
 800206c:	69db      	ldr	r3, [r3, #28]
 800206e:	f003 0320 	and.w	r3, r3, #32
 8002072:	60bb      	str	r3, [r7, #8]
 8002074:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_DAC2_IRQn, 0, 0);
 8002076:	2200      	movs	r2, #0
 8002078:	2100      	movs	r1, #0
 800207a:	2037      	movs	r0, #55	@ 0x37
 800207c:	f001 f9bd 	bl	80033fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_DAC2_IRQn);
 8002080:	2037      	movs	r0, #55	@ 0x37
 8002082:	f001 f9d6 	bl	8003432 <HAL_NVIC_EnableIRQ>
}
 8002086:	bf00      	nop
 8002088:	3710      	adds	r7, #16
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	40001000 	.word	0x40001000
 8002094:	40021000 	.word	0x40021000
 8002098:	40001400 	.word	0x40001400

0800209c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b088      	sub	sp, #32
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a4:	f107 030c 	add.w	r3, r7, #12
 80020a8:	2200      	movs	r2, #0
 80020aa:	601a      	str	r2, [r3, #0]
 80020ac:	605a      	str	r2, [r3, #4]
 80020ae:	609a      	str	r2, [r3, #8]
 80020b0:	60da      	str	r2, [r3, #12]
 80020b2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a12      	ldr	r2, [pc, #72]	@ (8002104 <HAL_TIM_MspPostInit+0x68>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d11d      	bne.n	80020fa <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020be:	4b12      	ldr	r3, [pc, #72]	@ (8002108 <HAL_TIM_MspPostInit+0x6c>)
 80020c0:	695b      	ldr	r3, [r3, #20]
 80020c2:	4a11      	ldr	r2, [pc, #68]	@ (8002108 <HAL_TIM_MspPostInit+0x6c>)
 80020c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020c8:	6153      	str	r3, [r2, #20]
 80020ca:	4b0f      	ldr	r3, [pc, #60]	@ (8002108 <HAL_TIM_MspPostInit+0x6c>)
 80020cc:	695b      	ldr	r3, [r3, #20]
 80020ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020d2:	60bb      	str	r3, [r7, #8]
 80020d4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = PWM_L_Pin|PWM_R_Pin;
 80020d6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80020da:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020dc:	2302      	movs	r3, #2
 80020de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e0:	2300      	movs	r3, #0
 80020e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e4:	2300      	movs	r3, #0
 80020e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80020e8:	2306      	movs	r3, #6
 80020ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ec:	f107 030c 	add.w	r3, r7, #12
 80020f0:	4619      	mov	r1, r3
 80020f2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020f6:	f001 fb4d 	bl	8003794 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80020fa:	bf00      	nop
 80020fc:	3720      	adds	r7, #32
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	40012c00 	.word	0x40012c00
 8002108:	40021000 	.word	0x40021000

0800210c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b08a      	sub	sp, #40	@ 0x28
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002114:	f107 0314 	add.w	r3, r7, #20
 8002118:	2200      	movs	r2, #0
 800211a:	601a      	str	r2, [r3, #0]
 800211c:	605a      	str	r2, [r3, #4]
 800211e:	609a      	str	r2, [r3, #8]
 8002120:	60da      	str	r2, [r3, #12]
 8002122:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a18      	ldr	r2, [pc, #96]	@ (800218c <HAL_UART_MspInit+0x80>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d129      	bne.n	8002182 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800212e:	4b18      	ldr	r3, [pc, #96]	@ (8002190 <HAL_UART_MspInit+0x84>)
 8002130:	69db      	ldr	r3, [r3, #28]
 8002132:	4a17      	ldr	r2, [pc, #92]	@ (8002190 <HAL_UART_MspInit+0x84>)
 8002134:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002138:	61d3      	str	r3, [r2, #28]
 800213a:	4b15      	ldr	r3, [pc, #84]	@ (8002190 <HAL_UART_MspInit+0x84>)
 800213c:	69db      	ldr	r3, [r3, #28]
 800213e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002142:	613b      	str	r3, [r7, #16]
 8002144:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002146:	4b12      	ldr	r3, [pc, #72]	@ (8002190 <HAL_UART_MspInit+0x84>)
 8002148:	695b      	ldr	r3, [r3, #20]
 800214a:	4a11      	ldr	r2, [pc, #68]	@ (8002190 <HAL_UART_MspInit+0x84>)
 800214c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002150:	6153      	str	r3, [r2, #20]
 8002152:	4b0f      	ldr	r3, [pc, #60]	@ (8002190 <HAL_UART_MspInit+0x84>)
 8002154:	695b      	ldr	r3, [r3, #20]
 8002156:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800215a:	60fb      	str	r3, [r7, #12]
 800215c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 800215e:	f248 0304 	movw	r3, #32772	@ 0x8004
 8002162:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002164:	2302      	movs	r3, #2
 8002166:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002168:	2300      	movs	r3, #0
 800216a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800216c:	2303      	movs	r3, #3
 800216e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002170:	2307      	movs	r3, #7
 8002172:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002174:	f107 0314 	add.w	r3, r7, #20
 8002178:	4619      	mov	r1, r3
 800217a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800217e:	f001 fb09 	bl	8003794 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8002182:	bf00      	nop
 8002184:	3728      	adds	r7, #40	@ 0x28
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	40004400 	.word	0x40004400
 8002190:	40021000 	.word	0x40021000

08002194 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002194:	b480      	push	{r7}
 8002196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002198:	bf00      	nop
 800219a:	e7fd      	b.n	8002198 <NMI_Handler+0x4>

0800219c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021a0:	bf00      	nop
 80021a2:	e7fd      	b.n	80021a0 <HardFault_Handler+0x4>

080021a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021a8:	bf00      	nop
 80021aa:	e7fd      	b.n	80021a8 <MemManage_Handler+0x4>

080021ac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021b0:	bf00      	nop
 80021b2:	e7fd      	b.n	80021b0 <BusFault_Handler+0x4>

080021b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021b8:	bf00      	nop
 80021ba:	e7fd      	b.n	80021b8 <UsageFault_Handler+0x4>

080021bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021c0:	bf00      	nop
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr

080021ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021ca:	b480      	push	{r7}
 80021cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021ce:	bf00      	nop
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr

080021d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021dc:	bf00      	nop
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr

080021e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021e6:	b580      	push	{r7, lr}
 80021e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021ea:	f000 f961 	bl	80024b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021ee:	bf00      	nop
 80021f0:	bd80      	pop	{r7, pc}
	...

080021f4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80021f8:	4802      	ldr	r0, [pc, #8]	@ (8002204 <DMA1_Channel2_IRQHandler+0x10>)
 80021fa:	f001 f9da 	bl	80035b2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80021fe:	bf00      	nop
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	200002dc 	.word	0x200002dc

08002208 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800220c:	4802      	ldr	r0, [pc, #8]	@ (8002218 <DMA1_Channel3_IRQHandler+0x10>)
 800220e:	f001 f9d0 	bl	80035b2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002212:	bf00      	nop
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	20000320 	.word	0x20000320

0800221c <CAN_RX0_IRQHandler>:

/**
  * @brief This function handles CAN RX0 interrupt.
  */
void CAN_RX0_IRQHandler(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX0_IRQn 0 */

  /* USER CODE END CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8002220:	4802      	ldr	r0, [pc, #8]	@ (800222c <CAN_RX0_IRQHandler+0x10>)
 8002222:	f000 fddf 	bl	8002de4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX0_IRQn 1 */

  /* USER CODE END CAN_RX0_IRQn 1 */
}
 8002226:	bf00      	nop
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	20000250 	.word	0x20000250

08002230 <TIM6_DAC1_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC1 underrun error interrupts.
  */
void TIM6_DAC1_IRQHandler(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC1_IRQn 0 */

  /* USER CODE END TIM6_DAC1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002234:	4802      	ldr	r0, [pc, #8]	@ (8002240 <TIM6_DAC1_IRQHandler+0x10>)
 8002236:	f004 f927 	bl	8006488 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC1_IRQn 1 */

  /* USER CODE END TIM6_DAC1_IRQn 1 */
}
 800223a:	bf00      	nop
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	20000448 	.word	0x20000448

08002244 <TIM7_DAC2_IRQHandler>:

/**
  * @brief This function handles TIM7 global and DAC2 underrun error interrupts.
  */
void TIM7_DAC2_IRQHandler(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_DAC2_IRQn 0 */

  /* USER CODE END TIM7_DAC2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002248:	4802      	ldr	r0, [pc, #8]	@ (8002254 <TIM7_DAC2_IRQHandler+0x10>)
 800224a:	f004 f91d 	bl	8006488 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_DAC2_IRQn 1 */

  /* USER CODE END TIM7_DAC2_IRQn 1 */
}
 800224e:	bf00      	nop
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	20000494 	.word	0x20000494

08002258 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
  return 1;
 800225c:	2301      	movs	r3, #1
}
 800225e:	4618      	mov	r0, r3
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <_kill>:

int _kill(int pid, int sig)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002272:	f006 fa77 	bl	8008764 <__errno>
 8002276:	4603      	mov	r3, r0
 8002278:	2216      	movs	r2, #22
 800227a:	601a      	str	r2, [r3, #0]
  return -1;
 800227c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002280:	4618      	mov	r0, r3
 8002282:	3708      	adds	r7, #8
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}

08002288 <_exit>:

void _exit (int status)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002290:	f04f 31ff 	mov.w	r1, #4294967295
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	f7ff ffe7 	bl	8002268 <_kill>
  while (1) {}    /* Make sure we hang here */
 800229a:	bf00      	nop
 800229c:	e7fd      	b.n	800229a <_exit+0x12>

0800229e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800229e:	b580      	push	{r7, lr}
 80022a0:	b086      	sub	sp, #24
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	60f8      	str	r0, [r7, #12]
 80022a6:	60b9      	str	r1, [r7, #8]
 80022a8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022aa:	2300      	movs	r3, #0
 80022ac:	617b      	str	r3, [r7, #20]
 80022ae:	e00a      	b.n	80022c6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80022b0:	f3af 8000 	nop.w
 80022b4:	4601      	mov	r1, r0
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	1c5a      	adds	r2, r3, #1
 80022ba:	60ba      	str	r2, [r7, #8]
 80022bc:	b2ca      	uxtb	r2, r1
 80022be:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	3301      	adds	r3, #1
 80022c4:	617b      	str	r3, [r7, #20]
 80022c6:	697a      	ldr	r2, [r7, #20]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	429a      	cmp	r2, r3
 80022cc:	dbf0      	blt.n	80022b0 <_read+0x12>
  }

  return len;
 80022ce:	687b      	ldr	r3, [r7, #4]
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3718      	adds	r7, #24
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}

080022d8 <_close>:
  }
  return len;
}

int _close(int file)
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80022e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	370c      	adds	r7, #12
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr

080022f0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002300:	605a      	str	r2, [r3, #4]
  return 0;
 8002302:	2300      	movs	r3, #0
}
 8002304:	4618      	mov	r0, r3
 8002306:	370c      	adds	r7, #12
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr

08002310 <_isatty>:

int _isatty(int file)
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002318:	2301      	movs	r3, #1
}
 800231a:	4618      	mov	r0, r3
 800231c:	370c      	adds	r7, #12
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr

08002326 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002326:	b480      	push	{r7}
 8002328:	b085      	sub	sp, #20
 800232a:	af00      	add	r7, sp, #0
 800232c:	60f8      	str	r0, [r7, #12]
 800232e:	60b9      	str	r1, [r7, #8]
 8002330:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002332:	2300      	movs	r3, #0
}
 8002334:	4618      	mov	r0, r3
 8002336:	3714      	adds	r7, #20
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr

08002340 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b086      	sub	sp, #24
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002348:	4a14      	ldr	r2, [pc, #80]	@ (800239c <_sbrk+0x5c>)
 800234a:	4b15      	ldr	r3, [pc, #84]	@ (80023a0 <_sbrk+0x60>)
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002354:	4b13      	ldr	r3, [pc, #76]	@ (80023a4 <_sbrk+0x64>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d102      	bne.n	8002362 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800235c:	4b11      	ldr	r3, [pc, #68]	@ (80023a4 <_sbrk+0x64>)
 800235e:	4a12      	ldr	r2, [pc, #72]	@ (80023a8 <_sbrk+0x68>)
 8002360:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002362:	4b10      	ldr	r3, [pc, #64]	@ (80023a4 <_sbrk+0x64>)
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4413      	add	r3, r2
 800236a:	693a      	ldr	r2, [r7, #16]
 800236c:	429a      	cmp	r2, r3
 800236e:	d207      	bcs.n	8002380 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002370:	f006 f9f8 	bl	8008764 <__errno>
 8002374:	4603      	mov	r3, r0
 8002376:	220c      	movs	r2, #12
 8002378:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800237a:	f04f 33ff 	mov.w	r3, #4294967295
 800237e:	e009      	b.n	8002394 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002380:	4b08      	ldr	r3, [pc, #32]	@ (80023a4 <_sbrk+0x64>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002386:	4b07      	ldr	r3, [pc, #28]	@ (80023a4 <_sbrk+0x64>)
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4413      	add	r3, r2
 800238e:	4a05      	ldr	r2, [pc, #20]	@ (80023a4 <_sbrk+0x64>)
 8002390:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002392:	68fb      	ldr	r3, [r7, #12]
}
 8002394:	4618      	mov	r0, r3
 8002396:	3718      	adds	r7, #24
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	20003000 	.word	0x20003000
 80023a0:	00000400 	.word	0x00000400
 80023a4:	2000057c 	.word	0x2000057c
 80023a8:	200006d0 	.word	0x200006d0

080023ac <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023b0:	4b06      	ldr	r3, [pc, #24]	@ (80023cc <SystemInit+0x20>)
 80023b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023b6:	4a05      	ldr	r2, [pc, #20]	@ (80023cc <SystemInit+0x20>)
 80023b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80023bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023c0:	bf00      	nop
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop
 80023cc:	e000ed00 	.word	0xe000ed00

080023d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80023d0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002408 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80023d4:	f7ff ffea 	bl	80023ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023d8:	480c      	ldr	r0, [pc, #48]	@ (800240c <LoopForever+0x6>)
  ldr r1, =_edata
 80023da:	490d      	ldr	r1, [pc, #52]	@ (8002410 <LoopForever+0xa>)
  ldr r2, =_sidata
 80023dc:	4a0d      	ldr	r2, [pc, #52]	@ (8002414 <LoopForever+0xe>)
  movs r3, #0
 80023de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023e0:	e002      	b.n	80023e8 <LoopCopyDataInit>

080023e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023e6:	3304      	adds	r3, #4

080023e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023ec:	d3f9      	bcc.n	80023e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023ee:	4a0a      	ldr	r2, [pc, #40]	@ (8002418 <LoopForever+0x12>)
  ldr r4, =_ebss
 80023f0:	4c0a      	ldr	r4, [pc, #40]	@ (800241c <LoopForever+0x16>)
  movs r3, #0
 80023f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023f4:	e001      	b.n	80023fa <LoopFillZerobss>

080023f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023f8:	3204      	adds	r2, #4

080023fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023fc:	d3fb      	bcc.n	80023f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80023fe:	f006 f9b7 	bl	8008770 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002402:	f7fe fda7 	bl	8000f54 <main>

08002406 <LoopForever>:

LoopForever:
    b LoopForever
 8002406:	e7fe      	b.n	8002406 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002408:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 800240c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002410:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002414:	0800a8a0 	.word	0x0800a8a0
  ldr r2, =_sbss
 8002418:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 800241c:	200006d0 	.word	0x200006d0

08002420 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002420:	e7fe      	b.n	8002420 <ADC1_2_IRQHandler>
	...

08002424 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002428:	4b08      	ldr	r3, [pc, #32]	@ (800244c <HAL_Init+0x28>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a07      	ldr	r2, [pc, #28]	@ (800244c <HAL_Init+0x28>)
 800242e:	f043 0310 	orr.w	r3, r3, #16
 8002432:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002434:	2003      	movs	r0, #3
 8002436:	f000 ffd5 	bl	80033e4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800243a:	2000      	movs	r0, #0
 800243c:	f000 f808 	bl	8002450 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002440:	f7ff fc52 	bl	8001ce8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002444:	2300      	movs	r3, #0
}
 8002446:	4618      	mov	r0, r3
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	40022000 	.word	0x40022000

08002450 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002458:	4b12      	ldr	r3, [pc, #72]	@ (80024a4 <HAL_InitTick+0x54>)
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	4b12      	ldr	r3, [pc, #72]	@ (80024a8 <HAL_InitTick+0x58>)
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	4619      	mov	r1, r3
 8002462:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002466:	fbb3 f3f1 	udiv	r3, r3, r1
 800246a:	fbb2 f3f3 	udiv	r3, r2, r3
 800246e:	4618      	mov	r0, r3
 8002470:	f000 ffed 	bl	800344e <HAL_SYSTICK_Config>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d001      	beq.n	800247e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e00e      	b.n	800249c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2b0f      	cmp	r3, #15
 8002482:	d80a      	bhi.n	800249a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002484:	2200      	movs	r2, #0
 8002486:	6879      	ldr	r1, [r7, #4]
 8002488:	f04f 30ff 	mov.w	r0, #4294967295
 800248c:	f000 ffb5 	bl	80033fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002490:	4a06      	ldr	r2, [pc, #24]	@ (80024ac <HAL_InitTick+0x5c>)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002496:	2300      	movs	r3, #0
 8002498:	e000      	b.n	800249c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
}
 800249c:	4618      	mov	r0, r3
 800249e:	3708      	adds	r7, #8
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	20000000 	.word	0x20000000
 80024a8:	20000008 	.word	0x20000008
 80024ac:	20000004 	.word	0x20000004

080024b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024b4:	4b06      	ldr	r3, [pc, #24]	@ (80024d0 <HAL_IncTick+0x20>)
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	461a      	mov	r2, r3
 80024ba:	4b06      	ldr	r3, [pc, #24]	@ (80024d4 <HAL_IncTick+0x24>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4413      	add	r3, r2
 80024c0:	4a04      	ldr	r2, [pc, #16]	@ (80024d4 <HAL_IncTick+0x24>)
 80024c2:	6013      	str	r3, [r2, #0]
}
 80024c4:	bf00      	nop
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop
 80024d0:	20000008 	.word	0x20000008
 80024d4:	20000580 	.word	0x20000580

080024d8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0
  return uwTick;  
 80024dc:	4b03      	ldr	r3, [pc, #12]	@ (80024ec <HAL_GetTick+0x14>)
 80024de:	681b      	ldr	r3, [r3, #0]
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop
 80024ec:	20000580 	.word	0x20000580

080024f0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b084      	sub	sp, #16
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024f8:	f7ff ffee 	bl	80024d8 <HAL_GetTick>
 80024fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002508:	d005      	beq.n	8002516 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800250a:	4b0a      	ldr	r3, [pc, #40]	@ (8002534 <HAL_Delay+0x44>)
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	461a      	mov	r2, r3
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	4413      	add	r3, r2
 8002514:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002516:	bf00      	nop
 8002518:	f7ff ffde 	bl	80024d8 <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	68fa      	ldr	r2, [r7, #12]
 8002524:	429a      	cmp	r2, r3
 8002526:	d8f7      	bhi.n	8002518 <HAL_Delay+0x28>
  {
  }
}
 8002528:	bf00      	nop
 800252a:	bf00      	nop
 800252c:	3710      	adds	r7, #16
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	20000008 	.word	0x20000008

08002538 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d101      	bne.n	800254a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e0ed      	b.n	8002726 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002550:	b2db      	uxtb	r3, r3
 8002552:	2b00      	cmp	r3, #0
 8002554:	d102      	bne.n	800255c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f7ff fbea 	bl	8001d30 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f042 0201 	orr.w	r2, r2, #1
 800256a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800256c:	f7ff ffb4 	bl	80024d8 <HAL_GetTick>
 8002570:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002572:	e012      	b.n	800259a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002574:	f7ff ffb0 	bl	80024d8 <HAL_GetTick>
 8002578:	4602      	mov	r2, r0
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	2b0a      	cmp	r3, #10
 8002580:	d90b      	bls.n	800259a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002586:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2205      	movs	r2, #5
 8002592:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e0c5      	b.n	8002726 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f003 0301 	and.w	r3, r3, #1
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d0e5      	beq.n	8002574 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f022 0202 	bic.w	r2, r2, #2
 80025b6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80025b8:	f7ff ff8e 	bl	80024d8 <HAL_GetTick>
 80025bc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80025be:	e012      	b.n	80025e6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80025c0:	f7ff ff8a 	bl	80024d8 <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	2b0a      	cmp	r3, #10
 80025cc:	d90b      	bls.n	80025e6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025d2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2205      	movs	r2, #5
 80025de:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e09f      	b.n	8002726 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f003 0302 	and.w	r3, r3, #2
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d1e5      	bne.n	80025c0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	7e1b      	ldrb	r3, [r3, #24]
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d108      	bne.n	800260e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800260a:	601a      	str	r2, [r3, #0]
 800260c:	e007      	b.n	800261e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800261c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	7e5b      	ldrb	r3, [r3, #25]
 8002622:	2b01      	cmp	r3, #1
 8002624:	d108      	bne.n	8002638 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002634:	601a      	str	r2, [r3, #0]
 8002636:	e007      	b.n	8002648 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002646:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	7e9b      	ldrb	r3, [r3, #26]
 800264c:	2b01      	cmp	r3, #1
 800264e:	d108      	bne.n	8002662 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f042 0220 	orr.w	r2, r2, #32
 800265e:	601a      	str	r2, [r3, #0]
 8002660:	e007      	b.n	8002672 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f022 0220 	bic.w	r2, r2, #32
 8002670:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	7edb      	ldrb	r3, [r3, #27]
 8002676:	2b01      	cmp	r3, #1
 8002678:	d108      	bne.n	800268c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f022 0210 	bic.w	r2, r2, #16
 8002688:	601a      	str	r2, [r3, #0]
 800268a:	e007      	b.n	800269c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f042 0210 	orr.w	r2, r2, #16
 800269a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	7f1b      	ldrb	r3, [r3, #28]
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d108      	bne.n	80026b6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f042 0208 	orr.w	r2, r2, #8
 80026b2:	601a      	str	r2, [r3, #0]
 80026b4:	e007      	b.n	80026c6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f022 0208 	bic.w	r2, r2, #8
 80026c4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	7f5b      	ldrb	r3, [r3, #29]
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d108      	bne.n	80026e0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f042 0204 	orr.w	r2, r2, #4
 80026dc:	601a      	str	r2, [r3, #0]
 80026de:	e007      	b.n	80026f0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f022 0204 	bic.w	r2, r2, #4
 80026ee:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	689a      	ldr	r2, [r3, #8]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	431a      	orrs	r2, r3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	691b      	ldr	r3, [r3, #16]
 80026fe:	431a      	orrs	r2, r3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	695b      	ldr	r3, [r3, #20]
 8002704:	ea42 0103 	orr.w	r1, r2, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	1e5a      	subs	r2, r3, #1
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	430a      	orrs	r2, r1
 8002714:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2201      	movs	r2, #1
 8002720:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002724:	2300      	movs	r3, #0
}
 8002726:	4618      	mov	r0, r3
 8002728:	3710      	adds	r7, #16
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}

0800272e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800272e:	b480      	push	{r7}
 8002730:	b087      	sub	sp, #28
 8002732:	af00      	add	r7, sp, #0
 8002734:	6078      	str	r0, [r7, #4]
 8002736:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002744:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002746:	7cfb      	ldrb	r3, [r7, #19]
 8002748:	2b01      	cmp	r3, #1
 800274a:	d003      	beq.n	8002754 <HAL_CAN_ConfigFilter+0x26>
 800274c:	7cfb      	ldrb	r3, [r7, #19]
 800274e:	2b02      	cmp	r3, #2
 8002750:	f040 80aa 	bne.w	80028a8 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800275a:	f043 0201 	orr.w	r2, r3, #1
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	695b      	ldr	r3, [r3, #20]
 8002768:	f003 031f 	and.w	r3, r3, #31
 800276c:	2201      	movs	r2, #1
 800276e:	fa02 f303 	lsl.w	r3, r2, r3
 8002772:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	43db      	mvns	r3, r3
 800277e:	401a      	ands	r2, r3
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	69db      	ldr	r3, [r3, #28]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d123      	bne.n	80027d6 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	43db      	mvns	r3, r3
 8002798:	401a      	ands	r2, r3
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80027ac:	683a      	ldr	r2, [r7, #0]
 80027ae:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80027b0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	3248      	adds	r2, #72	@ 0x48
 80027b6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80027ca:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80027cc:	6979      	ldr	r1, [r7, #20]
 80027ce:	3348      	adds	r3, #72	@ 0x48
 80027d0:	00db      	lsls	r3, r3, #3
 80027d2:	440b      	add	r3, r1
 80027d4:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	69db      	ldr	r3, [r3, #28]
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d122      	bne.n	8002824 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	431a      	orrs	r2, r3
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80027fa:	683a      	ldr	r2, [r7, #0]
 80027fc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80027fe:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	3248      	adds	r2, #72	@ 0x48
 8002804:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002818:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800281a:	6979      	ldr	r1, [r7, #20]
 800281c:	3348      	adds	r3, #72	@ 0x48
 800281e:	00db      	lsls	r3, r3, #3
 8002820:	440b      	add	r3, r1
 8002822:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	699b      	ldr	r3, [r3, #24]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d109      	bne.n	8002840 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	43db      	mvns	r3, r3
 8002836:	401a      	ands	r2, r3
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800283e:	e007      	b.n	8002850 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	431a      	orrs	r2, r3
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	691b      	ldr	r3, [r3, #16]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d109      	bne.n	800286c <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	43db      	mvns	r3, r3
 8002862:	401a      	ands	r2, r3
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800286a:	e007      	b.n	800287c <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	431a      	orrs	r2, r3
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	6a1b      	ldr	r3, [r3, #32]
 8002880:	2b01      	cmp	r3, #1
 8002882:	d107      	bne.n	8002894 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	431a      	orrs	r2, r3
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800289a:	f023 0201 	bic.w	r2, r3, #1
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80028a4:	2300      	movs	r3, #0
 80028a6:	e006      	b.n	80028b6 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ac:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
  }
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	371c      	adds	r7, #28
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr

080028c2 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80028c2:	b580      	push	{r7, lr}
 80028c4:	b084      	sub	sp, #16
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d12e      	bne.n	8002934 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2202      	movs	r2, #2
 80028da:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f022 0201 	bic.w	r2, r2, #1
 80028ec:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80028ee:	f7ff fdf3 	bl	80024d8 <HAL_GetTick>
 80028f2:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80028f4:	e012      	b.n	800291c <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80028f6:	f7ff fdef 	bl	80024d8 <HAL_GetTick>
 80028fa:	4602      	mov	r2, r0
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	1ad3      	subs	r3, r2, r3
 8002900:	2b0a      	cmp	r3, #10
 8002902:	d90b      	bls.n	800291c <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002908:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2205      	movs	r2, #5
 8002914:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e012      	b.n	8002942 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	f003 0301 	and.w	r3, r3, #1
 8002926:	2b00      	cmp	r3, #0
 8002928:	d1e5      	bne.n	80028f6 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2200      	movs	r2, #0
 800292e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8002930:	2300      	movs	r3, #0
 8002932:	e006      	b.n	8002942 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002938:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
  }
}
 8002942:	4618      	mov	r0, r3
 8002944:	3710      	adds	r7, #16
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}

0800294a <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800294a:	b480      	push	{r7}
 800294c:	b089      	sub	sp, #36	@ 0x24
 800294e:	af00      	add	r7, sp, #0
 8002950:	60f8      	str	r0, [r7, #12]
 8002952:	60b9      	str	r1, [r7, #8]
 8002954:	607a      	str	r2, [r7, #4]
 8002956:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800295e:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002968:	7ffb      	ldrb	r3, [r7, #31]
 800296a:	2b01      	cmp	r3, #1
 800296c:	d003      	beq.n	8002976 <HAL_CAN_AddTxMessage+0x2c>
 800296e:	7ffb      	ldrb	r3, [r7, #31]
 8002970:	2b02      	cmp	r3, #2
 8002972:	f040 80ad 	bne.w	8002ad0 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800297c:	2b00      	cmp	r3, #0
 800297e:	d10a      	bne.n	8002996 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002980:	69bb      	ldr	r3, [r7, #24]
 8002982:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002986:	2b00      	cmp	r3, #0
 8002988:	d105      	bne.n	8002996 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800298a:	69bb      	ldr	r3, [r7, #24]
 800298c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002990:	2b00      	cmp	r3, #0
 8002992:	f000 8095 	beq.w	8002ac0 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002996:	69bb      	ldr	r3, [r7, #24]
 8002998:	0e1b      	lsrs	r3, r3, #24
 800299a:	f003 0303 	and.w	r3, r3, #3
 800299e:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80029a0:	2201      	movs	r2, #1
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	409a      	lsls	r2, r3
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d10d      	bne.n	80029ce <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80029bc:	68f9      	ldr	r1, [r7, #12]
 80029be:	6809      	ldr	r1, [r1, #0]
 80029c0:	431a      	orrs	r2, r3
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	3318      	adds	r3, #24
 80029c6:	011b      	lsls	r3, r3, #4
 80029c8:	440b      	add	r3, r1
 80029ca:	601a      	str	r2, [r3, #0]
 80029cc:	e00f      	b.n	80029ee <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80029d8:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80029de:	68f9      	ldr	r1, [r7, #12]
 80029e0:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80029e2:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	3318      	adds	r3, #24
 80029e8:	011b      	lsls	r3, r3, #4
 80029ea:	440b      	add	r3, r1
 80029ec:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	6819      	ldr	r1, [r3, #0]
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	691a      	ldr	r2, [r3, #16]
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	3318      	adds	r3, #24
 80029fa:	011b      	lsls	r3, r3, #4
 80029fc:	440b      	add	r3, r1
 80029fe:	3304      	adds	r3, #4
 8002a00:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	7d1b      	ldrb	r3, [r3, #20]
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d111      	bne.n	8002a2e <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	3318      	adds	r3, #24
 8002a12:	011b      	lsls	r3, r3, #4
 8002a14:	4413      	add	r3, r2
 8002a16:	3304      	adds	r3, #4
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	68fa      	ldr	r2, [r7, #12]
 8002a1c:	6811      	ldr	r1, [r2, #0]
 8002a1e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	3318      	adds	r3, #24
 8002a26:	011b      	lsls	r3, r3, #4
 8002a28:	440b      	add	r3, r1
 8002a2a:	3304      	adds	r3, #4
 8002a2c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	3307      	adds	r3, #7
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	061a      	lsls	r2, r3, #24
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	3306      	adds	r3, #6
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	041b      	lsls	r3, r3, #16
 8002a3e:	431a      	orrs	r2, r3
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	3305      	adds	r3, #5
 8002a44:	781b      	ldrb	r3, [r3, #0]
 8002a46:	021b      	lsls	r3, r3, #8
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	3204      	adds	r2, #4
 8002a4e:	7812      	ldrb	r2, [r2, #0]
 8002a50:	4610      	mov	r0, r2
 8002a52:	68fa      	ldr	r2, [r7, #12]
 8002a54:	6811      	ldr	r1, [r2, #0]
 8002a56:	ea43 0200 	orr.w	r2, r3, r0
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	011b      	lsls	r3, r3, #4
 8002a5e:	440b      	add	r3, r1
 8002a60:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8002a64:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	3303      	adds	r3, #3
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	061a      	lsls	r2, r3, #24
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	3302      	adds	r3, #2
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	041b      	lsls	r3, r3, #16
 8002a76:	431a      	orrs	r2, r3
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	3301      	adds	r3, #1
 8002a7c:	781b      	ldrb	r3, [r3, #0]
 8002a7e:	021b      	lsls	r3, r3, #8
 8002a80:	4313      	orrs	r3, r2
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	7812      	ldrb	r2, [r2, #0]
 8002a86:	4610      	mov	r0, r2
 8002a88:	68fa      	ldr	r2, [r7, #12]
 8002a8a:	6811      	ldr	r1, [r2, #0]
 8002a8c:	ea43 0200 	orr.w	r2, r3, r0
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	011b      	lsls	r3, r3, #4
 8002a94:	440b      	add	r3, r1
 8002a96:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8002a9a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	3318      	adds	r3, #24
 8002aa4:	011b      	lsls	r3, r3, #4
 8002aa6:	4413      	add	r3, r2
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	68fa      	ldr	r2, [r7, #12]
 8002aac:	6811      	ldr	r1, [r2, #0]
 8002aae:	f043 0201 	orr.w	r2, r3, #1
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	3318      	adds	r3, #24
 8002ab6:	011b      	lsls	r3, r3, #4
 8002ab8:	440b      	add	r3, r1
 8002aba:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002abc:	2300      	movs	r3, #0
 8002abe:	e00e      	b.n	8002ade <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ac4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e006      	b.n	8002ade <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ad4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
  }
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3724      	adds	r7, #36	@ 0x24
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr

08002aea <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8002aea:	b480      	push	{r7}
 8002aec:	b085      	sub	sp, #20
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8002af2:	2300      	movs	r3, #0
 8002af4:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002afc:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8002afe:	7afb      	ldrb	r3, [r7, #11]
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d002      	beq.n	8002b0a <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8002b04:	7afb      	ldrb	r3, [r7, #11]
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	d11d      	bne.n	8002b46 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d002      	beq.n	8002b1e <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	3301      	adds	r3, #1
 8002b1c:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d002      	beq.n	8002b32 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	3301      	adds	r3, #1
 8002b30:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d002      	beq.n	8002b46 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	3301      	adds	r3, #1
 8002b44:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8002b46:	68fb      	ldr	r3, [r7, #12]
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3714      	adds	r7, #20
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr

08002b54 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002b54:	b480      	push	{r7}
 8002b56:	b087      	sub	sp, #28
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	60f8      	str	r0, [r7, #12]
 8002b5c:	60b9      	str	r1, [r7, #8]
 8002b5e:	607a      	str	r2, [r7, #4]
 8002b60:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b68:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002b6a:	7dfb      	ldrb	r3, [r7, #23]
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d003      	beq.n	8002b78 <HAL_CAN_GetRxMessage+0x24>
 8002b70:	7dfb      	ldrb	r3, [r7, #23]
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	f040 8103 	bne.w	8002d7e <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d10e      	bne.n	8002b9c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	f003 0303 	and.w	r3, r3, #3
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d116      	bne.n	8002bba <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b90:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e0f7      	b.n	8002d8c <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	691b      	ldr	r3, [r3, #16]
 8002ba2:	f003 0303 	and.w	r3, r3, #3
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d107      	bne.n	8002bba <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bae:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e0e8      	b.n	8002d8c <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	331b      	adds	r3, #27
 8002bc2:	011b      	lsls	r3, r3, #4
 8002bc4:	4413      	add	r3, r2
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0204 	and.w	r2, r3, #4
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d10c      	bne.n	8002bf2 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	331b      	adds	r3, #27
 8002be0:	011b      	lsls	r3, r3, #4
 8002be2:	4413      	add	r3, r2
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	0d5b      	lsrs	r3, r3, #21
 8002be8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	601a      	str	r2, [r3, #0]
 8002bf0:	e00b      	b.n	8002c0a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	331b      	adds	r3, #27
 8002bfa:	011b      	lsls	r3, r3, #4
 8002bfc:	4413      	add	r3, r2
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	08db      	lsrs	r3, r3, #3
 8002c02:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	331b      	adds	r3, #27
 8002c12:	011b      	lsls	r3, r3, #4
 8002c14:	4413      	add	r3, r2
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 0202 	and.w	r2, r3, #2
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	331b      	adds	r3, #27
 8002c28:	011b      	lsls	r3, r3, #4
 8002c2a:	4413      	add	r3, r2
 8002c2c:	3304      	adds	r3, #4
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0308 	and.w	r3, r3, #8
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d003      	beq.n	8002c40 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2208      	movs	r2, #8
 8002c3c:	611a      	str	r2, [r3, #16]
 8002c3e:	e00b      	b.n	8002c58 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	331b      	adds	r3, #27
 8002c48:	011b      	lsls	r3, r3, #4
 8002c4a:	4413      	add	r3, r2
 8002c4c:	3304      	adds	r3, #4
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 020f 	and.w	r2, r3, #15
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	331b      	adds	r3, #27
 8002c60:	011b      	lsls	r3, r3, #4
 8002c62:	4413      	add	r3, r2
 8002c64:	3304      	adds	r3, #4
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	0a1b      	lsrs	r3, r3, #8
 8002c6a:	b2da      	uxtb	r2, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	331b      	adds	r3, #27
 8002c78:	011b      	lsls	r3, r3, #4
 8002c7a:	4413      	add	r3, r2
 8002c7c:	3304      	adds	r3, #4
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	0c1b      	lsrs	r3, r3, #16
 8002c82:	b29a      	uxth	r2, r3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	011b      	lsls	r3, r3, #4
 8002c90:	4413      	add	r3, r2
 8002c92:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	b2da      	uxtb	r2, r3
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	011b      	lsls	r3, r3, #4
 8002ca6:	4413      	add	r3, r2
 8002ca8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	0a1a      	lsrs	r2, r3, #8
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	3301      	adds	r3, #1
 8002cb4:	b2d2      	uxtb	r2, r2
 8002cb6:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	011b      	lsls	r3, r3, #4
 8002cc0:	4413      	add	r3, r2
 8002cc2:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	0c1a      	lsrs	r2, r3, #16
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	3302      	adds	r3, #2
 8002cce:	b2d2      	uxtb	r2, r2
 8002cd0:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	011b      	lsls	r3, r3, #4
 8002cda:	4413      	add	r3, r2
 8002cdc:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	0e1a      	lsrs	r2, r3, #24
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	3303      	adds	r3, #3
 8002ce8:	b2d2      	uxtb	r2, r2
 8002cea:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	011b      	lsls	r3, r3, #4
 8002cf4:	4413      	add	r3, r2
 8002cf6:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	3304      	adds	r3, #4
 8002d00:	b2d2      	uxtb	r2, r2
 8002d02:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	011b      	lsls	r3, r3, #4
 8002d0c:	4413      	add	r3, r2
 8002d0e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	0a1a      	lsrs	r2, r3, #8
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	3305      	adds	r3, #5
 8002d1a:	b2d2      	uxtb	r2, r2
 8002d1c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	011b      	lsls	r3, r3, #4
 8002d26:	4413      	add	r3, r2
 8002d28:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	0c1a      	lsrs	r2, r3, #16
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	3306      	adds	r3, #6
 8002d34:	b2d2      	uxtb	r2, r2
 8002d36:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	011b      	lsls	r3, r3, #4
 8002d40:	4413      	add	r3, r2
 8002d42:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	0e1a      	lsrs	r2, r3, #24
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	3307      	adds	r3, #7
 8002d4e:	b2d2      	uxtb	r2, r2
 8002d50:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d108      	bne.n	8002d6a <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	68da      	ldr	r2, [r3, #12]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f042 0220 	orr.w	r2, r2, #32
 8002d66:	60da      	str	r2, [r3, #12]
 8002d68:	e007      	b.n	8002d7a <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	691a      	ldr	r2, [r3, #16]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f042 0220 	orr.w	r2, r2, #32
 8002d78:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	e006      	b.n	8002d8c <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d82:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
  }
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	371c      	adds	r7, #28
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr

08002d98 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b085      	sub	sp, #20
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002da8:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002daa:	7bfb      	ldrb	r3, [r7, #15]
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d002      	beq.n	8002db6 <HAL_CAN_ActivateNotification+0x1e>
 8002db0:	7bfb      	ldrb	r3, [r7, #15]
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d109      	bne.n	8002dca <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	6959      	ldr	r1, [r3, #20]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	683a      	ldr	r2, [r7, #0]
 8002dc2:	430a      	orrs	r2, r1
 8002dc4:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	e006      	b.n	8002dd8 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dce:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
  }
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3714      	adds	r7, #20
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr

08002de4 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b08a      	sub	sp, #40	@ 0x28
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002dec:	2300      	movs	r3, #0
 8002dee:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	695b      	ldr	r3, [r3, #20]
 8002df6:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	68db      	ldr	r3, [r3, #12]
 8002e0e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	691b      	ldr	r3, [r3, #16]
 8002e16:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	699b      	ldr	r3, [r3, #24]
 8002e1e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002e20:	6a3b      	ldr	r3, [r7, #32]
 8002e22:	f003 0301 	and.w	r3, r3, #1
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d07c      	beq.n	8002f24 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002e2a:	69bb      	ldr	r3, [r7, #24]
 8002e2c:	f003 0301 	and.w	r3, r3, #1
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d023      	beq.n	8002e7c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	2201      	movs	r2, #1
 8002e3a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002e3c:	69bb      	ldr	r3, [r7, #24]
 8002e3e:	f003 0302 	and.w	r3, r3, #2
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d003      	beq.n	8002e4e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f000 f983 	bl	8003152 <HAL_CAN_TxMailbox0CompleteCallback>
 8002e4c:	e016      	b.n	8002e7c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002e4e:	69bb      	ldr	r3, [r7, #24]
 8002e50:	f003 0304 	and.w	r3, r3, #4
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d004      	beq.n	8002e62 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e5a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002e5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e60:	e00c      	b.n	8002e7c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002e62:	69bb      	ldr	r3, [r7, #24]
 8002e64:	f003 0308 	and.w	r3, r3, #8
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d004      	beq.n	8002e76 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e6e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002e72:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e74:	e002      	b.n	8002e7c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f000 f989 	bl	800318e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002e7c:	69bb      	ldr	r3, [r7, #24]
 8002e7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d024      	beq.n	8002ed0 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002e8e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002e90:	69bb      	ldr	r3, [r7, #24]
 8002e92:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d003      	beq.n	8002ea2 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f000 f963 	bl	8003166 <HAL_CAN_TxMailbox1CompleteCallback>
 8002ea0:	e016      	b.n	8002ed0 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002ea2:	69bb      	ldr	r3, [r7, #24]
 8002ea4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d004      	beq.n	8002eb6 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eae:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002eb2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002eb4:	e00c      	b.n	8002ed0 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d004      	beq.n	8002eca <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ec2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ec6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ec8:	e002      	b.n	8002ed0 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f000 f969 	bl	80031a2 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002ed0:	69bb      	ldr	r3, [r7, #24]
 8002ed2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d024      	beq.n	8002f24 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002ee2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002ee4:	69bb      	ldr	r3, [r7, #24]
 8002ee6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d003      	beq.n	8002ef6 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f000 f943 	bl	800317a <HAL_CAN_TxMailbox2CompleteCallback>
 8002ef4:	e016      	b.n	8002f24 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002ef6:	69bb      	ldr	r3, [r7, #24]
 8002ef8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d004      	beq.n	8002f0a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f02:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002f06:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f08:	e00c      	b.n	8002f24 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002f0a:	69bb      	ldr	r3, [r7, #24]
 8002f0c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d004      	beq.n	8002f1e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f16:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f1c:	e002      	b.n	8002f24 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f000 f949 	bl	80031b6 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002f24:	6a3b      	ldr	r3, [r7, #32]
 8002f26:	f003 0308 	and.w	r3, r3, #8
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d00c      	beq.n	8002f48 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	f003 0310 	and.w	r3, r3, #16
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d007      	beq.n	8002f48 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f3a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f3e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	2210      	movs	r2, #16
 8002f46:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002f48:	6a3b      	ldr	r3, [r7, #32]
 8002f4a:	f003 0304 	and.w	r3, r3, #4
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d00b      	beq.n	8002f6a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	f003 0308 	and.w	r3, r3, #8
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d006      	beq.n	8002f6a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	2208      	movs	r2, #8
 8002f62:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	f000 f930 	bl	80031ca <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002f6a:	6a3b      	ldr	r3, [r7, #32]
 8002f6c:	f003 0302 	and.w	r3, r3, #2
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d009      	beq.n	8002f88 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	f003 0303 	and.w	r3, r3, #3
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d002      	beq.n	8002f88 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f7fd ff72 	bl	8000e6c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002f88:	6a3b      	ldr	r3, [r7, #32]
 8002f8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d00c      	beq.n	8002fac <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	f003 0310 	and.w	r3, r3, #16
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d007      	beq.n	8002fac <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f9e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002fa2:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	2210      	movs	r2, #16
 8002faa:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002fac:	6a3b      	ldr	r3, [r7, #32]
 8002fae:	f003 0320 	and.w	r3, r3, #32
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d00b      	beq.n	8002fce <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	f003 0308 	and.w	r3, r3, #8
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d006      	beq.n	8002fce <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	2208      	movs	r2, #8
 8002fc6:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	f000 f912 	bl	80031f2 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002fce:	6a3b      	ldr	r3, [r7, #32]
 8002fd0:	f003 0310 	and.w	r3, r3, #16
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d009      	beq.n	8002fec <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	691b      	ldr	r3, [r3, #16]
 8002fde:	f003 0303 	and.w	r3, r3, #3
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d002      	beq.n	8002fec <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f000 f8f9 	bl	80031de <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002fec:	6a3b      	ldr	r3, [r7, #32]
 8002fee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d00b      	beq.n	800300e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	f003 0310 	and.w	r3, r3, #16
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d006      	beq.n	800300e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	2210      	movs	r2, #16
 8003006:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f000 f8fc 	bl	8003206 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800300e:	6a3b      	ldr	r3, [r7, #32]
 8003010:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003014:	2b00      	cmp	r3, #0
 8003016:	d00b      	beq.n	8003030 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	f003 0308 	and.w	r3, r3, #8
 800301e:	2b00      	cmp	r3, #0
 8003020:	d006      	beq.n	8003030 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	2208      	movs	r2, #8
 8003028:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f000 f8f5 	bl	800321a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003030:	6a3b      	ldr	r3, [r7, #32]
 8003032:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003036:	2b00      	cmp	r3, #0
 8003038:	d07b      	beq.n	8003132 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	f003 0304 	and.w	r3, r3, #4
 8003040:	2b00      	cmp	r3, #0
 8003042:	d072      	beq.n	800312a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003044:	6a3b      	ldr	r3, [r7, #32]
 8003046:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800304a:	2b00      	cmp	r3, #0
 800304c:	d008      	beq.n	8003060 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003054:	2b00      	cmp	r3, #0
 8003056:	d003      	beq.n	8003060 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800305a:	f043 0301 	orr.w	r3, r3, #1
 800305e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003060:	6a3b      	ldr	r3, [r7, #32]
 8003062:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003066:	2b00      	cmp	r3, #0
 8003068:	d008      	beq.n	800307c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003070:	2b00      	cmp	r3, #0
 8003072:	d003      	beq.n	800307c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003076:	f043 0302 	orr.w	r3, r3, #2
 800307a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800307c:	6a3b      	ldr	r3, [r7, #32]
 800307e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003082:	2b00      	cmp	r3, #0
 8003084:	d008      	beq.n	8003098 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800308c:	2b00      	cmp	r3, #0
 800308e:	d003      	beq.n	8003098 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003092:	f043 0304 	orr.w	r3, r3, #4
 8003096:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003098:	6a3b      	ldr	r3, [r7, #32]
 800309a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d043      	beq.n	800312a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d03e      	beq.n	800312a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80030b2:	2b60      	cmp	r3, #96	@ 0x60
 80030b4:	d02b      	beq.n	800310e <HAL_CAN_IRQHandler+0x32a>
 80030b6:	2b60      	cmp	r3, #96	@ 0x60
 80030b8:	d82e      	bhi.n	8003118 <HAL_CAN_IRQHandler+0x334>
 80030ba:	2b50      	cmp	r3, #80	@ 0x50
 80030bc:	d022      	beq.n	8003104 <HAL_CAN_IRQHandler+0x320>
 80030be:	2b50      	cmp	r3, #80	@ 0x50
 80030c0:	d82a      	bhi.n	8003118 <HAL_CAN_IRQHandler+0x334>
 80030c2:	2b40      	cmp	r3, #64	@ 0x40
 80030c4:	d019      	beq.n	80030fa <HAL_CAN_IRQHandler+0x316>
 80030c6:	2b40      	cmp	r3, #64	@ 0x40
 80030c8:	d826      	bhi.n	8003118 <HAL_CAN_IRQHandler+0x334>
 80030ca:	2b30      	cmp	r3, #48	@ 0x30
 80030cc:	d010      	beq.n	80030f0 <HAL_CAN_IRQHandler+0x30c>
 80030ce:	2b30      	cmp	r3, #48	@ 0x30
 80030d0:	d822      	bhi.n	8003118 <HAL_CAN_IRQHandler+0x334>
 80030d2:	2b10      	cmp	r3, #16
 80030d4:	d002      	beq.n	80030dc <HAL_CAN_IRQHandler+0x2f8>
 80030d6:	2b20      	cmp	r3, #32
 80030d8:	d005      	beq.n	80030e6 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80030da:	e01d      	b.n	8003118 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80030dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030de:	f043 0308 	orr.w	r3, r3, #8
 80030e2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80030e4:	e019      	b.n	800311a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80030e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030e8:	f043 0310 	orr.w	r3, r3, #16
 80030ec:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80030ee:	e014      	b.n	800311a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80030f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030f2:	f043 0320 	orr.w	r3, r3, #32
 80030f6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80030f8:	e00f      	b.n	800311a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80030fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003100:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003102:	e00a      	b.n	800311a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003106:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800310a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800310c:	e005      	b.n	800311a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800310e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003110:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003114:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003116:	e000      	b.n	800311a <HAL_CAN_IRQHandler+0x336>
            break;
 8003118:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	699a      	ldr	r2, [r3, #24]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003128:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	2204      	movs	r2, #4
 8003130:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003134:	2b00      	cmp	r3, #0
 8003136:	d008      	beq.n	800314a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800313c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800313e:	431a      	orrs	r2, r3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f000 f872 	bl	800322e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800314a:	bf00      	nop
 800314c:	3728      	adds	r7, #40	@ 0x28
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}

08003152 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003152:	b480      	push	{r7}
 8003154:	b083      	sub	sp, #12
 8003156:	af00      	add	r7, sp, #0
 8003158:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800315a:	bf00      	nop
 800315c:	370c      	adds	r7, #12
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr

08003166 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003166:	b480      	push	{r7}
 8003168:	b083      	sub	sp, #12
 800316a:	af00      	add	r7, sp, #0
 800316c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800316e:	bf00      	nop
 8003170:	370c      	adds	r7, #12
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr

0800317a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800317a:	b480      	push	{r7}
 800317c:	b083      	sub	sp, #12
 800317e:	af00      	add	r7, sp, #0
 8003180:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003182:	bf00      	nop
 8003184:	370c      	adds	r7, #12
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr

0800318e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800318e:	b480      	push	{r7}
 8003190:	b083      	sub	sp, #12
 8003192:	af00      	add	r7, sp, #0
 8003194:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003196:	bf00      	nop
 8003198:	370c      	adds	r7, #12
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr

080031a2 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80031a2:	b480      	push	{r7}
 80031a4:	b083      	sub	sp, #12
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80031aa:	bf00      	nop
 80031ac:	370c      	adds	r7, #12
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr

080031b6 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80031b6:	b480      	push	{r7}
 80031b8:	b083      	sub	sp, #12
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80031be:	bf00      	nop
 80031c0:	370c      	adds	r7, #12
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr

080031ca <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80031ca:	b480      	push	{r7}
 80031cc:	b083      	sub	sp, #12
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80031d2:	bf00      	nop
 80031d4:	370c      	adds	r7, #12
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr

080031de <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80031de:	b480      	push	{r7}
 80031e0:	b083      	sub	sp, #12
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80031e6:	bf00      	nop
 80031e8:	370c      	adds	r7, #12
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr

080031f2 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80031f2:	b480      	push	{r7}
 80031f4:	b083      	sub	sp, #12
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80031fa:	bf00      	nop
 80031fc:	370c      	adds	r7, #12
 80031fe:	46bd      	mov	sp, r7
 8003200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003204:	4770      	bx	lr

08003206 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003206:	b480      	push	{r7}
 8003208:	b083      	sub	sp, #12
 800320a:	af00      	add	r7, sp, #0
 800320c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800320e:	bf00      	nop
 8003210:	370c      	adds	r7, #12
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr

0800321a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800321a:	b480      	push	{r7}
 800321c:	b083      	sub	sp, #12
 800321e:	af00      	add	r7, sp, #0
 8003220:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003222:	bf00      	nop
 8003224:	370c      	adds	r7, #12
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr

0800322e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800322e:	b480      	push	{r7}
 8003230:	b083      	sub	sp, #12
 8003232:	af00      	add	r7, sp, #0
 8003234:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003236:	bf00      	nop
 8003238:	370c      	adds	r7, #12
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr
	...

08003244 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003244:	b480      	push	{r7}
 8003246:	b085      	sub	sp, #20
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f003 0307 	and.w	r3, r3, #7
 8003252:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003254:	4b0c      	ldr	r3, [pc, #48]	@ (8003288 <__NVIC_SetPriorityGrouping+0x44>)
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800325a:	68ba      	ldr	r2, [r7, #8]
 800325c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003260:	4013      	ands	r3, r2
 8003262:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800326c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003270:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003274:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003276:	4a04      	ldr	r2, [pc, #16]	@ (8003288 <__NVIC_SetPriorityGrouping+0x44>)
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	60d3      	str	r3, [r2, #12]
}
 800327c:	bf00      	nop
 800327e:	3714      	adds	r7, #20
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr
 8003288:	e000ed00 	.word	0xe000ed00

0800328c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800328c:	b480      	push	{r7}
 800328e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003290:	4b04      	ldr	r3, [pc, #16]	@ (80032a4 <__NVIC_GetPriorityGrouping+0x18>)
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	0a1b      	lsrs	r3, r3, #8
 8003296:	f003 0307 	and.w	r3, r3, #7
}
 800329a:	4618      	mov	r0, r3
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr
 80032a4:	e000ed00 	.word	0xe000ed00

080032a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b083      	sub	sp, #12
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	4603      	mov	r3, r0
 80032b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	db0b      	blt.n	80032d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032ba:	79fb      	ldrb	r3, [r7, #7]
 80032bc:	f003 021f 	and.w	r2, r3, #31
 80032c0:	4907      	ldr	r1, [pc, #28]	@ (80032e0 <__NVIC_EnableIRQ+0x38>)
 80032c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032c6:	095b      	lsrs	r3, r3, #5
 80032c8:	2001      	movs	r0, #1
 80032ca:	fa00 f202 	lsl.w	r2, r0, r2
 80032ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80032d2:	bf00      	nop
 80032d4:	370c      	adds	r7, #12
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr
 80032de:	bf00      	nop
 80032e0:	e000e100 	.word	0xe000e100

080032e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	4603      	mov	r3, r0
 80032ec:	6039      	str	r1, [r7, #0]
 80032ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	db0a      	blt.n	800330e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	b2da      	uxtb	r2, r3
 80032fc:	490c      	ldr	r1, [pc, #48]	@ (8003330 <__NVIC_SetPriority+0x4c>)
 80032fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003302:	0112      	lsls	r2, r2, #4
 8003304:	b2d2      	uxtb	r2, r2
 8003306:	440b      	add	r3, r1
 8003308:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800330c:	e00a      	b.n	8003324 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	b2da      	uxtb	r2, r3
 8003312:	4908      	ldr	r1, [pc, #32]	@ (8003334 <__NVIC_SetPriority+0x50>)
 8003314:	79fb      	ldrb	r3, [r7, #7]
 8003316:	f003 030f 	and.w	r3, r3, #15
 800331a:	3b04      	subs	r3, #4
 800331c:	0112      	lsls	r2, r2, #4
 800331e:	b2d2      	uxtb	r2, r2
 8003320:	440b      	add	r3, r1
 8003322:	761a      	strb	r2, [r3, #24]
}
 8003324:	bf00      	nop
 8003326:	370c      	adds	r7, #12
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr
 8003330:	e000e100 	.word	0xe000e100
 8003334:	e000ed00 	.word	0xe000ed00

08003338 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003338:	b480      	push	{r7}
 800333a:	b089      	sub	sp, #36	@ 0x24
 800333c:	af00      	add	r7, sp, #0
 800333e:	60f8      	str	r0, [r7, #12]
 8003340:	60b9      	str	r1, [r7, #8]
 8003342:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f003 0307 	and.w	r3, r3, #7
 800334a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800334c:	69fb      	ldr	r3, [r7, #28]
 800334e:	f1c3 0307 	rsb	r3, r3, #7
 8003352:	2b04      	cmp	r3, #4
 8003354:	bf28      	it	cs
 8003356:	2304      	movcs	r3, #4
 8003358:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	3304      	adds	r3, #4
 800335e:	2b06      	cmp	r3, #6
 8003360:	d902      	bls.n	8003368 <NVIC_EncodePriority+0x30>
 8003362:	69fb      	ldr	r3, [r7, #28]
 8003364:	3b03      	subs	r3, #3
 8003366:	e000      	b.n	800336a <NVIC_EncodePriority+0x32>
 8003368:	2300      	movs	r3, #0
 800336a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800336c:	f04f 32ff 	mov.w	r2, #4294967295
 8003370:	69bb      	ldr	r3, [r7, #24]
 8003372:	fa02 f303 	lsl.w	r3, r2, r3
 8003376:	43da      	mvns	r2, r3
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	401a      	ands	r2, r3
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003380:	f04f 31ff 	mov.w	r1, #4294967295
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	fa01 f303 	lsl.w	r3, r1, r3
 800338a:	43d9      	mvns	r1, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003390:	4313      	orrs	r3, r2
         );
}
 8003392:	4618      	mov	r0, r3
 8003394:	3724      	adds	r7, #36	@ 0x24
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr
	...

080033a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b082      	sub	sp, #8
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	3b01      	subs	r3, #1
 80033ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80033b0:	d301      	bcc.n	80033b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80033b2:	2301      	movs	r3, #1
 80033b4:	e00f      	b.n	80033d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033b6:	4a0a      	ldr	r2, [pc, #40]	@ (80033e0 <SysTick_Config+0x40>)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	3b01      	subs	r3, #1
 80033bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033be:	210f      	movs	r1, #15
 80033c0:	f04f 30ff 	mov.w	r0, #4294967295
 80033c4:	f7ff ff8e 	bl	80032e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033c8:	4b05      	ldr	r3, [pc, #20]	@ (80033e0 <SysTick_Config+0x40>)
 80033ca:	2200      	movs	r2, #0
 80033cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033ce:	4b04      	ldr	r3, [pc, #16]	@ (80033e0 <SysTick_Config+0x40>)
 80033d0:	2207      	movs	r2, #7
 80033d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033d4:	2300      	movs	r3, #0
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3708      	adds	r7, #8
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	e000e010 	.word	0xe000e010

080033e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b082      	sub	sp, #8
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f7ff ff29 	bl	8003244 <__NVIC_SetPriorityGrouping>
}
 80033f2:	bf00      	nop
 80033f4:	3708      	adds	r7, #8
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}

080033fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033fa:	b580      	push	{r7, lr}
 80033fc:	b086      	sub	sp, #24
 80033fe:	af00      	add	r7, sp, #0
 8003400:	4603      	mov	r3, r0
 8003402:	60b9      	str	r1, [r7, #8]
 8003404:	607a      	str	r2, [r7, #4]
 8003406:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003408:	2300      	movs	r3, #0
 800340a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800340c:	f7ff ff3e 	bl	800328c <__NVIC_GetPriorityGrouping>
 8003410:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	68b9      	ldr	r1, [r7, #8]
 8003416:	6978      	ldr	r0, [r7, #20]
 8003418:	f7ff ff8e 	bl	8003338 <NVIC_EncodePriority>
 800341c:	4602      	mov	r2, r0
 800341e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003422:	4611      	mov	r1, r2
 8003424:	4618      	mov	r0, r3
 8003426:	f7ff ff5d 	bl	80032e4 <__NVIC_SetPriority>
}
 800342a:	bf00      	nop
 800342c:	3718      	adds	r7, #24
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}

08003432 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003432:	b580      	push	{r7, lr}
 8003434:	b082      	sub	sp, #8
 8003436:	af00      	add	r7, sp, #0
 8003438:	4603      	mov	r3, r0
 800343a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800343c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003440:	4618      	mov	r0, r3
 8003442:	f7ff ff31 	bl	80032a8 <__NVIC_EnableIRQ>
}
 8003446:	bf00      	nop
 8003448:	3708      	adds	r7, #8
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}

0800344e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800344e:	b580      	push	{r7, lr}
 8003450:	b082      	sub	sp, #8
 8003452:	af00      	add	r7, sp, #0
 8003454:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f7ff ffa2 	bl	80033a0 <SysTick_Config>
 800345c:	4603      	mov	r3, r0
}
 800345e:	4618      	mov	r0, r3
 8003460:	3708      	adds	r7, #8
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}

08003466 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003466:	b580      	push	{r7, lr}
 8003468:	b084      	sub	sp, #16
 800346a:	af00      	add	r7, sp, #0
 800346c:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800346e:	2300      	movs	r3, #0
 8003470:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d101      	bne.n	800347c <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e037      	b.n	80034ec <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2202      	movs	r2, #2
 8003480:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003492:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8003496:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80034a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	695b      	ldr	r3, [r3, #20]
 80034b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	69db      	ldr	r3, [r3, #28]
 80034be:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80034c0:	68fa      	ldr	r2, [r7, #12]
 80034c2:	4313      	orrs	r3, r2
 80034c4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	68fa      	ldr	r2, [r7, #12]
 80034cc:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f000 f940 	bl	8003754 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2200      	movs	r2, #0
 80034d8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2201      	movs	r2, #1
 80034de:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80034ea:	2300      	movs	r3, #0
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3710      	adds	r7, #16
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}

080034f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b086      	sub	sp, #24
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	60f8      	str	r0, [r7, #12]
 80034fc:	60b9      	str	r1, [r7, #8]
 80034fe:	607a      	str	r2, [r7, #4]
 8003500:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003502:	2300      	movs	r3, #0
 8003504:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	f893 3020 	ldrb.w	r3, [r3, #32]
 800350c:	2b01      	cmp	r3, #1
 800350e:	d101      	bne.n	8003514 <HAL_DMA_Start_IT+0x20>
 8003510:	2302      	movs	r3, #2
 8003512:	e04a      	b.n	80035aa <HAL_DMA_Start_IT+0xb6>
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003522:	2b01      	cmp	r3, #1
 8003524:	d13a      	bne.n	800359c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2202      	movs	r2, #2
 800352a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2200      	movs	r2, #0
 8003532:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f022 0201 	bic.w	r2, r2, #1
 8003542:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	68b9      	ldr	r1, [r7, #8]
 800354a:	68f8      	ldr	r0, [r7, #12]
 800354c:	f000 f8d4 	bl	80036f8 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003554:	2b00      	cmp	r3, #0
 8003556:	d008      	beq.n	800356a <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f042 020e 	orr.w	r2, r2, #14
 8003566:	601a      	str	r2, [r3, #0]
 8003568:	e00f      	b.n	800358a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f042 020a 	orr.w	r2, r2, #10
 8003578:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f022 0204 	bic.w	r2, r2, #4
 8003588:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f042 0201 	orr.w	r2, r2, #1
 8003598:	601a      	str	r2, [r3, #0]
 800359a:	e005      	b.n	80035a8 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2200      	movs	r2, #0
 80035a0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80035a4:	2302      	movs	r3, #2
 80035a6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80035a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3718      	adds	r7, #24
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}

080035b2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80035b2:	b580      	push	{r7, lr}
 80035b4:	b084      	sub	sp, #16
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ce:	2204      	movs	r2, #4
 80035d0:	409a      	lsls	r2, r3
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	4013      	ands	r3, r2
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d024      	beq.n	8003624 <HAL_DMA_IRQHandler+0x72>
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	f003 0304 	and.w	r3, r3, #4
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d01f      	beq.n	8003624 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 0320 	and.w	r3, r3, #32
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d107      	bne.n	8003602 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f022 0204 	bic.w	r2, r2, #4
 8003600:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800360a:	2104      	movs	r1, #4
 800360c:	fa01 f202 	lsl.w	r2, r1, r2
 8003610:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003616:	2b00      	cmp	r3, #0
 8003618:	d06a      	beq.n	80036f0 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003622:	e065      	b.n	80036f0 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003628:	2202      	movs	r2, #2
 800362a:	409a      	lsls	r2, r3
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	4013      	ands	r3, r2
 8003630:	2b00      	cmp	r3, #0
 8003632:	d02c      	beq.n	800368e <HAL_DMA_IRQHandler+0xdc>
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	f003 0302 	and.w	r3, r3, #2
 800363a:	2b00      	cmp	r3, #0
 800363c:	d027      	beq.n	800368e <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 0320 	and.w	r3, r3, #32
 8003648:	2b00      	cmp	r3, #0
 800364a:	d10b      	bne.n	8003664 <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f022 020a 	bic.w	r2, r2, #10
 800365a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2201      	movs	r2, #1
 8003660:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800366c:	2102      	movs	r1, #2
 800366e:	fa01 f202 	lsl.w	r2, r1, r2
 8003672:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003680:	2b00      	cmp	r3, #0
 8003682:	d035      	beq.n	80036f0 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800368c:	e030      	b.n	80036f0 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003692:	2208      	movs	r2, #8
 8003694:	409a      	lsls	r2, r3
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	4013      	ands	r3, r2
 800369a:	2b00      	cmp	r3, #0
 800369c:	d028      	beq.n	80036f0 <HAL_DMA_IRQHandler+0x13e>
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	f003 0308 	and.w	r3, r3, #8
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d023      	beq.n	80036f0 <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f022 020e 	bic.w	r2, r2, #14
 80036b6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036c0:	2101      	movs	r1, #1
 80036c2:	fa01 f202 	lsl.w	r2, r1, r2
 80036c6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2201      	movs	r2, #1
 80036cc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2201      	movs	r2, #1
 80036d2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d004      	beq.n	80036f0 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	4798      	blx	r3
    }
  }
}
 80036ee:	e7ff      	b.n	80036f0 <HAL_DMA_IRQHandler+0x13e>
 80036f0:	bf00      	nop
 80036f2:	3710      	adds	r7, #16
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b085      	sub	sp, #20
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	60b9      	str	r1, [r7, #8]
 8003702:	607a      	str	r2, [r7, #4]
 8003704:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800370e:	2101      	movs	r1, #1
 8003710:	fa01 f202 	lsl.w	r2, r1, r2
 8003714:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	683a      	ldr	r2, [r7, #0]
 800371c:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	2b10      	cmp	r3, #16
 8003724:	d108      	bne.n	8003738 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	68ba      	ldr	r2, [r7, #8]
 8003734:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003736:	e007      	b.n	8003748 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	68ba      	ldr	r2, [r7, #8]
 800373e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	687a      	ldr	r2, [r7, #4]
 8003746:	60da      	str	r2, [r3, #12]
}
 8003748:	bf00      	nop
 800374a:	3714      	adds	r7, #20
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr

08003754 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003754:	b480      	push	{r7}
 8003756:	b083      	sub	sp, #12
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	461a      	mov	r2, r3
 8003762:	4b09      	ldr	r3, [pc, #36]	@ (8003788 <DMA_CalcBaseAndBitshift+0x34>)
 8003764:	4413      	add	r3, r2
 8003766:	4a09      	ldr	r2, [pc, #36]	@ (800378c <DMA_CalcBaseAndBitshift+0x38>)
 8003768:	fba2 2303 	umull	r2, r3, r2, r3
 800376c:	091b      	lsrs	r3, r3, #4
 800376e:	009a      	lsls	r2, r3, #2
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	4a06      	ldr	r2, [pc, #24]	@ (8003790 <DMA_CalcBaseAndBitshift+0x3c>)
 8003778:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 800377a:	bf00      	nop
 800377c:	370c      	adds	r7, #12
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr
 8003786:	bf00      	nop
 8003788:	bffdfff8 	.word	0xbffdfff8
 800378c:	cccccccd 	.word	0xcccccccd
 8003790:	40020000 	.word	0x40020000

08003794 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003794:	b480      	push	{r7}
 8003796:	b087      	sub	sp, #28
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
 800379c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800379e:	2300      	movs	r3, #0
 80037a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037a2:	e14e      	b.n	8003a42 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	2101      	movs	r1, #1
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	fa01 f303 	lsl.w	r3, r1, r3
 80037b0:	4013      	ands	r3, r2
 80037b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	f000 8140 	beq.w	8003a3c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	f003 0303 	and.w	r3, r3, #3
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d005      	beq.n	80037d4 <HAL_GPIO_Init+0x40>
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f003 0303 	and.w	r3, r3, #3
 80037d0:	2b02      	cmp	r3, #2
 80037d2:	d130      	bne.n	8003836 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	005b      	lsls	r3, r3, #1
 80037de:	2203      	movs	r2, #3
 80037e0:	fa02 f303 	lsl.w	r3, r2, r3
 80037e4:	43db      	mvns	r3, r3
 80037e6:	693a      	ldr	r2, [r7, #16]
 80037e8:	4013      	ands	r3, r2
 80037ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	68da      	ldr	r2, [r3, #12]
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	005b      	lsls	r3, r3, #1
 80037f4:	fa02 f303 	lsl.w	r3, r2, r3
 80037f8:	693a      	ldr	r2, [r7, #16]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	693a      	ldr	r2, [r7, #16]
 8003802:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800380a:	2201      	movs	r2, #1
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	fa02 f303 	lsl.w	r3, r2, r3
 8003812:	43db      	mvns	r3, r3
 8003814:	693a      	ldr	r2, [r7, #16]
 8003816:	4013      	ands	r3, r2
 8003818:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	091b      	lsrs	r3, r3, #4
 8003820:	f003 0201 	and.w	r2, r3, #1
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	fa02 f303 	lsl.w	r3, r2, r3
 800382a:	693a      	ldr	r2, [r7, #16]
 800382c:	4313      	orrs	r3, r2
 800382e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	693a      	ldr	r2, [r7, #16]
 8003834:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	f003 0303 	and.w	r3, r3, #3
 800383e:	2b03      	cmp	r3, #3
 8003840:	d017      	beq.n	8003872 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	68db      	ldr	r3, [r3, #12]
 8003846:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	005b      	lsls	r3, r3, #1
 800384c:	2203      	movs	r2, #3
 800384e:	fa02 f303 	lsl.w	r3, r2, r3
 8003852:	43db      	mvns	r3, r3
 8003854:	693a      	ldr	r2, [r7, #16]
 8003856:	4013      	ands	r3, r2
 8003858:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	689a      	ldr	r2, [r3, #8]
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	005b      	lsls	r3, r3, #1
 8003862:	fa02 f303 	lsl.w	r3, r2, r3
 8003866:	693a      	ldr	r2, [r7, #16]
 8003868:	4313      	orrs	r3, r2
 800386a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	693a      	ldr	r2, [r7, #16]
 8003870:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	f003 0303 	and.w	r3, r3, #3
 800387a:	2b02      	cmp	r3, #2
 800387c:	d123      	bne.n	80038c6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	08da      	lsrs	r2, r3, #3
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	3208      	adds	r2, #8
 8003886:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800388a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	f003 0307 	and.w	r3, r3, #7
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	220f      	movs	r2, #15
 8003896:	fa02 f303 	lsl.w	r3, r2, r3
 800389a:	43db      	mvns	r3, r3
 800389c:	693a      	ldr	r2, [r7, #16]
 800389e:	4013      	ands	r3, r2
 80038a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	691a      	ldr	r2, [r3, #16]
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	f003 0307 	and.w	r3, r3, #7
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	fa02 f303 	lsl.w	r3, r2, r3
 80038b2:	693a      	ldr	r2, [r7, #16]
 80038b4:	4313      	orrs	r3, r2
 80038b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	08da      	lsrs	r2, r3, #3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	3208      	adds	r2, #8
 80038c0:	6939      	ldr	r1, [r7, #16]
 80038c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	005b      	lsls	r3, r3, #1
 80038d0:	2203      	movs	r2, #3
 80038d2:	fa02 f303 	lsl.w	r3, r2, r3
 80038d6:	43db      	mvns	r3, r3
 80038d8:	693a      	ldr	r2, [r7, #16]
 80038da:	4013      	ands	r3, r2
 80038dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	f003 0203 	and.w	r2, r3, #3
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	005b      	lsls	r3, r3, #1
 80038ea:	fa02 f303 	lsl.w	r3, r2, r3
 80038ee:	693a      	ldr	r2, [r7, #16]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	693a      	ldr	r2, [r7, #16]
 80038f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003902:	2b00      	cmp	r3, #0
 8003904:	f000 809a 	beq.w	8003a3c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003908:	4b55      	ldr	r3, [pc, #340]	@ (8003a60 <HAL_GPIO_Init+0x2cc>)
 800390a:	699b      	ldr	r3, [r3, #24]
 800390c:	4a54      	ldr	r2, [pc, #336]	@ (8003a60 <HAL_GPIO_Init+0x2cc>)
 800390e:	f043 0301 	orr.w	r3, r3, #1
 8003912:	6193      	str	r3, [r2, #24]
 8003914:	4b52      	ldr	r3, [pc, #328]	@ (8003a60 <HAL_GPIO_Init+0x2cc>)
 8003916:	699b      	ldr	r3, [r3, #24]
 8003918:	f003 0301 	and.w	r3, r3, #1
 800391c:	60bb      	str	r3, [r7, #8]
 800391e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003920:	4a50      	ldr	r2, [pc, #320]	@ (8003a64 <HAL_GPIO_Init+0x2d0>)
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	089b      	lsrs	r3, r3, #2
 8003926:	3302      	adds	r3, #2
 8003928:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800392c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	f003 0303 	and.w	r3, r3, #3
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	220f      	movs	r2, #15
 8003938:	fa02 f303 	lsl.w	r3, r2, r3
 800393c:	43db      	mvns	r3, r3
 800393e:	693a      	ldr	r2, [r7, #16]
 8003940:	4013      	ands	r3, r2
 8003942:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800394a:	d013      	beq.n	8003974 <HAL_GPIO_Init+0x1e0>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	4a46      	ldr	r2, [pc, #280]	@ (8003a68 <HAL_GPIO_Init+0x2d4>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d00d      	beq.n	8003970 <HAL_GPIO_Init+0x1dc>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	4a45      	ldr	r2, [pc, #276]	@ (8003a6c <HAL_GPIO_Init+0x2d8>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d007      	beq.n	800396c <HAL_GPIO_Init+0x1d8>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	4a44      	ldr	r2, [pc, #272]	@ (8003a70 <HAL_GPIO_Init+0x2dc>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d101      	bne.n	8003968 <HAL_GPIO_Init+0x1d4>
 8003964:	2303      	movs	r3, #3
 8003966:	e006      	b.n	8003976 <HAL_GPIO_Init+0x1e2>
 8003968:	2305      	movs	r3, #5
 800396a:	e004      	b.n	8003976 <HAL_GPIO_Init+0x1e2>
 800396c:	2302      	movs	r3, #2
 800396e:	e002      	b.n	8003976 <HAL_GPIO_Init+0x1e2>
 8003970:	2301      	movs	r3, #1
 8003972:	e000      	b.n	8003976 <HAL_GPIO_Init+0x1e2>
 8003974:	2300      	movs	r3, #0
 8003976:	697a      	ldr	r2, [r7, #20]
 8003978:	f002 0203 	and.w	r2, r2, #3
 800397c:	0092      	lsls	r2, r2, #2
 800397e:	4093      	lsls	r3, r2
 8003980:	693a      	ldr	r2, [r7, #16]
 8003982:	4313      	orrs	r3, r2
 8003984:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003986:	4937      	ldr	r1, [pc, #220]	@ (8003a64 <HAL_GPIO_Init+0x2d0>)
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	089b      	lsrs	r3, r3, #2
 800398c:	3302      	adds	r3, #2
 800398e:	693a      	ldr	r2, [r7, #16]
 8003990:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003994:	4b37      	ldr	r3, [pc, #220]	@ (8003a74 <HAL_GPIO_Init+0x2e0>)
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	43db      	mvns	r3, r3
 800399e:	693a      	ldr	r2, [r7, #16]
 80039a0:	4013      	ands	r3, r2
 80039a2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d003      	beq.n	80039b8 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80039b0:	693a      	ldr	r2, [r7, #16]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	4313      	orrs	r3, r2
 80039b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80039b8:	4a2e      	ldr	r2, [pc, #184]	@ (8003a74 <HAL_GPIO_Init+0x2e0>)
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80039be:	4b2d      	ldr	r3, [pc, #180]	@ (8003a74 <HAL_GPIO_Init+0x2e0>)
 80039c0:	68db      	ldr	r3, [r3, #12]
 80039c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	43db      	mvns	r3, r3
 80039c8:	693a      	ldr	r2, [r7, #16]
 80039ca:	4013      	ands	r3, r2
 80039cc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d003      	beq.n	80039e2 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80039da:	693a      	ldr	r2, [r7, #16]
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	4313      	orrs	r3, r2
 80039e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80039e2:	4a24      	ldr	r2, [pc, #144]	@ (8003a74 <HAL_GPIO_Init+0x2e0>)
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80039e8:	4b22      	ldr	r3, [pc, #136]	@ (8003a74 <HAL_GPIO_Init+0x2e0>)
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	43db      	mvns	r3, r3
 80039f2:	693a      	ldr	r2, [r7, #16]
 80039f4:	4013      	ands	r3, r2
 80039f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d003      	beq.n	8003a0c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8003a04:	693a      	ldr	r2, [r7, #16]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003a0c:	4a19      	ldr	r2, [pc, #100]	@ (8003a74 <HAL_GPIO_Init+0x2e0>)
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a12:	4b18      	ldr	r3, [pc, #96]	@ (8003a74 <HAL_GPIO_Init+0x2e0>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	43db      	mvns	r3, r3
 8003a1c:	693a      	ldr	r2, [r7, #16]
 8003a1e:	4013      	ands	r3, r2
 8003a20:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d003      	beq.n	8003a36 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8003a2e:	693a      	ldr	r2, [r7, #16]
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	4313      	orrs	r3, r2
 8003a34:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003a36:	4a0f      	ldr	r2, [pc, #60]	@ (8003a74 <HAL_GPIO_Init+0x2e0>)
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	3301      	adds	r3, #1
 8003a40:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	fa22 f303 	lsr.w	r3, r2, r3
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	f47f aea9 	bne.w	80037a4 <HAL_GPIO_Init+0x10>
  }
}
 8003a52:	bf00      	nop
 8003a54:	bf00      	nop
 8003a56:	371c      	adds	r7, #28
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr
 8003a60:	40021000 	.word	0x40021000
 8003a64:	40010000 	.word	0x40010000
 8003a68:	48000400 	.word	0x48000400
 8003a6c:	48000800 	.word	0x48000800
 8003a70:	48000c00 	.word	0x48000c00
 8003a74:	40010400 	.word	0x40010400

08003a78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b083      	sub	sp, #12
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	460b      	mov	r3, r1
 8003a82:	807b      	strh	r3, [r7, #2]
 8003a84:	4613      	mov	r3, r2
 8003a86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a88:	787b      	ldrb	r3, [r7, #1]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d003      	beq.n	8003a96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003a8e:	887a      	ldrh	r2, [r7, #2]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003a94:	e002      	b.n	8003a9c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003a96:	887a      	ldrh	r2, [r7, #2]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003a9c:	bf00      	nop
 8003a9e:	370c      	adds	r7, #12
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr

08003aa8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ab4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003ab8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003aba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003abe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d102      	bne.n	8003ace <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	f001 b823 	b.w	8004b14 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ace:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ad2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0301 	and.w	r3, r3, #1
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	f000 817d 	beq.w	8003dde <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003ae4:	4bbc      	ldr	r3, [pc, #752]	@ (8003dd8 <HAL_RCC_OscConfig+0x330>)
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	f003 030c 	and.w	r3, r3, #12
 8003aec:	2b04      	cmp	r3, #4
 8003aee:	d00c      	beq.n	8003b0a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003af0:	4bb9      	ldr	r3, [pc, #740]	@ (8003dd8 <HAL_RCC_OscConfig+0x330>)
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	f003 030c 	and.w	r3, r3, #12
 8003af8:	2b08      	cmp	r3, #8
 8003afa:	d15c      	bne.n	8003bb6 <HAL_RCC_OscConfig+0x10e>
 8003afc:	4bb6      	ldr	r3, [pc, #728]	@ (8003dd8 <HAL_RCC_OscConfig+0x330>)
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b08:	d155      	bne.n	8003bb6 <HAL_RCC_OscConfig+0x10e>
 8003b0a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003b0e:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b12:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8003b16:	fa93 f3a3 	rbit	r3, r3
 8003b1a:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003b1e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b22:	fab3 f383 	clz	r3, r3
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	095b      	lsrs	r3, r3, #5
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	f043 0301 	orr.w	r3, r3, #1
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d102      	bne.n	8003b3c <HAL_RCC_OscConfig+0x94>
 8003b36:	4ba8      	ldr	r3, [pc, #672]	@ (8003dd8 <HAL_RCC_OscConfig+0x330>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	e015      	b.n	8003b68 <HAL_RCC_OscConfig+0xc0>
 8003b3c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003b40:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b44:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8003b48:	fa93 f3a3 	rbit	r3, r3
 8003b4c:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8003b50:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003b54:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8003b58:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8003b5c:	fa93 f3a3 	rbit	r3, r3
 8003b60:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8003b64:	4b9c      	ldr	r3, [pc, #624]	@ (8003dd8 <HAL_RCC_OscConfig+0x330>)
 8003b66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b68:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003b6c:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8003b70:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8003b74:	fa92 f2a2 	rbit	r2, r2
 8003b78:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8003b7c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8003b80:	fab2 f282 	clz	r2, r2
 8003b84:	b2d2      	uxtb	r2, r2
 8003b86:	f042 0220 	orr.w	r2, r2, #32
 8003b8a:	b2d2      	uxtb	r2, r2
 8003b8c:	f002 021f 	and.w	r2, r2, #31
 8003b90:	2101      	movs	r1, #1
 8003b92:	fa01 f202 	lsl.w	r2, r1, r2
 8003b96:	4013      	ands	r3, r2
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	f000 811f 	beq.w	8003ddc <HAL_RCC_OscConfig+0x334>
 8003b9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ba2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	f040 8116 	bne.w	8003ddc <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	f000 bfaf 	b.w	8004b14 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bb6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bba:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003bc6:	d106      	bne.n	8003bd6 <HAL_RCC_OscConfig+0x12e>
 8003bc8:	4b83      	ldr	r3, [pc, #524]	@ (8003dd8 <HAL_RCC_OscConfig+0x330>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a82      	ldr	r2, [pc, #520]	@ (8003dd8 <HAL_RCC_OscConfig+0x330>)
 8003bce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bd2:	6013      	str	r3, [r2, #0]
 8003bd4:	e036      	b.n	8003c44 <HAL_RCC_OscConfig+0x19c>
 8003bd6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bda:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d10c      	bne.n	8003c00 <HAL_RCC_OscConfig+0x158>
 8003be6:	4b7c      	ldr	r3, [pc, #496]	@ (8003dd8 <HAL_RCC_OscConfig+0x330>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a7b      	ldr	r2, [pc, #492]	@ (8003dd8 <HAL_RCC_OscConfig+0x330>)
 8003bec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003bf0:	6013      	str	r3, [r2, #0]
 8003bf2:	4b79      	ldr	r3, [pc, #484]	@ (8003dd8 <HAL_RCC_OscConfig+0x330>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a78      	ldr	r2, [pc, #480]	@ (8003dd8 <HAL_RCC_OscConfig+0x330>)
 8003bf8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003bfc:	6013      	str	r3, [r2, #0]
 8003bfe:	e021      	b.n	8003c44 <HAL_RCC_OscConfig+0x19c>
 8003c00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c04:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003c10:	d10c      	bne.n	8003c2c <HAL_RCC_OscConfig+0x184>
 8003c12:	4b71      	ldr	r3, [pc, #452]	@ (8003dd8 <HAL_RCC_OscConfig+0x330>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a70      	ldr	r2, [pc, #448]	@ (8003dd8 <HAL_RCC_OscConfig+0x330>)
 8003c18:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c1c:	6013      	str	r3, [r2, #0]
 8003c1e:	4b6e      	ldr	r3, [pc, #440]	@ (8003dd8 <HAL_RCC_OscConfig+0x330>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a6d      	ldr	r2, [pc, #436]	@ (8003dd8 <HAL_RCC_OscConfig+0x330>)
 8003c24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c28:	6013      	str	r3, [r2, #0]
 8003c2a:	e00b      	b.n	8003c44 <HAL_RCC_OscConfig+0x19c>
 8003c2c:	4b6a      	ldr	r3, [pc, #424]	@ (8003dd8 <HAL_RCC_OscConfig+0x330>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a69      	ldr	r2, [pc, #420]	@ (8003dd8 <HAL_RCC_OscConfig+0x330>)
 8003c32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c36:	6013      	str	r3, [r2, #0]
 8003c38:	4b67      	ldr	r3, [pc, #412]	@ (8003dd8 <HAL_RCC_OscConfig+0x330>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a66      	ldr	r2, [pc, #408]	@ (8003dd8 <HAL_RCC_OscConfig+0x330>)
 8003c3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c42:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003c44:	4b64      	ldr	r3, [pc, #400]	@ (8003dd8 <HAL_RCC_OscConfig+0x330>)
 8003c46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c48:	f023 020f 	bic.w	r2, r3, #15
 8003c4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c50:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	495f      	ldr	r1, [pc, #380]	@ (8003dd8 <HAL_RCC_OscConfig+0x330>)
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c62:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d059      	beq.n	8003d22 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c6e:	f7fe fc33 	bl	80024d8 <HAL_GetTick>
 8003c72:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c76:	e00a      	b.n	8003c8e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c78:	f7fe fc2e 	bl	80024d8 <HAL_GetTick>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003c82:	1ad3      	subs	r3, r2, r3
 8003c84:	2b64      	cmp	r3, #100	@ 0x64
 8003c86:	d902      	bls.n	8003c8e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8003c88:	2303      	movs	r3, #3
 8003c8a:	f000 bf43 	b.w	8004b14 <HAL_RCC_OscConfig+0x106c>
 8003c8e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003c92:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c96:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8003c9a:	fa93 f3a3 	rbit	r3, r3
 8003c9e:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8003ca2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ca6:	fab3 f383 	clz	r3, r3
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	095b      	lsrs	r3, r3, #5
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	f043 0301 	orr.w	r3, r3, #1
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d102      	bne.n	8003cc0 <HAL_RCC_OscConfig+0x218>
 8003cba:	4b47      	ldr	r3, [pc, #284]	@ (8003dd8 <HAL_RCC_OscConfig+0x330>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	e015      	b.n	8003cec <HAL_RCC_OscConfig+0x244>
 8003cc0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003cc4:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cc8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8003ccc:	fa93 f3a3 	rbit	r3, r3
 8003cd0:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8003cd4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003cd8:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8003cdc:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8003ce0:	fa93 f3a3 	rbit	r3, r3
 8003ce4:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8003ce8:	4b3b      	ldr	r3, [pc, #236]	@ (8003dd8 <HAL_RCC_OscConfig+0x330>)
 8003cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cec:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003cf0:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8003cf4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8003cf8:	fa92 f2a2 	rbit	r2, r2
 8003cfc:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8003d00:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8003d04:	fab2 f282 	clz	r2, r2
 8003d08:	b2d2      	uxtb	r2, r2
 8003d0a:	f042 0220 	orr.w	r2, r2, #32
 8003d0e:	b2d2      	uxtb	r2, r2
 8003d10:	f002 021f 	and.w	r2, r2, #31
 8003d14:	2101      	movs	r1, #1
 8003d16:	fa01 f202 	lsl.w	r2, r1, r2
 8003d1a:	4013      	ands	r3, r2
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d0ab      	beq.n	8003c78 <HAL_RCC_OscConfig+0x1d0>
 8003d20:	e05d      	b.n	8003dde <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d22:	f7fe fbd9 	bl	80024d8 <HAL_GetTick>
 8003d26:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d2a:	e00a      	b.n	8003d42 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d2c:	f7fe fbd4 	bl	80024d8 <HAL_GetTick>
 8003d30:	4602      	mov	r2, r0
 8003d32:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003d36:	1ad3      	subs	r3, r2, r3
 8003d38:	2b64      	cmp	r3, #100	@ 0x64
 8003d3a:	d902      	bls.n	8003d42 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8003d3c:	2303      	movs	r3, #3
 8003d3e:	f000 bee9 	b.w	8004b14 <HAL_RCC_OscConfig+0x106c>
 8003d42:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003d46:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d4a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8003d4e:	fa93 f3a3 	rbit	r3, r3
 8003d52:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8003d56:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d5a:	fab3 f383 	clz	r3, r3
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	095b      	lsrs	r3, r3, #5
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	f043 0301 	orr.w	r3, r3, #1
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d102      	bne.n	8003d74 <HAL_RCC_OscConfig+0x2cc>
 8003d6e:	4b1a      	ldr	r3, [pc, #104]	@ (8003dd8 <HAL_RCC_OscConfig+0x330>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	e015      	b.n	8003da0 <HAL_RCC_OscConfig+0x2f8>
 8003d74:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003d78:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d7c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8003d80:	fa93 f3a3 	rbit	r3, r3
 8003d84:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8003d88:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003d8c:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8003d90:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003d94:	fa93 f3a3 	rbit	r3, r3
 8003d98:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8003d9c:	4b0e      	ldr	r3, [pc, #56]	@ (8003dd8 <HAL_RCC_OscConfig+0x330>)
 8003d9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003da0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003da4:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8003da8:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8003dac:	fa92 f2a2 	rbit	r2, r2
 8003db0:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8003db4:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8003db8:	fab2 f282 	clz	r2, r2
 8003dbc:	b2d2      	uxtb	r2, r2
 8003dbe:	f042 0220 	orr.w	r2, r2, #32
 8003dc2:	b2d2      	uxtb	r2, r2
 8003dc4:	f002 021f 	and.w	r2, r2, #31
 8003dc8:	2101      	movs	r1, #1
 8003dca:	fa01 f202 	lsl.w	r2, r1, r2
 8003dce:	4013      	ands	r3, r2
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d1ab      	bne.n	8003d2c <HAL_RCC_OscConfig+0x284>
 8003dd4:	e003      	b.n	8003dde <HAL_RCC_OscConfig+0x336>
 8003dd6:	bf00      	nop
 8003dd8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ddc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003dde:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003de2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0302 	and.w	r3, r3, #2
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	f000 817d 	beq.w	80040ee <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003df4:	4ba6      	ldr	r3, [pc, #664]	@ (8004090 <HAL_RCC_OscConfig+0x5e8>)
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	f003 030c 	and.w	r3, r3, #12
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d00b      	beq.n	8003e18 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003e00:	4ba3      	ldr	r3, [pc, #652]	@ (8004090 <HAL_RCC_OscConfig+0x5e8>)
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	f003 030c 	and.w	r3, r3, #12
 8003e08:	2b08      	cmp	r3, #8
 8003e0a:	d172      	bne.n	8003ef2 <HAL_RCC_OscConfig+0x44a>
 8003e0c:	4ba0      	ldr	r3, [pc, #640]	@ (8004090 <HAL_RCC_OscConfig+0x5e8>)
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d16c      	bne.n	8003ef2 <HAL_RCC_OscConfig+0x44a>
 8003e18:	2302      	movs	r3, #2
 8003e1a:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e1e:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8003e22:	fa93 f3a3 	rbit	r3, r3
 8003e26:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8003e2a:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e2e:	fab3 f383 	clz	r3, r3
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	095b      	lsrs	r3, r3, #5
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	f043 0301 	orr.w	r3, r3, #1
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d102      	bne.n	8003e48 <HAL_RCC_OscConfig+0x3a0>
 8003e42:	4b93      	ldr	r3, [pc, #588]	@ (8004090 <HAL_RCC_OscConfig+0x5e8>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	e013      	b.n	8003e70 <HAL_RCC_OscConfig+0x3c8>
 8003e48:	2302      	movs	r3, #2
 8003e4a:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e4e:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8003e52:	fa93 f3a3 	rbit	r3, r3
 8003e56:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8003e5a:	2302      	movs	r3, #2
 8003e5c:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8003e60:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8003e64:	fa93 f3a3 	rbit	r3, r3
 8003e68:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8003e6c:	4b88      	ldr	r3, [pc, #544]	@ (8004090 <HAL_RCC_OscConfig+0x5e8>)
 8003e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e70:	2202      	movs	r2, #2
 8003e72:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8003e76:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8003e7a:	fa92 f2a2 	rbit	r2, r2
 8003e7e:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8003e82:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8003e86:	fab2 f282 	clz	r2, r2
 8003e8a:	b2d2      	uxtb	r2, r2
 8003e8c:	f042 0220 	orr.w	r2, r2, #32
 8003e90:	b2d2      	uxtb	r2, r2
 8003e92:	f002 021f 	and.w	r2, r2, #31
 8003e96:	2101      	movs	r1, #1
 8003e98:	fa01 f202 	lsl.w	r2, r1, r2
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d00a      	beq.n	8003eb8 <HAL_RCC_OscConfig+0x410>
 8003ea2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ea6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	691b      	ldr	r3, [r3, #16]
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	d002      	beq.n	8003eb8 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	f000 be2e 	b.w	8004b14 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003eb8:	4b75      	ldr	r3, [pc, #468]	@ (8004090 <HAL_RCC_OscConfig+0x5e8>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003ec0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ec4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	695b      	ldr	r3, [r3, #20]
 8003ecc:	21f8      	movs	r1, #248	@ 0xf8
 8003ece:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ed2:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8003ed6:	fa91 f1a1 	rbit	r1, r1
 8003eda:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8003ede:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8003ee2:	fab1 f181 	clz	r1, r1
 8003ee6:	b2c9      	uxtb	r1, r1
 8003ee8:	408b      	lsls	r3, r1
 8003eea:	4969      	ldr	r1, [pc, #420]	@ (8004090 <HAL_RCC_OscConfig+0x5e8>)
 8003eec:	4313      	orrs	r3, r2
 8003eee:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ef0:	e0fd      	b.n	80040ee <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ef2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ef6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	691b      	ldr	r3, [r3, #16]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	f000 8088 	beq.w	8004014 <HAL_RCC_OscConfig+0x56c>
 8003f04:	2301      	movs	r3, #1
 8003f06:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f0a:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8003f0e:	fa93 f3a3 	rbit	r3, r3
 8003f12:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8003f16:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f1a:	fab3 f383 	clz	r3, r3
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003f24:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003f28:	009b      	lsls	r3, r3, #2
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f30:	f7fe fad2 	bl	80024d8 <HAL_GetTick>
 8003f34:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f38:	e00a      	b.n	8003f50 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f3a:	f7fe facd 	bl	80024d8 <HAL_GetTick>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	2b02      	cmp	r3, #2
 8003f48:	d902      	bls.n	8003f50 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8003f4a:	2303      	movs	r3, #3
 8003f4c:	f000 bde2 	b.w	8004b14 <HAL_RCC_OscConfig+0x106c>
 8003f50:	2302      	movs	r3, #2
 8003f52:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f56:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8003f5a:	fa93 f3a3 	rbit	r3, r3
 8003f5e:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8003f62:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f66:	fab3 f383 	clz	r3, r3
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	095b      	lsrs	r3, r3, #5
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	f043 0301 	orr.w	r3, r3, #1
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d102      	bne.n	8003f80 <HAL_RCC_OscConfig+0x4d8>
 8003f7a:	4b45      	ldr	r3, [pc, #276]	@ (8004090 <HAL_RCC_OscConfig+0x5e8>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	e013      	b.n	8003fa8 <HAL_RCC_OscConfig+0x500>
 8003f80:	2302      	movs	r3, #2
 8003f82:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f86:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8003f8a:	fa93 f3a3 	rbit	r3, r3
 8003f8e:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8003f92:	2302      	movs	r3, #2
 8003f94:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8003f98:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8003f9c:	fa93 f3a3 	rbit	r3, r3
 8003fa0:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8003fa4:	4b3a      	ldr	r3, [pc, #232]	@ (8004090 <HAL_RCC_OscConfig+0x5e8>)
 8003fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fa8:	2202      	movs	r2, #2
 8003faa:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8003fae:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8003fb2:	fa92 f2a2 	rbit	r2, r2
 8003fb6:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8003fba:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8003fbe:	fab2 f282 	clz	r2, r2
 8003fc2:	b2d2      	uxtb	r2, r2
 8003fc4:	f042 0220 	orr.w	r2, r2, #32
 8003fc8:	b2d2      	uxtb	r2, r2
 8003fca:	f002 021f 	and.w	r2, r2, #31
 8003fce:	2101      	movs	r1, #1
 8003fd0:	fa01 f202 	lsl.w	r2, r1, r2
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d0af      	beq.n	8003f3a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fda:	4b2d      	ldr	r3, [pc, #180]	@ (8004090 <HAL_RCC_OscConfig+0x5e8>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003fe2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fe6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	695b      	ldr	r3, [r3, #20]
 8003fee:	21f8      	movs	r1, #248	@ 0xf8
 8003ff0:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ff4:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8003ff8:	fa91 f1a1 	rbit	r1, r1
 8003ffc:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8004000:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8004004:	fab1 f181 	clz	r1, r1
 8004008:	b2c9      	uxtb	r1, r1
 800400a:	408b      	lsls	r3, r1
 800400c:	4920      	ldr	r1, [pc, #128]	@ (8004090 <HAL_RCC_OscConfig+0x5e8>)
 800400e:	4313      	orrs	r3, r2
 8004010:	600b      	str	r3, [r1, #0]
 8004012:	e06c      	b.n	80040ee <HAL_RCC_OscConfig+0x646>
 8004014:	2301      	movs	r3, #1
 8004016:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800401a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800401e:	fa93 f3a3 	rbit	r3, r3
 8004022:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8004026:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800402a:	fab3 f383 	clz	r3, r3
 800402e:	b2db      	uxtb	r3, r3
 8004030:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004034:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004038:	009b      	lsls	r3, r3, #2
 800403a:	461a      	mov	r2, r3
 800403c:	2300      	movs	r3, #0
 800403e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004040:	f7fe fa4a 	bl	80024d8 <HAL_GetTick>
 8004044:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004048:	e00a      	b.n	8004060 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800404a:	f7fe fa45 	bl	80024d8 <HAL_GetTick>
 800404e:	4602      	mov	r2, r0
 8004050:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	2b02      	cmp	r3, #2
 8004058:	d902      	bls.n	8004060 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800405a:	2303      	movs	r3, #3
 800405c:	f000 bd5a 	b.w	8004b14 <HAL_RCC_OscConfig+0x106c>
 8004060:	2302      	movs	r3, #2
 8004062:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004066:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800406a:	fa93 f3a3 	rbit	r3, r3
 800406e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8004072:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004076:	fab3 f383 	clz	r3, r3
 800407a:	b2db      	uxtb	r3, r3
 800407c:	095b      	lsrs	r3, r3, #5
 800407e:	b2db      	uxtb	r3, r3
 8004080:	f043 0301 	orr.w	r3, r3, #1
 8004084:	b2db      	uxtb	r3, r3
 8004086:	2b01      	cmp	r3, #1
 8004088:	d104      	bne.n	8004094 <HAL_RCC_OscConfig+0x5ec>
 800408a:	4b01      	ldr	r3, [pc, #4]	@ (8004090 <HAL_RCC_OscConfig+0x5e8>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	e015      	b.n	80040bc <HAL_RCC_OscConfig+0x614>
 8004090:	40021000 	.word	0x40021000
 8004094:	2302      	movs	r3, #2
 8004096:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800409a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800409e:	fa93 f3a3 	rbit	r3, r3
 80040a2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80040a6:	2302      	movs	r3, #2
 80040a8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80040ac:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80040b0:	fa93 f3a3 	rbit	r3, r3
 80040b4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80040b8:	4bc8      	ldr	r3, [pc, #800]	@ (80043dc <HAL_RCC_OscConfig+0x934>)
 80040ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040bc:	2202      	movs	r2, #2
 80040be:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 80040c2:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80040c6:	fa92 f2a2 	rbit	r2, r2
 80040ca:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 80040ce:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80040d2:	fab2 f282 	clz	r2, r2
 80040d6:	b2d2      	uxtb	r2, r2
 80040d8:	f042 0220 	orr.w	r2, r2, #32
 80040dc:	b2d2      	uxtb	r2, r2
 80040de:	f002 021f 	and.w	r2, r2, #31
 80040e2:	2101      	movs	r1, #1
 80040e4:	fa01 f202 	lsl.w	r2, r1, r2
 80040e8:	4013      	ands	r3, r2
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d1ad      	bne.n	800404a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040f2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 0308 	and.w	r3, r3, #8
 80040fe:	2b00      	cmp	r3, #0
 8004100:	f000 8110 	beq.w	8004324 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004104:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004108:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	699b      	ldr	r3, [r3, #24]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d079      	beq.n	8004208 <HAL_RCC_OscConfig+0x760>
 8004114:	2301      	movs	r3, #1
 8004116:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800411a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800411e:	fa93 f3a3 	rbit	r3, r3
 8004122:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8004126:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800412a:	fab3 f383 	clz	r3, r3
 800412e:	b2db      	uxtb	r3, r3
 8004130:	461a      	mov	r2, r3
 8004132:	4bab      	ldr	r3, [pc, #684]	@ (80043e0 <HAL_RCC_OscConfig+0x938>)
 8004134:	4413      	add	r3, r2
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	461a      	mov	r2, r3
 800413a:	2301      	movs	r3, #1
 800413c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800413e:	f7fe f9cb 	bl	80024d8 <HAL_GetTick>
 8004142:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004146:	e00a      	b.n	800415e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004148:	f7fe f9c6 	bl	80024d8 <HAL_GetTick>
 800414c:	4602      	mov	r2, r0
 800414e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004152:	1ad3      	subs	r3, r2, r3
 8004154:	2b02      	cmp	r3, #2
 8004156:	d902      	bls.n	800415e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8004158:	2303      	movs	r3, #3
 800415a:	f000 bcdb 	b.w	8004b14 <HAL_RCC_OscConfig+0x106c>
 800415e:	2302      	movs	r3, #2
 8004160:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004164:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8004168:	fa93 f3a3 	rbit	r3, r3
 800416c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004170:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004174:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8004178:	2202      	movs	r2, #2
 800417a:	601a      	str	r2, [r3, #0]
 800417c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004180:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	fa93 f2a3 	rbit	r2, r3
 800418a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800418e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004192:	601a      	str	r2, [r3, #0]
 8004194:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004198:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800419c:	2202      	movs	r2, #2
 800419e:	601a      	str	r2, [r3, #0]
 80041a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	fa93 f2a3 	rbit	r2, r3
 80041ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041b2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80041b6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041b8:	4b88      	ldr	r3, [pc, #544]	@ (80043dc <HAL_RCC_OscConfig+0x934>)
 80041ba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80041bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041c0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80041c4:	2102      	movs	r1, #2
 80041c6:	6019      	str	r1, [r3, #0]
 80041c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041cc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	fa93 f1a3 	rbit	r1, r3
 80041d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041da:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80041de:	6019      	str	r1, [r3, #0]
  return result;
 80041e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041e4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	fab3 f383 	clz	r3, r3
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	f003 031f 	and.w	r3, r3, #31
 80041fa:	2101      	movs	r1, #1
 80041fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004200:	4013      	ands	r3, r2
 8004202:	2b00      	cmp	r3, #0
 8004204:	d0a0      	beq.n	8004148 <HAL_RCC_OscConfig+0x6a0>
 8004206:	e08d      	b.n	8004324 <HAL_RCC_OscConfig+0x87c>
 8004208:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800420c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004210:	2201      	movs	r2, #1
 8004212:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004214:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004218:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	fa93 f2a3 	rbit	r2, r3
 8004222:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004226:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800422a:	601a      	str	r2, [r3, #0]
  return result;
 800422c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004230:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8004234:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004236:	fab3 f383 	clz	r3, r3
 800423a:	b2db      	uxtb	r3, r3
 800423c:	461a      	mov	r2, r3
 800423e:	4b68      	ldr	r3, [pc, #416]	@ (80043e0 <HAL_RCC_OscConfig+0x938>)
 8004240:	4413      	add	r3, r2
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	461a      	mov	r2, r3
 8004246:	2300      	movs	r3, #0
 8004248:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800424a:	f7fe f945 	bl	80024d8 <HAL_GetTick>
 800424e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004252:	e00a      	b.n	800426a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004254:	f7fe f940 	bl	80024d8 <HAL_GetTick>
 8004258:	4602      	mov	r2, r0
 800425a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800425e:	1ad3      	subs	r3, r2, r3
 8004260:	2b02      	cmp	r3, #2
 8004262:	d902      	bls.n	800426a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8004264:	2303      	movs	r3, #3
 8004266:	f000 bc55 	b.w	8004b14 <HAL_RCC_OscConfig+0x106c>
 800426a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800426e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8004272:	2202      	movs	r2, #2
 8004274:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004276:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800427a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	fa93 f2a3 	rbit	r2, r3
 8004284:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004288:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800428c:	601a      	str	r2, [r3, #0]
 800428e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004292:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8004296:	2202      	movs	r2, #2
 8004298:	601a      	str	r2, [r3, #0]
 800429a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800429e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	fa93 f2a3 	rbit	r2, r3
 80042a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042ac:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80042b0:	601a      	str	r2, [r3, #0]
 80042b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042b6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80042ba:	2202      	movs	r2, #2
 80042bc:	601a      	str	r2, [r3, #0]
 80042be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042c2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	fa93 f2a3 	rbit	r2, r3
 80042cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042d0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80042d4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042d6:	4b41      	ldr	r3, [pc, #260]	@ (80043dc <HAL_RCC_OscConfig+0x934>)
 80042d8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80042da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042de:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80042e2:	2102      	movs	r1, #2
 80042e4:	6019      	str	r1, [r3, #0]
 80042e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042ea:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	fa93 f1a3 	rbit	r1, r3
 80042f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042f8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80042fc:	6019      	str	r1, [r3, #0]
  return result;
 80042fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004302:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	fab3 f383 	clz	r3, r3
 800430c:	b2db      	uxtb	r3, r3
 800430e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8004312:	b2db      	uxtb	r3, r3
 8004314:	f003 031f 	and.w	r3, r3, #31
 8004318:	2101      	movs	r1, #1
 800431a:	fa01 f303 	lsl.w	r3, r1, r3
 800431e:	4013      	ands	r3, r2
 8004320:	2b00      	cmp	r3, #0
 8004322:	d197      	bne.n	8004254 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004324:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004328:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 0304 	and.w	r3, r3, #4
 8004334:	2b00      	cmp	r3, #0
 8004336:	f000 81a1 	beq.w	800467c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800433a:	2300      	movs	r3, #0
 800433c:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004340:	4b26      	ldr	r3, [pc, #152]	@ (80043dc <HAL_RCC_OscConfig+0x934>)
 8004342:	69db      	ldr	r3, [r3, #28]
 8004344:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004348:	2b00      	cmp	r3, #0
 800434a:	d116      	bne.n	800437a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800434c:	4b23      	ldr	r3, [pc, #140]	@ (80043dc <HAL_RCC_OscConfig+0x934>)
 800434e:	69db      	ldr	r3, [r3, #28]
 8004350:	4a22      	ldr	r2, [pc, #136]	@ (80043dc <HAL_RCC_OscConfig+0x934>)
 8004352:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004356:	61d3      	str	r3, [r2, #28]
 8004358:	4b20      	ldr	r3, [pc, #128]	@ (80043dc <HAL_RCC_OscConfig+0x934>)
 800435a:	69db      	ldr	r3, [r3, #28]
 800435c:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8004360:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004364:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8004368:	601a      	str	r2, [r3, #0]
 800436a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800436e:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8004372:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004374:	2301      	movs	r3, #1
 8004376:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800437a:	4b1a      	ldr	r3, [pc, #104]	@ (80043e4 <HAL_RCC_OscConfig+0x93c>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004382:	2b00      	cmp	r3, #0
 8004384:	d11a      	bne.n	80043bc <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004386:	4b17      	ldr	r3, [pc, #92]	@ (80043e4 <HAL_RCC_OscConfig+0x93c>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a16      	ldr	r2, [pc, #88]	@ (80043e4 <HAL_RCC_OscConfig+0x93c>)
 800438c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004390:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004392:	f7fe f8a1 	bl	80024d8 <HAL_GetTick>
 8004396:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800439a:	e009      	b.n	80043b0 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800439c:	f7fe f89c 	bl	80024d8 <HAL_GetTick>
 80043a0:	4602      	mov	r2, r0
 80043a2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80043a6:	1ad3      	subs	r3, r2, r3
 80043a8:	2b64      	cmp	r3, #100	@ 0x64
 80043aa:	d901      	bls.n	80043b0 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80043ac:	2303      	movs	r3, #3
 80043ae:	e3b1      	b.n	8004b14 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043b0:	4b0c      	ldr	r3, [pc, #48]	@ (80043e4 <HAL_RCC_OscConfig+0x93c>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d0ef      	beq.n	800439c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043c0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	68db      	ldr	r3, [r3, #12]
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d10d      	bne.n	80043e8 <HAL_RCC_OscConfig+0x940>
 80043cc:	4b03      	ldr	r3, [pc, #12]	@ (80043dc <HAL_RCC_OscConfig+0x934>)
 80043ce:	6a1b      	ldr	r3, [r3, #32]
 80043d0:	4a02      	ldr	r2, [pc, #8]	@ (80043dc <HAL_RCC_OscConfig+0x934>)
 80043d2:	f043 0301 	orr.w	r3, r3, #1
 80043d6:	6213      	str	r3, [r2, #32]
 80043d8:	e03c      	b.n	8004454 <HAL_RCC_OscConfig+0x9ac>
 80043da:	bf00      	nop
 80043dc:	40021000 	.word	0x40021000
 80043e0:	10908120 	.word	0x10908120
 80043e4:	40007000 	.word	0x40007000
 80043e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043ec:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d10c      	bne.n	8004412 <HAL_RCC_OscConfig+0x96a>
 80043f8:	4bc1      	ldr	r3, [pc, #772]	@ (8004700 <HAL_RCC_OscConfig+0xc58>)
 80043fa:	6a1b      	ldr	r3, [r3, #32]
 80043fc:	4ac0      	ldr	r2, [pc, #768]	@ (8004700 <HAL_RCC_OscConfig+0xc58>)
 80043fe:	f023 0301 	bic.w	r3, r3, #1
 8004402:	6213      	str	r3, [r2, #32]
 8004404:	4bbe      	ldr	r3, [pc, #760]	@ (8004700 <HAL_RCC_OscConfig+0xc58>)
 8004406:	6a1b      	ldr	r3, [r3, #32]
 8004408:	4abd      	ldr	r2, [pc, #756]	@ (8004700 <HAL_RCC_OscConfig+0xc58>)
 800440a:	f023 0304 	bic.w	r3, r3, #4
 800440e:	6213      	str	r3, [r2, #32]
 8004410:	e020      	b.n	8004454 <HAL_RCC_OscConfig+0x9ac>
 8004412:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004416:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	68db      	ldr	r3, [r3, #12]
 800441e:	2b05      	cmp	r3, #5
 8004420:	d10c      	bne.n	800443c <HAL_RCC_OscConfig+0x994>
 8004422:	4bb7      	ldr	r3, [pc, #732]	@ (8004700 <HAL_RCC_OscConfig+0xc58>)
 8004424:	6a1b      	ldr	r3, [r3, #32]
 8004426:	4ab6      	ldr	r2, [pc, #728]	@ (8004700 <HAL_RCC_OscConfig+0xc58>)
 8004428:	f043 0304 	orr.w	r3, r3, #4
 800442c:	6213      	str	r3, [r2, #32]
 800442e:	4bb4      	ldr	r3, [pc, #720]	@ (8004700 <HAL_RCC_OscConfig+0xc58>)
 8004430:	6a1b      	ldr	r3, [r3, #32]
 8004432:	4ab3      	ldr	r2, [pc, #716]	@ (8004700 <HAL_RCC_OscConfig+0xc58>)
 8004434:	f043 0301 	orr.w	r3, r3, #1
 8004438:	6213      	str	r3, [r2, #32]
 800443a:	e00b      	b.n	8004454 <HAL_RCC_OscConfig+0x9ac>
 800443c:	4bb0      	ldr	r3, [pc, #704]	@ (8004700 <HAL_RCC_OscConfig+0xc58>)
 800443e:	6a1b      	ldr	r3, [r3, #32]
 8004440:	4aaf      	ldr	r2, [pc, #700]	@ (8004700 <HAL_RCC_OscConfig+0xc58>)
 8004442:	f023 0301 	bic.w	r3, r3, #1
 8004446:	6213      	str	r3, [r2, #32]
 8004448:	4bad      	ldr	r3, [pc, #692]	@ (8004700 <HAL_RCC_OscConfig+0xc58>)
 800444a:	6a1b      	ldr	r3, [r3, #32]
 800444c:	4aac      	ldr	r2, [pc, #688]	@ (8004700 <HAL_RCC_OscConfig+0xc58>)
 800444e:	f023 0304 	bic.w	r3, r3, #4
 8004452:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004454:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004458:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	2b00      	cmp	r3, #0
 8004462:	f000 8081 	beq.w	8004568 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004466:	f7fe f837 	bl	80024d8 <HAL_GetTick>
 800446a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800446e:	e00b      	b.n	8004488 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004470:	f7fe f832 	bl	80024d8 <HAL_GetTick>
 8004474:	4602      	mov	r2, r0
 8004476:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800447a:	1ad3      	subs	r3, r2, r3
 800447c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004480:	4293      	cmp	r3, r2
 8004482:	d901      	bls.n	8004488 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8004484:	2303      	movs	r3, #3
 8004486:	e345      	b.n	8004b14 <HAL_RCC_OscConfig+0x106c>
 8004488:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800448c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004490:	2202      	movs	r2, #2
 8004492:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004494:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004498:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	fa93 f2a3 	rbit	r2, r3
 80044a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044a6:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80044aa:	601a      	str	r2, [r3, #0]
 80044ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044b0:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80044b4:	2202      	movs	r2, #2
 80044b6:	601a      	str	r2, [r3, #0]
 80044b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044bc:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	fa93 f2a3 	rbit	r2, r3
 80044c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044ca:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80044ce:	601a      	str	r2, [r3, #0]
  return result;
 80044d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044d4:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80044d8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044da:	fab3 f383 	clz	r3, r3
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	095b      	lsrs	r3, r3, #5
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	f043 0302 	orr.w	r3, r3, #2
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	d102      	bne.n	80044f4 <HAL_RCC_OscConfig+0xa4c>
 80044ee:	4b84      	ldr	r3, [pc, #528]	@ (8004700 <HAL_RCC_OscConfig+0xc58>)
 80044f0:	6a1b      	ldr	r3, [r3, #32]
 80044f2:	e013      	b.n	800451c <HAL_RCC_OscConfig+0xa74>
 80044f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044f8:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80044fc:	2202      	movs	r2, #2
 80044fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004500:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004504:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	fa93 f2a3 	rbit	r2, r3
 800450e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004512:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8004516:	601a      	str	r2, [r3, #0]
 8004518:	4b79      	ldr	r3, [pc, #484]	@ (8004700 <HAL_RCC_OscConfig+0xc58>)
 800451a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800451c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004520:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8004524:	2102      	movs	r1, #2
 8004526:	6011      	str	r1, [r2, #0]
 8004528:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800452c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8004530:	6812      	ldr	r2, [r2, #0]
 8004532:	fa92 f1a2 	rbit	r1, r2
 8004536:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800453a:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800453e:	6011      	str	r1, [r2, #0]
  return result;
 8004540:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004544:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8004548:	6812      	ldr	r2, [r2, #0]
 800454a:	fab2 f282 	clz	r2, r2
 800454e:	b2d2      	uxtb	r2, r2
 8004550:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004554:	b2d2      	uxtb	r2, r2
 8004556:	f002 021f 	and.w	r2, r2, #31
 800455a:	2101      	movs	r1, #1
 800455c:	fa01 f202 	lsl.w	r2, r1, r2
 8004560:	4013      	ands	r3, r2
 8004562:	2b00      	cmp	r3, #0
 8004564:	d084      	beq.n	8004470 <HAL_RCC_OscConfig+0x9c8>
 8004566:	e07f      	b.n	8004668 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004568:	f7fd ffb6 	bl	80024d8 <HAL_GetTick>
 800456c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004570:	e00b      	b.n	800458a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004572:	f7fd ffb1 	bl	80024d8 <HAL_GetTick>
 8004576:	4602      	mov	r2, r0
 8004578:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800457c:	1ad3      	subs	r3, r2, r3
 800457e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004582:	4293      	cmp	r3, r2
 8004584:	d901      	bls.n	800458a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8004586:	2303      	movs	r3, #3
 8004588:	e2c4      	b.n	8004b14 <HAL_RCC_OscConfig+0x106c>
 800458a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800458e:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8004592:	2202      	movs	r2, #2
 8004594:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004596:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800459a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	fa93 f2a3 	rbit	r2, r3
 80045a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045a8:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80045ac:	601a      	str	r2, [r3, #0]
 80045ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045b2:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80045b6:	2202      	movs	r2, #2
 80045b8:	601a      	str	r2, [r3, #0]
 80045ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045be:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	fa93 f2a3 	rbit	r2, r3
 80045c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045cc:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80045d0:	601a      	str	r2, [r3, #0]
  return result;
 80045d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045d6:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80045da:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045dc:	fab3 f383 	clz	r3, r3
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	095b      	lsrs	r3, r3, #5
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	f043 0302 	orr.w	r3, r3, #2
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	2b02      	cmp	r3, #2
 80045ee:	d102      	bne.n	80045f6 <HAL_RCC_OscConfig+0xb4e>
 80045f0:	4b43      	ldr	r3, [pc, #268]	@ (8004700 <HAL_RCC_OscConfig+0xc58>)
 80045f2:	6a1b      	ldr	r3, [r3, #32]
 80045f4:	e013      	b.n	800461e <HAL_RCC_OscConfig+0xb76>
 80045f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045fa:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80045fe:	2202      	movs	r2, #2
 8004600:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004602:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004606:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	fa93 f2a3 	rbit	r2, r3
 8004610:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004614:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8004618:	601a      	str	r2, [r3, #0]
 800461a:	4b39      	ldr	r3, [pc, #228]	@ (8004700 <HAL_RCC_OscConfig+0xc58>)
 800461c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800461e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004622:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8004626:	2102      	movs	r1, #2
 8004628:	6011      	str	r1, [r2, #0]
 800462a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800462e:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8004632:	6812      	ldr	r2, [r2, #0]
 8004634:	fa92 f1a2 	rbit	r1, r2
 8004638:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800463c:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8004640:	6011      	str	r1, [r2, #0]
  return result;
 8004642:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004646:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800464a:	6812      	ldr	r2, [r2, #0]
 800464c:	fab2 f282 	clz	r2, r2
 8004650:	b2d2      	uxtb	r2, r2
 8004652:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004656:	b2d2      	uxtb	r2, r2
 8004658:	f002 021f 	and.w	r2, r2, #31
 800465c:	2101      	movs	r1, #1
 800465e:	fa01 f202 	lsl.w	r2, r1, r2
 8004662:	4013      	ands	r3, r2
 8004664:	2b00      	cmp	r3, #0
 8004666:	d184      	bne.n	8004572 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004668:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 800466c:	2b01      	cmp	r3, #1
 800466e:	d105      	bne.n	800467c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004670:	4b23      	ldr	r3, [pc, #140]	@ (8004700 <HAL_RCC_OscConfig+0xc58>)
 8004672:	69db      	ldr	r3, [r3, #28]
 8004674:	4a22      	ldr	r2, [pc, #136]	@ (8004700 <HAL_RCC_OscConfig+0xc58>)
 8004676:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800467a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800467c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004680:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	69db      	ldr	r3, [r3, #28]
 8004688:	2b00      	cmp	r3, #0
 800468a:	f000 8242 	beq.w	8004b12 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800468e:	4b1c      	ldr	r3, [pc, #112]	@ (8004700 <HAL_RCC_OscConfig+0xc58>)
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	f003 030c 	and.w	r3, r3, #12
 8004696:	2b08      	cmp	r3, #8
 8004698:	f000 8213 	beq.w	8004ac2 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800469c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046a0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	69db      	ldr	r3, [r3, #28]
 80046a8:	2b02      	cmp	r3, #2
 80046aa:	f040 8162 	bne.w	8004972 <HAL_RCC_OscConfig+0xeca>
 80046ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046b2:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80046b6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80046ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046c0:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	fa93 f2a3 	rbit	r2, r3
 80046ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046ce:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80046d2:	601a      	str	r2, [r3, #0]
  return result;
 80046d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046d8:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80046dc:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046de:	fab3 f383 	clz	r3, r3
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80046e8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80046ec:	009b      	lsls	r3, r3, #2
 80046ee:	461a      	mov	r2, r3
 80046f0:	2300      	movs	r3, #0
 80046f2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046f4:	f7fd fef0 	bl	80024d8 <HAL_GetTick>
 80046f8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046fc:	e00c      	b.n	8004718 <HAL_RCC_OscConfig+0xc70>
 80046fe:	bf00      	nop
 8004700:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004704:	f7fd fee8 	bl	80024d8 <HAL_GetTick>
 8004708:	4602      	mov	r2, r0
 800470a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800470e:	1ad3      	subs	r3, r2, r3
 8004710:	2b02      	cmp	r3, #2
 8004712:	d901      	bls.n	8004718 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8004714:	2303      	movs	r3, #3
 8004716:	e1fd      	b.n	8004b14 <HAL_RCC_OscConfig+0x106c>
 8004718:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800471c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8004720:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004724:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004726:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800472a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	fa93 f2a3 	rbit	r2, r3
 8004734:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004738:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800473c:	601a      	str	r2, [r3, #0]
  return result;
 800473e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004742:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8004746:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004748:	fab3 f383 	clz	r3, r3
 800474c:	b2db      	uxtb	r3, r3
 800474e:	095b      	lsrs	r3, r3, #5
 8004750:	b2db      	uxtb	r3, r3
 8004752:	f043 0301 	orr.w	r3, r3, #1
 8004756:	b2db      	uxtb	r3, r3
 8004758:	2b01      	cmp	r3, #1
 800475a:	d102      	bne.n	8004762 <HAL_RCC_OscConfig+0xcba>
 800475c:	4bb0      	ldr	r3, [pc, #704]	@ (8004a20 <HAL_RCC_OscConfig+0xf78>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	e027      	b.n	80047b2 <HAL_RCC_OscConfig+0xd0a>
 8004762:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004766:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800476a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800476e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004770:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004774:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	fa93 f2a3 	rbit	r2, r3
 800477e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004782:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8004786:	601a      	str	r2, [r3, #0]
 8004788:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800478c:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8004790:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004794:	601a      	str	r2, [r3, #0]
 8004796:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800479a:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	fa93 f2a3 	rbit	r2, r3
 80047a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047a8:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80047ac:	601a      	str	r2, [r3, #0]
 80047ae:	4b9c      	ldr	r3, [pc, #624]	@ (8004a20 <HAL_RCC_OscConfig+0xf78>)
 80047b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047b2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80047b6:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80047ba:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80047be:	6011      	str	r1, [r2, #0]
 80047c0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80047c4:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80047c8:	6812      	ldr	r2, [r2, #0]
 80047ca:	fa92 f1a2 	rbit	r1, r2
 80047ce:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80047d2:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80047d6:	6011      	str	r1, [r2, #0]
  return result;
 80047d8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80047dc:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80047e0:	6812      	ldr	r2, [r2, #0]
 80047e2:	fab2 f282 	clz	r2, r2
 80047e6:	b2d2      	uxtb	r2, r2
 80047e8:	f042 0220 	orr.w	r2, r2, #32
 80047ec:	b2d2      	uxtb	r2, r2
 80047ee:	f002 021f 	and.w	r2, r2, #31
 80047f2:	2101      	movs	r1, #1
 80047f4:	fa01 f202 	lsl.w	r2, r1, r2
 80047f8:	4013      	ands	r3, r2
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d182      	bne.n	8004704 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80047fe:	4b88      	ldr	r3, [pc, #544]	@ (8004a20 <HAL_RCC_OscConfig+0xf78>)
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004806:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800480a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004812:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004816:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	6a1b      	ldr	r3, [r3, #32]
 800481e:	430b      	orrs	r3, r1
 8004820:	497f      	ldr	r1, [pc, #508]	@ (8004a20 <HAL_RCC_OscConfig+0xf78>)
 8004822:	4313      	orrs	r3, r2
 8004824:	604b      	str	r3, [r1, #4]
 8004826:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800482a:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800482e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004832:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004834:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004838:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	fa93 f2a3 	rbit	r2, r3
 8004842:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004846:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800484a:	601a      	str	r2, [r3, #0]
  return result;
 800484c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004850:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8004854:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004856:	fab3 f383 	clz	r3, r3
 800485a:	b2db      	uxtb	r3, r3
 800485c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004860:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004864:	009b      	lsls	r3, r3, #2
 8004866:	461a      	mov	r2, r3
 8004868:	2301      	movs	r3, #1
 800486a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800486c:	f7fd fe34 	bl	80024d8 <HAL_GetTick>
 8004870:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004874:	e009      	b.n	800488a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004876:	f7fd fe2f 	bl	80024d8 <HAL_GetTick>
 800487a:	4602      	mov	r2, r0
 800487c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004880:	1ad3      	subs	r3, r2, r3
 8004882:	2b02      	cmp	r3, #2
 8004884:	d901      	bls.n	800488a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8004886:	2303      	movs	r3, #3
 8004888:	e144      	b.n	8004b14 <HAL_RCC_OscConfig+0x106c>
 800488a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800488e:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8004892:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004896:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004898:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800489c:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	fa93 f2a3 	rbit	r2, r3
 80048a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048aa:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80048ae:	601a      	str	r2, [r3, #0]
  return result;
 80048b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048b4:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80048b8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80048ba:	fab3 f383 	clz	r3, r3
 80048be:	b2db      	uxtb	r3, r3
 80048c0:	095b      	lsrs	r3, r3, #5
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	f043 0301 	orr.w	r3, r3, #1
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	d102      	bne.n	80048d4 <HAL_RCC_OscConfig+0xe2c>
 80048ce:	4b54      	ldr	r3, [pc, #336]	@ (8004a20 <HAL_RCC_OscConfig+0xf78>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	e027      	b.n	8004924 <HAL_RCC_OscConfig+0xe7c>
 80048d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048d8:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80048dc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80048e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048e6:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	fa93 f2a3 	rbit	r2, r3
 80048f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048f4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80048f8:	601a      	str	r2, [r3, #0]
 80048fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048fe:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8004902:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004906:	601a      	str	r2, [r3, #0]
 8004908:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800490c:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	fa93 f2a3 	rbit	r2, r3
 8004916:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800491a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800491e:	601a      	str	r2, [r3, #0]
 8004920:	4b3f      	ldr	r3, [pc, #252]	@ (8004a20 <HAL_RCC_OscConfig+0xf78>)
 8004922:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004924:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004928:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800492c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004930:	6011      	str	r1, [r2, #0]
 8004932:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004936:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800493a:	6812      	ldr	r2, [r2, #0]
 800493c:	fa92 f1a2 	rbit	r1, r2
 8004940:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004944:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8004948:	6011      	str	r1, [r2, #0]
  return result;
 800494a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800494e:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8004952:	6812      	ldr	r2, [r2, #0]
 8004954:	fab2 f282 	clz	r2, r2
 8004958:	b2d2      	uxtb	r2, r2
 800495a:	f042 0220 	orr.w	r2, r2, #32
 800495e:	b2d2      	uxtb	r2, r2
 8004960:	f002 021f 	and.w	r2, r2, #31
 8004964:	2101      	movs	r1, #1
 8004966:	fa01 f202 	lsl.w	r2, r1, r2
 800496a:	4013      	ands	r3, r2
 800496c:	2b00      	cmp	r3, #0
 800496e:	d082      	beq.n	8004876 <HAL_RCC_OscConfig+0xdce>
 8004970:	e0cf      	b.n	8004b12 <HAL_RCC_OscConfig+0x106a>
 8004972:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004976:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800497a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800497e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004980:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004984:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	fa93 f2a3 	rbit	r2, r3
 800498e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004992:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8004996:	601a      	str	r2, [r3, #0]
  return result;
 8004998:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800499c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80049a0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049a2:	fab3 f383 	clz	r3, r3
 80049a6:	b2db      	uxtb	r3, r3
 80049a8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80049ac:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80049b0:	009b      	lsls	r3, r3, #2
 80049b2:	461a      	mov	r2, r3
 80049b4:	2300      	movs	r3, #0
 80049b6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049b8:	f7fd fd8e 	bl	80024d8 <HAL_GetTick>
 80049bc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80049c0:	e009      	b.n	80049d6 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049c2:	f7fd fd89 	bl	80024d8 <HAL_GetTick>
 80049c6:	4602      	mov	r2, r0
 80049c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80049cc:	1ad3      	subs	r3, r2, r3
 80049ce:	2b02      	cmp	r3, #2
 80049d0:	d901      	bls.n	80049d6 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80049d2:	2303      	movs	r3, #3
 80049d4:	e09e      	b.n	8004b14 <HAL_RCC_OscConfig+0x106c>
 80049d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049da:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80049de:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80049e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049e8:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	fa93 f2a3 	rbit	r2, r3
 80049f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049f6:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80049fa:	601a      	str	r2, [r3, #0]
  return result;
 80049fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a00:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8004a04:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a06:	fab3 f383 	clz	r3, r3
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	095b      	lsrs	r3, r3, #5
 8004a0e:	b2db      	uxtb	r3, r3
 8004a10:	f043 0301 	orr.w	r3, r3, #1
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d104      	bne.n	8004a24 <HAL_RCC_OscConfig+0xf7c>
 8004a1a:	4b01      	ldr	r3, [pc, #4]	@ (8004a20 <HAL_RCC_OscConfig+0xf78>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	e029      	b.n	8004a74 <HAL_RCC_OscConfig+0xfcc>
 8004a20:	40021000 	.word	0x40021000
 8004a24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a28:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8004a2c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004a30:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a36:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	fa93 f2a3 	rbit	r2, r3
 8004a40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a44:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8004a48:	601a      	str	r2, [r3, #0]
 8004a4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a4e:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8004a52:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004a56:	601a      	str	r2, [r3, #0]
 8004a58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a5c:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	fa93 f2a3 	rbit	r2, r3
 8004a66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a6a:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8004a6e:	601a      	str	r2, [r3, #0]
 8004a70:	4b2b      	ldr	r3, [pc, #172]	@ (8004b20 <HAL_RCC_OscConfig+0x1078>)
 8004a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a74:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004a78:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8004a7c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004a80:	6011      	str	r1, [r2, #0]
 8004a82:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004a86:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8004a8a:	6812      	ldr	r2, [r2, #0]
 8004a8c:	fa92 f1a2 	rbit	r1, r2
 8004a90:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004a94:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8004a98:	6011      	str	r1, [r2, #0]
  return result;
 8004a9a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004a9e:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8004aa2:	6812      	ldr	r2, [r2, #0]
 8004aa4:	fab2 f282 	clz	r2, r2
 8004aa8:	b2d2      	uxtb	r2, r2
 8004aaa:	f042 0220 	orr.w	r2, r2, #32
 8004aae:	b2d2      	uxtb	r2, r2
 8004ab0:	f002 021f 	and.w	r2, r2, #31
 8004ab4:	2101      	movs	r1, #1
 8004ab6:	fa01 f202 	lsl.w	r2, r1, r2
 8004aba:	4013      	ands	r3, r2
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d180      	bne.n	80049c2 <HAL_RCC_OscConfig+0xf1a>
 8004ac0:	e027      	b.n	8004b12 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ac2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ac6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	69db      	ldr	r3, [r3, #28]
 8004ace:	2b01      	cmp	r3, #1
 8004ad0:	d101      	bne.n	8004ad6 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e01e      	b.n	8004b14 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004ad6:	4b12      	ldr	r3, [pc, #72]	@ (8004b20 <HAL_RCC_OscConfig+0x1078>)
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004ade:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8004ae2:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004ae6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004aea:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	6a1b      	ldr	r3, [r3, #32]
 8004af2:	429a      	cmp	r2, r3
 8004af4:	d10b      	bne.n	8004b0e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004af6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8004afa:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004afe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b02:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	d001      	beq.n	8004b12 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e000      	b.n	8004b14 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8004b12:	2300      	movs	r3, #0
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}
 8004b1e:	bf00      	nop
 8004b20:	40021000 	.word	0x40021000

08004b24 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b09e      	sub	sp, #120	@ 0x78
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
 8004b2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d101      	bne.n	8004b3c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	e162      	b.n	8004e02 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b3c:	4b90      	ldr	r3, [pc, #576]	@ (8004d80 <HAL_RCC_ClockConfig+0x25c>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f003 0307 	and.w	r3, r3, #7
 8004b44:	683a      	ldr	r2, [r7, #0]
 8004b46:	429a      	cmp	r2, r3
 8004b48:	d910      	bls.n	8004b6c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b4a:	4b8d      	ldr	r3, [pc, #564]	@ (8004d80 <HAL_RCC_ClockConfig+0x25c>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f023 0207 	bic.w	r2, r3, #7
 8004b52:	498b      	ldr	r1, [pc, #556]	@ (8004d80 <HAL_RCC_ClockConfig+0x25c>)
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	4313      	orrs	r3, r2
 8004b58:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b5a:	4b89      	ldr	r3, [pc, #548]	@ (8004d80 <HAL_RCC_ClockConfig+0x25c>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f003 0307 	and.w	r3, r3, #7
 8004b62:	683a      	ldr	r2, [r7, #0]
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d001      	beq.n	8004b6c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	e14a      	b.n	8004e02 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f003 0302 	and.w	r3, r3, #2
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d008      	beq.n	8004b8a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b78:	4b82      	ldr	r3, [pc, #520]	@ (8004d84 <HAL_RCC_ClockConfig+0x260>)
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	497f      	ldr	r1, [pc, #508]	@ (8004d84 <HAL_RCC_ClockConfig+0x260>)
 8004b86:	4313      	orrs	r3, r2
 8004b88:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 0301 	and.w	r3, r3, #1
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	f000 80dc 	beq.w	8004d50 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d13c      	bne.n	8004c1a <HAL_RCC_ClockConfig+0xf6>
 8004ba0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004ba4:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ba6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004ba8:	fa93 f3a3 	rbit	r3, r3
 8004bac:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8004bae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bb0:	fab3 f383 	clz	r3, r3
 8004bb4:	b2db      	uxtb	r3, r3
 8004bb6:	095b      	lsrs	r3, r3, #5
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	f043 0301 	orr.w	r3, r3, #1
 8004bbe:	b2db      	uxtb	r3, r3
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d102      	bne.n	8004bca <HAL_RCC_ClockConfig+0xa6>
 8004bc4:	4b6f      	ldr	r3, [pc, #444]	@ (8004d84 <HAL_RCC_ClockConfig+0x260>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	e00f      	b.n	8004bea <HAL_RCC_ClockConfig+0xc6>
 8004bca:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004bce:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bd0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004bd2:	fa93 f3a3 	rbit	r3, r3
 8004bd6:	667b      	str	r3, [r7, #100]	@ 0x64
 8004bd8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004bdc:	663b      	str	r3, [r7, #96]	@ 0x60
 8004bde:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004be0:	fa93 f3a3 	rbit	r3, r3
 8004be4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004be6:	4b67      	ldr	r3, [pc, #412]	@ (8004d84 <HAL_RCC_ClockConfig+0x260>)
 8004be8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bea:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004bee:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004bf0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004bf2:	fa92 f2a2 	rbit	r2, r2
 8004bf6:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8004bf8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004bfa:	fab2 f282 	clz	r2, r2
 8004bfe:	b2d2      	uxtb	r2, r2
 8004c00:	f042 0220 	orr.w	r2, r2, #32
 8004c04:	b2d2      	uxtb	r2, r2
 8004c06:	f002 021f 	and.w	r2, r2, #31
 8004c0a:	2101      	movs	r1, #1
 8004c0c:	fa01 f202 	lsl.w	r2, r1, r2
 8004c10:	4013      	ands	r3, r2
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d17b      	bne.n	8004d0e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e0f3      	b.n	8004e02 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	2b02      	cmp	r3, #2
 8004c20:	d13c      	bne.n	8004c9c <HAL_RCC_ClockConfig+0x178>
 8004c22:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004c26:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c28:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004c2a:	fa93 f3a3 	rbit	r3, r3
 8004c2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004c30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c32:	fab3 f383 	clz	r3, r3
 8004c36:	b2db      	uxtb	r3, r3
 8004c38:	095b      	lsrs	r3, r3, #5
 8004c3a:	b2db      	uxtb	r3, r3
 8004c3c:	f043 0301 	orr.w	r3, r3, #1
 8004c40:	b2db      	uxtb	r3, r3
 8004c42:	2b01      	cmp	r3, #1
 8004c44:	d102      	bne.n	8004c4c <HAL_RCC_ClockConfig+0x128>
 8004c46:	4b4f      	ldr	r3, [pc, #316]	@ (8004d84 <HAL_RCC_ClockConfig+0x260>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	e00f      	b.n	8004c6c <HAL_RCC_ClockConfig+0x148>
 8004c4c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004c50:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004c54:	fa93 f3a3 	rbit	r3, r3
 8004c58:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c5a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004c5e:	643b      	str	r3, [r7, #64]	@ 0x40
 8004c60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c62:	fa93 f3a3 	rbit	r3, r3
 8004c66:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004c68:	4b46      	ldr	r3, [pc, #280]	@ (8004d84 <HAL_RCC_ClockConfig+0x260>)
 8004c6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c6c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004c70:	63ba      	str	r2, [r7, #56]	@ 0x38
 8004c72:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004c74:	fa92 f2a2 	rbit	r2, r2
 8004c78:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8004c7a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004c7c:	fab2 f282 	clz	r2, r2
 8004c80:	b2d2      	uxtb	r2, r2
 8004c82:	f042 0220 	orr.w	r2, r2, #32
 8004c86:	b2d2      	uxtb	r2, r2
 8004c88:	f002 021f 	and.w	r2, r2, #31
 8004c8c:	2101      	movs	r1, #1
 8004c8e:	fa01 f202 	lsl.w	r2, r1, r2
 8004c92:	4013      	ands	r3, r2
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d13a      	bne.n	8004d0e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e0b2      	b.n	8004e02 <HAL_RCC_ClockConfig+0x2de>
 8004c9c:	2302      	movs	r3, #2
 8004c9e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ca0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ca2:	fa93 f3a3 	rbit	r3, r3
 8004ca6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004ca8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004caa:	fab3 f383 	clz	r3, r3
 8004cae:	b2db      	uxtb	r3, r3
 8004cb0:	095b      	lsrs	r3, r3, #5
 8004cb2:	b2db      	uxtb	r3, r3
 8004cb4:	f043 0301 	orr.w	r3, r3, #1
 8004cb8:	b2db      	uxtb	r3, r3
 8004cba:	2b01      	cmp	r3, #1
 8004cbc:	d102      	bne.n	8004cc4 <HAL_RCC_ClockConfig+0x1a0>
 8004cbe:	4b31      	ldr	r3, [pc, #196]	@ (8004d84 <HAL_RCC_ClockConfig+0x260>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	e00d      	b.n	8004ce0 <HAL_RCC_ClockConfig+0x1bc>
 8004cc4:	2302      	movs	r3, #2
 8004cc6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cca:	fa93 f3a3 	rbit	r3, r3
 8004cce:	627b      	str	r3, [r7, #36]	@ 0x24
 8004cd0:	2302      	movs	r3, #2
 8004cd2:	623b      	str	r3, [r7, #32]
 8004cd4:	6a3b      	ldr	r3, [r7, #32]
 8004cd6:	fa93 f3a3 	rbit	r3, r3
 8004cda:	61fb      	str	r3, [r7, #28]
 8004cdc:	4b29      	ldr	r3, [pc, #164]	@ (8004d84 <HAL_RCC_ClockConfig+0x260>)
 8004cde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ce0:	2202      	movs	r2, #2
 8004ce2:	61ba      	str	r2, [r7, #24]
 8004ce4:	69ba      	ldr	r2, [r7, #24]
 8004ce6:	fa92 f2a2 	rbit	r2, r2
 8004cea:	617a      	str	r2, [r7, #20]
  return result;
 8004cec:	697a      	ldr	r2, [r7, #20]
 8004cee:	fab2 f282 	clz	r2, r2
 8004cf2:	b2d2      	uxtb	r2, r2
 8004cf4:	f042 0220 	orr.w	r2, r2, #32
 8004cf8:	b2d2      	uxtb	r2, r2
 8004cfa:	f002 021f 	and.w	r2, r2, #31
 8004cfe:	2101      	movs	r1, #1
 8004d00:	fa01 f202 	lsl.w	r2, r1, r2
 8004d04:	4013      	ands	r3, r2
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d101      	bne.n	8004d0e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e079      	b.n	8004e02 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d0e:	4b1d      	ldr	r3, [pc, #116]	@ (8004d84 <HAL_RCC_ClockConfig+0x260>)
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	f023 0203 	bic.w	r2, r3, #3
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	491a      	ldr	r1, [pc, #104]	@ (8004d84 <HAL_RCC_ClockConfig+0x260>)
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d20:	f7fd fbda 	bl	80024d8 <HAL_GetTick>
 8004d24:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d26:	e00a      	b.n	8004d3e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d28:	f7fd fbd6 	bl	80024d8 <HAL_GetTick>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d30:	1ad3      	subs	r3, r2, r3
 8004d32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d901      	bls.n	8004d3e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004d3a:	2303      	movs	r3, #3
 8004d3c:	e061      	b.n	8004e02 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d3e:	4b11      	ldr	r3, [pc, #68]	@ (8004d84 <HAL_RCC_ClockConfig+0x260>)
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	f003 020c 	and.w	r2, r3, #12
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	009b      	lsls	r3, r3, #2
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d1eb      	bne.n	8004d28 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d50:	4b0b      	ldr	r3, [pc, #44]	@ (8004d80 <HAL_RCC_ClockConfig+0x25c>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f003 0307 	and.w	r3, r3, #7
 8004d58:	683a      	ldr	r2, [r7, #0]
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	d214      	bcs.n	8004d88 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d5e:	4b08      	ldr	r3, [pc, #32]	@ (8004d80 <HAL_RCC_ClockConfig+0x25c>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f023 0207 	bic.w	r2, r3, #7
 8004d66:	4906      	ldr	r1, [pc, #24]	@ (8004d80 <HAL_RCC_ClockConfig+0x25c>)
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d6e:	4b04      	ldr	r3, [pc, #16]	@ (8004d80 <HAL_RCC_ClockConfig+0x25c>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f003 0307 	and.w	r3, r3, #7
 8004d76:	683a      	ldr	r2, [r7, #0]
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	d005      	beq.n	8004d88 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	e040      	b.n	8004e02 <HAL_RCC_ClockConfig+0x2de>
 8004d80:	40022000 	.word	0x40022000
 8004d84:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f003 0304 	and.w	r3, r3, #4
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d008      	beq.n	8004da6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d94:	4b1d      	ldr	r3, [pc, #116]	@ (8004e0c <HAL_RCC_ClockConfig+0x2e8>)
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	68db      	ldr	r3, [r3, #12]
 8004da0:	491a      	ldr	r1, [pc, #104]	@ (8004e0c <HAL_RCC_ClockConfig+0x2e8>)
 8004da2:	4313      	orrs	r3, r2
 8004da4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f003 0308 	and.w	r3, r3, #8
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d009      	beq.n	8004dc6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004db2:	4b16      	ldr	r3, [pc, #88]	@ (8004e0c <HAL_RCC_ClockConfig+0x2e8>)
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	691b      	ldr	r3, [r3, #16]
 8004dbe:	00db      	lsls	r3, r3, #3
 8004dc0:	4912      	ldr	r1, [pc, #72]	@ (8004e0c <HAL_RCC_ClockConfig+0x2e8>)
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004dc6:	f000 f829 	bl	8004e1c <HAL_RCC_GetSysClockFreq>
 8004dca:	4601      	mov	r1, r0
 8004dcc:	4b0f      	ldr	r3, [pc, #60]	@ (8004e0c <HAL_RCC_ClockConfig+0x2e8>)
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004dd4:	22f0      	movs	r2, #240	@ 0xf0
 8004dd6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dd8:	693a      	ldr	r2, [r7, #16]
 8004dda:	fa92 f2a2 	rbit	r2, r2
 8004dde:	60fa      	str	r2, [r7, #12]
  return result;
 8004de0:	68fa      	ldr	r2, [r7, #12]
 8004de2:	fab2 f282 	clz	r2, r2
 8004de6:	b2d2      	uxtb	r2, r2
 8004de8:	40d3      	lsrs	r3, r2
 8004dea:	4a09      	ldr	r2, [pc, #36]	@ (8004e10 <HAL_RCC_ClockConfig+0x2ec>)
 8004dec:	5cd3      	ldrb	r3, [r2, r3]
 8004dee:	fa21 f303 	lsr.w	r3, r1, r3
 8004df2:	4a08      	ldr	r2, [pc, #32]	@ (8004e14 <HAL_RCC_ClockConfig+0x2f0>)
 8004df4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004df6:	4b08      	ldr	r3, [pc, #32]	@ (8004e18 <HAL_RCC_ClockConfig+0x2f4>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f7fd fb28 	bl	8002450 <HAL_InitTick>
  
  return HAL_OK;
 8004e00:	2300      	movs	r3, #0
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3778      	adds	r7, #120	@ 0x78
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}
 8004e0a:	bf00      	nop
 8004e0c:	40021000 	.word	0x40021000
 8004e10:	0800a4e8 	.word	0x0800a4e8
 8004e14:	20000000 	.word	0x20000000
 8004e18:	20000004 	.word	0x20000004

08004e1c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b087      	sub	sp, #28
 8004e20:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004e22:	2300      	movs	r3, #0
 8004e24:	60fb      	str	r3, [r7, #12]
 8004e26:	2300      	movs	r3, #0
 8004e28:	60bb      	str	r3, [r7, #8]
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	617b      	str	r3, [r7, #20]
 8004e2e:	2300      	movs	r3, #0
 8004e30:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004e32:	2300      	movs	r3, #0
 8004e34:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8004e36:	4b1e      	ldr	r3, [pc, #120]	@ (8004eb0 <HAL_RCC_GetSysClockFreq+0x94>)
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f003 030c 	and.w	r3, r3, #12
 8004e42:	2b04      	cmp	r3, #4
 8004e44:	d002      	beq.n	8004e4c <HAL_RCC_GetSysClockFreq+0x30>
 8004e46:	2b08      	cmp	r3, #8
 8004e48:	d003      	beq.n	8004e52 <HAL_RCC_GetSysClockFreq+0x36>
 8004e4a:	e026      	b.n	8004e9a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004e4c:	4b19      	ldr	r3, [pc, #100]	@ (8004eb4 <HAL_RCC_GetSysClockFreq+0x98>)
 8004e4e:	613b      	str	r3, [r7, #16]
      break;
 8004e50:	e026      	b.n	8004ea0 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	0c9b      	lsrs	r3, r3, #18
 8004e56:	f003 030f 	and.w	r3, r3, #15
 8004e5a:	4a17      	ldr	r2, [pc, #92]	@ (8004eb8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004e5c:	5cd3      	ldrb	r3, [r2, r3]
 8004e5e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8004e60:	4b13      	ldr	r3, [pc, #76]	@ (8004eb0 <HAL_RCC_GetSysClockFreq+0x94>)
 8004e62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e64:	f003 030f 	and.w	r3, r3, #15
 8004e68:	4a14      	ldr	r2, [pc, #80]	@ (8004ebc <HAL_RCC_GetSysClockFreq+0xa0>)
 8004e6a:	5cd3      	ldrb	r3, [r2, r3]
 8004e6c:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d008      	beq.n	8004e8a <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004e78:	4a0e      	ldr	r2, [pc, #56]	@ (8004eb4 <HAL_RCC_GetSysClockFreq+0x98>)
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	fb02 f303 	mul.w	r3, r2, r3
 8004e86:	617b      	str	r3, [r7, #20]
 8004e88:	e004      	b.n	8004e94 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4a0c      	ldr	r2, [pc, #48]	@ (8004ec0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004e8e:	fb02 f303 	mul.w	r3, r2, r3
 8004e92:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	613b      	str	r3, [r7, #16]
      break;
 8004e98:	e002      	b.n	8004ea0 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004e9a:	4b06      	ldr	r3, [pc, #24]	@ (8004eb4 <HAL_RCC_GetSysClockFreq+0x98>)
 8004e9c:	613b      	str	r3, [r7, #16]
      break;
 8004e9e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ea0:	693b      	ldr	r3, [r7, #16]
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	371c      	adds	r7, #28
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eac:	4770      	bx	lr
 8004eae:	bf00      	nop
 8004eb0:	40021000 	.word	0x40021000
 8004eb4:	007a1200 	.word	0x007a1200
 8004eb8:	0800a500 	.word	0x0800a500
 8004ebc:	0800a510 	.word	0x0800a510
 8004ec0:	003d0900 	.word	0x003d0900

08004ec4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ec8:	4b03      	ldr	r3, [pc, #12]	@ (8004ed8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004eca:	681b      	ldr	r3, [r3, #0]
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr
 8004ed6:	bf00      	nop
 8004ed8:	20000000 	.word	0x20000000

08004edc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b082      	sub	sp, #8
 8004ee0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004ee2:	f7ff ffef 	bl	8004ec4 <HAL_RCC_GetHCLKFreq>
 8004ee6:	4601      	mov	r1, r0
 8004ee8:	4b0b      	ldr	r3, [pc, #44]	@ (8004f18 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004ef0:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8004ef4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ef6:	687a      	ldr	r2, [r7, #4]
 8004ef8:	fa92 f2a2 	rbit	r2, r2
 8004efc:	603a      	str	r2, [r7, #0]
  return result;
 8004efe:	683a      	ldr	r2, [r7, #0]
 8004f00:	fab2 f282 	clz	r2, r2
 8004f04:	b2d2      	uxtb	r2, r2
 8004f06:	40d3      	lsrs	r3, r2
 8004f08:	4a04      	ldr	r2, [pc, #16]	@ (8004f1c <HAL_RCC_GetPCLK1Freq+0x40>)
 8004f0a:	5cd3      	ldrb	r3, [r2, r3]
 8004f0c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004f10:	4618      	mov	r0, r3
 8004f12:	3708      	adds	r7, #8
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}
 8004f18:	40021000 	.word	0x40021000
 8004f1c:	0800a4f8 	.word	0x0800a4f8

08004f20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b082      	sub	sp, #8
 8004f24:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004f26:	f7ff ffcd 	bl	8004ec4 <HAL_RCC_GetHCLKFreq>
 8004f2a:	4601      	mov	r1, r0
 8004f2c:	4b0b      	ldr	r3, [pc, #44]	@ (8004f5c <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8004f34:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8004f38:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f3a:	687a      	ldr	r2, [r7, #4]
 8004f3c:	fa92 f2a2 	rbit	r2, r2
 8004f40:	603a      	str	r2, [r7, #0]
  return result;
 8004f42:	683a      	ldr	r2, [r7, #0]
 8004f44:	fab2 f282 	clz	r2, r2
 8004f48:	b2d2      	uxtb	r2, r2
 8004f4a:	40d3      	lsrs	r3, r2
 8004f4c:	4a04      	ldr	r2, [pc, #16]	@ (8004f60 <HAL_RCC_GetPCLK2Freq+0x40>)
 8004f4e:	5cd3      	ldrb	r3, [r2, r3]
 8004f50:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004f54:	4618      	mov	r0, r3
 8004f56:	3708      	adds	r7, #8
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}
 8004f5c:	40021000 	.word	0x40021000
 8004f60:	0800a4f8 	.word	0x0800a4f8

08004f64 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b092      	sub	sp, #72	@ 0x48
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8004f70:	2300      	movs	r3, #0
 8004f72:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004f74:	2300      	movs	r3, #0
 8004f76:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	f000 80cd 	beq.w	8005122 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f88:	4b86      	ldr	r3, [pc, #536]	@ (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004f8a:	69db      	ldr	r3, [r3, #28]
 8004f8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d10e      	bne.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f94:	4b83      	ldr	r3, [pc, #524]	@ (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004f96:	69db      	ldr	r3, [r3, #28]
 8004f98:	4a82      	ldr	r2, [pc, #520]	@ (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004f9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f9e:	61d3      	str	r3, [r2, #28]
 8004fa0:	4b80      	ldr	r3, [pc, #512]	@ (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004fa2:	69db      	ldr	r3, [r3, #28]
 8004fa4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fa8:	60bb      	str	r3, [r7, #8]
 8004faa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fac:	2301      	movs	r3, #1
 8004fae:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fb2:	4b7d      	ldr	r3, [pc, #500]	@ (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d118      	bne.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004fbe:	4b7a      	ldr	r3, [pc, #488]	@ (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a79      	ldr	r2, [pc, #484]	@ (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004fc4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004fc8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004fca:	f7fd fa85 	bl	80024d8 <HAL_GetTick>
 8004fce:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fd0:	e008      	b.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fd2:	f7fd fa81 	bl	80024d8 <HAL_GetTick>
 8004fd6:	4602      	mov	r2, r0
 8004fd8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004fda:	1ad3      	subs	r3, r2, r3
 8004fdc:	2b64      	cmp	r3, #100	@ 0x64
 8004fde:	d901      	bls.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004fe0:	2303      	movs	r3, #3
 8004fe2:	e0db      	b.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fe4:	4b70      	ldr	r3, [pc, #448]	@ (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d0f0      	beq.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004ff0:	4b6c      	ldr	r3, [pc, #432]	@ (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004ff2:	6a1b      	ldr	r3, [r3, #32]
 8004ff4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ff8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004ffa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d07d      	beq.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x198>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005008:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800500a:	429a      	cmp	r2, r3
 800500c:	d076      	beq.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800500e:	4b65      	ldr	r3, [pc, #404]	@ (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005010:	6a1b      	ldr	r3, [r3, #32]
 8005012:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005016:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005018:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800501c:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800501e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005020:	fa93 f3a3 	rbit	r3, r3
 8005024:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8005026:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005028:	fab3 f383 	clz	r3, r3
 800502c:	b2db      	uxtb	r3, r3
 800502e:	461a      	mov	r2, r3
 8005030:	4b5e      	ldr	r3, [pc, #376]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005032:	4413      	add	r3, r2
 8005034:	009b      	lsls	r3, r3, #2
 8005036:	461a      	mov	r2, r3
 8005038:	2301      	movs	r3, #1
 800503a:	6013      	str	r3, [r2, #0]
 800503c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005040:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005042:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005044:	fa93 f3a3 	rbit	r3, r3
 8005048:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800504a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800504c:	fab3 f383 	clz	r3, r3
 8005050:	b2db      	uxtb	r3, r3
 8005052:	461a      	mov	r2, r3
 8005054:	4b55      	ldr	r3, [pc, #340]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005056:	4413      	add	r3, r2
 8005058:	009b      	lsls	r3, r3, #2
 800505a:	461a      	mov	r2, r3
 800505c:	2300      	movs	r3, #0
 800505e:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005060:	4a50      	ldr	r2, [pc, #320]	@ (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005062:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005064:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005066:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005068:	f003 0301 	and.w	r3, r3, #1
 800506c:	2b00      	cmp	r3, #0
 800506e:	d045      	beq.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005070:	f7fd fa32 	bl	80024d8 <HAL_GetTick>
 8005074:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005076:	e00a      	b.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005078:	f7fd fa2e 	bl	80024d8 <HAL_GetTick>
 800507c:	4602      	mov	r2, r0
 800507e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005080:	1ad3      	subs	r3, r2, r3
 8005082:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005086:	4293      	cmp	r3, r2
 8005088:	d901      	bls.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800508a:	2303      	movs	r3, #3
 800508c:	e086      	b.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x238>
 800508e:	2302      	movs	r3, #2
 8005090:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005092:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005094:	fa93 f3a3 	rbit	r3, r3
 8005098:	627b      	str	r3, [r7, #36]	@ 0x24
 800509a:	2302      	movs	r3, #2
 800509c:	623b      	str	r3, [r7, #32]
 800509e:	6a3b      	ldr	r3, [r7, #32]
 80050a0:	fa93 f3a3 	rbit	r3, r3
 80050a4:	61fb      	str	r3, [r7, #28]
  return result;
 80050a6:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050a8:	fab3 f383 	clz	r3, r3
 80050ac:	b2db      	uxtb	r3, r3
 80050ae:	095b      	lsrs	r3, r3, #5
 80050b0:	b2db      	uxtb	r3, r3
 80050b2:	f043 0302 	orr.w	r3, r3, #2
 80050b6:	b2db      	uxtb	r3, r3
 80050b8:	2b02      	cmp	r3, #2
 80050ba:	d102      	bne.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80050bc:	4b39      	ldr	r3, [pc, #228]	@ (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80050be:	6a1b      	ldr	r3, [r3, #32]
 80050c0:	e007      	b.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80050c2:	2302      	movs	r3, #2
 80050c4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050c6:	69bb      	ldr	r3, [r7, #24]
 80050c8:	fa93 f3a3 	rbit	r3, r3
 80050cc:	617b      	str	r3, [r7, #20]
 80050ce:	4b35      	ldr	r3, [pc, #212]	@ (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80050d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050d2:	2202      	movs	r2, #2
 80050d4:	613a      	str	r2, [r7, #16]
 80050d6:	693a      	ldr	r2, [r7, #16]
 80050d8:	fa92 f2a2 	rbit	r2, r2
 80050dc:	60fa      	str	r2, [r7, #12]
  return result;
 80050de:	68fa      	ldr	r2, [r7, #12]
 80050e0:	fab2 f282 	clz	r2, r2
 80050e4:	b2d2      	uxtb	r2, r2
 80050e6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80050ea:	b2d2      	uxtb	r2, r2
 80050ec:	f002 021f 	and.w	r2, r2, #31
 80050f0:	2101      	movs	r1, #1
 80050f2:	fa01 f202 	lsl.w	r2, r1, r2
 80050f6:	4013      	ands	r3, r2
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d0bd      	beq.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80050fc:	4b29      	ldr	r3, [pc, #164]	@ (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80050fe:	6a1b      	ldr	r3, [r3, #32]
 8005100:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	4926      	ldr	r1, [pc, #152]	@ (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800510a:	4313      	orrs	r3, r2
 800510c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800510e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8005112:	2b01      	cmp	r3, #1
 8005114:	d105      	bne.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005116:	4b23      	ldr	r3, [pc, #140]	@ (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005118:	69db      	ldr	r3, [r3, #28]
 800511a:	4a22      	ldr	r2, [pc, #136]	@ (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800511c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005120:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f003 0301 	and.w	r3, r3, #1
 800512a:	2b00      	cmp	r3, #0
 800512c:	d008      	beq.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800512e:	4b1d      	ldr	r3, [pc, #116]	@ (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005132:	f023 0203 	bic.w	r2, r3, #3
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	491a      	ldr	r1, [pc, #104]	@ (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800513c:	4313      	orrs	r3, r2
 800513e:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f003 0320 	and.w	r3, r3, #32
 8005148:	2b00      	cmp	r3, #0
 800514a:	d008      	beq.n	800515e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800514c:	4b15      	ldr	r3, [pc, #84]	@ (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800514e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005150:	f023 0210 	bic.w	r2, r3, #16
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	68db      	ldr	r3, [r3, #12]
 8005158:	4912      	ldr	r1, [pc, #72]	@ (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800515a:	4313      	orrs	r3, r2
 800515c:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005166:	2b00      	cmp	r3, #0
 8005168:	d008      	beq.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800516a:	4b0e      	ldr	r3, [pc, #56]	@ (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800516c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800516e:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	691b      	ldr	r3, [r3, #16]
 8005176:	490b      	ldr	r1, [pc, #44]	@ (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005178:	4313      	orrs	r3, r2
 800517a:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005184:	2b00      	cmp	r3, #0
 8005186:	d008      	beq.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005188:	4b06      	ldr	r3, [pc, #24]	@ (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800518a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800518c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	695b      	ldr	r3, [r3, #20]
 8005194:	4903      	ldr	r1, [pc, #12]	@ (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005196:	4313      	orrs	r3, r2
 8005198:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800519a:	2300      	movs	r3, #0
}
 800519c:	4618      	mov	r0, r3
 800519e:	3748      	adds	r7, #72	@ 0x48
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}
 80051a4:	40021000 	.word	0x40021000
 80051a8:	40007000 	.word	0x40007000
 80051ac:	10908100 	.word	0x10908100

080051b0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b084      	sub	sp, #16
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d101      	bne.n	80051c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80051be:	2301      	movs	r3, #1
 80051c0:	e095      	b.n	80052ee <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d108      	bne.n	80051dc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80051d2:	d009      	beq.n	80051e8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2200      	movs	r2, #0
 80051d8:	61da      	str	r2, [r3, #28]
 80051da:	e005      	b.n	80051e8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2200      	movs	r2, #0
 80051e0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2200      	movs	r2, #0
 80051e6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2200      	movs	r2, #0
 80051ec:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80051f4:	b2db      	uxtb	r3, r3
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d106      	bne.n	8005208 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2200      	movs	r2, #0
 80051fe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f7fc fde0 	bl	8001dc8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2202      	movs	r2, #2
 800520c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	681a      	ldr	r2, [r3, #0]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800521e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	68db      	ldr	r3, [r3, #12]
 8005224:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005228:	d902      	bls.n	8005230 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800522a:	2300      	movs	r3, #0
 800522c:	60fb      	str	r3, [r7, #12]
 800522e:	e002      	b.n	8005236 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005230:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005234:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	68db      	ldr	r3, [r3, #12]
 800523a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800523e:	d007      	beq.n	8005250 <HAL_SPI_Init+0xa0>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	68db      	ldr	r3, [r3, #12]
 8005244:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005248:	d002      	beq.n	8005250 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2200      	movs	r2, #0
 800524e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005260:	431a      	orrs	r2, r3
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	691b      	ldr	r3, [r3, #16]
 8005266:	f003 0302 	and.w	r3, r3, #2
 800526a:	431a      	orrs	r2, r3
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	695b      	ldr	r3, [r3, #20]
 8005270:	f003 0301 	and.w	r3, r3, #1
 8005274:	431a      	orrs	r2, r3
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	699b      	ldr	r3, [r3, #24]
 800527a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800527e:	431a      	orrs	r2, r3
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	69db      	ldr	r3, [r3, #28]
 8005284:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005288:	431a      	orrs	r2, r3
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6a1b      	ldr	r3, [r3, #32]
 800528e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005292:	ea42 0103 	orr.w	r1, r2, r3
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800529a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	430a      	orrs	r2, r1
 80052a4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	699b      	ldr	r3, [r3, #24]
 80052aa:	0c1b      	lsrs	r3, r3, #16
 80052ac:	f003 0204 	and.w	r2, r3, #4
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052b4:	f003 0310 	and.w	r3, r3, #16
 80052b8:	431a      	orrs	r2, r3
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052be:	f003 0308 	and.w	r3, r3, #8
 80052c2:	431a      	orrs	r2, r3
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	68db      	ldr	r3, [r3, #12]
 80052c8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80052cc:	ea42 0103 	orr.w	r1, r2, r3
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	430a      	orrs	r2, r1
 80052dc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2200      	movs	r2, #0
 80052e2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2201      	movs	r2, #1
 80052e8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80052ec:	2300      	movs	r3, #0
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	3710      	adds	r7, #16
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}
	...

080052f8 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b086      	sub	sp, #24
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	60f8      	str	r0, [r7, #12]
 8005300:	60b9      	str	r1, [r7, #8]
 8005302:	4613      	mov	r3, r2
 8005304:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005306:	2300      	movs	r3, #0
 8005308:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005310:	2b01      	cmp	r3, #1
 8005312:	d101      	bne.n	8005318 <HAL_SPI_Transmit_DMA+0x20>
 8005314:	2302      	movs	r3, #2
 8005316:	e0d4      	b.n	80054c2 <HAL_SPI_Transmit_DMA+0x1ca>
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2201      	movs	r2, #1
 800531c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005326:	b2db      	uxtb	r3, r3
 8005328:	2b01      	cmp	r3, #1
 800532a:	d002      	beq.n	8005332 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800532c:	2302      	movs	r3, #2
 800532e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005330:	e0c2      	b.n	80054b8 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  if ((pData == NULL) || (Size == 0U))
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d002      	beq.n	800533e <HAL_SPI_Transmit_DMA+0x46>
 8005338:	88fb      	ldrh	r3, [r7, #6]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d102      	bne.n	8005344 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005342:	e0b9      	b.n	80054b8 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2203      	movs	r2, #3
 8005348:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2200      	movs	r2, #0
 8005350:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	68ba      	ldr	r2, [r7, #8]
 8005356:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	88fa      	ldrh	r2, [r7, #6]
 800535c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	88fa      	ldrh	r2, [r7, #6]
 8005362:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	2200      	movs	r2, #0
 8005368:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2200      	movs	r2, #0
 800536e:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2200      	movs	r2, #0
 8005374:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->RxXferSize  = 0U;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2200      	movs	r2, #0
 800537a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2200      	movs	r2, #0
 8005382:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800538e:	d10f      	bne.n	80053b0 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800539e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80053ae:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053b4:	4a45      	ldr	r2, [pc, #276]	@ (80054cc <HAL_SPI_Transmit_DMA+0x1d4>)
 80053b6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053bc:	4a44      	ldr	r2, [pc, #272]	@ (80054d0 <HAL_SPI_Transmit_DMA+0x1d8>)
 80053be:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053c4:	4a43      	ldr	r2, [pc, #268]	@ (80054d4 <HAL_SPI_Transmit_DMA+0x1dc>)
 80053c6:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053cc:	2200      	movs	r2, #0
 80053ce:	635a      	str	r2, [r3, #52]	@ 0x34

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	685a      	ldr	r2, [r3, #4]
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80053de:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	68db      	ldr	r3, [r3, #12]
 80053e4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80053e8:	d82d      	bhi.n	8005446 <HAL_SPI_Transmit_DMA+0x14e>
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053ee:	695b      	ldr	r3, [r3, #20]
 80053f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80053f4:	d127      	bne.n	8005446 <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80053fa:	b29b      	uxth	r3, r3
 80053fc:	f003 0301 	and.w	r3, r3, #1
 8005400:	2b00      	cmp	r3, #0
 8005402:	d10f      	bne.n	8005424 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	685a      	ldr	r2, [r3, #4]
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005412:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005418:	b29b      	uxth	r3, r3
 800541a:	085b      	lsrs	r3, r3, #1
 800541c:	b29a      	uxth	r2, r3
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005422:	e010      	b.n	8005446 <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	685a      	ldr	r2, [r3, #4]
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005432:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005438:	b29b      	uxth	r3, r3
 800543a:	085b      	lsrs	r3, r3, #1
 800543c:	b29b      	uxth	r3, r3
 800543e:	3301      	adds	r3, #1
 8005440:	b29a      	uxth	r2, r3
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800544e:	4619      	mov	r1, r3
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	330c      	adds	r3, #12
 8005456:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800545c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800545e:	f7fe f849 	bl	80034f4 <HAL_DMA_Start_IT>
 8005462:	4603      	mov	r3, r0
 8005464:	2b00      	cmp	r3, #0
 8005466:	d008      	beq.n	800547a <HAL_SPI_Transmit_DMA+0x182>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800546c:	f043 0210 	orr.w	r2, r3, #16
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	661a      	str	r2, [r3, #96]	@ 0x60
    errorcode = HAL_ERROR;
 8005474:	2301      	movs	r3, #1
 8005476:	75fb      	strb	r3, [r7, #23]

    goto error;
 8005478:	e01e      	b.n	80054b8 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005484:	2b40      	cmp	r3, #64	@ 0x40
 8005486:	d007      	beq.n	8005498 <HAL_SPI_Transmit_DMA+0x1a0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005496:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	685a      	ldr	r2, [r3, #4]
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f042 0220 	orr.w	r2, r2, #32
 80054a6:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	685a      	ldr	r2, [r3, #4]
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f042 0202 	orr.w	r2, r2, #2
 80054b6:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2200      	movs	r2, #0
 80054bc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80054c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	3718      	adds	r7, #24
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}
 80054ca:	bf00      	nop
 80054cc:	08005a23 	.word	0x08005a23
 80054d0:	08005845 	.word	0x08005845
 80054d4:	08005a77 	.word	0x08005a77

080054d8 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b086      	sub	sp, #24
 80054dc:	af00      	add	r7, sp, #0
 80054de:	60f8      	str	r0, [r7, #12]
 80054e0:	60b9      	str	r1, [r7, #8]
 80054e2:	607a      	str	r2, [r7, #4]
 80054e4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80054e6:	2300      	movs	r3, #0
 80054e8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d101      	bne.n	80054f8 <HAL_SPI_TransmitReceive_DMA+0x20>
 80054f4:	2302      	movs	r3, #2
 80054f6:	e164      	b.n	80057c2 <HAL_SPI_TransmitReceive_DMA+0x2ea>
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2201      	movs	r2, #1
 80054fc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005506:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800550e:	7dbb      	ldrb	r3, [r7, #22]
 8005510:	2b01      	cmp	r3, #1
 8005512:	d00d      	beq.n	8005530 <HAL_SPI_TransmitReceive_DMA+0x58>
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800551a:	d106      	bne.n	800552a <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d102      	bne.n	800552a <HAL_SPI_TransmitReceive_DMA+0x52>
 8005524:	7dbb      	ldrb	r3, [r7, #22]
 8005526:	2b04      	cmp	r3, #4
 8005528:	d002      	beq.n	8005530 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800552a:	2302      	movs	r3, #2
 800552c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800552e:	e143      	b.n	80057b8 <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d005      	beq.n	8005542 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d002      	beq.n	8005542 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800553c:	887b      	ldrh	r3, [r7, #2]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d102      	bne.n	8005548 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8005542:	2301      	movs	r3, #1
 8005544:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005546:	e137      	b.n	80057b8 <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800554e:	b2db      	uxtb	r3, r3
 8005550:	2b04      	cmp	r3, #4
 8005552:	d003      	beq.n	800555c <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2205      	movs	r2, #5
 8005558:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2200      	movs	r2, #0
 8005560:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	68ba      	ldr	r2, [r7, #8]
 8005566:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	887a      	ldrh	r2, [r7, #2]
 800556c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	887a      	ldrh	r2, [r7, #2]
 8005572:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	687a      	ldr	r2, [r7, #4]
 8005578:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	887a      	ldrh	r2, [r7, #2]
 800557e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	887a      	ldrh	r2, [r7, #2]
 8005586:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2200      	movs	r2, #0
 800558e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2200      	movs	r2, #0
 8005594:	651a      	str	r2, [r3, #80]	@ 0x50
    goto error;
  }
#endif /* STM32F302xC || STM32F303xC || STM32F373xC || STM32F358xx || STM32F378xx */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	685a      	ldr	r2, [r3, #4]
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f422 42c0 	bic.w	r2, r2, #24576	@ 0x6000
 80055a4:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	68db      	ldr	r3, [r3, #12]
 80055aa:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80055ae:	d908      	bls.n	80055c2 <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	685a      	ldr	r2, [r3, #4]
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80055be:	605a      	str	r2, [r3, #4]
 80055c0:	e06f      	b.n	80056a2 <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	685a      	ldr	r2, [r3, #4]
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80055d0:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055d6:	695b      	ldr	r3, [r3, #20]
 80055d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80055dc:	d126      	bne.n	800562c <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 80055e2:	f003 0301 	and.w	r3, r3, #1
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d10f      	bne.n	800560a <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	685a      	ldr	r2, [r3, #4]
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80055f8:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80055fe:	b29b      	uxth	r3, r3
 8005600:	085b      	lsrs	r3, r3, #1
 8005602:	b29a      	uxth	r2, r3
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005608:	e010      	b.n	800562c <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	685a      	ldr	r2, [r3, #4]
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005618:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800561e:	b29b      	uxth	r3, r3
 8005620:	085b      	lsrs	r3, r3, #1
 8005622:	b29b      	uxth	r3, r3
 8005624:	3301      	adds	r3, #1
 8005626:	b29a      	uxth	r2, r3
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005630:	695b      	ldr	r3, [r3, #20]
 8005632:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005636:	d134      	bne.n	80056a2 <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	685a      	ldr	r2, [r3, #4]
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005646:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800564e:	b29b      	uxth	r3, r3
 8005650:	f003 0301 	and.w	r3, r3, #1
 8005654:	2b00      	cmp	r3, #0
 8005656:	d111      	bne.n	800567c <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	685a      	ldr	r2, [r3, #4]
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005666:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800566e:	b29b      	uxth	r3, r3
 8005670:	085b      	lsrs	r3, r3, #1
 8005672:	b29a      	uxth	r2, r3
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800567a:	e012      	b.n	80056a2 <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	685a      	ldr	r2, [r3, #4]
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800568a:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005692:	b29b      	uxth	r3, r3
 8005694:	085b      	lsrs	r3, r3, #1
 8005696:	b29b      	uxth	r3, r3
 8005698:	3301      	adds	r3, #1
 800569a:	b29a      	uxth	r2, r3
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80056a8:	b2db      	uxtb	r3, r3
 80056aa:	2b04      	cmp	r3, #4
 80056ac:	d108      	bne.n	80056c0 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056b2:	4a46      	ldr	r2, [pc, #280]	@ (80057cc <HAL_SPI_TransmitReceive_DMA+0x2f4>)
 80056b4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056ba:	4a45      	ldr	r2, [pc, #276]	@ (80057d0 <HAL_SPI_TransmitReceive_DMA+0x2f8>)
 80056bc:	629a      	str	r2, [r3, #40]	@ 0x28
 80056be:	e007      	b.n	80056d0 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056c4:	4a43      	ldr	r2, [pc, #268]	@ (80057d4 <HAL_SPI_TransmitReceive_DMA+0x2fc>)
 80056c6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056cc:	4a42      	ldr	r2, [pc, #264]	@ (80057d8 <HAL_SPI_TransmitReceive_DMA+0x300>)
 80056ce:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056d4:	4a41      	ldr	r2, [pc, #260]	@ (80057dc <HAL_SPI_TransmitReceive_DMA+0x304>)
 80056d6:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056dc:	2200      	movs	r2, #0
 80056de:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	330c      	adds	r3, #12
 80056ea:	4619      	mov	r1, r3
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056f0:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80056f8:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80056fa:	f7fd fefb 	bl	80034f4 <HAL_DMA_Start_IT>
 80056fe:	4603      	mov	r3, r0
 8005700:	2b00      	cmp	r3, #0
 8005702:	d008      	beq.n	8005716 <HAL_SPI_TransmitReceive_DMA+0x23e>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005708:	f043 0210 	orr.w	r2, r3, #16
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	661a      	str	r2, [r3, #96]	@ 0x60
    errorcode = HAL_ERROR;
 8005710:	2301      	movs	r3, #1
 8005712:	75fb      	strb	r3, [r7, #23]

    goto error;
 8005714:	e050      	b.n	80057b8 <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	685a      	ldr	r2, [r3, #4]
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f042 0201 	orr.w	r2, r2, #1
 8005724:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800572a:	2200      	movs	r2, #0
 800572c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi->hdmatx->XferCpltCallback     = NULL;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005732:	2200      	movs	r2, #0
 8005734:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi->hdmatx->XferErrorCallback    = NULL;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800573a:	2200      	movs	r2, #0
 800573c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->hdmatx->XferAbortCallback    = NULL;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005742:	2200      	movs	r2, #0
 8005744:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800574e:	4619      	mov	r1, r3
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	330c      	adds	r3, #12
 8005756:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800575c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800575e:	f7fd fec9 	bl	80034f4 <HAL_DMA_Start_IT>
 8005762:	4603      	mov	r3, r0
 8005764:	2b00      	cmp	r3, #0
 8005766:	d008      	beq.n	800577a <HAL_SPI_TransmitReceive_DMA+0x2a2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800576c:	f043 0210 	orr.w	r2, r3, #16
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	661a      	str	r2, [r3, #96]	@ 0x60
    errorcode = HAL_ERROR;
 8005774:	2301      	movs	r3, #1
 8005776:	75fb      	strb	r3, [r7, #23]

    goto error;
 8005778:	e01e      	b.n	80057b8 <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005784:	2b40      	cmp	r3, #64	@ 0x40
 8005786:	d007      	beq.n	8005798 <HAL_SPI_TransmitReceive_DMA+0x2c0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	681a      	ldr	r2, [r3, #0]
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005796:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	685a      	ldr	r2, [r3, #4]
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f042 0220 	orr.w	r2, r2, #32
 80057a6:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	685a      	ldr	r2, [r3, #4]
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f042 0202 	orr.w	r2, r2, #2
 80057b6:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2200      	movs	r2, #0
 80057bc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80057c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3718      	adds	r7, #24
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}
 80057ca:	bf00      	nop
 80057cc:	08005a3f 	.word	0x08005a3f
 80057d0:	080058eb 	.word	0x080058eb
 80057d4:	08005a5b 	.word	0x08005a5b
 80057d8:	08005993 	.word	0x08005993
 80057dc:	08005a77 	.word	0x08005a77

080057e0 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b083      	sub	sp, #12
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80057e8:	bf00      	nop
 80057ea:	370c      	adds	r7, #12
 80057ec:	46bd      	mov	sp, r7
 80057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f2:	4770      	bx	lr

080057f4 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b083      	sub	sp, #12
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80057fc:	bf00      	nop
 80057fe:	370c      	adds	r7, #12
 8005800:	46bd      	mov	sp, r7
 8005802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005806:	4770      	bx	lr

08005808 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005808:	b480      	push	{r7}
 800580a:	b083      	sub	sp, #12
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8005810:	bf00      	nop
 8005812:	370c      	adds	r7, #12
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr

0800581c <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800581c:	b480      	push	{r7}
 800581e:	b083      	sub	sp, #12
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8005824:	bf00      	nop
 8005826:	370c      	adds	r7, #12
 8005828:	46bd      	mov	sp, r7
 800582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582e:	4770      	bx	lr

08005830 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005830:	b480      	push	{r7}
 8005832:	b083      	sub	sp, #12
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005838:	bf00      	nop
 800583a:	370c      	adds	r7, #12
 800583c:	46bd      	mov	sp, r7
 800583e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005842:	4770      	bx	lr

08005844 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b086      	sub	sp, #24
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005850:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005852:	f7fc fe41 	bl	80024d8 <HAL_GetTick>
 8005856:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f003 0320 	and.w	r3, r3, #32
 8005862:	2b20      	cmp	r3, #32
 8005864:	d03b      	beq.n	80058de <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	685a      	ldr	r2, [r3, #4]
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f022 0220 	bic.w	r2, r2, #32
 8005874:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	685a      	ldr	r2, [r3, #4]
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f022 0202 	bic.w	r2, r2, #2
 8005884:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005886:	693a      	ldr	r2, [r7, #16]
 8005888:	2164      	movs	r1, #100	@ 0x64
 800588a:	6978      	ldr	r0, [r7, #20]
 800588c:	f000 fa8a 	bl	8005da4 <SPI_EndRxTxTransaction>
 8005890:	4603      	mov	r3, r0
 8005892:	2b00      	cmp	r3, #0
 8005894:	d005      	beq.n	80058a2 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800589a:	f043 0220 	orr.w	r2, r3, #32
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d10a      	bne.n	80058c0 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80058aa:	2300      	movs	r3, #0
 80058ac:	60fb      	str	r3, [r7, #12]
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	68db      	ldr	r3, [r3, #12]
 80058b4:	60fb      	str	r3, [r7, #12]
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	689b      	ldr	r3, [r3, #8]
 80058bc:	60fb      	str	r3, [r7, #12]
 80058be:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	2200      	movs	r2, #0
 80058c4:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	2201      	movs	r2, #1
 80058ca:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d003      	beq.n	80058de <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80058d6:	6978      	ldr	r0, [r7, #20]
 80058d8:	f7ff ffaa 	bl	8005830 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80058dc:	e002      	b.n	80058e4 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80058de:	6978      	ldr	r0, [r7, #20]
 80058e0:	f7fb fa14 	bl	8000d0c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80058e4:	3718      	adds	r7, #24
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}

080058ea <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80058ea:	b580      	push	{r7, lr}
 80058ec:	b084      	sub	sp, #16
 80058ee:	af00      	add	r7, sp, #0
 80058f0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058f6:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80058f8:	f7fc fdee 	bl	80024d8 <HAL_GetTick>
 80058fc:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f003 0320 	and.w	r3, r3, #32
 8005908:	2b20      	cmp	r3, #32
 800590a:	d03c      	beq.n	8005986 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	685a      	ldr	r2, [r3, #4]
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f022 0220 	bic.w	r2, r2, #32
 800591a:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	689b      	ldr	r3, [r3, #8]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d10d      	bne.n	8005940 <SPI_DMAReceiveCplt+0x56>
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800592c:	d108      	bne.n	8005940 <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	685a      	ldr	r2, [r3, #4]
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f022 0203 	bic.w	r2, r2, #3
 800593c:	605a      	str	r2, [r3, #4]
 800593e:	e007      	b.n	8005950 <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	685a      	ldr	r2, [r3, #4]
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f022 0201 	bic.w	r2, r2, #1
 800594e:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005950:	68ba      	ldr	r2, [r7, #8]
 8005952:	2164      	movs	r1, #100	@ 0x64
 8005954:	68f8      	ldr	r0, [r7, #12]
 8005956:	f000 f9cd 	bl	8005cf4 <SPI_EndRxTransaction>
 800595a:	4603      	mov	r3, r0
 800595c:	2b00      	cmp	r3, #0
 800595e:	d002      	beq.n	8005966 <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2220      	movs	r2, #32
 8005964:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    hspi->RxXferCount = 0U;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	2200      	movs	r2, #0
 800596a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2201      	movs	r2, #1
 8005972:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800597a:	2b00      	cmp	r3, #0
 800597c:	d003      	beq.n	8005986 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800597e:	68f8      	ldr	r0, [r7, #12]
 8005980:	f7ff ff56 	bl	8005830 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005984:	e002      	b.n	800598c <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8005986:	68f8      	ldr	r0, [r7, #12]
 8005988:	f7ff ff2a 	bl	80057e0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800598c:	3710      	adds	r7, #16
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}

08005992 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005992:	b580      	push	{r7, lr}
 8005994:	b084      	sub	sp, #16
 8005996:	af00      	add	r7, sp, #0
 8005998:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800599e:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80059a0:	f7fc fd9a 	bl	80024d8 <HAL_GetTick>
 80059a4:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f003 0320 	and.w	r3, r3, #32
 80059b0:	2b20      	cmp	r3, #32
 80059b2:	d030      	beq.n	8005a16 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	685a      	ldr	r2, [r3, #4]
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f022 0220 	bic.w	r2, r2, #32
 80059c2:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80059c4:	68ba      	ldr	r2, [r7, #8]
 80059c6:	2164      	movs	r1, #100	@ 0x64
 80059c8:	68f8      	ldr	r0, [r7, #12]
 80059ca:	f000 f9eb 	bl	8005da4 <SPI_EndRxTxTransaction>
 80059ce:	4603      	mov	r3, r0
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d005      	beq.n	80059e0 <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059d8:	f043 0220 	orr.w	r2, r3, #32
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	685a      	ldr	r2, [r3, #4]
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f022 0203 	bic.w	r2, r2, #3
 80059ee:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2200      	movs	r2, #0
 80059f4:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->RxXferCount = 0U;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2200      	movs	r2, #0
 80059fa:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2201      	movs	r2, #1
 8005a02:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d003      	beq.n	8005a16 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005a0e:	68f8      	ldr	r0, [r7, #12]
 8005a10:	f7ff ff0e 	bl	8005830 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005a14:	e002      	b.n	8005a1c <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8005a16:	68f8      	ldr	r0, [r7, #12]
 8005a18:	f7fb f964 	bl	8000ce4 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005a1c:	3710      	adds	r7, #16
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}

08005a22 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005a22:	b580      	push	{r7, lr}
 8005a24:	b084      	sub	sp, #16
 8005a26:	af00      	add	r7, sp, #0
 8005a28:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a2e:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8005a30:	68f8      	ldr	r0, [r7, #12]
 8005a32:	f7ff fedf 	bl	80057f4 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005a36:	bf00      	nop
 8005a38:	3710      	adds	r7, #16
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}

08005a3e <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005a3e:	b580      	push	{r7, lr}
 8005a40:	b084      	sub	sp, #16
 8005a42:	af00      	add	r7, sp, #0
 8005a44:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a4a:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8005a4c:	68f8      	ldr	r0, [r7, #12]
 8005a4e:	f7ff fedb 	bl	8005808 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005a52:	bf00      	nop
 8005a54:	3710      	adds	r7, #16
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd80      	pop	{r7, pc}

08005a5a <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005a5a:	b580      	push	{r7, lr}
 8005a5c:	b084      	sub	sp, #16
 8005a5e:	af00      	add	r7, sp, #0
 8005a60:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a66:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8005a68:	68f8      	ldr	r0, [r7, #12]
 8005a6a:	f7ff fed7 	bl	800581c <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005a6e:	bf00      	nop
 8005a70:	3710      	adds	r7, #16
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}

08005a76 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005a76:	b580      	push	{r7, lr}
 8005a78:	b084      	sub	sp, #16
 8005a7a:	af00      	add	r7, sp, #0
 8005a7c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a82:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	685a      	ldr	r2, [r3, #4]
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f022 0203 	bic.w	r2, r2, #3
 8005a92:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a98:	f043 0210 	orr.w	r2, r3, #16
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005aa8:	68f8      	ldr	r0, [r7, #12]
 8005aaa:	f7ff fec1 	bl	8005830 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005aae:	bf00      	nop
 8005ab0:	3710      	adds	r7, #16
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}
	...

08005ab8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b088      	sub	sp, #32
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	60f8      	str	r0, [r7, #12]
 8005ac0:	60b9      	str	r1, [r7, #8]
 8005ac2:	603b      	str	r3, [r7, #0]
 8005ac4:	4613      	mov	r3, r2
 8005ac6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005ac8:	f7fc fd06 	bl	80024d8 <HAL_GetTick>
 8005acc:	4602      	mov	r2, r0
 8005ace:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ad0:	1a9b      	subs	r3, r3, r2
 8005ad2:	683a      	ldr	r2, [r7, #0]
 8005ad4:	4413      	add	r3, r2
 8005ad6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005ad8:	f7fc fcfe 	bl	80024d8 <HAL_GetTick>
 8005adc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005ade:	4b39      	ldr	r3, [pc, #228]	@ (8005bc4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	015b      	lsls	r3, r3, #5
 8005ae4:	0d1b      	lsrs	r3, r3, #20
 8005ae6:	69fa      	ldr	r2, [r7, #28]
 8005ae8:	fb02 f303 	mul.w	r3, r2, r3
 8005aec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005aee:	e054      	b.n	8005b9a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005af6:	d050      	beq.n	8005b9a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005af8:	f7fc fcee 	bl	80024d8 <HAL_GetTick>
 8005afc:	4602      	mov	r2, r0
 8005afe:	69bb      	ldr	r3, [r7, #24]
 8005b00:	1ad3      	subs	r3, r2, r3
 8005b02:	69fa      	ldr	r2, [r7, #28]
 8005b04:	429a      	cmp	r2, r3
 8005b06:	d902      	bls.n	8005b0e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005b08:	69fb      	ldr	r3, [r7, #28]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d13d      	bne.n	8005b8a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	685a      	ldr	r2, [r3, #4]
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005b1c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005b26:	d111      	bne.n	8005b4c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	689b      	ldr	r3, [r3, #8]
 8005b2c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b30:	d004      	beq.n	8005b3c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	689b      	ldr	r3, [r3, #8]
 8005b36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b3a:	d107      	bne.n	8005b4c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	681a      	ldr	r2, [r3, #0]
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005b4a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b50:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b54:	d10f      	bne.n	8005b76 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	681a      	ldr	r2, [r3, #0]
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005b64:	601a      	str	r2, [r3, #0]
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005b74:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2201      	movs	r2, #1
 8005b7a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2200      	movs	r2, #0
 8005b82:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005b86:	2303      	movs	r3, #3
 8005b88:	e017      	b.n	8005bba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d101      	bne.n	8005b94 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005b90:	2300      	movs	r3, #0
 8005b92:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	3b01      	subs	r3, #1
 8005b98:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	689a      	ldr	r2, [r3, #8]
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	4013      	ands	r3, r2
 8005ba4:	68ba      	ldr	r2, [r7, #8]
 8005ba6:	429a      	cmp	r2, r3
 8005ba8:	bf0c      	ite	eq
 8005baa:	2301      	moveq	r3, #1
 8005bac:	2300      	movne	r3, #0
 8005bae:	b2db      	uxtb	r3, r3
 8005bb0:	461a      	mov	r2, r3
 8005bb2:	79fb      	ldrb	r3, [r7, #7]
 8005bb4:	429a      	cmp	r2, r3
 8005bb6:	d19b      	bne.n	8005af0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005bb8:	2300      	movs	r3, #0
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3720      	adds	r7, #32
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}
 8005bc2:	bf00      	nop
 8005bc4:	20000000 	.word	0x20000000

08005bc8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b08a      	sub	sp, #40	@ 0x28
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	60f8      	str	r0, [r7, #12]
 8005bd0:	60b9      	str	r1, [r7, #8]
 8005bd2:	607a      	str	r2, [r7, #4]
 8005bd4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005bda:	f7fc fc7d 	bl	80024d8 <HAL_GetTick>
 8005bde:	4602      	mov	r2, r0
 8005be0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005be2:	1a9b      	subs	r3, r3, r2
 8005be4:	683a      	ldr	r2, [r7, #0]
 8005be6:	4413      	add	r3, r2
 8005be8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8005bea:	f7fc fc75 	bl	80024d8 <HAL_GetTick>
 8005bee:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	330c      	adds	r3, #12
 8005bf6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005bf8:	4b3d      	ldr	r3, [pc, #244]	@ (8005cf0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005bfa:	681a      	ldr	r2, [r3, #0]
 8005bfc:	4613      	mov	r3, r2
 8005bfe:	009b      	lsls	r3, r3, #2
 8005c00:	4413      	add	r3, r2
 8005c02:	00da      	lsls	r2, r3, #3
 8005c04:	1ad3      	subs	r3, r2, r3
 8005c06:	0d1b      	lsrs	r3, r3, #20
 8005c08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c0a:	fb02 f303 	mul.w	r3, r2, r3
 8005c0e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005c10:	e060      	b.n	8005cd4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005c18:	d107      	bne.n	8005c2a <SPI_WaitFifoStateUntilTimeout+0x62>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d104      	bne.n	8005c2a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005c20:	69fb      	ldr	r3, [r7, #28]
 8005c22:	781b      	ldrb	r3, [r3, #0]
 8005c24:	b2db      	uxtb	r3, r3
 8005c26:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005c28:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c30:	d050      	beq.n	8005cd4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005c32:	f7fc fc51 	bl	80024d8 <HAL_GetTick>
 8005c36:	4602      	mov	r2, r0
 8005c38:	6a3b      	ldr	r3, [r7, #32]
 8005c3a:	1ad3      	subs	r3, r2, r3
 8005c3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	d902      	bls.n	8005c48 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d13d      	bne.n	8005cc4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	685a      	ldr	r2, [r3, #4]
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005c56:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005c60:	d111      	bne.n	8005c86 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	689b      	ldr	r3, [r3, #8]
 8005c66:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c6a:	d004      	beq.n	8005c76 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c74:	d107      	bne.n	8005c86 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	681a      	ldr	r2, [r3, #0]
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005c84:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c8e:	d10f      	bne.n	8005cb0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	681a      	ldr	r2, [r3, #0]
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005c9e:	601a      	str	r2, [r3, #0]
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	681a      	ldr	r2, [r3, #0]
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005cae:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005cc0:	2303      	movs	r3, #3
 8005cc2:	e010      	b.n	8005ce6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005cc4:	69bb      	ldr	r3, [r7, #24]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d101      	bne.n	8005cce <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8005cce:	69bb      	ldr	r3, [r7, #24]
 8005cd0:	3b01      	subs	r3, #1
 8005cd2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	689a      	ldr	r2, [r3, #8]
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	4013      	ands	r3, r2
 8005cde:	687a      	ldr	r2, [r7, #4]
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	d196      	bne.n	8005c12 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005ce4:	2300      	movs	r3, #0
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	3728      	adds	r7, #40	@ 0x28
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}
 8005cee:	bf00      	nop
 8005cf0:	20000000 	.word	0x20000000

08005cf4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b086      	sub	sp, #24
 8005cf8:	af02      	add	r7, sp, #8
 8005cfa:	60f8      	str	r0, [r7, #12]
 8005cfc:	60b9      	str	r1, [r7, #8]
 8005cfe:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005d08:	d111      	bne.n	8005d2e <SPI_EndRxTransaction+0x3a>
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	689b      	ldr	r3, [r3, #8]
 8005d0e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d12:	d004      	beq.n	8005d1e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	689b      	ldr	r3, [r3, #8]
 8005d18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d1c:	d107      	bne.n	8005d2e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005d2c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	9300      	str	r3, [sp, #0]
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	2200      	movs	r2, #0
 8005d36:	2180      	movs	r1, #128	@ 0x80
 8005d38:	68f8      	ldr	r0, [r7, #12]
 8005d3a:	f7ff febd 	bl	8005ab8 <SPI_WaitFlagStateUntilTimeout>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d007      	beq.n	8005d54 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d48:	f043 0220 	orr.w	r2, r3, #32
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005d50:	2303      	movs	r3, #3
 8005d52:	e023      	b.n	8005d9c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005d5c:	d11d      	bne.n	8005d9a <SPI_EndRxTransaction+0xa6>
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	689b      	ldr	r3, [r3, #8]
 8005d62:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d66:	d004      	beq.n	8005d72 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	689b      	ldr	r3, [r3, #8]
 8005d6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d70:	d113      	bne.n	8005d9a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	9300      	str	r3, [sp, #0]
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8005d7e:	68f8      	ldr	r0, [r7, #12]
 8005d80:	f7ff ff22 	bl	8005bc8 <SPI_WaitFifoStateUntilTimeout>
 8005d84:	4603      	mov	r3, r0
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d007      	beq.n	8005d9a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d8e:	f043 0220 	orr.w	r2, r3, #32
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8005d96:	2303      	movs	r3, #3
 8005d98:	e000      	b.n	8005d9c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8005d9a:	2300      	movs	r3, #0
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	3710      	adds	r7, #16
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd80      	pop	{r7, pc}

08005da4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b086      	sub	sp, #24
 8005da8:	af02      	add	r7, sp, #8
 8005daa:	60f8      	str	r0, [r7, #12]
 8005dac:	60b9      	str	r1, [r7, #8]
 8005dae:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	9300      	str	r3, [sp, #0]
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	2200      	movs	r2, #0
 8005db8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8005dbc:	68f8      	ldr	r0, [r7, #12]
 8005dbe:	f7ff ff03 	bl	8005bc8 <SPI_WaitFifoStateUntilTimeout>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d007      	beq.n	8005dd8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005dcc:	f043 0220 	orr.w	r2, r3, #32
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005dd4:	2303      	movs	r3, #3
 8005dd6:	e027      	b.n	8005e28 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	9300      	str	r3, [sp, #0]
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	2200      	movs	r2, #0
 8005de0:	2180      	movs	r1, #128	@ 0x80
 8005de2:	68f8      	ldr	r0, [r7, #12]
 8005de4:	f7ff fe68 	bl	8005ab8 <SPI_WaitFlagStateUntilTimeout>
 8005de8:	4603      	mov	r3, r0
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d007      	beq.n	8005dfe <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005df2:	f043 0220 	orr.w	r2, r3, #32
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005dfa:	2303      	movs	r3, #3
 8005dfc:	e014      	b.n	8005e28 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	9300      	str	r3, [sp, #0]
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	2200      	movs	r2, #0
 8005e06:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8005e0a:	68f8      	ldr	r0, [r7, #12]
 8005e0c:	f7ff fedc 	bl	8005bc8 <SPI_WaitFifoStateUntilTimeout>
 8005e10:	4603      	mov	r3, r0
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d007      	beq.n	8005e26 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e1a:	f043 0220 	orr.w	r2, r3, #32
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005e22:	2303      	movs	r3, #3
 8005e24:	e000      	b.n	8005e28 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005e26:	2300      	movs	r3, #0
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3710      	adds	r7, #16
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}

08005e30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b082      	sub	sp, #8
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d101      	bne.n	8005e42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	e049      	b.n	8005ed6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e48:	b2db      	uxtb	r3, r3
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d106      	bne.n	8005e5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2200      	movs	r2, #0
 8005e52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f7fc f8de 	bl	8002018 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2202      	movs	r2, #2
 8005e60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681a      	ldr	r2, [r3, #0]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	3304      	adds	r3, #4
 8005e6c:	4619      	mov	r1, r3
 8005e6e:	4610      	mov	r0, r2
 8005e70:	f000 fd48 	bl	8006904 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2201      	movs	r2, #1
 8005e78:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2201      	movs	r2, #1
 8005e80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2201      	movs	r2, #1
 8005e88:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2201      	movs	r2, #1
 8005e90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2201      	movs	r2, #1
 8005e98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2201      	movs	r2, #1
 8005eb0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2201      	movs	r2, #1
 8005ed0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005ed4:	2300      	movs	r3, #0
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	3708      	adds	r7, #8
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}
	...

08005ee0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b085      	sub	sp, #20
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005eee:	b2db      	uxtb	r3, r3
 8005ef0:	2b01      	cmp	r3, #1
 8005ef2:	d001      	beq.n	8005ef8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	e040      	b.n	8005f7a <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2202      	movs	r2, #2
 8005efc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	68da      	ldr	r2, [r3, #12]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f042 0201 	orr.w	r2, r2, #1
 8005f0e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a1c      	ldr	r2, [pc, #112]	@ (8005f88 <HAL_TIM_Base_Start_IT+0xa8>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d00e      	beq.n	8005f38 <HAL_TIM_Base_Start_IT+0x58>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f22:	d009      	beq.n	8005f38 <HAL_TIM_Base_Start_IT+0x58>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a18      	ldr	r2, [pc, #96]	@ (8005f8c <HAL_TIM_Base_Start_IT+0xac>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d004      	beq.n	8005f38 <HAL_TIM_Base_Start_IT+0x58>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a17      	ldr	r2, [pc, #92]	@ (8005f90 <HAL_TIM_Base_Start_IT+0xb0>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d115      	bne.n	8005f64 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	689a      	ldr	r2, [r3, #8]
 8005f3e:	4b15      	ldr	r3, [pc, #84]	@ (8005f94 <HAL_TIM_Base_Start_IT+0xb4>)
 8005f40:	4013      	ands	r3, r2
 8005f42:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2b06      	cmp	r3, #6
 8005f48:	d015      	beq.n	8005f76 <HAL_TIM_Base_Start_IT+0x96>
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f50:	d011      	beq.n	8005f76 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	681a      	ldr	r2, [r3, #0]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f042 0201 	orr.w	r2, r2, #1
 8005f60:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f62:	e008      	b.n	8005f76 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	681a      	ldr	r2, [r3, #0]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f042 0201 	orr.w	r2, r2, #1
 8005f72:	601a      	str	r2, [r3, #0]
 8005f74:	e000      	b.n	8005f78 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f76:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005f78:	2300      	movs	r3, #0
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3714      	adds	r7, #20
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f84:	4770      	bx	lr
 8005f86:	bf00      	nop
 8005f88:	40012c00 	.word	0x40012c00
 8005f8c:	40000400 	.word	0x40000400
 8005f90:	40014000 	.word	0x40014000
 8005f94:	00010007 	.word	0x00010007

08005f98 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b082      	sub	sp, #8
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d101      	bne.n	8005faa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	e049      	b.n	800603e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005fb0:	b2db      	uxtb	r3, r3
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d106      	bne.n	8005fc4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f7fb ff98 	bl	8001ef4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2202      	movs	r2, #2
 8005fc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681a      	ldr	r2, [r3, #0]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	3304      	adds	r3, #4
 8005fd4:	4619      	mov	r1, r3
 8005fd6:	4610      	mov	r0, r2
 8005fd8:	f000 fc94 	bl	8006904 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2201      	movs	r2, #1
 8005fe0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2201      	movs	r2, #1
 8005ff0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2201      	movs	r2, #1
 8006000:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2201      	movs	r2, #1
 8006008:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2201      	movs	r2, #1
 8006010:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2201      	movs	r2, #1
 8006018:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2201      	movs	r2, #1
 8006020:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2201      	movs	r2, #1
 8006028:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2201      	movs	r2, #1
 8006030:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2201      	movs	r2, #1
 8006038:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800603c:	2300      	movs	r3, #0
}
 800603e:	4618      	mov	r0, r3
 8006040:	3708      	adds	r7, #8
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}
	...

08006048 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b084      	sub	sp, #16
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
 8006050:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d109      	bne.n	800606c <HAL_TIM_PWM_Start+0x24>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800605e:	b2db      	uxtb	r3, r3
 8006060:	2b01      	cmp	r3, #1
 8006062:	bf14      	ite	ne
 8006064:	2301      	movne	r3, #1
 8006066:	2300      	moveq	r3, #0
 8006068:	b2db      	uxtb	r3, r3
 800606a:	e03c      	b.n	80060e6 <HAL_TIM_PWM_Start+0x9e>
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	2b04      	cmp	r3, #4
 8006070:	d109      	bne.n	8006086 <HAL_TIM_PWM_Start+0x3e>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006078:	b2db      	uxtb	r3, r3
 800607a:	2b01      	cmp	r3, #1
 800607c:	bf14      	ite	ne
 800607e:	2301      	movne	r3, #1
 8006080:	2300      	moveq	r3, #0
 8006082:	b2db      	uxtb	r3, r3
 8006084:	e02f      	b.n	80060e6 <HAL_TIM_PWM_Start+0x9e>
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	2b08      	cmp	r3, #8
 800608a:	d109      	bne.n	80060a0 <HAL_TIM_PWM_Start+0x58>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006092:	b2db      	uxtb	r3, r3
 8006094:	2b01      	cmp	r3, #1
 8006096:	bf14      	ite	ne
 8006098:	2301      	movne	r3, #1
 800609a:	2300      	moveq	r3, #0
 800609c:	b2db      	uxtb	r3, r3
 800609e:	e022      	b.n	80060e6 <HAL_TIM_PWM_Start+0x9e>
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	2b0c      	cmp	r3, #12
 80060a4:	d109      	bne.n	80060ba <HAL_TIM_PWM_Start+0x72>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80060ac:	b2db      	uxtb	r3, r3
 80060ae:	2b01      	cmp	r3, #1
 80060b0:	bf14      	ite	ne
 80060b2:	2301      	movne	r3, #1
 80060b4:	2300      	moveq	r3, #0
 80060b6:	b2db      	uxtb	r3, r3
 80060b8:	e015      	b.n	80060e6 <HAL_TIM_PWM_Start+0x9e>
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	2b10      	cmp	r3, #16
 80060be:	d109      	bne.n	80060d4 <HAL_TIM_PWM_Start+0x8c>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80060c6:	b2db      	uxtb	r3, r3
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	bf14      	ite	ne
 80060cc:	2301      	movne	r3, #1
 80060ce:	2300      	moveq	r3, #0
 80060d0:	b2db      	uxtb	r3, r3
 80060d2:	e008      	b.n	80060e6 <HAL_TIM_PWM_Start+0x9e>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80060da:	b2db      	uxtb	r3, r3
 80060dc:	2b01      	cmp	r3, #1
 80060de:	bf14      	ite	ne
 80060e0:	2301      	movne	r3, #1
 80060e2:	2300      	moveq	r3, #0
 80060e4:	b2db      	uxtb	r3, r3
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d001      	beq.n	80060ee <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80060ea:	2301      	movs	r3, #1
 80060ec:	e088      	b.n	8006200 <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d104      	bne.n	80060fe <HAL_TIM_PWM_Start+0xb6>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2202      	movs	r2, #2
 80060f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80060fc:	e023      	b.n	8006146 <HAL_TIM_PWM_Start+0xfe>
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	2b04      	cmp	r3, #4
 8006102:	d104      	bne.n	800610e <HAL_TIM_PWM_Start+0xc6>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2202      	movs	r2, #2
 8006108:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800610c:	e01b      	b.n	8006146 <HAL_TIM_PWM_Start+0xfe>
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	2b08      	cmp	r3, #8
 8006112:	d104      	bne.n	800611e <HAL_TIM_PWM_Start+0xd6>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2202      	movs	r2, #2
 8006118:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800611c:	e013      	b.n	8006146 <HAL_TIM_PWM_Start+0xfe>
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	2b0c      	cmp	r3, #12
 8006122:	d104      	bne.n	800612e <HAL_TIM_PWM_Start+0xe6>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2202      	movs	r2, #2
 8006128:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800612c:	e00b      	b.n	8006146 <HAL_TIM_PWM_Start+0xfe>
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	2b10      	cmp	r3, #16
 8006132:	d104      	bne.n	800613e <HAL_TIM_PWM_Start+0xf6>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2202      	movs	r2, #2
 8006138:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800613c:	e003      	b.n	8006146 <HAL_TIM_PWM_Start+0xfe>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2202      	movs	r2, #2
 8006142:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	2201      	movs	r2, #1
 800614c:	6839      	ldr	r1, [r7, #0]
 800614e:	4618      	mov	r0, r3
 8006150:	f000 ff02 	bl	8006f58 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a2b      	ldr	r2, [pc, #172]	@ (8006208 <HAL_TIM_PWM_Start+0x1c0>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d00e      	beq.n	800617c <HAL_TIM_PWM_Start+0x134>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a2a      	ldr	r2, [pc, #168]	@ (800620c <HAL_TIM_PWM_Start+0x1c4>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d009      	beq.n	800617c <HAL_TIM_PWM_Start+0x134>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a28      	ldr	r2, [pc, #160]	@ (8006210 <HAL_TIM_PWM_Start+0x1c8>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d004      	beq.n	800617c <HAL_TIM_PWM_Start+0x134>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a27      	ldr	r2, [pc, #156]	@ (8006214 <HAL_TIM_PWM_Start+0x1cc>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d101      	bne.n	8006180 <HAL_TIM_PWM_Start+0x138>
 800617c:	2301      	movs	r3, #1
 800617e:	e000      	b.n	8006182 <HAL_TIM_PWM_Start+0x13a>
 8006180:	2300      	movs	r3, #0
 8006182:	2b00      	cmp	r3, #0
 8006184:	d007      	beq.n	8006196 <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006194:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a1b      	ldr	r2, [pc, #108]	@ (8006208 <HAL_TIM_PWM_Start+0x1c0>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d00e      	beq.n	80061be <HAL_TIM_PWM_Start+0x176>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061a8:	d009      	beq.n	80061be <HAL_TIM_PWM_Start+0x176>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a1a      	ldr	r2, [pc, #104]	@ (8006218 <HAL_TIM_PWM_Start+0x1d0>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d004      	beq.n	80061be <HAL_TIM_PWM_Start+0x176>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a14      	ldr	r2, [pc, #80]	@ (800620c <HAL_TIM_PWM_Start+0x1c4>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d115      	bne.n	80061ea <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	689a      	ldr	r2, [r3, #8]
 80061c4:	4b15      	ldr	r3, [pc, #84]	@ (800621c <HAL_TIM_PWM_Start+0x1d4>)
 80061c6:	4013      	ands	r3, r2
 80061c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2b06      	cmp	r3, #6
 80061ce:	d015      	beq.n	80061fc <HAL_TIM_PWM_Start+0x1b4>
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80061d6:	d011      	beq.n	80061fc <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	681a      	ldr	r2, [r3, #0]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f042 0201 	orr.w	r2, r2, #1
 80061e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061e8:	e008      	b.n	80061fc <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	681a      	ldr	r2, [r3, #0]
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f042 0201 	orr.w	r2, r2, #1
 80061f8:	601a      	str	r2, [r3, #0]
 80061fa:	e000      	b.n	80061fe <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061fc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80061fe:	2300      	movs	r3, #0
}
 8006200:	4618      	mov	r0, r3
 8006202:	3710      	adds	r7, #16
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}
 8006208:	40012c00 	.word	0x40012c00
 800620c:	40014000 	.word	0x40014000
 8006210:	40014400 	.word	0x40014400
 8006214:	40014800 	.word	0x40014800
 8006218:	40000400 	.word	0x40000400
 800621c:	00010007 	.word	0x00010007

08006220 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b086      	sub	sp, #24
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
 8006228:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d101      	bne.n	8006234 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006230:	2301      	movs	r3, #1
 8006232:	e097      	b.n	8006364 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800623a:	b2db      	uxtb	r3, r3
 800623c:	2b00      	cmp	r3, #0
 800623e:	d106      	bne.n	800624e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2200      	movs	r2, #0
 8006244:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f7fb fe73 	bl	8001f34 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2202      	movs	r2, #2
 8006252:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	689b      	ldr	r3, [r3, #8]
 800625c:	687a      	ldr	r2, [r7, #4]
 800625e:	6812      	ldr	r2, [r2, #0]
 8006260:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8006264:	f023 0307 	bic.w	r3, r3, #7
 8006268:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681a      	ldr	r2, [r3, #0]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	3304      	adds	r3, #4
 8006272:	4619      	mov	r1, r3
 8006274:	4610      	mov	r0, r2
 8006276:	f000 fb45 	bl	8006904 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	689b      	ldr	r3, [r3, #8]
 8006280:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	699b      	ldr	r3, [r3, #24]
 8006288:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	6a1b      	ldr	r3, [r3, #32]
 8006290:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	697a      	ldr	r2, [r7, #20]
 8006298:	4313      	orrs	r3, r2
 800629a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800629c:	693b      	ldr	r3, [r7, #16]
 800629e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80062a2:	f023 0303 	bic.w	r3, r3, #3
 80062a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	689a      	ldr	r2, [r3, #8]
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	699b      	ldr	r3, [r3, #24]
 80062b0:	021b      	lsls	r3, r3, #8
 80062b2:	4313      	orrs	r3, r2
 80062b4:	693a      	ldr	r2, [r7, #16]
 80062b6:	4313      	orrs	r3, r2
 80062b8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80062c0:	f023 030c 	bic.w	r3, r3, #12
 80062c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80062c6:	693b      	ldr	r3, [r7, #16]
 80062c8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80062cc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80062d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	68da      	ldr	r2, [r3, #12]
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	69db      	ldr	r3, [r3, #28]
 80062da:	021b      	lsls	r3, r3, #8
 80062dc:	4313      	orrs	r3, r2
 80062de:	693a      	ldr	r2, [r7, #16]
 80062e0:	4313      	orrs	r3, r2
 80062e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	691b      	ldr	r3, [r3, #16]
 80062e8:	011a      	lsls	r2, r3, #4
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	6a1b      	ldr	r3, [r3, #32]
 80062ee:	031b      	lsls	r3, r3, #12
 80062f0:	4313      	orrs	r3, r2
 80062f2:	693a      	ldr	r2, [r7, #16]
 80062f4:	4313      	orrs	r3, r2
 80062f6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80062fe:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8006306:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	685a      	ldr	r2, [r3, #4]
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	695b      	ldr	r3, [r3, #20]
 8006310:	011b      	lsls	r3, r3, #4
 8006312:	4313      	orrs	r3, r2
 8006314:	68fa      	ldr	r2, [r7, #12]
 8006316:	4313      	orrs	r3, r2
 8006318:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	697a      	ldr	r2, [r7, #20]
 8006320:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	693a      	ldr	r2, [r7, #16]
 8006328:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	68fa      	ldr	r2, [r7, #12]
 8006330:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2201      	movs	r2, #1
 8006336:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2201      	movs	r2, #1
 800633e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2201      	movs	r2, #1
 8006346:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2201      	movs	r2, #1
 800634e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2201      	movs	r2, #1
 8006356:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2201      	movs	r2, #1
 800635e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006362:	2300      	movs	r3, #0
}
 8006364:	4618      	mov	r0, r3
 8006366:	3718      	adds	r7, #24
 8006368:	46bd      	mov	sp, r7
 800636a:	bd80      	pop	{r7, pc}

0800636c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b084      	sub	sp, #16
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
 8006374:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800637c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006384:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800638c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006394:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d110      	bne.n	80063be <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800639c:	7bfb      	ldrb	r3, [r7, #15]
 800639e:	2b01      	cmp	r3, #1
 80063a0:	d102      	bne.n	80063a8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80063a2:	7b7b      	ldrb	r3, [r7, #13]
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	d001      	beq.n	80063ac <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80063a8:	2301      	movs	r3, #1
 80063aa:	e069      	b.n	8006480 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2202      	movs	r2, #2
 80063b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2202      	movs	r2, #2
 80063b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80063bc:	e031      	b.n	8006422 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	2b04      	cmp	r3, #4
 80063c2:	d110      	bne.n	80063e6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80063c4:	7bbb      	ldrb	r3, [r7, #14]
 80063c6:	2b01      	cmp	r3, #1
 80063c8:	d102      	bne.n	80063d0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80063ca:	7b3b      	ldrb	r3, [r7, #12]
 80063cc:	2b01      	cmp	r3, #1
 80063ce:	d001      	beq.n	80063d4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80063d0:	2301      	movs	r3, #1
 80063d2:	e055      	b.n	8006480 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2202      	movs	r2, #2
 80063d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2202      	movs	r2, #2
 80063e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80063e4:	e01d      	b.n	8006422 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80063e6:	7bfb      	ldrb	r3, [r7, #15]
 80063e8:	2b01      	cmp	r3, #1
 80063ea:	d108      	bne.n	80063fe <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80063ec:	7bbb      	ldrb	r3, [r7, #14]
 80063ee:	2b01      	cmp	r3, #1
 80063f0:	d105      	bne.n	80063fe <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80063f2:	7b7b      	ldrb	r3, [r7, #13]
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	d102      	bne.n	80063fe <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80063f8:	7b3b      	ldrb	r3, [r7, #12]
 80063fa:	2b01      	cmp	r3, #1
 80063fc:	d001      	beq.n	8006402 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80063fe:	2301      	movs	r3, #1
 8006400:	e03e      	b.n	8006480 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2202      	movs	r2, #2
 8006406:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2202      	movs	r2, #2
 800640e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2202      	movs	r2, #2
 8006416:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2202      	movs	r2, #2
 800641e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d003      	beq.n	8006430 <HAL_TIM_Encoder_Start+0xc4>
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	2b04      	cmp	r3, #4
 800642c:	d008      	beq.n	8006440 <HAL_TIM_Encoder_Start+0xd4>
 800642e:	e00f      	b.n	8006450 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	2201      	movs	r2, #1
 8006436:	2100      	movs	r1, #0
 8006438:	4618      	mov	r0, r3
 800643a:	f000 fd8d 	bl	8006f58 <TIM_CCxChannelCmd>
      break;
 800643e:	e016      	b.n	800646e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	2201      	movs	r2, #1
 8006446:	2104      	movs	r1, #4
 8006448:	4618      	mov	r0, r3
 800644a:	f000 fd85 	bl	8006f58 <TIM_CCxChannelCmd>
      break;
 800644e:	e00e      	b.n	800646e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	2201      	movs	r2, #1
 8006456:	2100      	movs	r1, #0
 8006458:	4618      	mov	r0, r3
 800645a:	f000 fd7d 	bl	8006f58 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	2201      	movs	r2, #1
 8006464:	2104      	movs	r1, #4
 8006466:	4618      	mov	r0, r3
 8006468:	f000 fd76 	bl	8006f58 <TIM_CCxChannelCmd>
      break;
 800646c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	681a      	ldr	r2, [r3, #0]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f042 0201 	orr.w	r2, r2, #1
 800647c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800647e:	2300      	movs	r3, #0
}
 8006480:	4618      	mov	r0, r3
 8006482:	3710      	adds	r7, #16
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}

08006488 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b084      	sub	sp, #16
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	68db      	ldr	r3, [r3, #12]
 8006496:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	691b      	ldr	r3, [r3, #16]
 800649e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	f003 0302 	and.w	r3, r3, #2
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d020      	beq.n	80064ec <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	f003 0302 	and.w	r3, r3, #2
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d01b      	beq.n	80064ec <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f06f 0202 	mvn.w	r2, #2
 80064bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2201      	movs	r2, #1
 80064c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	699b      	ldr	r3, [r3, #24]
 80064ca:	f003 0303 	and.w	r3, r3, #3
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d003      	beq.n	80064da <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f000 f9f8 	bl	80068c8 <HAL_TIM_IC_CaptureCallback>
 80064d8:	e005      	b.n	80064e6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f000 f9ea 	bl	80068b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f000 f9fb 	bl	80068dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2200      	movs	r2, #0
 80064ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	f003 0304 	and.w	r3, r3, #4
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d020      	beq.n	8006538 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	f003 0304 	and.w	r3, r3, #4
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d01b      	beq.n	8006538 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f06f 0204 	mvn.w	r2, #4
 8006508:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2202      	movs	r2, #2
 800650e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	699b      	ldr	r3, [r3, #24]
 8006516:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800651a:	2b00      	cmp	r3, #0
 800651c:	d003      	beq.n	8006526 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f000 f9d2 	bl	80068c8 <HAL_TIM_IC_CaptureCallback>
 8006524:	e005      	b.n	8006532 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f000 f9c4 	bl	80068b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f000 f9d5 	bl	80068dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2200      	movs	r2, #0
 8006536:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	f003 0308 	and.w	r3, r3, #8
 800653e:	2b00      	cmp	r3, #0
 8006540:	d020      	beq.n	8006584 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	f003 0308 	and.w	r3, r3, #8
 8006548:	2b00      	cmp	r3, #0
 800654a:	d01b      	beq.n	8006584 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f06f 0208 	mvn.w	r2, #8
 8006554:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2204      	movs	r2, #4
 800655a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	69db      	ldr	r3, [r3, #28]
 8006562:	f003 0303 	and.w	r3, r3, #3
 8006566:	2b00      	cmp	r3, #0
 8006568:	d003      	beq.n	8006572 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f000 f9ac 	bl	80068c8 <HAL_TIM_IC_CaptureCallback>
 8006570:	e005      	b.n	800657e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f000 f99e 	bl	80068b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f000 f9af 	bl	80068dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2200      	movs	r2, #0
 8006582:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	f003 0310 	and.w	r3, r3, #16
 800658a:	2b00      	cmp	r3, #0
 800658c:	d020      	beq.n	80065d0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	f003 0310 	and.w	r3, r3, #16
 8006594:	2b00      	cmp	r3, #0
 8006596:	d01b      	beq.n	80065d0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f06f 0210 	mvn.w	r2, #16
 80065a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2208      	movs	r2, #8
 80065a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	69db      	ldr	r3, [r3, #28]
 80065ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d003      	beq.n	80065be <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f000 f986 	bl	80068c8 <HAL_TIM_IC_CaptureCallback>
 80065bc:	e005      	b.n	80065ca <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f000 f978 	bl	80068b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f000 f989 	bl	80068dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2200      	movs	r2, #0
 80065ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	f003 0301 	and.w	r3, r3, #1
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d00c      	beq.n	80065f4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	f003 0301 	and.w	r3, r3, #1
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d007      	beq.n	80065f4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f06f 0201 	mvn.w	r2, #1
 80065ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f7fa fc60 	bl	8000eb4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d00c      	beq.n	8006618 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006604:	2b00      	cmp	r3, #0
 8006606:	d007      	beq.n	8006618 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006610:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f000 fdb6 	bl	8007184 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800661e:	2b00      	cmp	r3, #0
 8006620:	d00c      	beq.n	800663c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006628:	2b00      	cmp	r3, #0
 800662a:	d007      	beq.n	800663c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006634:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f000 fdae 	bl	8007198 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006642:	2b00      	cmp	r3, #0
 8006644:	d00c      	beq.n	8006660 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800664c:	2b00      	cmp	r3, #0
 800664e:	d007      	beq.n	8006660 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006658:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f000 f948 	bl	80068f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	f003 0320 	and.w	r3, r3, #32
 8006666:	2b00      	cmp	r3, #0
 8006668:	d00c      	beq.n	8006684 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	f003 0320 	and.w	r3, r3, #32
 8006670:	2b00      	cmp	r3, #0
 8006672:	d007      	beq.n	8006684 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f06f 0220 	mvn.w	r2, #32
 800667c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f000 fd76 	bl	8007170 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006684:	bf00      	nop
 8006686:	3710      	adds	r7, #16
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}

0800668c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b086      	sub	sp, #24
 8006690:	af00      	add	r7, sp, #0
 8006692:	60f8      	str	r0, [r7, #12]
 8006694:	60b9      	str	r1, [r7, #8]
 8006696:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006698:	2300      	movs	r3, #0
 800669a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80066a2:	2b01      	cmp	r3, #1
 80066a4:	d101      	bne.n	80066aa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80066a6:	2302      	movs	r3, #2
 80066a8:	e0ff      	b.n	80068aa <HAL_TIM_PWM_ConfigChannel+0x21e>
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	2201      	movs	r2, #1
 80066ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2b14      	cmp	r3, #20
 80066b6:	f200 80f0 	bhi.w	800689a <HAL_TIM_PWM_ConfigChannel+0x20e>
 80066ba:	a201      	add	r2, pc, #4	@ (adr r2, 80066c0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80066bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066c0:	08006715 	.word	0x08006715
 80066c4:	0800689b 	.word	0x0800689b
 80066c8:	0800689b 	.word	0x0800689b
 80066cc:	0800689b 	.word	0x0800689b
 80066d0:	08006755 	.word	0x08006755
 80066d4:	0800689b 	.word	0x0800689b
 80066d8:	0800689b 	.word	0x0800689b
 80066dc:	0800689b 	.word	0x0800689b
 80066e0:	08006797 	.word	0x08006797
 80066e4:	0800689b 	.word	0x0800689b
 80066e8:	0800689b 	.word	0x0800689b
 80066ec:	0800689b 	.word	0x0800689b
 80066f0:	080067d7 	.word	0x080067d7
 80066f4:	0800689b 	.word	0x0800689b
 80066f8:	0800689b 	.word	0x0800689b
 80066fc:	0800689b 	.word	0x0800689b
 8006700:	08006819 	.word	0x08006819
 8006704:	0800689b 	.word	0x0800689b
 8006708:	0800689b 	.word	0x0800689b
 800670c:	0800689b 	.word	0x0800689b
 8006710:	08006859 	.word	0x08006859
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	68b9      	ldr	r1, [r7, #8]
 800671a:	4618      	mov	r0, r3
 800671c:	f000 f976 	bl	8006a0c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	699a      	ldr	r2, [r3, #24]
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f042 0208 	orr.w	r2, r2, #8
 800672e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	699a      	ldr	r2, [r3, #24]
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f022 0204 	bic.w	r2, r2, #4
 800673e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	6999      	ldr	r1, [r3, #24]
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	691a      	ldr	r2, [r3, #16]
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	430a      	orrs	r2, r1
 8006750:	619a      	str	r2, [r3, #24]
      break;
 8006752:	e0a5      	b.n	80068a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	68b9      	ldr	r1, [r7, #8]
 800675a:	4618      	mov	r0, r3
 800675c:	f000 f9dc 	bl	8006b18 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	699a      	ldr	r2, [r3, #24]
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800676e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	699a      	ldr	r2, [r3, #24]
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800677e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	6999      	ldr	r1, [r3, #24]
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	691b      	ldr	r3, [r3, #16]
 800678a:	021a      	lsls	r2, r3, #8
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	430a      	orrs	r2, r1
 8006792:	619a      	str	r2, [r3, #24]
      break;
 8006794:	e084      	b.n	80068a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	68b9      	ldr	r1, [r7, #8]
 800679c:	4618      	mov	r0, r3
 800679e:	f000 fa3b 	bl	8006c18 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	69da      	ldr	r2, [r3, #28]
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f042 0208 	orr.w	r2, r2, #8
 80067b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	69da      	ldr	r2, [r3, #28]
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f022 0204 	bic.w	r2, r2, #4
 80067c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	69d9      	ldr	r1, [r3, #28]
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	691a      	ldr	r2, [r3, #16]
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	430a      	orrs	r2, r1
 80067d2:	61da      	str	r2, [r3, #28]
      break;
 80067d4:	e064      	b.n	80068a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	68b9      	ldr	r1, [r7, #8]
 80067dc:	4618      	mov	r0, r3
 80067de:	f000 fa99 	bl	8006d14 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	69da      	ldr	r2, [r3, #28]
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80067f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	69da      	ldr	r2, [r3, #28]
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006800:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	69d9      	ldr	r1, [r3, #28]
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	691b      	ldr	r3, [r3, #16]
 800680c:	021a      	lsls	r2, r3, #8
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	430a      	orrs	r2, r1
 8006814:	61da      	str	r2, [r3, #28]
      break;
 8006816:	e043      	b.n	80068a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	68b9      	ldr	r1, [r7, #8]
 800681e:	4618      	mov	r0, r3
 8006820:	f000 fadc 	bl	8006ddc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f042 0208 	orr.w	r2, r2, #8
 8006832:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f022 0204 	bic.w	r2, r2, #4
 8006842:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	691a      	ldr	r2, [r3, #16]
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	430a      	orrs	r2, r1
 8006854:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006856:	e023      	b.n	80068a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	68b9      	ldr	r1, [r7, #8]
 800685e:	4618      	mov	r0, r3
 8006860:	f000 fb1a 	bl	8006e98 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006872:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006882:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	691b      	ldr	r3, [r3, #16]
 800688e:	021a      	lsls	r2, r3, #8
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	430a      	orrs	r2, r1
 8006896:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006898:	e002      	b.n	80068a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800689a:	2301      	movs	r3, #1
 800689c:	75fb      	strb	r3, [r7, #23]
      break;
 800689e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	2200      	movs	r2, #0
 80068a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80068a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3718      	adds	r7, #24
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}
 80068b2:	bf00      	nop

080068b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b083      	sub	sp, #12
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80068bc:	bf00      	nop
 80068be:	370c      	adds	r7, #12
 80068c0:	46bd      	mov	sp, r7
 80068c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c6:	4770      	bx	lr

080068c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80068c8:	b480      	push	{r7}
 80068ca:	b083      	sub	sp, #12
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80068d0:	bf00      	nop
 80068d2:	370c      	adds	r7, #12
 80068d4:	46bd      	mov	sp, r7
 80068d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068da:	4770      	bx	lr

080068dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80068dc:	b480      	push	{r7}
 80068de:	b083      	sub	sp, #12
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80068e4:	bf00      	nop
 80068e6:	370c      	adds	r7, #12
 80068e8:	46bd      	mov	sp, r7
 80068ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ee:	4770      	bx	lr

080068f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80068f0:	b480      	push	{r7}
 80068f2:	b083      	sub	sp, #12
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80068f8:	bf00      	nop
 80068fa:	370c      	adds	r7, #12
 80068fc:	46bd      	mov	sp, r7
 80068fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006902:	4770      	bx	lr

08006904 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006904:	b480      	push	{r7}
 8006906:	b085      	sub	sp, #20
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
 800690c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	4a38      	ldr	r2, [pc, #224]	@ (80069f8 <TIM_Base_SetConfig+0xf4>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d007      	beq.n	800692c <TIM_Base_SetConfig+0x28>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006922:	d003      	beq.n	800692c <TIM_Base_SetConfig+0x28>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	4a35      	ldr	r2, [pc, #212]	@ (80069fc <TIM_Base_SetConfig+0xf8>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d108      	bne.n	800693e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006932:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	685b      	ldr	r3, [r3, #4]
 8006938:	68fa      	ldr	r2, [r7, #12]
 800693a:	4313      	orrs	r3, r2
 800693c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	4a2d      	ldr	r2, [pc, #180]	@ (80069f8 <TIM_Base_SetConfig+0xf4>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d013      	beq.n	800696e <TIM_Base_SetConfig+0x6a>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800694c:	d00f      	beq.n	800696e <TIM_Base_SetConfig+0x6a>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	4a2a      	ldr	r2, [pc, #168]	@ (80069fc <TIM_Base_SetConfig+0xf8>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d00b      	beq.n	800696e <TIM_Base_SetConfig+0x6a>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	4a29      	ldr	r2, [pc, #164]	@ (8006a00 <TIM_Base_SetConfig+0xfc>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d007      	beq.n	800696e <TIM_Base_SetConfig+0x6a>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	4a28      	ldr	r2, [pc, #160]	@ (8006a04 <TIM_Base_SetConfig+0x100>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d003      	beq.n	800696e <TIM_Base_SetConfig+0x6a>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	4a27      	ldr	r2, [pc, #156]	@ (8006a08 <TIM_Base_SetConfig+0x104>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d108      	bne.n	8006980 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006974:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	68db      	ldr	r3, [r3, #12]
 800697a:	68fa      	ldr	r2, [r7, #12]
 800697c:	4313      	orrs	r3, r2
 800697e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	695b      	ldr	r3, [r3, #20]
 800698a:	4313      	orrs	r3, r2
 800698c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	68fa      	ldr	r2, [r7, #12]
 8006992:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	689a      	ldr	r2, [r3, #8]
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	681a      	ldr	r2, [r3, #0]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	4a14      	ldr	r2, [pc, #80]	@ (80069f8 <TIM_Base_SetConfig+0xf4>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d00b      	beq.n	80069c4 <TIM_Base_SetConfig+0xc0>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	4a14      	ldr	r2, [pc, #80]	@ (8006a00 <TIM_Base_SetConfig+0xfc>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d007      	beq.n	80069c4 <TIM_Base_SetConfig+0xc0>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	4a13      	ldr	r2, [pc, #76]	@ (8006a04 <TIM_Base_SetConfig+0x100>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d003      	beq.n	80069c4 <TIM_Base_SetConfig+0xc0>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	4a12      	ldr	r2, [pc, #72]	@ (8006a08 <TIM_Base_SetConfig+0x104>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d103      	bne.n	80069cc <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	691a      	ldr	r2, [r3, #16]
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2201      	movs	r2, #1
 80069d0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	691b      	ldr	r3, [r3, #16]
 80069d6:	f003 0301 	and.w	r3, r3, #1
 80069da:	2b01      	cmp	r3, #1
 80069dc:	d105      	bne.n	80069ea <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	691b      	ldr	r3, [r3, #16]
 80069e2:	f023 0201 	bic.w	r2, r3, #1
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	611a      	str	r2, [r3, #16]
  }
}
 80069ea:	bf00      	nop
 80069ec:	3714      	adds	r7, #20
 80069ee:	46bd      	mov	sp, r7
 80069f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f4:	4770      	bx	lr
 80069f6:	bf00      	nop
 80069f8:	40012c00 	.word	0x40012c00
 80069fc:	40000400 	.word	0x40000400
 8006a00:	40014000 	.word	0x40014000
 8006a04:	40014400 	.word	0x40014400
 8006a08:	40014800 	.word	0x40014800

08006a0c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b087      	sub	sp, #28
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
 8006a14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6a1b      	ldr	r3, [r3, #32]
 8006a1a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6a1b      	ldr	r3, [r3, #32]
 8006a20:	f023 0201 	bic.w	r2, r3, #1
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	699b      	ldr	r3, [r3, #24]
 8006a32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006a3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	f023 0303 	bic.w	r3, r3, #3
 8006a46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	68fa      	ldr	r2, [r7, #12]
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	f023 0302 	bic.w	r3, r3, #2
 8006a58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	689b      	ldr	r3, [r3, #8]
 8006a5e:	697a      	ldr	r2, [r7, #20]
 8006a60:	4313      	orrs	r3, r2
 8006a62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	4a28      	ldr	r2, [pc, #160]	@ (8006b08 <TIM_OC1_SetConfig+0xfc>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d00b      	beq.n	8006a84 <TIM_OC1_SetConfig+0x78>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	4a27      	ldr	r2, [pc, #156]	@ (8006b0c <TIM_OC1_SetConfig+0x100>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d007      	beq.n	8006a84 <TIM_OC1_SetConfig+0x78>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	4a26      	ldr	r2, [pc, #152]	@ (8006b10 <TIM_OC1_SetConfig+0x104>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d003      	beq.n	8006a84 <TIM_OC1_SetConfig+0x78>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	4a25      	ldr	r2, [pc, #148]	@ (8006b14 <TIM_OC1_SetConfig+0x108>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d10c      	bne.n	8006a9e <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	f023 0308 	bic.w	r3, r3, #8
 8006a8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	68db      	ldr	r3, [r3, #12]
 8006a90:	697a      	ldr	r2, [r7, #20]
 8006a92:	4313      	orrs	r3, r2
 8006a94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	f023 0304 	bic.w	r3, r3, #4
 8006a9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	4a19      	ldr	r2, [pc, #100]	@ (8006b08 <TIM_OC1_SetConfig+0xfc>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d00b      	beq.n	8006abe <TIM_OC1_SetConfig+0xb2>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	4a18      	ldr	r2, [pc, #96]	@ (8006b0c <TIM_OC1_SetConfig+0x100>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d007      	beq.n	8006abe <TIM_OC1_SetConfig+0xb2>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	4a17      	ldr	r2, [pc, #92]	@ (8006b10 <TIM_OC1_SetConfig+0x104>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d003      	beq.n	8006abe <TIM_OC1_SetConfig+0xb2>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	4a16      	ldr	r2, [pc, #88]	@ (8006b14 <TIM_OC1_SetConfig+0x108>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d111      	bne.n	8006ae2 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006abe:	693b      	ldr	r3, [r7, #16]
 8006ac0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006ac4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006ac6:	693b      	ldr	r3, [r7, #16]
 8006ac8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006acc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	695b      	ldr	r3, [r3, #20]
 8006ad2:	693a      	ldr	r2, [r7, #16]
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	699b      	ldr	r3, [r3, #24]
 8006adc:	693a      	ldr	r2, [r7, #16]
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	693a      	ldr	r2, [r7, #16]
 8006ae6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	68fa      	ldr	r2, [r7, #12]
 8006aec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	685a      	ldr	r2, [r3, #4]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	697a      	ldr	r2, [r7, #20]
 8006afa:	621a      	str	r2, [r3, #32]
}
 8006afc:	bf00      	nop
 8006afe:	371c      	adds	r7, #28
 8006b00:	46bd      	mov	sp, r7
 8006b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b06:	4770      	bx	lr
 8006b08:	40012c00 	.word	0x40012c00
 8006b0c:	40014000 	.word	0x40014000
 8006b10:	40014400 	.word	0x40014400
 8006b14:	40014800 	.word	0x40014800

08006b18 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b087      	sub	sp, #28
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
 8006b20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6a1b      	ldr	r3, [r3, #32]
 8006b26:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6a1b      	ldr	r3, [r3, #32]
 8006b2c:	f023 0210 	bic.w	r2, r3, #16
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	699b      	ldr	r3, [r3, #24]
 8006b3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006b46:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006b52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	021b      	lsls	r3, r3, #8
 8006b5a:	68fa      	ldr	r2, [r7, #12]
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	f023 0320 	bic.w	r3, r3, #32
 8006b66:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	689b      	ldr	r3, [r3, #8]
 8006b6c:	011b      	lsls	r3, r3, #4
 8006b6e:	697a      	ldr	r2, [r7, #20]
 8006b70:	4313      	orrs	r3, r2
 8006b72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	4a24      	ldr	r2, [pc, #144]	@ (8006c08 <TIM_OC2_SetConfig+0xf0>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d10d      	bne.n	8006b98 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006b7c:	697b      	ldr	r3, [r7, #20]
 8006b7e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006b82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	68db      	ldr	r3, [r3, #12]
 8006b88:	011b      	lsls	r3, r3, #4
 8006b8a:	697a      	ldr	r2, [r7, #20]
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006b90:	697b      	ldr	r3, [r7, #20]
 8006b92:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b96:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	4a1b      	ldr	r2, [pc, #108]	@ (8006c08 <TIM_OC2_SetConfig+0xf0>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d00b      	beq.n	8006bb8 <TIM_OC2_SetConfig+0xa0>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	4a1a      	ldr	r2, [pc, #104]	@ (8006c0c <TIM_OC2_SetConfig+0xf4>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d007      	beq.n	8006bb8 <TIM_OC2_SetConfig+0xa0>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	4a19      	ldr	r2, [pc, #100]	@ (8006c10 <TIM_OC2_SetConfig+0xf8>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d003      	beq.n	8006bb8 <TIM_OC2_SetConfig+0xa0>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	4a18      	ldr	r2, [pc, #96]	@ (8006c14 <TIM_OC2_SetConfig+0xfc>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d113      	bne.n	8006be0 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006bb8:	693b      	ldr	r3, [r7, #16]
 8006bba:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006bbe:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006bc6:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	695b      	ldr	r3, [r3, #20]
 8006bcc:	009b      	lsls	r3, r3, #2
 8006bce:	693a      	ldr	r2, [r7, #16]
 8006bd0:	4313      	orrs	r3, r2
 8006bd2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	699b      	ldr	r3, [r3, #24]
 8006bd8:	009b      	lsls	r3, r3, #2
 8006bda:	693a      	ldr	r2, [r7, #16]
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	693a      	ldr	r2, [r7, #16]
 8006be4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	68fa      	ldr	r2, [r7, #12]
 8006bea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	685a      	ldr	r2, [r3, #4]
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	697a      	ldr	r2, [r7, #20]
 8006bf8:	621a      	str	r2, [r3, #32]
}
 8006bfa:	bf00      	nop
 8006bfc:	371c      	adds	r7, #28
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c04:	4770      	bx	lr
 8006c06:	bf00      	nop
 8006c08:	40012c00 	.word	0x40012c00
 8006c0c:	40014000 	.word	0x40014000
 8006c10:	40014400 	.word	0x40014400
 8006c14:	40014800 	.word	0x40014800

08006c18 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b087      	sub	sp, #28
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
 8006c20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6a1b      	ldr	r3, [r3, #32]
 8006c26:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6a1b      	ldr	r3, [r3, #32]
 8006c2c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	685b      	ldr	r3, [r3, #4]
 8006c38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	69db      	ldr	r3, [r3, #28]
 8006c3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006c46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	f023 0303 	bic.w	r3, r3, #3
 8006c52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	68fa      	ldr	r2, [r7, #12]
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006c5e:	697b      	ldr	r3, [r7, #20]
 8006c60:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006c64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	689b      	ldr	r3, [r3, #8]
 8006c6a:	021b      	lsls	r3, r3, #8
 8006c6c:	697a      	ldr	r2, [r7, #20]
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	4a23      	ldr	r2, [pc, #140]	@ (8006d04 <TIM_OC3_SetConfig+0xec>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d10d      	bne.n	8006c96 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006c7a:	697b      	ldr	r3, [r7, #20]
 8006c7c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006c80:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	68db      	ldr	r3, [r3, #12]
 8006c86:	021b      	lsls	r3, r3, #8
 8006c88:	697a      	ldr	r2, [r7, #20]
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006c8e:	697b      	ldr	r3, [r7, #20]
 8006c90:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006c94:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	4a1a      	ldr	r2, [pc, #104]	@ (8006d04 <TIM_OC3_SetConfig+0xec>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d00b      	beq.n	8006cb6 <TIM_OC3_SetConfig+0x9e>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	4a19      	ldr	r2, [pc, #100]	@ (8006d08 <TIM_OC3_SetConfig+0xf0>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d007      	beq.n	8006cb6 <TIM_OC3_SetConfig+0x9e>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	4a18      	ldr	r2, [pc, #96]	@ (8006d0c <TIM_OC3_SetConfig+0xf4>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d003      	beq.n	8006cb6 <TIM_OC3_SetConfig+0x9e>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	4a17      	ldr	r2, [pc, #92]	@ (8006d10 <TIM_OC3_SetConfig+0xf8>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d113      	bne.n	8006cde <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006cb6:	693b      	ldr	r3, [r7, #16]
 8006cb8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006cbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006cbe:	693b      	ldr	r3, [r7, #16]
 8006cc0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006cc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	695b      	ldr	r3, [r3, #20]
 8006cca:	011b      	lsls	r3, r3, #4
 8006ccc:	693a      	ldr	r2, [r7, #16]
 8006cce:	4313      	orrs	r3, r2
 8006cd0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	699b      	ldr	r3, [r3, #24]
 8006cd6:	011b      	lsls	r3, r3, #4
 8006cd8:	693a      	ldr	r2, [r7, #16]
 8006cda:	4313      	orrs	r3, r2
 8006cdc:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	693a      	ldr	r2, [r7, #16]
 8006ce2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	68fa      	ldr	r2, [r7, #12]
 8006ce8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	685a      	ldr	r2, [r3, #4]
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	697a      	ldr	r2, [r7, #20]
 8006cf6:	621a      	str	r2, [r3, #32]
}
 8006cf8:	bf00      	nop
 8006cfa:	371c      	adds	r7, #28
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d02:	4770      	bx	lr
 8006d04:	40012c00 	.word	0x40012c00
 8006d08:	40014000 	.word	0x40014000
 8006d0c:	40014400 	.word	0x40014400
 8006d10:	40014800 	.word	0x40014800

08006d14 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b087      	sub	sp, #28
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
 8006d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6a1b      	ldr	r3, [r3, #32]
 8006d22:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6a1b      	ldr	r3, [r3, #32]
 8006d28:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	685b      	ldr	r3, [r3, #4]
 8006d34:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	69db      	ldr	r3, [r3, #28]
 8006d3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006d42:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	021b      	lsls	r3, r3, #8
 8006d56:	68fa      	ldr	r2, [r7, #12]
 8006d58:	4313      	orrs	r3, r2
 8006d5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006d5c:	693b      	ldr	r3, [r7, #16]
 8006d5e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006d62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	689b      	ldr	r3, [r3, #8]
 8006d68:	031b      	lsls	r3, r3, #12
 8006d6a:	693a      	ldr	r2, [r7, #16]
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	4a16      	ldr	r2, [pc, #88]	@ (8006dcc <TIM_OC4_SetConfig+0xb8>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d00b      	beq.n	8006d90 <TIM_OC4_SetConfig+0x7c>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	4a15      	ldr	r2, [pc, #84]	@ (8006dd0 <TIM_OC4_SetConfig+0xbc>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d007      	beq.n	8006d90 <TIM_OC4_SetConfig+0x7c>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	4a14      	ldr	r2, [pc, #80]	@ (8006dd4 <TIM_OC4_SetConfig+0xc0>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d003      	beq.n	8006d90 <TIM_OC4_SetConfig+0x7c>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	4a13      	ldr	r2, [pc, #76]	@ (8006dd8 <TIM_OC4_SetConfig+0xc4>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d109      	bne.n	8006da4 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006d96:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	695b      	ldr	r3, [r3, #20]
 8006d9c:	019b      	lsls	r3, r3, #6
 8006d9e:	697a      	ldr	r2, [r7, #20]
 8006da0:	4313      	orrs	r3, r2
 8006da2:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	697a      	ldr	r2, [r7, #20]
 8006da8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	68fa      	ldr	r2, [r7, #12]
 8006dae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	685a      	ldr	r2, [r3, #4]
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	693a      	ldr	r2, [r7, #16]
 8006dbc:	621a      	str	r2, [r3, #32]
}
 8006dbe:	bf00      	nop
 8006dc0:	371c      	adds	r7, #28
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc8:	4770      	bx	lr
 8006dca:	bf00      	nop
 8006dcc:	40012c00 	.word	0x40012c00
 8006dd0:	40014000 	.word	0x40014000
 8006dd4:	40014400 	.word	0x40014400
 8006dd8:	40014800 	.word	0x40014800

08006ddc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006ddc:	b480      	push	{r7}
 8006dde:	b087      	sub	sp, #28
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
 8006de4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6a1b      	ldr	r3, [r3, #32]
 8006dea:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6a1b      	ldr	r3, [r3, #32]
 8006df0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	685b      	ldr	r3, [r3, #4]
 8006dfc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006e0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	68fa      	ldr	r2, [r7, #12]
 8006e16:	4313      	orrs	r3, r2
 8006e18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006e20:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	689b      	ldr	r3, [r3, #8]
 8006e26:	041b      	lsls	r3, r3, #16
 8006e28:	693a      	ldr	r2, [r7, #16]
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	4a15      	ldr	r2, [pc, #84]	@ (8006e88 <TIM_OC5_SetConfig+0xac>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d00b      	beq.n	8006e4e <TIM_OC5_SetConfig+0x72>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	4a14      	ldr	r2, [pc, #80]	@ (8006e8c <TIM_OC5_SetConfig+0xb0>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d007      	beq.n	8006e4e <TIM_OC5_SetConfig+0x72>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	4a13      	ldr	r2, [pc, #76]	@ (8006e90 <TIM_OC5_SetConfig+0xb4>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d003      	beq.n	8006e4e <TIM_OC5_SetConfig+0x72>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	4a12      	ldr	r2, [pc, #72]	@ (8006e94 <TIM_OC5_SetConfig+0xb8>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d109      	bne.n	8006e62 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006e54:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	695b      	ldr	r3, [r3, #20]
 8006e5a:	021b      	lsls	r3, r3, #8
 8006e5c:	697a      	ldr	r2, [r7, #20]
 8006e5e:	4313      	orrs	r3, r2
 8006e60:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	697a      	ldr	r2, [r7, #20]
 8006e66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	68fa      	ldr	r2, [r7, #12]
 8006e6c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	685a      	ldr	r2, [r3, #4]
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	693a      	ldr	r2, [r7, #16]
 8006e7a:	621a      	str	r2, [r3, #32]
}
 8006e7c:	bf00      	nop
 8006e7e:	371c      	adds	r7, #28
 8006e80:	46bd      	mov	sp, r7
 8006e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e86:	4770      	bx	lr
 8006e88:	40012c00 	.word	0x40012c00
 8006e8c:	40014000 	.word	0x40014000
 8006e90:	40014400 	.word	0x40014400
 8006e94:	40014800 	.word	0x40014800

08006e98 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b087      	sub	sp, #28
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
 8006ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6a1b      	ldr	r3, [r3, #32]
 8006ea6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6a1b      	ldr	r3, [r3, #32]
 8006eac:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	685b      	ldr	r3, [r3, #4]
 8006eb8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ebe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006ec6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006eca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	021b      	lsls	r3, r3, #8
 8006ed2:	68fa      	ldr	r2, [r7, #12]
 8006ed4:	4313      	orrs	r3, r2
 8006ed6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006ed8:	693b      	ldr	r3, [r7, #16]
 8006eda:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006ede:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	689b      	ldr	r3, [r3, #8]
 8006ee4:	051b      	lsls	r3, r3, #20
 8006ee6:	693a      	ldr	r2, [r7, #16]
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	4a16      	ldr	r2, [pc, #88]	@ (8006f48 <TIM_OC6_SetConfig+0xb0>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d00b      	beq.n	8006f0c <TIM_OC6_SetConfig+0x74>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	4a15      	ldr	r2, [pc, #84]	@ (8006f4c <TIM_OC6_SetConfig+0xb4>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d007      	beq.n	8006f0c <TIM_OC6_SetConfig+0x74>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	4a14      	ldr	r2, [pc, #80]	@ (8006f50 <TIM_OC6_SetConfig+0xb8>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d003      	beq.n	8006f0c <TIM_OC6_SetConfig+0x74>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	4a13      	ldr	r2, [pc, #76]	@ (8006f54 <TIM_OC6_SetConfig+0xbc>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d109      	bne.n	8006f20 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006f0c:	697b      	ldr	r3, [r7, #20]
 8006f0e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006f12:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	695b      	ldr	r3, [r3, #20]
 8006f18:	029b      	lsls	r3, r3, #10
 8006f1a:	697a      	ldr	r2, [r7, #20]
 8006f1c:	4313      	orrs	r3, r2
 8006f1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	697a      	ldr	r2, [r7, #20]
 8006f24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	68fa      	ldr	r2, [r7, #12]
 8006f2a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	685a      	ldr	r2, [r3, #4]
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	693a      	ldr	r2, [r7, #16]
 8006f38:	621a      	str	r2, [r3, #32]
}
 8006f3a:	bf00      	nop
 8006f3c:	371c      	adds	r7, #28
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f44:	4770      	bx	lr
 8006f46:	bf00      	nop
 8006f48:	40012c00 	.word	0x40012c00
 8006f4c:	40014000 	.word	0x40014000
 8006f50:	40014400 	.word	0x40014400
 8006f54:	40014800 	.word	0x40014800

08006f58 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b087      	sub	sp, #28
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	60f8      	str	r0, [r7, #12]
 8006f60:	60b9      	str	r1, [r7, #8]
 8006f62:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	f003 031f 	and.w	r3, r3, #31
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8006f70:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	6a1a      	ldr	r2, [r3, #32]
 8006f76:	697b      	ldr	r3, [r7, #20]
 8006f78:	43db      	mvns	r3, r3
 8006f7a:	401a      	ands	r2, r3
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	6a1a      	ldr	r2, [r3, #32]
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	f003 031f 	and.w	r3, r3, #31
 8006f8a:	6879      	ldr	r1, [r7, #4]
 8006f8c:	fa01 f303 	lsl.w	r3, r1, r3
 8006f90:	431a      	orrs	r2, r3
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	621a      	str	r2, [r3, #32]
}
 8006f96:	bf00      	nop
 8006f98:	371c      	adds	r7, #28
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa0:	4770      	bx	lr
	...

08006fa4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b085      	sub	sp, #20
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
 8006fac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006fb4:	2b01      	cmp	r3, #1
 8006fb6:	d101      	bne.n	8006fbc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006fb8:	2302      	movs	r3, #2
 8006fba:	e054      	b.n	8007066 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2201      	movs	r2, #1
 8006fc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2202      	movs	r2, #2
 8006fc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	685b      	ldr	r3, [r3, #4]
 8006fd2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	689b      	ldr	r3, [r3, #8]
 8006fda:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a24      	ldr	r2, [pc, #144]	@ (8007074 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d108      	bne.n	8006ff8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006fec:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	685b      	ldr	r3, [r3, #4]
 8006ff2:	68fa      	ldr	r2, [r7, #12]
 8006ff4:	4313      	orrs	r3, r2
 8006ff6:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ffe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	68fa      	ldr	r2, [r7, #12]
 8007006:	4313      	orrs	r3, r2
 8007008:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	68fa      	ldr	r2, [r7, #12]
 8007010:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4a17      	ldr	r2, [pc, #92]	@ (8007074 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d00e      	beq.n	800703a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007024:	d009      	beq.n	800703a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4a13      	ldr	r2, [pc, #76]	@ (8007078 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d004      	beq.n	800703a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	4a11      	ldr	r2, [pc, #68]	@ (800707c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d10c      	bne.n	8007054 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007040:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	689b      	ldr	r3, [r3, #8]
 8007046:	68ba      	ldr	r2, [r7, #8]
 8007048:	4313      	orrs	r3, r2
 800704a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	68ba      	ldr	r2, [r7, #8]
 8007052:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2201      	movs	r2, #1
 8007058:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2200      	movs	r2, #0
 8007060:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007064:	2300      	movs	r3, #0
}
 8007066:	4618      	mov	r0, r3
 8007068:	3714      	adds	r7, #20
 800706a:	46bd      	mov	sp, r7
 800706c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007070:	4770      	bx	lr
 8007072:	bf00      	nop
 8007074:	40012c00 	.word	0x40012c00
 8007078:	40000400 	.word	0x40000400
 800707c:	40014000 	.word	0x40014000

08007080 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007080:	b480      	push	{r7}
 8007082:	b085      	sub	sp, #20
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
 8007088:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800708a:	2300      	movs	r3, #0
 800708c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007094:	2b01      	cmp	r3, #1
 8007096:	d101      	bne.n	800709c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007098:	2302      	movs	r3, #2
 800709a:	e060      	b.n	800715e <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2201      	movs	r2, #1
 80070a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	68db      	ldr	r3, [r3, #12]
 80070ae:	4313      	orrs	r3, r2
 80070b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	689b      	ldr	r3, [r3, #8]
 80070bc:	4313      	orrs	r3, r2
 80070be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	685b      	ldr	r3, [r3, #4]
 80070ca:	4313      	orrs	r3, r2
 80070cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4313      	orrs	r3, r2
 80070da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	691b      	ldr	r3, [r3, #16]
 80070e6:	4313      	orrs	r3, r2
 80070e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	695b      	ldr	r3, [r3, #20]
 80070f4:	4313      	orrs	r3, r2
 80070f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007102:	4313      	orrs	r3, r2
 8007104:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	699b      	ldr	r3, [r3, #24]
 8007110:	041b      	lsls	r3, r3, #16
 8007112:	4313      	orrs	r3, r2
 8007114:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4a14      	ldr	r2, [pc, #80]	@ (800716c <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d115      	bne.n	800714c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800712a:	051b      	lsls	r3, r3, #20
 800712c:	4313      	orrs	r3, r2
 800712e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	69db      	ldr	r3, [r3, #28]
 800713a:	4313      	orrs	r3, r2
 800713c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	6a1b      	ldr	r3, [r3, #32]
 8007148:	4313      	orrs	r3, r2
 800714a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	68fa      	ldr	r2, [r7, #12]
 8007152:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2200      	movs	r2, #0
 8007158:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800715c:	2300      	movs	r3, #0
}
 800715e:	4618      	mov	r0, r3
 8007160:	3714      	adds	r7, #20
 8007162:	46bd      	mov	sp, r7
 8007164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007168:	4770      	bx	lr
 800716a:	bf00      	nop
 800716c:	40012c00 	.word	0x40012c00

08007170 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007170:	b480      	push	{r7}
 8007172:	b083      	sub	sp, #12
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007178:	bf00      	nop
 800717a:	370c      	adds	r7, #12
 800717c:	46bd      	mov	sp, r7
 800717e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007182:	4770      	bx	lr

08007184 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007184:	b480      	push	{r7}
 8007186:	b083      	sub	sp, #12
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800718c:	bf00      	nop
 800718e:	370c      	adds	r7, #12
 8007190:	46bd      	mov	sp, r7
 8007192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007196:	4770      	bx	lr

08007198 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007198:	b480      	push	{r7}
 800719a:	b083      	sub	sp, #12
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80071a0:	bf00      	nop
 80071a2:	370c      	adds	r7, #12
 80071a4:	46bd      	mov	sp, r7
 80071a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071aa:	4770      	bx	lr

080071ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b082      	sub	sp, #8
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d101      	bne.n	80071be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80071ba:	2301      	movs	r3, #1
 80071bc:	e040      	b.n	8007240 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d106      	bne.n	80071d4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2200      	movs	r2, #0
 80071ca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f7fa ff9c 	bl	800210c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2224      	movs	r2, #36	@ 0x24
 80071d8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	681a      	ldr	r2, [r3, #0]
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f022 0201 	bic.w	r2, r2, #1
 80071e8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d002      	beq.n	80071f8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	f000 f9e8 	bl	80075c8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	f000 f8af 	bl	800735c <UART_SetConfig>
 80071fe:	4603      	mov	r3, r0
 8007200:	2b01      	cmp	r3, #1
 8007202:	d101      	bne.n	8007208 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8007204:	2301      	movs	r3, #1
 8007206:	e01b      	b.n	8007240 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	685a      	ldr	r2, [r3, #4]
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007216:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	689a      	ldr	r2, [r3, #8]
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007226:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	681a      	ldr	r2, [r3, #0]
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f042 0201 	orr.w	r2, r2, #1
 8007236:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f000 fa67 	bl	800770c <UART_CheckIdleState>
 800723e:	4603      	mov	r3, r0
}
 8007240:	4618      	mov	r0, r3
 8007242:	3708      	adds	r7, #8
 8007244:	46bd      	mov	sp, r7
 8007246:	bd80      	pop	{r7, pc}

08007248 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b08a      	sub	sp, #40	@ 0x28
 800724c:	af02      	add	r7, sp, #8
 800724e:	60f8      	str	r0, [r7, #12]
 8007250:	60b9      	str	r1, [r7, #8]
 8007252:	603b      	str	r3, [r7, #0]
 8007254:	4613      	mov	r3, r2
 8007256:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800725c:	2b20      	cmp	r3, #32
 800725e:	d177      	bne.n	8007350 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d002      	beq.n	800726c <HAL_UART_Transmit+0x24>
 8007266:	88fb      	ldrh	r3, [r7, #6]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d101      	bne.n	8007270 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800726c:	2301      	movs	r3, #1
 800726e:	e070      	b.n	8007352 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	2200      	movs	r2, #0
 8007274:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	2221      	movs	r2, #33	@ 0x21
 800727c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800727e:	f7fb f92b 	bl	80024d8 <HAL_GetTick>
 8007282:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	88fa      	ldrh	r2, [r7, #6]
 8007288:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	88fa      	ldrh	r2, [r7, #6]
 8007290:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	689b      	ldr	r3, [r3, #8]
 8007298:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800729c:	d108      	bne.n	80072b0 <HAL_UART_Transmit+0x68>
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	691b      	ldr	r3, [r3, #16]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d104      	bne.n	80072b0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80072a6:	2300      	movs	r3, #0
 80072a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	61bb      	str	r3, [r7, #24]
 80072ae:	e003      	b.n	80072b8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80072b4:	2300      	movs	r3, #0
 80072b6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80072b8:	e02f      	b.n	800731a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	9300      	str	r3, [sp, #0]
 80072be:	697b      	ldr	r3, [r7, #20]
 80072c0:	2200      	movs	r2, #0
 80072c2:	2180      	movs	r1, #128	@ 0x80
 80072c4:	68f8      	ldr	r0, [r7, #12]
 80072c6:	f000 fac9 	bl	800785c <UART_WaitOnFlagUntilTimeout>
 80072ca:	4603      	mov	r3, r0
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d004      	beq.n	80072da <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	2220      	movs	r2, #32
 80072d4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80072d6:	2303      	movs	r3, #3
 80072d8:	e03b      	b.n	8007352 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80072da:	69fb      	ldr	r3, [r7, #28]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d10b      	bne.n	80072f8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80072e0:	69bb      	ldr	r3, [r7, #24]
 80072e2:	881a      	ldrh	r2, [r3, #0]
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80072ec:	b292      	uxth	r2, r2
 80072ee:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80072f0:	69bb      	ldr	r3, [r7, #24]
 80072f2:	3302      	adds	r3, #2
 80072f4:	61bb      	str	r3, [r7, #24]
 80072f6:	e007      	b.n	8007308 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80072f8:	69fb      	ldr	r3, [r7, #28]
 80072fa:	781a      	ldrb	r2, [r3, #0]
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007302:	69fb      	ldr	r3, [r7, #28]
 8007304:	3301      	adds	r3, #1
 8007306:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800730e:	b29b      	uxth	r3, r3
 8007310:	3b01      	subs	r3, #1
 8007312:	b29a      	uxth	r2, r3
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007320:	b29b      	uxth	r3, r3
 8007322:	2b00      	cmp	r3, #0
 8007324:	d1c9      	bne.n	80072ba <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	9300      	str	r3, [sp, #0]
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	2200      	movs	r2, #0
 800732e:	2140      	movs	r1, #64	@ 0x40
 8007330:	68f8      	ldr	r0, [r7, #12]
 8007332:	f000 fa93 	bl	800785c <UART_WaitOnFlagUntilTimeout>
 8007336:	4603      	mov	r3, r0
 8007338:	2b00      	cmp	r3, #0
 800733a:	d004      	beq.n	8007346 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	2220      	movs	r2, #32
 8007340:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8007342:	2303      	movs	r3, #3
 8007344:	e005      	b.n	8007352 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	2220      	movs	r2, #32
 800734a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800734c:	2300      	movs	r3, #0
 800734e:	e000      	b.n	8007352 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8007350:	2302      	movs	r3, #2
  }
}
 8007352:	4618      	mov	r0, r3
 8007354:	3720      	adds	r7, #32
 8007356:	46bd      	mov	sp, r7
 8007358:	bd80      	pop	{r7, pc}
	...

0800735c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b088      	sub	sp, #32
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007364:	2300      	movs	r3, #0
 8007366:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	689a      	ldr	r2, [r3, #8]
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	691b      	ldr	r3, [r3, #16]
 8007370:	431a      	orrs	r2, r3
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	695b      	ldr	r3, [r3, #20]
 8007376:	431a      	orrs	r2, r3
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	69db      	ldr	r3, [r3, #28]
 800737c:	4313      	orrs	r3, r2
 800737e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	681a      	ldr	r2, [r3, #0]
 8007386:	4b8a      	ldr	r3, [pc, #552]	@ (80075b0 <UART_SetConfig+0x254>)
 8007388:	4013      	ands	r3, r2
 800738a:	687a      	ldr	r2, [r7, #4]
 800738c:	6812      	ldr	r2, [r2, #0]
 800738e:	6979      	ldr	r1, [r7, #20]
 8007390:	430b      	orrs	r3, r1
 8007392:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	685b      	ldr	r3, [r3, #4]
 800739a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	68da      	ldr	r2, [r3, #12]
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	430a      	orrs	r2, r1
 80073a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	699b      	ldr	r3, [r3, #24]
 80073ae:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6a1b      	ldr	r3, [r3, #32]
 80073b4:	697a      	ldr	r2, [r7, #20]
 80073b6:	4313      	orrs	r3, r2
 80073b8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	689b      	ldr	r3, [r3, #8]
 80073c0:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	697a      	ldr	r2, [r7, #20]
 80073ca:	430a      	orrs	r2, r1
 80073cc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	4a78      	ldr	r2, [pc, #480]	@ (80075b4 <UART_SetConfig+0x258>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d120      	bne.n	800741a <UART_SetConfig+0xbe>
 80073d8:	4b77      	ldr	r3, [pc, #476]	@ (80075b8 <UART_SetConfig+0x25c>)
 80073da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073dc:	f003 0303 	and.w	r3, r3, #3
 80073e0:	2b03      	cmp	r3, #3
 80073e2:	d817      	bhi.n	8007414 <UART_SetConfig+0xb8>
 80073e4:	a201      	add	r2, pc, #4	@ (adr r2, 80073ec <UART_SetConfig+0x90>)
 80073e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073ea:	bf00      	nop
 80073ec:	080073fd 	.word	0x080073fd
 80073f0:	08007409 	.word	0x08007409
 80073f4:	0800740f 	.word	0x0800740f
 80073f8:	08007403 	.word	0x08007403
 80073fc:	2300      	movs	r3, #0
 80073fe:	77fb      	strb	r3, [r7, #31]
 8007400:	e01d      	b.n	800743e <UART_SetConfig+0xe2>
 8007402:	2302      	movs	r3, #2
 8007404:	77fb      	strb	r3, [r7, #31]
 8007406:	e01a      	b.n	800743e <UART_SetConfig+0xe2>
 8007408:	2304      	movs	r3, #4
 800740a:	77fb      	strb	r3, [r7, #31]
 800740c:	e017      	b.n	800743e <UART_SetConfig+0xe2>
 800740e:	2308      	movs	r3, #8
 8007410:	77fb      	strb	r3, [r7, #31]
 8007412:	e014      	b.n	800743e <UART_SetConfig+0xe2>
 8007414:	2310      	movs	r3, #16
 8007416:	77fb      	strb	r3, [r7, #31]
 8007418:	e011      	b.n	800743e <UART_SetConfig+0xe2>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	4a67      	ldr	r2, [pc, #412]	@ (80075bc <UART_SetConfig+0x260>)
 8007420:	4293      	cmp	r3, r2
 8007422:	d102      	bne.n	800742a <UART_SetConfig+0xce>
 8007424:	2300      	movs	r3, #0
 8007426:	77fb      	strb	r3, [r7, #31]
 8007428:	e009      	b.n	800743e <UART_SetConfig+0xe2>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	4a64      	ldr	r2, [pc, #400]	@ (80075c0 <UART_SetConfig+0x264>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d102      	bne.n	800743a <UART_SetConfig+0xde>
 8007434:	2300      	movs	r3, #0
 8007436:	77fb      	strb	r3, [r7, #31]
 8007438:	e001      	b.n	800743e <UART_SetConfig+0xe2>
 800743a:	2310      	movs	r3, #16
 800743c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	69db      	ldr	r3, [r3, #28]
 8007442:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007446:	d15a      	bne.n	80074fe <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8007448:	7ffb      	ldrb	r3, [r7, #31]
 800744a:	2b08      	cmp	r3, #8
 800744c:	d827      	bhi.n	800749e <UART_SetConfig+0x142>
 800744e:	a201      	add	r2, pc, #4	@ (adr r2, 8007454 <UART_SetConfig+0xf8>)
 8007450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007454:	08007479 	.word	0x08007479
 8007458:	08007481 	.word	0x08007481
 800745c:	08007489 	.word	0x08007489
 8007460:	0800749f 	.word	0x0800749f
 8007464:	0800748f 	.word	0x0800748f
 8007468:	0800749f 	.word	0x0800749f
 800746c:	0800749f 	.word	0x0800749f
 8007470:	0800749f 	.word	0x0800749f
 8007474:	08007497 	.word	0x08007497
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007478:	f7fd fd30 	bl	8004edc <HAL_RCC_GetPCLK1Freq>
 800747c:	61b8      	str	r0, [r7, #24]
        break;
 800747e:	e013      	b.n	80074a8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007480:	f7fd fd4e 	bl	8004f20 <HAL_RCC_GetPCLK2Freq>
 8007484:	61b8      	str	r0, [r7, #24]
        break;
 8007486:	e00f      	b.n	80074a8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007488:	4b4e      	ldr	r3, [pc, #312]	@ (80075c4 <UART_SetConfig+0x268>)
 800748a:	61bb      	str	r3, [r7, #24]
        break;
 800748c:	e00c      	b.n	80074a8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800748e:	f7fd fcc5 	bl	8004e1c <HAL_RCC_GetSysClockFreq>
 8007492:	61b8      	str	r0, [r7, #24]
        break;
 8007494:	e008      	b.n	80074a8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007496:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800749a:	61bb      	str	r3, [r7, #24]
        break;
 800749c:	e004      	b.n	80074a8 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800749e:	2300      	movs	r3, #0
 80074a0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80074a2:	2301      	movs	r3, #1
 80074a4:	77bb      	strb	r3, [r7, #30]
        break;
 80074a6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80074a8:	69bb      	ldr	r3, [r7, #24]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d074      	beq.n	8007598 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80074ae:	69bb      	ldr	r3, [r7, #24]
 80074b0:	005a      	lsls	r2, r3, #1
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	685b      	ldr	r3, [r3, #4]
 80074b6:	085b      	lsrs	r3, r3, #1
 80074b8:	441a      	add	r2, r3
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	685b      	ldr	r3, [r3, #4]
 80074be:	fbb2 f3f3 	udiv	r3, r2, r3
 80074c2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80074c4:	693b      	ldr	r3, [r7, #16]
 80074c6:	2b0f      	cmp	r3, #15
 80074c8:	d916      	bls.n	80074f8 <UART_SetConfig+0x19c>
 80074ca:	693b      	ldr	r3, [r7, #16]
 80074cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80074d0:	d212      	bcs.n	80074f8 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80074d2:	693b      	ldr	r3, [r7, #16]
 80074d4:	b29b      	uxth	r3, r3
 80074d6:	f023 030f 	bic.w	r3, r3, #15
 80074da:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80074dc:	693b      	ldr	r3, [r7, #16]
 80074de:	085b      	lsrs	r3, r3, #1
 80074e0:	b29b      	uxth	r3, r3
 80074e2:	f003 0307 	and.w	r3, r3, #7
 80074e6:	b29a      	uxth	r2, r3
 80074e8:	89fb      	ldrh	r3, [r7, #14]
 80074ea:	4313      	orrs	r3, r2
 80074ec:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	89fa      	ldrh	r2, [r7, #14]
 80074f4:	60da      	str	r2, [r3, #12]
 80074f6:	e04f      	b.n	8007598 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80074f8:	2301      	movs	r3, #1
 80074fa:	77bb      	strb	r3, [r7, #30]
 80074fc:	e04c      	b.n	8007598 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80074fe:	7ffb      	ldrb	r3, [r7, #31]
 8007500:	2b08      	cmp	r3, #8
 8007502:	d828      	bhi.n	8007556 <UART_SetConfig+0x1fa>
 8007504:	a201      	add	r2, pc, #4	@ (adr r2, 800750c <UART_SetConfig+0x1b0>)
 8007506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800750a:	bf00      	nop
 800750c:	08007531 	.word	0x08007531
 8007510:	08007539 	.word	0x08007539
 8007514:	08007541 	.word	0x08007541
 8007518:	08007557 	.word	0x08007557
 800751c:	08007547 	.word	0x08007547
 8007520:	08007557 	.word	0x08007557
 8007524:	08007557 	.word	0x08007557
 8007528:	08007557 	.word	0x08007557
 800752c:	0800754f 	.word	0x0800754f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007530:	f7fd fcd4 	bl	8004edc <HAL_RCC_GetPCLK1Freq>
 8007534:	61b8      	str	r0, [r7, #24]
        break;
 8007536:	e013      	b.n	8007560 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007538:	f7fd fcf2 	bl	8004f20 <HAL_RCC_GetPCLK2Freq>
 800753c:	61b8      	str	r0, [r7, #24]
        break;
 800753e:	e00f      	b.n	8007560 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007540:	4b20      	ldr	r3, [pc, #128]	@ (80075c4 <UART_SetConfig+0x268>)
 8007542:	61bb      	str	r3, [r7, #24]
        break;
 8007544:	e00c      	b.n	8007560 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007546:	f7fd fc69 	bl	8004e1c <HAL_RCC_GetSysClockFreq>
 800754a:	61b8      	str	r0, [r7, #24]
        break;
 800754c:	e008      	b.n	8007560 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800754e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007552:	61bb      	str	r3, [r7, #24]
        break;
 8007554:	e004      	b.n	8007560 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8007556:	2300      	movs	r3, #0
 8007558:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800755a:	2301      	movs	r3, #1
 800755c:	77bb      	strb	r3, [r7, #30]
        break;
 800755e:	bf00      	nop
    }

    if (pclk != 0U)
 8007560:	69bb      	ldr	r3, [r7, #24]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d018      	beq.n	8007598 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	685b      	ldr	r3, [r3, #4]
 800756a:	085a      	lsrs	r2, r3, #1
 800756c:	69bb      	ldr	r3, [r7, #24]
 800756e:	441a      	add	r2, r3
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	685b      	ldr	r3, [r3, #4]
 8007574:	fbb2 f3f3 	udiv	r3, r2, r3
 8007578:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800757a:	693b      	ldr	r3, [r7, #16]
 800757c:	2b0f      	cmp	r3, #15
 800757e:	d909      	bls.n	8007594 <UART_SetConfig+0x238>
 8007580:	693b      	ldr	r3, [r7, #16]
 8007582:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007586:	d205      	bcs.n	8007594 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007588:	693b      	ldr	r3, [r7, #16]
 800758a:	b29a      	uxth	r2, r3
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	60da      	str	r2, [r3, #12]
 8007592:	e001      	b.n	8007598 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8007594:	2301      	movs	r3, #1
 8007596:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2200      	movs	r2, #0
 800759c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2200      	movs	r2, #0
 80075a2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80075a4:	7fbb      	ldrb	r3, [r7, #30]
}
 80075a6:	4618      	mov	r0, r3
 80075a8:	3720      	adds	r7, #32
 80075aa:	46bd      	mov	sp, r7
 80075ac:	bd80      	pop	{r7, pc}
 80075ae:	bf00      	nop
 80075b0:	efff69f3 	.word	0xefff69f3
 80075b4:	40013800 	.word	0x40013800
 80075b8:	40021000 	.word	0x40021000
 80075bc:	40004400 	.word	0x40004400
 80075c0:	40004800 	.word	0x40004800
 80075c4:	007a1200 	.word	0x007a1200

080075c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80075c8:	b480      	push	{r7}
 80075ca:	b083      	sub	sp, #12
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075d4:	f003 0308 	and.w	r3, r3, #8
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d00a      	beq.n	80075f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	685b      	ldr	r3, [r3, #4]
 80075e2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	430a      	orrs	r2, r1
 80075f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075f6:	f003 0301 	and.w	r3, r3, #1
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d00a      	beq.n	8007614 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	685b      	ldr	r3, [r3, #4]
 8007604:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	430a      	orrs	r2, r1
 8007612:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007618:	f003 0302 	and.w	r3, r3, #2
 800761c:	2b00      	cmp	r3, #0
 800761e:	d00a      	beq.n	8007636 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	685b      	ldr	r3, [r3, #4]
 8007626:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	430a      	orrs	r2, r1
 8007634:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800763a:	f003 0304 	and.w	r3, r3, #4
 800763e:	2b00      	cmp	r3, #0
 8007640:	d00a      	beq.n	8007658 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	685b      	ldr	r3, [r3, #4]
 8007648:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	430a      	orrs	r2, r1
 8007656:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800765c:	f003 0310 	and.w	r3, r3, #16
 8007660:	2b00      	cmp	r3, #0
 8007662:	d00a      	beq.n	800767a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	689b      	ldr	r3, [r3, #8]
 800766a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	430a      	orrs	r2, r1
 8007678:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800767e:	f003 0320 	and.w	r3, r3, #32
 8007682:	2b00      	cmp	r3, #0
 8007684:	d00a      	beq.n	800769c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	689b      	ldr	r3, [r3, #8]
 800768c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	430a      	orrs	r2, r1
 800769a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d01a      	beq.n	80076de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	685b      	ldr	r3, [r3, #4]
 80076ae:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	430a      	orrs	r2, r1
 80076bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80076c6:	d10a      	bne.n	80076de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	685b      	ldr	r3, [r3, #4]
 80076ce:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	430a      	orrs	r2, r1
 80076dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d00a      	beq.n	8007700 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	685b      	ldr	r3, [r3, #4]
 80076f0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	430a      	orrs	r2, r1
 80076fe:	605a      	str	r2, [r3, #4]
  }
}
 8007700:	bf00      	nop
 8007702:	370c      	adds	r7, #12
 8007704:	46bd      	mov	sp, r7
 8007706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770a:	4770      	bx	lr

0800770c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b098      	sub	sp, #96	@ 0x60
 8007710:	af02      	add	r7, sp, #8
 8007712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2200      	movs	r2, #0
 8007718:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800771c:	f7fa fedc 	bl	80024d8 <HAL_GetTick>
 8007720:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f003 0308 	and.w	r3, r3, #8
 800772c:	2b08      	cmp	r3, #8
 800772e:	d12e      	bne.n	800778e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007730:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007734:	9300      	str	r3, [sp, #0]
 8007736:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007738:	2200      	movs	r2, #0
 800773a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f000 f88c 	bl	800785c <UART_WaitOnFlagUntilTimeout>
 8007744:	4603      	mov	r3, r0
 8007746:	2b00      	cmp	r3, #0
 8007748:	d021      	beq.n	800778e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007750:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007752:	e853 3f00 	ldrex	r3, [r3]
 8007756:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007758:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800775a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800775e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	461a      	mov	r2, r3
 8007766:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007768:	647b      	str	r3, [r7, #68]	@ 0x44
 800776a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800776c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800776e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007770:	e841 2300 	strex	r3, r2, [r1]
 8007774:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007776:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007778:	2b00      	cmp	r3, #0
 800777a:	d1e6      	bne.n	800774a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2220      	movs	r2, #32
 8007780:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2200      	movs	r2, #0
 8007786:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800778a:	2303      	movs	r3, #3
 800778c:	e062      	b.n	8007854 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f003 0304 	and.w	r3, r3, #4
 8007798:	2b04      	cmp	r3, #4
 800779a:	d149      	bne.n	8007830 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800779c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80077a0:	9300      	str	r3, [sp, #0]
 80077a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80077a4:	2200      	movs	r2, #0
 80077a6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f000 f856 	bl	800785c <UART_WaitOnFlagUntilTimeout>
 80077b0:	4603      	mov	r3, r0
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d03c      	beq.n	8007830 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077be:	e853 3f00 	ldrex	r3, [r3]
 80077c2:	623b      	str	r3, [r7, #32]
   return(result);
 80077c4:	6a3b      	ldr	r3, [r7, #32]
 80077c6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80077ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	461a      	mov	r2, r3
 80077d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80077d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80077d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077d8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80077da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80077dc:	e841 2300 	strex	r3, r2, [r1]
 80077e0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80077e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d1e6      	bne.n	80077b6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	3308      	adds	r3, #8
 80077ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077f0:	693b      	ldr	r3, [r7, #16]
 80077f2:	e853 3f00 	ldrex	r3, [r3]
 80077f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	f023 0301 	bic.w	r3, r3, #1
 80077fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	3308      	adds	r3, #8
 8007806:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007808:	61fa      	str	r2, [r7, #28]
 800780a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800780c:	69b9      	ldr	r1, [r7, #24]
 800780e:	69fa      	ldr	r2, [r7, #28]
 8007810:	e841 2300 	strex	r3, r2, [r1]
 8007814:	617b      	str	r3, [r7, #20]
   return(result);
 8007816:	697b      	ldr	r3, [r7, #20]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d1e5      	bne.n	80077e8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2220      	movs	r2, #32
 8007820:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2200      	movs	r2, #0
 8007828:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800782c:	2303      	movs	r3, #3
 800782e:	e011      	b.n	8007854 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2220      	movs	r2, #32
 8007834:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2220      	movs	r2, #32
 800783a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2200      	movs	r2, #0
 8007842:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2200      	movs	r2, #0
 8007848:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2200      	movs	r2, #0
 800784e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007852:	2300      	movs	r3, #0
}
 8007854:	4618      	mov	r0, r3
 8007856:	3758      	adds	r7, #88	@ 0x58
 8007858:	46bd      	mov	sp, r7
 800785a:	bd80      	pop	{r7, pc}

0800785c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b084      	sub	sp, #16
 8007860:	af00      	add	r7, sp, #0
 8007862:	60f8      	str	r0, [r7, #12]
 8007864:	60b9      	str	r1, [r7, #8]
 8007866:	603b      	str	r3, [r7, #0]
 8007868:	4613      	mov	r3, r2
 800786a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800786c:	e04f      	b.n	800790e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800786e:	69bb      	ldr	r3, [r7, #24]
 8007870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007874:	d04b      	beq.n	800790e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007876:	f7fa fe2f 	bl	80024d8 <HAL_GetTick>
 800787a:	4602      	mov	r2, r0
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	1ad3      	subs	r3, r2, r3
 8007880:	69ba      	ldr	r2, [r7, #24]
 8007882:	429a      	cmp	r2, r3
 8007884:	d302      	bcc.n	800788c <UART_WaitOnFlagUntilTimeout+0x30>
 8007886:	69bb      	ldr	r3, [r7, #24]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d101      	bne.n	8007890 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800788c:	2303      	movs	r3, #3
 800788e:	e04e      	b.n	800792e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f003 0304 	and.w	r3, r3, #4
 800789a:	2b00      	cmp	r3, #0
 800789c:	d037      	beq.n	800790e <UART_WaitOnFlagUntilTimeout+0xb2>
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	2b80      	cmp	r3, #128	@ 0x80
 80078a2:	d034      	beq.n	800790e <UART_WaitOnFlagUntilTimeout+0xb2>
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	2b40      	cmp	r3, #64	@ 0x40
 80078a8:	d031      	beq.n	800790e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	69db      	ldr	r3, [r3, #28]
 80078b0:	f003 0308 	and.w	r3, r3, #8
 80078b4:	2b08      	cmp	r3, #8
 80078b6:	d110      	bne.n	80078da <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	2208      	movs	r2, #8
 80078be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80078c0:	68f8      	ldr	r0, [r7, #12]
 80078c2:	f000 f838 	bl	8007936 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	2208      	movs	r2, #8
 80078ca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	2200      	movs	r2, #0
 80078d2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80078d6:	2301      	movs	r3, #1
 80078d8:	e029      	b.n	800792e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	69db      	ldr	r3, [r3, #28]
 80078e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80078e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80078e8:	d111      	bne.n	800790e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80078f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80078f4:	68f8      	ldr	r0, [r7, #12]
 80078f6:	f000 f81e 	bl	8007936 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	2220      	movs	r2, #32
 80078fe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	2200      	movs	r2, #0
 8007906:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800790a:	2303      	movs	r3, #3
 800790c:	e00f      	b.n	800792e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	69da      	ldr	r2, [r3, #28]
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	4013      	ands	r3, r2
 8007918:	68ba      	ldr	r2, [r7, #8]
 800791a:	429a      	cmp	r2, r3
 800791c:	bf0c      	ite	eq
 800791e:	2301      	moveq	r3, #1
 8007920:	2300      	movne	r3, #0
 8007922:	b2db      	uxtb	r3, r3
 8007924:	461a      	mov	r2, r3
 8007926:	79fb      	ldrb	r3, [r7, #7]
 8007928:	429a      	cmp	r2, r3
 800792a:	d0a0      	beq.n	800786e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800792c:	2300      	movs	r3, #0
}
 800792e:	4618      	mov	r0, r3
 8007930:	3710      	adds	r7, #16
 8007932:	46bd      	mov	sp, r7
 8007934:	bd80      	pop	{r7, pc}

08007936 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007936:	b480      	push	{r7}
 8007938:	b095      	sub	sp, #84	@ 0x54
 800793a:	af00      	add	r7, sp, #0
 800793c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007944:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007946:	e853 3f00 	ldrex	r3, [r3]
 800794a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800794c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800794e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007952:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	461a      	mov	r2, r3
 800795a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800795c:	643b      	str	r3, [r7, #64]	@ 0x40
 800795e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007960:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007962:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007964:	e841 2300 	strex	r3, r2, [r1]
 8007968:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800796a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800796c:	2b00      	cmp	r3, #0
 800796e:	d1e6      	bne.n	800793e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	3308      	adds	r3, #8
 8007976:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007978:	6a3b      	ldr	r3, [r7, #32]
 800797a:	e853 3f00 	ldrex	r3, [r3]
 800797e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007980:	69fb      	ldr	r3, [r7, #28]
 8007982:	f023 0301 	bic.w	r3, r3, #1
 8007986:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	3308      	adds	r3, #8
 800798e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007990:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007992:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007994:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007996:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007998:	e841 2300 	strex	r3, r2, [r1]
 800799c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800799e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d1e5      	bne.n	8007970 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80079a8:	2b01      	cmp	r3, #1
 80079aa:	d118      	bne.n	80079de <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	e853 3f00 	ldrex	r3, [r3]
 80079b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	f023 0310 	bic.w	r3, r3, #16
 80079c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	461a      	mov	r2, r3
 80079c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80079ca:	61bb      	str	r3, [r7, #24]
 80079cc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ce:	6979      	ldr	r1, [r7, #20]
 80079d0:	69ba      	ldr	r2, [r7, #24]
 80079d2:	e841 2300 	strex	r3, r2, [r1]
 80079d6:	613b      	str	r3, [r7, #16]
   return(result);
 80079d8:	693b      	ldr	r3, [r7, #16]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d1e6      	bne.n	80079ac <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2220      	movs	r2, #32
 80079e2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2200      	movs	r2, #0
 80079ea:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2200      	movs	r2, #0
 80079f0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80079f2:	bf00      	nop
 80079f4:	3754      	adds	r7, #84	@ 0x54
 80079f6:	46bd      	mov	sp, r7
 80079f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fc:	4770      	bx	lr

080079fe <__cvt>:
 80079fe:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007a02:	ec57 6b10 	vmov	r6, r7, d0
 8007a06:	2f00      	cmp	r7, #0
 8007a08:	460c      	mov	r4, r1
 8007a0a:	4619      	mov	r1, r3
 8007a0c:	463b      	mov	r3, r7
 8007a0e:	bfbb      	ittet	lt
 8007a10:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007a14:	461f      	movlt	r7, r3
 8007a16:	2300      	movge	r3, #0
 8007a18:	232d      	movlt	r3, #45	@ 0x2d
 8007a1a:	700b      	strb	r3, [r1, #0]
 8007a1c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007a1e:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007a22:	4691      	mov	r9, r2
 8007a24:	f023 0820 	bic.w	r8, r3, #32
 8007a28:	bfbc      	itt	lt
 8007a2a:	4632      	movlt	r2, r6
 8007a2c:	4616      	movlt	r6, r2
 8007a2e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007a32:	d005      	beq.n	8007a40 <__cvt+0x42>
 8007a34:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007a38:	d100      	bne.n	8007a3c <__cvt+0x3e>
 8007a3a:	3401      	adds	r4, #1
 8007a3c:	2102      	movs	r1, #2
 8007a3e:	e000      	b.n	8007a42 <__cvt+0x44>
 8007a40:	2103      	movs	r1, #3
 8007a42:	ab03      	add	r3, sp, #12
 8007a44:	9301      	str	r3, [sp, #4]
 8007a46:	ab02      	add	r3, sp, #8
 8007a48:	9300      	str	r3, [sp, #0]
 8007a4a:	ec47 6b10 	vmov	d0, r6, r7
 8007a4e:	4653      	mov	r3, sl
 8007a50:	4622      	mov	r2, r4
 8007a52:	f000 ff3d 	bl	80088d0 <_dtoa_r>
 8007a56:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007a5a:	4605      	mov	r5, r0
 8007a5c:	d119      	bne.n	8007a92 <__cvt+0x94>
 8007a5e:	f019 0f01 	tst.w	r9, #1
 8007a62:	d00e      	beq.n	8007a82 <__cvt+0x84>
 8007a64:	eb00 0904 	add.w	r9, r0, r4
 8007a68:	2200      	movs	r2, #0
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	4630      	mov	r0, r6
 8007a6e:	4639      	mov	r1, r7
 8007a70:	f7f9 f82a 	bl	8000ac8 <__aeabi_dcmpeq>
 8007a74:	b108      	cbz	r0, 8007a7a <__cvt+0x7c>
 8007a76:	f8cd 900c 	str.w	r9, [sp, #12]
 8007a7a:	2230      	movs	r2, #48	@ 0x30
 8007a7c:	9b03      	ldr	r3, [sp, #12]
 8007a7e:	454b      	cmp	r3, r9
 8007a80:	d31e      	bcc.n	8007ac0 <__cvt+0xc2>
 8007a82:	9b03      	ldr	r3, [sp, #12]
 8007a84:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007a86:	1b5b      	subs	r3, r3, r5
 8007a88:	4628      	mov	r0, r5
 8007a8a:	6013      	str	r3, [r2, #0]
 8007a8c:	b004      	add	sp, #16
 8007a8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a92:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007a96:	eb00 0904 	add.w	r9, r0, r4
 8007a9a:	d1e5      	bne.n	8007a68 <__cvt+0x6a>
 8007a9c:	7803      	ldrb	r3, [r0, #0]
 8007a9e:	2b30      	cmp	r3, #48	@ 0x30
 8007aa0:	d10a      	bne.n	8007ab8 <__cvt+0xba>
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	4630      	mov	r0, r6
 8007aa8:	4639      	mov	r1, r7
 8007aaa:	f7f9 f80d 	bl	8000ac8 <__aeabi_dcmpeq>
 8007aae:	b918      	cbnz	r0, 8007ab8 <__cvt+0xba>
 8007ab0:	f1c4 0401 	rsb	r4, r4, #1
 8007ab4:	f8ca 4000 	str.w	r4, [sl]
 8007ab8:	f8da 3000 	ldr.w	r3, [sl]
 8007abc:	4499      	add	r9, r3
 8007abe:	e7d3      	b.n	8007a68 <__cvt+0x6a>
 8007ac0:	1c59      	adds	r1, r3, #1
 8007ac2:	9103      	str	r1, [sp, #12]
 8007ac4:	701a      	strb	r2, [r3, #0]
 8007ac6:	e7d9      	b.n	8007a7c <__cvt+0x7e>

08007ac8 <__exponent>:
 8007ac8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007aca:	2900      	cmp	r1, #0
 8007acc:	bfba      	itte	lt
 8007ace:	4249      	neglt	r1, r1
 8007ad0:	232d      	movlt	r3, #45	@ 0x2d
 8007ad2:	232b      	movge	r3, #43	@ 0x2b
 8007ad4:	2909      	cmp	r1, #9
 8007ad6:	7002      	strb	r2, [r0, #0]
 8007ad8:	7043      	strb	r3, [r0, #1]
 8007ada:	dd29      	ble.n	8007b30 <__exponent+0x68>
 8007adc:	f10d 0307 	add.w	r3, sp, #7
 8007ae0:	461d      	mov	r5, r3
 8007ae2:	270a      	movs	r7, #10
 8007ae4:	461a      	mov	r2, r3
 8007ae6:	fbb1 f6f7 	udiv	r6, r1, r7
 8007aea:	fb07 1416 	mls	r4, r7, r6, r1
 8007aee:	3430      	adds	r4, #48	@ 0x30
 8007af0:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007af4:	460c      	mov	r4, r1
 8007af6:	2c63      	cmp	r4, #99	@ 0x63
 8007af8:	f103 33ff 	add.w	r3, r3, #4294967295
 8007afc:	4631      	mov	r1, r6
 8007afe:	dcf1      	bgt.n	8007ae4 <__exponent+0x1c>
 8007b00:	3130      	adds	r1, #48	@ 0x30
 8007b02:	1e94      	subs	r4, r2, #2
 8007b04:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007b08:	1c41      	adds	r1, r0, #1
 8007b0a:	4623      	mov	r3, r4
 8007b0c:	42ab      	cmp	r3, r5
 8007b0e:	d30a      	bcc.n	8007b26 <__exponent+0x5e>
 8007b10:	f10d 0309 	add.w	r3, sp, #9
 8007b14:	1a9b      	subs	r3, r3, r2
 8007b16:	42ac      	cmp	r4, r5
 8007b18:	bf88      	it	hi
 8007b1a:	2300      	movhi	r3, #0
 8007b1c:	3302      	adds	r3, #2
 8007b1e:	4403      	add	r3, r0
 8007b20:	1a18      	subs	r0, r3, r0
 8007b22:	b003      	add	sp, #12
 8007b24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b26:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007b2a:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007b2e:	e7ed      	b.n	8007b0c <__exponent+0x44>
 8007b30:	2330      	movs	r3, #48	@ 0x30
 8007b32:	3130      	adds	r1, #48	@ 0x30
 8007b34:	7083      	strb	r3, [r0, #2]
 8007b36:	70c1      	strb	r1, [r0, #3]
 8007b38:	1d03      	adds	r3, r0, #4
 8007b3a:	e7f1      	b.n	8007b20 <__exponent+0x58>

08007b3c <_printf_float>:
 8007b3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b40:	b08d      	sub	sp, #52	@ 0x34
 8007b42:	460c      	mov	r4, r1
 8007b44:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007b48:	4616      	mov	r6, r2
 8007b4a:	461f      	mov	r7, r3
 8007b4c:	4605      	mov	r5, r0
 8007b4e:	f000 fdbf 	bl	80086d0 <_localeconv_r>
 8007b52:	6803      	ldr	r3, [r0, #0]
 8007b54:	9304      	str	r3, [sp, #16]
 8007b56:	4618      	mov	r0, r3
 8007b58:	f7f8 fb8a 	bl	8000270 <strlen>
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007b60:	f8d8 3000 	ldr.w	r3, [r8]
 8007b64:	9005      	str	r0, [sp, #20]
 8007b66:	3307      	adds	r3, #7
 8007b68:	f023 0307 	bic.w	r3, r3, #7
 8007b6c:	f103 0208 	add.w	r2, r3, #8
 8007b70:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007b74:	f8d4 b000 	ldr.w	fp, [r4]
 8007b78:	f8c8 2000 	str.w	r2, [r8]
 8007b7c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007b80:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007b84:	9307      	str	r3, [sp, #28]
 8007b86:	f8cd 8018 	str.w	r8, [sp, #24]
 8007b8a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007b8e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007b92:	4b9c      	ldr	r3, [pc, #624]	@ (8007e04 <_printf_float+0x2c8>)
 8007b94:	f04f 32ff 	mov.w	r2, #4294967295
 8007b98:	f7f8 ffc8 	bl	8000b2c <__aeabi_dcmpun>
 8007b9c:	bb70      	cbnz	r0, 8007bfc <_printf_float+0xc0>
 8007b9e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007ba2:	4b98      	ldr	r3, [pc, #608]	@ (8007e04 <_printf_float+0x2c8>)
 8007ba4:	f04f 32ff 	mov.w	r2, #4294967295
 8007ba8:	f7f8 ffa2 	bl	8000af0 <__aeabi_dcmple>
 8007bac:	bb30      	cbnz	r0, 8007bfc <_printf_float+0xc0>
 8007bae:	2200      	movs	r2, #0
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	4640      	mov	r0, r8
 8007bb4:	4649      	mov	r1, r9
 8007bb6:	f7f8 ff91 	bl	8000adc <__aeabi_dcmplt>
 8007bba:	b110      	cbz	r0, 8007bc2 <_printf_float+0x86>
 8007bbc:	232d      	movs	r3, #45	@ 0x2d
 8007bbe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007bc2:	4a91      	ldr	r2, [pc, #580]	@ (8007e08 <_printf_float+0x2cc>)
 8007bc4:	4b91      	ldr	r3, [pc, #580]	@ (8007e0c <_printf_float+0x2d0>)
 8007bc6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007bca:	bf94      	ite	ls
 8007bcc:	4690      	movls	r8, r2
 8007bce:	4698      	movhi	r8, r3
 8007bd0:	2303      	movs	r3, #3
 8007bd2:	6123      	str	r3, [r4, #16]
 8007bd4:	f02b 0304 	bic.w	r3, fp, #4
 8007bd8:	6023      	str	r3, [r4, #0]
 8007bda:	f04f 0900 	mov.w	r9, #0
 8007bde:	9700      	str	r7, [sp, #0]
 8007be0:	4633      	mov	r3, r6
 8007be2:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007be4:	4621      	mov	r1, r4
 8007be6:	4628      	mov	r0, r5
 8007be8:	f000 f9d2 	bl	8007f90 <_printf_common>
 8007bec:	3001      	adds	r0, #1
 8007bee:	f040 808d 	bne.w	8007d0c <_printf_float+0x1d0>
 8007bf2:	f04f 30ff 	mov.w	r0, #4294967295
 8007bf6:	b00d      	add	sp, #52	@ 0x34
 8007bf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bfc:	4642      	mov	r2, r8
 8007bfe:	464b      	mov	r3, r9
 8007c00:	4640      	mov	r0, r8
 8007c02:	4649      	mov	r1, r9
 8007c04:	f7f8 ff92 	bl	8000b2c <__aeabi_dcmpun>
 8007c08:	b140      	cbz	r0, 8007c1c <_printf_float+0xe0>
 8007c0a:	464b      	mov	r3, r9
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	bfbc      	itt	lt
 8007c10:	232d      	movlt	r3, #45	@ 0x2d
 8007c12:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007c16:	4a7e      	ldr	r2, [pc, #504]	@ (8007e10 <_printf_float+0x2d4>)
 8007c18:	4b7e      	ldr	r3, [pc, #504]	@ (8007e14 <_printf_float+0x2d8>)
 8007c1a:	e7d4      	b.n	8007bc6 <_printf_float+0x8a>
 8007c1c:	6863      	ldr	r3, [r4, #4]
 8007c1e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007c22:	9206      	str	r2, [sp, #24]
 8007c24:	1c5a      	adds	r2, r3, #1
 8007c26:	d13b      	bne.n	8007ca0 <_printf_float+0x164>
 8007c28:	2306      	movs	r3, #6
 8007c2a:	6063      	str	r3, [r4, #4]
 8007c2c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007c30:	2300      	movs	r3, #0
 8007c32:	6022      	str	r2, [r4, #0]
 8007c34:	9303      	str	r3, [sp, #12]
 8007c36:	ab0a      	add	r3, sp, #40	@ 0x28
 8007c38:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007c3c:	ab09      	add	r3, sp, #36	@ 0x24
 8007c3e:	9300      	str	r3, [sp, #0]
 8007c40:	6861      	ldr	r1, [r4, #4]
 8007c42:	ec49 8b10 	vmov	d0, r8, r9
 8007c46:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007c4a:	4628      	mov	r0, r5
 8007c4c:	f7ff fed7 	bl	80079fe <__cvt>
 8007c50:	9b06      	ldr	r3, [sp, #24]
 8007c52:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007c54:	2b47      	cmp	r3, #71	@ 0x47
 8007c56:	4680      	mov	r8, r0
 8007c58:	d129      	bne.n	8007cae <_printf_float+0x172>
 8007c5a:	1cc8      	adds	r0, r1, #3
 8007c5c:	db02      	blt.n	8007c64 <_printf_float+0x128>
 8007c5e:	6863      	ldr	r3, [r4, #4]
 8007c60:	4299      	cmp	r1, r3
 8007c62:	dd41      	ble.n	8007ce8 <_printf_float+0x1ac>
 8007c64:	f1aa 0a02 	sub.w	sl, sl, #2
 8007c68:	fa5f fa8a 	uxtb.w	sl, sl
 8007c6c:	3901      	subs	r1, #1
 8007c6e:	4652      	mov	r2, sl
 8007c70:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007c74:	9109      	str	r1, [sp, #36]	@ 0x24
 8007c76:	f7ff ff27 	bl	8007ac8 <__exponent>
 8007c7a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007c7c:	1813      	adds	r3, r2, r0
 8007c7e:	2a01      	cmp	r2, #1
 8007c80:	4681      	mov	r9, r0
 8007c82:	6123      	str	r3, [r4, #16]
 8007c84:	dc02      	bgt.n	8007c8c <_printf_float+0x150>
 8007c86:	6822      	ldr	r2, [r4, #0]
 8007c88:	07d2      	lsls	r2, r2, #31
 8007c8a:	d501      	bpl.n	8007c90 <_printf_float+0x154>
 8007c8c:	3301      	adds	r3, #1
 8007c8e:	6123      	str	r3, [r4, #16]
 8007c90:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d0a2      	beq.n	8007bde <_printf_float+0xa2>
 8007c98:	232d      	movs	r3, #45	@ 0x2d
 8007c9a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007c9e:	e79e      	b.n	8007bde <_printf_float+0xa2>
 8007ca0:	9a06      	ldr	r2, [sp, #24]
 8007ca2:	2a47      	cmp	r2, #71	@ 0x47
 8007ca4:	d1c2      	bne.n	8007c2c <_printf_float+0xf0>
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d1c0      	bne.n	8007c2c <_printf_float+0xf0>
 8007caa:	2301      	movs	r3, #1
 8007cac:	e7bd      	b.n	8007c2a <_printf_float+0xee>
 8007cae:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007cb2:	d9db      	bls.n	8007c6c <_printf_float+0x130>
 8007cb4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007cb8:	d118      	bne.n	8007cec <_printf_float+0x1b0>
 8007cba:	2900      	cmp	r1, #0
 8007cbc:	6863      	ldr	r3, [r4, #4]
 8007cbe:	dd0b      	ble.n	8007cd8 <_printf_float+0x19c>
 8007cc0:	6121      	str	r1, [r4, #16]
 8007cc2:	b913      	cbnz	r3, 8007cca <_printf_float+0x18e>
 8007cc4:	6822      	ldr	r2, [r4, #0]
 8007cc6:	07d0      	lsls	r0, r2, #31
 8007cc8:	d502      	bpl.n	8007cd0 <_printf_float+0x194>
 8007cca:	3301      	adds	r3, #1
 8007ccc:	440b      	add	r3, r1
 8007cce:	6123      	str	r3, [r4, #16]
 8007cd0:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007cd2:	f04f 0900 	mov.w	r9, #0
 8007cd6:	e7db      	b.n	8007c90 <_printf_float+0x154>
 8007cd8:	b913      	cbnz	r3, 8007ce0 <_printf_float+0x1a4>
 8007cda:	6822      	ldr	r2, [r4, #0]
 8007cdc:	07d2      	lsls	r2, r2, #31
 8007cde:	d501      	bpl.n	8007ce4 <_printf_float+0x1a8>
 8007ce0:	3302      	adds	r3, #2
 8007ce2:	e7f4      	b.n	8007cce <_printf_float+0x192>
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	e7f2      	b.n	8007cce <_printf_float+0x192>
 8007ce8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007cec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007cee:	4299      	cmp	r1, r3
 8007cf0:	db05      	blt.n	8007cfe <_printf_float+0x1c2>
 8007cf2:	6823      	ldr	r3, [r4, #0]
 8007cf4:	6121      	str	r1, [r4, #16]
 8007cf6:	07d8      	lsls	r0, r3, #31
 8007cf8:	d5ea      	bpl.n	8007cd0 <_printf_float+0x194>
 8007cfa:	1c4b      	adds	r3, r1, #1
 8007cfc:	e7e7      	b.n	8007cce <_printf_float+0x192>
 8007cfe:	2900      	cmp	r1, #0
 8007d00:	bfd4      	ite	le
 8007d02:	f1c1 0202 	rsble	r2, r1, #2
 8007d06:	2201      	movgt	r2, #1
 8007d08:	4413      	add	r3, r2
 8007d0a:	e7e0      	b.n	8007cce <_printf_float+0x192>
 8007d0c:	6823      	ldr	r3, [r4, #0]
 8007d0e:	055a      	lsls	r2, r3, #21
 8007d10:	d407      	bmi.n	8007d22 <_printf_float+0x1e6>
 8007d12:	6923      	ldr	r3, [r4, #16]
 8007d14:	4642      	mov	r2, r8
 8007d16:	4631      	mov	r1, r6
 8007d18:	4628      	mov	r0, r5
 8007d1a:	47b8      	blx	r7
 8007d1c:	3001      	adds	r0, #1
 8007d1e:	d12b      	bne.n	8007d78 <_printf_float+0x23c>
 8007d20:	e767      	b.n	8007bf2 <_printf_float+0xb6>
 8007d22:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007d26:	f240 80dd 	bls.w	8007ee4 <_printf_float+0x3a8>
 8007d2a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007d2e:	2200      	movs	r2, #0
 8007d30:	2300      	movs	r3, #0
 8007d32:	f7f8 fec9 	bl	8000ac8 <__aeabi_dcmpeq>
 8007d36:	2800      	cmp	r0, #0
 8007d38:	d033      	beq.n	8007da2 <_printf_float+0x266>
 8007d3a:	4a37      	ldr	r2, [pc, #220]	@ (8007e18 <_printf_float+0x2dc>)
 8007d3c:	2301      	movs	r3, #1
 8007d3e:	4631      	mov	r1, r6
 8007d40:	4628      	mov	r0, r5
 8007d42:	47b8      	blx	r7
 8007d44:	3001      	adds	r0, #1
 8007d46:	f43f af54 	beq.w	8007bf2 <_printf_float+0xb6>
 8007d4a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007d4e:	4543      	cmp	r3, r8
 8007d50:	db02      	blt.n	8007d58 <_printf_float+0x21c>
 8007d52:	6823      	ldr	r3, [r4, #0]
 8007d54:	07d8      	lsls	r0, r3, #31
 8007d56:	d50f      	bpl.n	8007d78 <_printf_float+0x23c>
 8007d58:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007d5c:	4631      	mov	r1, r6
 8007d5e:	4628      	mov	r0, r5
 8007d60:	47b8      	blx	r7
 8007d62:	3001      	adds	r0, #1
 8007d64:	f43f af45 	beq.w	8007bf2 <_printf_float+0xb6>
 8007d68:	f04f 0900 	mov.w	r9, #0
 8007d6c:	f108 38ff 	add.w	r8, r8, #4294967295
 8007d70:	f104 0a1a 	add.w	sl, r4, #26
 8007d74:	45c8      	cmp	r8, r9
 8007d76:	dc09      	bgt.n	8007d8c <_printf_float+0x250>
 8007d78:	6823      	ldr	r3, [r4, #0]
 8007d7a:	079b      	lsls	r3, r3, #30
 8007d7c:	f100 8103 	bmi.w	8007f86 <_printf_float+0x44a>
 8007d80:	68e0      	ldr	r0, [r4, #12]
 8007d82:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007d84:	4298      	cmp	r0, r3
 8007d86:	bfb8      	it	lt
 8007d88:	4618      	movlt	r0, r3
 8007d8a:	e734      	b.n	8007bf6 <_printf_float+0xba>
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	4652      	mov	r2, sl
 8007d90:	4631      	mov	r1, r6
 8007d92:	4628      	mov	r0, r5
 8007d94:	47b8      	blx	r7
 8007d96:	3001      	adds	r0, #1
 8007d98:	f43f af2b 	beq.w	8007bf2 <_printf_float+0xb6>
 8007d9c:	f109 0901 	add.w	r9, r9, #1
 8007da0:	e7e8      	b.n	8007d74 <_printf_float+0x238>
 8007da2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	dc39      	bgt.n	8007e1c <_printf_float+0x2e0>
 8007da8:	4a1b      	ldr	r2, [pc, #108]	@ (8007e18 <_printf_float+0x2dc>)
 8007daa:	2301      	movs	r3, #1
 8007dac:	4631      	mov	r1, r6
 8007dae:	4628      	mov	r0, r5
 8007db0:	47b8      	blx	r7
 8007db2:	3001      	adds	r0, #1
 8007db4:	f43f af1d 	beq.w	8007bf2 <_printf_float+0xb6>
 8007db8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007dbc:	ea59 0303 	orrs.w	r3, r9, r3
 8007dc0:	d102      	bne.n	8007dc8 <_printf_float+0x28c>
 8007dc2:	6823      	ldr	r3, [r4, #0]
 8007dc4:	07d9      	lsls	r1, r3, #31
 8007dc6:	d5d7      	bpl.n	8007d78 <_printf_float+0x23c>
 8007dc8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007dcc:	4631      	mov	r1, r6
 8007dce:	4628      	mov	r0, r5
 8007dd0:	47b8      	blx	r7
 8007dd2:	3001      	adds	r0, #1
 8007dd4:	f43f af0d 	beq.w	8007bf2 <_printf_float+0xb6>
 8007dd8:	f04f 0a00 	mov.w	sl, #0
 8007ddc:	f104 0b1a 	add.w	fp, r4, #26
 8007de0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007de2:	425b      	negs	r3, r3
 8007de4:	4553      	cmp	r3, sl
 8007de6:	dc01      	bgt.n	8007dec <_printf_float+0x2b0>
 8007de8:	464b      	mov	r3, r9
 8007dea:	e793      	b.n	8007d14 <_printf_float+0x1d8>
 8007dec:	2301      	movs	r3, #1
 8007dee:	465a      	mov	r2, fp
 8007df0:	4631      	mov	r1, r6
 8007df2:	4628      	mov	r0, r5
 8007df4:	47b8      	blx	r7
 8007df6:	3001      	adds	r0, #1
 8007df8:	f43f aefb 	beq.w	8007bf2 <_printf_float+0xb6>
 8007dfc:	f10a 0a01 	add.w	sl, sl, #1
 8007e00:	e7ee      	b.n	8007de0 <_printf_float+0x2a4>
 8007e02:	bf00      	nop
 8007e04:	7fefffff 	.word	0x7fefffff
 8007e08:	0800a520 	.word	0x0800a520
 8007e0c:	0800a524 	.word	0x0800a524
 8007e10:	0800a528 	.word	0x0800a528
 8007e14:	0800a52c 	.word	0x0800a52c
 8007e18:	0800a530 	.word	0x0800a530
 8007e1c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007e1e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007e22:	4553      	cmp	r3, sl
 8007e24:	bfa8      	it	ge
 8007e26:	4653      	movge	r3, sl
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	4699      	mov	r9, r3
 8007e2c:	dc36      	bgt.n	8007e9c <_printf_float+0x360>
 8007e2e:	f04f 0b00 	mov.w	fp, #0
 8007e32:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007e36:	f104 021a 	add.w	r2, r4, #26
 8007e3a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007e3c:	9306      	str	r3, [sp, #24]
 8007e3e:	eba3 0309 	sub.w	r3, r3, r9
 8007e42:	455b      	cmp	r3, fp
 8007e44:	dc31      	bgt.n	8007eaa <_printf_float+0x36e>
 8007e46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e48:	459a      	cmp	sl, r3
 8007e4a:	dc3a      	bgt.n	8007ec2 <_printf_float+0x386>
 8007e4c:	6823      	ldr	r3, [r4, #0]
 8007e4e:	07da      	lsls	r2, r3, #31
 8007e50:	d437      	bmi.n	8007ec2 <_printf_float+0x386>
 8007e52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e54:	ebaa 0903 	sub.w	r9, sl, r3
 8007e58:	9b06      	ldr	r3, [sp, #24]
 8007e5a:	ebaa 0303 	sub.w	r3, sl, r3
 8007e5e:	4599      	cmp	r9, r3
 8007e60:	bfa8      	it	ge
 8007e62:	4699      	movge	r9, r3
 8007e64:	f1b9 0f00 	cmp.w	r9, #0
 8007e68:	dc33      	bgt.n	8007ed2 <_printf_float+0x396>
 8007e6a:	f04f 0800 	mov.w	r8, #0
 8007e6e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007e72:	f104 0b1a 	add.w	fp, r4, #26
 8007e76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e78:	ebaa 0303 	sub.w	r3, sl, r3
 8007e7c:	eba3 0309 	sub.w	r3, r3, r9
 8007e80:	4543      	cmp	r3, r8
 8007e82:	f77f af79 	ble.w	8007d78 <_printf_float+0x23c>
 8007e86:	2301      	movs	r3, #1
 8007e88:	465a      	mov	r2, fp
 8007e8a:	4631      	mov	r1, r6
 8007e8c:	4628      	mov	r0, r5
 8007e8e:	47b8      	blx	r7
 8007e90:	3001      	adds	r0, #1
 8007e92:	f43f aeae 	beq.w	8007bf2 <_printf_float+0xb6>
 8007e96:	f108 0801 	add.w	r8, r8, #1
 8007e9a:	e7ec      	b.n	8007e76 <_printf_float+0x33a>
 8007e9c:	4642      	mov	r2, r8
 8007e9e:	4631      	mov	r1, r6
 8007ea0:	4628      	mov	r0, r5
 8007ea2:	47b8      	blx	r7
 8007ea4:	3001      	adds	r0, #1
 8007ea6:	d1c2      	bne.n	8007e2e <_printf_float+0x2f2>
 8007ea8:	e6a3      	b.n	8007bf2 <_printf_float+0xb6>
 8007eaa:	2301      	movs	r3, #1
 8007eac:	4631      	mov	r1, r6
 8007eae:	4628      	mov	r0, r5
 8007eb0:	9206      	str	r2, [sp, #24]
 8007eb2:	47b8      	blx	r7
 8007eb4:	3001      	adds	r0, #1
 8007eb6:	f43f ae9c 	beq.w	8007bf2 <_printf_float+0xb6>
 8007eba:	9a06      	ldr	r2, [sp, #24]
 8007ebc:	f10b 0b01 	add.w	fp, fp, #1
 8007ec0:	e7bb      	b.n	8007e3a <_printf_float+0x2fe>
 8007ec2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007ec6:	4631      	mov	r1, r6
 8007ec8:	4628      	mov	r0, r5
 8007eca:	47b8      	blx	r7
 8007ecc:	3001      	adds	r0, #1
 8007ece:	d1c0      	bne.n	8007e52 <_printf_float+0x316>
 8007ed0:	e68f      	b.n	8007bf2 <_printf_float+0xb6>
 8007ed2:	9a06      	ldr	r2, [sp, #24]
 8007ed4:	464b      	mov	r3, r9
 8007ed6:	4442      	add	r2, r8
 8007ed8:	4631      	mov	r1, r6
 8007eda:	4628      	mov	r0, r5
 8007edc:	47b8      	blx	r7
 8007ede:	3001      	adds	r0, #1
 8007ee0:	d1c3      	bne.n	8007e6a <_printf_float+0x32e>
 8007ee2:	e686      	b.n	8007bf2 <_printf_float+0xb6>
 8007ee4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007ee8:	f1ba 0f01 	cmp.w	sl, #1
 8007eec:	dc01      	bgt.n	8007ef2 <_printf_float+0x3b6>
 8007eee:	07db      	lsls	r3, r3, #31
 8007ef0:	d536      	bpl.n	8007f60 <_printf_float+0x424>
 8007ef2:	2301      	movs	r3, #1
 8007ef4:	4642      	mov	r2, r8
 8007ef6:	4631      	mov	r1, r6
 8007ef8:	4628      	mov	r0, r5
 8007efa:	47b8      	blx	r7
 8007efc:	3001      	adds	r0, #1
 8007efe:	f43f ae78 	beq.w	8007bf2 <_printf_float+0xb6>
 8007f02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f06:	4631      	mov	r1, r6
 8007f08:	4628      	mov	r0, r5
 8007f0a:	47b8      	blx	r7
 8007f0c:	3001      	adds	r0, #1
 8007f0e:	f43f ae70 	beq.w	8007bf2 <_printf_float+0xb6>
 8007f12:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007f16:	2200      	movs	r2, #0
 8007f18:	2300      	movs	r3, #0
 8007f1a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007f1e:	f7f8 fdd3 	bl	8000ac8 <__aeabi_dcmpeq>
 8007f22:	b9c0      	cbnz	r0, 8007f56 <_printf_float+0x41a>
 8007f24:	4653      	mov	r3, sl
 8007f26:	f108 0201 	add.w	r2, r8, #1
 8007f2a:	4631      	mov	r1, r6
 8007f2c:	4628      	mov	r0, r5
 8007f2e:	47b8      	blx	r7
 8007f30:	3001      	adds	r0, #1
 8007f32:	d10c      	bne.n	8007f4e <_printf_float+0x412>
 8007f34:	e65d      	b.n	8007bf2 <_printf_float+0xb6>
 8007f36:	2301      	movs	r3, #1
 8007f38:	465a      	mov	r2, fp
 8007f3a:	4631      	mov	r1, r6
 8007f3c:	4628      	mov	r0, r5
 8007f3e:	47b8      	blx	r7
 8007f40:	3001      	adds	r0, #1
 8007f42:	f43f ae56 	beq.w	8007bf2 <_printf_float+0xb6>
 8007f46:	f108 0801 	add.w	r8, r8, #1
 8007f4a:	45d0      	cmp	r8, sl
 8007f4c:	dbf3      	blt.n	8007f36 <_printf_float+0x3fa>
 8007f4e:	464b      	mov	r3, r9
 8007f50:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007f54:	e6df      	b.n	8007d16 <_printf_float+0x1da>
 8007f56:	f04f 0800 	mov.w	r8, #0
 8007f5a:	f104 0b1a 	add.w	fp, r4, #26
 8007f5e:	e7f4      	b.n	8007f4a <_printf_float+0x40e>
 8007f60:	2301      	movs	r3, #1
 8007f62:	4642      	mov	r2, r8
 8007f64:	e7e1      	b.n	8007f2a <_printf_float+0x3ee>
 8007f66:	2301      	movs	r3, #1
 8007f68:	464a      	mov	r2, r9
 8007f6a:	4631      	mov	r1, r6
 8007f6c:	4628      	mov	r0, r5
 8007f6e:	47b8      	blx	r7
 8007f70:	3001      	adds	r0, #1
 8007f72:	f43f ae3e 	beq.w	8007bf2 <_printf_float+0xb6>
 8007f76:	f108 0801 	add.w	r8, r8, #1
 8007f7a:	68e3      	ldr	r3, [r4, #12]
 8007f7c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007f7e:	1a5b      	subs	r3, r3, r1
 8007f80:	4543      	cmp	r3, r8
 8007f82:	dcf0      	bgt.n	8007f66 <_printf_float+0x42a>
 8007f84:	e6fc      	b.n	8007d80 <_printf_float+0x244>
 8007f86:	f04f 0800 	mov.w	r8, #0
 8007f8a:	f104 0919 	add.w	r9, r4, #25
 8007f8e:	e7f4      	b.n	8007f7a <_printf_float+0x43e>

08007f90 <_printf_common>:
 8007f90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f94:	4616      	mov	r6, r2
 8007f96:	4698      	mov	r8, r3
 8007f98:	688a      	ldr	r2, [r1, #8]
 8007f9a:	690b      	ldr	r3, [r1, #16]
 8007f9c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	bfb8      	it	lt
 8007fa4:	4613      	movlt	r3, r2
 8007fa6:	6033      	str	r3, [r6, #0]
 8007fa8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007fac:	4607      	mov	r7, r0
 8007fae:	460c      	mov	r4, r1
 8007fb0:	b10a      	cbz	r2, 8007fb6 <_printf_common+0x26>
 8007fb2:	3301      	adds	r3, #1
 8007fb4:	6033      	str	r3, [r6, #0]
 8007fb6:	6823      	ldr	r3, [r4, #0]
 8007fb8:	0699      	lsls	r1, r3, #26
 8007fba:	bf42      	ittt	mi
 8007fbc:	6833      	ldrmi	r3, [r6, #0]
 8007fbe:	3302      	addmi	r3, #2
 8007fc0:	6033      	strmi	r3, [r6, #0]
 8007fc2:	6825      	ldr	r5, [r4, #0]
 8007fc4:	f015 0506 	ands.w	r5, r5, #6
 8007fc8:	d106      	bne.n	8007fd8 <_printf_common+0x48>
 8007fca:	f104 0a19 	add.w	sl, r4, #25
 8007fce:	68e3      	ldr	r3, [r4, #12]
 8007fd0:	6832      	ldr	r2, [r6, #0]
 8007fd2:	1a9b      	subs	r3, r3, r2
 8007fd4:	42ab      	cmp	r3, r5
 8007fd6:	dc26      	bgt.n	8008026 <_printf_common+0x96>
 8007fd8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007fdc:	6822      	ldr	r2, [r4, #0]
 8007fde:	3b00      	subs	r3, #0
 8007fe0:	bf18      	it	ne
 8007fe2:	2301      	movne	r3, #1
 8007fe4:	0692      	lsls	r2, r2, #26
 8007fe6:	d42b      	bmi.n	8008040 <_printf_common+0xb0>
 8007fe8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007fec:	4641      	mov	r1, r8
 8007fee:	4638      	mov	r0, r7
 8007ff0:	47c8      	blx	r9
 8007ff2:	3001      	adds	r0, #1
 8007ff4:	d01e      	beq.n	8008034 <_printf_common+0xa4>
 8007ff6:	6823      	ldr	r3, [r4, #0]
 8007ff8:	6922      	ldr	r2, [r4, #16]
 8007ffa:	f003 0306 	and.w	r3, r3, #6
 8007ffe:	2b04      	cmp	r3, #4
 8008000:	bf02      	ittt	eq
 8008002:	68e5      	ldreq	r5, [r4, #12]
 8008004:	6833      	ldreq	r3, [r6, #0]
 8008006:	1aed      	subeq	r5, r5, r3
 8008008:	68a3      	ldr	r3, [r4, #8]
 800800a:	bf0c      	ite	eq
 800800c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008010:	2500      	movne	r5, #0
 8008012:	4293      	cmp	r3, r2
 8008014:	bfc4      	itt	gt
 8008016:	1a9b      	subgt	r3, r3, r2
 8008018:	18ed      	addgt	r5, r5, r3
 800801a:	2600      	movs	r6, #0
 800801c:	341a      	adds	r4, #26
 800801e:	42b5      	cmp	r5, r6
 8008020:	d11a      	bne.n	8008058 <_printf_common+0xc8>
 8008022:	2000      	movs	r0, #0
 8008024:	e008      	b.n	8008038 <_printf_common+0xa8>
 8008026:	2301      	movs	r3, #1
 8008028:	4652      	mov	r2, sl
 800802a:	4641      	mov	r1, r8
 800802c:	4638      	mov	r0, r7
 800802e:	47c8      	blx	r9
 8008030:	3001      	adds	r0, #1
 8008032:	d103      	bne.n	800803c <_printf_common+0xac>
 8008034:	f04f 30ff 	mov.w	r0, #4294967295
 8008038:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800803c:	3501      	adds	r5, #1
 800803e:	e7c6      	b.n	8007fce <_printf_common+0x3e>
 8008040:	18e1      	adds	r1, r4, r3
 8008042:	1c5a      	adds	r2, r3, #1
 8008044:	2030      	movs	r0, #48	@ 0x30
 8008046:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800804a:	4422      	add	r2, r4
 800804c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008050:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008054:	3302      	adds	r3, #2
 8008056:	e7c7      	b.n	8007fe8 <_printf_common+0x58>
 8008058:	2301      	movs	r3, #1
 800805a:	4622      	mov	r2, r4
 800805c:	4641      	mov	r1, r8
 800805e:	4638      	mov	r0, r7
 8008060:	47c8      	blx	r9
 8008062:	3001      	adds	r0, #1
 8008064:	d0e6      	beq.n	8008034 <_printf_common+0xa4>
 8008066:	3601      	adds	r6, #1
 8008068:	e7d9      	b.n	800801e <_printf_common+0x8e>
	...

0800806c <_printf_i>:
 800806c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008070:	7e0f      	ldrb	r7, [r1, #24]
 8008072:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008074:	2f78      	cmp	r7, #120	@ 0x78
 8008076:	4691      	mov	r9, r2
 8008078:	4680      	mov	r8, r0
 800807a:	460c      	mov	r4, r1
 800807c:	469a      	mov	sl, r3
 800807e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008082:	d807      	bhi.n	8008094 <_printf_i+0x28>
 8008084:	2f62      	cmp	r7, #98	@ 0x62
 8008086:	d80a      	bhi.n	800809e <_printf_i+0x32>
 8008088:	2f00      	cmp	r7, #0
 800808a:	f000 80d2 	beq.w	8008232 <_printf_i+0x1c6>
 800808e:	2f58      	cmp	r7, #88	@ 0x58
 8008090:	f000 80b9 	beq.w	8008206 <_printf_i+0x19a>
 8008094:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008098:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800809c:	e03a      	b.n	8008114 <_printf_i+0xa8>
 800809e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80080a2:	2b15      	cmp	r3, #21
 80080a4:	d8f6      	bhi.n	8008094 <_printf_i+0x28>
 80080a6:	a101      	add	r1, pc, #4	@ (adr r1, 80080ac <_printf_i+0x40>)
 80080a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80080ac:	08008105 	.word	0x08008105
 80080b0:	08008119 	.word	0x08008119
 80080b4:	08008095 	.word	0x08008095
 80080b8:	08008095 	.word	0x08008095
 80080bc:	08008095 	.word	0x08008095
 80080c0:	08008095 	.word	0x08008095
 80080c4:	08008119 	.word	0x08008119
 80080c8:	08008095 	.word	0x08008095
 80080cc:	08008095 	.word	0x08008095
 80080d0:	08008095 	.word	0x08008095
 80080d4:	08008095 	.word	0x08008095
 80080d8:	08008219 	.word	0x08008219
 80080dc:	08008143 	.word	0x08008143
 80080e0:	080081d3 	.word	0x080081d3
 80080e4:	08008095 	.word	0x08008095
 80080e8:	08008095 	.word	0x08008095
 80080ec:	0800823b 	.word	0x0800823b
 80080f0:	08008095 	.word	0x08008095
 80080f4:	08008143 	.word	0x08008143
 80080f8:	08008095 	.word	0x08008095
 80080fc:	08008095 	.word	0x08008095
 8008100:	080081db 	.word	0x080081db
 8008104:	6833      	ldr	r3, [r6, #0]
 8008106:	1d1a      	adds	r2, r3, #4
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	6032      	str	r2, [r6, #0]
 800810c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008110:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008114:	2301      	movs	r3, #1
 8008116:	e09d      	b.n	8008254 <_printf_i+0x1e8>
 8008118:	6833      	ldr	r3, [r6, #0]
 800811a:	6820      	ldr	r0, [r4, #0]
 800811c:	1d19      	adds	r1, r3, #4
 800811e:	6031      	str	r1, [r6, #0]
 8008120:	0606      	lsls	r6, r0, #24
 8008122:	d501      	bpl.n	8008128 <_printf_i+0xbc>
 8008124:	681d      	ldr	r5, [r3, #0]
 8008126:	e003      	b.n	8008130 <_printf_i+0xc4>
 8008128:	0645      	lsls	r5, r0, #25
 800812a:	d5fb      	bpl.n	8008124 <_printf_i+0xb8>
 800812c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008130:	2d00      	cmp	r5, #0
 8008132:	da03      	bge.n	800813c <_printf_i+0xd0>
 8008134:	232d      	movs	r3, #45	@ 0x2d
 8008136:	426d      	negs	r5, r5
 8008138:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800813c:	4859      	ldr	r0, [pc, #356]	@ (80082a4 <_printf_i+0x238>)
 800813e:	230a      	movs	r3, #10
 8008140:	e011      	b.n	8008166 <_printf_i+0xfa>
 8008142:	6821      	ldr	r1, [r4, #0]
 8008144:	6833      	ldr	r3, [r6, #0]
 8008146:	0608      	lsls	r0, r1, #24
 8008148:	f853 5b04 	ldr.w	r5, [r3], #4
 800814c:	d402      	bmi.n	8008154 <_printf_i+0xe8>
 800814e:	0649      	lsls	r1, r1, #25
 8008150:	bf48      	it	mi
 8008152:	b2ad      	uxthmi	r5, r5
 8008154:	2f6f      	cmp	r7, #111	@ 0x6f
 8008156:	4853      	ldr	r0, [pc, #332]	@ (80082a4 <_printf_i+0x238>)
 8008158:	6033      	str	r3, [r6, #0]
 800815a:	bf14      	ite	ne
 800815c:	230a      	movne	r3, #10
 800815e:	2308      	moveq	r3, #8
 8008160:	2100      	movs	r1, #0
 8008162:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008166:	6866      	ldr	r6, [r4, #4]
 8008168:	60a6      	str	r6, [r4, #8]
 800816a:	2e00      	cmp	r6, #0
 800816c:	bfa2      	ittt	ge
 800816e:	6821      	ldrge	r1, [r4, #0]
 8008170:	f021 0104 	bicge.w	r1, r1, #4
 8008174:	6021      	strge	r1, [r4, #0]
 8008176:	b90d      	cbnz	r5, 800817c <_printf_i+0x110>
 8008178:	2e00      	cmp	r6, #0
 800817a:	d04b      	beq.n	8008214 <_printf_i+0x1a8>
 800817c:	4616      	mov	r6, r2
 800817e:	fbb5 f1f3 	udiv	r1, r5, r3
 8008182:	fb03 5711 	mls	r7, r3, r1, r5
 8008186:	5dc7      	ldrb	r7, [r0, r7]
 8008188:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800818c:	462f      	mov	r7, r5
 800818e:	42bb      	cmp	r3, r7
 8008190:	460d      	mov	r5, r1
 8008192:	d9f4      	bls.n	800817e <_printf_i+0x112>
 8008194:	2b08      	cmp	r3, #8
 8008196:	d10b      	bne.n	80081b0 <_printf_i+0x144>
 8008198:	6823      	ldr	r3, [r4, #0]
 800819a:	07df      	lsls	r7, r3, #31
 800819c:	d508      	bpl.n	80081b0 <_printf_i+0x144>
 800819e:	6923      	ldr	r3, [r4, #16]
 80081a0:	6861      	ldr	r1, [r4, #4]
 80081a2:	4299      	cmp	r1, r3
 80081a4:	bfde      	ittt	le
 80081a6:	2330      	movle	r3, #48	@ 0x30
 80081a8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80081ac:	f106 36ff 	addle.w	r6, r6, #4294967295
 80081b0:	1b92      	subs	r2, r2, r6
 80081b2:	6122      	str	r2, [r4, #16]
 80081b4:	f8cd a000 	str.w	sl, [sp]
 80081b8:	464b      	mov	r3, r9
 80081ba:	aa03      	add	r2, sp, #12
 80081bc:	4621      	mov	r1, r4
 80081be:	4640      	mov	r0, r8
 80081c0:	f7ff fee6 	bl	8007f90 <_printf_common>
 80081c4:	3001      	adds	r0, #1
 80081c6:	d14a      	bne.n	800825e <_printf_i+0x1f2>
 80081c8:	f04f 30ff 	mov.w	r0, #4294967295
 80081cc:	b004      	add	sp, #16
 80081ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081d2:	6823      	ldr	r3, [r4, #0]
 80081d4:	f043 0320 	orr.w	r3, r3, #32
 80081d8:	6023      	str	r3, [r4, #0]
 80081da:	4833      	ldr	r0, [pc, #204]	@ (80082a8 <_printf_i+0x23c>)
 80081dc:	2778      	movs	r7, #120	@ 0x78
 80081de:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80081e2:	6823      	ldr	r3, [r4, #0]
 80081e4:	6831      	ldr	r1, [r6, #0]
 80081e6:	061f      	lsls	r7, r3, #24
 80081e8:	f851 5b04 	ldr.w	r5, [r1], #4
 80081ec:	d402      	bmi.n	80081f4 <_printf_i+0x188>
 80081ee:	065f      	lsls	r7, r3, #25
 80081f0:	bf48      	it	mi
 80081f2:	b2ad      	uxthmi	r5, r5
 80081f4:	6031      	str	r1, [r6, #0]
 80081f6:	07d9      	lsls	r1, r3, #31
 80081f8:	bf44      	itt	mi
 80081fa:	f043 0320 	orrmi.w	r3, r3, #32
 80081fe:	6023      	strmi	r3, [r4, #0]
 8008200:	b11d      	cbz	r5, 800820a <_printf_i+0x19e>
 8008202:	2310      	movs	r3, #16
 8008204:	e7ac      	b.n	8008160 <_printf_i+0xf4>
 8008206:	4827      	ldr	r0, [pc, #156]	@ (80082a4 <_printf_i+0x238>)
 8008208:	e7e9      	b.n	80081de <_printf_i+0x172>
 800820a:	6823      	ldr	r3, [r4, #0]
 800820c:	f023 0320 	bic.w	r3, r3, #32
 8008210:	6023      	str	r3, [r4, #0]
 8008212:	e7f6      	b.n	8008202 <_printf_i+0x196>
 8008214:	4616      	mov	r6, r2
 8008216:	e7bd      	b.n	8008194 <_printf_i+0x128>
 8008218:	6833      	ldr	r3, [r6, #0]
 800821a:	6825      	ldr	r5, [r4, #0]
 800821c:	6961      	ldr	r1, [r4, #20]
 800821e:	1d18      	adds	r0, r3, #4
 8008220:	6030      	str	r0, [r6, #0]
 8008222:	062e      	lsls	r6, r5, #24
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	d501      	bpl.n	800822c <_printf_i+0x1c0>
 8008228:	6019      	str	r1, [r3, #0]
 800822a:	e002      	b.n	8008232 <_printf_i+0x1c6>
 800822c:	0668      	lsls	r0, r5, #25
 800822e:	d5fb      	bpl.n	8008228 <_printf_i+0x1bc>
 8008230:	8019      	strh	r1, [r3, #0]
 8008232:	2300      	movs	r3, #0
 8008234:	6123      	str	r3, [r4, #16]
 8008236:	4616      	mov	r6, r2
 8008238:	e7bc      	b.n	80081b4 <_printf_i+0x148>
 800823a:	6833      	ldr	r3, [r6, #0]
 800823c:	1d1a      	adds	r2, r3, #4
 800823e:	6032      	str	r2, [r6, #0]
 8008240:	681e      	ldr	r6, [r3, #0]
 8008242:	6862      	ldr	r2, [r4, #4]
 8008244:	2100      	movs	r1, #0
 8008246:	4630      	mov	r0, r6
 8008248:	f7f7 ffc2 	bl	80001d0 <memchr>
 800824c:	b108      	cbz	r0, 8008252 <_printf_i+0x1e6>
 800824e:	1b80      	subs	r0, r0, r6
 8008250:	6060      	str	r0, [r4, #4]
 8008252:	6863      	ldr	r3, [r4, #4]
 8008254:	6123      	str	r3, [r4, #16]
 8008256:	2300      	movs	r3, #0
 8008258:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800825c:	e7aa      	b.n	80081b4 <_printf_i+0x148>
 800825e:	6923      	ldr	r3, [r4, #16]
 8008260:	4632      	mov	r2, r6
 8008262:	4649      	mov	r1, r9
 8008264:	4640      	mov	r0, r8
 8008266:	47d0      	blx	sl
 8008268:	3001      	adds	r0, #1
 800826a:	d0ad      	beq.n	80081c8 <_printf_i+0x15c>
 800826c:	6823      	ldr	r3, [r4, #0]
 800826e:	079b      	lsls	r3, r3, #30
 8008270:	d413      	bmi.n	800829a <_printf_i+0x22e>
 8008272:	68e0      	ldr	r0, [r4, #12]
 8008274:	9b03      	ldr	r3, [sp, #12]
 8008276:	4298      	cmp	r0, r3
 8008278:	bfb8      	it	lt
 800827a:	4618      	movlt	r0, r3
 800827c:	e7a6      	b.n	80081cc <_printf_i+0x160>
 800827e:	2301      	movs	r3, #1
 8008280:	4632      	mov	r2, r6
 8008282:	4649      	mov	r1, r9
 8008284:	4640      	mov	r0, r8
 8008286:	47d0      	blx	sl
 8008288:	3001      	adds	r0, #1
 800828a:	d09d      	beq.n	80081c8 <_printf_i+0x15c>
 800828c:	3501      	adds	r5, #1
 800828e:	68e3      	ldr	r3, [r4, #12]
 8008290:	9903      	ldr	r1, [sp, #12]
 8008292:	1a5b      	subs	r3, r3, r1
 8008294:	42ab      	cmp	r3, r5
 8008296:	dcf2      	bgt.n	800827e <_printf_i+0x212>
 8008298:	e7eb      	b.n	8008272 <_printf_i+0x206>
 800829a:	2500      	movs	r5, #0
 800829c:	f104 0619 	add.w	r6, r4, #25
 80082a0:	e7f5      	b.n	800828e <_printf_i+0x222>
 80082a2:	bf00      	nop
 80082a4:	0800a532 	.word	0x0800a532
 80082a8:	0800a543 	.word	0x0800a543

080082ac <std>:
 80082ac:	2300      	movs	r3, #0
 80082ae:	b510      	push	{r4, lr}
 80082b0:	4604      	mov	r4, r0
 80082b2:	e9c0 3300 	strd	r3, r3, [r0]
 80082b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80082ba:	6083      	str	r3, [r0, #8]
 80082bc:	8181      	strh	r1, [r0, #12]
 80082be:	6643      	str	r3, [r0, #100]	@ 0x64
 80082c0:	81c2      	strh	r2, [r0, #14]
 80082c2:	6183      	str	r3, [r0, #24]
 80082c4:	4619      	mov	r1, r3
 80082c6:	2208      	movs	r2, #8
 80082c8:	305c      	adds	r0, #92	@ 0x5c
 80082ca:	f000 f9f9 	bl	80086c0 <memset>
 80082ce:	4b0d      	ldr	r3, [pc, #52]	@ (8008304 <std+0x58>)
 80082d0:	6263      	str	r3, [r4, #36]	@ 0x24
 80082d2:	4b0d      	ldr	r3, [pc, #52]	@ (8008308 <std+0x5c>)
 80082d4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80082d6:	4b0d      	ldr	r3, [pc, #52]	@ (800830c <std+0x60>)
 80082d8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80082da:	4b0d      	ldr	r3, [pc, #52]	@ (8008310 <std+0x64>)
 80082dc:	6323      	str	r3, [r4, #48]	@ 0x30
 80082de:	4b0d      	ldr	r3, [pc, #52]	@ (8008314 <std+0x68>)
 80082e0:	6224      	str	r4, [r4, #32]
 80082e2:	429c      	cmp	r4, r3
 80082e4:	d006      	beq.n	80082f4 <std+0x48>
 80082e6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80082ea:	4294      	cmp	r4, r2
 80082ec:	d002      	beq.n	80082f4 <std+0x48>
 80082ee:	33d0      	adds	r3, #208	@ 0xd0
 80082f0:	429c      	cmp	r4, r3
 80082f2:	d105      	bne.n	8008300 <std+0x54>
 80082f4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80082f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80082fc:	f000 ba5c 	b.w	80087b8 <__retarget_lock_init_recursive>
 8008300:	bd10      	pop	{r4, pc}
 8008302:	bf00      	nop
 8008304:	08008511 	.word	0x08008511
 8008308:	08008533 	.word	0x08008533
 800830c:	0800856b 	.word	0x0800856b
 8008310:	0800858f 	.word	0x0800858f
 8008314:	20000584 	.word	0x20000584

08008318 <stdio_exit_handler>:
 8008318:	4a02      	ldr	r2, [pc, #8]	@ (8008324 <stdio_exit_handler+0xc>)
 800831a:	4903      	ldr	r1, [pc, #12]	@ (8008328 <stdio_exit_handler+0x10>)
 800831c:	4803      	ldr	r0, [pc, #12]	@ (800832c <stdio_exit_handler+0x14>)
 800831e:	f000 b869 	b.w	80083f4 <_fwalk_sglue>
 8008322:	bf00      	nop
 8008324:	2000000c 	.word	0x2000000c
 8008328:	0800a0e9 	.word	0x0800a0e9
 800832c:	2000001c 	.word	0x2000001c

08008330 <cleanup_stdio>:
 8008330:	6841      	ldr	r1, [r0, #4]
 8008332:	4b0c      	ldr	r3, [pc, #48]	@ (8008364 <cleanup_stdio+0x34>)
 8008334:	4299      	cmp	r1, r3
 8008336:	b510      	push	{r4, lr}
 8008338:	4604      	mov	r4, r0
 800833a:	d001      	beq.n	8008340 <cleanup_stdio+0x10>
 800833c:	f001 fed4 	bl	800a0e8 <_fflush_r>
 8008340:	68a1      	ldr	r1, [r4, #8]
 8008342:	4b09      	ldr	r3, [pc, #36]	@ (8008368 <cleanup_stdio+0x38>)
 8008344:	4299      	cmp	r1, r3
 8008346:	d002      	beq.n	800834e <cleanup_stdio+0x1e>
 8008348:	4620      	mov	r0, r4
 800834a:	f001 fecd 	bl	800a0e8 <_fflush_r>
 800834e:	68e1      	ldr	r1, [r4, #12]
 8008350:	4b06      	ldr	r3, [pc, #24]	@ (800836c <cleanup_stdio+0x3c>)
 8008352:	4299      	cmp	r1, r3
 8008354:	d004      	beq.n	8008360 <cleanup_stdio+0x30>
 8008356:	4620      	mov	r0, r4
 8008358:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800835c:	f001 bec4 	b.w	800a0e8 <_fflush_r>
 8008360:	bd10      	pop	{r4, pc}
 8008362:	bf00      	nop
 8008364:	20000584 	.word	0x20000584
 8008368:	200005ec 	.word	0x200005ec
 800836c:	20000654 	.word	0x20000654

08008370 <global_stdio_init.part.0>:
 8008370:	b510      	push	{r4, lr}
 8008372:	4b0b      	ldr	r3, [pc, #44]	@ (80083a0 <global_stdio_init.part.0+0x30>)
 8008374:	4c0b      	ldr	r4, [pc, #44]	@ (80083a4 <global_stdio_init.part.0+0x34>)
 8008376:	4a0c      	ldr	r2, [pc, #48]	@ (80083a8 <global_stdio_init.part.0+0x38>)
 8008378:	601a      	str	r2, [r3, #0]
 800837a:	4620      	mov	r0, r4
 800837c:	2200      	movs	r2, #0
 800837e:	2104      	movs	r1, #4
 8008380:	f7ff ff94 	bl	80082ac <std>
 8008384:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008388:	2201      	movs	r2, #1
 800838a:	2109      	movs	r1, #9
 800838c:	f7ff ff8e 	bl	80082ac <std>
 8008390:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008394:	2202      	movs	r2, #2
 8008396:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800839a:	2112      	movs	r1, #18
 800839c:	f7ff bf86 	b.w	80082ac <std>
 80083a0:	200006bc 	.word	0x200006bc
 80083a4:	20000584 	.word	0x20000584
 80083a8:	08008319 	.word	0x08008319

080083ac <__sfp_lock_acquire>:
 80083ac:	4801      	ldr	r0, [pc, #4]	@ (80083b4 <__sfp_lock_acquire+0x8>)
 80083ae:	f000 ba04 	b.w	80087ba <__retarget_lock_acquire_recursive>
 80083b2:	bf00      	nop
 80083b4:	200006c5 	.word	0x200006c5

080083b8 <__sfp_lock_release>:
 80083b8:	4801      	ldr	r0, [pc, #4]	@ (80083c0 <__sfp_lock_release+0x8>)
 80083ba:	f000 b9ff 	b.w	80087bc <__retarget_lock_release_recursive>
 80083be:	bf00      	nop
 80083c0:	200006c5 	.word	0x200006c5

080083c4 <__sinit>:
 80083c4:	b510      	push	{r4, lr}
 80083c6:	4604      	mov	r4, r0
 80083c8:	f7ff fff0 	bl	80083ac <__sfp_lock_acquire>
 80083cc:	6a23      	ldr	r3, [r4, #32]
 80083ce:	b11b      	cbz	r3, 80083d8 <__sinit+0x14>
 80083d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80083d4:	f7ff bff0 	b.w	80083b8 <__sfp_lock_release>
 80083d8:	4b04      	ldr	r3, [pc, #16]	@ (80083ec <__sinit+0x28>)
 80083da:	6223      	str	r3, [r4, #32]
 80083dc:	4b04      	ldr	r3, [pc, #16]	@ (80083f0 <__sinit+0x2c>)
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d1f5      	bne.n	80083d0 <__sinit+0xc>
 80083e4:	f7ff ffc4 	bl	8008370 <global_stdio_init.part.0>
 80083e8:	e7f2      	b.n	80083d0 <__sinit+0xc>
 80083ea:	bf00      	nop
 80083ec:	08008331 	.word	0x08008331
 80083f0:	200006bc 	.word	0x200006bc

080083f4 <_fwalk_sglue>:
 80083f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083f8:	4607      	mov	r7, r0
 80083fa:	4688      	mov	r8, r1
 80083fc:	4614      	mov	r4, r2
 80083fe:	2600      	movs	r6, #0
 8008400:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008404:	f1b9 0901 	subs.w	r9, r9, #1
 8008408:	d505      	bpl.n	8008416 <_fwalk_sglue+0x22>
 800840a:	6824      	ldr	r4, [r4, #0]
 800840c:	2c00      	cmp	r4, #0
 800840e:	d1f7      	bne.n	8008400 <_fwalk_sglue+0xc>
 8008410:	4630      	mov	r0, r6
 8008412:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008416:	89ab      	ldrh	r3, [r5, #12]
 8008418:	2b01      	cmp	r3, #1
 800841a:	d907      	bls.n	800842c <_fwalk_sglue+0x38>
 800841c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008420:	3301      	adds	r3, #1
 8008422:	d003      	beq.n	800842c <_fwalk_sglue+0x38>
 8008424:	4629      	mov	r1, r5
 8008426:	4638      	mov	r0, r7
 8008428:	47c0      	blx	r8
 800842a:	4306      	orrs	r6, r0
 800842c:	3568      	adds	r5, #104	@ 0x68
 800842e:	e7e9      	b.n	8008404 <_fwalk_sglue+0x10>

08008430 <iprintf>:
 8008430:	b40f      	push	{r0, r1, r2, r3}
 8008432:	b507      	push	{r0, r1, r2, lr}
 8008434:	4906      	ldr	r1, [pc, #24]	@ (8008450 <iprintf+0x20>)
 8008436:	ab04      	add	r3, sp, #16
 8008438:	6808      	ldr	r0, [r1, #0]
 800843a:	f853 2b04 	ldr.w	r2, [r3], #4
 800843e:	6881      	ldr	r1, [r0, #8]
 8008440:	9301      	str	r3, [sp, #4]
 8008442:	f001 fcb5 	bl	8009db0 <_vfiprintf_r>
 8008446:	b003      	add	sp, #12
 8008448:	f85d eb04 	ldr.w	lr, [sp], #4
 800844c:	b004      	add	sp, #16
 800844e:	4770      	bx	lr
 8008450:	20000018 	.word	0x20000018

08008454 <_puts_r>:
 8008454:	6a03      	ldr	r3, [r0, #32]
 8008456:	b570      	push	{r4, r5, r6, lr}
 8008458:	6884      	ldr	r4, [r0, #8]
 800845a:	4605      	mov	r5, r0
 800845c:	460e      	mov	r6, r1
 800845e:	b90b      	cbnz	r3, 8008464 <_puts_r+0x10>
 8008460:	f7ff ffb0 	bl	80083c4 <__sinit>
 8008464:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008466:	07db      	lsls	r3, r3, #31
 8008468:	d405      	bmi.n	8008476 <_puts_r+0x22>
 800846a:	89a3      	ldrh	r3, [r4, #12]
 800846c:	0598      	lsls	r0, r3, #22
 800846e:	d402      	bmi.n	8008476 <_puts_r+0x22>
 8008470:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008472:	f000 f9a2 	bl	80087ba <__retarget_lock_acquire_recursive>
 8008476:	89a3      	ldrh	r3, [r4, #12]
 8008478:	0719      	lsls	r1, r3, #28
 800847a:	d502      	bpl.n	8008482 <_puts_r+0x2e>
 800847c:	6923      	ldr	r3, [r4, #16]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d135      	bne.n	80084ee <_puts_r+0x9a>
 8008482:	4621      	mov	r1, r4
 8008484:	4628      	mov	r0, r5
 8008486:	f000 f8c5 	bl	8008614 <__swsetup_r>
 800848a:	b380      	cbz	r0, 80084ee <_puts_r+0x9a>
 800848c:	f04f 35ff 	mov.w	r5, #4294967295
 8008490:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008492:	07da      	lsls	r2, r3, #31
 8008494:	d405      	bmi.n	80084a2 <_puts_r+0x4e>
 8008496:	89a3      	ldrh	r3, [r4, #12]
 8008498:	059b      	lsls	r3, r3, #22
 800849a:	d402      	bmi.n	80084a2 <_puts_r+0x4e>
 800849c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800849e:	f000 f98d 	bl	80087bc <__retarget_lock_release_recursive>
 80084a2:	4628      	mov	r0, r5
 80084a4:	bd70      	pop	{r4, r5, r6, pc}
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	da04      	bge.n	80084b4 <_puts_r+0x60>
 80084aa:	69a2      	ldr	r2, [r4, #24]
 80084ac:	429a      	cmp	r2, r3
 80084ae:	dc17      	bgt.n	80084e0 <_puts_r+0x8c>
 80084b0:	290a      	cmp	r1, #10
 80084b2:	d015      	beq.n	80084e0 <_puts_r+0x8c>
 80084b4:	6823      	ldr	r3, [r4, #0]
 80084b6:	1c5a      	adds	r2, r3, #1
 80084b8:	6022      	str	r2, [r4, #0]
 80084ba:	7019      	strb	r1, [r3, #0]
 80084bc:	68a3      	ldr	r3, [r4, #8]
 80084be:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80084c2:	3b01      	subs	r3, #1
 80084c4:	60a3      	str	r3, [r4, #8]
 80084c6:	2900      	cmp	r1, #0
 80084c8:	d1ed      	bne.n	80084a6 <_puts_r+0x52>
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	da11      	bge.n	80084f2 <_puts_r+0x9e>
 80084ce:	4622      	mov	r2, r4
 80084d0:	210a      	movs	r1, #10
 80084d2:	4628      	mov	r0, r5
 80084d4:	f000 f85f 	bl	8008596 <__swbuf_r>
 80084d8:	3001      	adds	r0, #1
 80084da:	d0d7      	beq.n	800848c <_puts_r+0x38>
 80084dc:	250a      	movs	r5, #10
 80084de:	e7d7      	b.n	8008490 <_puts_r+0x3c>
 80084e0:	4622      	mov	r2, r4
 80084e2:	4628      	mov	r0, r5
 80084e4:	f000 f857 	bl	8008596 <__swbuf_r>
 80084e8:	3001      	adds	r0, #1
 80084ea:	d1e7      	bne.n	80084bc <_puts_r+0x68>
 80084ec:	e7ce      	b.n	800848c <_puts_r+0x38>
 80084ee:	3e01      	subs	r6, #1
 80084f0:	e7e4      	b.n	80084bc <_puts_r+0x68>
 80084f2:	6823      	ldr	r3, [r4, #0]
 80084f4:	1c5a      	adds	r2, r3, #1
 80084f6:	6022      	str	r2, [r4, #0]
 80084f8:	220a      	movs	r2, #10
 80084fa:	701a      	strb	r2, [r3, #0]
 80084fc:	e7ee      	b.n	80084dc <_puts_r+0x88>
	...

08008500 <puts>:
 8008500:	4b02      	ldr	r3, [pc, #8]	@ (800850c <puts+0xc>)
 8008502:	4601      	mov	r1, r0
 8008504:	6818      	ldr	r0, [r3, #0]
 8008506:	f7ff bfa5 	b.w	8008454 <_puts_r>
 800850a:	bf00      	nop
 800850c:	20000018 	.word	0x20000018

08008510 <__sread>:
 8008510:	b510      	push	{r4, lr}
 8008512:	460c      	mov	r4, r1
 8008514:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008518:	f000 f900 	bl	800871c <_read_r>
 800851c:	2800      	cmp	r0, #0
 800851e:	bfab      	itete	ge
 8008520:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008522:	89a3      	ldrhlt	r3, [r4, #12]
 8008524:	181b      	addge	r3, r3, r0
 8008526:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800852a:	bfac      	ite	ge
 800852c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800852e:	81a3      	strhlt	r3, [r4, #12]
 8008530:	bd10      	pop	{r4, pc}

08008532 <__swrite>:
 8008532:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008536:	461f      	mov	r7, r3
 8008538:	898b      	ldrh	r3, [r1, #12]
 800853a:	05db      	lsls	r3, r3, #23
 800853c:	4605      	mov	r5, r0
 800853e:	460c      	mov	r4, r1
 8008540:	4616      	mov	r6, r2
 8008542:	d505      	bpl.n	8008550 <__swrite+0x1e>
 8008544:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008548:	2302      	movs	r3, #2
 800854a:	2200      	movs	r2, #0
 800854c:	f000 f8d4 	bl	80086f8 <_lseek_r>
 8008550:	89a3      	ldrh	r3, [r4, #12]
 8008552:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008556:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800855a:	81a3      	strh	r3, [r4, #12]
 800855c:	4632      	mov	r2, r6
 800855e:	463b      	mov	r3, r7
 8008560:	4628      	mov	r0, r5
 8008562:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008566:	f000 b8eb 	b.w	8008740 <_write_r>

0800856a <__sseek>:
 800856a:	b510      	push	{r4, lr}
 800856c:	460c      	mov	r4, r1
 800856e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008572:	f000 f8c1 	bl	80086f8 <_lseek_r>
 8008576:	1c43      	adds	r3, r0, #1
 8008578:	89a3      	ldrh	r3, [r4, #12]
 800857a:	bf15      	itete	ne
 800857c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800857e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008582:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008586:	81a3      	strheq	r3, [r4, #12]
 8008588:	bf18      	it	ne
 800858a:	81a3      	strhne	r3, [r4, #12]
 800858c:	bd10      	pop	{r4, pc}

0800858e <__sclose>:
 800858e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008592:	f000 b8a1 	b.w	80086d8 <_close_r>

08008596 <__swbuf_r>:
 8008596:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008598:	460e      	mov	r6, r1
 800859a:	4614      	mov	r4, r2
 800859c:	4605      	mov	r5, r0
 800859e:	b118      	cbz	r0, 80085a8 <__swbuf_r+0x12>
 80085a0:	6a03      	ldr	r3, [r0, #32]
 80085a2:	b90b      	cbnz	r3, 80085a8 <__swbuf_r+0x12>
 80085a4:	f7ff ff0e 	bl	80083c4 <__sinit>
 80085a8:	69a3      	ldr	r3, [r4, #24]
 80085aa:	60a3      	str	r3, [r4, #8]
 80085ac:	89a3      	ldrh	r3, [r4, #12]
 80085ae:	071a      	lsls	r2, r3, #28
 80085b0:	d501      	bpl.n	80085b6 <__swbuf_r+0x20>
 80085b2:	6923      	ldr	r3, [r4, #16]
 80085b4:	b943      	cbnz	r3, 80085c8 <__swbuf_r+0x32>
 80085b6:	4621      	mov	r1, r4
 80085b8:	4628      	mov	r0, r5
 80085ba:	f000 f82b 	bl	8008614 <__swsetup_r>
 80085be:	b118      	cbz	r0, 80085c8 <__swbuf_r+0x32>
 80085c0:	f04f 37ff 	mov.w	r7, #4294967295
 80085c4:	4638      	mov	r0, r7
 80085c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085c8:	6823      	ldr	r3, [r4, #0]
 80085ca:	6922      	ldr	r2, [r4, #16]
 80085cc:	1a98      	subs	r0, r3, r2
 80085ce:	6963      	ldr	r3, [r4, #20]
 80085d0:	b2f6      	uxtb	r6, r6
 80085d2:	4283      	cmp	r3, r0
 80085d4:	4637      	mov	r7, r6
 80085d6:	dc05      	bgt.n	80085e4 <__swbuf_r+0x4e>
 80085d8:	4621      	mov	r1, r4
 80085da:	4628      	mov	r0, r5
 80085dc:	f001 fd84 	bl	800a0e8 <_fflush_r>
 80085e0:	2800      	cmp	r0, #0
 80085e2:	d1ed      	bne.n	80085c0 <__swbuf_r+0x2a>
 80085e4:	68a3      	ldr	r3, [r4, #8]
 80085e6:	3b01      	subs	r3, #1
 80085e8:	60a3      	str	r3, [r4, #8]
 80085ea:	6823      	ldr	r3, [r4, #0]
 80085ec:	1c5a      	adds	r2, r3, #1
 80085ee:	6022      	str	r2, [r4, #0]
 80085f0:	701e      	strb	r6, [r3, #0]
 80085f2:	6962      	ldr	r2, [r4, #20]
 80085f4:	1c43      	adds	r3, r0, #1
 80085f6:	429a      	cmp	r2, r3
 80085f8:	d004      	beq.n	8008604 <__swbuf_r+0x6e>
 80085fa:	89a3      	ldrh	r3, [r4, #12]
 80085fc:	07db      	lsls	r3, r3, #31
 80085fe:	d5e1      	bpl.n	80085c4 <__swbuf_r+0x2e>
 8008600:	2e0a      	cmp	r6, #10
 8008602:	d1df      	bne.n	80085c4 <__swbuf_r+0x2e>
 8008604:	4621      	mov	r1, r4
 8008606:	4628      	mov	r0, r5
 8008608:	f001 fd6e 	bl	800a0e8 <_fflush_r>
 800860c:	2800      	cmp	r0, #0
 800860e:	d0d9      	beq.n	80085c4 <__swbuf_r+0x2e>
 8008610:	e7d6      	b.n	80085c0 <__swbuf_r+0x2a>
	...

08008614 <__swsetup_r>:
 8008614:	b538      	push	{r3, r4, r5, lr}
 8008616:	4b29      	ldr	r3, [pc, #164]	@ (80086bc <__swsetup_r+0xa8>)
 8008618:	4605      	mov	r5, r0
 800861a:	6818      	ldr	r0, [r3, #0]
 800861c:	460c      	mov	r4, r1
 800861e:	b118      	cbz	r0, 8008628 <__swsetup_r+0x14>
 8008620:	6a03      	ldr	r3, [r0, #32]
 8008622:	b90b      	cbnz	r3, 8008628 <__swsetup_r+0x14>
 8008624:	f7ff fece 	bl	80083c4 <__sinit>
 8008628:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800862c:	0719      	lsls	r1, r3, #28
 800862e:	d422      	bmi.n	8008676 <__swsetup_r+0x62>
 8008630:	06da      	lsls	r2, r3, #27
 8008632:	d407      	bmi.n	8008644 <__swsetup_r+0x30>
 8008634:	2209      	movs	r2, #9
 8008636:	602a      	str	r2, [r5, #0]
 8008638:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800863c:	81a3      	strh	r3, [r4, #12]
 800863e:	f04f 30ff 	mov.w	r0, #4294967295
 8008642:	e033      	b.n	80086ac <__swsetup_r+0x98>
 8008644:	0758      	lsls	r0, r3, #29
 8008646:	d512      	bpl.n	800866e <__swsetup_r+0x5a>
 8008648:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800864a:	b141      	cbz	r1, 800865e <__swsetup_r+0x4a>
 800864c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008650:	4299      	cmp	r1, r3
 8008652:	d002      	beq.n	800865a <__swsetup_r+0x46>
 8008654:	4628      	mov	r0, r5
 8008656:	f000 feff 	bl	8009458 <_free_r>
 800865a:	2300      	movs	r3, #0
 800865c:	6363      	str	r3, [r4, #52]	@ 0x34
 800865e:	89a3      	ldrh	r3, [r4, #12]
 8008660:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008664:	81a3      	strh	r3, [r4, #12]
 8008666:	2300      	movs	r3, #0
 8008668:	6063      	str	r3, [r4, #4]
 800866a:	6923      	ldr	r3, [r4, #16]
 800866c:	6023      	str	r3, [r4, #0]
 800866e:	89a3      	ldrh	r3, [r4, #12]
 8008670:	f043 0308 	orr.w	r3, r3, #8
 8008674:	81a3      	strh	r3, [r4, #12]
 8008676:	6923      	ldr	r3, [r4, #16]
 8008678:	b94b      	cbnz	r3, 800868e <__swsetup_r+0x7a>
 800867a:	89a3      	ldrh	r3, [r4, #12]
 800867c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008680:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008684:	d003      	beq.n	800868e <__swsetup_r+0x7a>
 8008686:	4621      	mov	r1, r4
 8008688:	4628      	mov	r0, r5
 800868a:	f001 fd7b 	bl	800a184 <__smakebuf_r>
 800868e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008692:	f013 0201 	ands.w	r2, r3, #1
 8008696:	d00a      	beq.n	80086ae <__swsetup_r+0x9a>
 8008698:	2200      	movs	r2, #0
 800869a:	60a2      	str	r2, [r4, #8]
 800869c:	6962      	ldr	r2, [r4, #20]
 800869e:	4252      	negs	r2, r2
 80086a0:	61a2      	str	r2, [r4, #24]
 80086a2:	6922      	ldr	r2, [r4, #16]
 80086a4:	b942      	cbnz	r2, 80086b8 <__swsetup_r+0xa4>
 80086a6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80086aa:	d1c5      	bne.n	8008638 <__swsetup_r+0x24>
 80086ac:	bd38      	pop	{r3, r4, r5, pc}
 80086ae:	0799      	lsls	r1, r3, #30
 80086b0:	bf58      	it	pl
 80086b2:	6962      	ldrpl	r2, [r4, #20]
 80086b4:	60a2      	str	r2, [r4, #8]
 80086b6:	e7f4      	b.n	80086a2 <__swsetup_r+0x8e>
 80086b8:	2000      	movs	r0, #0
 80086ba:	e7f7      	b.n	80086ac <__swsetup_r+0x98>
 80086bc:	20000018 	.word	0x20000018

080086c0 <memset>:
 80086c0:	4402      	add	r2, r0
 80086c2:	4603      	mov	r3, r0
 80086c4:	4293      	cmp	r3, r2
 80086c6:	d100      	bne.n	80086ca <memset+0xa>
 80086c8:	4770      	bx	lr
 80086ca:	f803 1b01 	strb.w	r1, [r3], #1
 80086ce:	e7f9      	b.n	80086c4 <memset+0x4>

080086d0 <_localeconv_r>:
 80086d0:	4800      	ldr	r0, [pc, #0]	@ (80086d4 <_localeconv_r+0x4>)
 80086d2:	4770      	bx	lr
 80086d4:	20000158 	.word	0x20000158

080086d8 <_close_r>:
 80086d8:	b538      	push	{r3, r4, r5, lr}
 80086da:	4d06      	ldr	r5, [pc, #24]	@ (80086f4 <_close_r+0x1c>)
 80086dc:	2300      	movs	r3, #0
 80086de:	4604      	mov	r4, r0
 80086e0:	4608      	mov	r0, r1
 80086e2:	602b      	str	r3, [r5, #0]
 80086e4:	f7f9 fdf8 	bl	80022d8 <_close>
 80086e8:	1c43      	adds	r3, r0, #1
 80086ea:	d102      	bne.n	80086f2 <_close_r+0x1a>
 80086ec:	682b      	ldr	r3, [r5, #0]
 80086ee:	b103      	cbz	r3, 80086f2 <_close_r+0x1a>
 80086f0:	6023      	str	r3, [r4, #0]
 80086f2:	bd38      	pop	{r3, r4, r5, pc}
 80086f4:	200006c0 	.word	0x200006c0

080086f8 <_lseek_r>:
 80086f8:	b538      	push	{r3, r4, r5, lr}
 80086fa:	4d07      	ldr	r5, [pc, #28]	@ (8008718 <_lseek_r+0x20>)
 80086fc:	4604      	mov	r4, r0
 80086fe:	4608      	mov	r0, r1
 8008700:	4611      	mov	r1, r2
 8008702:	2200      	movs	r2, #0
 8008704:	602a      	str	r2, [r5, #0]
 8008706:	461a      	mov	r2, r3
 8008708:	f7f9 fe0d 	bl	8002326 <_lseek>
 800870c:	1c43      	adds	r3, r0, #1
 800870e:	d102      	bne.n	8008716 <_lseek_r+0x1e>
 8008710:	682b      	ldr	r3, [r5, #0]
 8008712:	b103      	cbz	r3, 8008716 <_lseek_r+0x1e>
 8008714:	6023      	str	r3, [r4, #0]
 8008716:	bd38      	pop	{r3, r4, r5, pc}
 8008718:	200006c0 	.word	0x200006c0

0800871c <_read_r>:
 800871c:	b538      	push	{r3, r4, r5, lr}
 800871e:	4d07      	ldr	r5, [pc, #28]	@ (800873c <_read_r+0x20>)
 8008720:	4604      	mov	r4, r0
 8008722:	4608      	mov	r0, r1
 8008724:	4611      	mov	r1, r2
 8008726:	2200      	movs	r2, #0
 8008728:	602a      	str	r2, [r5, #0]
 800872a:	461a      	mov	r2, r3
 800872c:	f7f9 fdb7 	bl	800229e <_read>
 8008730:	1c43      	adds	r3, r0, #1
 8008732:	d102      	bne.n	800873a <_read_r+0x1e>
 8008734:	682b      	ldr	r3, [r5, #0]
 8008736:	b103      	cbz	r3, 800873a <_read_r+0x1e>
 8008738:	6023      	str	r3, [r4, #0]
 800873a:	bd38      	pop	{r3, r4, r5, pc}
 800873c:	200006c0 	.word	0x200006c0

08008740 <_write_r>:
 8008740:	b538      	push	{r3, r4, r5, lr}
 8008742:	4d07      	ldr	r5, [pc, #28]	@ (8008760 <_write_r+0x20>)
 8008744:	4604      	mov	r4, r0
 8008746:	4608      	mov	r0, r1
 8008748:	4611      	mov	r1, r2
 800874a:	2200      	movs	r2, #0
 800874c:	602a      	str	r2, [r5, #0]
 800874e:	461a      	mov	r2, r3
 8008750:	f7f9 fa08 	bl	8001b64 <_write>
 8008754:	1c43      	adds	r3, r0, #1
 8008756:	d102      	bne.n	800875e <_write_r+0x1e>
 8008758:	682b      	ldr	r3, [r5, #0]
 800875a:	b103      	cbz	r3, 800875e <_write_r+0x1e>
 800875c:	6023      	str	r3, [r4, #0]
 800875e:	bd38      	pop	{r3, r4, r5, pc}
 8008760:	200006c0 	.word	0x200006c0

08008764 <__errno>:
 8008764:	4b01      	ldr	r3, [pc, #4]	@ (800876c <__errno+0x8>)
 8008766:	6818      	ldr	r0, [r3, #0]
 8008768:	4770      	bx	lr
 800876a:	bf00      	nop
 800876c:	20000018 	.word	0x20000018

08008770 <__libc_init_array>:
 8008770:	b570      	push	{r4, r5, r6, lr}
 8008772:	4d0d      	ldr	r5, [pc, #52]	@ (80087a8 <__libc_init_array+0x38>)
 8008774:	4c0d      	ldr	r4, [pc, #52]	@ (80087ac <__libc_init_array+0x3c>)
 8008776:	1b64      	subs	r4, r4, r5
 8008778:	10a4      	asrs	r4, r4, #2
 800877a:	2600      	movs	r6, #0
 800877c:	42a6      	cmp	r6, r4
 800877e:	d109      	bne.n	8008794 <__libc_init_array+0x24>
 8008780:	4d0b      	ldr	r5, [pc, #44]	@ (80087b0 <__libc_init_array+0x40>)
 8008782:	4c0c      	ldr	r4, [pc, #48]	@ (80087b4 <__libc_init_array+0x44>)
 8008784:	f001 fe80 	bl	800a488 <_init>
 8008788:	1b64      	subs	r4, r4, r5
 800878a:	10a4      	asrs	r4, r4, #2
 800878c:	2600      	movs	r6, #0
 800878e:	42a6      	cmp	r6, r4
 8008790:	d105      	bne.n	800879e <__libc_init_array+0x2e>
 8008792:	bd70      	pop	{r4, r5, r6, pc}
 8008794:	f855 3b04 	ldr.w	r3, [r5], #4
 8008798:	4798      	blx	r3
 800879a:	3601      	adds	r6, #1
 800879c:	e7ee      	b.n	800877c <__libc_init_array+0xc>
 800879e:	f855 3b04 	ldr.w	r3, [r5], #4
 80087a2:	4798      	blx	r3
 80087a4:	3601      	adds	r6, #1
 80087a6:	e7f2      	b.n	800878e <__libc_init_array+0x1e>
 80087a8:	0800a898 	.word	0x0800a898
 80087ac:	0800a898 	.word	0x0800a898
 80087b0:	0800a898 	.word	0x0800a898
 80087b4:	0800a89c 	.word	0x0800a89c

080087b8 <__retarget_lock_init_recursive>:
 80087b8:	4770      	bx	lr

080087ba <__retarget_lock_acquire_recursive>:
 80087ba:	4770      	bx	lr

080087bc <__retarget_lock_release_recursive>:
 80087bc:	4770      	bx	lr

080087be <quorem>:
 80087be:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087c2:	6903      	ldr	r3, [r0, #16]
 80087c4:	690c      	ldr	r4, [r1, #16]
 80087c6:	42a3      	cmp	r3, r4
 80087c8:	4607      	mov	r7, r0
 80087ca:	db7e      	blt.n	80088ca <quorem+0x10c>
 80087cc:	3c01      	subs	r4, #1
 80087ce:	f101 0814 	add.w	r8, r1, #20
 80087d2:	00a3      	lsls	r3, r4, #2
 80087d4:	f100 0514 	add.w	r5, r0, #20
 80087d8:	9300      	str	r3, [sp, #0]
 80087da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80087de:	9301      	str	r3, [sp, #4]
 80087e0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80087e4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80087e8:	3301      	adds	r3, #1
 80087ea:	429a      	cmp	r2, r3
 80087ec:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80087f0:	fbb2 f6f3 	udiv	r6, r2, r3
 80087f4:	d32e      	bcc.n	8008854 <quorem+0x96>
 80087f6:	f04f 0a00 	mov.w	sl, #0
 80087fa:	46c4      	mov	ip, r8
 80087fc:	46ae      	mov	lr, r5
 80087fe:	46d3      	mov	fp, sl
 8008800:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008804:	b298      	uxth	r0, r3
 8008806:	fb06 a000 	mla	r0, r6, r0, sl
 800880a:	0c02      	lsrs	r2, r0, #16
 800880c:	0c1b      	lsrs	r3, r3, #16
 800880e:	fb06 2303 	mla	r3, r6, r3, r2
 8008812:	f8de 2000 	ldr.w	r2, [lr]
 8008816:	b280      	uxth	r0, r0
 8008818:	b292      	uxth	r2, r2
 800881a:	1a12      	subs	r2, r2, r0
 800881c:	445a      	add	r2, fp
 800881e:	f8de 0000 	ldr.w	r0, [lr]
 8008822:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008826:	b29b      	uxth	r3, r3
 8008828:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800882c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008830:	b292      	uxth	r2, r2
 8008832:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008836:	45e1      	cmp	r9, ip
 8008838:	f84e 2b04 	str.w	r2, [lr], #4
 800883c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008840:	d2de      	bcs.n	8008800 <quorem+0x42>
 8008842:	9b00      	ldr	r3, [sp, #0]
 8008844:	58eb      	ldr	r3, [r5, r3]
 8008846:	b92b      	cbnz	r3, 8008854 <quorem+0x96>
 8008848:	9b01      	ldr	r3, [sp, #4]
 800884a:	3b04      	subs	r3, #4
 800884c:	429d      	cmp	r5, r3
 800884e:	461a      	mov	r2, r3
 8008850:	d32f      	bcc.n	80088b2 <quorem+0xf4>
 8008852:	613c      	str	r4, [r7, #16]
 8008854:	4638      	mov	r0, r7
 8008856:	f001 f979 	bl	8009b4c <__mcmp>
 800885a:	2800      	cmp	r0, #0
 800885c:	db25      	blt.n	80088aa <quorem+0xec>
 800885e:	4629      	mov	r1, r5
 8008860:	2000      	movs	r0, #0
 8008862:	f858 2b04 	ldr.w	r2, [r8], #4
 8008866:	f8d1 c000 	ldr.w	ip, [r1]
 800886a:	fa1f fe82 	uxth.w	lr, r2
 800886e:	fa1f f38c 	uxth.w	r3, ip
 8008872:	eba3 030e 	sub.w	r3, r3, lr
 8008876:	4403      	add	r3, r0
 8008878:	0c12      	lsrs	r2, r2, #16
 800887a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800887e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008882:	b29b      	uxth	r3, r3
 8008884:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008888:	45c1      	cmp	r9, r8
 800888a:	f841 3b04 	str.w	r3, [r1], #4
 800888e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008892:	d2e6      	bcs.n	8008862 <quorem+0xa4>
 8008894:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008898:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800889c:	b922      	cbnz	r2, 80088a8 <quorem+0xea>
 800889e:	3b04      	subs	r3, #4
 80088a0:	429d      	cmp	r5, r3
 80088a2:	461a      	mov	r2, r3
 80088a4:	d30b      	bcc.n	80088be <quorem+0x100>
 80088a6:	613c      	str	r4, [r7, #16]
 80088a8:	3601      	adds	r6, #1
 80088aa:	4630      	mov	r0, r6
 80088ac:	b003      	add	sp, #12
 80088ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088b2:	6812      	ldr	r2, [r2, #0]
 80088b4:	3b04      	subs	r3, #4
 80088b6:	2a00      	cmp	r2, #0
 80088b8:	d1cb      	bne.n	8008852 <quorem+0x94>
 80088ba:	3c01      	subs	r4, #1
 80088bc:	e7c6      	b.n	800884c <quorem+0x8e>
 80088be:	6812      	ldr	r2, [r2, #0]
 80088c0:	3b04      	subs	r3, #4
 80088c2:	2a00      	cmp	r2, #0
 80088c4:	d1ef      	bne.n	80088a6 <quorem+0xe8>
 80088c6:	3c01      	subs	r4, #1
 80088c8:	e7ea      	b.n	80088a0 <quorem+0xe2>
 80088ca:	2000      	movs	r0, #0
 80088cc:	e7ee      	b.n	80088ac <quorem+0xee>
	...

080088d0 <_dtoa_r>:
 80088d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088d4:	69c7      	ldr	r7, [r0, #28]
 80088d6:	b099      	sub	sp, #100	@ 0x64
 80088d8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80088dc:	ec55 4b10 	vmov	r4, r5, d0
 80088e0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80088e2:	9109      	str	r1, [sp, #36]	@ 0x24
 80088e4:	4683      	mov	fp, r0
 80088e6:	920e      	str	r2, [sp, #56]	@ 0x38
 80088e8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80088ea:	b97f      	cbnz	r7, 800890c <_dtoa_r+0x3c>
 80088ec:	2010      	movs	r0, #16
 80088ee:	f000 fdfd 	bl	80094ec <malloc>
 80088f2:	4602      	mov	r2, r0
 80088f4:	f8cb 001c 	str.w	r0, [fp, #28]
 80088f8:	b920      	cbnz	r0, 8008904 <_dtoa_r+0x34>
 80088fa:	4ba7      	ldr	r3, [pc, #668]	@ (8008b98 <_dtoa_r+0x2c8>)
 80088fc:	21ef      	movs	r1, #239	@ 0xef
 80088fe:	48a7      	ldr	r0, [pc, #668]	@ (8008b9c <_dtoa_r+0x2cc>)
 8008900:	f001 fcbc 	bl	800a27c <__assert_func>
 8008904:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008908:	6007      	str	r7, [r0, #0]
 800890a:	60c7      	str	r7, [r0, #12]
 800890c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008910:	6819      	ldr	r1, [r3, #0]
 8008912:	b159      	cbz	r1, 800892c <_dtoa_r+0x5c>
 8008914:	685a      	ldr	r2, [r3, #4]
 8008916:	604a      	str	r2, [r1, #4]
 8008918:	2301      	movs	r3, #1
 800891a:	4093      	lsls	r3, r2
 800891c:	608b      	str	r3, [r1, #8]
 800891e:	4658      	mov	r0, fp
 8008920:	f000 feda 	bl	80096d8 <_Bfree>
 8008924:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008928:	2200      	movs	r2, #0
 800892a:	601a      	str	r2, [r3, #0]
 800892c:	1e2b      	subs	r3, r5, #0
 800892e:	bfb9      	ittee	lt
 8008930:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008934:	9303      	strlt	r3, [sp, #12]
 8008936:	2300      	movge	r3, #0
 8008938:	6033      	strge	r3, [r6, #0]
 800893a:	9f03      	ldr	r7, [sp, #12]
 800893c:	4b98      	ldr	r3, [pc, #608]	@ (8008ba0 <_dtoa_r+0x2d0>)
 800893e:	bfbc      	itt	lt
 8008940:	2201      	movlt	r2, #1
 8008942:	6032      	strlt	r2, [r6, #0]
 8008944:	43bb      	bics	r3, r7
 8008946:	d112      	bne.n	800896e <_dtoa_r+0x9e>
 8008948:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800894a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800894e:	6013      	str	r3, [r2, #0]
 8008950:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008954:	4323      	orrs	r3, r4
 8008956:	f000 854d 	beq.w	80093f4 <_dtoa_r+0xb24>
 800895a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800895c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8008bb4 <_dtoa_r+0x2e4>
 8008960:	2b00      	cmp	r3, #0
 8008962:	f000 854f 	beq.w	8009404 <_dtoa_r+0xb34>
 8008966:	f10a 0303 	add.w	r3, sl, #3
 800896a:	f000 bd49 	b.w	8009400 <_dtoa_r+0xb30>
 800896e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008972:	2200      	movs	r2, #0
 8008974:	ec51 0b17 	vmov	r0, r1, d7
 8008978:	2300      	movs	r3, #0
 800897a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800897e:	f7f8 f8a3 	bl	8000ac8 <__aeabi_dcmpeq>
 8008982:	4680      	mov	r8, r0
 8008984:	b158      	cbz	r0, 800899e <_dtoa_r+0xce>
 8008986:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008988:	2301      	movs	r3, #1
 800898a:	6013      	str	r3, [r2, #0]
 800898c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800898e:	b113      	cbz	r3, 8008996 <_dtoa_r+0xc6>
 8008990:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008992:	4b84      	ldr	r3, [pc, #528]	@ (8008ba4 <_dtoa_r+0x2d4>)
 8008994:	6013      	str	r3, [r2, #0]
 8008996:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8008bb8 <_dtoa_r+0x2e8>
 800899a:	f000 bd33 	b.w	8009404 <_dtoa_r+0xb34>
 800899e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80089a2:	aa16      	add	r2, sp, #88	@ 0x58
 80089a4:	a917      	add	r1, sp, #92	@ 0x5c
 80089a6:	4658      	mov	r0, fp
 80089a8:	f001 f980 	bl	8009cac <__d2b>
 80089ac:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80089b0:	4681      	mov	r9, r0
 80089b2:	2e00      	cmp	r6, #0
 80089b4:	d077      	beq.n	8008aa6 <_dtoa_r+0x1d6>
 80089b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80089b8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80089bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80089c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80089c4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80089c8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80089cc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80089d0:	4619      	mov	r1, r3
 80089d2:	2200      	movs	r2, #0
 80089d4:	4b74      	ldr	r3, [pc, #464]	@ (8008ba8 <_dtoa_r+0x2d8>)
 80089d6:	f7f7 fc57 	bl	8000288 <__aeabi_dsub>
 80089da:	a369      	add	r3, pc, #420	@ (adr r3, 8008b80 <_dtoa_r+0x2b0>)
 80089dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089e0:	f7f7 fe0a 	bl	80005f8 <__aeabi_dmul>
 80089e4:	a368      	add	r3, pc, #416	@ (adr r3, 8008b88 <_dtoa_r+0x2b8>)
 80089e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089ea:	f7f7 fc4f 	bl	800028c <__adddf3>
 80089ee:	4604      	mov	r4, r0
 80089f0:	4630      	mov	r0, r6
 80089f2:	460d      	mov	r5, r1
 80089f4:	f7f7 fd96 	bl	8000524 <__aeabi_i2d>
 80089f8:	a365      	add	r3, pc, #404	@ (adr r3, 8008b90 <_dtoa_r+0x2c0>)
 80089fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089fe:	f7f7 fdfb 	bl	80005f8 <__aeabi_dmul>
 8008a02:	4602      	mov	r2, r0
 8008a04:	460b      	mov	r3, r1
 8008a06:	4620      	mov	r0, r4
 8008a08:	4629      	mov	r1, r5
 8008a0a:	f7f7 fc3f 	bl	800028c <__adddf3>
 8008a0e:	4604      	mov	r4, r0
 8008a10:	460d      	mov	r5, r1
 8008a12:	f7f8 f8a1 	bl	8000b58 <__aeabi_d2iz>
 8008a16:	2200      	movs	r2, #0
 8008a18:	4607      	mov	r7, r0
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	4620      	mov	r0, r4
 8008a1e:	4629      	mov	r1, r5
 8008a20:	f7f8 f85c 	bl	8000adc <__aeabi_dcmplt>
 8008a24:	b140      	cbz	r0, 8008a38 <_dtoa_r+0x168>
 8008a26:	4638      	mov	r0, r7
 8008a28:	f7f7 fd7c 	bl	8000524 <__aeabi_i2d>
 8008a2c:	4622      	mov	r2, r4
 8008a2e:	462b      	mov	r3, r5
 8008a30:	f7f8 f84a 	bl	8000ac8 <__aeabi_dcmpeq>
 8008a34:	b900      	cbnz	r0, 8008a38 <_dtoa_r+0x168>
 8008a36:	3f01      	subs	r7, #1
 8008a38:	2f16      	cmp	r7, #22
 8008a3a:	d851      	bhi.n	8008ae0 <_dtoa_r+0x210>
 8008a3c:	4b5b      	ldr	r3, [pc, #364]	@ (8008bac <_dtoa_r+0x2dc>)
 8008a3e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a46:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008a4a:	f7f8 f847 	bl	8000adc <__aeabi_dcmplt>
 8008a4e:	2800      	cmp	r0, #0
 8008a50:	d048      	beq.n	8008ae4 <_dtoa_r+0x214>
 8008a52:	3f01      	subs	r7, #1
 8008a54:	2300      	movs	r3, #0
 8008a56:	9312      	str	r3, [sp, #72]	@ 0x48
 8008a58:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008a5a:	1b9b      	subs	r3, r3, r6
 8008a5c:	1e5a      	subs	r2, r3, #1
 8008a5e:	bf44      	itt	mi
 8008a60:	f1c3 0801 	rsbmi	r8, r3, #1
 8008a64:	2300      	movmi	r3, #0
 8008a66:	9208      	str	r2, [sp, #32]
 8008a68:	bf54      	ite	pl
 8008a6a:	f04f 0800 	movpl.w	r8, #0
 8008a6e:	9308      	strmi	r3, [sp, #32]
 8008a70:	2f00      	cmp	r7, #0
 8008a72:	db39      	blt.n	8008ae8 <_dtoa_r+0x218>
 8008a74:	9b08      	ldr	r3, [sp, #32]
 8008a76:	970f      	str	r7, [sp, #60]	@ 0x3c
 8008a78:	443b      	add	r3, r7
 8008a7a:	9308      	str	r3, [sp, #32]
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008a80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a82:	2b09      	cmp	r3, #9
 8008a84:	d864      	bhi.n	8008b50 <_dtoa_r+0x280>
 8008a86:	2b05      	cmp	r3, #5
 8008a88:	bfc4      	itt	gt
 8008a8a:	3b04      	subgt	r3, #4
 8008a8c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8008a8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a90:	f1a3 0302 	sub.w	r3, r3, #2
 8008a94:	bfcc      	ite	gt
 8008a96:	2400      	movgt	r4, #0
 8008a98:	2401      	movle	r4, #1
 8008a9a:	2b03      	cmp	r3, #3
 8008a9c:	d863      	bhi.n	8008b66 <_dtoa_r+0x296>
 8008a9e:	e8df f003 	tbb	[pc, r3]
 8008aa2:	372a      	.short	0x372a
 8008aa4:	5535      	.short	0x5535
 8008aa6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8008aaa:	441e      	add	r6, r3
 8008aac:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008ab0:	2b20      	cmp	r3, #32
 8008ab2:	bfc1      	itttt	gt
 8008ab4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008ab8:	409f      	lslgt	r7, r3
 8008aba:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008abe:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008ac2:	bfd6      	itet	le
 8008ac4:	f1c3 0320 	rsble	r3, r3, #32
 8008ac8:	ea47 0003 	orrgt.w	r0, r7, r3
 8008acc:	fa04 f003 	lslle.w	r0, r4, r3
 8008ad0:	f7f7 fd18 	bl	8000504 <__aeabi_ui2d>
 8008ad4:	2201      	movs	r2, #1
 8008ad6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008ada:	3e01      	subs	r6, #1
 8008adc:	9214      	str	r2, [sp, #80]	@ 0x50
 8008ade:	e777      	b.n	80089d0 <_dtoa_r+0x100>
 8008ae0:	2301      	movs	r3, #1
 8008ae2:	e7b8      	b.n	8008a56 <_dtoa_r+0x186>
 8008ae4:	9012      	str	r0, [sp, #72]	@ 0x48
 8008ae6:	e7b7      	b.n	8008a58 <_dtoa_r+0x188>
 8008ae8:	427b      	negs	r3, r7
 8008aea:	930a      	str	r3, [sp, #40]	@ 0x28
 8008aec:	2300      	movs	r3, #0
 8008aee:	eba8 0807 	sub.w	r8, r8, r7
 8008af2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008af4:	e7c4      	b.n	8008a80 <_dtoa_r+0x1b0>
 8008af6:	2300      	movs	r3, #0
 8008af8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008afa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	dc35      	bgt.n	8008b6c <_dtoa_r+0x29c>
 8008b00:	2301      	movs	r3, #1
 8008b02:	9300      	str	r3, [sp, #0]
 8008b04:	9307      	str	r3, [sp, #28]
 8008b06:	461a      	mov	r2, r3
 8008b08:	920e      	str	r2, [sp, #56]	@ 0x38
 8008b0a:	e00b      	b.n	8008b24 <_dtoa_r+0x254>
 8008b0c:	2301      	movs	r3, #1
 8008b0e:	e7f3      	b.n	8008af8 <_dtoa_r+0x228>
 8008b10:	2300      	movs	r3, #0
 8008b12:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008b14:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008b16:	18fb      	adds	r3, r7, r3
 8008b18:	9300      	str	r3, [sp, #0]
 8008b1a:	3301      	adds	r3, #1
 8008b1c:	2b01      	cmp	r3, #1
 8008b1e:	9307      	str	r3, [sp, #28]
 8008b20:	bfb8      	it	lt
 8008b22:	2301      	movlt	r3, #1
 8008b24:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008b28:	2100      	movs	r1, #0
 8008b2a:	2204      	movs	r2, #4
 8008b2c:	f102 0514 	add.w	r5, r2, #20
 8008b30:	429d      	cmp	r5, r3
 8008b32:	d91f      	bls.n	8008b74 <_dtoa_r+0x2a4>
 8008b34:	6041      	str	r1, [r0, #4]
 8008b36:	4658      	mov	r0, fp
 8008b38:	f000 fd8e 	bl	8009658 <_Balloc>
 8008b3c:	4682      	mov	sl, r0
 8008b3e:	2800      	cmp	r0, #0
 8008b40:	d13c      	bne.n	8008bbc <_dtoa_r+0x2ec>
 8008b42:	4b1b      	ldr	r3, [pc, #108]	@ (8008bb0 <_dtoa_r+0x2e0>)
 8008b44:	4602      	mov	r2, r0
 8008b46:	f240 11af 	movw	r1, #431	@ 0x1af
 8008b4a:	e6d8      	b.n	80088fe <_dtoa_r+0x2e>
 8008b4c:	2301      	movs	r3, #1
 8008b4e:	e7e0      	b.n	8008b12 <_dtoa_r+0x242>
 8008b50:	2401      	movs	r4, #1
 8008b52:	2300      	movs	r3, #0
 8008b54:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b56:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008b58:	f04f 33ff 	mov.w	r3, #4294967295
 8008b5c:	9300      	str	r3, [sp, #0]
 8008b5e:	9307      	str	r3, [sp, #28]
 8008b60:	2200      	movs	r2, #0
 8008b62:	2312      	movs	r3, #18
 8008b64:	e7d0      	b.n	8008b08 <_dtoa_r+0x238>
 8008b66:	2301      	movs	r3, #1
 8008b68:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008b6a:	e7f5      	b.n	8008b58 <_dtoa_r+0x288>
 8008b6c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008b6e:	9300      	str	r3, [sp, #0]
 8008b70:	9307      	str	r3, [sp, #28]
 8008b72:	e7d7      	b.n	8008b24 <_dtoa_r+0x254>
 8008b74:	3101      	adds	r1, #1
 8008b76:	0052      	lsls	r2, r2, #1
 8008b78:	e7d8      	b.n	8008b2c <_dtoa_r+0x25c>
 8008b7a:	bf00      	nop
 8008b7c:	f3af 8000 	nop.w
 8008b80:	636f4361 	.word	0x636f4361
 8008b84:	3fd287a7 	.word	0x3fd287a7
 8008b88:	8b60c8b3 	.word	0x8b60c8b3
 8008b8c:	3fc68a28 	.word	0x3fc68a28
 8008b90:	509f79fb 	.word	0x509f79fb
 8008b94:	3fd34413 	.word	0x3fd34413
 8008b98:	0800a561 	.word	0x0800a561
 8008b9c:	0800a578 	.word	0x0800a578
 8008ba0:	7ff00000 	.word	0x7ff00000
 8008ba4:	0800a531 	.word	0x0800a531
 8008ba8:	3ff80000 	.word	0x3ff80000
 8008bac:	0800a670 	.word	0x0800a670
 8008bb0:	0800a5d0 	.word	0x0800a5d0
 8008bb4:	0800a55d 	.word	0x0800a55d
 8008bb8:	0800a530 	.word	0x0800a530
 8008bbc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008bc0:	6018      	str	r0, [r3, #0]
 8008bc2:	9b07      	ldr	r3, [sp, #28]
 8008bc4:	2b0e      	cmp	r3, #14
 8008bc6:	f200 80a4 	bhi.w	8008d12 <_dtoa_r+0x442>
 8008bca:	2c00      	cmp	r4, #0
 8008bcc:	f000 80a1 	beq.w	8008d12 <_dtoa_r+0x442>
 8008bd0:	2f00      	cmp	r7, #0
 8008bd2:	dd33      	ble.n	8008c3c <_dtoa_r+0x36c>
 8008bd4:	4bad      	ldr	r3, [pc, #692]	@ (8008e8c <_dtoa_r+0x5bc>)
 8008bd6:	f007 020f 	and.w	r2, r7, #15
 8008bda:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008bde:	ed93 7b00 	vldr	d7, [r3]
 8008be2:	05f8      	lsls	r0, r7, #23
 8008be4:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008be8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008bec:	d516      	bpl.n	8008c1c <_dtoa_r+0x34c>
 8008bee:	4ba8      	ldr	r3, [pc, #672]	@ (8008e90 <_dtoa_r+0x5c0>)
 8008bf0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008bf4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008bf8:	f7f7 fe28 	bl	800084c <__aeabi_ddiv>
 8008bfc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c00:	f004 040f 	and.w	r4, r4, #15
 8008c04:	2603      	movs	r6, #3
 8008c06:	4da2      	ldr	r5, [pc, #648]	@ (8008e90 <_dtoa_r+0x5c0>)
 8008c08:	b954      	cbnz	r4, 8008c20 <_dtoa_r+0x350>
 8008c0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008c0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c12:	f7f7 fe1b 	bl	800084c <__aeabi_ddiv>
 8008c16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c1a:	e028      	b.n	8008c6e <_dtoa_r+0x39e>
 8008c1c:	2602      	movs	r6, #2
 8008c1e:	e7f2      	b.n	8008c06 <_dtoa_r+0x336>
 8008c20:	07e1      	lsls	r1, r4, #31
 8008c22:	d508      	bpl.n	8008c36 <_dtoa_r+0x366>
 8008c24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008c28:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008c2c:	f7f7 fce4 	bl	80005f8 <__aeabi_dmul>
 8008c30:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008c34:	3601      	adds	r6, #1
 8008c36:	1064      	asrs	r4, r4, #1
 8008c38:	3508      	adds	r5, #8
 8008c3a:	e7e5      	b.n	8008c08 <_dtoa_r+0x338>
 8008c3c:	f000 80d2 	beq.w	8008de4 <_dtoa_r+0x514>
 8008c40:	427c      	negs	r4, r7
 8008c42:	4b92      	ldr	r3, [pc, #584]	@ (8008e8c <_dtoa_r+0x5bc>)
 8008c44:	4d92      	ldr	r5, [pc, #584]	@ (8008e90 <_dtoa_r+0x5c0>)
 8008c46:	f004 020f 	and.w	r2, r4, #15
 8008c4a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c52:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008c56:	f7f7 fccf 	bl	80005f8 <__aeabi_dmul>
 8008c5a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c5e:	1124      	asrs	r4, r4, #4
 8008c60:	2300      	movs	r3, #0
 8008c62:	2602      	movs	r6, #2
 8008c64:	2c00      	cmp	r4, #0
 8008c66:	f040 80b2 	bne.w	8008dce <_dtoa_r+0x4fe>
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d1d3      	bne.n	8008c16 <_dtoa_r+0x346>
 8008c6e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008c70:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	f000 80b7 	beq.w	8008de8 <_dtoa_r+0x518>
 8008c7a:	4b86      	ldr	r3, [pc, #536]	@ (8008e94 <_dtoa_r+0x5c4>)
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	4620      	mov	r0, r4
 8008c80:	4629      	mov	r1, r5
 8008c82:	f7f7 ff2b 	bl	8000adc <__aeabi_dcmplt>
 8008c86:	2800      	cmp	r0, #0
 8008c88:	f000 80ae 	beq.w	8008de8 <_dtoa_r+0x518>
 8008c8c:	9b07      	ldr	r3, [sp, #28]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	f000 80aa 	beq.w	8008de8 <_dtoa_r+0x518>
 8008c94:	9b00      	ldr	r3, [sp, #0]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	dd37      	ble.n	8008d0a <_dtoa_r+0x43a>
 8008c9a:	1e7b      	subs	r3, r7, #1
 8008c9c:	9304      	str	r3, [sp, #16]
 8008c9e:	4620      	mov	r0, r4
 8008ca0:	4b7d      	ldr	r3, [pc, #500]	@ (8008e98 <_dtoa_r+0x5c8>)
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	4629      	mov	r1, r5
 8008ca6:	f7f7 fca7 	bl	80005f8 <__aeabi_dmul>
 8008caa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008cae:	9c00      	ldr	r4, [sp, #0]
 8008cb0:	3601      	adds	r6, #1
 8008cb2:	4630      	mov	r0, r6
 8008cb4:	f7f7 fc36 	bl	8000524 <__aeabi_i2d>
 8008cb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008cbc:	f7f7 fc9c 	bl	80005f8 <__aeabi_dmul>
 8008cc0:	4b76      	ldr	r3, [pc, #472]	@ (8008e9c <_dtoa_r+0x5cc>)
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	f7f7 fae2 	bl	800028c <__adddf3>
 8008cc8:	4605      	mov	r5, r0
 8008cca:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008cce:	2c00      	cmp	r4, #0
 8008cd0:	f040 808d 	bne.w	8008dee <_dtoa_r+0x51e>
 8008cd4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008cd8:	4b71      	ldr	r3, [pc, #452]	@ (8008ea0 <_dtoa_r+0x5d0>)
 8008cda:	2200      	movs	r2, #0
 8008cdc:	f7f7 fad4 	bl	8000288 <__aeabi_dsub>
 8008ce0:	4602      	mov	r2, r0
 8008ce2:	460b      	mov	r3, r1
 8008ce4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008ce8:	462a      	mov	r2, r5
 8008cea:	4633      	mov	r3, r6
 8008cec:	f7f7 ff14 	bl	8000b18 <__aeabi_dcmpgt>
 8008cf0:	2800      	cmp	r0, #0
 8008cf2:	f040 828b 	bne.w	800920c <_dtoa_r+0x93c>
 8008cf6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008cfa:	462a      	mov	r2, r5
 8008cfc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008d00:	f7f7 feec 	bl	8000adc <__aeabi_dcmplt>
 8008d04:	2800      	cmp	r0, #0
 8008d06:	f040 8128 	bne.w	8008f5a <_dtoa_r+0x68a>
 8008d0a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008d0e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008d12:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	f2c0 815a 	blt.w	8008fce <_dtoa_r+0x6fe>
 8008d1a:	2f0e      	cmp	r7, #14
 8008d1c:	f300 8157 	bgt.w	8008fce <_dtoa_r+0x6fe>
 8008d20:	4b5a      	ldr	r3, [pc, #360]	@ (8008e8c <_dtoa_r+0x5bc>)
 8008d22:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008d26:	ed93 7b00 	vldr	d7, [r3]
 8008d2a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	ed8d 7b00 	vstr	d7, [sp]
 8008d32:	da03      	bge.n	8008d3c <_dtoa_r+0x46c>
 8008d34:	9b07      	ldr	r3, [sp, #28]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	f340 8101 	ble.w	8008f3e <_dtoa_r+0x66e>
 8008d3c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008d40:	4656      	mov	r6, sl
 8008d42:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008d46:	4620      	mov	r0, r4
 8008d48:	4629      	mov	r1, r5
 8008d4a:	f7f7 fd7f 	bl	800084c <__aeabi_ddiv>
 8008d4e:	f7f7 ff03 	bl	8000b58 <__aeabi_d2iz>
 8008d52:	4680      	mov	r8, r0
 8008d54:	f7f7 fbe6 	bl	8000524 <__aeabi_i2d>
 8008d58:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008d5c:	f7f7 fc4c 	bl	80005f8 <__aeabi_dmul>
 8008d60:	4602      	mov	r2, r0
 8008d62:	460b      	mov	r3, r1
 8008d64:	4620      	mov	r0, r4
 8008d66:	4629      	mov	r1, r5
 8008d68:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008d6c:	f7f7 fa8c 	bl	8000288 <__aeabi_dsub>
 8008d70:	f806 4b01 	strb.w	r4, [r6], #1
 8008d74:	9d07      	ldr	r5, [sp, #28]
 8008d76:	eba6 040a 	sub.w	r4, r6, sl
 8008d7a:	42a5      	cmp	r5, r4
 8008d7c:	4602      	mov	r2, r0
 8008d7e:	460b      	mov	r3, r1
 8008d80:	f040 8117 	bne.w	8008fb2 <_dtoa_r+0x6e2>
 8008d84:	f7f7 fa82 	bl	800028c <__adddf3>
 8008d88:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008d8c:	4604      	mov	r4, r0
 8008d8e:	460d      	mov	r5, r1
 8008d90:	f7f7 fec2 	bl	8000b18 <__aeabi_dcmpgt>
 8008d94:	2800      	cmp	r0, #0
 8008d96:	f040 80f9 	bne.w	8008f8c <_dtoa_r+0x6bc>
 8008d9a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008d9e:	4620      	mov	r0, r4
 8008da0:	4629      	mov	r1, r5
 8008da2:	f7f7 fe91 	bl	8000ac8 <__aeabi_dcmpeq>
 8008da6:	b118      	cbz	r0, 8008db0 <_dtoa_r+0x4e0>
 8008da8:	f018 0f01 	tst.w	r8, #1
 8008dac:	f040 80ee 	bne.w	8008f8c <_dtoa_r+0x6bc>
 8008db0:	4649      	mov	r1, r9
 8008db2:	4658      	mov	r0, fp
 8008db4:	f000 fc90 	bl	80096d8 <_Bfree>
 8008db8:	2300      	movs	r3, #0
 8008dba:	7033      	strb	r3, [r6, #0]
 8008dbc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008dbe:	3701      	adds	r7, #1
 8008dc0:	601f      	str	r7, [r3, #0]
 8008dc2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	f000 831d 	beq.w	8009404 <_dtoa_r+0xb34>
 8008dca:	601e      	str	r6, [r3, #0]
 8008dcc:	e31a      	b.n	8009404 <_dtoa_r+0xb34>
 8008dce:	07e2      	lsls	r2, r4, #31
 8008dd0:	d505      	bpl.n	8008dde <_dtoa_r+0x50e>
 8008dd2:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008dd6:	f7f7 fc0f 	bl	80005f8 <__aeabi_dmul>
 8008dda:	3601      	adds	r6, #1
 8008ddc:	2301      	movs	r3, #1
 8008dde:	1064      	asrs	r4, r4, #1
 8008de0:	3508      	adds	r5, #8
 8008de2:	e73f      	b.n	8008c64 <_dtoa_r+0x394>
 8008de4:	2602      	movs	r6, #2
 8008de6:	e742      	b.n	8008c6e <_dtoa_r+0x39e>
 8008de8:	9c07      	ldr	r4, [sp, #28]
 8008dea:	9704      	str	r7, [sp, #16]
 8008dec:	e761      	b.n	8008cb2 <_dtoa_r+0x3e2>
 8008dee:	4b27      	ldr	r3, [pc, #156]	@ (8008e8c <_dtoa_r+0x5bc>)
 8008df0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008df2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008df6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008dfa:	4454      	add	r4, sl
 8008dfc:	2900      	cmp	r1, #0
 8008dfe:	d053      	beq.n	8008ea8 <_dtoa_r+0x5d8>
 8008e00:	4928      	ldr	r1, [pc, #160]	@ (8008ea4 <_dtoa_r+0x5d4>)
 8008e02:	2000      	movs	r0, #0
 8008e04:	f7f7 fd22 	bl	800084c <__aeabi_ddiv>
 8008e08:	4633      	mov	r3, r6
 8008e0a:	462a      	mov	r2, r5
 8008e0c:	f7f7 fa3c 	bl	8000288 <__aeabi_dsub>
 8008e10:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008e14:	4656      	mov	r6, sl
 8008e16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e1a:	f7f7 fe9d 	bl	8000b58 <__aeabi_d2iz>
 8008e1e:	4605      	mov	r5, r0
 8008e20:	f7f7 fb80 	bl	8000524 <__aeabi_i2d>
 8008e24:	4602      	mov	r2, r0
 8008e26:	460b      	mov	r3, r1
 8008e28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e2c:	f7f7 fa2c 	bl	8000288 <__aeabi_dsub>
 8008e30:	3530      	adds	r5, #48	@ 0x30
 8008e32:	4602      	mov	r2, r0
 8008e34:	460b      	mov	r3, r1
 8008e36:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008e3a:	f806 5b01 	strb.w	r5, [r6], #1
 8008e3e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008e42:	f7f7 fe4b 	bl	8000adc <__aeabi_dcmplt>
 8008e46:	2800      	cmp	r0, #0
 8008e48:	d171      	bne.n	8008f2e <_dtoa_r+0x65e>
 8008e4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008e4e:	4911      	ldr	r1, [pc, #68]	@ (8008e94 <_dtoa_r+0x5c4>)
 8008e50:	2000      	movs	r0, #0
 8008e52:	f7f7 fa19 	bl	8000288 <__aeabi_dsub>
 8008e56:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008e5a:	f7f7 fe3f 	bl	8000adc <__aeabi_dcmplt>
 8008e5e:	2800      	cmp	r0, #0
 8008e60:	f040 8095 	bne.w	8008f8e <_dtoa_r+0x6be>
 8008e64:	42a6      	cmp	r6, r4
 8008e66:	f43f af50 	beq.w	8008d0a <_dtoa_r+0x43a>
 8008e6a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008e6e:	4b0a      	ldr	r3, [pc, #40]	@ (8008e98 <_dtoa_r+0x5c8>)
 8008e70:	2200      	movs	r2, #0
 8008e72:	f7f7 fbc1 	bl	80005f8 <__aeabi_dmul>
 8008e76:	4b08      	ldr	r3, [pc, #32]	@ (8008e98 <_dtoa_r+0x5c8>)
 8008e78:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e82:	f7f7 fbb9 	bl	80005f8 <__aeabi_dmul>
 8008e86:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e8a:	e7c4      	b.n	8008e16 <_dtoa_r+0x546>
 8008e8c:	0800a670 	.word	0x0800a670
 8008e90:	0800a648 	.word	0x0800a648
 8008e94:	3ff00000 	.word	0x3ff00000
 8008e98:	40240000 	.word	0x40240000
 8008e9c:	401c0000 	.word	0x401c0000
 8008ea0:	40140000 	.word	0x40140000
 8008ea4:	3fe00000 	.word	0x3fe00000
 8008ea8:	4631      	mov	r1, r6
 8008eaa:	4628      	mov	r0, r5
 8008eac:	f7f7 fba4 	bl	80005f8 <__aeabi_dmul>
 8008eb0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008eb4:	9415      	str	r4, [sp, #84]	@ 0x54
 8008eb6:	4656      	mov	r6, sl
 8008eb8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008ebc:	f7f7 fe4c 	bl	8000b58 <__aeabi_d2iz>
 8008ec0:	4605      	mov	r5, r0
 8008ec2:	f7f7 fb2f 	bl	8000524 <__aeabi_i2d>
 8008ec6:	4602      	mov	r2, r0
 8008ec8:	460b      	mov	r3, r1
 8008eca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008ece:	f7f7 f9db 	bl	8000288 <__aeabi_dsub>
 8008ed2:	3530      	adds	r5, #48	@ 0x30
 8008ed4:	f806 5b01 	strb.w	r5, [r6], #1
 8008ed8:	4602      	mov	r2, r0
 8008eda:	460b      	mov	r3, r1
 8008edc:	42a6      	cmp	r6, r4
 8008ede:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008ee2:	f04f 0200 	mov.w	r2, #0
 8008ee6:	d124      	bne.n	8008f32 <_dtoa_r+0x662>
 8008ee8:	4bac      	ldr	r3, [pc, #688]	@ (800919c <_dtoa_r+0x8cc>)
 8008eea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008eee:	f7f7 f9cd 	bl	800028c <__adddf3>
 8008ef2:	4602      	mov	r2, r0
 8008ef4:	460b      	mov	r3, r1
 8008ef6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008efa:	f7f7 fe0d 	bl	8000b18 <__aeabi_dcmpgt>
 8008efe:	2800      	cmp	r0, #0
 8008f00:	d145      	bne.n	8008f8e <_dtoa_r+0x6be>
 8008f02:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008f06:	49a5      	ldr	r1, [pc, #660]	@ (800919c <_dtoa_r+0x8cc>)
 8008f08:	2000      	movs	r0, #0
 8008f0a:	f7f7 f9bd 	bl	8000288 <__aeabi_dsub>
 8008f0e:	4602      	mov	r2, r0
 8008f10:	460b      	mov	r3, r1
 8008f12:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008f16:	f7f7 fde1 	bl	8000adc <__aeabi_dcmplt>
 8008f1a:	2800      	cmp	r0, #0
 8008f1c:	f43f aef5 	beq.w	8008d0a <_dtoa_r+0x43a>
 8008f20:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8008f22:	1e73      	subs	r3, r6, #1
 8008f24:	9315      	str	r3, [sp, #84]	@ 0x54
 8008f26:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008f2a:	2b30      	cmp	r3, #48	@ 0x30
 8008f2c:	d0f8      	beq.n	8008f20 <_dtoa_r+0x650>
 8008f2e:	9f04      	ldr	r7, [sp, #16]
 8008f30:	e73e      	b.n	8008db0 <_dtoa_r+0x4e0>
 8008f32:	4b9b      	ldr	r3, [pc, #620]	@ (80091a0 <_dtoa_r+0x8d0>)
 8008f34:	f7f7 fb60 	bl	80005f8 <__aeabi_dmul>
 8008f38:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008f3c:	e7bc      	b.n	8008eb8 <_dtoa_r+0x5e8>
 8008f3e:	d10c      	bne.n	8008f5a <_dtoa_r+0x68a>
 8008f40:	4b98      	ldr	r3, [pc, #608]	@ (80091a4 <_dtoa_r+0x8d4>)
 8008f42:	2200      	movs	r2, #0
 8008f44:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008f48:	f7f7 fb56 	bl	80005f8 <__aeabi_dmul>
 8008f4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008f50:	f7f7 fdd8 	bl	8000b04 <__aeabi_dcmpge>
 8008f54:	2800      	cmp	r0, #0
 8008f56:	f000 8157 	beq.w	8009208 <_dtoa_r+0x938>
 8008f5a:	2400      	movs	r4, #0
 8008f5c:	4625      	mov	r5, r4
 8008f5e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008f60:	43db      	mvns	r3, r3
 8008f62:	9304      	str	r3, [sp, #16]
 8008f64:	4656      	mov	r6, sl
 8008f66:	2700      	movs	r7, #0
 8008f68:	4621      	mov	r1, r4
 8008f6a:	4658      	mov	r0, fp
 8008f6c:	f000 fbb4 	bl	80096d8 <_Bfree>
 8008f70:	2d00      	cmp	r5, #0
 8008f72:	d0dc      	beq.n	8008f2e <_dtoa_r+0x65e>
 8008f74:	b12f      	cbz	r7, 8008f82 <_dtoa_r+0x6b2>
 8008f76:	42af      	cmp	r7, r5
 8008f78:	d003      	beq.n	8008f82 <_dtoa_r+0x6b2>
 8008f7a:	4639      	mov	r1, r7
 8008f7c:	4658      	mov	r0, fp
 8008f7e:	f000 fbab 	bl	80096d8 <_Bfree>
 8008f82:	4629      	mov	r1, r5
 8008f84:	4658      	mov	r0, fp
 8008f86:	f000 fba7 	bl	80096d8 <_Bfree>
 8008f8a:	e7d0      	b.n	8008f2e <_dtoa_r+0x65e>
 8008f8c:	9704      	str	r7, [sp, #16]
 8008f8e:	4633      	mov	r3, r6
 8008f90:	461e      	mov	r6, r3
 8008f92:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008f96:	2a39      	cmp	r2, #57	@ 0x39
 8008f98:	d107      	bne.n	8008faa <_dtoa_r+0x6da>
 8008f9a:	459a      	cmp	sl, r3
 8008f9c:	d1f8      	bne.n	8008f90 <_dtoa_r+0x6c0>
 8008f9e:	9a04      	ldr	r2, [sp, #16]
 8008fa0:	3201      	adds	r2, #1
 8008fa2:	9204      	str	r2, [sp, #16]
 8008fa4:	2230      	movs	r2, #48	@ 0x30
 8008fa6:	f88a 2000 	strb.w	r2, [sl]
 8008faa:	781a      	ldrb	r2, [r3, #0]
 8008fac:	3201      	adds	r2, #1
 8008fae:	701a      	strb	r2, [r3, #0]
 8008fb0:	e7bd      	b.n	8008f2e <_dtoa_r+0x65e>
 8008fb2:	4b7b      	ldr	r3, [pc, #492]	@ (80091a0 <_dtoa_r+0x8d0>)
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	f7f7 fb1f 	bl	80005f8 <__aeabi_dmul>
 8008fba:	2200      	movs	r2, #0
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	4604      	mov	r4, r0
 8008fc0:	460d      	mov	r5, r1
 8008fc2:	f7f7 fd81 	bl	8000ac8 <__aeabi_dcmpeq>
 8008fc6:	2800      	cmp	r0, #0
 8008fc8:	f43f aebb 	beq.w	8008d42 <_dtoa_r+0x472>
 8008fcc:	e6f0      	b.n	8008db0 <_dtoa_r+0x4e0>
 8008fce:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008fd0:	2a00      	cmp	r2, #0
 8008fd2:	f000 80db 	beq.w	800918c <_dtoa_r+0x8bc>
 8008fd6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008fd8:	2a01      	cmp	r2, #1
 8008fda:	f300 80bf 	bgt.w	800915c <_dtoa_r+0x88c>
 8008fde:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008fe0:	2a00      	cmp	r2, #0
 8008fe2:	f000 80b7 	beq.w	8009154 <_dtoa_r+0x884>
 8008fe6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008fea:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008fec:	4646      	mov	r6, r8
 8008fee:	9a08      	ldr	r2, [sp, #32]
 8008ff0:	2101      	movs	r1, #1
 8008ff2:	441a      	add	r2, r3
 8008ff4:	4658      	mov	r0, fp
 8008ff6:	4498      	add	r8, r3
 8008ff8:	9208      	str	r2, [sp, #32]
 8008ffa:	f000 fc21 	bl	8009840 <__i2b>
 8008ffe:	4605      	mov	r5, r0
 8009000:	b15e      	cbz	r6, 800901a <_dtoa_r+0x74a>
 8009002:	9b08      	ldr	r3, [sp, #32]
 8009004:	2b00      	cmp	r3, #0
 8009006:	dd08      	ble.n	800901a <_dtoa_r+0x74a>
 8009008:	42b3      	cmp	r3, r6
 800900a:	9a08      	ldr	r2, [sp, #32]
 800900c:	bfa8      	it	ge
 800900e:	4633      	movge	r3, r6
 8009010:	eba8 0803 	sub.w	r8, r8, r3
 8009014:	1af6      	subs	r6, r6, r3
 8009016:	1ad3      	subs	r3, r2, r3
 8009018:	9308      	str	r3, [sp, #32]
 800901a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800901c:	b1f3      	cbz	r3, 800905c <_dtoa_r+0x78c>
 800901e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009020:	2b00      	cmp	r3, #0
 8009022:	f000 80b7 	beq.w	8009194 <_dtoa_r+0x8c4>
 8009026:	b18c      	cbz	r4, 800904c <_dtoa_r+0x77c>
 8009028:	4629      	mov	r1, r5
 800902a:	4622      	mov	r2, r4
 800902c:	4658      	mov	r0, fp
 800902e:	f000 fcc7 	bl	80099c0 <__pow5mult>
 8009032:	464a      	mov	r2, r9
 8009034:	4601      	mov	r1, r0
 8009036:	4605      	mov	r5, r0
 8009038:	4658      	mov	r0, fp
 800903a:	f000 fc17 	bl	800986c <__multiply>
 800903e:	4649      	mov	r1, r9
 8009040:	9004      	str	r0, [sp, #16]
 8009042:	4658      	mov	r0, fp
 8009044:	f000 fb48 	bl	80096d8 <_Bfree>
 8009048:	9b04      	ldr	r3, [sp, #16]
 800904a:	4699      	mov	r9, r3
 800904c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800904e:	1b1a      	subs	r2, r3, r4
 8009050:	d004      	beq.n	800905c <_dtoa_r+0x78c>
 8009052:	4649      	mov	r1, r9
 8009054:	4658      	mov	r0, fp
 8009056:	f000 fcb3 	bl	80099c0 <__pow5mult>
 800905a:	4681      	mov	r9, r0
 800905c:	2101      	movs	r1, #1
 800905e:	4658      	mov	r0, fp
 8009060:	f000 fbee 	bl	8009840 <__i2b>
 8009064:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009066:	4604      	mov	r4, r0
 8009068:	2b00      	cmp	r3, #0
 800906a:	f000 81cf 	beq.w	800940c <_dtoa_r+0xb3c>
 800906e:	461a      	mov	r2, r3
 8009070:	4601      	mov	r1, r0
 8009072:	4658      	mov	r0, fp
 8009074:	f000 fca4 	bl	80099c0 <__pow5mult>
 8009078:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800907a:	2b01      	cmp	r3, #1
 800907c:	4604      	mov	r4, r0
 800907e:	f300 8095 	bgt.w	80091ac <_dtoa_r+0x8dc>
 8009082:	9b02      	ldr	r3, [sp, #8]
 8009084:	2b00      	cmp	r3, #0
 8009086:	f040 8087 	bne.w	8009198 <_dtoa_r+0x8c8>
 800908a:	9b03      	ldr	r3, [sp, #12]
 800908c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009090:	2b00      	cmp	r3, #0
 8009092:	f040 8089 	bne.w	80091a8 <_dtoa_r+0x8d8>
 8009096:	9b03      	ldr	r3, [sp, #12]
 8009098:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800909c:	0d1b      	lsrs	r3, r3, #20
 800909e:	051b      	lsls	r3, r3, #20
 80090a0:	b12b      	cbz	r3, 80090ae <_dtoa_r+0x7de>
 80090a2:	9b08      	ldr	r3, [sp, #32]
 80090a4:	3301      	adds	r3, #1
 80090a6:	9308      	str	r3, [sp, #32]
 80090a8:	f108 0801 	add.w	r8, r8, #1
 80090ac:	2301      	movs	r3, #1
 80090ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80090b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	f000 81b0 	beq.w	8009418 <_dtoa_r+0xb48>
 80090b8:	6923      	ldr	r3, [r4, #16]
 80090ba:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80090be:	6918      	ldr	r0, [r3, #16]
 80090c0:	f000 fb72 	bl	80097a8 <__hi0bits>
 80090c4:	f1c0 0020 	rsb	r0, r0, #32
 80090c8:	9b08      	ldr	r3, [sp, #32]
 80090ca:	4418      	add	r0, r3
 80090cc:	f010 001f 	ands.w	r0, r0, #31
 80090d0:	d077      	beq.n	80091c2 <_dtoa_r+0x8f2>
 80090d2:	f1c0 0320 	rsb	r3, r0, #32
 80090d6:	2b04      	cmp	r3, #4
 80090d8:	dd6b      	ble.n	80091b2 <_dtoa_r+0x8e2>
 80090da:	9b08      	ldr	r3, [sp, #32]
 80090dc:	f1c0 001c 	rsb	r0, r0, #28
 80090e0:	4403      	add	r3, r0
 80090e2:	4480      	add	r8, r0
 80090e4:	4406      	add	r6, r0
 80090e6:	9308      	str	r3, [sp, #32]
 80090e8:	f1b8 0f00 	cmp.w	r8, #0
 80090ec:	dd05      	ble.n	80090fa <_dtoa_r+0x82a>
 80090ee:	4649      	mov	r1, r9
 80090f0:	4642      	mov	r2, r8
 80090f2:	4658      	mov	r0, fp
 80090f4:	f000 fcbe 	bl	8009a74 <__lshift>
 80090f8:	4681      	mov	r9, r0
 80090fa:	9b08      	ldr	r3, [sp, #32]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	dd05      	ble.n	800910c <_dtoa_r+0x83c>
 8009100:	4621      	mov	r1, r4
 8009102:	461a      	mov	r2, r3
 8009104:	4658      	mov	r0, fp
 8009106:	f000 fcb5 	bl	8009a74 <__lshift>
 800910a:	4604      	mov	r4, r0
 800910c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800910e:	2b00      	cmp	r3, #0
 8009110:	d059      	beq.n	80091c6 <_dtoa_r+0x8f6>
 8009112:	4621      	mov	r1, r4
 8009114:	4648      	mov	r0, r9
 8009116:	f000 fd19 	bl	8009b4c <__mcmp>
 800911a:	2800      	cmp	r0, #0
 800911c:	da53      	bge.n	80091c6 <_dtoa_r+0x8f6>
 800911e:	1e7b      	subs	r3, r7, #1
 8009120:	9304      	str	r3, [sp, #16]
 8009122:	4649      	mov	r1, r9
 8009124:	2300      	movs	r3, #0
 8009126:	220a      	movs	r2, #10
 8009128:	4658      	mov	r0, fp
 800912a:	f000 faf7 	bl	800971c <__multadd>
 800912e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009130:	4681      	mov	r9, r0
 8009132:	2b00      	cmp	r3, #0
 8009134:	f000 8172 	beq.w	800941c <_dtoa_r+0xb4c>
 8009138:	2300      	movs	r3, #0
 800913a:	4629      	mov	r1, r5
 800913c:	220a      	movs	r2, #10
 800913e:	4658      	mov	r0, fp
 8009140:	f000 faec 	bl	800971c <__multadd>
 8009144:	9b00      	ldr	r3, [sp, #0]
 8009146:	2b00      	cmp	r3, #0
 8009148:	4605      	mov	r5, r0
 800914a:	dc67      	bgt.n	800921c <_dtoa_r+0x94c>
 800914c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800914e:	2b02      	cmp	r3, #2
 8009150:	dc41      	bgt.n	80091d6 <_dtoa_r+0x906>
 8009152:	e063      	b.n	800921c <_dtoa_r+0x94c>
 8009154:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009156:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800915a:	e746      	b.n	8008fea <_dtoa_r+0x71a>
 800915c:	9b07      	ldr	r3, [sp, #28]
 800915e:	1e5c      	subs	r4, r3, #1
 8009160:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009162:	42a3      	cmp	r3, r4
 8009164:	bfbf      	itttt	lt
 8009166:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009168:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800916a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800916c:	1ae3      	sublt	r3, r4, r3
 800916e:	bfb4      	ite	lt
 8009170:	18d2      	addlt	r2, r2, r3
 8009172:	1b1c      	subge	r4, r3, r4
 8009174:	9b07      	ldr	r3, [sp, #28]
 8009176:	bfbc      	itt	lt
 8009178:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800917a:	2400      	movlt	r4, #0
 800917c:	2b00      	cmp	r3, #0
 800917e:	bfb5      	itete	lt
 8009180:	eba8 0603 	sublt.w	r6, r8, r3
 8009184:	9b07      	ldrge	r3, [sp, #28]
 8009186:	2300      	movlt	r3, #0
 8009188:	4646      	movge	r6, r8
 800918a:	e730      	b.n	8008fee <_dtoa_r+0x71e>
 800918c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800918e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009190:	4646      	mov	r6, r8
 8009192:	e735      	b.n	8009000 <_dtoa_r+0x730>
 8009194:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009196:	e75c      	b.n	8009052 <_dtoa_r+0x782>
 8009198:	2300      	movs	r3, #0
 800919a:	e788      	b.n	80090ae <_dtoa_r+0x7de>
 800919c:	3fe00000 	.word	0x3fe00000
 80091a0:	40240000 	.word	0x40240000
 80091a4:	40140000 	.word	0x40140000
 80091a8:	9b02      	ldr	r3, [sp, #8]
 80091aa:	e780      	b.n	80090ae <_dtoa_r+0x7de>
 80091ac:	2300      	movs	r3, #0
 80091ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80091b0:	e782      	b.n	80090b8 <_dtoa_r+0x7e8>
 80091b2:	d099      	beq.n	80090e8 <_dtoa_r+0x818>
 80091b4:	9a08      	ldr	r2, [sp, #32]
 80091b6:	331c      	adds	r3, #28
 80091b8:	441a      	add	r2, r3
 80091ba:	4498      	add	r8, r3
 80091bc:	441e      	add	r6, r3
 80091be:	9208      	str	r2, [sp, #32]
 80091c0:	e792      	b.n	80090e8 <_dtoa_r+0x818>
 80091c2:	4603      	mov	r3, r0
 80091c4:	e7f6      	b.n	80091b4 <_dtoa_r+0x8e4>
 80091c6:	9b07      	ldr	r3, [sp, #28]
 80091c8:	9704      	str	r7, [sp, #16]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	dc20      	bgt.n	8009210 <_dtoa_r+0x940>
 80091ce:	9300      	str	r3, [sp, #0]
 80091d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091d2:	2b02      	cmp	r3, #2
 80091d4:	dd1e      	ble.n	8009214 <_dtoa_r+0x944>
 80091d6:	9b00      	ldr	r3, [sp, #0]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	f47f aec0 	bne.w	8008f5e <_dtoa_r+0x68e>
 80091de:	4621      	mov	r1, r4
 80091e0:	2205      	movs	r2, #5
 80091e2:	4658      	mov	r0, fp
 80091e4:	f000 fa9a 	bl	800971c <__multadd>
 80091e8:	4601      	mov	r1, r0
 80091ea:	4604      	mov	r4, r0
 80091ec:	4648      	mov	r0, r9
 80091ee:	f000 fcad 	bl	8009b4c <__mcmp>
 80091f2:	2800      	cmp	r0, #0
 80091f4:	f77f aeb3 	ble.w	8008f5e <_dtoa_r+0x68e>
 80091f8:	4656      	mov	r6, sl
 80091fa:	2331      	movs	r3, #49	@ 0x31
 80091fc:	f806 3b01 	strb.w	r3, [r6], #1
 8009200:	9b04      	ldr	r3, [sp, #16]
 8009202:	3301      	adds	r3, #1
 8009204:	9304      	str	r3, [sp, #16]
 8009206:	e6ae      	b.n	8008f66 <_dtoa_r+0x696>
 8009208:	9c07      	ldr	r4, [sp, #28]
 800920a:	9704      	str	r7, [sp, #16]
 800920c:	4625      	mov	r5, r4
 800920e:	e7f3      	b.n	80091f8 <_dtoa_r+0x928>
 8009210:	9b07      	ldr	r3, [sp, #28]
 8009212:	9300      	str	r3, [sp, #0]
 8009214:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009216:	2b00      	cmp	r3, #0
 8009218:	f000 8104 	beq.w	8009424 <_dtoa_r+0xb54>
 800921c:	2e00      	cmp	r6, #0
 800921e:	dd05      	ble.n	800922c <_dtoa_r+0x95c>
 8009220:	4629      	mov	r1, r5
 8009222:	4632      	mov	r2, r6
 8009224:	4658      	mov	r0, fp
 8009226:	f000 fc25 	bl	8009a74 <__lshift>
 800922a:	4605      	mov	r5, r0
 800922c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800922e:	2b00      	cmp	r3, #0
 8009230:	d05a      	beq.n	80092e8 <_dtoa_r+0xa18>
 8009232:	6869      	ldr	r1, [r5, #4]
 8009234:	4658      	mov	r0, fp
 8009236:	f000 fa0f 	bl	8009658 <_Balloc>
 800923a:	4606      	mov	r6, r0
 800923c:	b928      	cbnz	r0, 800924a <_dtoa_r+0x97a>
 800923e:	4b84      	ldr	r3, [pc, #528]	@ (8009450 <_dtoa_r+0xb80>)
 8009240:	4602      	mov	r2, r0
 8009242:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009246:	f7ff bb5a 	b.w	80088fe <_dtoa_r+0x2e>
 800924a:	692a      	ldr	r2, [r5, #16]
 800924c:	3202      	adds	r2, #2
 800924e:	0092      	lsls	r2, r2, #2
 8009250:	f105 010c 	add.w	r1, r5, #12
 8009254:	300c      	adds	r0, #12
 8009256:	f001 f803 	bl	800a260 <memcpy>
 800925a:	2201      	movs	r2, #1
 800925c:	4631      	mov	r1, r6
 800925e:	4658      	mov	r0, fp
 8009260:	f000 fc08 	bl	8009a74 <__lshift>
 8009264:	f10a 0301 	add.w	r3, sl, #1
 8009268:	9307      	str	r3, [sp, #28]
 800926a:	9b00      	ldr	r3, [sp, #0]
 800926c:	4453      	add	r3, sl
 800926e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009270:	9b02      	ldr	r3, [sp, #8]
 8009272:	f003 0301 	and.w	r3, r3, #1
 8009276:	462f      	mov	r7, r5
 8009278:	930a      	str	r3, [sp, #40]	@ 0x28
 800927a:	4605      	mov	r5, r0
 800927c:	9b07      	ldr	r3, [sp, #28]
 800927e:	4621      	mov	r1, r4
 8009280:	3b01      	subs	r3, #1
 8009282:	4648      	mov	r0, r9
 8009284:	9300      	str	r3, [sp, #0]
 8009286:	f7ff fa9a 	bl	80087be <quorem>
 800928a:	4639      	mov	r1, r7
 800928c:	9002      	str	r0, [sp, #8]
 800928e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009292:	4648      	mov	r0, r9
 8009294:	f000 fc5a 	bl	8009b4c <__mcmp>
 8009298:	462a      	mov	r2, r5
 800929a:	9008      	str	r0, [sp, #32]
 800929c:	4621      	mov	r1, r4
 800929e:	4658      	mov	r0, fp
 80092a0:	f000 fc70 	bl	8009b84 <__mdiff>
 80092a4:	68c2      	ldr	r2, [r0, #12]
 80092a6:	4606      	mov	r6, r0
 80092a8:	bb02      	cbnz	r2, 80092ec <_dtoa_r+0xa1c>
 80092aa:	4601      	mov	r1, r0
 80092ac:	4648      	mov	r0, r9
 80092ae:	f000 fc4d 	bl	8009b4c <__mcmp>
 80092b2:	4602      	mov	r2, r0
 80092b4:	4631      	mov	r1, r6
 80092b6:	4658      	mov	r0, fp
 80092b8:	920e      	str	r2, [sp, #56]	@ 0x38
 80092ba:	f000 fa0d 	bl	80096d8 <_Bfree>
 80092be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092c0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80092c2:	9e07      	ldr	r6, [sp, #28]
 80092c4:	ea43 0102 	orr.w	r1, r3, r2
 80092c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80092ca:	4319      	orrs	r1, r3
 80092cc:	d110      	bne.n	80092f0 <_dtoa_r+0xa20>
 80092ce:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80092d2:	d029      	beq.n	8009328 <_dtoa_r+0xa58>
 80092d4:	9b08      	ldr	r3, [sp, #32]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	dd02      	ble.n	80092e0 <_dtoa_r+0xa10>
 80092da:	9b02      	ldr	r3, [sp, #8]
 80092dc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80092e0:	9b00      	ldr	r3, [sp, #0]
 80092e2:	f883 8000 	strb.w	r8, [r3]
 80092e6:	e63f      	b.n	8008f68 <_dtoa_r+0x698>
 80092e8:	4628      	mov	r0, r5
 80092ea:	e7bb      	b.n	8009264 <_dtoa_r+0x994>
 80092ec:	2201      	movs	r2, #1
 80092ee:	e7e1      	b.n	80092b4 <_dtoa_r+0x9e4>
 80092f0:	9b08      	ldr	r3, [sp, #32]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	db04      	blt.n	8009300 <_dtoa_r+0xa30>
 80092f6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80092f8:	430b      	orrs	r3, r1
 80092fa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80092fc:	430b      	orrs	r3, r1
 80092fe:	d120      	bne.n	8009342 <_dtoa_r+0xa72>
 8009300:	2a00      	cmp	r2, #0
 8009302:	dded      	ble.n	80092e0 <_dtoa_r+0xa10>
 8009304:	4649      	mov	r1, r9
 8009306:	2201      	movs	r2, #1
 8009308:	4658      	mov	r0, fp
 800930a:	f000 fbb3 	bl	8009a74 <__lshift>
 800930e:	4621      	mov	r1, r4
 8009310:	4681      	mov	r9, r0
 8009312:	f000 fc1b 	bl	8009b4c <__mcmp>
 8009316:	2800      	cmp	r0, #0
 8009318:	dc03      	bgt.n	8009322 <_dtoa_r+0xa52>
 800931a:	d1e1      	bne.n	80092e0 <_dtoa_r+0xa10>
 800931c:	f018 0f01 	tst.w	r8, #1
 8009320:	d0de      	beq.n	80092e0 <_dtoa_r+0xa10>
 8009322:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009326:	d1d8      	bne.n	80092da <_dtoa_r+0xa0a>
 8009328:	9a00      	ldr	r2, [sp, #0]
 800932a:	2339      	movs	r3, #57	@ 0x39
 800932c:	7013      	strb	r3, [r2, #0]
 800932e:	4633      	mov	r3, r6
 8009330:	461e      	mov	r6, r3
 8009332:	3b01      	subs	r3, #1
 8009334:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009338:	2a39      	cmp	r2, #57	@ 0x39
 800933a:	d052      	beq.n	80093e2 <_dtoa_r+0xb12>
 800933c:	3201      	adds	r2, #1
 800933e:	701a      	strb	r2, [r3, #0]
 8009340:	e612      	b.n	8008f68 <_dtoa_r+0x698>
 8009342:	2a00      	cmp	r2, #0
 8009344:	dd07      	ble.n	8009356 <_dtoa_r+0xa86>
 8009346:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800934a:	d0ed      	beq.n	8009328 <_dtoa_r+0xa58>
 800934c:	9a00      	ldr	r2, [sp, #0]
 800934e:	f108 0301 	add.w	r3, r8, #1
 8009352:	7013      	strb	r3, [r2, #0]
 8009354:	e608      	b.n	8008f68 <_dtoa_r+0x698>
 8009356:	9b07      	ldr	r3, [sp, #28]
 8009358:	9a07      	ldr	r2, [sp, #28]
 800935a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800935e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009360:	4293      	cmp	r3, r2
 8009362:	d028      	beq.n	80093b6 <_dtoa_r+0xae6>
 8009364:	4649      	mov	r1, r9
 8009366:	2300      	movs	r3, #0
 8009368:	220a      	movs	r2, #10
 800936a:	4658      	mov	r0, fp
 800936c:	f000 f9d6 	bl	800971c <__multadd>
 8009370:	42af      	cmp	r7, r5
 8009372:	4681      	mov	r9, r0
 8009374:	f04f 0300 	mov.w	r3, #0
 8009378:	f04f 020a 	mov.w	r2, #10
 800937c:	4639      	mov	r1, r7
 800937e:	4658      	mov	r0, fp
 8009380:	d107      	bne.n	8009392 <_dtoa_r+0xac2>
 8009382:	f000 f9cb 	bl	800971c <__multadd>
 8009386:	4607      	mov	r7, r0
 8009388:	4605      	mov	r5, r0
 800938a:	9b07      	ldr	r3, [sp, #28]
 800938c:	3301      	adds	r3, #1
 800938e:	9307      	str	r3, [sp, #28]
 8009390:	e774      	b.n	800927c <_dtoa_r+0x9ac>
 8009392:	f000 f9c3 	bl	800971c <__multadd>
 8009396:	4629      	mov	r1, r5
 8009398:	4607      	mov	r7, r0
 800939a:	2300      	movs	r3, #0
 800939c:	220a      	movs	r2, #10
 800939e:	4658      	mov	r0, fp
 80093a0:	f000 f9bc 	bl	800971c <__multadd>
 80093a4:	4605      	mov	r5, r0
 80093a6:	e7f0      	b.n	800938a <_dtoa_r+0xaba>
 80093a8:	9b00      	ldr	r3, [sp, #0]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	bfcc      	ite	gt
 80093ae:	461e      	movgt	r6, r3
 80093b0:	2601      	movle	r6, #1
 80093b2:	4456      	add	r6, sl
 80093b4:	2700      	movs	r7, #0
 80093b6:	4649      	mov	r1, r9
 80093b8:	2201      	movs	r2, #1
 80093ba:	4658      	mov	r0, fp
 80093bc:	f000 fb5a 	bl	8009a74 <__lshift>
 80093c0:	4621      	mov	r1, r4
 80093c2:	4681      	mov	r9, r0
 80093c4:	f000 fbc2 	bl	8009b4c <__mcmp>
 80093c8:	2800      	cmp	r0, #0
 80093ca:	dcb0      	bgt.n	800932e <_dtoa_r+0xa5e>
 80093cc:	d102      	bne.n	80093d4 <_dtoa_r+0xb04>
 80093ce:	f018 0f01 	tst.w	r8, #1
 80093d2:	d1ac      	bne.n	800932e <_dtoa_r+0xa5e>
 80093d4:	4633      	mov	r3, r6
 80093d6:	461e      	mov	r6, r3
 80093d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80093dc:	2a30      	cmp	r2, #48	@ 0x30
 80093de:	d0fa      	beq.n	80093d6 <_dtoa_r+0xb06>
 80093e0:	e5c2      	b.n	8008f68 <_dtoa_r+0x698>
 80093e2:	459a      	cmp	sl, r3
 80093e4:	d1a4      	bne.n	8009330 <_dtoa_r+0xa60>
 80093e6:	9b04      	ldr	r3, [sp, #16]
 80093e8:	3301      	adds	r3, #1
 80093ea:	9304      	str	r3, [sp, #16]
 80093ec:	2331      	movs	r3, #49	@ 0x31
 80093ee:	f88a 3000 	strb.w	r3, [sl]
 80093f2:	e5b9      	b.n	8008f68 <_dtoa_r+0x698>
 80093f4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80093f6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8009454 <_dtoa_r+0xb84>
 80093fa:	b11b      	cbz	r3, 8009404 <_dtoa_r+0xb34>
 80093fc:	f10a 0308 	add.w	r3, sl, #8
 8009400:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009402:	6013      	str	r3, [r2, #0]
 8009404:	4650      	mov	r0, sl
 8009406:	b019      	add	sp, #100	@ 0x64
 8009408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800940c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800940e:	2b01      	cmp	r3, #1
 8009410:	f77f ae37 	ble.w	8009082 <_dtoa_r+0x7b2>
 8009414:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009416:	930a      	str	r3, [sp, #40]	@ 0x28
 8009418:	2001      	movs	r0, #1
 800941a:	e655      	b.n	80090c8 <_dtoa_r+0x7f8>
 800941c:	9b00      	ldr	r3, [sp, #0]
 800941e:	2b00      	cmp	r3, #0
 8009420:	f77f aed6 	ble.w	80091d0 <_dtoa_r+0x900>
 8009424:	4656      	mov	r6, sl
 8009426:	4621      	mov	r1, r4
 8009428:	4648      	mov	r0, r9
 800942a:	f7ff f9c8 	bl	80087be <quorem>
 800942e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009432:	f806 8b01 	strb.w	r8, [r6], #1
 8009436:	9b00      	ldr	r3, [sp, #0]
 8009438:	eba6 020a 	sub.w	r2, r6, sl
 800943c:	4293      	cmp	r3, r2
 800943e:	ddb3      	ble.n	80093a8 <_dtoa_r+0xad8>
 8009440:	4649      	mov	r1, r9
 8009442:	2300      	movs	r3, #0
 8009444:	220a      	movs	r2, #10
 8009446:	4658      	mov	r0, fp
 8009448:	f000 f968 	bl	800971c <__multadd>
 800944c:	4681      	mov	r9, r0
 800944e:	e7ea      	b.n	8009426 <_dtoa_r+0xb56>
 8009450:	0800a5d0 	.word	0x0800a5d0
 8009454:	0800a554 	.word	0x0800a554

08009458 <_free_r>:
 8009458:	b538      	push	{r3, r4, r5, lr}
 800945a:	4605      	mov	r5, r0
 800945c:	2900      	cmp	r1, #0
 800945e:	d041      	beq.n	80094e4 <_free_r+0x8c>
 8009460:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009464:	1f0c      	subs	r4, r1, #4
 8009466:	2b00      	cmp	r3, #0
 8009468:	bfb8      	it	lt
 800946a:	18e4      	addlt	r4, r4, r3
 800946c:	f000 f8e8 	bl	8009640 <__malloc_lock>
 8009470:	4a1d      	ldr	r2, [pc, #116]	@ (80094e8 <_free_r+0x90>)
 8009472:	6813      	ldr	r3, [r2, #0]
 8009474:	b933      	cbnz	r3, 8009484 <_free_r+0x2c>
 8009476:	6063      	str	r3, [r4, #4]
 8009478:	6014      	str	r4, [r2, #0]
 800947a:	4628      	mov	r0, r5
 800947c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009480:	f000 b8e4 	b.w	800964c <__malloc_unlock>
 8009484:	42a3      	cmp	r3, r4
 8009486:	d908      	bls.n	800949a <_free_r+0x42>
 8009488:	6820      	ldr	r0, [r4, #0]
 800948a:	1821      	adds	r1, r4, r0
 800948c:	428b      	cmp	r3, r1
 800948e:	bf01      	itttt	eq
 8009490:	6819      	ldreq	r1, [r3, #0]
 8009492:	685b      	ldreq	r3, [r3, #4]
 8009494:	1809      	addeq	r1, r1, r0
 8009496:	6021      	streq	r1, [r4, #0]
 8009498:	e7ed      	b.n	8009476 <_free_r+0x1e>
 800949a:	461a      	mov	r2, r3
 800949c:	685b      	ldr	r3, [r3, #4]
 800949e:	b10b      	cbz	r3, 80094a4 <_free_r+0x4c>
 80094a0:	42a3      	cmp	r3, r4
 80094a2:	d9fa      	bls.n	800949a <_free_r+0x42>
 80094a4:	6811      	ldr	r1, [r2, #0]
 80094a6:	1850      	adds	r0, r2, r1
 80094a8:	42a0      	cmp	r0, r4
 80094aa:	d10b      	bne.n	80094c4 <_free_r+0x6c>
 80094ac:	6820      	ldr	r0, [r4, #0]
 80094ae:	4401      	add	r1, r0
 80094b0:	1850      	adds	r0, r2, r1
 80094b2:	4283      	cmp	r3, r0
 80094b4:	6011      	str	r1, [r2, #0]
 80094b6:	d1e0      	bne.n	800947a <_free_r+0x22>
 80094b8:	6818      	ldr	r0, [r3, #0]
 80094ba:	685b      	ldr	r3, [r3, #4]
 80094bc:	6053      	str	r3, [r2, #4]
 80094be:	4408      	add	r0, r1
 80094c0:	6010      	str	r0, [r2, #0]
 80094c2:	e7da      	b.n	800947a <_free_r+0x22>
 80094c4:	d902      	bls.n	80094cc <_free_r+0x74>
 80094c6:	230c      	movs	r3, #12
 80094c8:	602b      	str	r3, [r5, #0]
 80094ca:	e7d6      	b.n	800947a <_free_r+0x22>
 80094cc:	6820      	ldr	r0, [r4, #0]
 80094ce:	1821      	adds	r1, r4, r0
 80094d0:	428b      	cmp	r3, r1
 80094d2:	bf04      	itt	eq
 80094d4:	6819      	ldreq	r1, [r3, #0]
 80094d6:	685b      	ldreq	r3, [r3, #4]
 80094d8:	6063      	str	r3, [r4, #4]
 80094da:	bf04      	itt	eq
 80094dc:	1809      	addeq	r1, r1, r0
 80094de:	6021      	streq	r1, [r4, #0]
 80094e0:	6054      	str	r4, [r2, #4]
 80094e2:	e7ca      	b.n	800947a <_free_r+0x22>
 80094e4:	bd38      	pop	{r3, r4, r5, pc}
 80094e6:	bf00      	nop
 80094e8:	200006cc 	.word	0x200006cc

080094ec <malloc>:
 80094ec:	4b02      	ldr	r3, [pc, #8]	@ (80094f8 <malloc+0xc>)
 80094ee:	4601      	mov	r1, r0
 80094f0:	6818      	ldr	r0, [r3, #0]
 80094f2:	f000 b825 	b.w	8009540 <_malloc_r>
 80094f6:	bf00      	nop
 80094f8:	20000018 	.word	0x20000018

080094fc <sbrk_aligned>:
 80094fc:	b570      	push	{r4, r5, r6, lr}
 80094fe:	4e0f      	ldr	r6, [pc, #60]	@ (800953c <sbrk_aligned+0x40>)
 8009500:	460c      	mov	r4, r1
 8009502:	6831      	ldr	r1, [r6, #0]
 8009504:	4605      	mov	r5, r0
 8009506:	b911      	cbnz	r1, 800950e <sbrk_aligned+0x12>
 8009508:	f000 fe9a 	bl	800a240 <_sbrk_r>
 800950c:	6030      	str	r0, [r6, #0]
 800950e:	4621      	mov	r1, r4
 8009510:	4628      	mov	r0, r5
 8009512:	f000 fe95 	bl	800a240 <_sbrk_r>
 8009516:	1c43      	adds	r3, r0, #1
 8009518:	d103      	bne.n	8009522 <sbrk_aligned+0x26>
 800951a:	f04f 34ff 	mov.w	r4, #4294967295
 800951e:	4620      	mov	r0, r4
 8009520:	bd70      	pop	{r4, r5, r6, pc}
 8009522:	1cc4      	adds	r4, r0, #3
 8009524:	f024 0403 	bic.w	r4, r4, #3
 8009528:	42a0      	cmp	r0, r4
 800952a:	d0f8      	beq.n	800951e <sbrk_aligned+0x22>
 800952c:	1a21      	subs	r1, r4, r0
 800952e:	4628      	mov	r0, r5
 8009530:	f000 fe86 	bl	800a240 <_sbrk_r>
 8009534:	3001      	adds	r0, #1
 8009536:	d1f2      	bne.n	800951e <sbrk_aligned+0x22>
 8009538:	e7ef      	b.n	800951a <sbrk_aligned+0x1e>
 800953a:	bf00      	nop
 800953c:	200006c8 	.word	0x200006c8

08009540 <_malloc_r>:
 8009540:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009544:	1ccd      	adds	r5, r1, #3
 8009546:	f025 0503 	bic.w	r5, r5, #3
 800954a:	3508      	adds	r5, #8
 800954c:	2d0c      	cmp	r5, #12
 800954e:	bf38      	it	cc
 8009550:	250c      	movcc	r5, #12
 8009552:	2d00      	cmp	r5, #0
 8009554:	4606      	mov	r6, r0
 8009556:	db01      	blt.n	800955c <_malloc_r+0x1c>
 8009558:	42a9      	cmp	r1, r5
 800955a:	d904      	bls.n	8009566 <_malloc_r+0x26>
 800955c:	230c      	movs	r3, #12
 800955e:	6033      	str	r3, [r6, #0]
 8009560:	2000      	movs	r0, #0
 8009562:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009566:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800963c <_malloc_r+0xfc>
 800956a:	f000 f869 	bl	8009640 <__malloc_lock>
 800956e:	f8d8 3000 	ldr.w	r3, [r8]
 8009572:	461c      	mov	r4, r3
 8009574:	bb44      	cbnz	r4, 80095c8 <_malloc_r+0x88>
 8009576:	4629      	mov	r1, r5
 8009578:	4630      	mov	r0, r6
 800957a:	f7ff ffbf 	bl	80094fc <sbrk_aligned>
 800957e:	1c43      	adds	r3, r0, #1
 8009580:	4604      	mov	r4, r0
 8009582:	d158      	bne.n	8009636 <_malloc_r+0xf6>
 8009584:	f8d8 4000 	ldr.w	r4, [r8]
 8009588:	4627      	mov	r7, r4
 800958a:	2f00      	cmp	r7, #0
 800958c:	d143      	bne.n	8009616 <_malloc_r+0xd6>
 800958e:	2c00      	cmp	r4, #0
 8009590:	d04b      	beq.n	800962a <_malloc_r+0xea>
 8009592:	6823      	ldr	r3, [r4, #0]
 8009594:	4639      	mov	r1, r7
 8009596:	4630      	mov	r0, r6
 8009598:	eb04 0903 	add.w	r9, r4, r3
 800959c:	f000 fe50 	bl	800a240 <_sbrk_r>
 80095a0:	4581      	cmp	r9, r0
 80095a2:	d142      	bne.n	800962a <_malloc_r+0xea>
 80095a4:	6821      	ldr	r1, [r4, #0]
 80095a6:	1a6d      	subs	r5, r5, r1
 80095a8:	4629      	mov	r1, r5
 80095aa:	4630      	mov	r0, r6
 80095ac:	f7ff ffa6 	bl	80094fc <sbrk_aligned>
 80095b0:	3001      	adds	r0, #1
 80095b2:	d03a      	beq.n	800962a <_malloc_r+0xea>
 80095b4:	6823      	ldr	r3, [r4, #0]
 80095b6:	442b      	add	r3, r5
 80095b8:	6023      	str	r3, [r4, #0]
 80095ba:	f8d8 3000 	ldr.w	r3, [r8]
 80095be:	685a      	ldr	r2, [r3, #4]
 80095c0:	bb62      	cbnz	r2, 800961c <_malloc_r+0xdc>
 80095c2:	f8c8 7000 	str.w	r7, [r8]
 80095c6:	e00f      	b.n	80095e8 <_malloc_r+0xa8>
 80095c8:	6822      	ldr	r2, [r4, #0]
 80095ca:	1b52      	subs	r2, r2, r5
 80095cc:	d420      	bmi.n	8009610 <_malloc_r+0xd0>
 80095ce:	2a0b      	cmp	r2, #11
 80095d0:	d917      	bls.n	8009602 <_malloc_r+0xc2>
 80095d2:	1961      	adds	r1, r4, r5
 80095d4:	42a3      	cmp	r3, r4
 80095d6:	6025      	str	r5, [r4, #0]
 80095d8:	bf18      	it	ne
 80095da:	6059      	strne	r1, [r3, #4]
 80095dc:	6863      	ldr	r3, [r4, #4]
 80095de:	bf08      	it	eq
 80095e0:	f8c8 1000 	streq.w	r1, [r8]
 80095e4:	5162      	str	r2, [r4, r5]
 80095e6:	604b      	str	r3, [r1, #4]
 80095e8:	4630      	mov	r0, r6
 80095ea:	f000 f82f 	bl	800964c <__malloc_unlock>
 80095ee:	f104 000b 	add.w	r0, r4, #11
 80095f2:	1d23      	adds	r3, r4, #4
 80095f4:	f020 0007 	bic.w	r0, r0, #7
 80095f8:	1ac2      	subs	r2, r0, r3
 80095fa:	bf1c      	itt	ne
 80095fc:	1a1b      	subne	r3, r3, r0
 80095fe:	50a3      	strne	r3, [r4, r2]
 8009600:	e7af      	b.n	8009562 <_malloc_r+0x22>
 8009602:	6862      	ldr	r2, [r4, #4]
 8009604:	42a3      	cmp	r3, r4
 8009606:	bf0c      	ite	eq
 8009608:	f8c8 2000 	streq.w	r2, [r8]
 800960c:	605a      	strne	r2, [r3, #4]
 800960e:	e7eb      	b.n	80095e8 <_malloc_r+0xa8>
 8009610:	4623      	mov	r3, r4
 8009612:	6864      	ldr	r4, [r4, #4]
 8009614:	e7ae      	b.n	8009574 <_malloc_r+0x34>
 8009616:	463c      	mov	r4, r7
 8009618:	687f      	ldr	r7, [r7, #4]
 800961a:	e7b6      	b.n	800958a <_malloc_r+0x4a>
 800961c:	461a      	mov	r2, r3
 800961e:	685b      	ldr	r3, [r3, #4]
 8009620:	42a3      	cmp	r3, r4
 8009622:	d1fb      	bne.n	800961c <_malloc_r+0xdc>
 8009624:	2300      	movs	r3, #0
 8009626:	6053      	str	r3, [r2, #4]
 8009628:	e7de      	b.n	80095e8 <_malloc_r+0xa8>
 800962a:	230c      	movs	r3, #12
 800962c:	6033      	str	r3, [r6, #0]
 800962e:	4630      	mov	r0, r6
 8009630:	f000 f80c 	bl	800964c <__malloc_unlock>
 8009634:	e794      	b.n	8009560 <_malloc_r+0x20>
 8009636:	6005      	str	r5, [r0, #0]
 8009638:	e7d6      	b.n	80095e8 <_malloc_r+0xa8>
 800963a:	bf00      	nop
 800963c:	200006cc 	.word	0x200006cc

08009640 <__malloc_lock>:
 8009640:	4801      	ldr	r0, [pc, #4]	@ (8009648 <__malloc_lock+0x8>)
 8009642:	f7ff b8ba 	b.w	80087ba <__retarget_lock_acquire_recursive>
 8009646:	bf00      	nop
 8009648:	200006c4 	.word	0x200006c4

0800964c <__malloc_unlock>:
 800964c:	4801      	ldr	r0, [pc, #4]	@ (8009654 <__malloc_unlock+0x8>)
 800964e:	f7ff b8b5 	b.w	80087bc <__retarget_lock_release_recursive>
 8009652:	bf00      	nop
 8009654:	200006c4 	.word	0x200006c4

08009658 <_Balloc>:
 8009658:	b570      	push	{r4, r5, r6, lr}
 800965a:	69c6      	ldr	r6, [r0, #28]
 800965c:	4604      	mov	r4, r0
 800965e:	460d      	mov	r5, r1
 8009660:	b976      	cbnz	r6, 8009680 <_Balloc+0x28>
 8009662:	2010      	movs	r0, #16
 8009664:	f7ff ff42 	bl	80094ec <malloc>
 8009668:	4602      	mov	r2, r0
 800966a:	61e0      	str	r0, [r4, #28]
 800966c:	b920      	cbnz	r0, 8009678 <_Balloc+0x20>
 800966e:	4b18      	ldr	r3, [pc, #96]	@ (80096d0 <_Balloc+0x78>)
 8009670:	4818      	ldr	r0, [pc, #96]	@ (80096d4 <_Balloc+0x7c>)
 8009672:	216b      	movs	r1, #107	@ 0x6b
 8009674:	f000 fe02 	bl	800a27c <__assert_func>
 8009678:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800967c:	6006      	str	r6, [r0, #0]
 800967e:	60c6      	str	r6, [r0, #12]
 8009680:	69e6      	ldr	r6, [r4, #28]
 8009682:	68f3      	ldr	r3, [r6, #12]
 8009684:	b183      	cbz	r3, 80096a8 <_Balloc+0x50>
 8009686:	69e3      	ldr	r3, [r4, #28]
 8009688:	68db      	ldr	r3, [r3, #12]
 800968a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800968e:	b9b8      	cbnz	r0, 80096c0 <_Balloc+0x68>
 8009690:	2101      	movs	r1, #1
 8009692:	fa01 f605 	lsl.w	r6, r1, r5
 8009696:	1d72      	adds	r2, r6, #5
 8009698:	0092      	lsls	r2, r2, #2
 800969a:	4620      	mov	r0, r4
 800969c:	f000 fe0c 	bl	800a2b8 <_calloc_r>
 80096a0:	b160      	cbz	r0, 80096bc <_Balloc+0x64>
 80096a2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80096a6:	e00e      	b.n	80096c6 <_Balloc+0x6e>
 80096a8:	2221      	movs	r2, #33	@ 0x21
 80096aa:	2104      	movs	r1, #4
 80096ac:	4620      	mov	r0, r4
 80096ae:	f000 fe03 	bl	800a2b8 <_calloc_r>
 80096b2:	69e3      	ldr	r3, [r4, #28]
 80096b4:	60f0      	str	r0, [r6, #12]
 80096b6:	68db      	ldr	r3, [r3, #12]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d1e4      	bne.n	8009686 <_Balloc+0x2e>
 80096bc:	2000      	movs	r0, #0
 80096be:	bd70      	pop	{r4, r5, r6, pc}
 80096c0:	6802      	ldr	r2, [r0, #0]
 80096c2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80096c6:	2300      	movs	r3, #0
 80096c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80096cc:	e7f7      	b.n	80096be <_Balloc+0x66>
 80096ce:	bf00      	nop
 80096d0:	0800a561 	.word	0x0800a561
 80096d4:	0800a5e1 	.word	0x0800a5e1

080096d8 <_Bfree>:
 80096d8:	b570      	push	{r4, r5, r6, lr}
 80096da:	69c6      	ldr	r6, [r0, #28]
 80096dc:	4605      	mov	r5, r0
 80096de:	460c      	mov	r4, r1
 80096e0:	b976      	cbnz	r6, 8009700 <_Bfree+0x28>
 80096e2:	2010      	movs	r0, #16
 80096e4:	f7ff ff02 	bl	80094ec <malloc>
 80096e8:	4602      	mov	r2, r0
 80096ea:	61e8      	str	r0, [r5, #28]
 80096ec:	b920      	cbnz	r0, 80096f8 <_Bfree+0x20>
 80096ee:	4b09      	ldr	r3, [pc, #36]	@ (8009714 <_Bfree+0x3c>)
 80096f0:	4809      	ldr	r0, [pc, #36]	@ (8009718 <_Bfree+0x40>)
 80096f2:	218f      	movs	r1, #143	@ 0x8f
 80096f4:	f000 fdc2 	bl	800a27c <__assert_func>
 80096f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80096fc:	6006      	str	r6, [r0, #0]
 80096fe:	60c6      	str	r6, [r0, #12]
 8009700:	b13c      	cbz	r4, 8009712 <_Bfree+0x3a>
 8009702:	69eb      	ldr	r3, [r5, #28]
 8009704:	6862      	ldr	r2, [r4, #4]
 8009706:	68db      	ldr	r3, [r3, #12]
 8009708:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800970c:	6021      	str	r1, [r4, #0]
 800970e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009712:	bd70      	pop	{r4, r5, r6, pc}
 8009714:	0800a561 	.word	0x0800a561
 8009718:	0800a5e1 	.word	0x0800a5e1

0800971c <__multadd>:
 800971c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009720:	690d      	ldr	r5, [r1, #16]
 8009722:	4607      	mov	r7, r0
 8009724:	460c      	mov	r4, r1
 8009726:	461e      	mov	r6, r3
 8009728:	f101 0c14 	add.w	ip, r1, #20
 800972c:	2000      	movs	r0, #0
 800972e:	f8dc 3000 	ldr.w	r3, [ip]
 8009732:	b299      	uxth	r1, r3
 8009734:	fb02 6101 	mla	r1, r2, r1, r6
 8009738:	0c1e      	lsrs	r6, r3, #16
 800973a:	0c0b      	lsrs	r3, r1, #16
 800973c:	fb02 3306 	mla	r3, r2, r6, r3
 8009740:	b289      	uxth	r1, r1
 8009742:	3001      	adds	r0, #1
 8009744:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009748:	4285      	cmp	r5, r0
 800974a:	f84c 1b04 	str.w	r1, [ip], #4
 800974e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009752:	dcec      	bgt.n	800972e <__multadd+0x12>
 8009754:	b30e      	cbz	r6, 800979a <__multadd+0x7e>
 8009756:	68a3      	ldr	r3, [r4, #8]
 8009758:	42ab      	cmp	r3, r5
 800975a:	dc19      	bgt.n	8009790 <__multadd+0x74>
 800975c:	6861      	ldr	r1, [r4, #4]
 800975e:	4638      	mov	r0, r7
 8009760:	3101      	adds	r1, #1
 8009762:	f7ff ff79 	bl	8009658 <_Balloc>
 8009766:	4680      	mov	r8, r0
 8009768:	b928      	cbnz	r0, 8009776 <__multadd+0x5a>
 800976a:	4602      	mov	r2, r0
 800976c:	4b0c      	ldr	r3, [pc, #48]	@ (80097a0 <__multadd+0x84>)
 800976e:	480d      	ldr	r0, [pc, #52]	@ (80097a4 <__multadd+0x88>)
 8009770:	21ba      	movs	r1, #186	@ 0xba
 8009772:	f000 fd83 	bl	800a27c <__assert_func>
 8009776:	6922      	ldr	r2, [r4, #16]
 8009778:	3202      	adds	r2, #2
 800977a:	f104 010c 	add.w	r1, r4, #12
 800977e:	0092      	lsls	r2, r2, #2
 8009780:	300c      	adds	r0, #12
 8009782:	f000 fd6d 	bl	800a260 <memcpy>
 8009786:	4621      	mov	r1, r4
 8009788:	4638      	mov	r0, r7
 800978a:	f7ff ffa5 	bl	80096d8 <_Bfree>
 800978e:	4644      	mov	r4, r8
 8009790:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009794:	3501      	adds	r5, #1
 8009796:	615e      	str	r6, [r3, #20]
 8009798:	6125      	str	r5, [r4, #16]
 800979a:	4620      	mov	r0, r4
 800979c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097a0:	0800a5d0 	.word	0x0800a5d0
 80097a4:	0800a5e1 	.word	0x0800a5e1

080097a8 <__hi0bits>:
 80097a8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80097ac:	4603      	mov	r3, r0
 80097ae:	bf36      	itet	cc
 80097b0:	0403      	lslcc	r3, r0, #16
 80097b2:	2000      	movcs	r0, #0
 80097b4:	2010      	movcc	r0, #16
 80097b6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80097ba:	bf3c      	itt	cc
 80097bc:	021b      	lslcc	r3, r3, #8
 80097be:	3008      	addcc	r0, #8
 80097c0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80097c4:	bf3c      	itt	cc
 80097c6:	011b      	lslcc	r3, r3, #4
 80097c8:	3004      	addcc	r0, #4
 80097ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80097ce:	bf3c      	itt	cc
 80097d0:	009b      	lslcc	r3, r3, #2
 80097d2:	3002      	addcc	r0, #2
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	db05      	blt.n	80097e4 <__hi0bits+0x3c>
 80097d8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80097dc:	f100 0001 	add.w	r0, r0, #1
 80097e0:	bf08      	it	eq
 80097e2:	2020      	moveq	r0, #32
 80097e4:	4770      	bx	lr

080097e6 <__lo0bits>:
 80097e6:	6803      	ldr	r3, [r0, #0]
 80097e8:	4602      	mov	r2, r0
 80097ea:	f013 0007 	ands.w	r0, r3, #7
 80097ee:	d00b      	beq.n	8009808 <__lo0bits+0x22>
 80097f0:	07d9      	lsls	r1, r3, #31
 80097f2:	d421      	bmi.n	8009838 <__lo0bits+0x52>
 80097f4:	0798      	lsls	r0, r3, #30
 80097f6:	bf49      	itett	mi
 80097f8:	085b      	lsrmi	r3, r3, #1
 80097fa:	089b      	lsrpl	r3, r3, #2
 80097fc:	2001      	movmi	r0, #1
 80097fe:	6013      	strmi	r3, [r2, #0]
 8009800:	bf5c      	itt	pl
 8009802:	6013      	strpl	r3, [r2, #0]
 8009804:	2002      	movpl	r0, #2
 8009806:	4770      	bx	lr
 8009808:	b299      	uxth	r1, r3
 800980a:	b909      	cbnz	r1, 8009810 <__lo0bits+0x2a>
 800980c:	0c1b      	lsrs	r3, r3, #16
 800980e:	2010      	movs	r0, #16
 8009810:	b2d9      	uxtb	r1, r3
 8009812:	b909      	cbnz	r1, 8009818 <__lo0bits+0x32>
 8009814:	3008      	adds	r0, #8
 8009816:	0a1b      	lsrs	r3, r3, #8
 8009818:	0719      	lsls	r1, r3, #28
 800981a:	bf04      	itt	eq
 800981c:	091b      	lsreq	r3, r3, #4
 800981e:	3004      	addeq	r0, #4
 8009820:	0799      	lsls	r1, r3, #30
 8009822:	bf04      	itt	eq
 8009824:	089b      	lsreq	r3, r3, #2
 8009826:	3002      	addeq	r0, #2
 8009828:	07d9      	lsls	r1, r3, #31
 800982a:	d403      	bmi.n	8009834 <__lo0bits+0x4e>
 800982c:	085b      	lsrs	r3, r3, #1
 800982e:	f100 0001 	add.w	r0, r0, #1
 8009832:	d003      	beq.n	800983c <__lo0bits+0x56>
 8009834:	6013      	str	r3, [r2, #0]
 8009836:	4770      	bx	lr
 8009838:	2000      	movs	r0, #0
 800983a:	4770      	bx	lr
 800983c:	2020      	movs	r0, #32
 800983e:	4770      	bx	lr

08009840 <__i2b>:
 8009840:	b510      	push	{r4, lr}
 8009842:	460c      	mov	r4, r1
 8009844:	2101      	movs	r1, #1
 8009846:	f7ff ff07 	bl	8009658 <_Balloc>
 800984a:	4602      	mov	r2, r0
 800984c:	b928      	cbnz	r0, 800985a <__i2b+0x1a>
 800984e:	4b05      	ldr	r3, [pc, #20]	@ (8009864 <__i2b+0x24>)
 8009850:	4805      	ldr	r0, [pc, #20]	@ (8009868 <__i2b+0x28>)
 8009852:	f240 1145 	movw	r1, #325	@ 0x145
 8009856:	f000 fd11 	bl	800a27c <__assert_func>
 800985a:	2301      	movs	r3, #1
 800985c:	6144      	str	r4, [r0, #20]
 800985e:	6103      	str	r3, [r0, #16]
 8009860:	bd10      	pop	{r4, pc}
 8009862:	bf00      	nop
 8009864:	0800a5d0 	.word	0x0800a5d0
 8009868:	0800a5e1 	.word	0x0800a5e1

0800986c <__multiply>:
 800986c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009870:	4614      	mov	r4, r2
 8009872:	690a      	ldr	r2, [r1, #16]
 8009874:	6923      	ldr	r3, [r4, #16]
 8009876:	429a      	cmp	r2, r3
 8009878:	bfa8      	it	ge
 800987a:	4623      	movge	r3, r4
 800987c:	460f      	mov	r7, r1
 800987e:	bfa4      	itt	ge
 8009880:	460c      	movge	r4, r1
 8009882:	461f      	movge	r7, r3
 8009884:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009888:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800988c:	68a3      	ldr	r3, [r4, #8]
 800988e:	6861      	ldr	r1, [r4, #4]
 8009890:	eb0a 0609 	add.w	r6, sl, r9
 8009894:	42b3      	cmp	r3, r6
 8009896:	b085      	sub	sp, #20
 8009898:	bfb8      	it	lt
 800989a:	3101      	addlt	r1, #1
 800989c:	f7ff fedc 	bl	8009658 <_Balloc>
 80098a0:	b930      	cbnz	r0, 80098b0 <__multiply+0x44>
 80098a2:	4602      	mov	r2, r0
 80098a4:	4b44      	ldr	r3, [pc, #272]	@ (80099b8 <__multiply+0x14c>)
 80098a6:	4845      	ldr	r0, [pc, #276]	@ (80099bc <__multiply+0x150>)
 80098a8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80098ac:	f000 fce6 	bl	800a27c <__assert_func>
 80098b0:	f100 0514 	add.w	r5, r0, #20
 80098b4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80098b8:	462b      	mov	r3, r5
 80098ba:	2200      	movs	r2, #0
 80098bc:	4543      	cmp	r3, r8
 80098be:	d321      	bcc.n	8009904 <__multiply+0x98>
 80098c0:	f107 0114 	add.w	r1, r7, #20
 80098c4:	f104 0214 	add.w	r2, r4, #20
 80098c8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80098cc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80098d0:	9302      	str	r3, [sp, #8]
 80098d2:	1b13      	subs	r3, r2, r4
 80098d4:	3b15      	subs	r3, #21
 80098d6:	f023 0303 	bic.w	r3, r3, #3
 80098da:	3304      	adds	r3, #4
 80098dc:	f104 0715 	add.w	r7, r4, #21
 80098e0:	42ba      	cmp	r2, r7
 80098e2:	bf38      	it	cc
 80098e4:	2304      	movcc	r3, #4
 80098e6:	9301      	str	r3, [sp, #4]
 80098e8:	9b02      	ldr	r3, [sp, #8]
 80098ea:	9103      	str	r1, [sp, #12]
 80098ec:	428b      	cmp	r3, r1
 80098ee:	d80c      	bhi.n	800990a <__multiply+0x9e>
 80098f0:	2e00      	cmp	r6, #0
 80098f2:	dd03      	ble.n	80098fc <__multiply+0x90>
 80098f4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d05b      	beq.n	80099b4 <__multiply+0x148>
 80098fc:	6106      	str	r6, [r0, #16]
 80098fe:	b005      	add	sp, #20
 8009900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009904:	f843 2b04 	str.w	r2, [r3], #4
 8009908:	e7d8      	b.n	80098bc <__multiply+0x50>
 800990a:	f8b1 a000 	ldrh.w	sl, [r1]
 800990e:	f1ba 0f00 	cmp.w	sl, #0
 8009912:	d024      	beq.n	800995e <__multiply+0xf2>
 8009914:	f104 0e14 	add.w	lr, r4, #20
 8009918:	46a9      	mov	r9, r5
 800991a:	f04f 0c00 	mov.w	ip, #0
 800991e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009922:	f8d9 3000 	ldr.w	r3, [r9]
 8009926:	fa1f fb87 	uxth.w	fp, r7
 800992a:	b29b      	uxth	r3, r3
 800992c:	fb0a 330b 	mla	r3, sl, fp, r3
 8009930:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8009934:	f8d9 7000 	ldr.w	r7, [r9]
 8009938:	4463      	add	r3, ip
 800993a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800993e:	fb0a c70b 	mla	r7, sl, fp, ip
 8009942:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8009946:	b29b      	uxth	r3, r3
 8009948:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800994c:	4572      	cmp	r2, lr
 800994e:	f849 3b04 	str.w	r3, [r9], #4
 8009952:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009956:	d8e2      	bhi.n	800991e <__multiply+0xb2>
 8009958:	9b01      	ldr	r3, [sp, #4]
 800995a:	f845 c003 	str.w	ip, [r5, r3]
 800995e:	9b03      	ldr	r3, [sp, #12]
 8009960:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009964:	3104      	adds	r1, #4
 8009966:	f1b9 0f00 	cmp.w	r9, #0
 800996a:	d021      	beq.n	80099b0 <__multiply+0x144>
 800996c:	682b      	ldr	r3, [r5, #0]
 800996e:	f104 0c14 	add.w	ip, r4, #20
 8009972:	46ae      	mov	lr, r5
 8009974:	f04f 0a00 	mov.w	sl, #0
 8009978:	f8bc b000 	ldrh.w	fp, [ip]
 800997c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009980:	fb09 770b 	mla	r7, r9, fp, r7
 8009984:	4457      	add	r7, sl
 8009986:	b29b      	uxth	r3, r3
 8009988:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800998c:	f84e 3b04 	str.w	r3, [lr], #4
 8009990:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009994:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009998:	f8be 3000 	ldrh.w	r3, [lr]
 800999c:	fb09 330a 	mla	r3, r9, sl, r3
 80099a0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80099a4:	4562      	cmp	r2, ip
 80099a6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80099aa:	d8e5      	bhi.n	8009978 <__multiply+0x10c>
 80099ac:	9f01      	ldr	r7, [sp, #4]
 80099ae:	51eb      	str	r3, [r5, r7]
 80099b0:	3504      	adds	r5, #4
 80099b2:	e799      	b.n	80098e8 <__multiply+0x7c>
 80099b4:	3e01      	subs	r6, #1
 80099b6:	e79b      	b.n	80098f0 <__multiply+0x84>
 80099b8:	0800a5d0 	.word	0x0800a5d0
 80099bc:	0800a5e1 	.word	0x0800a5e1

080099c0 <__pow5mult>:
 80099c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099c4:	4615      	mov	r5, r2
 80099c6:	f012 0203 	ands.w	r2, r2, #3
 80099ca:	4607      	mov	r7, r0
 80099cc:	460e      	mov	r6, r1
 80099ce:	d007      	beq.n	80099e0 <__pow5mult+0x20>
 80099d0:	4c25      	ldr	r4, [pc, #148]	@ (8009a68 <__pow5mult+0xa8>)
 80099d2:	3a01      	subs	r2, #1
 80099d4:	2300      	movs	r3, #0
 80099d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80099da:	f7ff fe9f 	bl	800971c <__multadd>
 80099de:	4606      	mov	r6, r0
 80099e0:	10ad      	asrs	r5, r5, #2
 80099e2:	d03d      	beq.n	8009a60 <__pow5mult+0xa0>
 80099e4:	69fc      	ldr	r4, [r7, #28]
 80099e6:	b97c      	cbnz	r4, 8009a08 <__pow5mult+0x48>
 80099e8:	2010      	movs	r0, #16
 80099ea:	f7ff fd7f 	bl	80094ec <malloc>
 80099ee:	4602      	mov	r2, r0
 80099f0:	61f8      	str	r0, [r7, #28]
 80099f2:	b928      	cbnz	r0, 8009a00 <__pow5mult+0x40>
 80099f4:	4b1d      	ldr	r3, [pc, #116]	@ (8009a6c <__pow5mult+0xac>)
 80099f6:	481e      	ldr	r0, [pc, #120]	@ (8009a70 <__pow5mult+0xb0>)
 80099f8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80099fc:	f000 fc3e 	bl	800a27c <__assert_func>
 8009a00:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009a04:	6004      	str	r4, [r0, #0]
 8009a06:	60c4      	str	r4, [r0, #12]
 8009a08:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009a0c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009a10:	b94c      	cbnz	r4, 8009a26 <__pow5mult+0x66>
 8009a12:	f240 2171 	movw	r1, #625	@ 0x271
 8009a16:	4638      	mov	r0, r7
 8009a18:	f7ff ff12 	bl	8009840 <__i2b>
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009a22:	4604      	mov	r4, r0
 8009a24:	6003      	str	r3, [r0, #0]
 8009a26:	f04f 0900 	mov.w	r9, #0
 8009a2a:	07eb      	lsls	r3, r5, #31
 8009a2c:	d50a      	bpl.n	8009a44 <__pow5mult+0x84>
 8009a2e:	4631      	mov	r1, r6
 8009a30:	4622      	mov	r2, r4
 8009a32:	4638      	mov	r0, r7
 8009a34:	f7ff ff1a 	bl	800986c <__multiply>
 8009a38:	4631      	mov	r1, r6
 8009a3a:	4680      	mov	r8, r0
 8009a3c:	4638      	mov	r0, r7
 8009a3e:	f7ff fe4b 	bl	80096d8 <_Bfree>
 8009a42:	4646      	mov	r6, r8
 8009a44:	106d      	asrs	r5, r5, #1
 8009a46:	d00b      	beq.n	8009a60 <__pow5mult+0xa0>
 8009a48:	6820      	ldr	r0, [r4, #0]
 8009a4a:	b938      	cbnz	r0, 8009a5c <__pow5mult+0x9c>
 8009a4c:	4622      	mov	r2, r4
 8009a4e:	4621      	mov	r1, r4
 8009a50:	4638      	mov	r0, r7
 8009a52:	f7ff ff0b 	bl	800986c <__multiply>
 8009a56:	6020      	str	r0, [r4, #0]
 8009a58:	f8c0 9000 	str.w	r9, [r0]
 8009a5c:	4604      	mov	r4, r0
 8009a5e:	e7e4      	b.n	8009a2a <__pow5mult+0x6a>
 8009a60:	4630      	mov	r0, r6
 8009a62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a66:	bf00      	nop
 8009a68:	0800a63c 	.word	0x0800a63c
 8009a6c:	0800a561 	.word	0x0800a561
 8009a70:	0800a5e1 	.word	0x0800a5e1

08009a74 <__lshift>:
 8009a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a78:	460c      	mov	r4, r1
 8009a7a:	6849      	ldr	r1, [r1, #4]
 8009a7c:	6923      	ldr	r3, [r4, #16]
 8009a7e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009a82:	68a3      	ldr	r3, [r4, #8]
 8009a84:	4607      	mov	r7, r0
 8009a86:	4691      	mov	r9, r2
 8009a88:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009a8c:	f108 0601 	add.w	r6, r8, #1
 8009a90:	42b3      	cmp	r3, r6
 8009a92:	db0b      	blt.n	8009aac <__lshift+0x38>
 8009a94:	4638      	mov	r0, r7
 8009a96:	f7ff fddf 	bl	8009658 <_Balloc>
 8009a9a:	4605      	mov	r5, r0
 8009a9c:	b948      	cbnz	r0, 8009ab2 <__lshift+0x3e>
 8009a9e:	4602      	mov	r2, r0
 8009aa0:	4b28      	ldr	r3, [pc, #160]	@ (8009b44 <__lshift+0xd0>)
 8009aa2:	4829      	ldr	r0, [pc, #164]	@ (8009b48 <__lshift+0xd4>)
 8009aa4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009aa8:	f000 fbe8 	bl	800a27c <__assert_func>
 8009aac:	3101      	adds	r1, #1
 8009aae:	005b      	lsls	r3, r3, #1
 8009ab0:	e7ee      	b.n	8009a90 <__lshift+0x1c>
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	f100 0114 	add.w	r1, r0, #20
 8009ab8:	f100 0210 	add.w	r2, r0, #16
 8009abc:	4618      	mov	r0, r3
 8009abe:	4553      	cmp	r3, sl
 8009ac0:	db33      	blt.n	8009b2a <__lshift+0xb6>
 8009ac2:	6920      	ldr	r0, [r4, #16]
 8009ac4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009ac8:	f104 0314 	add.w	r3, r4, #20
 8009acc:	f019 091f 	ands.w	r9, r9, #31
 8009ad0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009ad4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009ad8:	d02b      	beq.n	8009b32 <__lshift+0xbe>
 8009ada:	f1c9 0e20 	rsb	lr, r9, #32
 8009ade:	468a      	mov	sl, r1
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	6818      	ldr	r0, [r3, #0]
 8009ae4:	fa00 f009 	lsl.w	r0, r0, r9
 8009ae8:	4310      	orrs	r0, r2
 8009aea:	f84a 0b04 	str.w	r0, [sl], #4
 8009aee:	f853 2b04 	ldr.w	r2, [r3], #4
 8009af2:	459c      	cmp	ip, r3
 8009af4:	fa22 f20e 	lsr.w	r2, r2, lr
 8009af8:	d8f3      	bhi.n	8009ae2 <__lshift+0x6e>
 8009afa:	ebac 0304 	sub.w	r3, ip, r4
 8009afe:	3b15      	subs	r3, #21
 8009b00:	f023 0303 	bic.w	r3, r3, #3
 8009b04:	3304      	adds	r3, #4
 8009b06:	f104 0015 	add.w	r0, r4, #21
 8009b0a:	4584      	cmp	ip, r0
 8009b0c:	bf38      	it	cc
 8009b0e:	2304      	movcc	r3, #4
 8009b10:	50ca      	str	r2, [r1, r3]
 8009b12:	b10a      	cbz	r2, 8009b18 <__lshift+0xa4>
 8009b14:	f108 0602 	add.w	r6, r8, #2
 8009b18:	3e01      	subs	r6, #1
 8009b1a:	4638      	mov	r0, r7
 8009b1c:	612e      	str	r6, [r5, #16]
 8009b1e:	4621      	mov	r1, r4
 8009b20:	f7ff fdda 	bl	80096d8 <_Bfree>
 8009b24:	4628      	mov	r0, r5
 8009b26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b2a:	f842 0f04 	str.w	r0, [r2, #4]!
 8009b2e:	3301      	adds	r3, #1
 8009b30:	e7c5      	b.n	8009abe <__lshift+0x4a>
 8009b32:	3904      	subs	r1, #4
 8009b34:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b38:	f841 2f04 	str.w	r2, [r1, #4]!
 8009b3c:	459c      	cmp	ip, r3
 8009b3e:	d8f9      	bhi.n	8009b34 <__lshift+0xc0>
 8009b40:	e7ea      	b.n	8009b18 <__lshift+0xa4>
 8009b42:	bf00      	nop
 8009b44:	0800a5d0 	.word	0x0800a5d0
 8009b48:	0800a5e1 	.word	0x0800a5e1

08009b4c <__mcmp>:
 8009b4c:	690a      	ldr	r2, [r1, #16]
 8009b4e:	4603      	mov	r3, r0
 8009b50:	6900      	ldr	r0, [r0, #16]
 8009b52:	1a80      	subs	r0, r0, r2
 8009b54:	b530      	push	{r4, r5, lr}
 8009b56:	d10e      	bne.n	8009b76 <__mcmp+0x2a>
 8009b58:	3314      	adds	r3, #20
 8009b5a:	3114      	adds	r1, #20
 8009b5c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009b60:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009b64:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009b68:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009b6c:	4295      	cmp	r5, r2
 8009b6e:	d003      	beq.n	8009b78 <__mcmp+0x2c>
 8009b70:	d205      	bcs.n	8009b7e <__mcmp+0x32>
 8009b72:	f04f 30ff 	mov.w	r0, #4294967295
 8009b76:	bd30      	pop	{r4, r5, pc}
 8009b78:	42a3      	cmp	r3, r4
 8009b7a:	d3f3      	bcc.n	8009b64 <__mcmp+0x18>
 8009b7c:	e7fb      	b.n	8009b76 <__mcmp+0x2a>
 8009b7e:	2001      	movs	r0, #1
 8009b80:	e7f9      	b.n	8009b76 <__mcmp+0x2a>
	...

08009b84 <__mdiff>:
 8009b84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b88:	4689      	mov	r9, r1
 8009b8a:	4606      	mov	r6, r0
 8009b8c:	4611      	mov	r1, r2
 8009b8e:	4648      	mov	r0, r9
 8009b90:	4614      	mov	r4, r2
 8009b92:	f7ff ffdb 	bl	8009b4c <__mcmp>
 8009b96:	1e05      	subs	r5, r0, #0
 8009b98:	d112      	bne.n	8009bc0 <__mdiff+0x3c>
 8009b9a:	4629      	mov	r1, r5
 8009b9c:	4630      	mov	r0, r6
 8009b9e:	f7ff fd5b 	bl	8009658 <_Balloc>
 8009ba2:	4602      	mov	r2, r0
 8009ba4:	b928      	cbnz	r0, 8009bb2 <__mdiff+0x2e>
 8009ba6:	4b3f      	ldr	r3, [pc, #252]	@ (8009ca4 <__mdiff+0x120>)
 8009ba8:	f240 2137 	movw	r1, #567	@ 0x237
 8009bac:	483e      	ldr	r0, [pc, #248]	@ (8009ca8 <__mdiff+0x124>)
 8009bae:	f000 fb65 	bl	800a27c <__assert_func>
 8009bb2:	2301      	movs	r3, #1
 8009bb4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009bb8:	4610      	mov	r0, r2
 8009bba:	b003      	add	sp, #12
 8009bbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bc0:	bfbc      	itt	lt
 8009bc2:	464b      	movlt	r3, r9
 8009bc4:	46a1      	movlt	r9, r4
 8009bc6:	4630      	mov	r0, r6
 8009bc8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009bcc:	bfba      	itte	lt
 8009bce:	461c      	movlt	r4, r3
 8009bd0:	2501      	movlt	r5, #1
 8009bd2:	2500      	movge	r5, #0
 8009bd4:	f7ff fd40 	bl	8009658 <_Balloc>
 8009bd8:	4602      	mov	r2, r0
 8009bda:	b918      	cbnz	r0, 8009be4 <__mdiff+0x60>
 8009bdc:	4b31      	ldr	r3, [pc, #196]	@ (8009ca4 <__mdiff+0x120>)
 8009bde:	f240 2145 	movw	r1, #581	@ 0x245
 8009be2:	e7e3      	b.n	8009bac <__mdiff+0x28>
 8009be4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009be8:	6926      	ldr	r6, [r4, #16]
 8009bea:	60c5      	str	r5, [r0, #12]
 8009bec:	f109 0310 	add.w	r3, r9, #16
 8009bf0:	f109 0514 	add.w	r5, r9, #20
 8009bf4:	f104 0e14 	add.w	lr, r4, #20
 8009bf8:	f100 0b14 	add.w	fp, r0, #20
 8009bfc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009c00:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009c04:	9301      	str	r3, [sp, #4]
 8009c06:	46d9      	mov	r9, fp
 8009c08:	f04f 0c00 	mov.w	ip, #0
 8009c0c:	9b01      	ldr	r3, [sp, #4]
 8009c0e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009c12:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009c16:	9301      	str	r3, [sp, #4]
 8009c18:	fa1f f38a 	uxth.w	r3, sl
 8009c1c:	4619      	mov	r1, r3
 8009c1e:	b283      	uxth	r3, r0
 8009c20:	1acb      	subs	r3, r1, r3
 8009c22:	0c00      	lsrs	r0, r0, #16
 8009c24:	4463      	add	r3, ip
 8009c26:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009c2a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009c2e:	b29b      	uxth	r3, r3
 8009c30:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009c34:	4576      	cmp	r6, lr
 8009c36:	f849 3b04 	str.w	r3, [r9], #4
 8009c3a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009c3e:	d8e5      	bhi.n	8009c0c <__mdiff+0x88>
 8009c40:	1b33      	subs	r3, r6, r4
 8009c42:	3b15      	subs	r3, #21
 8009c44:	f023 0303 	bic.w	r3, r3, #3
 8009c48:	3415      	adds	r4, #21
 8009c4a:	3304      	adds	r3, #4
 8009c4c:	42a6      	cmp	r6, r4
 8009c4e:	bf38      	it	cc
 8009c50:	2304      	movcc	r3, #4
 8009c52:	441d      	add	r5, r3
 8009c54:	445b      	add	r3, fp
 8009c56:	461e      	mov	r6, r3
 8009c58:	462c      	mov	r4, r5
 8009c5a:	4544      	cmp	r4, r8
 8009c5c:	d30e      	bcc.n	8009c7c <__mdiff+0xf8>
 8009c5e:	f108 0103 	add.w	r1, r8, #3
 8009c62:	1b49      	subs	r1, r1, r5
 8009c64:	f021 0103 	bic.w	r1, r1, #3
 8009c68:	3d03      	subs	r5, #3
 8009c6a:	45a8      	cmp	r8, r5
 8009c6c:	bf38      	it	cc
 8009c6e:	2100      	movcc	r1, #0
 8009c70:	440b      	add	r3, r1
 8009c72:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009c76:	b191      	cbz	r1, 8009c9e <__mdiff+0x11a>
 8009c78:	6117      	str	r7, [r2, #16]
 8009c7a:	e79d      	b.n	8009bb8 <__mdiff+0x34>
 8009c7c:	f854 1b04 	ldr.w	r1, [r4], #4
 8009c80:	46e6      	mov	lr, ip
 8009c82:	0c08      	lsrs	r0, r1, #16
 8009c84:	fa1c fc81 	uxtah	ip, ip, r1
 8009c88:	4471      	add	r1, lr
 8009c8a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009c8e:	b289      	uxth	r1, r1
 8009c90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009c94:	f846 1b04 	str.w	r1, [r6], #4
 8009c98:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009c9c:	e7dd      	b.n	8009c5a <__mdiff+0xd6>
 8009c9e:	3f01      	subs	r7, #1
 8009ca0:	e7e7      	b.n	8009c72 <__mdiff+0xee>
 8009ca2:	bf00      	nop
 8009ca4:	0800a5d0 	.word	0x0800a5d0
 8009ca8:	0800a5e1 	.word	0x0800a5e1

08009cac <__d2b>:
 8009cac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009cb0:	460f      	mov	r7, r1
 8009cb2:	2101      	movs	r1, #1
 8009cb4:	ec59 8b10 	vmov	r8, r9, d0
 8009cb8:	4616      	mov	r6, r2
 8009cba:	f7ff fccd 	bl	8009658 <_Balloc>
 8009cbe:	4604      	mov	r4, r0
 8009cc0:	b930      	cbnz	r0, 8009cd0 <__d2b+0x24>
 8009cc2:	4602      	mov	r2, r0
 8009cc4:	4b23      	ldr	r3, [pc, #140]	@ (8009d54 <__d2b+0xa8>)
 8009cc6:	4824      	ldr	r0, [pc, #144]	@ (8009d58 <__d2b+0xac>)
 8009cc8:	f240 310f 	movw	r1, #783	@ 0x30f
 8009ccc:	f000 fad6 	bl	800a27c <__assert_func>
 8009cd0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009cd4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009cd8:	b10d      	cbz	r5, 8009cde <__d2b+0x32>
 8009cda:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009cde:	9301      	str	r3, [sp, #4]
 8009ce0:	f1b8 0300 	subs.w	r3, r8, #0
 8009ce4:	d023      	beq.n	8009d2e <__d2b+0x82>
 8009ce6:	4668      	mov	r0, sp
 8009ce8:	9300      	str	r3, [sp, #0]
 8009cea:	f7ff fd7c 	bl	80097e6 <__lo0bits>
 8009cee:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009cf2:	b1d0      	cbz	r0, 8009d2a <__d2b+0x7e>
 8009cf4:	f1c0 0320 	rsb	r3, r0, #32
 8009cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8009cfc:	430b      	orrs	r3, r1
 8009cfe:	40c2      	lsrs	r2, r0
 8009d00:	6163      	str	r3, [r4, #20]
 8009d02:	9201      	str	r2, [sp, #4]
 8009d04:	9b01      	ldr	r3, [sp, #4]
 8009d06:	61a3      	str	r3, [r4, #24]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	bf0c      	ite	eq
 8009d0c:	2201      	moveq	r2, #1
 8009d0e:	2202      	movne	r2, #2
 8009d10:	6122      	str	r2, [r4, #16]
 8009d12:	b1a5      	cbz	r5, 8009d3e <__d2b+0x92>
 8009d14:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009d18:	4405      	add	r5, r0
 8009d1a:	603d      	str	r5, [r7, #0]
 8009d1c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009d20:	6030      	str	r0, [r6, #0]
 8009d22:	4620      	mov	r0, r4
 8009d24:	b003      	add	sp, #12
 8009d26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009d2a:	6161      	str	r1, [r4, #20]
 8009d2c:	e7ea      	b.n	8009d04 <__d2b+0x58>
 8009d2e:	a801      	add	r0, sp, #4
 8009d30:	f7ff fd59 	bl	80097e6 <__lo0bits>
 8009d34:	9b01      	ldr	r3, [sp, #4]
 8009d36:	6163      	str	r3, [r4, #20]
 8009d38:	3020      	adds	r0, #32
 8009d3a:	2201      	movs	r2, #1
 8009d3c:	e7e8      	b.n	8009d10 <__d2b+0x64>
 8009d3e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009d42:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009d46:	6038      	str	r0, [r7, #0]
 8009d48:	6918      	ldr	r0, [r3, #16]
 8009d4a:	f7ff fd2d 	bl	80097a8 <__hi0bits>
 8009d4e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009d52:	e7e5      	b.n	8009d20 <__d2b+0x74>
 8009d54:	0800a5d0 	.word	0x0800a5d0
 8009d58:	0800a5e1 	.word	0x0800a5e1

08009d5c <__sfputc_r>:
 8009d5c:	6893      	ldr	r3, [r2, #8]
 8009d5e:	3b01      	subs	r3, #1
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	b410      	push	{r4}
 8009d64:	6093      	str	r3, [r2, #8]
 8009d66:	da08      	bge.n	8009d7a <__sfputc_r+0x1e>
 8009d68:	6994      	ldr	r4, [r2, #24]
 8009d6a:	42a3      	cmp	r3, r4
 8009d6c:	db01      	blt.n	8009d72 <__sfputc_r+0x16>
 8009d6e:	290a      	cmp	r1, #10
 8009d70:	d103      	bne.n	8009d7a <__sfputc_r+0x1e>
 8009d72:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d76:	f7fe bc0e 	b.w	8008596 <__swbuf_r>
 8009d7a:	6813      	ldr	r3, [r2, #0]
 8009d7c:	1c58      	adds	r0, r3, #1
 8009d7e:	6010      	str	r0, [r2, #0]
 8009d80:	7019      	strb	r1, [r3, #0]
 8009d82:	4608      	mov	r0, r1
 8009d84:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d88:	4770      	bx	lr

08009d8a <__sfputs_r>:
 8009d8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d8c:	4606      	mov	r6, r0
 8009d8e:	460f      	mov	r7, r1
 8009d90:	4614      	mov	r4, r2
 8009d92:	18d5      	adds	r5, r2, r3
 8009d94:	42ac      	cmp	r4, r5
 8009d96:	d101      	bne.n	8009d9c <__sfputs_r+0x12>
 8009d98:	2000      	movs	r0, #0
 8009d9a:	e007      	b.n	8009dac <__sfputs_r+0x22>
 8009d9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009da0:	463a      	mov	r2, r7
 8009da2:	4630      	mov	r0, r6
 8009da4:	f7ff ffda 	bl	8009d5c <__sfputc_r>
 8009da8:	1c43      	adds	r3, r0, #1
 8009daa:	d1f3      	bne.n	8009d94 <__sfputs_r+0xa>
 8009dac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009db0 <_vfiprintf_r>:
 8009db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009db4:	460d      	mov	r5, r1
 8009db6:	b09d      	sub	sp, #116	@ 0x74
 8009db8:	4614      	mov	r4, r2
 8009dba:	4698      	mov	r8, r3
 8009dbc:	4606      	mov	r6, r0
 8009dbe:	b118      	cbz	r0, 8009dc8 <_vfiprintf_r+0x18>
 8009dc0:	6a03      	ldr	r3, [r0, #32]
 8009dc2:	b90b      	cbnz	r3, 8009dc8 <_vfiprintf_r+0x18>
 8009dc4:	f7fe fafe 	bl	80083c4 <__sinit>
 8009dc8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009dca:	07d9      	lsls	r1, r3, #31
 8009dcc:	d405      	bmi.n	8009dda <_vfiprintf_r+0x2a>
 8009dce:	89ab      	ldrh	r3, [r5, #12]
 8009dd0:	059a      	lsls	r2, r3, #22
 8009dd2:	d402      	bmi.n	8009dda <_vfiprintf_r+0x2a>
 8009dd4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009dd6:	f7fe fcf0 	bl	80087ba <__retarget_lock_acquire_recursive>
 8009dda:	89ab      	ldrh	r3, [r5, #12]
 8009ddc:	071b      	lsls	r3, r3, #28
 8009dde:	d501      	bpl.n	8009de4 <_vfiprintf_r+0x34>
 8009de0:	692b      	ldr	r3, [r5, #16]
 8009de2:	b99b      	cbnz	r3, 8009e0c <_vfiprintf_r+0x5c>
 8009de4:	4629      	mov	r1, r5
 8009de6:	4630      	mov	r0, r6
 8009de8:	f7fe fc14 	bl	8008614 <__swsetup_r>
 8009dec:	b170      	cbz	r0, 8009e0c <_vfiprintf_r+0x5c>
 8009dee:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009df0:	07dc      	lsls	r4, r3, #31
 8009df2:	d504      	bpl.n	8009dfe <_vfiprintf_r+0x4e>
 8009df4:	f04f 30ff 	mov.w	r0, #4294967295
 8009df8:	b01d      	add	sp, #116	@ 0x74
 8009dfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dfe:	89ab      	ldrh	r3, [r5, #12]
 8009e00:	0598      	lsls	r0, r3, #22
 8009e02:	d4f7      	bmi.n	8009df4 <_vfiprintf_r+0x44>
 8009e04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009e06:	f7fe fcd9 	bl	80087bc <__retarget_lock_release_recursive>
 8009e0a:	e7f3      	b.n	8009df4 <_vfiprintf_r+0x44>
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e10:	2320      	movs	r3, #32
 8009e12:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009e16:	f8cd 800c 	str.w	r8, [sp, #12]
 8009e1a:	2330      	movs	r3, #48	@ 0x30
 8009e1c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009fcc <_vfiprintf_r+0x21c>
 8009e20:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009e24:	f04f 0901 	mov.w	r9, #1
 8009e28:	4623      	mov	r3, r4
 8009e2a:	469a      	mov	sl, r3
 8009e2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e30:	b10a      	cbz	r2, 8009e36 <_vfiprintf_r+0x86>
 8009e32:	2a25      	cmp	r2, #37	@ 0x25
 8009e34:	d1f9      	bne.n	8009e2a <_vfiprintf_r+0x7a>
 8009e36:	ebba 0b04 	subs.w	fp, sl, r4
 8009e3a:	d00b      	beq.n	8009e54 <_vfiprintf_r+0xa4>
 8009e3c:	465b      	mov	r3, fp
 8009e3e:	4622      	mov	r2, r4
 8009e40:	4629      	mov	r1, r5
 8009e42:	4630      	mov	r0, r6
 8009e44:	f7ff ffa1 	bl	8009d8a <__sfputs_r>
 8009e48:	3001      	adds	r0, #1
 8009e4a:	f000 80a7 	beq.w	8009f9c <_vfiprintf_r+0x1ec>
 8009e4e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009e50:	445a      	add	r2, fp
 8009e52:	9209      	str	r2, [sp, #36]	@ 0x24
 8009e54:	f89a 3000 	ldrb.w	r3, [sl]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	f000 809f 	beq.w	8009f9c <_vfiprintf_r+0x1ec>
 8009e5e:	2300      	movs	r3, #0
 8009e60:	f04f 32ff 	mov.w	r2, #4294967295
 8009e64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e68:	f10a 0a01 	add.w	sl, sl, #1
 8009e6c:	9304      	str	r3, [sp, #16]
 8009e6e:	9307      	str	r3, [sp, #28]
 8009e70:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009e74:	931a      	str	r3, [sp, #104]	@ 0x68
 8009e76:	4654      	mov	r4, sl
 8009e78:	2205      	movs	r2, #5
 8009e7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e7e:	4853      	ldr	r0, [pc, #332]	@ (8009fcc <_vfiprintf_r+0x21c>)
 8009e80:	f7f6 f9a6 	bl	80001d0 <memchr>
 8009e84:	9a04      	ldr	r2, [sp, #16]
 8009e86:	b9d8      	cbnz	r0, 8009ec0 <_vfiprintf_r+0x110>
 8009e88:	06d1      	lsls	r1, r2, #27
 8009e8a:	bf44      	itt	mi
 8009e8c:	2320      	movmi	r3, #32
 8009e8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009e92:	0713      	lsls	r3, r2, #28
 8009e94:	bf44      	itt	mi
 8009e96:	232b      	movmi	r3, #43	@ 0x2b
 8009e98:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009e9c:	f89a 3000 	ldrb.w	r3, [sl]
 8009ea0:	2b2a      	cmp	r3, #42	@ 0x2a
 8009ea2:	d015      	beq.n	8009ed0 <_vfiprintf_r+0x120>
 8009ea4:	9a07      	ldr	r2, [sp, #28]
 8009ea6:	4654      	mov	r4, sl
 8009ea8:	2000      	movs	r0, #0
 8009eaa:	f04f 0c0a 	mov.w	ip, #10
 8009eae:	4621      	mov	r1, r4
 8009eb0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009eb4:	3b30      	subs	r3, #48	@ 0x30
 8009eb6:	2b09      	cmp	r3, #9
 8009eb8:	d94b      	bls.n	8009f52 <_vfiprintf_r+0x1a2>
 8009eba:	b1b0      	cbz	r0, 8009eea <_vfiprintf_r+0x13a>
 8009ebc:	9207      	str	r2, [sp, #28]
 8009ebe:	e014      	b.n	8009eea <_vfiprintf_r+0x13a>
 8009ec0:	eba0 0308 	sub.w	r3, r0, r8
 8009ec4:	fa09 f303 	lsl.w	r3, r9, r3
 8009ec8:	4313      	orrs	r3, r2
 8009eca:	9304      	str	r3, [sp, #16]
 8009ecc:	46a2      	mov	sl, r4
 8009ece:	e7d2      	b.n	8009e76 <_vfiprintf_r+0xc6>
 8009ed0:	9b03      	ldr	r3, [sp, #12]
 8009ed2:	1d19      	adds	r1, r3, #4
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	9103      	str	r1, [sp, #12]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	bfbb      	ittet	lt
 8009edc:	425b      	neglt	r3, r3
 8009ede:	f042 0202 	orrlt.w	r2, r2, #2
 8009ee2:	9307      	strge	r3, [sp, #28]
 8009ee4:	9307      	strlt	r3, [sp, #28]
 8009ee6:	bfb8      	it	lt
 8009ee8:	9204      	strlt	r2, [sp, #16]
 8009eea:	7823      	ldrb	r3, [r4, #0]
 8009eec:	2b2e      	cmp	r3, #46	@ 0x2e
 8009eee:	d10a      	bne.n	8009f06 <_vfiprintf_r+0x156>
 8009ef0:	7863      	ldrb	r3, [r4, #1]
 8009ef2:	2b2a      	cmp	r3, #42	@ 0x2a
 8009ef4:	d132      	bne.n	8009f5c <_vfiprintf_r+0x1ac>
 8009ef6:	9b03      	ldr	r3, [sp, #12]
 8009ef8:	1d1a      	adds	r2, r3, #4
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	9203      	str	r2, [sp, #12]
 8009efe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009f02:	3402      	adds	r4, #2
 8009f04:	9305      	str	r3, [sp, #20]
 8009f06:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009fdc <_vfiprintf_r+0x22c>
 8009f0a:	7821      	ldrb	r1, [r4, #0]
 8009f0c:	2203      	movs	r2, #3
 8009f0e:	4650      	mov	r0, sl
 8009f10:	f7f6 f95e 	bl	80001d0 <memchr>
 8009f14:	b138      	cbz	r0, 8009f26 <_vfiprintf_r+0x176>
 8009f16:	9b04      	ldr	r3, [sp, #16]
 8009f18:	eba0 000a 	sub.w	r0, r0, sl
 8009f1c:	2240      	movs	r2, #64	@ 0x40
 8009f1e:	4082      	lsls	r2, r0
 8009f20:	4313      	orrs	r3, r2
 8009f22:	3401      	adds	r4, #1
 8009f24:	9304      	str	r3, [sp, #16]
 8009f26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f2a:	4829      	ldr	r0, [pc, #164]	@ (8009fd0 <_vfiprintf_r+0x220>)
 8009f2c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009f30:	2206      	movs	r2, #6
 8009f32:	f7f6 f94d 	bl	80001d0 <memchr>
 8009f36:	2800      	cmp	r0, #0
 8009f38:	d03f      	beq.n	8009fba <_vfiprintf_r+0x20a>
 8009f3a:	4b26      	ldr	r3, [pc, #152]	@ (8009fd4 <_vfiprintf_r+0x224>)
 8009f3c:	bb1b      	cbnz	r3, 8009f86 <_vfiprintf_r+0x1d6>
 8009f3e:	9b03      	ldr	r3, [sp, #12]
 8009f40:	3307      	adds	r3, #7
 8009f42:	f023 0307 	bic.w	r3, r3, #7
 8009f46:	3308      	adds	r3, #8
 8009f48:	9303      	str	r3, [sp, #12]
 8009f4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f4c:	443b      	add	r3, r7
 8009f4e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f50:	e76a      	b.n	8009e28 <_vfiprintf_r+0x78>
 8009f52:	fb0c 3202 	mla	r2, ip, r2, r3
 8009f56:	460c      	mov	r4, r1
 8009f58:	2001      	movs	r0, #1
 8009f5a:	e7a8      	b.n	8009eae <_vfiprintf_r+0xfe>
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	3401      	adds	r4, #1
 8009f60:	9305      	str	r3, [sp, #20]
 8009f62:	4619      	mov	r1, r3
 8009f64:	f04f 0c0a 	mov.w	ip, #10
 8009f68:	4620      	mov	r0, r4
 8009f6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f6e:	3a30      	subs	r2, #48	@ 0x30
 8009f70:	2a09      	cmp	r2, #9
 8009f72:	d903      	bls.n	8009f7c <_vfiprintf_r+0x1cc>
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d0c6      	beq.n	8009f06 <_vfiprintf_r+0x156>
 8009f78:	9105      	str	r1, [sp, #20]
 8009f7a:	e7c4      	b.n	8009f06 <_vfiprintf_r+0x156>
 8009f7c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009f80:	4604      	mov	r4, r0
 8009f82:	2301      	movs	r3, #1
 8009f84:	e7f0      	b.n	8009f68 <_vfiprintf_r+0x1b8>
 8009f86:	ab03      	add	r3, sp, #12
 8009f88:	9300      	str	r3, [sp, #0]
 8009f8a:	462a      	mov	r2, r5
 8009f8c:	4b12      	ldr	r3, [pc, #72]	@ (8009fd8 <_vfiprintf_r+0x228>)
 8009f8e:	a904      	add	r1, sp, #16
 8009f90:	4630      	mov	r0, r6
 8009f92:	f7fd fdd3 	bl	8007b3c <_printf_float>
 8009f96:	4607      	mov	r7, r0
 8009f98:	1c78      	adds	r0, r7, #1
 8009f9a:	d1d6      	bne.n	8009f4a <_vfiprintf_r+0x19a>
 8009f9c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009f9e:	07d9      	lsls	r1, r3, #31
 8009fa0:	d405      	bmi.n	8009fae <_vfiprintf_r+0x1fe>
 8009fa2:	89ab      	ldrh	r3, [r5, #12]
 8009fa4:	059a      	lsls	r2, r3, #22
 8009fa6:	d402      	bmi.n	8009fae <_vfiprintf_r+0x1fe>
 8009fa8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009faa:	f7fe fc07 	bl	80087bc <__retarget_lock_release_recursive>
 8009fae:	89ab      	ldrh	r3, [r5, #12]
 8009fb0:	065b      	lsls	r3, r3, #25
 8009fb2:	f53f af1f 	bmi.w	8009df4 <_vfiprintf_r+0x44>
 8009fb6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009fb8:	e71e      	b.n	8009df8 <_vfiprintf_r+0x48>
 8009fba:	ab03      	add	r3, sp, #12
 8009fbc:	9300      	str	r3, [sp, #0]
 8009fbe:	462a      	mov	r2, r5
 8009fc0:	4b05      	ldr	r3, [pc, #20]	@ (8009fd8 <_vfiprintf_r+0x228>)
 8009fc2:	a904      	add	r1, sp, #16
 8009fc4:	4630      	mov	r0, r6
 8009fc6:	f7fe f851 	bl	800806c <_printf_i>
 8009fca:	e7e4      	b.n	8009f96 <_vfiprintf_r+0x1e6>
 8009fcc:	0800a738 	.word	0x0800a738
 8009fd0:	0800a742 	.word	0x0800a742
 8009fd4:	08007b3d 	.word	0x08007b3d
 8009fd8:	08009d8b 	.word	0x08009d8b
 8009fdc:	0800a73e 	.word	0x0800a73e

08009fe0 <__sflush_r>:
 8009fe0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009fe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fe8:	0716      	lsls	r6, r2, #28
 8009fea:	4605      	mov	r5, r0
 8009fec:	460c      	mov	r4, r1
 8009fee:	d454      	bmi.n	800a09a <__sflush_r+0xba>
 8009ff0:	684b      	ldr	r3, [r1, #4]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	dc02      	bgt.n	8009ffc <__sflush_r+0x1c>
 8009ff6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	dd48      	ble.n	800a08e <__sflush_r+0xae>
 8009ffc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009ffe:	2e00      	cmp	r6, #0
 800a000:	d045      	beq.n	800a08e <__sflush_r+0xae>
 800a002:	2300      	movs	r3, #0
 800a004:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a008:	682f      	ldr	r7, [r5, #0]
 800a00a:	6a21      	ldr	r1, [r4, #32]
 800a00c:	602b      	str	r3, [r5, #0]
 800a00e:	d030      	beq.n	800a072 <__sflush_r+0x92>
 800a010:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a012:	89a3      	ldrh	r3, [r4, #12]
 800a014:	0759      	lsls	r1, r3, #29
 800a016:	d505      	bpl.n	800a024 <__sflush_r+0x44>
 800a018:	6863      	ldr	r3, [r4, #4]
 800a01a:	1ad2      	subs	r2, r2, r3
 800a01c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a01e:	b10b      	cbz	r3, 800a024 <__sflush_r+0x44>
 800a020:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a022:	1ad2      	subs	r2, r2, r3
 800a024:	2300      	movs	r3, #0
 800a026:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a028:	6a21      	ldr	r1, [r4, #32]
 800a02a:	4628      	mov	r0, r5
 800a02c:	47b0      	blx	r6
 800a02e:	1c43      	adds	r3, r0, #1
 800a030:	89a3      	ldrh	r3, [r4, #12]
 800a032:	d106      	bne.n	800a042 <__sflush_r+0x62>
 800a034:	6829      	ldr	r1, [r5, #0]
 800a036:	291d      	cmp	r1, #29
 800a038:	d82b      	bhi.n	800a092 <__sflush_r+0xb2>
 800a03a:	4a2a      	ldr	r2, [pc, #168]	@ (800a0e4 <__sflush_r+0x104>)
 800a03c:	410a      	asrs	r2, r1
 800a03e:	07d6      	lsls	r6, r2, #31
 800a040:	d427      	bmi.n	800a092 <__sflush_r+0xb2>
 800a042:	2200      	movs	r2, #0
 800a044:	6062      	str	r2, [r4, #4]
 800a046:	04d9      	lsls	r1, r3, #19
 800a048:	6922      	ldr	r2, [r4, #16]
 800a04a:	6022      	str	r2, [r4, #0]
 800a04c:	d504      	bpl.n	800a058 <__sflush_r+0x78>
 800a04e:	1c42      	adds	r2, r0, #1
 800a050:	d101      	bne.n	800a056 <__sflush_r+0x76>
 800a052:	682b      	ldr	r3, [r5, #0]
 800a054:	b903      	cbnz	r3, 800a058 <__sflush_r+0x78>
 800a056:	6560      	str	r0, [r4, #84]	@ 0x54
 800a058:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a05a:	602f      	str	r7, [r5, #0]
 800a05c:	b1b9      	cbz	r1, 800a08e <__sflush_r+0xae>
 800a05e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a062:	4299      	cmp	r1, r3
 800a064:	d002      	beq.n	800a06c <__sflush_r+0x8c>
 800a066:	4628      	mov	r0, r5
 800a068:	f7ff f9f6 	bl	8009458 <_free_r>
 800a06c:	2300      	movs	r3, #0
 800a06e:	6363      	str	r3, [r4, #52]	@ 0x34
 800a070:	e00d      	b.n	800a08e <__sflush_r+0xae>
 800a072:	2301      	movs	r3, #1
 800a074:	4628      	mov	r0, r5
 800a076:	47b0      	blx	r6
 800a078:	4602      	mov	r2, r0
 800a07a:	1c50      	adds	r0, r2, #1
 800a07c:	d1c9      	bne.n	800a012 <__sflush_r+0x32>
 800a07e:	682b      	ldr	r3, [r5, #0]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d0c6      	beq.n	800a012 <__sflush_r+0x32>
 800a084:	2b1d      	cmp	r3, #29
 800a086:	d001      	beq.n	800a08c <__sflush_r+0xac>
 800a088:	2b16      	cmp	r3, #22
 800a08a:	d11e      	bne.n	800a0ca <__sflush_r+0xea>
 800a08c:	602f      	str	r7, [r5, #0]
 800a08e:	2000      	movs	r0, #0
 800a090:	e022      	b.n	800a0d8 <__sflush_r+0xf8>
 800a092:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a096:	b21b      	sxth	r3, r3
 800a098:	e01b      	b.n	800a0d2 <__sflush_r+0xf2>
 800a09a:	690f      	ldr	r7, [r1, #16]
 800a09c:	2f00      	cmp	r7, #0
 800a09e:	d0f6      	beq.n	800a08e <__sflush_r+0xae>
 800a0a0:	0793      	lsls	r3, r2, #30
 800a0a2:	680e      	ldr	r6, [r1, #0]
 800a0a4:	bf08      	it	eq
 800a0a6:	694b      	ldreq	r3, [r1, #20]
 800a0a8:	600f      	str	r7, [r1, #0]
 800a0aa:	bf18      	it	ne
 800a0ac:	2300      	movne	r3, #0
 800a0ae:	eba6 0807 	sub.w	r8, r6, r7
 800a0b2:	608b      	str	r3, [r1, #8]
 800a0b4:	f1b8 0f00 	cmp.w	r8, #0
 800a0b8:	dde9      	ble.n	800a08e <__sflush_r+0xae>
 800a0ba:	6a21      	ldr	r1, [r4, #32]
 800a0bc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a0be:	4643      	mov	r3, r8
 800a0c0:	463a      	mov	r2, r7
 800a0c2:	4628      	mov	r0, r5
 800a0c4:	47b0      	blx	r6
 800a0c6:	2800      	cmp	r0, #0
 800a0c8:	dc08      	bgt.n	800a0dc <__sflush_r+0xfc>
 800a0ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a0ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a0d2:	81a3      	strh	r3, [r4, #12]
 800a0d4:	f04f 30ff 	mov.w	r0, #4294967295
 800a0d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a0dc:	4407      	add	r7, r0
 800a0de:	eba8 0800 	sub.w	r8, r8, r0
 800a0e2:	e7e7      	b.n	800a0b4 <__sflush_r+0xd4>
 800a0e4:	dfbffffe 	.word	0xdfbffffe

0800a0e8 <_fflush_r>:
 800a0e8:	b538      	push	{r3, r4, r5, lr}
 800a0ea:	690b      	ldr	r3, [r1, #16]
 800a0ec:	4605      	mov	r5, r0
 800a0ee:	460c      	mov	r4, r1
 800a0f0:	b913      	cbnz	r3, 800a0f8 <_fflush_r+0x10>
 800a0f2:	2500      	movs	r5, #0
 800a0f4:	4628      	mov	r0, r5
 800a0f6:	bd38      	pop	{r3, r4, r5, pc}
 800a0f8:	b118      	cbz	r0, 800a102 <_fflush_r+0x1a>
 800a0fa:	6a03      	ldr	r3, [r0, #32]
 800a0fc:	b90b      	cbnz	r3, 800a102 <_fflush_r+0x1a>
 800a0fe:	f7fe f961 	bl	80083c4 <__sinit>
 800a102:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d0f3      	beq.n	800a0f2 <_fflush_r+0xa>
 800a10a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a10c:	07d0      	lsls	r0, r2, #31
 800a10e:	d404      	bmi.n	800a11a <_fflush_r+0x32>
 800a110:	0599      	lsls	r1, r3, #22
 800a112:	d402      	bmi.n	800a11a <_fflush_r+0x32>
 800a114:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a116:	f7fe fb50 	bl	80087ba <__retarget_lock_acquire_recursive>
 800a11a:	4628      	mov	r0, r5
 800a11c:	4621      	mov	r1, r4
 800a11e:	f7ff ff5f 	bl	8009fe0 <__sflush_r>
 800a122:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a124:	07da      	lsls	r2, r3, #31
 800a126:	4605      	mov	r5, r0
 800a128:	d4e4      	bmi.n	800a0f4 <_fflush_r+0xc>
 800a12a:	89a3      	ldrh	r3, [r4, #12]
 800a12c:	059b      	lsls	r3, r3, #22
 800a12e:	d4e1      	bmi.n	800a0f4 <_fflush_r+0xc>
 800a130:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a132:	f7fe fb43 	bl	80087bc <__retarget_lock_release_recursive>
 800a136:	e7dd      	b.n	800a0f4 <_fflush_r+0xc>

0800a138 <__swhatbuf_r>:
 800a138:	b570      	push	{r4, r5, r6, lr}
 800a13a:	460c      	mov	r4, r1
 800a13c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a140:	2900      	cmp	r1, #0
 800a142:	b096      	sub	sp, #88	@ 0x58
 800a144:	4615      	mov	r5, r2
 800a146:	461e      	mov	r6, r3
 800a148:	da0d      	bge.n	800a166 <__swhatbuf_r+0x2e>
 800a14a:	89a3      	ldrh	r3, [r4, #12]
 800a14c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a150:	f04f 0100 	mov.w	r1, #0
 800a154:	bf14      	ite	ne
 800a156:	2340      	movne	r3, #64	@ 0x40
 800a158:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a15c:	2000      	movs	r0, #0
 800a15e:	6031      	str	r1, [r6, #0]
 800a160:	602b      	str	r3, [r5, #0]
 800a162:	b016      	add	sp, #88	@ 0x58
 800a164:	bd70      	pop	{r4, r5, r6, pc}
 800a166:	466a      	mov	r2, sp
 800a168:	f000 f848 	bl	800a1fc <_fstat_r>
 800a16c:	2800      	cmp	r0, #0
 800a16e:	dbec      	blt.n	800a14a <__swhatbuf_r+0x12>
 800a170:	9901      	ldr	r1, [sp, #4]
 800a172:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a176:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a17a:	4259      	negs	r1, r3
 800a17c:	4159      	adcs	r1, r3
 800a17e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a182:	e7eb      	b.n	800a15c <__swhatbuf_r+0x24>

0800a184 <__smakebuf_r>:
 800a184:	898b      	ldrh	r3, [r1, #12]
 800a186:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a188:	079d      	lsls	r5, r3, #30
 800a18a:	4606      	mov	r6, r0
 800a18c:	460c      	mov	r4, r1
 800a18e:	d507      	bpl.n	800a1a0 <__smakebuf_r+0x1c>
 800a190:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a194:	6023      	str	r3, [r4, #0]
 800a196:	6123      	str	r3, [r4, #16]
 800a198:	2301      	movs	r3, #1
 800a19a:	6163      	str	r3, [r4, #20]
 800a19c:	b003      	add	sp, #12
 800a19e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a1a0:	ab01      	add	r3, sp, #4
 800a1a2:	466a      	mov	r2, sp
 800a1a4:	f7ff ffc8 	bl	800a138 <__swhatbuf_r>
 800a1a8:	9f00      	ldr	r7, [sp, #0]
 800a1aa:	4605      	mov	r5, r0
 800a1ac:	4639      	mov	r1, r7
 800a1ae:	4630      	mov	r0, r6
 800a1b0:	f7ff f9c6 	bl	8009540 <_malloc_r>
 800a1b4:	b948      	cbnz	r0, 800a1ca <__smakebuf_r+0x46>
 800a1b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a1ba:	059a      	lsls	r2, r3, #22
 800a1bc:	d4ee      	bmi.n	800a19c <__smakebuf_r+0x18>
 800a1be:	f023 0303 	bic.w	r3, r3, #3
 800a1c2:	f043 0302 	orr.w	r3, r3, #2
 800a1c6:	81a3      	strh	r3, [r4, #12]
 800a1c8:	e7e2      	b.n	800a190 <__smakebuf_r+0xc>
 800a1ca:	89a3      	ldrh	r3, [r4, #12]
 800a1cc:	6020      	str	r0, [r4, #0]
 800a1ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a1d2:	81a3      	strh	r3, [r4, #12]
 800a1d4:	9b01      	ldr	r3, [sp, #4]
 800a1d6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a1da:	b15b      	cbz	r3, 800a1f4 <__smakebuf_r+0x70>
 800a1dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a1e0:	4630      	mov	r0, r6
 800a1e2:	f000 f81d 	bl	800a220 <_isatty_r>
 800a1e6:	b128      	cbz	r0, 800a1f4 <__smakebuf_r+0x70>
 800a1e8:	89a3      	ldrh	r3, [r4, #12]
 800a1ea:	f023 0303 	bic.w	r3, r3, #3
 800a1ee:	f043 0301 	orr.w	r3, r3, #1
 800a1f2:	81a3      	strh	r3, [r4, #12]
 800a1f4:	89a3      	ldrh	r3, [r4, #12]
 800a1f6:	431d      	orrs	r5, r3
 800a1f8:	81a5      	strh	r5, [r4, #12]
 800a1fa:	e7cf      	b.n	800a19c <__smakebuf_r+0x18>

0800a1fc <_fstat_r>:
 800a1fc:	b538      	push	{r3, r4, r5, lr}
 800a1fe:	4d07      	ldr	r5, [pc, #28]	@ (800a21c <_fstat_r+0x20>)
 800a200:	2300      	movs	r3, #0
 800a202:	4604      	mov	r4, r0
 800a204:	4608      	mov	r0, r1
 800a206:	4611      	mov	r1, r2
 800a208:	602b      	str	r3, [r5, #0]
 800a20a:	f7f8 f871 	bl	80022f0 <_fstat>
 800a20e:	1c43      	adds	r3, r0, #1
 800a210:	d102      	bne.n	800a218 <_fstat_r+0x1c>
 800a212:	682b      	ldr	r3, [r5, #0]
 800a214:	b103      	cbz	r3, 800a218 <_fstat_r+0x1c>
 800a216:	6023      	str	r3, [r4, #0]
 800a218:	bd38      	pop	{r3, r4, r5, pc}
 800a21a:	bf00      	nop
 800a21c:	200006c0 	.word	0x200006c0

0800a220 <_isatty_r>:
 800a220:	b538      	push	{r3, r4, r5, lr}
 800a222:	4d06      	ldr	r5, [pc, #24]	@ (800a23c <_isatty_r+0x1c>)
 800a224:	2300      	movs	r3, #0
 800a226:	4604      	mov	r4, r0
 800a228:	4608      	mov	r0, r1
 800a22a:	602b      	str	r3, [r5, #0]
 800a22c:	f7f8 f870 	bl	8002310 <_isatty>
 800a230:	1c43      	adds	r3, r0, #1
 800a232:	d102      	bne.n	800a23a <_isatty_r+0x1a>
 800a234:	682b      	ldr	r3, [r5, #0]
 800a236:	b103      	cbz	r3, 800a23a <_isatty_r+0x1a>
 800a238:	6023      	str	r3, [r4, #0]
 800a23a:	bd38      	pop	{r3, r4, r5, pc}
 800a23c:	200006c0 	.word	0x200006c0

0800a240 <_sbrk_r>:
 800a240:	b538      	push	{r3, r4, r5, lr}
 800a242:	4d06      	ldr	r5, [pc, #24]	@ (800a25c <_sbrk_r+0x1c>)
 800a244:	2300      	movs	r3, #0
 800a246:	4604      	mov	r4, r0
 800a248:	4608      	mov	r0, r1
 800a24a:	602b      	str	r3, [r5, #0]
 800a24c:	f7f8 f878 	bl	8002340 <_sbrk>
 800a250:	1c43      	adds	r3, r0, #1
 800a252:	d102      	bne.n	800a25a <_sbrk_r+0x1a>
 800a254:	682b      	ldr	r3, [r5, #0]
 800a256:	b103      	cbz	r3, 800a25a <_sbrk_r+0x1a>
 800a258:	6023      	str	r3, [r4, #0]
 800a25a:	bd38      	pop	{r3, r4, r5, pc}
 800a25c:	200006c0 	.word	0x200006c0

0800a260 <memcpy>:
 800a260:	440a      	add	r2, r1
 800a262:	4291      	cmp	r1, r2
 800a264:	f100 33ff 	add.w	r3, r0, #4294967295
 800a268:	d100      	bne.n	800a26c <memcpy+0xc>
 800a26a:	4770      	bx	lr
 800a26c:	b510      	push	{r4, lr}
 800a26e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a272:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a276:	4291      	cmp	r1, r2
 800a278:	d1f9      	bne.n	800a26e <memcpy+0xe>
 800a27a:	bd10      	pop	{r4, pc}

0800a27c <__assert_func>:
 800a27c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a27e:	4614      	mov	r4, r2
 800a280:	461a      	mov	r2, r3
 800a282:	4b09      	ldr	r3, [pc, #36]	@ (800a2a8 <__assert_func+0x2c>)
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	4605      	mov	r5, r0
 800a288:	68d8      	ldr	r0, [r3, #12]
 800a28a:	b954      	cbnz	r4, 800a2a2 <__assert_func+0x26>
 800a28c:	4b07      	ldr	r3, [pc, #28]	@ (800a2ac <__assert_func+0x30>)
 800a28e:	461c      	mov	r4, r3
 800a290:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a294:	9100      	str	r1, [sp, #0]
 800a296:	462b      	mov	r3, r5
 800a298:	4905      	ldr	r1, [pc, #20]	@ (800a2b0 <__assert_func+0x34>)
 800a29a:	f000 f841 	bl	800a320 <fiprintf>
 800a29e:	f000 f851 	bl	800a344 <abort>
 800a2a2:	4b04      	ldr	r3, [pc, #16]	@ (800a2b4 <__assert_func+0x38>)
 800a2a4:	e7f4      	b.n	800a290 <__assert_func+0x14>
 800a2a6:	bf00      	nop
 800a2a8:	20000018 	.word	0x20000018
 800a2ac:	0800a78e 	.word	0x0800a78e
 800a2b0:	0800a760 	.word	0x0800a760
 800a2b4:	0800a753 	.word	0x0800a753

0800a2b8 <_calloc_r>:
 800a2b8:	b570      	push	{r4, r5, r6, lr}
 800a2ba:	fba1 5402 	umull	r5, r4, r1, r2
 800a2be:	b93c      	cbnz	r4, 800a2d0 <_calloc_r+0x18>
 800a2c0:	4629      	mov	r1, r5
 800a2c2:	f7ff f93d 	bl	8009540 <_malloc_r>
 800a2c6:	4606      	mov	r6, r0
 800a2c8:	b928      	cbnz	r0, 800a2d6 <_calloc_r+0x1e>
 800a2ca:	2600      	movs	r6, #0
 800a2cc:	4630      	mov	r0, r6
 800a2ce:	bd70      	pop	{r4, r5, r6, pc}
 800a2d0:	220c      	movs	r2, #12
 800a2d2:	6002      	str	r2, [r0, #0]
 800a2d4:	e7f9      	b.n	800a2ca <_calloc_r+0x12>
 800a2d6:	462a      	mov	r2, r5
 800a2d8:	4621      	mov	r1, r4
 800a2da:	f7fe f9f1 	bl	80086c0 <memset>
 800a2de:	e7f5      	b.n	800a2cc <_calloc_r+0x14>

0800a2e0 <__ascii_mbtowc>:
 800a2e0:	b082      	sub	sp, #8
 800a2e2:	b901      	cbnz	r1, 800a2e6 <__ascii_mbtowc+0x6>
 800a2e4:	a901      	add	r1, sp, #4
 800a2e6:	b142      	cbz	r2, 800a2fa <__ascii_mbtowc+0x1a>
 800a2e8:	b14b      	cbz	r3, 800a2fe <__ascii_mbtowc+0x1e>
 800a2ea:	7813      	ldrb	r3, [r2, #0]
 800a2ec:	600b      	str	r3, [r1, #0]
 800a2ee:	7812      	ldrb	r2, [r2, #0]
 800a2f0:	1e10      	subs	r0, r2, #0
 800a2f2:	bf18      	it	ne
 800a2f4:	2001      	movne	r0, #1
 800a2f6:	b002      	add	sp, #8
 800a2f8:	4770      	bx	lr
 800a2fa:	4610      	mov	r0, r2
 800a2fc:	e7fb      	b.n	800a2f6 <__ascii_mbtowc+0x16>
 800a2fe:	f06f 0001 	mvn.w	r0, #1
 800a302:	e7f8      	b.n	800a2f6 <__ascii_mbtowc+0x16>

0800a304 <__ascii_wctomb>:
 800a304:	4603      	mov	r3, r0
 800a306:	4608      	mov	r0, r1
 800a308:	b141      	cbz	r1, 800a31c <__ascii_wctomb+0x18>
 800a30a:	2aff      	cmp	r2, #255	@ 0xff
 800a30c:	d904      	bls.n	800a318 <__ascii_wctomb+0x14>
 800a30e:	228a      	movs	r2, #138	@ 0x8a
 800a310:	601a      	str	r2, [r3, #0]
 800a312:	f04f 30ff 	mov.w	r0, #4294967295
 800a316:	4770      	bx	lr
 800a318:	700a      	strb	r2, [r1, #0]
 800a31a:	2001      	movs	r0, #1
 800a31c:	4770      	bx	lr
	...

0800a320 <fiprintf>:
 800a320:	b40e      	push	{r1, r2, r3}
 800a322:	b503      	push	{r0, r1, lr}
 800a324:	4601      	mov	r1, r0
 800a326:	ab03      	add	r3, sp, #12
 800a328:	4805      	ldr	r0, [pc, #20]	@ (800a340 <fiprintf+0x20>)
 800a32a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a32e:	6800      	ldr	r0, [r0, #0]
 800a330:	9301      	str	r3, [sp, #4]
 800a332:	f7ff fd3d 	bl	8009db0 <_vfiprintf_r>
 800a336:	b002      	add	sp, #8
 800a338:	f85d eb04 	ldr.w	lr, [sp], #4
 800a33c:	b003      	add	sp, #12
 800a33e:	4770      	bx	lr
 800a340:	20000018 	.word	0x20000018

0800a344 <abort>:
 800a344:	b508      	push	{r3, lr}
 800a346:	2006      	movs	r0, #6
 800a348:	f000 f82c 	bl	800a3a4 <raise>
 800a34c:	2001      	movs	r0, #1
 800a34e:	f7f7 ff9b 	bl	8002288 <_exit>

0800a352 <_raise_r>:
 800a352:	291f      	cmp	r1, #31
 800a354:	b538      	push	{r3, r4, r5, lr}
 800a356:	4605      	mov	r5, r0
 800a358:	460c      	mov	r4, r1
 800a35a:	d904      	bls.n	800a366 <_raise_r+0x14>
 800a35c:	2316      	movs	r3, #22
 800a35e:	6003      	str	r3, [r0, #0]
 800a360:	f04f 30ff 	mov.w	r0, #4294967295
 800a364:	bd38      	pop	{r3, r4, r5, pc}
 800a366:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a368:	b112      	cbz	r2, 800a370 <_raise_r+0x1e>
 800a36a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a36e:	b94b      	cbnz	r3, 800a384 <_raise_r+0x32>
 800a370:	4628      	mov	r0, r5
 800a372:	f000 f831 	bl	800a3d8 <_getpid_r>
 800a376:	4622      	mov	r2, r4
 800a378:	4601      	mov	r1, r0
 800a37a:	4628      	mov	r0, r5
 800a37c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a380:	f000 b818 	b.w	800a3b4 <_kill_r>
 800a384:	2b01      	cmp	r3, #1
 800a386:	d00a      	beq.n	800a39e <_raise_r+0x4c>
 800a388:	1c59      	adds	r1, r3, #1
 800a38a:	d103      	bne.n	800a394 <_raise_r+0x42>
 800a38c:	2316      	movs	r3, #22
 800a38e:	6003      	str	r3, [r0, #0]
 800a390:	2001      	movs	r0, #1
 800a392:	e7e7      	b.n	800a364 <_raise_r+0x12>
 800a394:	2100      	movs	r1, #0
 800a396:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a39a:	4620      	mov	r0, r4
 800a39c:	4798      	blx	r3
 800a39e:	2000      	movs	r0, #0
 800a3a0:	e7e0      	b.n	800a364 <_raise_r+0x12>
	...

0800a3a4 <raise>:
 800a3a4:	4b02      	ldr	r3, [pc, #8]	@ (800a3b0 <raise+0xc>)
 800a3a6:	4601      	mov	r1, r0
 800a3a8:	6818      	ldr	r0, [r3, #0]
 800a3aa:	f7ff bfd2 	b.w	800a352 <_raise_r>
 800a3ae:	bf00      	nop
 800a3b0:	20000018 	.word	0x20000018

0800a3b4 <_kill_r>:
 800a3b4:	b538      	push	{r3, r4, r5, lr}
 800a3b6:	4d07      	ldr	r5, [pc, #28]	@ (800a3d4 <_kill_r+0x20>)
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	4604      	mov	r4, r0
 800a3bc:	4608      	mov	r0, r1
 800a3be:	4611      	mov	r1, r2
 800a3c0:	602b      	str	r3, [r5, #0]
 800a3c2:	f7f7 ff51 	bl	8002268 <_kill>
 800a3c6:	1c43      	adds	r3, r0, #1
 800a3c8:	d102      	bne.n	800a3d0 <_kill_r+0x1c>
 800a3ca:	682b      	ldr	r3, [r5, #0]
 800a3cc:	b103      	cbz	r3, 800a3d0 <_kill_r+0x1c>
 800a3ce:	6023      	str	r3, [r4, #0]
 800a3d0:	bd38      	pop	{r3, r4, r5, pc}
 800a3d2:	bf00      	nop
 800a3d4:	200006c0 	.word	0x200006c0

0800a3d8 <_getpid_r>:
 800a3d8:	f7f7 bf3e 	b.w	8002258 <_getpid>

0800a3dc <fmaxf>:
 800a3dc:	b508      	push	{r3, lr}
 800a3de:	ed2d 8b02 	vpush	{d8}
 800a3e2:	eeb0 8a40 	vmov.f32	s16, s0
 800a3e6:	eef0 8a60 	vmov.f32	s17, s1
 800a3ea:	f000 f831 	bl	800a450 <__fpclassifyf>
 800a3ee:	b930      	cbnz	r0, 800a3fe <fmaxf+0x22>
 800a3f0:	eeb0 8a68 	vmov.f32	s16, s17
 800a3f4:	eeb0 0a48 	vmov.f32	s0, s16
 800a3f8:	ecbd 8b02 	vpop	{d8}
 800a3fc:	bd08      	pop	{r3, pc}
 800a3fe:	eeb0 0a68 	vmov.f32	s0, s17
 800a402:	f000 f825 	bl	800a450 <__fpclassifyf>
 800a406:	2800      	cmp	r0, #0
 800a408:	d0f4      	beq.n	800a3f4 <fmaxf+0x18>
 800a40a:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800a40e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a412:	dded      	ble.n	800a3f0 <fmaxf+0x14>
 800a414:	e7ee      	b.n	800a3f4 <fmaxf+0x18>

0800a416 <fminf>:
 800a416:	b508      	push	{r3, lr}
 800a418:	ed2d 8b02 	vpush	{d8}
 800a41c:	eeb0 8a40 	vmov.f32	s16, s0
 800a420:	eef0 8a60 	vmov.f32	s17, s1
 800a424:	f000 f814 	bl	800a450 <__fpclassifyf>
 800a428:	b930      	cbnz	r0, 800a438 <fminf+0x22>
 800a42a:	eeb0 8a68 	vmov.f32	s16, s17
 800a42e:	eeb0 0a48 	vmov.f32	s0, s16
 800a432:	ecbd 8b02 	vpop	{d8}
 800a436:	bd08      	pop	{r3, pc}
 800a438:	eeb0 0a68 	vmov.f32	s0, s17
 800a43c:	f000 f808 	bl	800a450 <__fpclassifyf>
 800a440:	2800      	cmp	r0, #0
 800a442:	d0f4      	beq.n	800a42e <fminf+0x18>
 800a444:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800a448:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a44c:	d5ed      	bpl.n	800a42a <fminf+0x14>
 800a44e:	e7ee      	b.n	800a42e <fminf+0x18>

0800a450 <__fpclassifyf>:
 800a450:	ee10 3a10 	vmov	r3, s0
 800a454:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 800a458:	d00d      	beq.n	800a476 <__fpclassifyf+0x26>
 800a45a:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 800a45e:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 800a462:	d30a      	bcc.n	800a47a <__fpclassifyf+0x2a>
 800a464:	4b07      	ldr	r3, [pc, #28]	@ (800a484 <__fpclassifyf+0x34>)
 800a466:	1e42      	subs	r2, r0, #1
 800a468:	429a      	cmp	r2, r3
 800a46a:	d908      	bls.n	800a47e <__fpclassifyf+0x2e>
 800a46c:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 800a470:	4258      	negs	r0, r3
 800a472:	4158      	adcs	r0, r3
 800a474:	4770      	bx	lr
 800a476:	2002      	movs	r0, #2
 800a478:	4770      	bx	lr
 800a47a:	2004      	movs	r0, #4
 800a47c:	4770      	bx	lr
 800a47e:	2003      	movs	r0, #3
 800a480:	4770      	bx	lr
 800a482:	bf00      	nop
 800a484:	007ffffe 	.word	0x007ffffe

0800a488 <_init>:
 800a488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a48a:	bf00      	nop
 800a48c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a48e:	bc08      	pop	{r3}
 800a490:	469e      	mov	lr, r3
 800a492:	4770      	bx	lr

0800a494 <_fini>:
 800a494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a496:	bf00      	nop
 800a498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a49a:	bc08      	pop	{r3}
 800a49c:	469e      	mov	lr, r3
 800a49e:	4770      	bx	lr
