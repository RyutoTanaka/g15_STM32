
power.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062d8  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08006460  08006460  00007460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080064d4  080064d4  00008068  2**0
                  CONTENTS
  4 .ARM          00000000  080064d4  080064d4  00008068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080064d4  080064d4  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080064d4  080064d4  000074d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080064d8  080064d8  000074d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080064dc  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00008068  2**0
                  CONTENTS
 10 .bss          00000390  20000068  20000068  00008068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200003f8  200003f8  00008068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 13 .debug_info   000135c6  00000000  00000000  00008098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000268c  00000000  00000000  0001b65e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001118  00000000  00000000  0001dcf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d53  00000000  00000000  0001ee08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d8ec  00000000  00000000  0001fb5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000147bf  00000000  00000000  0003d447  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b0b42  00000000  00000000  00051c06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00102748  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004f5c  00000000  00000000  0010278c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000065  00000000  00000000  001076e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000068 	.word	0x20000068
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006448 	.word	0x08006448

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000006c 	.word	0x2000006c
 80001c4:	08006448 	.word	0x08006448

080001c8 <powerCommandDeserialize>:

void powerCommandSerialize(PowerCommand* data, uint8_t* buffer){
	*buffer =  (uint8_t)(data->motor_output) + ((uint8_t)data->power_off << 1);
}

void powerCommandDeserialize(PowerCommand* data, uint8_t* buffer){
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	6039      	str	r1, [r7, #0]
	data->motor_output = (buffer[0]&0x01)==0x01;
 80001d2:	683b      	ldr	r3, [r7, #0]
 80001d4:	781b      	ldrb	r3, [r3, #0]
 80001d6:	f003 0301 	and.w	r3, r3, #1
 80001da:	2b00      	cmp	r3, #0
 80001dc:	bf14      	ite	ne
 80001de:	2301      	movne	r3, #1
 80001e0:	2300      	moveq	r3, #0
 80001e2:	b2da      	uxtb	r2, r3
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	701a      	strb	r2, [r3, #0]
	data->power_off = (buffer[0]&0x02)==0x02;
 80001e8:	683b      	ldr	r3, [r7, #0]
 80001ea:	781b      	ldrb	r3, [r3, #0]
 80001ec:	f003 0302 	and.w	r3, r3, #2
 80001f0:	2b00      	cmp	r3, #0
 80001f2:	bf14      	ite	ne
 80001f4:	2301      	movne	r3, #1
 80001f6:	2300      	moveq	r3, #0
 80001f8:	b2da      	uxtb	r2, r3
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	705a      	strb	r2, [r3, #1]
}
 80001fe:	bf00      	nop
 8000200:	370c      	adds	r7, #12
 8000202:	46bd      	mov	sp, r7
 8000204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000208:	4770      	bx	lr

0800020a <powerResultSerialize>:

void powerResultSerialize(PowerResult* data, uint8_t* buffer){
 800020a:	b480      	push	{r7}
 800020c:	b083      	sub	sp, #12
 800020e:	af00      	add	r7, sp, #0
 8000210:	6078      	str	r0, [r7, #4]
 8000212:	6039      	str	r1, [r7, #0]
	buffer[0] = (uint8_t)(data->emergency) + ((uint8_t)data->motor_output << 1);
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	781b      	ldrb	r3, [r3, #0]
 8000218:	461a      	mov	r2, r3
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	785b      	ldrb	r3, [r3, #1]
 800021e:	005b      	lsls	r3, r3, #1
 8000220:	b2db      	uxtb	r3, r3
 8000222:	4413      	add	r3, r2
 8000224:	b2da      	uxtb	r2, r3
 8000226:	683b      	ldr	r3, [r7, #0]
 8000228:	701a      	strb	r2, [r3, #0]
	buffer[1] = data->v_bat;
 800022a:	683b      	ldr	r3, [r7, #0]
 800022c:	3301      	adds	r3, #1
 800022e:	687a      	ldr	r2, [r7, #4]
 8000230:	7892      	ldrb	r2, [r2, #2]
 8000232:	701a      	strb	r2, [r3, #0]
	buffer[2] = data->i_bat;
 8000234:	683b      	ldr	r3, [r7, #0]
 8000236:	3302      	adds	r3, #2
 8000238:	687a      	ldr	r2, [r7, #4]
 800023a:	78d2      	ldrb	r2, [r2, #3]
 800023c:	701a      	strb	r2, [r3, #0]
}
 800023e:	bf00      	nop
 8000240:	370c      	adds	r7, #12
 8000242:	46bd      	mov	sp, r7
 8000244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000248:	4770      	bx	lr
	...

0800024c <canInit>:

static CAN_FilterTypeDef g_filter;

static bool g_updated = false;

void canInit(CAN_HandleTypeDef *hcan){
 800024c:	b580      	push	{r7, lr}
 800024e:	b082      	sub	sp, #8
 8000250:	af00      	add	r7, sp, #0
 8000252:	6078      	str	r0, [r7, #4]
	g_hcan = hcan;
 8000254:	4a1d      	ldr	r2, [pc, #116]	@ (80002cc <canInit+0x80>)
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	6013      	str	r3, [r2, #0]
	g_filter.FilterIdHigh         = MDC_CAN_ID << 5;               // フィルターID(上位16ビット)
 800025a:	4b1d      	ldr	r3, [pc, #116]	@ (80002d0 <canInit+0x84>)
 800025c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000260:	601a      	str	r2, [r3, #0]
	g_filter.FilterIdLow          = MDC_CAN_ID << 5;     // フィルターID(下位16ビット)                         // フィルターマスク(下位16ビット)
 8000262:	4b1b      	ldr	r3, [pc, #108]	@ (80002d0 <canInit+0x84>)
 8000264:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000268:	605a      	str	r2, [r3, #4]
	g_filter.FilterScale          = CAN_FILTERSCALE_16BIT;    // フィルタースケール
 800026a:	4b19      	ldr	r3, [pc, #100]	@ (80002d0 <canInit+0x84>)
 800026c:	2200      	movs	r2, #0
 800026e:	61da      	str	r2, [r3, #28]
	g_filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;         // フィルターに割り当てるFIFO
 8000270:	4b17      	ldr	r3, [pc, #92]	@ (80002d0 <canInit+0x84>)
 8000272:	2200      	movs	r2, #0
 8000274:	611a      	str	r2, [r3, #16]
	g_filter.FilterBank           = 0;                        // フィルターバンクNo
 8000276:	4b16      	ldr	r3, [pc, #88]	@ (80002d0 <canInit+0x84>)
 8000278:	2200      	movs	r2, #0
 800027a:	615a      	str	r2, [r3, #20]
	g_filter.FilterMode           = CAN_FILTERMODE_IDLIST;    // フィルターモード
 800027c:	4b14      	ldr	r3, [pc, #80]	@ (80002d0 <canInit+0x84>)
 800027e:	2201      	movs	r2, #1
 8000280:	619a      	str	r2, [r3, #24]
	g_filter.SlaveStartFilterBank = 14;                       // スレーブCANの開始フィルターバンクNo
 8000282:	4b13      	ldr	r3, [pc, #76]	@ (80002d0 <canInit+0x84>)
 8000284:	220e      	movs	r2, #14
 8000286:	625a      	str	r2, [r3, #36]	@ 0x24
	g_filter.FilterActivation     = ENABLE;                   // フィルター無効／有効
 8000288:	4b11      	ldr	r3, [pc, #68]	@ (80002d0 <canInit+0x84>)
 800028a:	2201      	movs	r2, #1
 800028c:	621a      	str	r2, [r3, #32]
	if (HAL_CAN_ConfigFilter(hcan, &g_filter) != HAL_OK) Error_Handler();
 800028e:	4910      	ldr	r1, [pc, #64]	@ (80002d0 <canInit+0x84>)
 8000290:	6878      	ldr	r0, [r7, #4]
 8000292:	f002 f81e 	bl	80022d2 <HAL_CAN_ConfigFilter>
 8000296:	4603      	mov	r3, r0
 8000298:	2b00      	cmp	r3, #0
 800029a:	d001      	beq.n	80002a0 <canInit+0x54>
 800029c:	f000 fc62 	bl	8000b64 <Error_Handler>
	if (HAL_CAN_Start(hcan)!=HAL_OK) Error_Handler();
 80002a0:	6878      	ldr	r0, [r7, #4]
 80002a2:	f002 f8e0 	bl	8002466 <HAL_CAN_Start>
 80002a6:	4603      	mov	r3, r0
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d001      	beq.n	80002b0 <canInit+0x64>
 80002ac:	f000 fc5a 	bl	8000b64 <Error_Handler>
	if (HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING)!=HAL_OK) Error_Handler();
 80002b0:	2102      	movs	r1, #2
 80002b2:	6878      	ldr	r0, [r7, #4]
 80002b4:	f002 fb42 	bl	800293c <HAL_CAN_ActivateNotification>
 80002b8:	4603      	mov	r3, r0
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d001      	beq.n	80002c2 <canInit+0x76>
 80002be:	f000 fc51 	bl	8000b64 <Error_Handler>
}
 80002c2:	bf00      	nop
 80002c4:	3708      	adds	r7, #8
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bd80      	pop	{r7, pc}
 80002ca:	bf00      	nop
 80002cc:	2000008c 	.word	0x2000008c
 80002d0:	20000090 	.word	0x20000090

080002d4 <getCanData>:

void getCanData(PowerCommand* cmd){
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b082      	sub	sp, #8
 80002d8:	af00      	add	r7, sp, #0
 80002da:	6078      	str	r0, [r7, #4]
	g_updated = false;
 80002dc:	4b05      	ldr	r3, [pc, #20]	@ (80002f4 <getCanData+0x20>)
 80002de:	2200      	movs	r2, #0
 80002e0:	701a      	strb	r2, [r3, #0]
	powerCommandDeserialize(cmd, g_rx_data);
 80002e2:	4905      	ldr	r1, [pc, #20]	@ (80002f8 <getCanData+0x24>)
 80002e4:	6878      	ldr	r0, [r7, #4]
 80002e6:	f7ff ff6f 	bl	80001c8 <powerCommandDeserialize>
}
 80002ea:	bf00      	nop
 80002ec:	3708      	adds	r7, #8
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bd80      	pop	{r7, pc}
 80002f2:	bf00      	nop
 80002f4:	200000b8 	.word	0x200000b8
 80002f8:	20000088 	.word	0x20000088

080002fc <setCanData>:

void setCanData(PowerResult* res){
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b082      	sub	sp, #8
 8000300:	af00      	add	r7, sp, #0
 8000302:	6078      	str	r0, [r7, #4]
	powerResultSerialize(res,g_tx_data);
 8000304:	4903      	ldr	r1, [pc, #12]	@ (8000314 <setCanData+0x18>)
 8000306:	6878      	ldr	r0, [r7, #4]
 8000308:	f7ff ff7f 	bl	800020a <powerResultSerialize>
}
 800030c:	bf00      	nop
 800030e:	3708      	adds	r7, #8
 8000310:	46bd      	mov	sp, r7
 8000312:	bd80      	pop	{r7, pc}
 8000314:	20000084 	.word	0x20000084

08000318 <isCanUpdated>:

bool isCanUpdated(){
 8000318:	b480      	push	{r7}
 800031a:	af00      	add	r7, sp, #0
	return g_updated;
 800031c:	4b03      	ldr	r3, [pc, #12]	@ (800032c <isCanUpdated+0x14>)
 800031e:	781b      	ldrb	r3, [r3, #0]
}
 8000320:	4618      	mov	r0, r3
 8000322:	46bd      	mov	sp, r7
 8000324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000328:	4770      	bx	lr
 800032a:	bf00      	nop
 800032c:	200000b8 	.word	0x200000b8

08000330 <sendCanData>:

void sendCanData(){
 8000330:	b580      	push	{r7, lr}
 8000332:	b088      	sub	sp, #32
 8000334:	af00      	add	r7, sp, #0
	CAN_TxHeaderTypeDef TxHeader;
	uint32_t TxMailbox;
	uint8_t data[POWER_RESULT_BUFFER_SIZE];
	if(0 < HAL_CAN_GetTxMailboxesFreeLevel(g_hcan)){
 8000336:	4b16      	ldr	r3, [pc, #88]	@ (8000390 <sendCanData+0x60>)
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	4618      	mov	r0, r3
 800033c:	f002 f9a7 	bl	800268e <HAL_CAN_GetTxMailboxesFreeLevel>
 8000340:	4603      	mov	r3, r0
 8000342:	2b00      	cmp	r3, #0
 8000344:	d01f      	beq.n	8000386 <sendCanData+0x56>
	    TxHeader.StdId = POWER_CAN_ID;                 // CAN ID
 8000346:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800034a:	60bb      	str	r3, [r7, #8]
	    TxHeader.RTR = CAN_RTR_DATA;            // フレームタイプはデータフレーム
 800034c:	2300      	movs	r3, #0
 800034e:	617b      	str	r3, [r7, #20]
	    TxHeader.IDE = CAN_ID_STD;              // 標準ID(11ﾋﾞｯﾄ)
 8000350:	2300      	movs	r3, #0
 8000352:	613b      	str	r3, [r7, #16]
	    TxHeader.DLC = POWER_RESULT_BUFFER_SIZE;                       // データ長は8バイトに
 8000354:	2303      	movs	r3, #3
 8000356:	61bb      	str	r3, [r7, #24]
	    TxHeader.TransmitGlobalTime = DISABLE;  // ???
 8000358:	2300      	movs	r3, #0
 800035a:	773b      	strb	r3, [r7, #28]
	    memcpy(data,g_tx_data,sizeof(g_tx_data));
 800035c:	4a0d      	ldr	r2, [pc, #52]	@ (8000394 <sendCanData+0x64>)
 800035e:	463b      	mov	r3, r7
 8000360:	6812      	ldr	r2, [r2, #0]
 8000362:	4611      	mov	r1, r2
 8000364:	8019      	strh	r1, [r3, #0]
 8000366:	3302      	adds	r3, #2
 8000368:	0c12      	lsrs	r2, r2, #16
 800036a:	701a      	strb	r2, [r3, #0]
	    if(HAL_CAN_AddTxMessage(g_hcan, &TxHeader, data, &TxMailbox)!=HAL_OK) Error_Handler();
 800036c:	4b08      	ldr	r3, [pc, #32]	@ (8000390 <sendCanData+0x60>)
 800036e:	6818      	ldr	r0, [r3, #0]
 8000370:	1d3b      	adds	r3, r7, #4
 8000372:	463a      	mov	r2, r7
 8000374:	f107 0108 	add.w	r1, r7, #8
 8000378:	f002 f8b9 	bl	80024ee <HAL_CAN_AddTxMessage>
 800037c:	4603      	mov	r3, r0
 800037e:	2b00      	cmp	r3, #0
 8000380:	d001      	beq.n	8000386 <sendCanData+0x56>
 8000382:	f000 fbef 	bl	8000b64 <Error_Handler>
	}
}
 8000386:	bf00      	nop
 8000388:	3720      	adds	r7, #32
 800038a:	46bd      	mov	sp, r7
 800038c:	bd80      	pop	{r7, pc}
 800038e:	bf00      	nop
 8000390:	2000008c 	.word	0x2000008c
 8000394:	20000084 	.word	0x20000084

08000398 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b08a      	sub	sp, #40	@ 0x28
 800039c:	af00      	add	r7, sp, #0
 800039e:	6078      	str	r0, [r7, #4]
    CAN_RxHeaderTypeDef RxHeader;
    uint8_t data[POWER_COMMAND_BUFFER_SIZE];
    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, data) == HAL_OK)
 80003a0:	f107 0308 	add.w	r3, r7, #8
 80003a4:	f107 020c 	add.w	r2, r7, #12
 80003a8:	2100      	movs	r1, #0
 80003aa:	6878      	ldr	r0, [r7, #4]
 80003ac:	f002 f9a4 	bl	80026f8 <HAL_CAN_GetRxMessage>
 80003b0:	4603      	mov	r3, r0
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d105      	bne.n	80003c2 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a>
    {
				g_updated = true;
 80003b6:	4b05      	ldr	r3, [pc, #20]	@ (80003cc <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 80003b8:	2201      	movs	r2, #1
 80003ba:	701a      	strb	r2, [r3, #0]
				memcpy(g_rx_data,data,sizeof(g_rx_data));
 80003bc:	7a3a      	ldrb	r2, [r7, #8]
 80003be:	4b04      	ldr	r3, [pc, #16]	@ (80003d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 80003c0:	701a      	strb	r2, [r3, #0]
    }
}
 80003c2:	bf00      	nop
 80003c4:	3728      	adds	r7, #40	@ 0x28
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	bf00      	nop
 80003cc:	200000b8 	.word	0x200000b8
 80003d0:	20000088 	.word	0x20000088

080003d4 <isNoError>:
typedef struct{
	bool battery;
	bool emergency;
}Error;

bool isNoError(Error e){
 80003d4:	b480      	push	{r7}
 80003d6:	b083      	sub	sp, #12
 80003d8:	af00      	add	r7, sp, #0
 80003da:	80b8      	strh	r0, [r7, #4]
	return (e.battery==false) && (e.emergency==false);
 80003dc:	793b      	ldrb	r3, [r7, #4]
 80003de:	f083 0301 	eor.w	r3, r3, #1
 80003e2:	b2db      	uxtb	r3, r3
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d007      	beq.n	80003f8 <isNoError+0x24>
 80003e8:	797b      	ldrb	r3, [r7, #5]
 80003ea:	f083 0301 	eor.w	r3, r3, #1
 80003ee:	b2db      	uxtb	r3, r3
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d001      	beq.n	80003f8 <isNoError+0x24>
 80003f4:	2301      	movs	r3, #1
 80003f6:	e000      	b.n	80003fa <isNoError+0x26>
 80003f8:	2300      	movs	r3, #0
 80003fa:	f003 0301 	and.w	r3, r3, #1
 80003fe:	b2db      	uxtb	r3, r3
}
 8000400:	4618      	mov	r0, r3
 8000402:	370c      	adds	r7, #12
 8000404:	46bd      	mov	sp, r7
 8000406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040a:	4770      	bx	lr

0800040c <HAL_TIM_PeriodElapsedCallback>:
bool g_main_loop_flag = false;

bool batteryErrorCheck(uint16_t,uint16_t);

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b082      	sub	sp, #8
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
	if(htim == &htim6)
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	4a0c      	ldr	r2, [pc, #48]	@ (8000448 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000418:	4293      	cmp	r3, r2
 800041a:	d10a      	bne.n	8000432 <HAL_TIM_PeriodElapsedCallback+0x26>
	{
		//mainloop
		if(g_main_loop_flag){
 800041c:	4b0b      	ldr	r3, [pc, #44]	@ (800044c <HAL_TIM_PeriodElapsedCallback+0x40>)
 800041e:	781b      	ldrb	r3, [r3, #0]
 8000420:	2b00      	cmp	r3, #0
 8000422:	d003      	beq.n	800042c <HAL_TIM_PeriodElapsedCallback+0x20>
			printf("Control cycle is slow\r\n");
 8000424:	480a      	ldr	r0, [pc, #40]	@ (8000450 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000426:	f005 fbb7 	bl	8005b98 <puts>
 800042a:	e002      	b.n	8000432 <HAL_TIM_PeriodElapsedCallback+0x26>
		}
		else{
			g_main_loop_flag = true;
 800042c:	4b07      	ldr	r3, [pc, #28]	@ (800044c <HAL_TIM_PeriodElapsedCallback+0x40>)
 800042e:	2201      	movs	r2, #1
 8000430:	701a      	strb	r2, [r3, #0]
		}
	}
	if(htim == &htim7){
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	4a07      	ldr	r2, [pc, #28]	@ (8000454 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000436:	4293      	cmp	r3, r2
 8000438:	d101      	bne.n	800043e <HAL_TIM_PeriodElapsedCallback+0x32>
		sendCanData();
 800043a:	f7ff ff79 	bl	8000330 <sendCanData>
	}

}
 800043e:	bf00      	nop
 8000440:	3708      	adds	r7, #8
 8000442:	46bd      	mov	sp, r7
 8000444:	bd80      	pop	{r7, pc}
 8000446:	bf00      	nop
 8000448:	20000178 	.word	0x20000178
 800044c:	20000298 	.word	0x20000298
 8000450:	08006460 	.word	0x08006460
 8000454:	200001c4 	.word	0x200001c4

08000458 <batteryErrorCheck>:

// バッテリーの電流、電圧、非常停止スイッチの状態を確認する　異常があればtrueを返す
bool batteryErrorCheck(uint16_t i_bat,uint16_t v_bat){
 8000458:	b480      	push	{r7}
 800045a:	b085      	sub	sp, #20
 800045c:	af00      	add	r7, sp, #0
 800045e:	4603      	mov	r3, r0
 8000460:	460a      	mov	r2, r1
 8000462:	80fb      	strh	r3, [r7, #6]
 8000464:	4613      	mov	r3, r2
 8000466:	80bb      	strh	r3, [r7, #4]
	static const uint16_t i_bat_th = 700;
	static const uint16_t v_bat_high_th = 16.0f/0.0039f;
	static const uint16_t v_bat_low_th = 12.0f/0.0039f;
	bool error = (i_bat > i_bat_th)
 8000468:	4b0e      	ldr	r3, [pc, #56]	@ (80004a4 <batteryErrorCheck+0x4c>)
 800046a:	881b      	ldrh	r3, [r3, #0]
			|| (v_bat > v_bat_high_th)
			|| (v_bat < v_bat_low_th);
 800046c:	88fa      	ldrh	r2, [r7, #6]
 800046e:	429a      	cmp	r2, r3
 8000470:	d809      	bhi.n	8000486 <batteryErrorCheck+0x2e>
			|| (v_bat > v_bat_high_th)
 8000472:	4b0d      	ldr	r3, [pc, #52]	@ (80004a8 <batteryErrorCheck+0x50>)
 8000474:	881b      	ldrh	r3, [r3, #0]
 8000476:	88ba      	ldrh	r2, [r7, #4]
 8000478:	429a      	cmp	r2, r3
 800047a:	d804      	bhi.n	8000486 <batteryErrorCheck+0x2e>
			|| (v_bat < v_bat_low_th);
 800047c:	4b0b      	ldr	r3, [pc, #44]	@ (80004ac <batteryErrorCheck+0x54>)
 800047e:	881b      	ldrh	r3, [r3, #0]
 8000480:	88ba      	ldrh	r2, [r7, #4]
 8000482:	429a      	cmp	r2, r3
 8000484:	d201      	bcs.n	800048a <batteryErrorCheck+0x32>
 8000486:	2301      	movs	r3, #1
 8000488:	e000      	b.n	800048c <batteryErrorCheck+0x34>
 800048a:	2300      	movs	r3, #0
	bool error = (i_bat > i_bat_th)
 800048c:	73fb      	strb	r3, [r7, #15]
 800048e:	7bfb      	ldrb	r3, [r7, #15]
 8000490:	f003 0301 	and.w	r3, r3, #1
 8000494:	73fb      	strb	r3, [r7, #15]
	return error;
 8000496:	7bfb      	ldrb	r3, [r7, #15]
}
 8000498:	4618      	mov	r0, r3
 800049a:	3714      	adds	r7, #20
 800049c:	46bd      	mov	sp, r7
 800049e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a2:	4770      	bx	lr
 80004a4:	08006496 	.word	0x08006496
 80004a8:	08006498 	.word	0x08006498
 80004ac:	0800649a 	.word	0x0800649a

080004b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b086      	sub	sp, #24
 80004b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	setbuf(stdout, NULL);
 80004b6:	4b8a      	ldr	r3, [pc, #552]	@ (80006e0 <main+0x230>)
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	689b      	ldr	r3, [r3, #8]
 80004bc:	2100      	movs	r1, #0
 80004be:	4618      	mov	r0, r3
 80004c0:	f005 fb72 	bl	8005ba8 <setbuf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c4:	f000 fdd0 	bl	8001068 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c8:	f000 f922 	bl	8000710 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004cc:	f000 faca 	bl	8000a64 <MX_GPIO_Init>
  MX_DMA_Init();
 80004d0:	f000 faaa 	bl	8000a28 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80004d4:	f000 fa78 	bl	80009c8 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80004d8:	f000 f956 	bl	8000788 <MX_ADC1_Init>
  MX_CAN_Init();
 80004dc:	f000 f9d2 	bl	8000884 <MX_CAN_Init>
  MX_TIM6_Init();
 80004e0:	f000 fa06 	bl	80008f0 <MX_TIM6_Init>
  MX_TIM7_Init();
 80004e4:	f000 fa3a 	bl	800095c <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  enum state state = state_wait;
 80004e8:	2300      	movs	r3, #0
 80004ea:	75fb      	strb	r3, [r7, #23]
  Error error = {0};
 80004ec:	2300      	movs	r3, #0
 80004ee:	81bb      	strh	r3, [r7, #12]


  //GPIO初期設定
  HAL_GPIO_WritePin(relay_GPIO_Port, relay_Pin, false);
 80004f0:	2200      	movs	r2, #0
 80004f2:	2140      	movs	r1, #64	@ 0x40
 80004f4:	487b      	ldr	r0, [pc, #492]	@ (80006e4 <main+0x234>)
 80004f6:	f003 f8a9 	bl	800364c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(jetson_power_GPIO_Port, jetson_power_Pin, false);
 80004fa:	2200      	movs	r2, #0
 80004fc:	2110      	movs	r1, #16
 80004fe:	4879      	ldr	r0, [pc, #484]	@ (80006e4 <main+0x234>)
 8000500:	f003 f8a4 	bl	800364c <HAL_GPIO_WritePin>

  //ADCスタート
  static uint16_t ADC_buff[2];
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000504:	2100      	movs	r1, #0
 8000506:	4878      	ldr	r0, [pc, #480]	@ (80006e8 <main+0x238>)
 8000508:	f001 f8c2 	bl	8001690 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)ADC_buff, sizeof(ADC_buff) / sizeof(ADC_buff[0]));
 800050c:	2202      	movs	r2, #2
 800050e:	4977      	ldr	r1, [pc, #476]	@ (80006ec <main+0x23c>)
 8000510:	4875      	ldr	r0, [pc, #468]	@ (80006e8 <main+0x238>)
 8000512:	f000 ffe3 	bl	80014dc <HAL_ADC_Start_DMA>
  hdma_adc1.Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT);
 8000516:	4b76      	ldr	r3, [pc, #472]	@ (80006f0 <main+0x240>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	681a      	ldr	r2, [r3, #0]
 800051c:	4b74      	ldr	r3, [pc, #464]	@ (80006f0 <main+0x240>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	f022 0206 	bic.w	r2, r2, #6
 8000524:	601a      	str	r2, [r3, #0]
  HAL_Delay(100);
 8000526:	2064      	movs	r0, #100	@ 0x64
 8000528:	f000 fe04 	bl	8001134 <HAL_Delay>

  //エラーチェック後５Vオン&CANスタート
	while (batteryErrorCheck(ADC_buff[0], ADC_buff[1]) == true
 800052c:	e003      	b.n	8000536 <main+0x86>
			|| HAL_GPIO_ReadPin(emergency_switch_GPIO_Port,emergency_switch_Pin)) {
		HAL_Delay(1000);
 800052e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000532:	f000 fdff 	bl	8001134 <HAL_Delay>
	while (batteryErrorCheck(ADC_buff[0], ADC_buff[1]) == true
 8000536:	4b6d      	ldr	r3, [pc, #436]	@ (80006ec <main+0x23c>)
 8000538:	881b      	ldrh	r3, [r3, #0]
 800053a:	4a6c      	ldr	r2, [pc, #432]	@ (80006ec <main+0x23c>)
 800053c:	8852      	ldrh	r2, [r2, #2]
 800053e:	4611      	mov	r1, r2
 8000540:	4618      	mov	r0, r3
 8000542:	f7ff ff89 	bl	8000458 <batteryErrorCheck>
 8000546:	4603      	mov	r3, r0
			|| HAL_GPIO_ReadPin(emergency_switch_GPIO_Port,emergency_switch_Pin)) {
 8000548:	2b00      	cmp	r3, #0
 800054a:	d1f0      	bne.n	800052e <main+0x7e>
 800054c:	2120      	movs	r1, #32
 800054e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000552:	f003 f863 	bl	800361c <HAL_GPIO_ReadPin>
 8000556:	4603      	mov	r3, r0
 8000558:	2b00      	cmp	r3, #0
 800055a:	d1e8      	bne.n	800052e <main+0x7e>
	}
  HAL_GPIO_WritePin(jetson_power_GPIO_Port, jetson_power_Pin, true);
 800055c:	2201      	movs	r2, #1
 800055e:	2110      	movs	r1, #16
 8000560:	4860      	ldr	r0, [pc, #384]	@ (80006e4 <main+0x234>)
 8000562:	f003 f873 	bl	800364c <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000566:	2064      	movs	r0, #100	@ 0x64
 8000568:	f000 fde4 	bl	8001134 <HAL_Delay>

  //CANスタート
  canInit(&hcan);
 800056c:	4861      	ldr	r0, [pc, #388]	@ (80006f4 <main+0x244>)
 800056e:	f7ff fe6d 	bl	800024c <canInit>
  size_t can_timeout_cnt = 0;
 8000572:	2300      	movs	r3, #0
 8000574:	613b      	str	r3, [r7, #16]

  //timerスタート
  HAL_TIM_Base_Start_IT(&htim6);
 8000576:	4860      	ldr	r0, [pc, #384]	@ (80006f8 <main+0x248>)
 8000578:	f004 fb36 	bl	8004be8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 800057c:	485f      	ldr	r0, [pc, #380]	@ (80006fc <main+0x24c>)
 800057e:	f004 fb33 	bl	8004be8 <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN WHILE */

  while (1)
  {
		//mainloop wait
		while(g_main_loop_flag == false){}
 8000582:	bf00      	nop
 8000584:	4b5e      	ldr	r3, [pc, #376]	@ (8000700 <main+0x250>)
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	f083 0301 	eor.w	r3, r3, #1
 800058c:	b2db      	uxtb	r3, r3
 800058e:	2b00      	cmp	r3, #0
 8000590:	d1f8      	bne.n	8000584 <main+0xd4>
		//ADCデータ確認＆CAN送信
		PowerResult result;
		result.i_bat = ADC_buff[0]>>4;
 8000592:	4b56      	ldr	r3, [pc, #344]	@ (80006ec <main+0x23c>)
 8000594:	881b      	ldrh	r3, [r3, #0]
 8000596:	091b      	lsrs	r3, r3, #4
 8000598:	b29b      	uxth	r3, r3
 800059a:	b2db      	uxtb	r3, r3
 800059c:	72fb      	strb	r3, [r7, #11]
		result.v_bat = ADC_buff[1]>>4;
 800059e:	4b53      	ldr	r3, [pc, #332]	@ (80006ec <main+0x23c>)
 80005a0:	885b      	ldrh	r3, [r3, #2]
 80005a2:	091b      	lsrs	r3, r3, #4
 80005a4:	b29b      	uxth	r3, r3
 80005a6:	b2db      	uxtb	r3, r3
 80005a8:	72bb      	strb	r3, [r7, #10]
		setCanData(&result);
 80005aa:	f107 0308 	add.w	r3, r7, #8
 80005ae:	4618      	mov	r0, r3
 80005b0:	f7ff fea4 	bl	80002fc <setCanData>

		error.battery = batteryErrorCheck(ADC_buff[0], ADC_buff[1]);
 80005b4:	4b4d      	ldr	r3, [pc, #308]	@ (80006ec <main+0x23c>)
 80005b6:	881b      	ldrh	r3, [r3, #0]
 80005b8:	4a4c      	ldr	r2, [pc, #304]	@ (80006ec <main+0x23c>)
 80005ba:	8852      	ldrh	r2, [r2, #2]
 80005bc:	4611      	mov	r1, r2
 80005be:	4618      	mov	r0, r3
 80005c0:	f7ff ff4a 	bl	8000458 <batteryErrorCheck>
 80005c4:	4603      	mov	r3, r0
 80005c6:	733b      	strb	r3, [r7, #12]
		error.emergency = HAL_GPIO_ReadPin(emergency_switch_GPIO_Port,emergency_switch_Pin);
 80005c8:	2120      	movs	r1, #32
 80005ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005ce:	f003 f825 	bl	800361c <HAL_GPIO_ReadPin>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	bf14      	ite	ne
 80005d8:	2301      	movne	r3, #1
 80005da:	2300      	moveq	r3, #0
 80005dc:	b2db      	uxtb	r3, r3
 80005de:	737b      	strb	r3, [r7, #13]

		switch(state){
 80005e0:	7dfb      	ldrb	r3, [r7, #23]
 80005e2:	2b02      	cmp	r3, #2
 80005e4:	d006      	beq.n	80005f4 <main+0x144>
 80005e6:	2b02      	cmp	r3, #2
 80005e8:	dc76      	bgt.n	80006d8 <main+0x228>
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d01c      	beq.n	8000628 <main+0x178>
 80005ee:	2b01      	cmp	r3, #1
 80005f0:	d02e      	beq.n	8000650 <main+0x1a0>
 80005f2:	e071      	b.n	80006d8 <main+0x228>
		case state_shutdown:
			static bool prev_emerg_sw = false;
			HAL_GPIO_WritePin(relay_GPIO_Port, relay_Pin, false);
 80005f4:	2200      	movs	r2, #0
 80005f6:	2140      	movs	r1, #64	@ 0x40
 80005f8:	483a      	ldr	r0, [pc, #232]	@ (80006e4 <main+0x234>)
 80005fa:	f003 f827 	bl	800364c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(jetson_power_GPIO_Port, jetson_power_Pin, false);
 80005fe:	2200      	movs	r2, #0
 8000600:	2110      	movs	r1, #16
 8000602:	4838      	ldr	r0, [pc, #224]	@ (80006e4 <main+0x234>)
 8000604:	f003 f822 	bl	800364c <HAL_GPIO_WritePin>
			if(prev_emerg_sw == true && error.emergency == false){
 8000608:	4b3e      	ldr	r3, [pc, #248]	@ (8000704 <main+0x254>)
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	2b00      	cmp	r3, #0
 800060e:	d007      	beq.n	8000620 <main+0x170>
 8000610:	7b7b      	ldrb	r3, [r7, #13]
 8000612:	f083 0301 	eor.w	r3, r3, #1
 8000616:	b2db      	uxtb	r3, r3
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <main+0x170>
				state = state_wait;
 800061c:	2300      	movs	r3, #0
 800061e:	75fb      	strb	r3, [r7, #23]
			}
			prev_emerg_sw = error.emergency;
 8000620:	7b7a      	ldrb	r2, [r7, #13]
 8000622:	4b38      	ldr	r3, [pc, #224]	@ (8000704 <main+0x254>)
 8000624:	701a      	strb	r2, [r3, #0]
			break;
 8000626:	e057      	b.n	80006d8 <main+0x228>
		case state_wait:
			HAL_GPIO_WritePin(relay_GPIO_Port, relay_Pin, false);
 8000628:	2200      	movs	r2, #0
 800062a:	2140      	movs	r1, #64	@ 0x40
 800062c:	482d      	ldr	r0, [pc, #180]	@ (80006e4 <main+0x234>)
 800062e:	f003 f80d 	bl	800364c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(jetson_power_GPIO_Port, jetson_power_Pin, true);
 8000632:	2201      	movs	r2, #1
 8000634:	2110      	movs	r1, #16
 8000636:	482b      	ldr	r0, [pc, #172]	@ (80006e4 <main+0x234>)
 8000638:	f003 f808 	bl	800364c <HAL_GPIO_WritePin>
			if(isCanUpdated()){
 800063c:	f7ff fe6c 	bl	8000318 <isCanUpdated>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d047      	beq.n	80006d6 <main+0x226>
				can_timeout_cnt = 0;
 8000646:	2300      	movs	r3, #0
 8000648:	613b      	str	r3, [r7, #16]
				state = state_active;
 800064a:	2301      	movs	r3, #1
 800064c:	75fb      	strb	r3, [r7, #23]
			}
			break;
 800064e:	e042      	b.n	80006d6 <main+0x226>
		case state_active:
			//CANデータ確認
			PowerCommand command;
			if(isCanUpdated()==false) can_timeout_cnt++;
 8000650:	f7ff fe62 	bl	8000318 <isCanUpdated>
 8000654:	4603      	mov	r3, r0
 8000656:	f083 0301 	eor.w	r3, r3, #1
 800065a:	b2db      	uxtb	r3, r3
 800065c:	2b00      	cmp	r3, #0
 800065e:	d003      	beq.n	8000668 <main+0x1b8>
 8000660:	693b      	ldr	r3, [r7, #16]
 8000662:	3301      	adds	r3, #1
 8000664:	613b      	str	r3, [r7, #16]
 8000666:	e001      	b.n	800066c <main+0x1bc>
			else can_timeout_cnt=0;
 8000668:	2300      	movs	r3, #0
 800066a:	613b      	str	r3, [r7, #16]
			getCanData(&command);
 800066c:	1d3b      	adds	r3, r7, #4
 800066e:	4618      	mov	r0, r3
 8000670:	f7ff fe30 	bl	80002d4 <getCanData>
			// state set
			if (command.power_off == true && command.motor_output == false) {
 8000674:	797b      	ldrb	r3, [r7, #5]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d008      	beq.n	800068c <main+0x1dc>
 800067a:	793b      	ldrb	r3, [r7, #4]
 800067c:	f083 0301 	eor.w	r3, r3, #1
 8000680:	b2db      	uxtb	r3, r3
 8000682:	2b00      	cmp	r3, #0
 8000684:	d002      	beq.n	800068c <main+0x1dc>
				state = state_shutdown;
 8000686:	2302      	movs	r3, #2
 8000688:	75fb      	strb	r3, [r7, #23]
 800068a:	e004      	b.n	8000696 <main+0x1e6>
			} else if (can_timeout_cnt > 5) {
 800068c:	693b      	ldr	r3, [r7, #16]
 800068e:	2b05      	cmp	r3, #5
 8000690:	d901      	bls.n	8000696 <main+0x1e6>
				state = state_wait;
 8000692:	2300      	movs	r3, #0
 8000694:	75fb      	strb	r3, [r7, #23]
			}

			HAL_GPIO_WritePin(jetson_power_GPIO_Port, jetson_power_Pin, true);
 8000696:	2201      	movs	r2, #1
 8000698:	2110      	movs	r1, #16
 800069a:	4812      	ldr	r0, [pc, #72]	@ (80006e4 <main+0x234>)
 800069c:	f002 ffd6 	bl	800364c <HAL_GPIO_WritePin>
			if(isNoError(error)&&command.motor_output==true){
 80006a0:	68f8      	ldr	r0, [r7, #12]
 80006a2:	f7ff fe97 	bl	80003d4 <isNoError>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d00b      	beq.n	80006c4 <main+0x214>
 80006ac:	793b      	ldrb	r3, [r7, #4]
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d008      	beq.n	80006c4 <main+0x214>
				printf("motor_on : \r\n");
 80006b2:	4815      	ldr	r0, [pc, #84]	@ (8000708 <main+0x258>)
 80006b4:	f005 fa70 	bl	8005b98 <puts>
				HAL_GPIO_WritePin(relay_GPIO_Port, relay_Pin, true);
 80006b8:	2201      	movs	r2, #1
 80006ba:	2140      	movs	r1, #64	@ 0x40
 80006bc:	4809      	ldr	r0, [pc, #36]	@ (80006e4 <main+0x234>)
 80006be:	f002 ffc5 	bl	800364c <HAL_GPIO_WritePin>
			}else{
				printf("motor_off : \r\n");
				HAL_GPIO_WritePin(relay_GPIO_Port, relay_Pin, false);
			}
			break;
 80006c2:	e009      	b.n	80006d8 <main+0x228>
				printf("motor_off : \r\n");
 80006c4:	4811      	ldr	r0, [pc, #68]	@ (800070c <main+0x25c>)
 80006c6:	f005 fa67 	bl	8005b98 <puts>
				HAL_GPIO_WritePin(relay_GPIO_Port, relay_Pin, false);
 80006ca:	2200      	movs	r2, #0
 80006cc:	2140      	movs	r1, #64	@ 0x40
 80006ce:	4805      	ldr	r0, [pc, #20]	@ (80006e4 <main+0x234>)
 80006d0:	f002 ffbc 	bl	800364c <HAL_GPIO_WritePin>
			break;
 80006d4:	e000      	b.n	80006d8 <main+0x228>
			break;
 80006d6:	bf00      	nop
		}
		//printf("%d,%d,%d,%d\r\n",state,ADC_buff[0],ADC_buff[1],HAL_GPIO_ReadPin(emergency_switch_GPIO_Port,emergency_switch_Pin));
    g_main_loop_flag = false;
 80006d8:	4b09      	ldr	r3, [pc, #36]	@ (8000700 <main+0x250>)
 80006da:	2200      	movs	r2, #0
 80006dc:	701a      	strb	r2, [r3, #0]
  {
 80006de:	e750      	b.n	8000582 <main+0xd2>
 80006e0:	20000018 	.word	0x20000018
 80006e4:	48000400 	.word	0x48000400
 80006e8:	200000bc 	.word	0x200000bc
 80006ec:	2000029c 	.word	0x2000029c
 80006f0:	2000010c 	.word	0x2000010c
 80006f4:	20000150 	.word	0x20000150
 80006f8:	20000178 	.word	0x20000178
 80006fc:	200001c4 	.word	0x200001c4
 8000700:	20000298 	.word	0x20000298
 8000704:	200002a0 	.word	0x200002a0
 8000708:	08006478 	.word	0x08006478
 800070c:	08006488 	.word	0x08006488

08000710 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b090      	sub	sp, #64	@ 0x40
 8000714:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000716:	f107 0318 	add.w	r3, r7, #24
 800071a:	2228      	movs	r2, #40	@ 0x28
 800071c:	2100      	movs	r1, #0
 800071e:	4618      	mov	r0, r3
 8000720:	f005 fbd6 	bl	8005ed0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000724:	1d3b      	adds	r3, r7, #4
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]
 800072c:	609a      	str	r2, [r3, #8]
 800072e:	60da      	str	r2, [r3, #12]
 8000730:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000732:	2302      	movs	r3, #2
 8000734:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000736:	2301      	movs	r3, #1
 8000738:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800073a:	2310      	movs	r3, #16
 800073c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800073e:	2300      	movs	r3, #0
 8000740:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000742:	f107 0318 	add.w	r3, r7, #24
 8000746:	4618      	mov	r0, r3
 8000748:	f002 ff98 	bl	800367c <HAL_RCC_OscConfig>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000752:	f000 fa07 	bl	8000b64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000756:	230f      	movs	r3, #15
 8000758:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800075a:	2300      	movs	r3, #0
 800075c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800075e:	2300      	movs	r3, #0
 8000760:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000762:	2300      	movs	r3, #0
 8000764:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000766:	2300      	movs	r3, #0
 8000768:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800076a:	1d3b      	adds	r3, r7, #4
 800076c:	2100      	movs	r1, #0
 800076e:	4618      	mov	r0, r3
 8000770:	f003 ffc2 	bl	80046f8 <HAL_RCC_ClockConfig>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800077a:	f000 f9f3 	bl	8000b64 <Error_Handler>
  }
}
 800077e:	bf00      	nop
 8000780:	3740      	adds	r7, #64	@ 0x40
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
	...

08000788 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b08a      	sub	sp, #40	@ 0x28
 800078c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800078e:	f107 031c 	add.w	r3, r7, #28
 8000792:	2200      	movs	r2, #0
 8000794:	601a      	str	r2, [r3, #0]
 8000796:	605a      	str	r2, [r3, #4]
 8000798:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800079a:	1d3b      	adds	r3, r7, #4
 800079c:	2200      	movs	r2, #0
 800079e:	601a      	str	r2, [r3, #0]
 80007a0:	605a      	str	r2, [r3, #4]
 80007a2:	609a      	str	r2, [r3, #8]
 80007a4:	60da      	str	r2, [r3, #12]
 80007a6:	611a      	str	r2, [r3, #16]
 80007a8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80007aa:	4b35      	ldr	r3, [pc, #212]	@ (8000880 <MX_ADC1_Init+0xf8>)
 80007ac:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80007b0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007b2:	4b33      	ldr	r3, [pc, #204]	@ (8000880 <MX_ADC1_Init+0xf8>)
 80007b4:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80007b8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007ba:	4b31      	ldr	r3, [pc, #196]	@ (8000880 <MX_ADC1_Init+0xf8>)
 80007bc:	2200      	movs	r2, #0
 80007be:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80007c0:	4b2f      	ldr	r3, [pc, #188]	@ (8000880 <MX_ADC1_Init+0xf8>)
 80007c2:	2201      	movs	r2, #1
 80007c4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80007c6:	4b2e      	ldr	r3, [pc, #184]	@ (8000880 <MX_ADC1_Init+0xf8>)
 80007c8:	2201      	movs	r2, #1
 80007ca:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007cc:	4b2c      	ldr	r3, [pc, #176]	@ (8000880 <MX_ADC1_Init+0xf8>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007d4:	4b2a      	ldr	r3, [pc, #168]	@ (8000880 <MX_ADC1_Init+0xf8>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007da:	4b29      	ldr	r3, [pc, #164]	@ (8000880 <MX_ADC1_Init+0xf8>)
 80007dc:	2201      	movs	r2, #1
 80007de:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007e0:	4b27      	ldr	r3, [pc, #156]	@ (8000880 <MX_ADC1_Init+0xf8>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80007e6:	4b26      	ldr	r3, [pc, #152]	@ (8000880 <MX_ADC1_Init+0xf8>)
 80007e8:	2202      	movs	r2, #2
 80007ea:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80007ec:	4b24      	ldr	r3, [pc, #144]	@ (8000880 <MX_ADC1_Init+0xf8>)
 80007ee:	2201      	movs	r2, #1
 80007f0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007f4:	4b22      	ldr	r3, [pc, #136]	@ (8000880 <MX_ADC1_Init+0xf8>)
 80007f6:	2204      	movs	r2, #4
 80007f8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007fa:	4b21      	ldr	r3, [pc, #132]	@ (8000880 <MX_ADC1_Init+0xf8>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000800:	4b1f      	ldr	r3, [pc, #124]	@ (8000880 <MX_ADC1_Init+0xf8>)
 8000802:	2200      	movs	r2, #0
 8000804:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000806:	481e      	ldr	r0, [pc, #120]	@ (8000880 <MX_ADC1_Init+0xf8>)
 8000808:	f000 fcd6 	bl	80011b8 <HAL_ADC_Init>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000812:	f000 f9a7 	bl	8000b64 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000816:	2300      	movs	r3, #0
 8000818:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800081a:	f107 031c 	add.w	r3, r7, #28
 800081e:	4619      	mov	r1, r3
 8000820:	4817      	ldr	r0, [pc, #92]	@ (8000880 <MX_ADC1_Init+0xf8>)
 8000822:	f001 fa65 	bl	8001cf0 <HAL_ADCEx_MultiModeConfigChannel>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 800082c:	f000 f99a 	bl	8000b64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000830:	230b      	movs	r3, #11
 8000832:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000834:	2301      	movs	r3, #1
 8000836:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000838:	2300      	movs	r3, #0
 800083a:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 800083c:	2307      	movs	r3, #7
 800083e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000840:	2300      	movs	r3, #0
 8000842:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000844:	2300      	movs	r3, #0
 8000846:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000848:	1d3b      	adds	r3, r7, #4
 800084a:	4619      	mov	r1, r3
 800084c:	480c      	ldr	r0, [pc, #48]	@ (8000880 <MX_ADC1_Init+0xf8>)
 800084e:	f000 ff91 	bl	8001774 <HAL_ADC_ConfigChannel>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 8000858:	f000 f984 	bl	8000b64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800085c:	230c      	movs	r3, #12
 800085e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000860:	2302      	movs	r3, #2
 8000862:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000864:	1d3b      	adds	r3, r7, #4
 8000866:	4619      	mov	r1, r3
 8000868:	4805      	ldr	r0, [pc, #20]	@ (8000880 <MX_ADC1_Init+0xf8>)
 800086a:	f000 ff83 	bl	8001774 <HAL_ADC_ConfigChannel>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <MX_ADC1_Init+0xf0>
  {
    Error_Handler();
 8000874:	f000 f976 	bl	8000b64 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000878:	bf00      	nop
 800087a:	3728      	adds	r7, #40	@ 0x28
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	200000bc 	.word	0x200000bc

08000884 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000888:	4b17      	ldr	r3, [pc, #92]	@ (80008e8 <MX_CAN_Init+0x64>)
 800088a:	4a18      	ldr	r2, [pc, #96]	@ (80008ec <MX_CAN_Init+0x68>)
 800088c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 3;
 800088e:	4b16      	ldr	r3, [pc, #88]	@ (80008e8 <MX_CAN_Init+0x64>)
 8000890:	2203      	movs	r2, #3
 8000892:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000894:	4b14      	ldr	r3, [pc, #80]	@ (80008e8 <MX_CAN_Init+0x64>)
 8000896:	2200      	movs	r2, #0
 8000898:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800089a:	4b13      	ldr	r3, [pc, #76]	@ (80008e8 <MX_CAN_Init+0x64>)
 800089c:	2200      	movs	r2, #0
 800089e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 80008a0:	4b11      	ldr	r3, [pc, #68]	@ (80008e8 <MX_CAN_Init+0x64>)
 80008a2:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80008a6:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 80008a8:	4b0f      	ldr	r3, [pc, #60]	@ (80008e8 <MX_CAN_Init+0x64>)
 80008aa:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 80008ae:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80008b0:	4b0d      	ldr	r3, [pc, #52]	@ (80008e8 <MX_CAN_Init+0x64>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80008b6:	4b0c      	ldr	r3, [pc, #48]	@ (80008e8 <MX_CAN_Init+0x64>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80008bc:	4b0a      	ldr	r3, [pc, #40]	@ (80008e8 <MX_CAN_Init+0x64>)
 80008be:	2200      	movs	r2, #0
 80008c0:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80008c2:	4b09      	ldr	r3, [pc, #36]	@ (80008e8 <MX_CAN_Init+0x64>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80008c8:	4b07      	ldr	r3, [pc, #28]	@ (80008e8 <MX_CAN_Init+0x64>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80008ce:	4b06      	ldr	r3, [pc, #24]	@ (80008e8 <MX_CAN_Init+0x64>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80008d4:	4804      	ldr	r0, [pc, #16]	@ (80008e8 <MX_CAN_Init+0x64>)
 80008d6:	f001 fc01 	bl	80020dc <HAL_CAN_Init>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80008e0:	f000 f940 	bl	8000b64 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80008e4:	bf00      	nop
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	20000150 	.word	0x20000150
 80008ec:	40006400 	.word	0x40006400

080008f0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b084      	sub	sp, #16
 80008f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008f6:	1d3b      	adds	r3, r7, #4
 80008f8:	2200      	movs	r2, #0
 80008fa:	601a      	str	r2, [r3, #0]
 80008fc:	605a      	str	r2, [r3, #4]
 80008fe:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000900:	4b14      	ldr	r3, [pc, #80]	@ (8000954 <MX_TIM6_Init+0x64>)
 8000902:	4a15      	ldr	r2, [pc, #84]	@ (8000958 <MX_TIM6_Init+0x68>)
 8000904:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 19;
 8000906:	4b13      	ldr	r3, [pc, #76]	@ (8000954 <MX_TIM6_Init+0x64>)
 8000908:	2213      	movs	r2, #19
 800090a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800090c:	4b11      	ldr	r3, [pc, #68]	@ (8000954 <MX_TIM6_Init+0x64>)
 800090e:	2200      	movs	r2, #0
 8000910:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 7999;
 8000912:	4b10      	ldr	r3, [pc, #64]	@ (8000954 <MX_TIM6_Init+0x64>)
 8000914:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000918:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800091a:	4b0e      	ldr	r3, [pc, #56]	@ (8000954 <MX_TIM6_Init+0x64>)
 800091c:	2200      	movs	r2, #0
 800091e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000920:	480c      	ldr	r0, [pc, #48]	@ (8000954 <MX_TIM6_Init+0x64>)
 8000922:	f004 f909 	bl	8004b38 <HAL_TIM_Base_Init>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 800092c:	f000 f91a 	bl	8000b64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000930:	2300      	movs	r3, #0
 8000932:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000934:	2300      	movs	r3, #0
 8000936:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000938:	1d3b      	adds	r3, r7, #4
 800093a:	4619      	mov	r1, r3
 800093c:	4805      	ldr	r0, [pc, #20]	@ (8000954 <MX_TIM6_Init+0x64>)
 800093e:	f004 fb5d 	bl	8004ffc <HAL_TIMEx_MasterConfigSynchronization>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000948:	f000 f90c 	bl	8000b64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800094c:	bf00      	nop
 800094e:	3710      	adds	r7, #16
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	20000178 	.word	0x20000178
 8000958:	40001000 	.word	0x40001000

0800095c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b084      	sub	sp, #16
 8000960:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000962:	1d3b      	adds	r3, r7, #4
 8000964:	2200      	movs	r2, #0
 8000966:	601a      	str	r2, [r3, #0]
 8000968:	605a      	str	r2, [r3, #4]
 800096a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800096c:	4b14      	ldr	r3, [pc, #80]	@ (80009c0 <MX_TIM7_Init+0x64>)
 800096e:	4a15      	ldr	r2, [pc, #84]	@ (80009c4 <MX_TIM7_Init+0x68>)
 8000970:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 19;
 8000972:	4b13      	ldr	r3, [pc, #76]	@ (80009c0 <MX_TIM7_Init+0x64>)
 8000974:	2213      	movs	r2, #19
 8000976:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000978:	4b11      	ldr	r3, [pc, #68]	@ (80009c0 <MX_TIM7_Init+0x64>)
 800097a:	2200      	movs	r2, #0
 800097c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 7999;
 800097e:	4b10      	ldr	r3, [pc, #64]	@ (80009c0 <MX_TIM7_Init+0x64>)
 8000980:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000984:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000986:	4b0e      	ldr	r3, [pc, #56]	@ (80009c0 <MX_TIM7_Init+0x64>)
 8000988:	2200      	movs	r2, #0
 800098a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800098c:	480c      	ldr	r0, [pc, #48]	@ (80009c0 <MX_TIM7_Init+0x64>)
 800098e:	f004 f8d3 	bl	8004b38 <HAL_TIM_Base_Init>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000998:	f000 f8e4 	bl	8000b64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800099c:	2300      	movs	r3, #0
 800099e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009a0:	2300      	movs	r3, #0
 80009a2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80009a4:	1d3b      	adds	r3, r7, #4
 80009a6:	4619      	mov	r1, r3
 80009a8:	4805      	ldr	r0, [pc, #20]	@ (80009c0 <MX_TIM7_Init+0x64>)
 80009aa:	f004 fb27 	bl	8004ffc <HAL_TIMEx_MasterConfigSynchronization>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80009b4:	f000 f8d6 	bl	8000b64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80009b8:	bf00      	nop
 80009ba:	3710      	adds	r7, #16
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	200001c4 	.word	0x200001c4
 80009c4:	40001400 	.word	0x40001400

080009c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009cc:	4b14      	ldr	r3, [pc, #80]	@ (8000a20 <MX_USART2_UART_Init+0x58>)
 80009ce:	4a15      	ldr	r2, [pc, #84]	@ (8000a24 <MX_USART2_UART_Init+0x5c>)
 80009d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80009d2:	4b13      	ldr	r3, [pc, #76]	@ (8000a20 <MX_USART2_UART_Init+0x58>)
 80009d4:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 80009d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009da:	4b11      	ldr	r3, [pc, #68]	@ (8000a20 <MX_USART2_UART_Init+0x58>)
 80009dc:	2200      	movs	r2, #0
 80009de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000a20 <MX_USART2_UART_Init+0x58>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000a20 <MX_USART2_UART_Init+0x58>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000a20 <MX_USART2_UART_Init+0x58>)
 80009ee:	220c      	movs	r2, #12
 80009f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009f2:	4b0b      	ldr	r3, [pc, #44]	@ (8000a20 <MX_USART2_UART_Init+0x58>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009f8:	4b09      	ldr	r3, [pc, #36]	@ (8000a20 <MX_USART2_UART_Init+0x58>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009fe:	4b08      	ldr	r3, [pc, #32]	@ (8000a20 <MX_USART2_UART_Init+0x58>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a04:	4b06      	ldr	r3, [pc, #24]	@ (8000a20 <MX_USART2_UART_Init+0x58>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a0a:	4805      	ldr	r0, [pc, #20]	@ (8000a20 <MX_USART2_UART_Init+0x58>)
 8000a0c:	f004 fb82 	bl	8005114 <HAL_UART_Init>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000a16:	f000 f8a5 	bl	8000b64 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	20000210 	.word	0x20000210
 8000a24:	40004400 	.word	0x40004400

08000a28 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a2e:	4b0c      	ldr	r3, [pc, #48]	@ (8000a60 <MX_DMA_Init+0x38>)
 8000a30:	695b      	ldr	r3, [r3, #20]
 8000a32:	4a0b      	ldr	r2, [pc, #44]	@ (8000a60 <MX_DMA_Init+0x38>)
 8000a34:	f043 0301 	orr.w	r3, r3, #1
 8000a38:	6153      	str	r3, [r2, #20]
 8000a3a:	4b09      	ldr	r3, [pc, #36]	@ (8000a60 <MX_DMA_Init+0x38>)
 8000a3c:	695b      	ldr	r3, [r3, #20]
 8000a3e:	f003 0301 	and.w	r3, r3, #1
 8000a42:	607b      	str	r3, [r7, #4]
 8000a44:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000a46:	2200      	movs	r2, #0
 8000a48:	2100      	movs	r1, #0
 8000a4a:	200b      	movs	r0, #11
 8000a4c:	f002 faa7 	bl	8002f9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000a50:	200b      	movs	r0, #11
 8000a52:	f002 fac0 	bl	8002fd6 <HAL_NVIC_EnableIRQ>

}
 8000a56:	bf00      	nop
 8000a58:	3708      	adds	r7, #8
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	40021000 	.word	0x40021000

08000a64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b088      	sub	sp, #32
 8000a68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a6a:	f107 030c 	add.w	r3, r7, #12
 8000a6e:	2200      	movs	r2, #0
 8000a70:	601a      	str	r2, [r3, #0]
 8000a72:	605a      	str	r2, [r3, #4]
 8000a74:	609a      	str	r2, [r3, #8]
 8000a76:	60da      	str	r2, [r3, #12]
 8000a78:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a7a:	4b2e      	ldr	r3, [pc, #184]	@ (8000b34 <MX_GPIO_Init+0xd0>)
 8000a7c:	695b      	ldr	r3, [r3, #20]
 8000a7e:	4a2d      	ldr	r2, [pc, #180]	@ (8000b34 <MX_GPIO_Init+0xd0>)
 8000a80:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000a84:	6153      	str	r3, [r2, #20]
 8000a86:	4b2b      	ldr	r3, [pc, #172]	@ (8000b34 <MX_GPIO_Init+0xd0>)
 8000a88:	695b      	ldr	r3, [r3, #20]
 8000a8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000a8e:	60bb      	str	r3, [r7, #8]
 8000a90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a92:	4b28      	ldr	r3, [pc, #160]	@ (8000b34 <MX_GPIO_Init+0xd0>)
 8000a94:	695b      	ldr	r3, [r3, #20]
 8000a96:	4a27      	ldr	r2, [pc, #156]	@ (8000b34 <MX_GPIO_Init+0xd0>)
 8000a98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a9c:	6153      	str	r3, [r2, #20]
 8000a9e:	4b25      	ldr	r3, [pc, #148]	@ (8000b34 <MX_GPIO_Init+0xd0>)
 8000aa0:	695b      	ldr	r3, [r3, #20]
 8000aa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000aa6:	607b      	str	r3, [r7, #4]
 8000aa8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aaa:	4b22      	ldr	r3, [pc, #136]	@ (8000b34 <MX_GPIO_Init+0xd0>)
 8000aac:	695b      	ldr	r3, [r3, #20]
 8000aae:	4a21      	ldr	r2, [pc, #132]	@ (8000b34 <MX_GPIO_Init+0xd0>)
 8000ab0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ab4:	6153      	str	r3, [r2, #20]
 8000ab6:	4b1f      	ldr	r3, [pc, #124]	@ (8000b34 <MX_GPIO_Init+0xd0>)
 8000ab8:	695b      	ldr	r3, [r3, #20]
 8000aba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000abe:	603b      	str	r3, [r7, #0]
 8000ac0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, state_LED_Pin|emergency_LED_Pin, GPIO_PIN_RESET);
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	21c0      	movs	r1, #192	@ 0xc0
 8000ac6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000aca:	f002 fdbf 	bl	800364c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, jetson_power_Pin|relay_Pin, GPIO_PIN_RESET);
 8000ace:	2200      	movs	r2, #0
 8000ad0:	2150      	movs	r1, #80	@ 0x50
 8000ad2:	4819      	ldr	r0, [pc, #100]	@ (8000b38 <MX_GPIO_Init+0xd4>)
 8000ad4:	f002 fdba 	bl	800364c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : emergency_switch_Pin */
  GPIO_InitStruct.Pin = emergency_switch_Pin;
 8000ad8:	2320      	movs	r3, #32
 8000ada:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000adc:	2300      	movs	r3, #0
 8000ade:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(emergency_switch_GPIO_Port, &GPIO_InitStruct);
 8000ae4:	f107 030c 	add.w	r3, r7, #12
 8000ae8:	4619      	mov	r1, r3
 8000aea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000aee:	f002 fc23 	bl	8003338 <HAL_GPIO_Init>

  /*Configure GPIO pins : state_LED_Pin emergency_LED_Pin */
  GPIO_InitStruct.Pin = state_LED_Pin|emergency_LED_Pin;
 8000af2:	23c0      	movs	r3, #192	@ 0xc0
 8000af4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af6:	2301      	movs	r3, #1
 8000af8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afa:	2300      	movs	r3, #0
 8000afc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afe:	2300      	movs	r3, #0
 8000b00:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b02:	f107 030c 	add.w	r3, r7, #12
 8000b06:	4619      	mov	r1, r3
 8000b08:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b0c:	f002 fc14 	bl	8003338 <HAL_GPIO_Init>

  /*Configure GPIO pins : jetson_power_Pin relay_Pin */
  GPIO_InitStruct.Pin = jetson_power_Pin|relay_Pin;
 8000b10:	2350      	movs	r3, #80	@ 0x50
 8000b12:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b14:	2301      	movs	r3, #1
 8000b16:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b20:	f107 030c 	add.w	r3, r7, #12
 8000b24:	4619      	mov	r1, r3
 8000b26:	4804      	ldr	r0, [pc, #16]	@ (8000b38 <MX_GPIO_Init+0xd4>)
 8000b28:	f002 fc06 	bl	8003338 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b2c:	bf00      	nop
 8000b2e:	3720      	adds	r7, #32
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	40021000 	.word	0x40021000
 8000b38:	48000400 	.word	0x48000400

08000b3c <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b084      	sub	sp, #16
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	60f8      	str	r0, [r7, #12]
 8000b44:	60b9      	str	r1, [r7, #8]
 8000b46:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2,(uint8_t *)ptr,len,10);
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	b29a      	uxth	r2, r3
 8000b4c:	230a      	movs	r3, #10
 8000b4e:	68b9      	ldr	r1, [r7, #8]
 8000b50:	4803      	ldr	r0, [pc, #12]	@ (8000b60 <_write+0x24>)
 8000b52:	f004 fb2d 	bl	80051b0 <HAL_UART_Transmit>
  return len;
 8000b56:	687b      	ldr	r3, [r7, #4]
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	3710      	adds	r7, #16
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	20000210 	.word	0x20000210

08000b64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b68:	b672      	cpsid	i
}
 8000b6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b6c:	bf00      	nop
 8000b6e:	e7fd      	b.n	8000b6c <Error_Handler+0x8>

08000b70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b76:	4b0f      	ldr	r3, [pc, #60]	@ (8000bb4 <HAL_MspInit+0x44>)
 8000b78:	699b      	ldr	r3, [r3, #24]
 8000b7a:	4a0e      	ldr	r2, [pc, #56]	@ (8000bb4 <HAL_MspInit+0x44>)
 8000b7c:	f043 0301 	orr.w	r3, r3, #1
 8000b80:	6193      	str	r3, [r2, #24]
 8000b82:	4b0c      	ldr	r3, [pc, #48]	@ (8000bb4 <HAL_MspInit+0x44>)
 8000b84:	699b      	ldr	r3, [r3, #24]
 8000b86:	f003 0301 	and.w	r3, r3, #1
 8000b8a:	607b      	str	r3, [r7, #4]
 8000b8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b8e:	4b09      	ldr	r3, [pc, #36]	@ (8000bb4 <HAL_MspInit+0x44>)
 8000b90:	69db      	ldr	r3, [r3, #28]
 8000b92:	4a08      	ldr	r2, [pc, #32]	@ (8000bb4 <HAL_MspInit+0x44>)
 8000b94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b98:	61d3      	str	r3, [r2, #28]
 8000b9a:	4b06      	ldr	r3, [pc, #24]	@ (8000bb4 <HAL_MspInit+0x44>)
 8000b9c:	69db      	ldr	r3, [r3, #28]
 8000b9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ba2:	603b      	str	r3, [r7, #0]
 8000ba4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	370c      	adds	r7, #12
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	40021000 	.word	0x40021000

08000bb8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b08a      	sub	sp, #40	@ 0x28
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc0:	f107 0314 	add.w	r3, r7, #20
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	601a      	str	r2, [r3, #0]
 8000bc8:	605a      	str	r2, [r3, #4]
 8000bca:	609a      	str	r2, [r3, #8]
 8000bcc:	60da      	str	r2, [r3, #12]
 8000bce:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000bd8:	d14b      	bne.n	8000c72 <HAL_ADC_MspInit+0xba>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000bda:	4b28      	ldr	r3, [pc, #160]	@ (8000c7c <HAL_ADC_MspInit+0xc4>)
 8000bdc:	695b      	ldr	r3, [r3, #20]
 8000bde:	4a27      	ldr	r2, [pc, #156]	@ (8000c7c <HAL_ADC_MspInit+0xc4>)
 8000be0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000be4:	6153      	str	r3, [r2, #20]
 8000be6:	4b25      	ldr	r3, [pc, #148]	@ (8000c7c <HAL_ADC_MspInit+0xc4>)
 8000be8:	695b      	ldr	r3, [r3, #20]
 8000bea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bee:	613b      	str	r3, [r7, #16]
 8000bf0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf2:	4b22      	ldr	r3, [pc, #136]	@ (8000c7c <HAL_ADC_MspInit+0xc4>)
 8000bf4:	695b      	ldr	r3, [r3, #20]
 8000bf6:	4a21      	ldr	r2, [pc, #132]	@ (8000c7c <HAL_ADC_MspInit+0xc4>)
 8000bf8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000bfc:	6153      	str	r3, [r2, #20]
 8000bfe:	4b1f      	ldr	r3, [pc, #124]	@ (8000c7c <HAL_ADC_MspInit+0xc4>)
 8000c00:	695b      	ldr	r3, [r3, #20]
 8000c02:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000c06:	60fb      	str	r3, [r7, #12]
 8000c08:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN11
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = i_bat_Pin|v_bat_Pin;
 8000c0a:	2303      	movs	r3, #3
 8000c0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c0e:	2303      	movs	r3, #3
 8000c10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c12:	2300      	movs	r3, #0
 8000c14:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c16:	f107 0314 	add.w	r3, r7, #20
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4818      	ldr	r0, [pc, #96]	@ (8000c80 <HAL_ADC_MspInit+0xc8>)
 8000c1e:	f002 fb8b 	bl	8003338 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000c22:	4b18      	ldr	r3, [pc, #96]	@ (8000c84 <HAL_ADC_MspInit+0xcc>)
 8000c24:	4a18      	ldr	r2, [pc, #96]	@ (8000c88 <HAL_ADC_MspInit+0xd0>)
 8000c26:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c28:	4b16      	ldr	r3, [pc, #88]	@ (8000c84 <HAL_ADC_MspInit+0xcc>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c2e:	4b15      	ldr	r3, [pc, #84]	@ (8000c84 <HAL_ADC_MspInit+0xcc>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000c34:	4b13      	ldr	r3, [pc, #76]	@ (8000c84 <HAL_ADC_MspInit+0xcc>)
 8000c36:	2280      	movs	r2, #128	@ 0x80
 8000c38:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c3a:	4b12      	ldr	r3, [pc, #72]	@ (8000c84 <HAL_ADC_MspInit+0xcc>)
 8000c3c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c40:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c42:	4b10      	ldr	r3, [pc, #64]	@ (8000c84 <HAL_ADC_MspInit+0xcc>)
 8000c44:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c48:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000c4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c84 <HAL_ADC_MspInit+0xcc>)
 8000c4c:	2220      	movs	r2, #32
 8000c4e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000c50:	4b0c      	ldr	r3, [pc, #48]	@ (8000c84 <HAL_ADC_MspInit+0xcc>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000c56:	480b      	ldr	r0, [pc, #44]	@ (8000c84 <HAL_ADC_MspInit+0xcc>)
 8000c58:	f002 f9d7 	bl	800300a <HAL_DMA_Init>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <HAL_ADC_MspInit+0xae>
    {
      Error_Handler();
 8000c62:	f7ff ff7f 	bl	8000b64 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	4a06      	ldr	r2, [pc, #24]	@ (8000c84 <HAL_ADC_MspInit+0xcc>)
 8000c6a:	639a      	str	r2, [r3, #56]	@ 0x38
 8000c6c:	4a05      	ldr	r2, [pc, #20]	@ (8000c84 <HAL_ADC_MspInit+0xcc>)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000c72:	bf00      	nop
 8000c74:	3728      	adds	r7, #40	@ 0x28
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	40021000 	.word	0x40021000
 8000c80:	48000400 	.word	0x48000400
 8000c84:	2000010c 	.word	0x2000010c
 8000c88:	40020008 	.word	0x40020008

08000c8c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b08a      	sub	sp, #40	@ 0x28
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c94:	f107 0314 	add.w	r3, r7, #20
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
 8000c9c:	605a      	str	r2, [r3, #4]
 8000c9e:	609a      	str	r2, [r3, #8]
 8000ca0:	60da      	str	r2, [r3, #12]
 8000ca2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a1c      	ldr	r2, [pc, #112]	@ (8000d1c <HAL_CAN_MspInit+0x90>)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d131      	bne.n	8000d12 <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000cae:	4b1c      	ldr	r3, [pc, #112]	@ (8000d20 <HAL_CAN_MspInit+0x94>)
 8000cb0:	69db      	ldr	r3, [r3, #28]
 8000cb2:	4a1b      	ldr	r2, [pc, #108]	@ (8000d20 <HAL_CAN_MspInit+0x94>)
 8000cb4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000cb8:	61d3      	str	r3, [r2, #28]
 8000cba:	4b19      	ldr	r3, [pc, #100]	@ (8000d20 <HAL_CAN_MspInit+0x94>)
 8000cbc:	69db      	ldr	r3, [r3, #28]
 8000cbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000cc2:	613b      	str	r3, [r7, #16]
 8000cc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc6:	4b16      	ldr	r3, [pc, #88]	@ (8000d20 <HAL_CAN_MspInit+0x94>)
 8000cc8:	695b      	ldr	r3, [r3, #20]
 8000cca:	4a15      	ldr	r2, [pc, #84]	@ (8000d20 <HAL_CAN_MspInit+0x94>)
 8000ccc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cd0:	6153      	str	r3, [r2, #20]
 8000cd2:	4b13      	ldr	r3, [pc, #76]	@ (8000d20 <HAL_CAN_MspInit+0x94>)
 8000cd4:	695b      	ldr	r3, [r3, #20]
 8000cd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cda:	60fb      	str	r3, [r7, #12]
 8000cdc:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000cde:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000ce2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cec:	2303      	movs	r3, #3
 8000cee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8000cf0:	2309      	movs	r3, #9
 8000cf2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf4:	f107 0314 	add.w	r3, r7, #20
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cfe:	f002 fb1b 	bl	8003338 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CAN_RX0_IRQn, 0, 0);
 8000d02:	2200      	movs	r2, #0
 8000d04:	2100      	movs	r1, #0
 8000d06:	2014      	movs	r0, #20
 8000d08:	f002 f949 	bl	8002f9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX0_IRQn);
 8000d0c:	2014      	movs	r0, #20
 8000d0e:	f002 f962 	bl	8002fd6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN_MspInit 1 */

  }

}
 8000d12:	bf00      	nop
 8000d14:	3728      	adds	r7, #40	@ 0x28
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	40006400 	.word	0x40006400
 8000d20:	40021000 	.word	0x40021000

08000d24 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b084      	sub	sp, #16
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a1a      	ldr	r2, [pc, #104]	@ (8000d9c <HAL_TIM_Base_MspInit+0x78>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d114      	bne.n	8000d60 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000d36:	4b1a      	ldr	r3, [pc, #104]	@ (8000da0 <HAL_TIM_Base_MspInit+0x7c>)
 8000d38:	69db      	ldr	r3, [r3, #28]
 8000d3a:	4a19      	ldr	r2, [pc, #100]	@ (8000da0 <HAL_TIM_Base_MspInit+0x7c>)
 8000d3c:	f043 0310 	orr.w	r3, r3, #16
 8000d40:	61d3      	str	r3, [r2, #28]
 8000d42:	4b17      	ldr	r3, [pc, #92]	@ (8000da0 <HAL_TIM_Base_MspInit+0x7c>)
 8000d44:	69db      	ldr	r3, [r3, #28]
 8000d46:	f003 0310 	and.w	r3, r3, #16
 8000d4a:	60fb      	str	r3, [r7, #12]
 8000d4c:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, 0, 0);
 8000d4e:	2200      	movs	r2, #0
 8000d50:	2100      	movs	r1, #0
 8000d52:	2036      	movs	r0, #54	@ 0x36
 8000d54:	f002 f923 	bl	8002f9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC1_IRQn);
 8000d58:	2036      	movs	r0, #54	@ 0x36
 8000d5a:	f002 f93c 	bl	8002fd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8000d5e:	e018      	b.n	8000d92 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM7)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a0f      	ldr	r2, [pc, #60]	@ (8000da4 <HAL_TIM_Base_MspInit+0x80>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d113      	bne.n	8000d92 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000d6a:	4b0d      	ldr	r3, [pc, #52]	@ (8000da0 <HAL_TIM_Base_MspInit+0x7c>)
 8000d6c:	69db      	ldr	r3, [r3, #28]
 8000d6e:	4a0c      	ldr	r2, [pc, #48]	@ (8000da0 <HAL_TIM_Base_MspInit+0x7c>)
 8000d70:	f043 0320 	orr.w	r3, r3, #32
 8000d74:	61d3      	str	r3, [r2, #28]
 8000d76:	4b0a      	ldr	r3, [pc, #40]	@ (8000da0 <HAL_TIM_Base_MspInit+0x7c>)
 8000d78:	69db      	ldr	r3, [r3, #28]
 8000d7a:	f003 0320 	and.w	r3, r3, #32
 8000d7e:	60bb      	str	r3, [r7, #8]
 8000d80:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_DAC2_IRQn, 0, 0);
 8000d82:	2200      	movs	r2, #0
 8000d84:	2100      	movs	r1, #0
 8000d86:	2037      	movs	r0, #55	@ 0x37
 8000d88:	f002 f909 	bl	8002f9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_DAC2_IRQn);
 8000d8c:	2037      	movs	r0, #55	@ 0x37
 8000d8e:	f002 f922 	bl	8002fd6 <HAL_NVIC_EnableIRQ>
}
 8000d92:	bf00      	nop
 8000d94:	3710      	adds	r7, #16
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	40001000 	.word	0x40001000
 8000da0:	40021000 	.word	0x40021000
 8000da4:	40001400 	.word	0x40001400

08000da8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b08a      	sub	sp, #40	@ 0x28
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db0:	f107 0314 	add.w	r3, r7, #20
 8000db4:	2200      	movs	r2, #0
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	605a      	str	r2, [r3, #4]
 8000dba:	609a      	str	r2, [r3, #8]
 8000dbc:	60da      	str	r2, [r3, #12]
 8000dbe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a18      	ldr	r2, [pc, #96]	@ (8000e28 <HAL_UART_MspInit+0x80>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d129      	bne.n	8000e1e <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dca:	4b18      	ldr	r3, [pc, #96]	@ (8000e2c <HAL_UART_MspInit+0x84>)
 8000dcc:	69db      	ldr	r3, [r3, #28]
 8000dce:	4a17      	ldr	r2, [pc, #92]	@ (8000e2c <HAL_UART_MspInit+0x84>)
 8000dd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000dd4:	61d3      	str	r3, [r2, #28]
 8000dd6:	4b15      	ldr	r3, [pc, #84]	@ (8000e2c <HAL_UART_MspInit+0x84>)
 8000dd8:	69db      	ldr	r3, [r3, #28]
 8000dda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dde:	613b      	str	r3, [r7, #16]
 8000de0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de2:	4b12      	ldr	r3, [pc, #72]	@ (8000e2c <HAL_UART_MspInit+0x84>)
 8000de4:	695b      	ldr	r3, [r3, #20]
 8000de6:	4a11      	ldr	r2, [pc, #68]	@ (8000e2c <HAL_UART_MspInit+0x84>)
 8000de8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000dec:	6153      	str	r3, [r2, #20]
 8000dee:	4b0f      	ldr	r3, [pc, #60]	@ (8000e2c <HAL_UART_MspInit+0x84>)
 8000df0:	695b      	ldr	r3, [r3, #20]
 8000df2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000dfa:	f248 0304 	movw	r3, #32772	@ 0x8004
 8000dfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e00:	2302      	movs	r3, #2
 8000e02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e04:	2300      	movs	r3, #0
 8000e06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e08:	2303      	movs	r3, #3
 8000e0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e0c:	2307      	movs	r3, #7
 8000e0e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e10:	f107 0314 	add.w	r3, r7, #20
 8000e14:	4619      	mov	r1, r3
 8000e16:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e1a:	f002 fa8d 	bl	8003338 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000e1e:	bf00      	nop
 8000e20:	3728      	adds	r7, #40	@ 0x28
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	40004400 	.word	0x40004400
 8000e2c:	40021000 	.word	0x40021000

08000e30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e34:	bf00      	nop
 8000e36:	e7fd      	b.n	8000e34 <NMI_Handler+0x4>

08000e38 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e3c:	bf00      	nop
 8000e3e:	e7fd      	b.n	8000e3c <HardFault_Handler+0x4>

08000e40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e44:	bf00      	nop
 8000e46:	e7fd      	b.n	8000e44 <MemManage_Handler+0x4>

08000e48 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e4c:	bf00      	nop
 8000e4e:	e7fd      	b.n	8000e4c <BusFault_Handler+0x4>

08000e50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e54:	bf00      	nop
 8000e56:	e7fd      	b.n	8000e54 <UsageFault_Handler+0x4>

08000e58 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e5c:	bf00      	nop
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr

08000e66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e66:	b480      	push	{r7}
 8000e68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e6a:	bf00      	nop
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr

08000e74 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e78:	bf00      	nop
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr

08000e82 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e82:	b580      	push	{r7, lr}
 8000e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e86:	f000 f935 	bl	80010f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e8a:	bf00      	nop
 8000e8c:	bd80      	pop	{r7, pc}
	...

08000e90 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000e94:	4802      	ldr	r0, [pc, #8]	@ (8000ea0 <DMA1_Channel1_IRQHandler+0x10>)
 8000e96:	f002 f95e 	bl	8003156 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000e9a:	bf00      	nop
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	2000010c 	.word	0x2000010c

08000ea4 <CAN_RX0_IRQHandler>:

/**
  * @brief This function handles CAN RX0 interrupt.
  */
void CAN_RX0_IRQHandler(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX0_IRQn 0 */

  /* USER CODE END CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000ea8:	4802      	ldr	r0, [pc, #8]	@ (8000eb4 <CAN_RX0_IRQHandler+0x10>)
 8000eaa:	f001 fd6d 	bl	8002988 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX0_IRQn 1 */

  /* USER CODE END CAN_RX0_IRQn 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	20000150 	.word	0x20000150

08000eb8 <TIM6_DAC1_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC1 underrun error interrupts.
  */
void TIM6_DAC1_IRQHandler(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC1_IRQn 0 */

  /* USER CODE END TIM6_DAC1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ebc:	4802      	ldr	r0, [pc, #8]	@ (8000ec8 <TIM6_DAC1_IRQHandler+0x10>)
 8000ebe:	f003 feef 	bl	8004ca0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC1_IRQn 1 */

  /* USER CODE END TIM6_DAC1_IRQn 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	20000178 	.word	0x20000178

08000ecc <TIM7_DAC2_IRQHandler>:

/**
  * @brief This function handles TIM7 global and DAC2 underrun error interrupts.
  */
void TIM7_DAC2_IRQHandler(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_DAC2_IRQn 0 */

  /* USER CODE END TIM7_DAC2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000ed0:	4802      	ldr	r0, [pc, #8]	@ (8000edc <TIM7_DAC2_IRQHandler+0x10>)
 8000ed2:	f003 fee5 	bl	8004ca0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_DAC2_IRQn 1 */

  /* USER CODE END TIM7_DAC2_IRQn 1 */
}
 8000ed6:	bf00      	nop
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	200001c4 	.word	0x200001c4

08000ee0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b086      	sub	sp, #24
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	60f8      	str	r0, [r7, #12]
 8000ee8:	60b9      	str	r1, [r7, #8]
 8000eea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eec:	2300      	movs	r3, #0
 8000eee:	617b      	str	r3, [r7, #20]
 8000ef0:	e00a      	b.n	8000f08 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ef2:	f3af 8000 	nop.w
 8000ef6:	4601      	mov	r1, r0
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	1c5a      	adds	r2, r3, #1
 8000efc:	60ba      	str	r2, [r7, #8]
 8000efe:	b2ca      	uxtb	r2, r1
 8000f00:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	3301      	adds	r3, #1
 8000f06:	617b      	str	r3, [r7, #20]
 8000f08:	697a      	ldr	r2, [r7, #20]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	dbf0      	blt.n	8000ef2 <_read+0x12>
  }

  return len;
 8000f10:	687b      	ldr	r3, [r7, #4]
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3718      	adds	r7, #24
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}

08000f1a <_close>:
  }
  return len;
}

int _close(int file)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	b083      	sub	sp, #12
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f22:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	370c      	adds	r7, #12
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr

08000f32 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f32:	b480      	push	{r7}
 8000f34:	b083      	sub	sp, #12
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	6078      	str	r0, [r7, #4]
 8000f3a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f42:	605a      	str	r2, [r3, #4]
  return 0;
 8000f44:	2300      	movs	r3, #0
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	370c      	adds	r7, #12
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr

08000f52 <_isatty>:

int _isatty(int file)
{
 8000f52:	b480      	push	{r7}
 8000f54:	b083      	sub	sp, #12
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f5a:	2301      	movs	r3, #1
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	370c      	adds	r7, #12
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr

08000f68 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b085      	sub	sp, #20
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	60f8      	str	r0, [r7, #12]
 8000f70:	60b9      	str	r1, [r7, #8]
 8000f72:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f74:	2300      	movs	r3, #0
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3714      	adds	r7, #20
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
	...

08000f84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b086      	sub	sp, #24
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f8c:	4a14      	ldr	r2, [pc, #80]	@ (8000fe0 <_sbrk+0x5c>)
 8000f8e:	4b15      	ldr	r3, [pc, #84]	@ (8000fe4 <_sbrk+0x60>)
 8000f90:	1ad3      	subs	r3, r2, r3
 8000f92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f98:	4b13      	ldr	r3, [pc, #76]	@ (8000fe8 <_sbrk+0x64>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d102      	bne.n	8000fa6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fa0:	4b11      	ldr	r3, [pc, #68]	@ (8000fe8 <_sbrk+0x64>)
 8000fa2:	4a12      	ldr	r2, [pc, #72]	@ (8000fec <_sbrk+0x68>)
 8000fa4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fa6:	4b10      	ldr	r3, [pc, #64]	@ (8000fe8 <_sbrk+0x64>)
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4413      	add	r3, r2
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	d207      	bcs.n	8000fc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fb4:	f004 ffda 	bl	8005f6c <__errno>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	220c      	movs	r2, #12
 8000fbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fbe:	f04f 33ff 	mov.w	r3, #4294967295
 8000fc2:	e009      	b.n	8000fd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fc4:	4b08      	ldr	r3, [pc, #32]	@ (8000fe8 <_sbrk+0x64>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fca:	4b07      	ldr	r3, [pc, #28]	@ (8000fe8 <_sbrk+0x64>)
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4413      	add	r3, r2
 8000fd2:	4a05      	ldr	r2, [pc, #20]	@ (8000fe8 <_sbrk+0x64>)
 8000fd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fd6:	68fb      	ldr	r3, [r7, #12]
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3718      	adds	r7, #24
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	20003000 	.word	0x20003000
 8000fe4:	00000400 	.word	0x00000400
 8000fe8:	200002a4 	.word	0x200002a4
 8000fec:	200003f8 	.word	0x200003f8

08000ff0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ff4:	4b06      	ldr	r3, [pc, #24]	@ (8001010 <SystemInit+0x20>)
 8000ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ffa:	4a05      	ldr	r2, [pc, #20]	@ (8001010 <SystemInit+0x20>)
 8000ffc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001000:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001004:	bf00      	nop
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	e000ed00 	.word	0xe000ed00

08001014 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001014:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800104c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001018:	f7ff ffea 	bl	8000ff0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800101c:	480c      	ldr	r0, [pc, #48]	@ (8001050 <LoopForever+0x6>)
  ldr r1, =_edata
 800101e:	490d      	ldr	r1, [pc, #52]	@ (8001054 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001020:	4a0d      	ldr	r2, [pc, #52]	@ (8001058 <LoopForever+0xe>)
  movs r3, #0
 8001022:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001024:	e002      	b.n	800102c <LoopCopyDataInit>

08001026 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001026:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001028:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800102a:	3304      	adds	r3, #4

0800102c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800102c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800102e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001030:	d3f9      	bcc.n	8001026 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001032:	4a0a      	ldr	r2, [pc, #40]	@ (800105c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001034:	4c0a      	ldr	r4, [pc, #40]	@ (8001060 <LoopForever+0x16>)
  movs r3, #0
 8001036:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001038:	e001      	b.n	800103e <LoopFillZerobss>

0800103a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800103a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800103c:	3204      	adds	r2, #4

0800103e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800103e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001040:	d3fb      	bcc.n	800103a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001042:	f004 ff99 	bl	8005f78 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001046:	f7ff fa33 	bl	80004b0 <main>

0800104a <LoopForever>:

LoopForever:
    b LoopForever
 800104a:	e7fe      	b.n	800104a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800104c:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001050:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001054:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001058:	080064dc 	.word	0x080064dc
  ldr r2, =_sbss
 800105c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001060:	200003f8 	.word	0x200003f8

08001064 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001064:	e7fe      	b.n	8001064 <ADC1_2_IRQHandler>
	...

08001068 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800106c:	4b08      	ldr	r3, [pc, #32]	@ (8001090 <HAL_Init+0x28>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a07      	ldr	r2, [pc, #28]	@ (8001090 <HAL_Init+0x28>)
 8001072:	f043 0310 	orr.w	r3, r3, #16
 8001076:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001078:	2003      	movs	r0, #3
 800107a:	f001 ff85 	bl	8002f88 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800107e:	2000      	movs	r0, #0
 8001080:	f000 f808 	bl	8001094 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001084:	f7ff fd74 	bl	8000b70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001088:	2300      	movs	r3, #0
}
 800108a:	4618      	mov	r0, r3
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	40022000 	.word	0x40022000

08001094 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800109c:	4b12      	ldr	r3, [pc, #72]	@ (80010e8 <HAL_InitTick+0x54>)
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	4b12      	ldr	r3, [pc, #72]	@ (80010ec <HAL_InitTick+0x58>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	4619      	mov	r1, r3
 80010a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80010ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80010b2:	4618      	mov	r0, r3
 80010b4:	f001 ff9d 	bl	8002ff2 <HAL_SYSTICK_Config>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010be:	2301      	movs	r3, #1
 80010c0:	e00e      	b.n	80010e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2b0f      	cmp	r3, #15
 80010c6:	d80a      	bhi.n	80010de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010c8:	2200      	movs	r2, #0
 80010ca:	6879      	ldr	r1, [r7, #4]
 80010cc:	f04f 30ff 	mov.w	r0, #4294967295
 80010d0:	f001 ff65 	bl	8002f9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010d4:	4a06      	ldr	r2, [pc, #24]	@ (80010f0 <HAL_InitTick+0x5c>)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80010da:	2300      	movs	r3, #0
 80010dc:	e000      	b.n	80010e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010de:	2301      	movs	r3, #1
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3708      	adds	r7, #8
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	20000000 	.word	0x20000000
 80010ec:	20000008 	.word	0x20000008
 80010f0:	20000004 	.word	0x20000004

080010f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010f8:	4b06      	ldr	r3, [pc, #24]	@ (8001114 <HAL_IncTick+0x20>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	461a      	mov	r2, r3
 80010fe:	4b06      	ldr	r3, [pc, #24]	@ (8001118 <HAL_IncTick+0x24>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4413      	add	r3, r2
 8001104:	4a04      	ldr	r2, [pc, #16]	@ (8001118 <HAL_IncTick+0x24>)
 8001106:	6013      	str	r3, [r2, #0]
}
 8001108:	bf00      	nop
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	20000008 	.word	0x20000008
 8001118:	200002a8 	.word	0x200002a8

0800111c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  return uwTick;  
 8001120:	4b03      	ldr	r3, [pc, #12]	@ (8001130 <HAL_GetTick+0x14>)
 8001122:	681b      	ldr	r3, [r3, #0]
}
 8001124:	4618      	mov	r0, r3
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	200002a8 	.word	0x200002a8

08001134 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800113c:	f7ff ffee 	bl	800111c <HAL_GetTick>
 8001140:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800114c:	d005      	beq.n	800115a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800114e:	4b0a      	ldr	r3, [pc, #40]	@ (8001178 <HAL_Delay+0x44>)
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	461a      	mov	r2, r3
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	4413      	add	r3, r2
 8001158:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800115a:	bf00      	nop
 800115c:	f7ff ffde 	bl	800111c <HAL_GetTick>
 8001160:	4602      	mov	r2, r0
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	1ad3      	subs	r3, r2, r3
 8001166:	68fa      	ldr	r2, [r7, #12]
 8001168:	429a      	cmp	r2, r3
 800116a:	d8f7      	bhi.n	800115c <HAL_Delay+0x28>
  {
  }
}
 800116c:	bf00      	nop
 800116e:	bf00      	nop
 8001170:	3710      	adds	r7, #16
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	20000008 	.word	0x20000008

0800117c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001184:	bf00      	nop
 8001186:	370c      	adds	r7, #12
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr

08001190 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001198:	bf00      	nop
 800119a:	370c      	adds	r7, #12
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr

080011a4 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80011ac:	bf00      	nop
 80011ae:	370c      	adds	r7, #12
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr

080011b8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b09a      	sub	sp, #104	@ 0x68
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011c0:	2300      	movs	r3, #0
 80011c2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80011c6:	2300      	movs	r3, #0
 80011c8:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 80011ca:	2300      	movs	r3, #0
 80011cc:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d101      	bne.n	80011d8 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80011d4:	2301      	movs	r3, #1
 80011d6:	e172      	b.n	80014be <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	691b      	ldr	r3, [r3, #16]
 80011dc:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011e2:	f003 0310 	and.w	r3, r3, #16
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d176      	bne.n	80012d8 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d152      	bne.n	8001298 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2200      	movs	r2, #0
 80011f6:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2200      	movs	r2, #0
 80011fc:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2200      	movs	r2, #0
 8001202:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2200      	movs	r2, #0
 8001208:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800120c:	6878      	ldr	r0, [r7, #4]
 800120e:	f7ff fcd3 	bl	8000bb8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	689b      	ldr	r3, [r3, #8]
 8001218:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800121c:	2b00      	cmp	r3, #0
 800121e:	d13b      	bne.n	8001298 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f000 fef5 	bl	8002010 <ADC_Disable>
 8001226:	4603      	mov	r3, r0
 8001228:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001230:	f003 0310 	and.w	r3, r3, #16
 8001234:	2b00      	cmp	r3, #0
 8001236:	d12f      	bne.n	8001298 <HAL_ADC_Init+0xe0>
 8001238:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800123c:	2b00      	cmp	r3, #0
 800123e:	d12b      	bne.n	8001298 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001244:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001248:	f023 0302 	bic.w	r3, r3, #2
 800124c:	f043 0202 	orr.w	r2, r3, #2
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	689a      	ldr	r2, [r3, #8]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001262:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	689a      	ldr	r2, [r3, #8]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001272:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001274:	4b94      	ldr	r3, [pc, #592]	@ (80014c8 <HAL_ADC_Init+0x310>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a94      	ldr	r2, [pc, #592]	@ (80014cc <HAL_ADC_Init+0x314>)
 800127a:	fba2 2303 	umull	r2, r3, r2, r3
 800127e:	0c9a      	lsrs	r2, r3, #18
 8001280:	4613      	mov	r3, r2
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	4413      	add	r3, r2
 8001286:	005b      	lsls	r3, r3, #1
 8001288:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800128a:	e002      	b.n	8001292 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	3b01      	subs	r3, #1
 8001290:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001292:	68bb      	ldr	r3, [r7, #8]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d1f9      	bne.n	800128c <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d007      	beq.n	80012b6 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	689b      	ldr	r3, [r3, #8]
 80012ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80012b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80012b4:	d110      	bne.n	80012d8 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ba:	f023 0312 	bic.w	r3, r3, #18
 80012be:	f043 0210 	orr.w	r2, r3, #16
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ca:	f043 0201 	orr.w	r2, r3, #1
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012dc:	f003 0310 	and.w	r3, r3, #16
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	f040 80df 	bne.w	80014a4 <HAL_ADC_Init+0x2ec>
 80012e6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	f040 80da 	bne.w	80014a4 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	f040 80d2 	bne.w	80014a4 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001304:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001308:	f043 0202 	orr.w	r2, r3, #2
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001310:	4b6f      	ldr	r3, [pc, #444]	@ (80014d0 <HAL_ADC_Init+0x318>)
 8001312:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800131c:	d102      	bne.n	8001324 <HAL_ADC_Init+0x16c>
 800131e:	4b6d      	ldr	r3, [pc, #436]	@ (80014d4 <HAL_ADC_Init+0x31c>)
 8001320:	60fb      	str	r3, [r7, #12]
 8001322:	e002      	b.n	800132a <HAL_ADC_Init+0x172>
 8001324:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001328:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	f003 0303 	and.w	r3, r3, #3
 8001334:	2b01      	cmp	r3, #1
 8001336:	d108      	bne.n	800134a <HAL_ADC_Init+0x192>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f003 0301 	and.w	r3, r3, #1
 8001342:	2b01      	cmp	r3, #1
 8001344:	d101      	bne.n	800134a <HAL_ADC_Init+0x192>
 8001346:	2301      	movs	r3, #1
 8001348:	e000      	b.n	800134c <HAL_ADC_Init+0x194>
 800134a:	2300      	movs	r3, #0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d11c      	bne.n	800138a <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001350:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001352:	2b00      	cmp	r3, #0
 8001354:	d010      	beq.n	8001378 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	f003 0303 	and.w	r3, r3, #3
 800135e:	2b01      	cmp	r3, #1
 8001360:	d107      	bne.n	8001372 <HAL_ADC_Init+0x1ba>
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f003 0301 	and.w	r3, r3, #1
 800136a:	2b01      	cmp	r3, #1
 800136c:	d101      	bne.n	8001372 <HAL_ADC_Init+0x1ba>
 800136e:	2301      	movs	r3, #1
 8001370:	e000      	b.n	8001374 <HAL_ADC_Init+0x1bc>
 8001372:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001374:	2b00      	cmp	r3, #0
 8001376:	d108      	bne.n	800138a <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001378:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	431a      	orrs	r2, r3
 8001386:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001388:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	7e5b      	ldrb	r3, [r3, #25]
 800138e:	035b      	lsls	r3, r3, #13
 8001390:	687a      	ldr	r2, [r7, #4]
 8001392:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001394:	2a01      	cmp	r2, #1
 8001396:	d002      	beq.n	800139e <HAL_ADC_Init+0x1e6>
 8001398:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800139c:	e000      	b.n	80013a0 <HAL_ADC_Init+0x1e8>
 800139e:	2200      	movs	r2, #0
 80013a0:	431a      	orrs	r2, r3
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	68db      	ldr	r3, [r3, #12]
 80013a6:	431a      	orrs	r2, r3
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80013b0:	4313      	orrs	r3, r2
 80013b2:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013ba:	2b01      	cmp	r3, #1
 80013bc:	d11b      	bne.n	80013f6 <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	7e5b      	ldrb	r3, [r3, #25]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d109      	bne.n	80013da <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013ca:	3b01      	subs	r3, #1
 80013cc:	045a      	lsls	r2, r3, #17
 80013ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80013d0:	4313      	orrs	r3, r2
 80013d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013d6:	663b      	str	r3, [r7, #96]	@ 0x60
 80013d8:	e00d      	b.n	80013f6 <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013de:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80013e2:	f043 0220 	orr.w	r2, r3, #32
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013ee:	f043 0201 	orr.w	r2, r3, #1
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d007      	beq.n	800140e <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001406:	4313      	orrs	r3, r2
 8001408:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800140a:	4313      	orrs	r3, r2
 800140c:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	f003 030c 	and.w	r3, r3, #12
 8001418:	2b00      	cmp	r3, #0
 800141a:	d114      	bne.n	8001446 <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	68db      	ldr	r3, [r3, #12]
 8001422:	687a      	ldr	r2, [r7, #4]
 8001424:	6812      	ldr	r2, [r2, #0]
 8001426:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800142a:	f023 0302 	bic.w	r3, r3, #2
 800142e:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	7e1b      	ldrb	r3, [r3, #24]
 8001434:	039a      	lsls	r2, r3, #14
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800143c:	005b      	lsls	r3, r3, #1
 800143e:	4313      	orrs	r3, r2
 8001440:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001442:	4313      	orrs	r3, r2
 8001444:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	68da      	ldr	r2, [r3, #12]
 800144c:	4b22      	ldr	r3, [pc, #136]	@ (80014d8 <HAL_ADC_Init+0x320>)
 800144e:	4013      	ands	r3, r2
 8001450:	687a      	ldr	r2, [r7, #4]
 8001452:	6812      	ldr	r2, [r2, #0]
 8001454:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8001456:	430b      	orrs	r3, r1
 8001458:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	691b      	ldr	r3, [r3, #16]
 800145e:	2b01      	cmp	r3, #1
 8001460:	d10c      	bne.n	800147c <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001468:	f023 010f 	bic.w	r1, r3, #15
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	69db      	ldr	r3, [r3, #28]
 8001470:	1e5a      	subs	r2, r3, #1
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	430a      	orrs	r2, r1
 8001478:	631a      	str	r2, [r3, #48]	@ 0x30
 800147a:	e007      	b.n	800148c <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f022 020f 	bic.w	r2, r2, #15
 800148a:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2200      	movs	r2, #0
 8001490:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001496:	f023 0303 	bic.w	r3, r3, #3
 800149a:	f043 0201 	orr.w	r2, r3, #1
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	641a      	str	r2, [r3, #64]	@ 0x40
 80014a2:	e00a      	b.n	80014ba <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014a8:	f023 0312 	bic.w	r3, r3, #18
 80014ac:	f043 0210 	orr.w	r2, r3, #16
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80014b4:	2301      	movs	r3, #1
 80014b6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80014ba:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3768      	adds	r7, #104	@ 0x68
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	20000000 	.word	0x20000000
 80014cc:	431bde83 	.word	0x431bde83
 80014d0:	50000300 	.word	0x50000300
 80014d4:	50000100 	.word	0x50000100
 80014d8:	fff0c007 	.word	0xfff0c007

080014dc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b086      	sub	sp, #24
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	60f8      	str	r0, [r7, #12]
 80014e4:	60b9      	str	r1, [r7, #8]
 80014e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014e8:	2300      	movs	r3, #0
 80014ea:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	f003 0304 	and.w	r3, r3, #4
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	f040 80b9 	bne.w	800166e <HAL_ADC_Start_DMA+0x192>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001502:	2b01      	cmp	r3, #1
 8001504:	d101      	bne.n	800150a <HAL_ADC_Start_DMA+0x2e>
 8001506:	2302      	movs	r3, #2
 8001508:	e0b4      	b.n	8001674 <HAL_ADC_Start_DMA+0x198>
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	2201      	movs	r2, #1
 800150e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8001512:	4b5a      	ldr	r3, [pc, #360]	@ (800167c <HAL_ADC_Start_DMA+0x1a0>)
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	f003 031f 	and.w	r3, r3, #31
 800151a:	2b00      	cmp	r3, #0
 800151c:	f040 80a0 	bne.w	8001660 <HAL_ADC_Start_DMA+0x184>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001520:	68f8      	ldr	r0, [r7, #12]
 8001522:	f000 fd11 	bl	8001f48 <ADC_Enable>
 8001526:	4603      	mov	r3, r0
 8001528:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800152a:	7dfb      	ldrb	r3, [r7, #23]
 800152c:	2b00      	cmp	r3, #0
 800152e:	f040 8092 	bne.w	8001656 <HAL_ADC_Start_DMA+0x17a>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001536:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800153a:	f023 0301 	bic.w	r3, r3, #1
 800153e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001546:	4b4d      	ldr	r3, [pc, #308]	@ (800167c <HAL_ADC_Start_DMA+0x1a0>)
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	f003 031f 	and.w	r3, r3, #31
 800154e:	2b00      	cmp	r3, #0
 8001550:	d004      	beq.n	800155c <HAL_ADC_Start_DMA+0x80>
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800155a:	d115      	bne.n	8001588 <HAL_ADC_Start_DMA+0xac>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001560:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	68db      	ldr	r3, [r3, #12]
 800156e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001572:	2b00      	cmp	r3, #0
 8001574:	d027      	beq.n	80015c6 <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800157a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800157e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	641a      	str	r2, [r3, #64]	@ 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001586:	e01e      	b.n	80015c6 <HAL_ADC_Start_DMA+0xea>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800158c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800159c:	d004      	beq.n	80015a8 <HAL_ADC_Start_DMA+0xcc>
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a37      	ldr	r2, [pc, #220]	@ (8001680 <HAL_ADC_Start_DMA+0x1a4>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d10e      	bne.n	80015c6 <HAL_ADC_Start_DMA+0xea>
 80015a8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80015ac:	68db      	ldr	r3, [r3, #12]
 80015ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d007      	beq.n	80015c6 <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ba:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80015be:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	641a      	str	r2, [r3, #64]	@ 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80015ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80015d2:	d106      	bne.n	80015e2 <HAL_ADC_Start_DMA+0x106>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015d8:	f023 0206 	bic.w	r2, r3, #6
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	645a      	str	r2, [r3, #68]	@ 0x44
 80015e0:	e002      	b.n	80015e8 <HAL_ADC_Start_DMA+0x10c>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	2200      	movs	r2, #0
 80015e6:	645a      	str	r2, [r3, #68]	@ 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	2200      	movs	r2, #0
 80015ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015f4:	4a23      	ldr	r2, [pc, #140]	@ (8001684 <HAL_ADC_Start_DMA+0x1a8>)
 80015f6:	629a      	str	r2, [r3, #40]	@ 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015fc:	4a22      	ldr	r2, [pc, #136]	@ (8001688 <HAL_ADC_Start_DMA+0x1ac>)
 80015fe:	62da      	str	r2, [r3, #44]	@ 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001604:	4a21      	ldr	r2, [pc, #132]	@ (800168c <HAL_ADC_Start_DMA+0x1b0>)
 8001606:	631a      	str	r2, [r3, #48]	@ 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	221c      	movs	r2, #28
 800160e:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	685a      	ldr	r2, [r3, #4]
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f042 0210 	orr.w	r2, r2, #16
 800161e:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	68da      	ldr	r2, [r3, #12]
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f042 0201 	orr.w	r2, r2, #1
 800162e:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	3340      	adds	r3, #64	@ 0x40
 800163a:	4619      	mov	r1, r3
 800163c:	68ba      	ldr	r2, [r7, #8]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	f001 fd2a 	bl	8003098 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	689a      	ldr	r2, [r3, #8]
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f042 0204 	orr.w	r2, r2, #4
 8001652:	609a      	str	r2, [r3, #8]
 8001654:	e00d      	b.n	8001672 <HAL_ADC_Start_DMA+0x196>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	2200      	movs	r2, #0
 800165a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800165e:	e008      	b.n	8001672 <HAL_ADC_Start_DMA+0x196>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001660:	2301      	movs	r3, #1
 8001662:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	2200      	movs	r2, #0
 8001668:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800166c:	e001      	b.n	8001672 <HAL_ADC_Start_DMA+0x196>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800166e:	2302      	movs	r3, #2
 8001670:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001672:	7dfb      	ldrb	r3, [r7, #23]
}
 8001674:	4618      	mov	r0, r3
 8001676:	3718      	adds	r7, #24
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	50000300 	.word	0x50000300
 8001680:	50000100 	.word	0x50000100
 8001684:	08001e7d 	.word	0x08001e7d
 8001688:	08001ef7 	.word	0x08001ef7
 800168c:	08001f13 	.word	0x08001f13

08001690 <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b084      	sub	sp, #16
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
 8001698:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800169a:	2300      	movs	r3, #0
 800169c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d101      	bne.n	80016ac <HAL_ADCEx_Calibration_Start+0x1c>
 80016a8:	2302      	movs	r3, #2
 80016aa:	e05f      	b.n	800176c <HAL_ADCEx_Calibration_Start+0xdc>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2201      	movs	r2, #1
 80016b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	f000 fcab 	bl	8002010 <ADC_Disable>
 80016ba:	4603      	mov	r3, r0
 80016bc:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80016be:	7bfb      	ldrb	r3, [r7, #15]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d14e      	bne.n	8001762 <HAL_ADCEx_Calibration_Start+0xd2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2201      	movs	r2, #1
 80016c8:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	689a      	ldr	r2, [r3, #8]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 80016d8:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d107      	bne.n	80016f0 <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	689a      	ldr	r2, [r3, #8]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80016ee:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	689a      	ldr	r2, [r3, #8]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80016fe:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8001700:	f7ff fd0c 	bl	800111c <HAL_GetTick>
 8001704:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001706:	e01c      	b.n	8001742 <HAL_ADCEx_Calibration_Start+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001708:	f7ff fd08 	bl	800111c <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	2b0a      	cmp	r3, #10
 8001714:	d915      	bls.n	8001742 <HAL_ADCEx_Calibration_Start+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001720:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001724:	d10d      	bne.n	8001742 <HAL_ADCEx_Calibration_Start+0xb2>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800172a:	f023 0312 	bic.w	r3, r3, #18
 800172e:	f043 0210 	orr.w	r2, r3, #16
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2200      	movs	r2, #0
 800173a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e014      	b.n	800176c <HAL_ADCEx_Calibration_Start+0xdc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800174c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001750:	d0da      	beq.n	8001708 <HAL_ADCEx_Calibration_Start+0x78>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001756:	f023 0303 	bic.w	r3, r3, #3
 800175a:	f043 0201 	orr.w	r2, r3, #1
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2200      	movs	r2, #0
 8001766:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800176a:	7bfb      	ldrb	r3, [r7, #15]
}
 800176c:	4618      	mov	r0, r3
 800176e:	3710      	adds	r7, #16
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}

08001774 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001774:	b480      	push	{r7}
 8001776:	b09b      	sub	sp, #108	@ 0x6c
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800177e:	2300      	movs	r3, #0
 8001780:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001784:	2300      	movs	r3, #0
 8001786:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800178e:	2b01      	cmp	r3, #1
 8001790:	d101      	bne.n	8001796 <HAL_ADC_ConfigChannel+0x22>
 8001792:	2302      	movs	r3, #2
 8001794:	e2a1      	b.n	8001cda <HAL_ADC_ConfigChannel+0x566>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2201      	movs	r2, #1
 800179a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	f003 0304 	and.w	r3, r3, #4
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	f040 8285 	bne.w	8001cb8 <HAL_ADC_ConfigChannel+0x544>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	2b04      	cmp	r3, #4
 80017b4:	d81c      	bhi.n	80017f0 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	685a      	ldr	r2, [r3, #4]
 80017c0:	4613      	mov	r3, r2
 80017c2:	005b      	lsls	r3, r3, #1
 80017c4:	4413      	add	r3, r2
 80017c6:	005b      	lsls	r3, r3, #1
 80017c8:	461a      	mov	r2, r3
 80017ca:	231f      	movs	r3, #31
 80017cc:	4093      	lsls	r3, r2
 80017ce:	43db      	mvns	r3, r3
 80017d0:	4019      	ands	r1, r3
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	6818      	ldr	r0, [r3, #0]
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	685a      	ldr	r2, [r3, #4]
 80017da:	4613      	mov	r3, r2
 80017dc:	005b      	lsls	r3, r3, #1
 80017de:	4413      	add	r3, r2
 80017e0:	005b      	lsls	r3, r3, #1
 80017e2:	fa00 f203 	lsl.w	r2, r0, r3
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	430a      	orrs	r2, r1
 80017ec:	631a      	str	r2, [r3, #48]	@ 0x30
 80017ee:	e063      	b.n	80018b8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	2b09      	cmp	r3, #9
 80017f6:	d81e      	bhi.n	8001836 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	685a      	ldr	r2, [r3, #4]
 8001802:	4613      	mov	r3, r2
 8001804:	005b      	lsls	r3, r3, #1
 8001806:	4413      	add	r3, r2
 8001808:	005b      	lsls	r3, r3, #1
 800180a:	3b1e      	subs	r3, #30
 800180c:	221f      	movs	r2, #31
 800180e:	fa02 f303 	lsl.w	r3, r2, r3
 8001812:	43db      	mvns	r3, r3
 8001814:	4019      	ands	r1, r3
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	6818      	ldr	r0, [r3, #0]
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	685a      	ldr	r2, [r3, #4]
 800181e:	4613      	mov	r3, r2
 8001820:	005b      	lsls	r3, r3, #1
 8001822:	4413      	add	r3, r2
 8001824:	005b      	lsls	r3, r3, #1
 8001826:	3b1e      	subs	r3, #30
 8001828:	fa00 f203 	lsl.w	r2, r0, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	430a      	orrs	r2, r1
 8001832:	635a      	str	r2, [r3, #52]	@ 0x34
 8001834:	e040      	b.n	80018b8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	2b0e      	cmp	r3, #14
 800183c:	d81e      	bhi.n	800187c <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	685a      	ldr	r2, [r3, #4]
 8001848:	4613      	mov	r3, r2
 800184a:	005b      	lsls	r3, r3, #1
 800184c:	4413      	add	r3, r2
 800184e:	005b      	lsls	r3, r3, #1
 8001850:	3b3c      	subs	r3, #60	@ 0x3c
 8001852:	221f      	movs	r2, #31
 8001854:	fa02 f303 	lsl.w	r3, r2, r3
 8001858:	43db      	mvns	r3, r3
 800185a:	4019      	ands	r1, r3
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	6818      	ldr	r0, [r3, #0]
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	685a      	ldr	r2, [r3, #4]
 8001864:	4613      	mov	r3, r2
 8001866:	005b      	lsls	r3, r3, #1
 8001868:	4413      	add	r3, r2
 800186a:	005b      	lsls	r3, r3, #1
 800186c:	3b3c      	subs	r3, #60	@ 0x3c
 800186e:	fa00 f203 	lsl.w	r2, r0, r3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	430a      	orrs	r2, r1
 8001878:	639a      	str	r2, [r3, #56]	@ 0x38
 800187a:	e01d      	b.n	80018b8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	685a      	ldr	r2, [r3, #4]
 8001886:	4613      	mov	r3, r2
 8001888:	005b      	lsls	r3, r3, #1
 800188a:	4413      	add	r3, r2
 800188c:	005b      	lsls	r3, r3, #1
 800188e:	3b5a      	subs	r3, #90	@ 0x5a
 8001890:	221f      	movs	r2, #31
 8001892:	fa02 f303 	lsl.w	r3, r2, r3
 8001896:	43db      	mvns	r3, r3
 8001898:	4019      	ands	r1, r3
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	6818      	ldr	r0, [r3, #0]
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	685a      	ldr	r2, [r3, #4]
 80018a2:	4613      	mov	r3, r2
 80018a4:	005b      	lsls	r3, r3, #1
 80018a6:	4413      	add	r3, r2
 80018a8:	005b      	lsls	r3, r3, #1
 80018aa:	3b5a      	subs	r3, #90	@ 0x5a
 80018ac:	fa00 f203 	lsl.w	r2, r0, r3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	430a      	orrs	r2, r1
 80018b6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	f003 030c 	and.w	r3, r3, #12
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	f040 80e5 	bne.w	8001a92 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2b09      	cmp	r3, #9
 80018ce:	d91c      	bls.n	800190a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	6999      	ldr	r1, [r3, #24]
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	4613      	mov	r3, r2
 80018dc:	005b      	lsls	r3, r3, #1
 80018de:	4413      	add	r3, r2
 80018e0:	3b1e      	subs	r3, #30
 80018e2:	2207      	movs	r2, #7
 80018e4:	fa02 f303 	lsl.w	r3, r2, r3
 80018e8:	43db      	mvns	r3, r3
 80018ea:	4019      	ands	r1, r3
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	6898      	ldr	r0, [r3, #8]
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	4613      	mov	r3, r2
 80018f6:	005b      	lsls	r3, r3, #1
 80018f8:	4413      	add	r3, r2
 80018fa:	3b1e      	subs	r3, #30
 80018fc:	fa00 f203 	lsl.w	r2, r0, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	430a      	orrs	r2, r1
 8001906:	619a      	str	r2, [r3, #24]
 8001908:	e019      	b.n	800193e <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	6959      	ldr	r1, [r3, #20]
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	4613      	mov	r3, r2
 8001916:	005b      	lsls	r3, r3, #1
 8001918:	4413      	add	r3, r2
 800191a:	2207      	movs	r2, #7
 800191c:	fa02 f303 	lsl.w	r3, r2, r3
 8001920:	43db      	mvns	r3, r3
 8001922:	4019      	ands	r1, r3
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	6898      	ldr	r0, [r3, #8]
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	4613      	mov	r3, r2
 800192e:	005b      	lsls	r3, r3, #1
 8001930:	4413      	add	r3, r2
 8001932:	fa00 f203 	lsl.w	r2, r0, r3
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	430a      	orrs	r2, r1
 800193c:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	695a      	ldr	r2, [r3, #20]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	08db      	lsrs	r3, r3, #3
 800194a:	f003 0303 	and.w	r3, r3, #3
 800194e:	005b      	lsls	r3, r3, #1
 8001950:	fa02 f303 	lsl.w	r3, r2, r3
 8001954:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	691b      	ldr	r3, [r3, #16]
 800195a:	3b01      	subs	r3, #1
 800195c:	2b03      	cmp	r3, #3
 800195e:	d84f      	bhi.n	8001a00 <HAL_ADC_ConfigChannel+0x28c>
 8001960:	a201      	add	r2, pc, #4	@ (adr r2, 8001968 <HAL_ADC_ConfigChannel+0x1f4>)
 8001962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001966:	bf00      	nop
 8001968:	08001979 	.word	0x08001979
 800196c:	0800199b 	.word	0x0800199b
 8001970:	080019bd 	.word	0x080019bd
 8001974:	080019df 	.word	0x080019df
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800197e:	4b9c      	ldr	r3, [pc, #624]	@ (8001bf0 <HAL_ADC_ConfigChannel+0x47c>)
 8001980:	4013      	ands	r3, r2
 8001982:	683a      	ldr	r2, [r7, #0]
 8001984:	6812      	ldr	r2, [r2, #0]
 8001986:	0691      	lsls	r1, r2, #26
 8001988:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800198a:	430a      	orrs	r2, r1
 800198c:	431a      	orrs	r2, r3
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001996:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001998:	e07b      	b.n	8001a92 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80019a0:	4b93      	ldr	r3, [pc, #588]	@ (8001bf0 <HAL_ADC_ConfigChannel+0x47c>)
 80019a2:	4013      	ands	r3, r2
 80019a4:	683a      	ldr	r2, [r7, #0]
 80019a6:	6812      	ldr	r2, [r2, #0]
 80019a8:	0691      	lsls	r1, r2, #26
 80019aa:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80019ac:	430a      	orrs	r2, r1
 80019ae:	431a      	orrs	r2, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80019b8:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80019ba:	e06a      	b.n	8001a92 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80019c2:	4b8b      	ldr	r3, [pc, #556]	@ (8001bf0 <HAL_ADC_ConfigChannel+0x47c>)
 80019c4:	4013      	ands	r3, r2
 80019c6:	683a      	ldr	r2, [r7, #0]
 80019c8:	6812      	ldr	r2, [r2, #0]
 80019ca:	0691      	lsls	r1, r2, #26
 80019cc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80019ce:	430a      	orrs	r2, r1
 80019d0:	431a      	orrs	r2, r3
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80019da:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80019dc:	e059      	b.n	8001a92 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80019e4:	4b82      	ldr	r3, [pc, #520]	@ (8001bf0 <HAL_ADC_ConfigChannel+0x47c>)
 80019e6:	4013      	ands	r3, r2
 80019e8:	683a      	ldr	r2, [r7, #0]
 80019ea:	6812      	ldr	r2, [r2, #0]
 80019ec:	0691      	lsls	r1, r2, #26
 80019ee:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80019f0:	430a      	orrs	r2, r1
 80019f2:	431a      	orrs	r2, r3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80019fc:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80019fe:	e048      	b.n	8001a92 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a06:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	069b      	lsls	r3, r3, #26
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d107      	bne.n	8001a24 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001a22:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001a2a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	069b      	lsls	r3, r3, #26
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d107      	bne.n	8001a48 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001a46:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001a4e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	069b      	lsls	r3, r3, #26
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d107      	bne.n	8001a6c <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001a6a:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001a72:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	069b      	lsls	r3, r3, #26
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d107      	bne.n	8001a90 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001a8e:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 8001a90:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	f003 0303 	and.w	r3, r3, #3
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d108      	bne.n	8001ab2 <HAL_ADC_ConfigChannel+0x33e>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0301 	and.w	r3, r3, #1
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d101      	bne.n	8001ab2 <HAL_ADC_ConfigChannel+0x33e>
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e000      	b.n	8001ab4 <HAL_ADC_ConfigChannel+0x340>
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	f040 810a 	bne.w	8001cce <HAL_ADC_ConfigChannel+0x55a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	68db      	ldr	r3, [r3, #12]
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d00f      	beq.n	8001ae2 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	2201      	movs	r2, #1
 8001ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad4:	43da      	mvns	r2, r3
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	400a      	ands	r2, r1
 8001adc:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8001ae0:	e049      	b.n	8001b76 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	2201      	movs	r2, #1
 8001af0:	409a      	lsls	r2, r3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	430a      	orrs	r2, r1
 8001af8:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2b09      	cmp	r3, #9
 8001b02:	d91c      	bls.n	8001b3e <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	6999      	ldr	r1, [r3, #24]
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	4613      	mov	r3, r2
 8001b10:	005b      	lsls	r3, r3, #1
 8001b12:	4413      	add	r3, r2
 8001b14:	3b1b      	subs	r3, #27
 8001b16:	2207      	movs	r2, #7
 8001b18:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1c:	43db      	mvns	r3, r3
 8001b1e:	4019      	ands	r1, r3
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	6898      	ldr	r0, [r3, #8]
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	4613      	mov	r3, r2
 8001b2a:	005b      	lsls	r3, r3, #1
 8001b2c:	4413      	add	r3, r2
 8001b2e:	3b1b      	subs	r3, #27
 8001b30:	fa00 f203 	lsl.w	r2, r0, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	430a      	orrs	r2, r1
 8001b3a:	619a      	str	r2, [r3, #24]
 8001b3c:	e01b      	b.n	8001b76 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	6959      	ldr	r1, [r3, #20]
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	1c5a      	adds	r2, r3, #1
 8001b4a:	4613      	mov	r3, r2
 8001b4c:	005b      	lsls	r3, r3, #1
 8001b4e:	4413      	add	r3, r2
 8001b50:	2207      	movs	r2, #7
 8001b52:	fa02 f303 	lsl.w	r3, r2, r3
 8001b56:	43db      	mvns	r3, r3
 8001b58:	4019      	ands	r1, r3
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	6898      	ldr	r0, [r3, #8]
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	1c5a      	adds	r2, r3, #1
 8001b64:	4613      	mov	r3, r2
 8001b66:	005b      	lsls	r3, r3, #1
 8001b68:	4413      	add	r3, r2
 8001b6a:	fa00 f203 	lsl.w	r2, r0, r3
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	430a      	orrs	r2, r1
 8001b74:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b76:	4b1f      	ldr	r3, [pc, #124]	@ (8001bf4 <HAL_ADC_ConfigChannel+0x480>)
 8001b78:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	2b10      	cmp	r3, #16
 8001b80:	d105      	bne.n	8001b8e <HAL_ADC_ConfigChannel+0x41a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001b82:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d015      	beq.n	8001bba <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001b92:	2b11      	cmp	r3, #17
 8001b94:	d105      	bne.n	8001ba2 <HAL_ADC_ConfigChannel+0x42e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001b96:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d00b      	beq.n	8001bba <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001ba6:	2b12      	cmp	r3, #18
 8001ba8:	f040 8091 	bne.w	8001cce <HAL_ADC_ConfigChannel+0x55a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001bac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	f040 808a 	bne.w	8001cce <HAL_ADC_ConfigChannel+0x55a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001bc2:	d102      	bne.n	8001bca <HAL_ADC_ConfigChannel+0x456>
 8001bc4:	4b0c      	ldr	r3, [pc, #48]	@ (8001bf8 <HAL_ADC_ConfigChannel+0x484>)
 8001bc6:	60fb      	str	r3, [r7, #12]
 8001bc8:	e002      	b.n	8001bd0 <HAL_ADC_ConfigChannel+0x45c>
 8001bca:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001bce:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	f003 0303 	and.w	r3, r3, #3
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d10e      	bne.n	8001bfc <HAL_ADC_ConfigChannel+0x488>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 0301 	and.w	r3, r3, #1
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d107      	bne.n	8001bfc <HAL_ADC_ConfigChannel+0x488>
 8001bec:	2301      	movs	r3, #1
 8001bee:	e006      	b.n	8001bfe <HAL_ADC_ConfigChannel+0x48a>
 8001bf0:	83fff000 	.word	0x83fff000
 8001bf4:	50000300 	.word	0x50000300
 8001bf8:	50000100 	.word	0x50000100
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d150      	bne.n	8001ca4 <HAL_ADC_ConfigChannel+0x530>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001c02:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d010      	beq.n	8001c2a <HAL_ADC_ConfigChannel+0x4b6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	f003 0303 	and.w	r3, r3, #3
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d107      	bne.n	8001c24 <HAL_ADC_ConfigChannel+0x4b0>
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 0301 	and.w	r3, r3, #1
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d101      	bne.n	8001c24 <HAL_ADC_ConfigChannel+0x4b0>
 8001c20:	2301      	movs	r3, #1
 8001c22:	e000      	b.n	8001c26 <HAL_ADC_ConfigChannel+0x4b2>
 8001c24:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d13c      	bne.n	8001ca4 <HAL_ADC_ConfigChannel+0x530>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	2b10      	cmp	r3, #16
 8001c30:	d11d      	bne.n	8001c6e <HAL_ADC_ConfigChannel+0x4fa>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001c3a:	d118      	bne.n	8001c6e <HAL_ADC_ConfigChannel+0x4fa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001c3c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001c44:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001c46:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001c48:	4b27      	ldr	r3, [pc, #156]	@ (8001ce8 <HAL_ADC_ConfigChannel+0x574>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a27      	ldr	r2, [pc, #156]	@ (8001cec <HAL_ADC_ConfigChannel+0x578>)
 8001c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c52:	0c9a      	lsrs	r2, r3, #18
 8001c54:	4613      	mov	r3, r2
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	4413      	add	r3, r2
 8001c5a:	005b      	lsls	r3, r3, #1
 8001c5c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c5e:	e002      	b.n	8001c66 <HAL_ADC_ConfigChannel+0x4f2>
          {
            wait_loop_index--;
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	3b01      	subs	r3, #1
 8001c64:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d1f9      	bne.n	8001c60 <HAL_ADC_ConfigChannel+0x4ec>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001c6c:	e02e      	b.n	8001ccc <HAL_ADC_ConfigChannel+0x558>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	2b11      	cmp	r3, #17
 8001c74:	d10b      	bne.n	8001c8e <HAL_ADC_ConfigChannel+0x51a>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001c7e:	d106      	bne.n	8001c8e <HAL_ADC_ConfigChannel+0x51a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001c80:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8001c88:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001c8a:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001c8c:	e01e      	b.n	8001ccc <HAL_ADC_ConfigChannel+0x558>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	2b12      	cmp	r3, #18
 8001c94:	d11a      	bne.n	8001ccc <HAL_ADC_ConfigChannel+0x558>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001c96:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001c9e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001ca0:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001ca2:	e013      	b.n	8001ccc <HAL_ADC_ConfigChannel+0x558>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ca8:	f043 0220 	orr.w	r2, r3, #32
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8001cb6:	e00a      	b.n	8001cce <HAL_ADC_ConfigChannel+0x55a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cbc:	f043 0220 	orr.w	r2, r3, #32
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8001cca:	e000      	b.n	8001cce <HAL_ADC_ConfigChannel+0x55a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001ccc:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001cd6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	376c      	adds	r7, #108	@ 0x6c
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	20000000 	.word	0x20000000
 8001cec:	431bde83 	.word	0x431bde83

08001cf0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b099      	sub	sp, #100	@ 0x64
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001d08:	d102      	bne.n	8001d10 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8001d0a:	4b5a      	ldr	r3, [pc, #360]	@ (8001e74 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8001d0c:	60bb      	str	r3, [r7, #8]
 8001d0e:	e002      	b.n	8001d16 <HAL_ADCEx_MultiModeConfigChannel+0x26>
 8001d10:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001d14:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d101      	bne.n	8001d20 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e0a2      	b.n	8001e66 <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d101      	bne.n	8001d2e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001d2a:	2302      	movs	r3, #2
 8001d2c:	e09b      	b.n	8001e66 <HAL_ADCEx_MultiModeConfigChannel+0x176>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2201      	movs	r2, #1
 8001d32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	f003 0304 	and.w	r3, r3, #4
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d17f      	bne.n	8001e44 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	f003 0304 	and.w	r3, r3, #4
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d179      	bne.n	8001e44 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d50:	4b49      	ldr	r3, [pc, #292]	@ (8001e78 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 8001d52:	65bb      	str	r3, [r7, #88]	@ 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d040      	beq.n	8001dde <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001d5c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	6859      	ldr	r1, [r3, #4]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001d6e:	035b      	lsls	r3, r3, #13
 8001d70:	430b      	orrs	r3, r1
 8001d72:	431a      	orrs	r2, r3
 8001d74:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001d76:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	f003 0303 	and.w	r3, r3, #3
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d108      	bne.n	8001d98 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 0301 	and.w	r3, r3, #1
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d101      	bne.n	8001d98 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001d94:	2301      	movs	r3, #1
 8001d96:	e000      	b.n	8001d9a <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8001d98:	2300      	movs	r3, #0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d15c      	bne.n	8001e58 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	f003 0303 	and.w	r3, r3, #3
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d107      	bne.n	8001dba <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 0301 	and.w	r3, r3, #1
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d101      	bne.n	8001dba <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8001db6:	2301      	movs	r3, #1
 8001db8:	e000      	b.n	8001dbc <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8001dba:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d14b      	bne.n	8001e58 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001dc0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8001dc8:	f023 030f 	bic.w	r3, r3, #15
 8001dcc:	683a      	ldr	r2, [r7, #0]
 8001dce:	6811      	ldr	r1, [r2, #0]
 8001dd0:	683a      	ldr	r2, [r7, #0]
 8001dd2:	6892      	ldr	r2, [r2, #8]
 8001dd4:	430a      	orrs	r2, r1
 8001dd6:	431a      	orrs	r2, r3
 8001dd8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001dda:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001ddc:	e03c      	b.n	8001e58 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001dde:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001de6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001de8:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	f003 0303 	and.w	r3, r3, #3
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d108      	bne.n	8001e0a <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 0301 	and.w	r3, r3, #1
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d101      	bne.n	8001e0a <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8001e06:	2301      	movs	r3, #1
 8001e08:	e000      	b.n	8001e0c <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d123      	bne.n	8001e58 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	f003 0303 	and.w	r3, r3, #3
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d107      	bne.n	8001e2c <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 0301 	and.w	r3, r3, #1
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d101      	bne.n	8001e2c <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e000      	b.n	8001e2e <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8001e2c:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d112      	bne.n	8001e58 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8001e32:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8001e3a:	f023 030f 	bic.w	r3, r3, #15
 8001e3e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001e40:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001e42:	e009      	b.n	8001e58 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e48:	f043 0220 	orr.w	r2, r3, #32
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8001e56:	e000      	b.n	8001e5a <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001e58:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001e62:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
} 
 8001e66:	4618      	mov	r0, r3
 8001e68:	3764      	adds	r7, #100	@ 0x64
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop
 8001e74:	50000100 	.word	0x50000100
 8001e78:	50000300 	.word	0x50000300

08001e7c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b084      	sub	sp, #16
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e88:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e8e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d126      	bne.n	8001ee4 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e9a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d115      	bne.n	8001edc <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d111      	bne.n	8001edc <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ebc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ec8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d105      	bne.n	8001edc <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ed4:	f043 0201 	orr.w	r2, r3, #1
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001edc:	68f8      	ldr	r0, [r7, #12]
 8001ede:	f7ff f94d 	bl	800117c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001ee2:	e004      	b.n	8001eee <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	4798      	blx	r3
}
 8001eee:	bf00      	nop
 8001ef0:	3710      	adds	r7, #16
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b084      	sub	sp, #16
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f02:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001f04:	68f8      	ldr	r0, [r7, #12]
 8001f06:	f7ff f943 	bl	8001190 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8001f0a:	bf00      	nop
 8001f0c:	3710      	adds	r7, #16
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001f12:	b580      	push	{r7, lr}
 8001f14:	b084      	sub	sp, #16
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f1e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f24:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f30:	f043 0204 	orr.w	r2, r3, #4
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	645a      	str	r2, [r3, #68]	@ 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001f38:	68f8      	ldr	r0, [r7, #12]
 8001f3a:	f7ff f933 	bl	80011a4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001f3e:	bf00      	nop
 8001f40:	3710      	adds	r7, #16
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
	...

08001f48 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b084      	sub	sp, #16
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f50:	2300      	movs	r3, #0
 8001f52:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	f003 0303 	and.w	r3, r3, #3
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d108      	bne.n	8001f74 <ADC_Enable+0x2c>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0301 	and.w	r3, r3, #1
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d101      	bne.n	8001f74 <ADC_Enable+0x2c>
 8001f70:	2301      	movs	r3, #1
 8001f72:	e000      	b.n	8001f76 <ADC_Enable+0x2e>
 8001f74:	2300      	movs	r3, #0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d143      	bne.n	8002002 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	689a      	ldr	r2, [r3, #8]
 8001f80:	4b22      	ldr	r3, [pc, #136]	@ (800200c <ADC_Enable+0xc4>)
 8001f82:	4013      	ands	r3, r2
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d00d      	beq.n	8001fa4 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f8c:	f043 0210 	orr.w	r2, r3, #16
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f98:	f043 0201 	orr.w	r2, r3, #1
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	645a      	str	r2, [r3, #68]	@ 0x44
      
      return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e02f      	b.n	8002004 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	689a      	ldr	r2, [r3, #8]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f042 0201 	orr.w	r2, r2, #1
 8001fb2:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001fb4:	f7ff f8b2 	bl	800111c <HAL_GetTick>
 8001fb8:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001fba:	e01b      	b.n	8001ff4 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001fbc:	f7ff f8ae 	bl	800111c <HAL_GetTick>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	d914      	bls.n	8001ff4 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0301 	and.w	r3, r3, #1
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d00d      	beq.n	8001ff4 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fdc:	f043 0210 	orr.w	r2, r3, #16
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fe8:	f043 0201 	orr.w	r2, r3, #1
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e007      	b.n	8002004 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0301 	and.w	r3, r3, #1
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d1dc      	bne.n	8001fbc <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002002:	2300      	movs	r3, #0
}
 8002004:	4618      	mov	r0, r3
 8002006:	3710      	adds	r7, #16
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	8000003f 	.word	0x8000003f

08002010 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b084      	sub	sp, #16
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002018:	2300      	movs	r3, #0
 800201a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	f003 0303 	and.w	r3, r3, #3
 8002026:	2b01      	cmp	r3, #1
 8002028:	d108      	bne.n	800203c <ADC_Disable+0x2c>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0301 	and.w	r3, r3, #1
 8002034:	2b01      	cmp	r3, #1
 8002036:	d101      	bne.n	800203c <ADC_Disable+0x2c>
 8002038:	2301      	movs	r3, #1
 800203a:	e000      	b.n	800203e <ADC_Disable+0x2e>
 800203c:	2300      	movs	r3, #0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d047      	beq.n	80020d2 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	f003 030d 	and.w	r3, r3, #13
 800204c:	2b01      	cmp	r3, #1
 800204e:	d10f      	bne.n	8002070 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	689a      	ldr	r2, [r3, #8]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f042 0202 	orr.w	r2, r2, #2
 800205e:	609a      	str	r2, [r3, #8]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	2203      	movs	r2, #3
 8002066:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002068:	f7ff f858 	bl	800111c <HAL_GetTick>
 800206c:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800206e:	e029      	b.n	80020c4 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002074:	f043 0210 	orr.w	r2, r3, #16
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002080:	f043 0201 	orr.w	r2, r3, #1
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e023      	b.n	80020d4 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800208c:	f7ff f846 	bl	800111c <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	2b02      	cmp	r3, #2
 8002098:	d914      	bls.n	80020c4 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	f003 0301 	and.w	r3, r3, #1
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d10d      	bne.n	80020c4 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ac:	f043 0210 	orr.w	r2, r3, #16
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020b8:	f043 0201 	orr.w	r2, r3, #1
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e007      	b.n	80020d4 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	f003 0301 	and.w	r3, r3, #1
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d0dc      	beq.n	800208c <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80020d2:	2300      	movs	r3, #0
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3710      	adds	r7, #16
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}

080020dc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d101      	bne.n	80020ee <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e0ed      	b.n	80022ca <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d102      	bne.n	8002100 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f7fe fdc6 	bl	8000c8c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f042 0201 	orr.w	r2, r2, #1
 800210e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002110:	f7ff f804 	bl	800111c <HAL_GetTick>
 8002114:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002116:	e012      	b.n	800213e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002118:	f7ff f800 	bl	800111c <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	2b0a      	cmp	r3, #10
 8002124:	d90b      	bls.n	800213e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800212a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2205      	movs	r2, #5
 8002136:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e0c5      	b.n	80022ca <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f003 0301 	and.w	r3, r3, #1
 8002148:	2b00      	cmp	r3, #0
 800214a:	d0e5      	beq.n	8002118 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f022 0202 	bic.w	r2, r2, #2
 800215a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800215c:	f7fe ffde 	bl	800111c <HAL_GetTick>
 8002160:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002162:	e012      	b.n	800218a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002164:	f7fe ffda 	bl	800111c <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	2b0a      	cmp	r3, #10
 8002170:	d90b      	bls.n	800218a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002176:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2205      	movs	r2, #5
 8002182:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e09f      	b.n	80022ca <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f003 0302 	and.w	r3, r3, #2
 8002194:	2b00      	cmp	r3, #0
 8002196:	d1e5      	bne.n	8002164 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	7e1b      	ldrb	r3, [r3, #24]
 800219c:	2b01      	cmp	r3, #1
 800219e:	d108      	bne.n	80021b2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80021ae:	601a      	str	r2, [r3, #0]
 80021b0:	e007      	b.n	80021c2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80021c0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	7e5b      	ldrb	r3, [r3, #25]
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d108      	bne.n	80021dc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80021d8:	601a      	str	r2, [r3, #0]
 80021da:	e007      	b.n	80021ec <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80021ea:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	7e9b      	ldrb	r3, [r3, #26]
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d108      	bne.n	8002206 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f042 0220 	orr.w	r2, r2, #32
 8002202:	601a      	str	r2, [r3, #0]
 8002204:	e007      	b.n	8002216 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f022 0220 	bic.w	r2, r2, #32
 8002214:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	7edb      	ldrb	r3, [r3, #27]
 800221a:	2b01      	cmp	r3, #1
 800221c:	d108      	bne.n	8002230 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f022 0210 	bic.w	r2, r2, #16
 800222c:	601a      	str	r2, [r3, #0]
 800222e:	e007      	b.n	8002240 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f042 0210 	orr.w	r2, r2, #16
 800223e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	7f1b      	ldrb	r3, [r3, #28]
 8002244:	2b01      	cmp	r3, #1
 8002246:	d108      	bne.n	800225a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f042 0208 	orr.w	r2, r2, #8
 8002256:	601a      	str	r2, [r3, #0]
 8002258:	e007      	b.n	800226a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f022 0208 	bic.w	r2, r2, #8
 8002268:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	7f5b      	ldrb	r3, [r3, #29]
 800226e:	2b01      	cmp	r3, #1
 8002270:	d108      	bne.n	8002284 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f042 0204 	orr.w	r2, r2, #4
 8002280:	601a      	str	r2, [r3, #0]
 8002282:	e007      	b.n	8002294 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f022 0204 	bic.w	r2, r2, #4
 8002292:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	689a      	ldr	r2, [r3, #8]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	431a      	orrs	r2, r3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	691b      	ldr	r3, [r3, #16]
 80022a2:	431a      	orrs	r2, r3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	695b      	ldr	r3, [r3, #20]
 80022a8:	ea42 0103 	orr.w	r1, r2, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	1e5a      	subs	r2, r3, #1
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	430a      	orrs	r2, r1
 80022b8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2200      	movs	r2, #0
 80022be:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2201      	movs	r2, #1
 80022c4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80022c8:	2300      	movs	r3, #0
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3710      	adds	r7, #16
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}

080022d2 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80022d2:	b480      	push	{r7}
 80022d4:	b087      	sub	sp, #28
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	6078      	str	r0, [r7, #4]
 80022da:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022e8:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80022ea:	7cfb      	ldrb	r3, [r7, #19]
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d003      	beq.n	80022f8 <HAL_CAN_ConfigFilter+0x26>
 80022f0:	7cfb      	ldrb	r3, [r7, #19]
 80022f2:	2b02      	cmp	r3, #2
 80022f4:	f040 80aa 	bne.w	800244c <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80022fe:	f043 0201 	orr.w	r2, r3, #1
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	695b      	ldr	r3, [r3, #20]
 800230c:	f003 031f 	and.w	r3, r3, #31
 8002310:	2201      	movs	r2, #1
 8002312:	fa02 f303 	lsl.w	r3, r2, r3
 8002316:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	43db      	mvns	r3, r3
 8002322:	401a      	ands	r2, r3
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	69db      	ldr	r3, [r3, #28]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d123      	bne.n	800237a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	43db      	mvns	r3, r3
 800233c:	401a      	ands	r2, r3
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002350:	683a      	ldr	r2, [r7, #0]
 8002352:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002354:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	3248      	adds	r2, #72	@ 0x48
 800235a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800236e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002370:	6979      	ldr	r1, [r7, #20]
 8002372:	3348      	adds	r3, #72	@ 0x48
 8002374:	00db      	lsls	r3, r3, #3
 8002376:	440b      	add	r3, r1
 8002378:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	69db      	ldr	r3, [r3, #28]
 800237e:	2b01      	cmp	r3, #1
 8002380:	d122      	bne.n	80023c8 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	431a      	orrs	r2, r3
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800239e:	683a      	ldr	r2, [r7, #0]
 80023a0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80023a2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	3248      	adds	r2, #72	@ 0x48
 80023a8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	68db      	ldr	r3, [r3, #12]
 80023b6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80023bc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80023be:	6979      	ldr	r1, [r7, #20]
 80023c0:	3348      	adds	r3, #72	@ 0x48
 80023c2:	00db      	lsls	r3, r3, #3
 80023c4:	440b      	add	r3, r1
 80023c6:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	699b      	ldr	r3, [r3, #24]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d109      	bne.n	80023e4 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	43db      	mvns	r3, r3
 80023da:	401a      	ands	r2, r3
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80023e2:	e007      	b.n	80023f4 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	431a      	orrs	r2, r3
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	691b      	ldr	r3, [r3, #16]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d109      	bne.n	8002410 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	43db      	mvns	r3, r3
 8002406:	401a      	ands	r2, r3
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800240e:	e007      	b.n	8002420 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	431a      	orrs	r2, r3
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	6a1b      	ldr	r3, [r3, #32]
 8002424:	2b01      	cmp	r3, #1
 8002426:	d107      	bne.n	8002438 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	431a      	orrs	r2, r3
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800243e:	f023 0201 	bic.w	r2, r3, #1
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8002448:	2300      	movs	r3, #0
 800244a:	e006      	b.n	800245a <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002450:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
  }
}
 800245a:	4618      	mov	r0, r3
 800245c:	371c      	adds	r7, #28
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr

08002466 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002466:	b580      	push	{r7, lr}
 8002468:	b084      	sub	sp, #16
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002474:	b2db      	uxtb	r3, r3
 8002476:	2b01      	cmp	r3, #1
 8002478:	d12e      	bne.n	80024d8 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2202      	movs	r2, #2
 800247e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f022 0201 	bic.w	r2, r2, #1
 8002490:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002492:	f7fe fe43 	bl	800111c <HAL_GetTick>
 8002496:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002498:	e012      	b.n	80024c0 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800249a:	f7fe fe3f 	bl	800111c <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	2b0a      	cmp	r3, #10
 80024a6:	d90b      	bls.n	80024c0 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ac:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2205      	movs	r2, #5
 80024b8:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e012      	b.n	80024e6 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	f003 0301 	and.w	r3, r3, #1
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d1e5      	bne.n	800249a <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2200      	movs	r2, #0
 80024d2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80024d4:	2300      	movs	r3, #0
 80024d6:	e006      	b.n	80024e6 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024dc:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
  }
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3710      	adds	r7, #16
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}

080024ee <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80024ee:	b480      	push	{r7}
 80024f0:	b089      	sub	sp, #36	@ 0x24
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	60f8      	str	r0, [r7, #12]
 80024f6:	60b9      	str	r1, [r7, #8]
 80024f8:	607a      	str	r2, [r7, #4]
 80024fa:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002502:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800250c:	7ffb      	ldrb	r3, [r7, #31]
 800250e:	2b01      	cmp	r3, #1
 8002510:	d003      	beq.n	800251a <HAL_CAN_AddTxMessage+0x2c>
 8002512:	7ffb      	ldrb	r3, [r7, #31]
 8002514:	2b02      	cmp	r3, #2
 8002516:	f040 80ad 	bne.w	8002674 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800251a:	69bb      	ldr	r3, [r7, #24]
 800251c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d10a      	bne.n	800253a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002524:	69bb      	ldr	r3, [r7, #24]
 8002526:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800252a:	2b00      	cmp	r3, #0
 800252c:	d105      	bne.n	800253a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800252e:	69bb      	ldr	r3, [r7, #24]
 8002530:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002534:	2b00      	cmp	r3, #0
 8002536:	f000 8095 	beq.w	8002664 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800253a:	69bb      	ldr	r3, [r7, #24]
 800253c:	0e1b      	lsrs	r3, r3, #24
 800253e:	f003 0303 	and.w	r3, r3, #3
 8002542:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002544:	2201      	movs	r2, #1
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	409a      	lsls	r2, r3
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d10d      	bne.n	8002572 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002560:	68f9      	ldr	r1, [r7, #12]
 8002562:	6809      	ldr	r1, [r1, #0]
 8002564:	431a      	orrs	r2, r3
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	3318      	adds	r3, #24
 800256a:	011b      	lsls	r3, r3, #4
 800256c:	440b      	add	r3, r1
 800256e:	601a      	str	r2, [r3, #0]
 8002570:	e00f      	b.n	8002592 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800257c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002582:	68f9      	ldr	r1, [r7, #12]
 8002584:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002586:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	3318      	adds	r3, #24
 800258c:	011b      	lsls	r3, r3, #4
 800258e:	440b      	add	r3, r1
 8002590:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	6819      	ldr	r1, [r3, #0]
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	691a      	ldr	r2, [r3, #16]
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	3318      	adds	r3, #24
 800259e:	011b      	lsls	r3, r3, #4
 80025a0:	440b      	add	r3, r1
 80025a2:	3304      	adds	r3, #4
 80025a4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	7d1b      	ldrb	r3, [r3, #20]
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d111      	bne.n	80025d2 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	3318      	adds	r3, #24
 80025b6:	011b      	lsls	r3, r3, #4
 80025b8:	4413      	add	r3, r2
 80025ba:	3304      	adds	r3, #4
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	68fa      	ldr	r2, [r7, #12]
 80025c0:	6811      	ldr	r1, [r2, #0]
 80025c2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	3318      	adds	r3, #24
 80025ca:	011b      	lsls	r3, r3, #4
 80025cc:	440b      	add	r3, r1
 80025ce:	3304      	adds	r3, #4
 80025d0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	3307      	adds	r3, #7
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	061a      	lsls	r2, r3, #24
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	3306      	adds	r3, #6
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	041b      	lsls	r3, r3, #16
 80025e2:	431a      	orrs	r2, r3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	3305      	adds	r3, #5
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	021b      	lsls	r3, r3, #8
 80025ec:	4313      	orrs	r3, r2
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	3204      	adds	r2, #4
 80025f2:	7812      	ldrb	r2, [r2, #0]
 80025f4:	4610      	mov	r0, r2
 80025f6:	68fa      	ldr	r2, [r7, #12]
 80025f8:	6811      	ldr	r1, [r2, #0]
 80025fa:	ea43 0200 	orr.w	r2, r3, r0
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	011b      	lsls	r3, r3, #4
 8002602:	440b      	add	r3, r1
 8002604:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8002608:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	3303      	adds	r3, #3
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	061a      	lsls	r2, r3, #24
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	3302      	adds	r3, #2
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	041b      	lsls	r3, r3, #16
 800261a:	431a      	orrs	r2, r3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	3301      	adds	r3, #1
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	021b      	lsls	r3, r3, #8
 8002624:	4313      	orrs	r3, r2
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	7812      	ldrb	r2, [r2, #0]
 800262a:	4610      	mov	r0, r2
 800262c:	68fa      	ldr	r2, [r7, #12]
 800262e:	6811      	ldr	r1, [r2, #0]
 8002630:	ea43 0200 	orr.w	r2, r3, r0
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	011b      	lsls	r3, r3, #4
 8002638:	440b      	add	r3, r1
 800263a:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 800263e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	3318      	adds	r3, #24
 8002648:	011b      	lsls	r3, r3, #4
 800264a:	4413      	add	r3, r2
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	68fa      	ldr	r2, [r7, #12]
 8002650:	6811      	ldr	r1, [r2, #0]
 8002652:	f043 0201 	orr.w	r2, r3, #1
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	3318      	adds	r3, #24
 800265a:	011b      	lsls	r3, r3, #4
 800265c:	440b      	add	r3, r1
 800265e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002660:	2300      	movs	r3, #0
 8002662:	e00e      	b.n	8002682 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002668:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e006      	b.n	8002682 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002678:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
  }
}
 8002682:	4618      	mov	r0, r3
 8002684:	3724      	adds	r7, #36	@ 0x24
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr

0800268e <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 800268e:	b480      	push	{r7}
 8002690:	b085      	sub	sp, #20
 8002692:	af00      	add	r7, sp, #0
 8002694:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8002696:	2300      	movs	r3, #0
 8002698:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026a0:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80026a2:	7afb      	ldrb	r3, [r7, #11]
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d002      	beq.n	80026ae <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80026a8:	7afb      	ldrb	r3, [r7, #11]
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d11d      	bne.n	80026ea <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d002      	beq.n	80026c2 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	3301      	adds	r3, #1
 80026c0:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d002      	beq.n	80026d6 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	3301      	adds	r3, #1
 80026d4:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d002      	beq.n	80026ea <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	3301      	adds	r3, #1
 80026e8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80026ea:	68fb      	ldr	r3, [r7, #12]
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3714      	adds	r7, #20
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr

080026f8 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80026f8:	b480      	push	{r7}
 80026fa:	b087      	sub	sp, #28
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	60f8      	str	r0, [r7, #12]
 8002700:	60b9      	str	r1, [r7, #8]
 8002702:	607a      	str	r2, [r7, #4]
 8002704:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	f893 3020 	ldrb.w	r3, [r3, #32]
 800270c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800270e:	7dfb      	ldrb	r3, [r7, #23]
 8002710:	2b01      	cmp	r3, #1
 8002712:	d003      	beq.n	800271c <HAL_CAN_GetRxMessage+0x24>
 8002714:	7dfb      	ldrb	r3, [r7, #23]
 8002716:	2b02      	cmp	r3, #2
 8002718:	f040 8103 	bne.w	8002922 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d10e      	bne.n	8002740 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	f003 0303 	and.w	r3, r3, #3
 800272c:	2b00      	cmp	r3, #0
 800272e:	d116      	bne.n	800275e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002734:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e0f7      	b.n	8002930 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	691b      	ldr	r3, [r3, #16]
 8002746:	f003 0303 	and.w	r3, r3, #3
 800274a:	2b00      	cmp	r3, #0
 800274c:	d107      	bne.n	800275e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002752:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e0e8      	b.n	8002930 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	331b      	adds	r3, #27
 8002766:	011b      	lsls	r3, r3, #4
 8002768:	4413      	add	r3, r2
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0204 	and.w	r2, r3, #4
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d10c      	bne.n	8002796 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	331b      	adds	r3, #27
 8002784:	011b      	lsls	r3, r3, #4
 8002786:	4413      	add	r3, r2
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	0d5b      	lsrs	r3, r3, #21
 800278c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	601a      	str	r2, [r3, #0]
 8002794:	e00b      	b.n	80027ae <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	331b      	adds	r3, #27
 800279e:	011b      	lsls	r3, r3, #4
 80027a0:	4413      	add	r3, r2
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	08db      	lsrs	r3, r3, #3
 80027a6:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	331b      	adds	r3, #27
 80027b6:	011b      	lsls	r3, r3, #4
 80027b8:	4413      	add	r3, r2
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 0202 	and.w	r2, r3, #2
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	331b      	adds	r3, #27
 80027cc:	011b      	lsls	r3, r3, #4
 80027ce:	4413      	add	r3, r2
 80027d0:	3304      	adds	r3, #4
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0308 	and.w	r3, r3, #8
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d003      	beq.n	80027e4 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2208      	movs	r2, #8
 80027e0:	611a      	str	r2, [r3, #16]
 80027e2:	e00b      	b.n	80027fc <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	331b      	adds	r3, #27
 80027ec:	011b      	lsls	r3, r3, #4
 80027ee:	4413      	add	r3, r2
 80027f0:	3304      	adds	r3, #4
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 020f 	and.w	r2, r3, #15
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	331b      	adds	r3, #27
 8002804:	011b      	lsls	r3, r3, #4
 8002806:	4413      	add	r3, r2
 8002808:	3304      	adds	r3, #4
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	0a1b      	lsrs	r3, r3, #8
 800280e:	b2da      	uxtb	r2, r3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	331b      	adds	r3, #27
 800281c:	011b      	lsls	r3, r3, #4
 800281e:	4413      	add	r3, r2
 8002820:	3304      	adds	r3, #4
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	0c1b      	lsrs	r3, r3, #16
 8002826:	b29a      	uxth	r2, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	011b      	lsls	r3, r3, #4
 8002834:	4413      	add	r3, r2
 8002836:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	b2da      	uxtb	r2, r3
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	011b      	lsls	r3, r3, #4
 800284a:	4413      	add	r3, r2
 800284c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	0a1a      	lsrs	r2, r3, #8
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	3301      	adds	r3, #1
 8002858:	b2d2      	uxtb	r2, r2
 800285a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	011b      	lsls	r3, r3, #4
 8002864:	4413      	add	r3, r2
 8002866:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	0c1a      	lsrs	r2, r3, #16
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	3302      	adds	r3, #2
 8002872:	b2d2      	uxtb	r2, r2
 8002874:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	011b      	lsls	r3, r3, #4
 800287e:	4413      	add	r3, r2
 8002880:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	0e1a      	lsrs	r2, r3, #24
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	3303      	adds	r3, #3
 800288c:	b2d2      	uxtb	r2, r2
 800288e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	011b      	lsls	r3, r3, #4
 8002898:	4413      	add	r3, r2
 800289a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	3304      	adds	r3, #4
 80028a4:	b2d2      	uxtb	r2, r2
 80028a6:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	011b      	lsls	r3, r3, #4
 80028b0:	4413      	add	r3, r2
 80028b2:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	0a1a      	lsrs	r2, r3, #8
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	3305      	adds	r3, #5
 80028be:	b2d2      	uxtb	r2, r2
 80028c0:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	011b      	lsls	r3, r3, #4
 80028ca:	4413      	add	r3, r2
 80028cc:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	0c1a      	lsrs	r2, r3, #16
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	3306      	adds	r3, #6
 80028d8:	b2d2      	uxtb	r2, r2
 80028da:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	011b      	lsls	r3, r3, #4
 80028e4:	4413      	add	r3, r2
 80028e6:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	0e1a      	lsrs	r2, r3, #24
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	3307      	adds	r3, #7
 80028f2:	b2d2      	uxtb	r2, r2
 80028f4:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d108      	bne.n	800290e <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	68da      	ldr	r2, [r3, #12]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f042 0220 	orr.w	r2, r2, #32
 800290a:	60da      	str	r2, [r3, #12]
 800290c:	e007      	b.n	800291e <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	691a      	ldr	r2, [r3, #16]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f042 0220 	orr.w	r2, r2, #32
 800291c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800291e:	2300      	movs	r3, #0
 8002920:	e006      	b.n	8002930 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002926:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
  }
}
 8002930:	4618      	mov	r0, r3
 8002932:	371c      	adds	r7, #28
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr

0800293c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800293c:	b480      	push	{r7}
 800293e:	b085      	sub	sp, #20
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	f893 3020 	ldrb.w	r3, [r3, #32]
 800294c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800294e:	7bfb      	ldrb	r3, [r7, #15]
 8002950:	2b01      	cmp	r3, #1
 8002952:	d002      	beq.n	800295a <HAL_CAN_ActivateNotification+0x1e>
 8002954:	7bfb      	ldrb	r3, [r7, #15]
 8002956:	2b02      	cmp	r3, #2
 8002958:	d109      	bne.n	800296e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	6959      	ldr	r1, [r3, #20]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	683a      	ldr	r2, [r7, #0]
 8002966:	430a      	orrs	r2, r1
 8002968:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800296a:	2300      	movs	r3, #0
 800296c:	e006      	b.n	800297c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002972:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
  }
}
 800297c:	4618      	mov	r0, r3
 800297e:	3714      	adds	r7, #20
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr

08002988 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b08a      	sub	sp, #40	@ 0x28
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002990:	2300      	movs	r3, #0
 8002992:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	695b      	ldr	r3, [r3, #20]
 800299a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	691b      	ldr	r3, [r3, #16]
 80029ba:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	699b      	ldr	r3, [r3, #24]
 80029c2:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80029c4:	6a3b      	ldr	r3, [r7, #32]
 80029c6:	f003 0301 	and.w	r3, r3, #1
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d07c      	beq.n	8002ac8 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80029ce:	69bb      	ldr	r3, [r7, #24]
 80029d0:	f003 0301 	and.w	r3, r3, #1
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d023      	beq.n	8002a20 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2201      	movs	r2, #1
 80029de:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80029e0:	69bb      	ldr	r3, [r7, #24]
 80029e2:	f003 0302 	and.w	r3, r3, #2
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d003      	beq.n	80029f2 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f000 f983 	bl	8002cf6 <HAL_CAN_TxMailbox0CompleteCallback>
 80029f0:	e016      	b.n	8002a20 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80029f2:	69bb      	ldr	r3, [r7, #24]
 80029f4:	f003 0304 	and.w	r3, r3, #4
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d004      	beq.n	8002a06 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80029fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029fe:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002a02:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a04:	e00c      	b.n	8002a20 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002a06:	69bb      	ldr	r3, [r7, #24]
 8002a08:	f003 0308 	and.w	r3, r3, #8
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d004      	beq.n	8002a1a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a12:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002a16:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a18:	e002      	b.n	8002a20 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f000 f989 	bl	8002d32 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d024      	beq.n	8002a74 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002a32:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002a34:	69bb      	ldr	r3, [r7, #24]
 8002a36:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d003      	beq.n	8002a46 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f000 f963 	bl	8002d0a <HAL_CAN_TxMailbox1CompleteCallback>
 8002a44:	e016      	b.n	8002a74 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002a46:	69bb      	ldr	r3, [r7, #24]
 8002a48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d004      	beq.n	8002a5a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a52:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002a56:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a58:	e00c      	b.n	8002a74 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002a5a:	69bb      	ldr	r3, [r7, #24]
 8002a5c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d004      	beq.n	8002a6e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a66:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a6c:	e002      	b.n	8002a74 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f000 f969 	bl	8002d46 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002a74:	69bb      	ldr	r3, [r7, #24]
 8002a76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d024      	beq.n	8002ac8 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002a86:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002a88:	69bb      	ldr	r3, [r7, #24]
 8002a8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d003      	beq.n	8002a9a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f000 f943 	bl	8002d1e <HAL_CAN_TxMailbox2CompleteCallback>
 8002a98:	e016      	b.n	8002ac8 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002a9a:	69bb      	ldr	r3, [r7, #24]
 8002a9c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d004      	beq.n	8002aae <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aa6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002aaa:	627b      	str	r3, [r7, #36]	@ 0x24
 8002aac:	e00c      	b.n	8002ac8 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002aae:	69bb      	ldr	r3, [r7, #24]
 8002ab0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d004      	beq.n	8002ac2 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002abe:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ac0:	e002      	b.n	8002ac8 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f000 f949 	bl	8002d5a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002ac8:	6a3b      	ldr	r3, [r7, #32]
 8002aca:	f003 0308 	and.w	r3, r3, #8
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d00c      	beq.n	8002aec <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	f003 0310 	and.w	r3, r3, #16
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d007      	beq.n	8002aec <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ade:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ae2:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	2210      	movs	r2, #16
 8002aea:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002aec:	6a3b      	ldr	r3, [r7, #32]
 8002aee:	f003 0304 	and.w	r3, r3, #4
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d00b      	beq.n	8002b0e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	f003 0308 	and.w	r3, r3, #8
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d006      	beq.n	8002b0e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	2208      	movs	r2, #8
 8002b06:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	f000 f930 	bl	8002d6e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002b0e:	6a3b      	ldr	r3, [r7, #32]
 8002b10:	f003 0302 	and.w	r3, r3, #2
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d009      	beq.n	8002b2c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	f003 0303 	and.w	r3, r3, #3
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d002      	beq.n	8002b2c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f7fd fc36 	bl	8000398 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002b2c:	6a3b      	ldr	r3, [r7, #32]
 8002b2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d00c      	beq.n	8002b50 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	f003 0310 	and.w	r3, r3, #16
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d007      	beq.n	8002b50 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b42:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002b46:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	2210      	movs	r2, #16
 8002b4e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002b50:	6a3b      	ldr	r3, [r7, #32]
 8002b52:	f003 0320 	and.w	r3, r3, #32
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d00b      	beq.n	8002b72 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	f003 0308 	and.w	r3, r3, #8
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d006      	beq.n	8002b72 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	2208      	movs	r2, #8
 8002b6a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	f000 f912 	bl	8002d96 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002b72:	6a3b      	ldr	r3, [r7, #32]
 8002b74:	f003 0310 	and.w	r3, r3, #16
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d009      	beq.n	8002b90 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	691b      	ldr	r3, [r3, #16]
 8002b82:	f003 0303 	and.w	r3, r3, #3
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d002      	beq.n	8002b90 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f000 f8f9 	bl	8002d82 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002b90:	6a3b      	ldr	r3, [r7, #32]
 8002b92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d00b      	beq.n	8002bb2 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	f003 0310 	and.w	r3, r3, #16
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d006      	beq.n	8002bb2 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	2210      	movs	r2, #16
 8002baa:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f000 f8fc 	bl	8002daa <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002bb2:	6a3b      	ldr	r3, [r7, #32]
 8002bb4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d00b      	beq.n	8002bd4 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	f003 0308 	and.w	r3, r3, #8
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d006      	beq.n	8002bd4 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	2208      	movs	r2, #8
 8002bcc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f000 f8f5 	bl	8002dbe <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002bd4:	6a3b      	ldr	r3, [r7, #32]
 8002bd6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d07b      	beq.n	8002cd6 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	f003 0304 	and.w	r3, r3, #4
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d072      	beq.n	8002cce <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002be8:	6a3b      	ldr	r3, [r7, #32]
 8002bea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d008      	beq.n	8002c04 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d003      	beq.n	8002c04 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bfe:	f043 0301 	orr.w	r3, r3, #1
 8002c02:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002c04:	6a3b      	ldr	r3, [r7, #32]
 8002c06:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d008      	beq.n	8002c20 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d003      	beq.n	8002c20 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c1a:	f043 0302 	orr.w	r3, r3, #2
 8002c1e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002c20:	6a3b      	ldr	r3, [r7, #32]
 8002c22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d008      	beq.n	8002c3c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d003      	beq.n	8002c3c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c36:	f043 0304 	orr.w	r3, r3, #4
 8002c3a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002c3c:	6a3b      	ldr	r3, [r7, #32]
 8002c3e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d043      	beq.n	8002cce <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d03e      	beq.n	8002cce <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002c56:	2b60      	cmp	r3, #96	@ 0x60
 8002c58:	d02b      	beq.n	8002cb2 <HAL_CAN_IRQHandler+0x32a>
 8002c5a:	2b60      	cmp	r3, #96	@ 0x60
 8002c5c:	d82e      	bhi.n	8002cbc <HAL_CAN_IRQHandler+0x334>
 8002c5e:	2b50      	cmp	r3, #80	@ 0x50
 8002c60:	d022      	beq.n	8002ca8 <HAL_CAN_IRQHandler+0x320>
 8002c62:	2b50      	cmp	r3, #80	@ 0x50
 8002c64:	d82a      	bhi.n	8002cbc <HAL_CAN_IRQHandler+0x334>
 8002c66:	2b40      	cmp	r3, #64	@ 0x40
 8002c68:	d019      	beq.n	8002c9e <HAL_CAN_IRQHandler+0x316>
 8002c6a:	2b40      	cmp	r3, #64	@ 0x40
 8002c6c:	d826      	bhi.n	8002cbc <HAL_CAN_IRQHandler+0x334>
 8002c6e:	2b30      	cmp	r3, #48	@ 0x30
 8002c70:	d010      	beq.n	8002c94 <HAL_CAN_IRQHandler+0x30c>
 8002c72:	2b30      	cmp	r3, #48	@ 0x30
 8002c74:	d822      	bhi.n	8002cbc <HAL_CAN_IRQHandler+0x334>
 8002c76:	2b10      	cmp	r3, #16
 8002c78:	d002      	beq.n	8002c80 <HAL_CAN_IRQHandler+0x2f8>
 8002c7a:	2b20      	cmp	r3, #32
 8002c7c:	d005      	beq.n	8002c8a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002c7e:	e01d      	b.n	8002cbc <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c82:	f043 0308 	orr.w	r3, r3, #8
 8002c86:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002c88:	e019      	b.n	8002cbe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c8c:	f043 0310 	orr.w	r3, r3, #16
 8002c90:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002c92:	e014      	b.n	8002cbe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c96:	f043 0320 	orr.w	r3, r3, #32
 8002c9a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002c9c:	e00f      	b.n	8002cbe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ca0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002ca4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002ca6:	e00a      	b.n	8002cbe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002caa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002cae:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002cb0:	e005      	b.n	8002cbe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cb4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cb8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002cba:	e000      	b.n	8002cbe <HAL_CAN_IRQHandler+0x336>
            break;
 8002cbc:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	699a      	ldr	r2, [r3, #24]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002ccc:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	2204      	movs	r2, #4
 8002cd4:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d008      	beq.n	8002cee <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ce2:	431a      	orrs	r2, r3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f000 f872 	bl	8002dd2 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002cee:	bf00      	nop
 8002cf0:	3728      	adds	r7, #40	@ 0x28
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}

08002cf6 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002cf6:	b480      	push	{r7}
 8002cf8:	b083      	sub	sp, #12
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002cfe:	bf00      	nop
 8002d00:	370c      	adds	r7, #12
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr

08002d0a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002d0a:	b480      	push	{r7}
 8002d0c:	b083      	sub	sp, #12
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002d12:	bf00      	nop
 8002d14:	370c      	adds	r7, #12
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr

08002d1e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002d1e:	b480      	push	{r7}
 8002d20:	b083      	sub	sp, #12
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002d26:	bf00      	nop
 8002d28:	370c      	adds	r7, #12
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr

08002d32 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002d32:	b480      	push	{r7}
 8002d34:	b083      	sub	sp, #12
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002d3a:	bf00      	nop
 8002d3c:	370c      	adds	r7, #12
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr

08002d46 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002d46:	b480      	push	{r7}
 8002d48:	b083      	sub	sp, #12
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002d4e:	bf00      	nop
 8002d50:	370c      	adds	r7, #12
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr

08002d5a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002d5a:	b480      	push	{r7}
 8002d5c:	b083      	sub	sp, #12
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002d62:	bf00      	nop
 8002d64:	370c      	adds	r7, #12
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr

08002d6e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002d6e:	b480      	push	{r7}
 8002d70:	b083      	sub	sp, #12
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002d76:	bf00      	nop
 8002d78:	370c      	adds	r7, #12
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr

08002d82 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002d82:	b480      	push	{r7}
 8002d84:	b083      	sub	sp, #12
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002d8a:	bf00      	nop
 8002d8c:	370c      	adds	r7, #12
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr

08002d96 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002d96:	b480      	push	{r7}
 8002d98:	b083      	sub	sp, #12
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002d9e:	bf00      	nop
 8002da0:	370c      	adds	r7, #12
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr

08002daa <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002daa:	b480      	push	{r7}
 8002dac:	b083      	sub	sp, #12
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002db2:	bf00      	nop
 8002db4:	370c      	adds	r7, #12
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr

08002dbe <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002dbe:	b480      	push	{r7}
 8002dc0:	b083      	sub	sp, #12
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002dc6:	bf00      	nop
 8002dc8:	370c      	adds	r7, #12
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr

08002dd2 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002dd2:	b480      	push	{r7}
 8002dd4:	b083      	sub	sp, #12
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002dda:	bf00      	nop
 8002ddc:	370c      	adds	r7, #12
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr
	...

08002de8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b085      	sub	sp, #20
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	f003 0307 	and.w	r3, r3, #7
 8002df6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002df8:	4b0c      	ldr	r3, [pc, #48]	@ (8002e2c <__NVIC_SetPriorityGrouping+0x44>)
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002dfe:	68ba      	ldr	r2, [r7, #8]
 8002e00:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002e04:	4013      	ands	r3, r2
 8002e06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e10:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002e14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e1a:	4a04      	ldr	r2, [pc, #16]	@ (8002e2c <__NVIC_SetPriorityGrouping+0x44>)
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	60d3      	str	r3, [r2, #12]
}
 8002e20:	bf00      	nop
 8002e22:	3714      	adds	r7, #20
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr
 8002e2c:	e000ed00 	.word	0xe000ed00

08002e30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e30:	b480      	push	{r7}
 8002e32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e34:	4b04      	ldr	r3, [pc, #16]	@ (8002e48 <__NVIC_GetPriorityGrouping+0x18>)
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	0a1b      	lsrs	r3, r3, #8
 8002e3a:	f003 0307 	and.w	r3, r3, #7
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr
 8002e48:	e000ed00 	.word	0xe000ed00

08002e4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	4603      	mov	r3, r0
 8002e54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	db0b      	blt.n	8002e76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e5e:	79fb      	ldrb	r3, [r7, #7]
 8002e60:	f003 021f 	and.w	r2, r3, #31
 8002e64:	4907      	ldr	r1, [pc, #28]	@ (8002e84 <__NVIC_EnableIRQ+0x38>)
 8002e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e6a:	095b      	lsrs	r3, r3, #5
 8002e6c:	2001      	movs	r0, #1
 8002e6e:	fa00 f202 	lsl.w	r2, r0, r2
 8002e72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e76:	bf00      	nop
 8002e78:	370c      	adds	r7, #12
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr
 8002e82:	bf00      	nop
 8002e84:	e000e100 	.word	0xe000e100

08002e88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b083      	sub	sp, #12
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	4603      	mov	r3, r0
 8002e90:	6039      	str	r1, [r7, #0]
 8002e92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	db0a      	blt.n	8002eb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	b2da      	uxtb	r2, r3
 8002ea0:	490c      	ldr	r1, [pc, #48]	@ (8002ed4 <__NVIC_SetPriority+0x4c>)
 8002ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ea6:	0112      	lsls	r2, r2, #4
 8002ea8:	b2d2      	uxtb	r2, r2
 8002eaa:	440b      	add	r3, r1
 8002eac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002eb0:	e00a      	b.n	8002ec8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	b2da      	uxtb	r2, r3
 8002eb6:	4908      	ldr	r1, [pc, #32]	@ (8002ed8 <__NVIC_SetPriority+0x50>)
 8002eb8:	79fb      	ldrb	r3, [r7, #7]
 8002eba:	f003 030f 	and.w	r3, r3, #15
 8002ebe:	3b04      	subs	r3, #4
 8002ec0:	0112      	lsls	r2, r2, #4
 8002ec2:	b2d2      	uxtb	r2, r2
 8002ec4:	440b      	add	r3, r1
 8002ec6:	761a      	strb	r2, [r3, #24]
}
 8002ec8:	bf00      	nop
 8002eca:	370c      	adds	r7, #12
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr
 8002ed4:	e000e100 	.word	0xe000e100
 8002ed8:	e000ed00 	.word	0xe000ed00

08002edc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b089      	sub	sp, #36	@ 0x24
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	60f8      	str	r0, [r7, #12]
 8002ee4:	60b9      	str	r1, [r7, #8]
 8002ee6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	f003 0307 	and.w	r3, r3, #7
 8002eee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	f1c3 0307 	rsb	r3, r3, #7
 8002ef6:	2b04      	cmp	r3, #4
 8002ef8:	bf28      	it	cs
 8002efa:	2304      	movcs	r3, #4
 8002efc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	3304      	adds	r3, #4
 8002f02:	2b06      	cmp	r3, #6
 8002f04:	d902      	bls.n	8002f0c <NVIC_EncodePriority+0x30>
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	3b03      	subs	r3, #3
 8002f0a:	e000      	b.n	8002f0e <NVIC_EncodePriority+0x32>
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f10:	f04f 32ff 	mov.w	r2, #4294967295
 8002f14:	69bb      	ldr	r3, [r7, #24]
 8002f16:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1a:	43da      	mvns	r2, r3
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	401a      	ands	r2, r3
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f24:	f04f 31ff 	mov.w	r1, #4294967295
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f2e:	43d9      	mvns	r1, r3
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f34:	4313      	orrs	r3, r2
         );
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3724      	adds	r7, #36	@ 0x24
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr
	...

08002f44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	3b01      	subs	r3, #1
 8002f50:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f54:	d301      	bcc.n	8002f5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f56:	2301      	movs	r3, #1
 8002f58:	e00f      	b.n	8002f7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f5a:	4a0a      	ldr	r2, [pc, #40]	@ (8002f84 <SysTick_Config+0x40>)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	3b01      	subs	r3, #1
 8002f60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f62:	210f      	movs	r1, #15
 8002f64:	f04f 30ff 	mov.w	r0, #4294967295
 8002f68:	f7ff ff8e 	bl	8002e88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f6c:	4b05      	ldr	r3, [pc, #20]	@ (8002f84 <SysTick_Config+0x40>)
 8002f6e:	2200      	movs	r2, #0
 8002f70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f72:	4b04      	ldr	r3, [pc, #16]	@ (8002f84 <SysTick_Config+0x40>)
 8002f74:	2207      	movs	r2, #7
 8002f76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f78:	2300      	movs	r3, #0
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3708      	adds	r7, #8
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	e000e010 	.word	0xe000e010

08002f88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f7ff ff29 	bl	8002de8 <__NVIC_SetPriorityGrouping>
}
 8002f96:	bf00      	nop
 8002f98:	3708      	adds	r7, #8
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}

08002f9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f9e:	b580      	push	{r7, lr}
 8002fa0:	b086      	sub	sp, #24
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	60b9      	str	r1, [r7, #8]
 8002fa8:	607a      	str	r2, [r7, #4]
 8002faa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002fac:	2300      	movs	r3, #0
 8002fae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002fb0:	f7ff ff3e 	bl	8002e30 <__NVIC_GetPriorityGrouping>
 8002fb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	68b9      	ldr	r1, [r7, #8]
 8002fba:	6978      	ldr	r0, [r7, #20]
 8002fbc:	f7ff ff8e 	bl	8002edc <NVIC_EncodePriority>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fc6:	4611      	mov	r1, r2
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f7ff ff5d 	bl	8002e88 <__NVIC_SetPriority>
}
 8002fce:	bf00      	nop
 8002fd0:	3718      	adds	r7, #24
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}

08002fd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fd6:	b580      	push	{r7, lr}
 8002fd8:	b082      	sub	sp, #8
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	4603      	mov	r3, r0
 8002fde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fe0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f7ff ff31 	bl	8002e4c <__NVIC_EnableIRQ>
}
 8002fea:	bf00      	nop
 8002fec:	3708      	adds	r7, #8
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}

08002ff2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ff2:	b580      	push	{r7, lr}
 8002ff4:	b082      	sub	sp, #8
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f7ff ffa2 	bl	8002f44 <SysTick_Config>
 8003000:	4603      	mov	r3, r0
}
 8003002:	4618      	mov	r0, r3
 8003004:	3708      	adds	r7, #8
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}

0800300a <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800300a:	b580      	push	{r7, lr}
 800300c:	b084      	sub	sp, #16
 800300e:	af00      	add	r7, sp, #0
 8003010:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003012:	2300      	movs	r3, #0
 8003014:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d101      	bne.n	8003020 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	e037      	b.n	8003090 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2202      	movs	r2, #2
 8003024:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003036:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800303a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003044:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	68db      	ldr	r3, [r3, #12]
 800304a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003050:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	695b      	ldr	r3, [r3, #20]
 8003056:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800305c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	69db      	ldr	r3, [r3, #28]
 8003062:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003064:	68fa      	ldr	r2, [r7, #12]
 8003066:	4313      	orrs	r3, r2
 8003068:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	68fa      	ldr	r2, [r7, #12]
 8003070:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 f940 	bl	80032f8 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2201      	movs	r2, #1
 8003082:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2200      	movs	r2, #0
 800308a:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800308e:	2300      	movs	r3, #0
}
 8003090:	4618      	mov	r0, r3
 8003092:	3710      	adds	r7, #16
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}

08003098 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b086      	sub	sp, #24
 800309c:	af00      	add	r7, sp, #0
 800309e:	60f8      	str	r0, [r7, #12]
 80030a0:	60b9      	str	r1, [r7, #8]
 80030a2:	607a      	str	r2, [r7, #4]
 80030a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030a6:	2300      	movs	r3, #0
 80030a8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d101      	bne.n	80030b8 <HAL_DMA_Start_IT+0x20>
 80030b4:	2302      	movs	r3, #2
 80030b6:	e04a      	b.n	800314e <HAL_DMA_Start_IT+0xb6>
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d13a      	bne.n	8003140 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2202      	movs	r2, #2
 80030ce:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2200      	movs	r2, #0
 80030d6:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f022 0201 	bic.w	r2, r2, #1
 80030e6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	68b9      	ldr	r1, [r7, #8]
 80030ee:	68f8      	ldr	r0, [r7, #12]
 80030f0:	f000 f8d4 	bl	800329c <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d008      	beq.n	800310e <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f042 020e 	orr.w	r2, r2, #14
 800310a:	601a      	str	r2, [r3, #0]
 800310c:	e00f      	b.n	800312e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f042 020a 	orr.w	r2, r2, #10
 800311c:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f022 0204 	bic.w	r2, r2, #4
 800312c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f042 0201 	orr.w	r2, r2, #1
 800313c:	601a      	str	r2, [r3, #0]
 800313e:	e005      	b.n	800314c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2200      	movs	r2, #0
 8003144:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003148:	2302      	movs	r3, #2
 800314a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800314c:	7dfb      	ldrb	r3, [r7, #23]
}
 800314e:	4618      	mov	r0, r3
 8003150:	3718      	adds	r7, #24
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}

08003156 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003156:	b580      	push	{r7, lr}
 8003158:	b084      	sub	sp, #16
 800315a:	af00      	add	r7, sp, #0
 800315c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003172:	2204      	movs	r2, #4
 8003174:	409a      	lsls	r2, r3
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	4013      	ands	r3, r2
 800317a:	2b00      	cmp	r3, #0
 800317c:	d024      	beq.n	80031c8 <HAL_DMA_IRQHandler+0x72>
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	f003 0304 	and.w	r3, r3, #4
 8003184:	2b00      	cmp	r3, #0
 8003186:	d01f      	beq.n	80031c8 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0320 	and.w	r3, r3, #32
 8003192:	2b00      	cmp	r3, #0
 8003194:	d107      	bne.n	80031a6 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f022 0204 	bic.w	r2, r2, #4
 80031a4:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031ae:	2104      	movs	r1, #4
 80031b0:	fa01 f202 	lsl.w	r2, r1, r2
 80031b4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d06a      	beq.n	8003294 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80031c6:	e065      	b.n	8003294 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031cc:	2202      	movs	r2, #2
 80031ce:	409a      	lsls	r2, r3
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	4013      	ands	r3, r2
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d02c      	beq.n	8003232 <HAL_DMA_IRQHandler+0xdc>
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	f003 0302 	and.w	r3, r3, #2
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d027      	beq.n	8003232 <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 0320 	and.w	r3, r3, #32
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d10b      	bne.n	8003208 <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f022 020a 	bic.w	r2, r2, #10
 80031fe:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003210:	2102      	movs	r1, #2
 8003212:	fa01 f202 	lsl.w	r2, r1, r2
 8003216:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2200      	movs	r2, #0
 800321c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003224:	2b00      	cmp	r3, #0
 8003226:	d035      	beq.n	8003294 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003230:	e030      	b.n	8003294 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003236:	2208      	movs	r2, #8
 8003238:	409a      	lsls	r2, r3
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	4013      	ands	r3, r2
 800323e:	2b00      	cmp	r3, #0
 8003240:	d028      	beq.n	8003294 <HAL_DMA_IRQHandler+0x13e>
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	f003 0308 	and.w	r3, r3, #8
 8003248:	2b00      	cmp	r3, #0
 800324a:	d023      	beq.n	8003294 <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f022 020e 	bic.w	r2, r2, #14
 800325a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003264:	2101      	movs	r1, #1
 8003266:	fa01 f202 	lsl.w	r2, r1, r2
 800326a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2201      	movs	r2, #1
 8003270:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2201      	movs	r2, #1
 8003276:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003286:	2b00      	cmp	r3, #0
 8003288:	d004      	beq.n	8003294 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	4798      	blx	r3
    }
  }
}
 8003292:	e7ff      	b.n	8003294 <HAL_DMA_IRQHandler+0x13e>
 8003294:	bf00      	nop
 8003296:	3710      	adds	r7, #16
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}

0800329c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800329c:	b480      	push	{r7}
 800329e:	b085      	sub	sp, #20
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	60f8      	str	r0, [r7, #12]
 80032a4:	60b9      	str	r1, [r7, #8]
 80032a6:	607a      	str	r2, [r7, #4]
 80032a8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032b2:	2101      	movs	r1, #1
 80032b4:	fa01 f202 	lsl.w	r2, r1, r2
 80032b8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	683a      	ldr	r2, [r7, #0]
 80032c0:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	2b10      	cmp	r3, #16
 80032c8:	d108      	bne.n	80032dc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	68ba      	ldr	r2, [r7, #8]
 80032d8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80032da:	e007      	b.n	80032ec <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	68ba      	ldr	r2, [r7, #8]
 80032e2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	60da      	str	r2, [r3, #12]
}
 80032ec:	bf00      	nop
 80032ee:	3714      	adds	r7, #20
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr

080032f8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	461a      	mov	r2, r3
 8003306:	4b09      	ldr	r3, [pc, #36]	@ (800332c <DMA_CalcBaseAndBitshift+0x34>)
 8003308:	4413      	add	r3, r2
 800330a:	4a09      	ldr	r2, [pc, #36]	@ (8003330 <DMA_CalcBaseAndBitshift+0x38>)
 800330c:	fba2 2303 	umull	r2, r3, r2, r3
 8003310:	091b      	lsrs	r3, r3, #4
 8003312:	009a      	lsls	r2, r3, #2
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	4a06      	ldr	r2, [pc, #24]	@ (8003334 <DMA_CalcBaseAndBitshift+0x3c>)
 800331c:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 800331e:	bf00      	nop
 8003320:	370c      	adds	r7, #12
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr
 800332a:	bf00      	nop
 800332c:	bffdfff8 	.word	0xbffdfff8
 8003330:	cccccccd 	.word	0xcccccccd
 8003334:	40020000 	.word	0x40020000

08003338 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003338:	b480      	push	{r7}
 800333a:	b087      	sub	sp, #28
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003342:	2300      	movs	r3, #0
 8003344:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003346:	e14e      	b.n	80035e6 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	2101      	movs	r1, #1
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	fa01 f303 	lsl.w	r3, r1, r3
 8003354:	4013      	ands	r3, r2
 8003356:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2b00      	cmp	r3, #0
 800335c:	f000 8140 	beq.w	80035e0 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f003 0303 	and.w	r3, r3, #3
 8003368:	2b01      	cmp	r3, #1
 800336a:	d005      	beq.n	8003378 <HAL_GPIO_Init+0x40>
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f003 0303 	and.w	r3, r3, #3
 8003374:	2b02      	cmp	r3, #2
 8003376:	d130      	bne.n	80033da <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	005b      	lsls	r3, r3, #1
 8003382:	2203      	movs	r2, #3
 8003384:	fa02 f303 	lsl.w	r3, r2, r3
 8003388:	43db      	mvns	r3, r3
 800338a:	693a      	ldr	r2, [r7, #16]
 800338c:	4013      	ands	r3, r2
 800338e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	68da      	ldr	r2, [r3, #12]
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	005b      	lsls	r3, r3, #1
 8003398:	fa02 f303 	lsl.w	r3, r2, r3
 800339c:	693a      	ldr	r2, [r7, #16]
 800339e:	4313      	orrs	r3, r2
 80033a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	693a      	ldr	r2, [r7, #16]
 80033a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80033ae:	2201      	movs	r2, #1
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	fa02 f303 	lsl.w	r3, r2, r3
 80033b6:	43db      	mvns	r3, r3
 80033b8:	693a      	ldr	r2, [r7, #16]
 80033ba:	4013      	ands	r3, r2
 80033bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	091b      	lsrs	r3, r3, #4
 80033c4:	f003 0201 	and.w	r2, r3, #1
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	fa02 f303 	lsl.w	r3, r2, r3
 80033ce:	693a      	ldr	r2, [r7, #16]
 80033d0:	4313      	orrs	r3, r2
 80033d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	693a      	ldr	r2, [r7, #16]
 80033d8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	f003 0303 	and.w	r3, r3, #3
 80033e2:	2b03      	cmp	r3, #3
 80033e4:	d017      	beq.n	8003416 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	68db      	ldr	r3, [r3, #12]
 80033ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	005b      	lsls	r3, r3, #1
 80033f0:	2203      	movs	r2, #3
 80033f2:	fa02 f303 	lsl.w	r3, r2, r3
 80033f6:	43db      	mvns	r3, r3
 80033f8:	693a      	ldr	r2, [r7, #16]
 80033fa:	4013      	ands	r3, r2
 80033fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	689a      	ldr	r2, [r3, #8]
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	005b      	lsls	r3, r3, #1
 8003406:	fa02 f303 	lsl.w	r3, r2, r3
 800340a:	693a      	ldr	r2, [r7, #16]
 800340c:	4313      	orrs	r3, r2
 800340e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	693a      	ldr	r2, [r7, #16]
 8003414:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	f003 0303 	and.w	r3, r3, #3
 800341e:	2b02      	cmp	r3, #2
 8003420:	d123      	bne.n	800346a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	08da      	lsrs	r2, r3, #3
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	3208      	adds	r2, #8
 800342a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800342e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	f003 0307 	and.w	r3, r3, #7
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	220f      	movs	r2, #15
 800343a:	fa02 f303 	lsl.w	r3, r2, r3
 800343e:	43db      	mvns	r3, r3
 8003440:	693a      	ldr	r2, [r7, #16]
 8003442:	4013      	ands	r3, r2
 8003444:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	691a      	ldr	r2, [r3, #16]
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	f003 0307 	and.w	r3, r3, #7
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	fa02 f303 	lsl.w	r3, r2, r3
 8003456:	693a      	ldr	r2, [r7, #16]
 8003458:	4313      	orrs	r3, r2
 800345a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	08da      	lsrs	r2, r3, #3
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	3208      	adds	r2, #8
 8003464:	6939      	ldr	r1, [r7, #16]
 8003466:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	005b      	lsls	r3, r3, #1
 8003474:	2203      	movs	r2, #3
 8003476:	fa02 f303 	lsl.w	r3, r2, r3
 800347a:	43db      	mvns	r3, r3
 800347c:	693a      	ldr	r2, [r7, #16]
 800347e:	4013      	ands	r3, r2
 8003480:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	f003 0203 	and.w	r2, r3, #3
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	005b      	lsls	r3, r3, #1
 800348e:	fa02 f303 	lsl.w	r3, r2, r3
 8003492:	693a      	ldr	r2, [r7, #16]
 8003494:	4313      	orrs	r3, r2
 8003496:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	693a      	ldr	r2, [r7, #16]
 800349c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	f000 809a 	beq.w	80035e0 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034ac:	4b55      	ldr	r3, [pc, #340]	@ (8003604 <HAL_GPIO_Init+0x2cc>)
 80034ae:	699b      	ldr	r3, [r3, #24]
 80034b0:	4a54      	ldr	r2, [pc, #336]	@ (8003604 <HAL_GPIO_Init+0x2cc>)
 80034b2:	f043 0301 	orr.w	r3, r3, #1
 80034b6:	6193      	str	r3, [r2, #24]
 80034b8:	4b52      	ldr	r3, [pc, #328]	@ (8003604 <HAL_GPIO_Init+0x2cc>)
 80034ba:	699b      	ldr	r3, [r3, #24]
 80034bc:	f003 0301 	and.w	r3, r3, #1
 80034c0:	60bb      	str	r3, [r7, #8]
 80034c2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80034c4:	4a50      	ldr	r2, [pc, #320]	@ (8003608 <HAL_GPIO_Init+0x2d0>)
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	089b      	lsrs	r3, r3, #2
 80034ca:	3302      	adds	r3, #2
 80034cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	f003 0303 	and.w	r3, r3, #3
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	220f      	movs	r2, #15
 80034dc:	fa02 f303 	lsl.w	r3, r2, r3
 80034e0:	43db      	mvns	r3, r3
 80034e2:	693a      	ldr	r2, [r7, #16]
 80034e4:	4013      	ands	r3, r2
 80034e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80034ee:	d013      	beq.n	8003518 <HAL_GPIO_Init+0x1e0>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	4a46      	ldr	r2, [pc, #280]	@ (800360c <HAL_GPIO_Init+0x2d4>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d00d      	beq.n	8003514 <HAL_GPIO_Init+0x1dc>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	4a45      	ldr	r2, [pc, #276]	@ (8003610 <HAL_GPIO_Init+0x2d8>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d007      	beq.n	8003510 <HAL_GPIO_Init+0x1d8>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	4a44      	ldr	r2, [pc, #272]	@ (8003614 <HAL_GPIO_Init+0x2dc>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d101      	bne.n	800350c <HAL_GPIO_Init+0x1d4>
 8003508:	2303      	movs	r3, #3
 800350a:	e006      	b.n	800351a <HAL_GPIO_Init+0x1e2>
 800350c:	2305      	movs	r3, #5
 800350e:	e004      	b.n	800351a <HAL_GPIO_Init+0x1e2>
 8003510:	2302      	movs	r3, #2
 8003512:	e002      	b.n	800351a <HAL_GPIO_Init+0x1e2>
 8003514:	2301      	movs	r3, #1
 8003516:	e000      	b.n	800351a <HAL_GPIO_Init+0x1e2>
 8003518:	2300      	movs	r3, #0
 800351a:	697a      	ldr	r2, [r7, #20]
 800351c:	f002 0203 	and.w	r2, r2, #3
 8003520:	0092      	lsls	r2, r2, #2
 8003522:	4093      	lsls	r3, r2
 8003524:	693a      	ldr	r2, [r7, #16]
 8003526:	4313      	orrs	r3, r2
 8003528:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800352a:	4937      	ldr	r1, [pc, #220]	@ (8003608 <HAL_GPIO_Init+0x2d0>)
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	089b      	lsrs	r3, r3, #2
 8003530:	3302      	adds	r3, #2
 8003532:	693a      	ldr	r2, [r7, #16]
 8003534:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003538:	4b37      	ldr	r3, [pc, #220]	@ (8003618 <HAL_GPIO_Init+0x2e0>)
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	43db      	mvns	r3, r3
 8003542:	693a      	ldr	r2, [r7, #16]
 8003544:	4013      	ands	r3, r2
 8003546:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003550:	2b00      	cmp	r3, #0
 8003552:	d003      	beq.n	800355c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8003554:	693a      	ldr	r2, [r7, #16]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	4313      	orrs	r3, r2
 800355a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800355c:	4a2e      	ldr	r2, [pc, #184]	@ (8003618 <HAL_GPIO_Init+0x2e0>)
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003562:	4b2d      	ldr	r3, [pc, #180]	@ (8003618 <HAL_GPIO_Init+0x2e0>)
 8003564:	68db      	ldr	r3, [r3, #12]
 8003566:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	43db      	mvns	r3, r3
 800356c:	693a      	ldr	r2, [r7, #16]
 800356e:	4013      	ands	r3, r2
 8003570:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d003      	beq.n	8003586 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800357e:	693a      	ldr	r2, [r7, #16]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	4313      	orrs	r3, r2
 8003584:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003586:	4a24      	ldr	r2, [pc, #144]	@ (8003618 <HAL_GPIO_Init+0x2e0>)
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800358c:	4b22      	ldr	r3, [pc, #136]	@ (8003618 <HAL_GPIO_Init+0x2e0>)
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	43db      	mvns	r3, r3
 8003596:	693a      	ldr	r2, [r7, #16]
 8003598:	4013      	ands	r3, r2
 800359a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d003      	beq.n	80035b0 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80035a8:	693a      	ldr	r2, [r7, #16]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	4313      	orrs	r3, r2
 80035ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80035b0:	4a19      	ldr	r2, [pc, #100]	@ (8003618 <HAL_GPIO_Init+0x2e0>)
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035b6:	4b18      	ldr	r3, [pc, #96]	@ (8003618 <HAL_GPIO_Init+0x2e0>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	43db      	mvns	r3, r3
 80035c0:	693a      	ldr	r2, [r7, #16]
 80035c2:	4013      	ands	r3, r2
 80035c4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d003      	beq.n	80035da <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80035d2:	693a      	ldr	r2, [r7, #16]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	4313      	orrs	r3, r2
 80035d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80035da:	4a0f      	ldr	r2, [pc, #60]	@ (8003618 <HAL_GPIO_Init+0x2e0>)
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	3301      	adds	r3, #1
 80035e4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	fa22 f303 	lsr.w	r3, r2, r3
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	f47f aea9 	bne.w	8003348 <HAL_GPIO_Init+0x10>
  }
}
 80035f6:	bf00      	nop
 80035f8:	bf00      	nop
 80035fa:	371c      	adds	r7, #28
 80035fc:	46bd      	mov	sp, r7
 80035fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003602:	4770      	bx	lr
 8003604:	40021000 	.word	0x40021000
 8003608:	40010000 	.word	0x40010000
 800360c:	48000400 	.word	0x48000400
 8003610:	48000800 	.word	0x48000800
 8003614:	48000c00 	.word	0x48000c00
 8003618:	40010400 	.word	0x40010400

0800361c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800361c:	b480      	push	{r7}
 800361e:	b085      	sub	sp, #20
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
 8003624:	460b      	mov	r3, r1
 8003626:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	691a      	ldr	r2, [r3, #16]
 800362c:	887b      	ldrh	r3, [r7, #2]
 800362e:	4013      	ands	r3, r2
 8003630:	2b00      	cmp	r3, #0
 8003632:	d002      	beq.n	800363a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003634:	2301      	movs	r3, #1
 8003636:	73fb      	strb	r3, [r7, #15]
 8003638:	e001      	b.n	800363e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800363a:	2300      	movs	r3, #0
 800363c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800363e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003640:	4618      	mov	r0, r3
 8003642:	3714      	adds	r7, #20
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr

0800364c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800364c:	b480      	push	{r7}
 800364e:	b083      	sub	sp, #12
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	460b      	mov	r3, r1
 8003656:	807b      	strh	r3, [r7, #2]
 8003658:	4613      	mov	r3, r2
 800365a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800365c:	787b      	ldrb	r3, [r7, #1]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d003      	beq.n	800366a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003662:	887a      	ldrh	r2, [r7, #2]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003668:	e002      	b.n	8003670 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800366a:	887a      	ldrh	r2, [r7, #2]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003670:	bf00      	nop
 8003672:	370c      	adds	r7, #12
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr

0800367c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8003682:	af00      	add	r7, sp, #0
 8003684:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003688:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800368c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800368e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003692:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d102      	bne.n	80036a2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	f001 b823 	b.w	80046e8 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036a6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 0301 	and.w	r3, r3, #1
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	f000 817d 	beq.w	80039b2 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80036b8:	4bbc      	ldr	r3, [pc, #752]	@ (80039ac <HAL_RCC_OscConfig+0x330>)
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	f003 030c 	and.w	r3, r3, #12
 80036c0:	2b04      	cmp	r3, #4
 80036c2:	d00c      	beq.n	80036de <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80036c4:	4bb9      	ldr	r3, [pc, #740]	@ (80039ac <HAL_RCC_OscConfig+0x330>)
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	f003 030c 	and.w	r3, r3, #12
 80036cc:	2b08      	cmp	r3, #8
 80036ce:	d15c      	bne.n	800378a <HAL_RCC_OscConfig+0x10e>
 80036d0:	4bb6      	ldr	r3, [pc, #728]	@ (80039ac <HAL_RCC_OscConfig+0x330>)
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036dc:	d155      	bne.n	800378a <HAL_RCC_OscConfig+0x10e>
 80036de:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80036e2:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036e6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80036ea:	fa93 f3a3 	rbit	r3, r3
 80036ee:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80036f2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036f6:	fab3 f383 	clz	r3, r3
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	095b      	lsrs	r3, r3, #5
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	f043 0301 	orr.w	r3, r3, #1
 8003704:	b2db      	uxtb	r3, r3
 8003706:	2b01      	cmp	r3, #1
 8003708:	d102      	bne.n	8003710 <HAL_RCC_OscConfig+0x94>
 800370a:	4ba8      	ldr	r3, [pc, #672]	@ (80039ac <HAL_RCC_OscConfig+0x330>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	e015      	b.n	800373c <HAL_RCC_OscConfig+0xc0>
 8003710:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003714:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003718:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 800371c:	fa93 f3a3 	rbit	r3, r3
 8003720:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8003724:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003728:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 800372c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8003730:	fa93 f3a3 	rbit	r3, r3
 8003734:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8003738:	4b9c      	ldr	r3, [pc, #624]	@ (80039ac <HAL_RCC_OscConfig+0x330>)
 800373a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800373c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003740:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8003744:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8003748:	fa92 f2a2 	rbit	r2, r2
 800374c:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8003750:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8003754:	fab2 f282 	clz	r2, r2
 8003758:	b2d2      	uxtb	r2, r2
 800375a:	f042 0220 	orr.w	r2, r2, #32
 800375e:	b2d2      	uxtb	r2, r2
 8003760:	f002 021f 	and.w	r2, r2, #31
 8003764:	2101      	movs	r1, #1
 8003766:	fa01 f202 	lsl.w	r2, r1, r2
 800376a:	4013      	ands	r3, r2
 800376c:	2b00      	cmp	r3, #0
 800376e:	f000 811f 	beq.w	80039b0 <HAL_RCC_OscConfig+0x334>
 8003772:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003776:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	2b00      	cmp	r3, #0
 8003780:	f040 8116 	bne.w	80039b0 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	f000 bfaf 	b.w	80046e8 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800378a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800378e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800379a:	d106      	bne.n	80037aa <HAL_RCC_OscConfig+0x12e>
 800379c:	4b83      	ldr	r3, [pc, #524]	@ (80039ac <HAL_RCC_OscConfig+0x330>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a82      	ldr	r2, [pc, #520]	@ (80039ac <HAL_RCC_OscConfig+0x330>)
 80037a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037a6:	6013      	str	r3, [r2, #0]
 80037a8:	e036      	b.n	8003818 <HAL_RCC_OscConfig+0x19c>
 80037aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037ae:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d10c      	bne.n	80037d4 <HAL_RCC_OscConfig+0x158>
 80037ba:	4b7c      	ldr	r3, [pc, #496]	@ (80039ac <HAL_RCC_OscConfig+0x330>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a7b      	ldr	r2, [pc, #492]	@ (80039ac <HAL_RCC_OscConfig+0x330>)
 80037c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037c4:	6013      	str	r3, [r2, #0]
 80037c6:	4b79      	ldr	r3, [pc, #484]	@ (80039ac <HAL_RCC_OscConfig+0x330>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a78      	ldr	r2, [pc, #480]	@ (80039ac <HAL_RCC_OscConfig+0x330>)
 80037cc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80037d0:	6013      	str	r3, [r2, #0]
 80037d2:	e021      	b.n	8003818 <HAL_RCC_OscConfig+0x19c>
 80037d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037d8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80037e4:	d10c      	bne.n	8003800 <HAL_RCC_OscConfig+0x184>
 80037e6:	4b71      	ldr	r3, [pc, #452]	@ (80039ac <HAL_RCC_OscConfig+0x330>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a70      	ldr	r2, [pc, #448]	@ (80039ac <HAL_RCC_OscConfig+0x330>)
 80037ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80037f0:	6013      	str	r3, [r2, #0]
 80037f2:	4b6e      	ldr	r3, [pc, #440]	@ (80039ac <HAL_RCC_OscConfig+0x330>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a6d      	ldr	r2, [pc, #436]	@ (80039ac <HAL_RCC_OscConfig+0x330>)
 80037f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037fc:	6013      	str	r3, [r2, #0]
 80037fe:	e00b      	b.n	8003818 <HAL_RCC_OscConfig+0x19c>
 8003800:	4b6a      	ldr	r3, [pc, #424]	@ (80039ac <HAL_RCC_OscConfig+0x330>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a69      	ldr	r2, [pc, #420]	@ (80039ac <HAL_RCC_OscConfig+0x330>)
 8003806:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800380a:	6013      	str	r3, [r2, #0]
 800380c:	4b67      	ldr	r3, [pc, #412]	@ (80039ac <HAL_RCC_OscConfig+0x330>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a66      	ldr	r2, [pc, #408]	@ (80039ac <HAL_RCC_OscConfig+0x330>)
 8003812:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003816:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003818:	4b64      	ldr	r3, [pc, #400]	@ (80039ac <HAL_RCC_OscConfig+0x330>)
 800381a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800381c:	f023 020f 	bic.w	r2, r3, #15
 8003820:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003824:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	495f      	ldr	r1, [pc, #380]	@ (80039ac <HAL_RCC_OscConfig+0x330>)
 800382e:	4313      	orrs	r3, r2
 8003830:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003832:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003836:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d059      	beq.n	80038f6 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003842:	f7fd fc6b 	bl	800111c <HAL_GetTick>
 8003846:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800384a:	e00a      	b.n	8003862 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800384c:	f7fd fc66 	bl	800111c <HAL_GetTick>
 8003850:	4602      	mov	r2, r0
 8003852:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003856:	1ad3      	subs	r3, r2, r3
 8003858:	2b64      	cmp	r3, #100	@ 0x64
 800385a:	d902      	bls.n	8003862 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800385c:	2303      	movs	r3, #3
 800385e:	f000 bf43 	b.w	80046e8 <HAL_RCC_OscConfig+0x106c>
 8003862:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003866:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800386a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 800386e:	fa93 f3a3 	rbit	r3, r3
 8003872:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8003876:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800387a:	fab3 f383 	clz	r3, r3
 800387e:	b2db      	uxtb	r3, r3
 8003880:	095b      	lsrs	r3, r3, #5
 8003882:	b2db      	uxtb	r3, r3
 8003884:	f043 0301 	orr.w	r3, r3, #1
 8003888:	b2db      	uxtb	r3, r3
 800388a:	2b01      	cmp	r3, #1
 800388c:	d102      	bne.n	8003894 <HAL_RCC_OscConfig+0x218>
 800388e:	4b47      	ldr	r3, [pc, #284]	@ (80039ac <HAL_RCC_OscConfig+0x330>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	e015      	b.n	80038c0 <HAL_RCC_OscConfig+0x244>
 8003894:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003898:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800389c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80038a0:	fa93 f3a3 	rbit	r3, r3
 80038a4:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80038a8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80038ac:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80038b0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 80038b4:	fa93 f3a3 	rbit	r3, r3
 80038b8:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80038bc:	4b3b      	ldr	r3, [pc, #236]	@ (80039ac <HAL_RCC_OscConfig+0x330>)
 80038be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038c0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80038c4:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 80038c8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80038cc:	fa92 f2a2 	rbit	r2, r2
 80038d0:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 80038d4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 80038d8:	fab2 f282 	clz	r2, r2
 80038dc:	b2d2      	uxtb	r2, r2
 80038de:	f042 0220 	orr.w	r2, r2, #32
 80038e2:	b2d2      	uxtb	r2, r2
 80038e4:	f002 021f 	and.w	r2, r2, #31
 80038e8:	2101      	movs	r1, #1
 80038ea:	fa01 f202 	lsl.w	r2, r1, r2
 80038ee:	4013      	ands	r3, r2
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d0ab      	beq.n	800384c <HAL_RCC_OscConfig+0x1d0>
 80038f4:	e05d      	b.n	80039b2 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038f6:	f7fd fc11 	bl	800111c <HAL_GetTick>
 80038fa:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038fe:	e00a      	b.n	8003916 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003900:	f7fd fc0c 	bl	800111c <HAL_GetTick>
 8003904:	4602      	mov	r2, r0
 8003906:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800390a:	1ad3      	subs	r3, r2, r3
 800390c:	2b64      	cmp	r3, #100	@ 0x64
 800390e:	d902      	bls.n	8003916 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8003910:	2303      	movs	r3, #3
 8003912:	f000 bee9 	b.w	80046e8 <HAL_RCC_OscConfig+0x106c>
 8003916:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800391a:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800391e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8003922:	fa93 f3a3 	rbit	r3, r3
 8003926:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 800392a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800392e:	fab3 f383 	clz	r3, r3
 8003932:	b2db      	uxtb	r3, r3
 8003934:	095b      	lsrs	r3, r3, #5
 8003936:	b2db      	uxtb	r3, r3
 8003938:	f043 0301 	orr.w	r3, r3, #1
 800393c:	b2db      	uxtb	r3, r3
 800393e:	2b01      	cmp	r3, #1
 8003940:	d102      	bne.n	8003948 <HAL_RCC_OscConfig+0x2cc>
 8003942:	4b1a      	ldr	r3, [pc, #104]	@ (80039ac <HAL_RCC_OscConfig+0x330>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	e015      	b.n	8003974 <HAL_RCC_OscConfig+0x2f8>
 8003948:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800394c:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003950:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8003954:	fa93 f3a3 	rbit	r3, r3
 8003958:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 800395c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003960:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8003964:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003968:	fa93 f3a3 	rbit	r3, r3
 800396c:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8003970:	4b0e      	ldr	r3, [pc, #56]	@ (80039ac <HAL_RCC_OscConfig+0x330>)
 8003972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003974:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003978:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 800397c:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8003980:	fa92 f2a2 	rbit	r2, r2
 8003984:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8003988:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 800398c:	fab2 f282 	clz	r2, r2
 8003990:	b2d2      	uxtb	r2, r2
 8003992:	f042 0220 	orr.w	r2, r2, #32
 8003996:	b2d2      	uxtb	r2, r2
 8003998:	f002 021f 	and.w	r2, r2, #31
 800399c:	2101      	movs	r1, #1
 800399e:	fa01 f202 	lsl.w	r2, r1, r2
 80039a2:	4013      	ands	r3, r2
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d1ab      	bne.n	8003900 <HAL_RCC_OscConfig+0x284>
 80039a8:	e003      	b.n	80039b2 <HAL_RCC_OscConfig+0x336>
 80039aa:	bf00      	nop
 80039ac:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039b6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0302 	and.w	r3, r3, #2
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	f000 817d 	beq.w	8003cc2 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80039c8:	4ba6      	ldr	r3, [pc, #664]	@ (8003c64 <HAL_RCC_OscConfig+0x5e8>)
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	f003 030c 	and.w	r3, r3, #12
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d00b      	beq.n	80039ec <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80039d4:	4ba3      	ldr	r3, [pc, #652]	@ (8003c64 <HAL_RCC_OscConfig+0x5e8>)
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	f003 030c 	and.w	r3, r3, #12
 80039dc:	2b08      	cmp	r3, #8
 80039de:	d172      	bne.n	8003ac6 <HAL_RCC_OscConfig+0x44a>
 80039e0:	4ba0      	ldr	r3, [pc, #640]	@ (8003c64 <HAL_RCC_OscConfig+0x5e8>)
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d16c      	bne.n	8003ac6 <HAL_RCC_OscConfig+0x44a>
 80039ec:	2302      	movs	r3, #2
 80039ee:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039f2:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80039f6:	fa93 f3a3 	rbit	r3, r3
 80039fa:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 80039fe:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a02:	fab3 f383 	clz	r3, r3
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	095b      	lsrs	r3, r3, #5
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	f043 0301 	orr.w	r3, r3, #1
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d102      	bne.n	8003a1c <HAL_RCC_OscConfig+0x3a0>
 8003a16:	4b93      	ldr	r3, [pc, #588]	@ (8003c64 <HAL_RCC_OscConfig+0x5e8>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	e013      	b.n	8003a44 <HAL_RCC_OscConfig+0x3c8>
 8003a1c:	2302      	movs	r3, #2
 8003a1e:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a22:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8003a26:	fa93 f3a3 	rbit	r3, r3
 8003a2a:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8003a2e:	2302      	movs	r3, #2
 8003a30:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8003a34:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8003a38:	fa93 f3a3 	rbit	r3, r3
 8003a3c:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8003a40:	4b88      	ldr	r3, [pc, #544]	@ (8003c64 <HAL_RCC_OscConfig+0x5e8>)
 8003a42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a44:	2202      	movs	r2, #2
 8003a46:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8003a4a:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8003a4e:	fa92 f2a2 	rbit	r2, r2
 8003a52:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8003a56:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8003a5a:	fab2 f282 	clz	r2, r2
 8003a5e:	b2d2      	uxtb	r2, r2
 8003a60:	f042 0220 	orr.w	r2, r2, #32
 8003a64:	b2d2      	uxtb	r2, r2
 8003a66:	f002 021f 	and.w	r2, r2, #31
 8003a6a:	2101      	movs	r1, #1
 8003a6c:	fa01 f202 	lsl.w	r2, r1, r2
 8003a70:	4013      	ands	r3, r2
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d00a      	beq.n	8003a8c <HAL_RCC_OscConfig+0x410>
 8003a76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a7a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	691b      	ldr	r3, [r3, #16]
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d002      	beq.n	8003a8c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	f000 be2e 	b.w	80046e8 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a8c:	4b75      	ldr	r3, [pc, #468]	@ (8003c64 <HAL_RCC_OscConfig+0x5e8>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a98:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	695b      	ldr	r3, [r3, #20]
 8003aa0:	21f8      	movs	r1, #248	@ 0xf8
 8003aa2:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aa6:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8003aaa:	fa91 f1a1 	rbit	r1, r1
 8003aae:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8003ab2:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8003ab6:	fab1 f181 	clz	r1, r1
 8003aba:	b2c9      	uxtb	r1, r1
 8003abc:	408b      	lsls	r3, r1
 8003abe:	4969      	ldr	r1, [pc, #420]	@ (8003c64 <HAL_RCC_OscConfig+0x5e8>)
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ac4:	e0fd      	b.n	8003cc2 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ac6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003aca:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	691b      	ldr	r3, [r3, #16]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	f000 8088 	beq.w	8003be8 <HAL_RCC_OscConfig+0x56c>
 8003ad8:	2301      	movs	r3, #1
 8003ada:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ade:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8003ae2:	fa93 f3a3 	rbit	r3, r3
 8003ae6:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8003aea:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003aee:	fab3 f383 	clz	r3, r3
 8003af2:	b2db      	uxtb	r3, r3
 8003af4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003af8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003afc:	009b      	lsls	r3, r3, #2
 8003afe:	461a      	mov	r2, r3
 8003b00:	2301      	movs	r3, #1
 8003b02:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b04:	f7fd fb0a 	bl	800111c <HAL_GetTick>
 8003b08:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b0c:	e00a      	b.n	8003b24 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b0e:	f7fd fb05 	bl	800111c <HAL_GetTick>
 8003b12:	4602      	mov	r2, r0
 8003b14:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	2b02      	cmp	r3, #2
 8003b1c:	d902      	bls.n	8003b24 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	f000 bde2 	b.w	80046e8 <HAL_RCC_OscConfig+0x106c>
 8003b24:	2302      	movs	r3, #2
 8003b26:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b2a:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8003b2e:	fa93 f3a3 	rbit	r3, r3
 8003b32:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8003b36:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b3a:	fab3 f383 	clz	r3, r3
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	095b      	lsrs	r3, r3, #5
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	f043 0301 	orr.w	r3, r3, #1
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d102      	bne.n	8003b54 <HAL_RCC_OscConfig+0x4d8>
 8003b4e:	4b45      	ldr	r3, [pc, #276]	@ (8003c64 <HAL_RCC_OscConfig+0x5e8>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	e013      	b.n	8003b7c <HAL_RCC_OscConfig+0x500>
 8003b54:	2302      	movs	r3, #2
 8003b56:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b5a:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8003b5e:	fa93 f3a3 	rbit	r3, r3
 8003b62:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8003b66:	2302      	movs	r3, #2
 8003b68:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8003b6c:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8003b70:	fa93 f3a3 	rbit	r3, r3
 8003b74:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8003b78:	4b3a      	ldr	r3, [pc, #232]	@ (8003c64 <HAL_RCC_OscConfig+0x5e8>)
 8003b7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b7c:	2202      	movs	r2, #2
 8003b7e:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8003b82:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8003b86:	fa92 f2a2 	rbit	r2, r2
 8003b8a:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8003b8e:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8003b92:	fab2 f282 	clz	r2, r2
 8003b96:	b2d2      	uxtb	r2, r2
 8003b98:	f042 0220 	orr.w	r2, r2, #32
 8003b9c:	b2d2      	uxtb	r2, r2
 8003b9e:	f002 021f 	and.w	r2, r2, #31
 8003ba2:	2101      	movs	r1, #1
 8003ba4:	fa01 f202 	lsl.w	r2, r1, r2
 8003ba8:	4013      	ands	r3, r2
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d0af      	beq.n	8003b0e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bae:	4b2d      	ldr	r3, [pc, #180]	@ (8003c64 <HAL_RCC_OscConfig+0x5e8>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003bb6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bba:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	695b      	ldr	r3, [r3, #20]
 8003bc2:	21f8      	movs	r1, #248	@ 0xf8
 8003bc4:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bc8:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8003bcc:	fa91 f1a1 	rbit	r1, r1
 8003bd0:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8003bd4:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8003bd8:	fab1 f181 	clz	r1, r1
 8003bdc:	b2c9      	uxtb	r1, r1
 8003bde:	408b      	lsls	r3, r1
 8003be0:	4920      	ldr	r1, [pc, #128]	@ (8003c64 <HAL_RCC_OscConfig+0x5e8>)
 8003be2:	4313      	orrs	r3, r2
 8003be4:	600b      	str	r3, [r1, #0]
 8003be6:	e06c      	b.n	8003cc2 <HAL_RCC_OscConfig+0x646>
 8003be8:	2301      	movs	r3, #1
 8003bea:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bee:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003bf2:	fa93 f3a3 	rbit	r3, r3
 8003bf6:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8003bfa:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bfe:	fab3 f383 	clz	r3, r3
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003c08:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003c0c:	009b      	lsls	r3, r3, #2
 8003c0e:	461a      	mov	r2, r3
 8003c10:	2300      	movs	r3, #0
 8003c12:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c14:	f7fd fa82 	bl	800111c <HAL_GetTick>
 8003c18:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c1c:	e00a      	b.n	8003c34 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c1e:	f7fd fa7d 	bl	800111c <HAL_GetTick>
 8003c22:	4602      	mov	r2, r0
 8003c24:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	2b02      	cmp	r3, #2
 8003c2c:	d902      	bls.n	8003c34 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	f000 bd5a 	b.w	80046e8 <HAL_RCC_OscConfig+0x106c>
 8003c34:	2302      	movs	r3, #2
 8003c36:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c3a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8003c3e:	fa93 f3a3 	rbit	r3, r3
 8003c42:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8003c46:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c4a:	fab3 f383 	clz	r3, r3
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	095b      	lsrs	r3, r3, #5
 8003c52:	b2db      	uxtb	r3, r3
 8003c54:	f043 0301 	orr.w	r3, r3, #1
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d104      	bne.n	8003c68 <HAL_RCC_OscConfig+0x5ec>
 8003c5e:	4b01      	ldr	r3, [pc, #4]	@ (8003c64 <HAL_RCC_OscConfig+0x5e8>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	e015      	b.n	8003c90 <HAL_RCC_OscConfig+0x614>
 8003c64:	40021000 	.word	0x40021000
 8003c68:	2302      	movs	r3, #2
 8003c6a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c6e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8003c72:	fa93 f3a3 	rbit	r3, r3
 8003c76:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8003c7a:	2302      	movs	r3, #2
 8003c7c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8003c80:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003c84:	fa93 f3a3 	rbit	r3, r3
 8003c88:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8003c8c:	4bc8      	ldr	r3, [pc, #800]	@ (8003fb0 <HAL_RCC_OscConfig+0x934>)
 8003c8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c90:	2202      	movs	r2, #2
 8003c92:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8003c96:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8003c9a:	fa92 f2a2 	rbit	r2, r2
 8003c9e:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8003ca2:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8003ca6:	fab2 f282 	clz	r2, r2
 8003caa:	b2d2      	uxtb	r2, r2
 8003cac:	f042 0220 	orr.w	r2, r2, #32
 8003cb0:	b2d2      	uxtb	r2, r2
 8003cb2:	f002 021f 	and.w	r2, r2, #31
 8003cb6:	2101      	movs	r1, #1
 8003cb8:	fa01 f202 	lsl.w	r2, r1, r2
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d1ad      	bne.n	8003c1e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cc2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cc6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0308 	and.w	r3, r3, #8
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	f000 8110 	beq.w	8003ef8 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003cd8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cdc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	699b      	ldr	r3, [r3, #24]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d079      	beq.n	8003ddc <HAL_RCC_OscConfig+0x760>
 8003ce8:	2301      	movs	r3, #1
 8003cea:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cee:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003cf2:	fa93 f3a3 	rbit	r3, r3
 8003cf6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8003cfa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cfe:	fab3 f383 	clz	r3, r3
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	461a      	mov	r2, r3
 8003d06:	4bab      	ldr	r3, [pc, #684]	@ (8003fb4 <HAL_RCC_OscConfig+0x938>)
 8003d08:	4413      	add	r3, r2
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	2301      	movs	r3, #1
 8003d10:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d12:	f7fd fa03 	bl	800111c <HAL_GetTick>
 8003d16:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d1a:	e00a      	b.n	8003d32 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d1c:	f7fd f9fe 	bl	800111c <HAL_GetTick>
 8003d20:	4602      	mov	r2, r0
 8003d22:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	2b02      	cmp	r3, #2
 8003d2a:	d902      	bls.n	8003d32 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003d2c:	2303      	movs	r3, #3
 8003d2e:	f000 bcdb 	b.w	80046e8 <HAL_RCC_OscConfig+0x106c>
 8003d32:	2302      	movs	r3, #2
 8003d34:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d38:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8003d3c:	fa93 f3a3 	rbit	r3, r3
 8003d40:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003d44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d48:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003d4c:	2202      	movs	r2, #2
 8003d4e:	601a      	str	r2, [r3, #0]
 8003d50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d54:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	fa93 f2a3 	rbit	r2, r3
 8003d5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d62:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003d66:	601a      	str	r2, [r3, #0]
 8003d68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003d70:	2202      	movs	r2, #2
 8003d72:	601a      	str	r2, [r3, #0]
 8003d74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	fa93 f2a3 	rbit	r2, r3
 8003d82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d86:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003d8a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d8c:	4b88      	ldr	r3, [pc, #544]	@ (8003fb0 <HAL_RCC_OscConfig+0x934>)
 8003d8e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003d90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d94:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003d98:	2102      	movs	r1, #2
 8003d9a:	6019      	str	r1, [r3, #0]
 8003d9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003da0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	fa93 f1a3 	rbit	r1, r3
 8003daa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003dae:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003db2:	6019      	str	r1, [r3, #0]
  return result;
 8003db4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003db8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	fab3 f383 	clz	r3, r3
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	f003 031f 	and.w	r3, r3, #31
 8003dce:	2101      	movs	r1, #1
 8003dd0:	fa01 f303 	lsl.w	r3, r1, r3
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d0a0      	beq.n	8003d1c <HAL_RCC_OscConfig+0x6a0>
 8003dda:	e08d      	b.n	8003ef8 <HAL_RCC_OscConfig+0x87c>
 8003ddc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003de0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003de4:	2201      	movs	r2, #1
 8003de6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003de8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003dec:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	fa93 f2a3 	rbit	r2, r3
 8003df6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003dfa:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003dfe:	601a      	str	r2, [r3, #0]
  return result;
 8003e00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e04:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003e08:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e0a:	fab3 f383 	clz	r3, r3
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	461a      	mov	r2, r3
 8003e12:	4b68      	ldr	r3, [pc, #416]	@ (8003fb4 <HAL_RCC_OscConfig+0x938>)
 8003e14:	4413      	add	r3, r2
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	461a      	mov	r2, r3
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e1e:	f7fd f97d 	bl	800111c <HAL_GetTick>
 8003e22:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e26:	e00a      	b.n	8003e3e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e28:	f7fd f978 	bl	800111c <HAL_GetTick>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003e32:	1ad3      	subs	r3, r2, r3
 8003e34:	2b02      	cmp	r3, #2
 8003e36:	d902      	bls.n	8003e3e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8003e38:	2303      	movs	r3, #3
 8003e3a:	f000 bc55 	b.w	80046e8 <HAL_RCC_OscConfig+0x106c>
 8003e3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e42:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003e46:	2202      	movs	r2, #2
 8003e48:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e4e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	fa93 f2a3 	rbit	r2, r3
 8003e58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e5c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003e60:	601a      	str	r2, [r3, #0]
 8003e62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e66:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003e6a:	2202      	movs	r2, #2
 8003e6c:	601a      	str	r2, [r3, #0]
 8003e6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e72:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	fa93 f2a3 	rbit	r2, r3
 8003e7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e80:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003e84:	601a      	str	r2, [r3, #0]
 8003e86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e8a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003e8e:	2202      	movs	r2, #2
 8003e90:	601a      	str	r2, [r3, #0]
 8003e92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e96:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	fa93 f2a3 	rbit	r2, r3
 8003ea0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ea4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003ea8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003eaa:	4b41      	ldr	r3, [pc, #260]	@ (8003fb0 <HAL_RCC_OscConfig+0x934>)
 8003eac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003eae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003eb2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003eb6:	2102      	movs	r1, #2
 8003eb8:	6019      	str	r1, [r3, #0]
 8003eba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ebe:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	fa93 f1a3 	rbit	r1, r3
 8003ec8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ecc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003ed0:	6019      	str	r1, [r3, #0]
  return result;
 8003ed2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ed6:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	fab3 f383 	clz	r3, r3
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	f003 031f 	and.w	r3, r3, #31
 8003eec:	2101      	movs	r1, #1
 8003eee:	fa01 f303 	lsl.w	r3, r1, r3
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d197      	bne.n	8003e28 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ef8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003efc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 0304 	and.w	r3, r3, #4
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	f000 81a1 	beq.w	8004250 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f14:	4b26      	ldr	r3, [pc, #152]	@ (8003fb0 <HAL_RCC_OscConfig+0x934>)
 8003f16:	69db      	ldr	r3, [r3, #28]
 8003f18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d116      	bne.n	8003f4e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f20:	4b23      	ldr	r3, [pc, #140]	@ (8003fb0 <HAL_RCC_OscConfig+0x934>)
 8003f22:	69db      	ldr	r3, [r3, #28]
 8003f24:	4a22      	ldr	r2, [pc, #136]	@ (8003fb0 <HAL_RCC_OscConfig+0x934>)
 8003f26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f2a:	61d3      	str	r3, [r2, #28]
 8003f2c:	4b20      	ldr	r3, [pc, #128]	@ (8003fb0 <HAL_RCC_OscConfig+0x934>)
 8003f2e:	69db      	ldr	r3, [r3, #28]
 8003f30:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8003f34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f38:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8003f3c:	601a      	str	r2, [r3, #0]
 8003f3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f42:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8003f46:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f4e:	4b1a      	ldr	r3, [pc, #104]	@ (8003fb8 <HAL_RCC_OscConfig+0x93c>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d11a      	bne.n	8003f90 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f5a:	4b17      	ldr	r3, [pc, #92]	@ (8003fb8 <HAL_RCC_OscConfig+0x93c>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a16      	ldr	r2, [pc, #88]	@ (8003fb8 <HAL_RCC_OscConfig+0x93c>)
 8003f60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f64:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f66:	f7fd f8d9 	bl	800111c <HAL_GetTick>
 8003f6a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f6e:	e009      	b.n	8003f84 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f70:	f7fd f8d4 	bl	800111c <HAL_GetTick>
 8003f74:	4602      	mov	r2, r0
 8003f76:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003f7a:	1ad3      	subs	r3, r2, r3
 8003f7c:	2b64      	cmp	r3, #100	@ 0x64
 8003f7e:	d901      	bls.n	8003f84 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003f80:	2303      	movs	r3, #3
 8003f82:	e3b1      	b.n	80046e8 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f84:	4b0c      	ldr	r3, [pc, #48]	@ (8003fb8 <HAL_RCC_OscConfig+0x93c>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d0ef      	beq.n	8003f70 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f94:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d10d      	bne.n	8003fbc <HAL_RCC_OscConfig+0x940>
 8003fa0:	4b03      	ldr	r3, [pc, #12]	@ (8003fb0 <HAL_RCC_OscConfig+0x934>)
 8003fa2:	6a1b      	ldr	r3, [r3, #32]
 8003fa4:	4a02      	ldr	r2, [pc, #8]	@ (8003fb0 <HAL_RCC_OscConfig+0x934>)
 8003fa6:	f043 0301 	orr.w	r3, r3, #1
 8003faa:	6213      	str	r3, [r2, #32]
 8003fac:	e03c      	b.n	8004028 <HAL_RCC_OscConfig+0x9ac>
 8003fae:	bf00      	nop
 8003fb0:	40021000 	.word	0x40021000
 8003fb4:	10908120 	.word	0x10908120
 8003fb8:	40007000 	.word	0x40007000
 8003fbc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fc0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d10c      	bne.n	8003fe6 <HAL_RCC_OscConfig+0x96a>
 8003fcc:	4bc1      	ldr	r3, [pc, #772]	@ (80042d4 <HAL_RCC_OscConfig+0xc58>)
 8003fce:	6a1b      	ldr	r3, [r3, #32]
 8003fd0:	4ac0      	ldr	r2, [pc, #768]	@ (80042d4 <HAL_RCC_OscConfig+0xc58>)
 8003fd2:	f023 0301 	bic.w	r3, r3, #1
 8003fd6:	6213      	str	r3, [r2, #32]
 8003fd8:	4bbe      	ldr	r3, [pc, #760]	@ (80042d4 <HAL_RCC_OscConfig+0xc58>)
 8003fda:	6a1b      	ldr	r3, [r3, #32]
 8003fdc:	4abd      	ldr	r2, [pc, #756]	@ (80042d4 <HAL_RCC_OscConfig+0xc58>)
 8003fde:	f023 0304 	bic.w	r3, r3, #4
 8003fe2:	6213      	str	r3, [r2, #32]
 8003fe4:	e020      	b.n	8004028 <HAL_RCC_OscConfig+0x9ac>
 8003fe6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fea:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68db      	ldr	r3, [r3, #12]
 8003ff2:	2b05      	cmp	r3, #5
 8003ff4:	d10c      	bne.n	8004010 <HAL_RCC_OscConfig+0x994>
 8003ff6:	4bb7      	ldr	r3, [pc, #732]	@ (80042d4 <HAL_RCC_OscConfig+0xc58>)
 8003ff8:	6a1b      	ldr	r3, [r3, #32]
 8003ffa:	4ab6      	ldr	r2, [pc, #728]	@ (80042d4 <HAL_RCC_OscConfig+0xc58>)
 8003ffc:	f043 0304 	orr.w	r3, r3, #4
 8004000:	6213      	str	r3, [r2, #32]
 8004002:	4bb4      	ldr	r3, [pc, #720]	@ (80042d4 <HAL_RCC_OscConfig+0xc58>)
 8004004:	6a1b      	ldr	r3, [r3, #32]
 8004006:	4ab3      	ldr	r2, [pc, #716]	@ (80042d4 <HAL_RCC_OscConfig+0xc58>)
 8004008:	f043 0301 	orr.w	r3, r3, #1
 800400c:	6213      	str	r3, [r2, #32]
 800400e:	e00b      	b.n	8004028 <HAL_RCC_OscConfig+0x9ac>
 8004010:	4bb0      	ldr	r3, [pc, #704]	@ (80042d4 <HAL_RCC_OscConfig+0xc58>)
 8004012:	6a1b      	ldr	r3, [r3, #32]
 8004014:	4aaf      	ldr	r2, [pc, #700]	@ (80042d4 <HAL_RCC_OscConfig+0xc58>)
 8004016:	f023 0301 	bic.w	r3, r3, #1
 800401a:	6213      	str	r3, [r2, #32]
 800401c:	4bad      	ldr	r3, [pc, #692]	@ (80042d4 <HAL_RCC_OscConfig+0xc58>)
 800401e:	6a1b      	ldr	r3, [r3, #32]
 8004020:	4aac      	ldr	r2, [pc, #688]	@ (80042d4 <HAL_RCC_OscConfig+0xc58>)
 8004022:	f023 0304 	bic.w	r3, r3, #4
 8004026:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004028:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800402c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	2b00      	cmp	r3, #0
 8004036:	f000 8081 	beq.w	800413c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800403a:	f7fd f86f 	bl	800111c <HAL_GetTick>
 800403e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004042:	e00b      	b.n	800405c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004044:	f7fd f86a 	bl	800111c <HAL_GetTick>
 8004048:	4602      	mov	r2, r0
 800404a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800404e:	1ad3      	subs	r3, r2, r3
 8004050:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004054:	4293      	cmp	r3, r2
 8004056:	d901      	bls.n	800405c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8004058:	2303      	movs	r3, #3
 800405a:	e345      	b.n	80046e8 <HAL_RCC_OscConfig+0x106c>
 800405c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004060:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004064:	2202      	movs	r2, #2
 8004066:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004068:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800406c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	fa93 f2a3 	rbit	r2, r3
 8004076:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800407a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800407e:	601a      	str	r2, [r3, #0]
 8004080:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004084:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004088:	2202      	movs	r2, #2
 800408a:	601a      	str	r2, [r3, #0]
 800408c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004090:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	fa93 f2a3 	rbit	r2, r3
 800409a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800409e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80040a2:	601a      	str	r2, [r3, #0]
  return result;
 80040a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040a8:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80040ac:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040ae:	fab3 f383 	clz	r3, r3
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	095b      	lsrs	r3, r3, #5
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	f043 0302 	orr.w	r3, r3, #2
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	2b02      	cmp	r3, #2
 80040c0:	d102      	bne.n	80040c8 <HAL_RCC_OscConfig+0xa4c>
 80040c2:	4b84      	ldr	r3, [pc, #528]	@ (80042d4 <HAL_RCC_OscConfig+0xc58>)
 80040c4:	6a1b      	ldr	r3, [r3, #32]
 80040c6:	e013      	b.n	80040f0 <HAL_RCC_OscConfig+0xa74>
 80040c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040cc:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80040d0:	2202      	movs	r2, #2
 80040d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040d8:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	fa93 f2a3 	rbit	r2, r3
 80040e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040e6:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80040ea:	601a      	str	r2, [r3, #0]
 80040ec:	4b79      	ldr	r3, [pc, #484]	@ (80042d4 <HAL_RCC_OscConfig+0xc58>)
 80040ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040f0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80040f4:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80040f8:	2102      	movs	r1, #2
 80040fa:	6011      	str	r1, [r2, #0]
 80040fc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004100:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8004104:	6812      	ldr	r2, [r2, #0]
 8004106:	fa92 f1a2 	rbit	r1, r2
 800410a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800410e:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8004112:	6011      	str	r1, [r2, #0]
  return result;
 8004114:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004118:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800411c:	6812      	ldr	r2, [r2, #0]
 800411e:	fab2 f282 	clz	r2, r2
 8004122:	b2d2      	uxtb	r2, r2
 8004124:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004128:	b2d2      	uxtb	r2, r2
 800412a:	f002 021f 	and.w	r2, r2, #31
 800412e:	2101      	movs	r1, #1
 8004130:	fa01 f202 	lsl.w	r2, r1, r2
 8004134:	4013      	ands	r3, r2
 8004136:	2b00      	cmp	r3, #0
 8004138:	d084      	beq.n	8004044 <HAL_RCC_OscConfig+0x9c8>
 800413a:	e07f      	b.n	800423c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800413c:	f7fc ffee 	bl	800111c <HAL_GetTick>
 8004140:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004144:	e00b      	b.n	800415e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004146:	f7fc ffe9 	bl	800111c <HAL_GetTick>
 800414a:	4602      	mov	r2, r0
 800414c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004156:	4293      	cmp	r3, r2
 8004158:	d901      	bls.n	800415e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800415a:	2303      	movs	r3, #3
 800415c:	e2c4      	b.n	80046e8 <HAL_RCC_OscConfig+0x106c>
 800415e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004162:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8004166:	2202      	movs	r2, #2
 8004168:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800416a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800416e:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	fa93 f2a3 	rbit	r2, r3
 8004178:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800417c:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8004180:	601a      	str	r2, [r3, #0]
 8004182:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004186:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800418a:	2202      	movs	r2, #2
 800418c:	601a      	str	r2, [r3, #0]
 800418e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004192:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	fa93 f2a3 	rbit	r2, r3
 800419c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041a0:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80041a4:	601a      	str	r2, [r3, #0]
  return result;
 80041a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041aa:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80041ae:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041b0:	fab3 f383 	clz	r3, r3
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	095b      	lsrs	r3, r3, #5
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	f043 0302 	orr.w	r3, r3, #2
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	2b02      	cmp	r3, #2
 80041c2:	d102      	bne.n	80041ca <HAL_RCC_OscConfig+0xb4e>
 80041c4:	4b43      	ldr	r3, [pc, #268]	@ (80042d4 <HAL_RCC_OscConfig+0xc58>)
 80041c6:	6a1b      	ldr	r3, [r3, #32]
 80041c8:	e013      	b.n	80041f2 <HAL_RCC_OscConfig+0xb76>
 80041ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041ce:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80041d2:	2202      	movs	r2, #2
 80041d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041da:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	fa93 f2a3 	rbit	r2, r3
 80041e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041e8:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80041ec:	601a      	str	r2, [r3, #0]
 80041ee:	4b39      	ldr	r3, [pc, #228]	@ (80042d4 <HAL_RCC_OscConfig+0xc58>)
 80041f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041f2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80041f6:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80041fa:	2102      	movs	r1, #2
 80041fc:	6011      	str	r1, [r2, #0]
 80041fe:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004202:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8004206:	6812      	ldr	r2, [r2, #0]
 8004208:	fa92 f1a2 	rbit	r1, r2
 800420c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004210:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8004214:	6011      	str	r1, [r2, #0]
  return result;
 8004216:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800421a:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800421e:	6812      	ldr	r2, [r2, #0]
 8004220:	fab2 f282 	clz	r2, r2
 8004224:	b2d2      	uxtb	r2, r2
 8004226:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800422a:	b2d2      	uxtb	r2, r2
 800422c:	f002 021f 	and.w	r2, r2, #31
 8004230:	2101      	movs	r1, #1
 8004232:	fa01 f202 	lsl.w	r2, r1, r2
 8004236:	4013      	ands	r3, r2
 8004238:	2b00      	cmp	r3, #0
 800423a:	d184      	bne.n	8004146 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800423c:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8004240:	2b01      	cmp	r3, #1
 8004242:	d105      	bne.n	8004250 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004244:	4b23      	ldr	r3, [pc, #140]	@ (80042d4 <HAL_RCC_OscConfig+0xc58>)
 8004246:	69db      	ldr	r3, [r3, #28]
 8004248:	4a22      	ldr	r2, [pc, #136]	@ (80042d4 <HAL_RCC_OscConfig+0xc58>)
 800424a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800424e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004250:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004254:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	69db      	ldr	r3, [r3, #28]
 800425c:	2b00      	cmp	r3, #0
 800425e:	f000 8242 	beq.w	80046e6 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004262:	4b1c      	ldr	r3, [pc, #112]	@ (80042d4 <HAL_RCC_OscConfig+0xc58>)
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	f003 030c 	and.w	r3, r3, #12
 800426a:	2b08      	cmp	r3, #8
 800426c:	f000 8213 	beq.w	8004696 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004270:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004274:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	69db      	ldr	r3, [r3, #28]
 800427c:	2b02      	cmp	r3, #2
 800427e:	f040 8162 	bne.w	8004546 <HAL_RCC_OscConfig+0xeca>
 8004282:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004286:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800428a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800428e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004290:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004294:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	fa93 f2a3 	rbit	r2, r3
 800429e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042a2:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80042a6:	601a      	str	r2, [r3, #0]
  return result;
 80042a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042ac:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80042b0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042b2:	fab3 f383 	clz	r3, r3
 80042b6:	b2db      	uxtb	r3, r3
 80042b8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80042bc:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	461a      	mov	r2, r3
 80042c4:	2300      	movs	r3, #0
 80042c6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042c8:	f7fc ff28 	bl	800111c <HAL_GetTick>
 80042cc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042d0:	e00c      	b.n	80042ec <HAL_RCC_OscConfig+0xc70>
 80042d2:	bf00      	nop
 80042d4:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042d8:	f7fc ff20 	bl	800111c <HAL_GetTick>
 80042dc:	4602      	mov	r2, r0
 80042de:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80042e2:	1ad3      	subs	r3, r2, r3
 80042e4:	2b02      	cmp	r3, #2
 80042e6:	d901      	bls.n	80042ec <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80042e8:	2303      	movs	r3, #3
 80042ea:	e1fd      	b.n	80046e8 <HAL_RCC_OscConfig+0x106c>
 80042ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042f0:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80042f4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80042f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042fe:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	fa93 f2a3 	rbit	r2, r3
 8004308:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800430c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8004310:	601a      	str	r2, [r3, #0]
  return result;
 8004312:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004316:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800431a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800431c:	fab3 f383 	clz	r3, r3
 8004320:	b2db      	uxtb	r3, r3
 8004322:	095b      	lsrs	r3, r3, #5
 8004324:	b2db      	uxtb	r3, r3
 8004326:	f043 0301 	orr.w	r3, r3, #1
 800432a:	b2db      	uxtb	r3, r3
 800432c:	2b01      	cmp	r3, #1
 800432e:	d102      	bne.n	8004336 <HAL_RCC_OscConfig+0xcba>
 8004330:	4bb0      	ldr	r3, [pc, #704]	@ (80045f4 <HAL_RCC_OscConfig+0xf78>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	e027      	b.n	8004386 <HAL_RCC_OscConfig+0xd0a>
 8004336:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800433a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800433e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004342:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004344:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004348:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	fa93 f2a3 	rbit	r2, r3
 8004352:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004356:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800435a:	601a      	str	r2, [r3, #0]
 800435c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004360:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8004364:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004368:	601a      	str	r2, [r3, #0]
 800436a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800436e:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	fa93 f2a3 	rbit	r2, r3
 8004378:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800437c:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8004380:	601a      	str	r2, [r3, #0]
 8004382:	4b9c      	ldr	r3, [pc, #624]	@ (80045f4 <HAL_RCC_OscConfig+0xf78>)
 8004384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004386:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800438a:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800438e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004392:	6011      	str	r1, [r2, #0]
 8004394:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004398:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800439c:	6812      	ldr	r2, [r2, #0]
 800439e:	fa92 f1a2 	rbit	r1, r2
 80043a2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80043a6:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80043aa:	6011      	str	r1, [r2, #0]
  return result;
 80043ac:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80043b0:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80043b4:	6812      	ldr	r2, [r2, #0]
 80043b6:	fab2 f282 	clz	r2, r2
 80043ba:	b2d2      	uxtb	r2, r2
 80043bc:	f042 0220 	orr.w	r2, r2, #32
 80043c0:	b2d2      	uxtb	r2, r2
 80043c2:	f002 021f 	and.w	r2, r2, #31
 80043c6:	2101      	movs	r1, #1
 80043c8:	fa01 f202 	lsl.w	r2, r1, r2
 80043cc:	4013      	ands	r3, r2
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d182      	bne.n	80042d8 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80043d2:	4b88      	ldr	r3, [pc, #544]	@ (80045f4 <HAL_RCC_OscConfig+0xf78>)
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80043da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043de:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80043e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043ea:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	6a1b      	ldr	r3, [r3, #32]
 80043f2:	430b      	orrs	r3, r1
 80043f4:	497f      	ldr	r1, [pc, #508]	@ (80045f4 <HAL_RCC_OscConfig+0xf78>)
 80043f6:	4313      	orrs	r3, r2
 80043f8:	604b      	str	r3, [r1, #4]
 80043fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043fe:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8004402:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004406:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004408:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800440c:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	fa93 f2a3 	rbit	r2, r3
 8004416:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800441a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800441e:	601a      	str	r2, [r3, #0]
  return result;
 8004420:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004424:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8004428:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800442a:	fab3 f383 	clz	r3, r3
 800442e:	b2db      	uxtb	r3, r3
 8004430:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004434:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004438:	009b      	lsls	r3, r3, #2
 800443a:	461a      	mov	r2, r3
 800443c:	2301      	movs	r3, #1
 800443e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004440:	f7fc fe6c 	bl	800111c <HAL_GetTick>
 8004444:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004448:	e009      	b.n	800445e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800444a:	f7fc fe67 	bl	800111c <HAL_GetTick>
 800444e:	4602      	mov	r2, r0
 8004450:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	2b02      	cmp	r3, #2
 8004458:	d901      	bls.n	800445e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800445a:	2303      	movs	r3, #3
 800445c:	e144      	b.n	80046e8 <HAL_RCC_OscConfig+0x106c>
 800445e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004462:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8004466:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800446a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800446c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004470:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	fa93 f2a3 	rbit	r2, r3
 800447a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800447e:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8004482:	601a      	str	r2, [r3, #0]
  return result;
 8004484:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004488:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800448c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800448e:	fab3 f383 	clz	r3, r3
 8004492:	b2db      	uxtb	r3, r3
 8004494:	095b      	lsrs	r3, r3, #5
 8004496:	b2db      	uxtb	r3, r3
 8004498:	f043 0301 	orr.w	r3, r3, #1
 800449c:	b2db      	uxtb	r3, r3
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d102      	bne.n	80044a8 <HAL_RCC_OscConfig+0xe2c>
 80044a2:	4b54      	ldr	r3, [pc, #336]	@ (80045f4 <HAL_RCC_OscConfig+0xf78>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	e027      	b.n	80044f8 <HAL_RCC_OscConfig+0xe7c>
 80044a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044ac:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80044b0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80044b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044ba:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	fa93 f2a3 	rbit	r2, r3
 80044c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044c8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80044cc:	601a      	str	r2, [r3, #0]
 80044ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044d2:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80044d6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80044da:	601a      	str	r2, [r3, #0]
 80044dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044e0:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	fa93 f2a3 	rbit	r2, r3
 80044ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044ee:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80044f2:	601a      	str	r2, [r3, #0]
 80044f4:	4b3f      	ldr	r3, [pc, #252]	@ (80045f4 <HAL_RCC_OscConfig+0xf78>)
 80044f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044f8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80044fc:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8004500:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004504:	6011      	str	r1, [r2, #0]
 8004506:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800450a:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800450e:	6812      	ldr	r2, [r2, #0]
 8004510:	fa92 f1a2 	rbit	r1, r2
 8004514:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004518:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800451c:	6011      	str	r1, [r2, #0]
  return result;
 800451e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004522:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8004526:	6812      	ldr	r2, [r2, #0]
 8004528:	fab2 f282 	clz	r2, r2
 800452c:	b2d2      	uxtb	r2, r2
 800452e:	f042 0220 	orr.w	r2, r2, #32
 8004532:	b2d2      	uxtb	r2, r2
 8004534:	f002 021f 	and.w	r2, r2, #31
 8004538:	2101      	movs	r1, #1
 800453a:	fa01 f202 	lsl.w	r2, r1, r2
 800453e:	4013      	ands	r3, r2
 8004540:	2b00      	cmp	r3, #0
 8004542:	d082      	beq.n	800444a <HAL_RCC_OscConfig+0xdce>
 8004544:	e0cf      	b.n	80046e6 <HAL_RCC_OscConfig+0x106a>
 8004546:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800454a:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800454e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004552:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004554:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004558:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	fa93 f2a3 	rbit	r2, r3
 8004562:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004566:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800456a:	601a      	str	r2, [r3, #0]
  return result;
 800456c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004570:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8004574:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004576:	fab3 f383 	clz	r3, r3
 800457a:	b2db      	uxtb	r3, r3
 800457c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004580:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004584:	009b      	lsls	r3, r3, #2
 8004586:	461a      	mov	r2, r3
 8004588:	2300      	movs	r3, #0
 800458a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800458c:	f7fc fdc6 	bl	800111c <HAL_GetTick>
 8004590:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004594:	e009      	b.n	80045aa <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004596:	f7fc fdc1 	bl	800111c <HAL_GetTick>
 800459a:	4602      	mov	r2, r0
 800459c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	2b02      	cmp	r3, #2
 80045a4:	d901      	bls.n	80045aa <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80045a6:	2303      	movs	r3, #3
 80045a8:	e09e      	b.n	80046e8 <HAL_RCC_OscConfig+0x106c>
 80045aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045ae:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80045b2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80045b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045bc:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	fa93 f2a3 	rbit	r2, r3
 80045c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045ca:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80045ce:	601a      	str	r2, [r3, #0]
  return result;
 80045d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045d4:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80045d8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045da:	fab3 f383 	clz	r3, r3
 80045de:	b2db      	uxtb	r3, r3
 80045e0:	095b      	lsrs	r3, r3, #5
 80045e2:	b2db      	uxtb	r3, r3
 80045e4:	f043 0301 	orr.w	r3, r3, #1
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	d104      	bne.n	80045f8 <HAL_RCC_OscConfig+0xf7c>
 80045ee:	4b01      	ldr	r3, [pc, #4]	@ (80045f4 <HAL_RCC_OscConfig+0xf78>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	e029      	b.n	8004648 <HAL_RCC_OscConfig+0xfcc>
 80045f4:	40021000 	.word	0x40021000
 80045f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045fc:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8004600:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004604:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004606:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800460a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	fa93 f2a3 	rbit	r2, r3
 8004614:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004618:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 800461c:	601a      	str	r2, [r3, #0]
 800461e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004622:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8004626:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800462a:	601a      	str	r2, [r3, #0]
 800462c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004630:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	fa93 f2a3 	rbit	r2, r3
 800463a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800463e:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8004642:	601a      	str	r2, [r3, #0]
 8004644:	4b2b      	ldr	r3, [pc, #172]	@ (80046f4 <HAL_RCC_OscConfig+0x1078>)
 8004646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004648:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800464c:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8004650:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004654:	6011      	str	r1, [r2, #0]
 8004656:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800465a:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800465e:	6812      	ldr	r2, [r2, #0]
 8004660:	fa92 f1a2 	rbit	r1, r2
 8004664:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004668:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800466c:	6011      	str	r1, [r2, #0]
  return result;
 800466e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004672:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8004676:	6812      	ldr	r2, [r2, #0]
 8004678:	fab2 f282 	clz	r2, r2
 800467c:	b2d2      	uxtb	r2, r2
 800467e:	f042 0220 	orr.w	r2, r2, #32
 8004682:	b2d2      	uxtb	r2, r2
 8004684:	f002 021f 	and.w	r2, r2, #31
 8004688:	2101      	movs	r1, #1
 800468a:	fa01 f202 	lsl.w	r2, r1, r2
 800468e:	4013      	ands	r3, r2
 8004690:	2b00      	cmp	r3, #0
 8004692:	d180      	bne.n	8004596 <HAL_RCC_OscConfig+0xf1a>
 8004694:	e027      	b.n	80046e6 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004696:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800469a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	69db      	ldr	r3, [r3, #28]
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d101      	bne.n	80046aa <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	e01e      	b.n	80046e8 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80046aa:	4b12      	ldr	r3, [pc, #72]	@ (80046f4 <HAL_RCC_OscConfig+0x1078>)
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80046b2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80046b6:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80046ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046be:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	6a1b      	ldr	r3, [r3, #32]
 80046c6:	429a      	cmp	r2, r3
 80046c8:	d10b      	bne.n	80046e2 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80046ca:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80046ce:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80046d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046d6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80046de:	429a      	cmp	r2, r3
 80046e0:	d001      	beq.n	80046e6 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	e000      	b.n	80046e8 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80046e6:	2300      	movs	r3, #0
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}
 80046f2:	bf00      	nop
 80046f4:	40021000 	.word	0x40021000

080046f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b09e      	sub	sp, #120	@ 0x78
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
 8004700:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004702:	2300      	movs	r3, #0
 8004704:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d101      	bne.n	8004710 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	e162      	b.n	80049d6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004710:	4b90      	ldr	r3, [pc, #576]	@ (8004954 <HAL_RCC_ClockConfig+0x25c>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 0307 	and.w	r3, r3, #7
 8004718:	683a      	ldr	r2, [r7, #0]
 800471a:	429a      	cmp	r2, r3
 800471c:	d910      	bls.n	8004740 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800471e:	4b8d      	ldr	r3, [pc, #564]	@ (8004954 <HAL_RCC_ClockConfig+0x25c>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f023 0207 	bic.w	r2, r3, #7
 8004726:	498b      	ldr	r1, [pc, #556]	@ (8004954 <HAL_RCC_ClockConfig+0x25c>)
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	4313      	orrs	r3, r2
 800472c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800472e:	4b89      	ldr	r3, [pc, #548]	@ (8004954 <HAL_RCC_ClockConfig+0x25c>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f003 0307 	and.w	r3, r3, #7
 8004736:	683a      	ldr	r2, [r7, #0]
 8004738:	429a      	cmp	r2, r3
 800473a:	d001      	beq.n	8004740 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	e14a      	b.n	80049d6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 0302 	and.w	r3, r3, #2
 8004748:	2b00      	cmp	r3, #0
 800474a:	d008      	beq.n	800475e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800474c:	4b82      	ldr	r3, [pc, #520]	@ (8004958 <HAL_RCC_ClockConfig+0x260>)
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	497f      	ldr	r1, [pc, #508]	@ (8004958 <HAL_RCC_ClockConfig+0x260>)
 800475a:	4313      	orrs	r3, r2
 800475c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 0301 	and.w	r3, r3, #1
 8004766:	2b00      	cmp	r3, #0
 8004768:	f000 80dc 	beq.w	8004924 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	2b01      	cmp	r3, #1
 8004772:	d13c      	bne.n	80047ee <HAL_RCC_ClockConfig+0xf6>
 8004774:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004778:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800477a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800477c:	fa93 f3a3 	rbit	r3, r3
 8004780:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8004782:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004784:	fab3 f383 	clz	r3, r3
 8004788:	b2db      	uxtb	r3, r3
 800478a:	095b      	lsrs	r3, r3, #5
 800478c:	b2db      	uxtb	r3, r3
 800478e:	f043 0301 	orr.w	r3, r3, #1
 8004792:	b2db      	uxtb	r3, r3
 8004794:	2b01      	cmp	r3, #1
 8004796:	d102      	bne.n	800479e <HAL_RCC_ClockConfig+0xa6>
 8004798:	4b6f      	ldr	r3, [pc, #444]	@ (8004958 <HAL_RCC_ClockConfig+0x260>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	e00f      	b.n	80047be <HAL_RCC_ClockConfig+0xc6>
 800479e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80047a2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047a4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80047a6:	fa93 f3a3 	rbit	r3, r3
 80047aa:	667b      	str	r3, [r7, #100]	@ 0x64
 80047ac:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80047b0:	663b      	str	r3, [r7, #96]	@ 0x60
 80047b2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80047b4:	fa93 f3a3 	rbit	r3, r3
 80047b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80047ba:	4b67      	ldr	r3, [pc, #412]	@ (8004958 <HAL_RCC_ClockConfig+0x260>)
 80047bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047be:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80047c2:	65ba      	str	r2, [r7, #88]	@ 0x58
 80047c4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80047c6:	fa92 f2a2 	rbit	r2, r2
 80047ca:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80047cc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80047ce:	fab2 f282 	clz	r2, r2
 80047d2:	b2d2      	uxtb	r2, r2
 80047d4:	f042 0220 	orr.w	r2, r2, #32
 80047d8:	b2d2      	uxtb	r2, r2
 80047da:	f002 021f 	and.w	r2, r2, #31
 80047de:	2101      	movs	r1, #1
 80047e0:	fa01 f202 	lsl.w	r2, r1, r2
 80047e4:	4013      	ands	r3, r2
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d17b      	bne.n	80048e2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e0f3      	b.n	80049d6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	2b02      	cmp	r3, #2
 80047f4:	d13c      	bne.n	8004870 <HAL_RCC_ClockConfig+0x178>
 80047f6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80047fa:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80047fe:	fa93 f3a3 	rbit	r3, r3
 8004802:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004804:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004806:	fab3 f383 	clz	r3, r3
 800480a:	b2db      	uxtb	r3, r3
 800480c:	095b      	lsrs	r3, r3, #5
 800480e:	b2db      	uxtb	r3, r3
 8004810:	f043 0301 	orr.w	r3, r3, #1
 8004814:	b2db      	uxtb	r3, r3
 8004816:	2b01      	cmp	r3, #1
 8004818:	d102      	bne.n	8004820 <HAL_RCC_ClockConfig+0x128>
 800481a:	4b4f      	ldr	r3, [pc, #316]	@ (8004958 <HAL_RCC_ClockConfig+0x260>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	e00f      	b.n	8004840 <HAL_RCC_ClockConfig+0x148>
 8004820:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004824:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004826:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004828:	fa93 f3a3 	rbit	r3, r3
 800482c:	647b      	str	r3, [r7, #68]	@ 0x44
 800482e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004832:	643b      	str	r3, [r7, #64]	@ 0x40
 8004834:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004836:	fa93 f3a3 	rbit	r3, r3
 800483a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800483c:	4b46      	ldr	r3, [pc, #280]	@ (8004958 <HAL_RCC_ClockConfig+0x260>)
 800483e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004840:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004844:	63ba      	str	r2, [r7, #56]	@ 0x38
 8004846:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004848:	fa92 f2a2 	rbit	r2, r2
 800484c:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 800484e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004850:	fab2 f282 	clz	r2, r2
 8004854:	b2d2      	uxtb	r2, r2
 8004856:	f042 0220 	orr.w	r2, r2, #32
 800485a:	b2d2      	uxtb	r2, r2
 800485c:	f002 021f 	and.w	r2, r2, #31
 8004860:	2101      	movs	r1, #1
 8004862:	fa01 f202 	lsl.w	r2, r1, r2
 8004866:	4013      	ands	r3, r2
 8004868:	2b00      	cmp	r3, #0
 800486a:	d13a      	bne.n	80048e2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	e0b2      	b.n	80049d6 <HAL_RCC_ClockConfig+0x2de>
 8004870:	2302      	movs	r3, #2
 8004872:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004876:	fa93 f3a3 	rbit	r3, r3
 800487a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 800487c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800487e:	fab3 f383 	clz	r3, r3
 8004882:	b2db      	uxtb	r3, r3
 8004884:	095b      	lsrs	r3, r3, #5
 8004886:	b2db      	uxtb	r3, r3
 8004888:	f043 0301 	orr.w	r3, r3, #1
 800488c:	b2db      	uxtb	r3, r3
 800488e:	2b01      	cmp	r3, #1
 8004890:	d102      	bne.n	8004898 <HAL_RCC_ClockConfig+0x1a0>
 8004892:	4b31      	ldr	r3, [pc, #196]	@ (8004958 <HAL_RCC_ClockConfig+0x260>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	e00d      	b.n	80048b4 <HAL_RCC_ClockConfig+0x1bc>
 8004898:	2302      	movs	r3, #2
 800489a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800489c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800489e:	fa93 f3a3 	rbit	r3, r3
 80048a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80048a4:	2302      	movs	r3, #2
 80048a6:	623b      	str	r3, [r7, #32]
 80048a8:	6a3b      	ldr	r3, [r7, #32]
 80048aa:	fa93 f3a3 	rbit	r3, r3
 80048ae:	61fb      	str	r3, [r7, #28]
 80048b0:	4b29      	ldr	r3, [pc, #164]	@ (8004958 <HAL_RCC_ClockConfig+0x260>)
 80048b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048b4:	2202      	movs	r2, #2
 80048b6:	61ba      	str	r2, [r7, #24]
 80048b8:	69ba      	ldr	r2, [r7, #24]
 80048ba:	fa92 f2a2 	rbit	r2, r2
 80048be:	617a      	str	r2, [r7, #20]
  return result;
 80048c0:	697a      	ldr	r2, [r7, #20]
 80048c2:	fab2 f282 	clz	r2, r2
 80048c6:	b2d2      	uxtb	r2, r2
 80048c8:	f042 0220 	orr.w	r2, r2, #32
 80048cc:	b2d2      	uxtb	r2, r2
 80048ce:	f002 021f 	and.w	r2, r2, #31
 80048d2:	2101      	movs	r1, #1
 80048d4:	fa01 f202 	lsl.w	r2, r1, r2
 80048d8:	4013      	ands	r3, r2
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d101      	bne.n	80048e2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	e079      	b.n	80049d6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80048e2:	4b1d      	ldr	r3, [pc, #116]	@ (8004958 <HAL_RCC_ClockConfig+0x260>)
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	f023 0203 	bic.w	r2, r3, #3
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	491a      	ldr	r1, [pc, #104]	@ (8004958 <HAL_RCC_ClockConfig+0x260>)
 80048f0:	4313      	orrs	r3, r2
 80048f2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80048f4:	f7fc fc12 	bl	800111c <HAL_GetTick>
 80048f8:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048fa:	e00a      	b.n	8004912 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048fc:	f7fc fc0e 	bl	800111c <HAL_GetTick>
 8004900:	4602      	mov	r2, r0
 8004902:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004904:	1ad3      	subs	r3, r2, r3
 8004906:	f241 3288 	movw	r2, #5000	@ 0x1388
 800490a:	4293      	cmp	r3, r2
 800490c:	d901      	bls.n	8004912 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800490e:	2303      	movs	r3, #3
 8004910:	e061      	b.n	80049d6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004912:	4b11      	ldr	r3, [pc, #68]	@ (8004958 <HAL_RCC_ClockConfig+0x260>)
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	f003 020c 	and.w	r2, r3, #12
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	009b      	lsls	r3, r3, #2
 8004920:	429a      	cmp	r2, r3
 8004922:	d1eb      	bne.n	80048fc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004924:	4b0b      	ldr	r3, [pc, #44]	@ (8004954 <HAL_RCC_ClockConfig+0x25c>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f003 0307 	and.w	r3, r3, #7
 800492c:	683a      	ldr	r2, [r7, #0]
 800492e:	429a      	cmp	r2, r3
 8004930:	d214      	bcs.n	800495c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004932:	4b08      	ldr	r3, [pc, #32]	@ (8004954 <HAL_RCC_ClockConfig+0x25c>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f023 0207 	bic.w	r2, r3, #7
 800493a:	4906      	ldr	r1, [pc, #24]	@ (8004954 <HAL_RCC_ClockConfig+0x25c>)
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	4313      	orrs	r3, r2
 8004940:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004942:	4b04      	ldr	r3, [pc, #16]	@ (8004954 <HAL_RCC_ClockConfig+0x25c>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f003 0307 	and.w	r3, r3, #7
 800494a:	683a      	ldr	r2, [r7, #0]
 800494c:	429a      	cmp	r2, r3
 800494e:	d005      	beq.n	800495c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	e040      	b.n	80049d6 <HAL_RCC_ClockConfig+0x2de>
 8004954:	40022000 	.word	0x40022000
 8004958:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f003 0304 	and.w	r3, r3, #4
 8004964:	2b00      	cmp	r3, #0
 8004966:	d008      	beq.n	800497a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004968:	4b1d      	ldr	r3, [pc, #116]	@ (80049e0 <HAL_RCC_ClockConfig+0x2e8>)
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	68db      	ldr	r3, [r3, #12]
 8004974:	491a      	ldr	r1, [pc, #104]	@ (80049e0 <HAL_RCC_ClockConfig+0x2e8>)
 8004976:	4313      	orrs	r3, r2
 8004978:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 0308 	and.w	r3, r3, #8
 8004982:	2b00      	cmp	r3, #0
 8004984:	d009      	beq.n	800499a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004986:	4b16      	ldr	r3, [pc, #88]	@ (80049e0 <HAL_RCC_ClockConfig+0x2e8>)
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	691b      	ldr	r3, [r3, #16]
 8004992:	00db      	lsls	r3, r3, #3
 8004994:	4912      	ldr	r1, [pc, #72]	@ (80049e0 <HAL_RCC_ClockConfig+0x2e8>)
 8004996:	4313      	orrs	r3, r2
 8004998:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800499a:	f000 f829 	bl	80049f0 <HAL_RCC_GetSysClockFreq>
 800499e:	4601      	mov	r1, r0
 80049a0:	4b0f      	ldr	r3, [pc, #60]	@ (80049e0 <HAL_RCC_ClockConfig+0x2e8>)
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80049a8:	22f0      	movs	r2, #240	@ 0xf0
 80049aa:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049ac:	693a      	ldr	r2, [r7, #16]
 80049ae:	fa92 f2a2 	rbit	r2, r2
 80049b2:	60fa      	str	r2, [r7, #12]
  return result;
 80049b4:	68fa      	ldr	r2, [r7, #12]
 80049b6:	fab2 f282 	clz	r2, r2
 80049ba:	b2d2      	uxtb	r2, r2
 80049bc:	40d3      	lsrs	r3, r2
 80049be:	4a09      	ldr	r2, [pc, #36]	@ (80049e4 <HAL_RCC_ClockConfig+0x2ec>)
 80049c0:	5cd3      	ldrb	r3, [r2, r3]
 80049c2:	fa21 f303 	lsr.w	r3, r1, r3
 80049c6:	4a08      	ldr	r2, [pc, #32]	@ (80049e8 <HAL_RCC_ClockConfig+0x2f0>)
 80049c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80049ca:	4b08      	ldr	r3, [pc, #32]	@ (80049ec <HAL_RCC_ClockConfig+0x2f4>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4618      	mov	r0, r3
 80049d0:	f7fc fb60 	bl	8001094 <HAL_InitTick>
  
  return HAL_OK;
 80049d4:	2300      	movs	r3, #0
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3778      	adds	r7, #120	@ 0x78
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}
 80049de:	bf00      	nop
 80049e0:	40021000 	.word	0x40021000
 80049e4:	0800649c 	.word	0x0800649c
 80049e8:	20000000 	.word	0x20000000
 80049ec:	20000004 	.word	0x20000004

080049f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b087      	sub	sp, #28
 80049f4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80049f6:	2300      	movs	r3, #0
 80049f8:	60fb      	str	r3, [r7, #12]
 80049fa:	2300      	movs	r3, #0
 80049fc:	60bb      	str	r3, [r7, #8]
 80049fe:	2300      	movs	r3, #0
 8004a00:	617b      	str	r3, [r7, #20]
 8004a02:	2300      	movs	r3, #0
 8004a04:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004a06:	2300      	movs	r3, #0
 8004a08:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8004a0a:	4b1e      	ldr	r3, [pc, #120]	@ (8004a84 <HAL_RCC_GetSysClockFreq+0x94>)
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f003 030c 	and.w	r3, r3, #12
 8004a16:	2b04      	cmp	r3, #4
 8004a18:	d002      	beq.n	8004a20 <HAL_RCC_GetSysClockFreq+0x30>
 8004a1a:	2b08      	cmp	r3, #8
 8004a1c:	d003      	beq.n	8004a26 <HAL_RCC_GetSysClockFreq+0x36>
 8004a1e:	e026      	b.n	8004a6e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004a20:	4b19      	ldr	r3, [pc, #100]	@ (8004a88 <HAL_RCC_GetSysClockFreq+0x98>)
 8004a22:	613b      	str	r3, [r7, #16]
      break;
 8004a24:	e026      	b.n	8004a74 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	0c9b      	lsrs	r3, r3, #18
 8004a2a:	f003 030f 	and.w	r3, r3, #15
 8004a2e:	4a17      	ldr	r2, [pc, #92]	@ (8004a8c <HAL_RCC_GetSysClockFreq+0x9c>)
 8004a30:	5cd3      	ldrb	r3, [r2, r3]
 8004a32:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8004a34:	4b13      	ldr	r3, [pc, #76]	@ (8004a84 <HAL_RCC_GetSysClockFreq+0x94>)
 8004a36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a38:	f003 030f 	and.w	r3, r3, #15
 8004a3c:	4a14      	ldr	r2, [pc, #80]	@ (8004a90 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004a3e:	5cd3      	ldrb	r3, [r2, r3]
 8004a40:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d008      	beq.n	8004a5e <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004a4c:	4a0e      	ldr	r2, [pc, #56]	@ (8004a88 <HAL_RCC_GetSysClockFreq+0x98>)
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	fb02 f303 	mul.w	r3, r2, r3
 8004a5a:	617b      	str	r3, [r7, #20]
 8004a5c:	e004      	b.n	8004a68 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	4a0c      	ldr	r2, [pc, #48]	@ (8004a94 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004a62:	fb02 f303 	mul.w	r3, r2, r3
 8004a66:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	613b      	str	r3, [r7, #16]
      break;
 8004a6c:	e002      	b.n	8004a74 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004a6e:	4b06      	ldr	r3, [pc, #24]	@ (8004a88 <HAL_RCC_GetSysClockFreq+0x98>)
 8004a70:	613b      	str	r3, [r7, #16]
      break;
 8004a72:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a74:	693b      	ldr	r3, [r7, #16]
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	371c      	adds	r7, #28
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a80:	4770      	bx	lr
 8004a82:	bf00      	nop
 8004a84:	40021000 	.word	0x40021000
 8004a88:	007a1200 	.word	0x007a1200
 8004a8c:	080064b4 	.word	0x080064b4
 8004a90:	080064c4 	.word	0x080064c4
 8004a94:	003d0900 	.word	0x003d0900

08004a98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a9c:	4b03      	ldr	r3, [pc, #12]	@ (8004aac <HAL_RCC_GetHCLKFreq+0x14>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa8:	4770      	bx	lr
 8004aaa:	bf00      	nop
 8004aac:	20000000 	.word	0x20000000

08004ab0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b082      	sub	sp, #8
 8004ab4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004ab6:	f7ff ffef 	bl	8004a98 <HAL_RCC_GetHCLKFreq>
 8004aba:	4601      	mov	r1, r0
 8004abc:	4b0b      	ldr	r3, [pc, #44]	@ (8004aec <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004ac4:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8004ac8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	fa92 f2a2 	rbit	r2, r2
 8004ad0:	603a      	str	r2, [r7, #0]
  return result;
 8004ad2:	683a      	ldr	r2, [r7, #0]
 8004ad4:	fab2 f282 	clz	r2, r2
 8004ad8:	b2d2      	uxtb	r2, r2
 8004ada:	40d3      	lsrs	r3, r2
 8004adc:	4a04      	ldr	r2, [pc, #16]	@ (8004af0 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004ade:	5cd3      	ldrb	r3, [r2, r3]
 8004ae0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3708      	adds	r7, #8
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}
 8004aec:	40021000 	.word	0x40021000
 8004af0:	080064ac 	.word	0x080064ac

08004af4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b082      	sub	sp, #8
 8004af8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004afa:	f7ff ffcd 	bl	8004a98 <HAL_RCC_GetHCLKFreq>
 8004afe:	4601      	mov	r1, r0
 8004b00:	4b0b      	ldr	r3, [pc, #44]	@ (8004b30 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8004b08:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8004b0c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	fa92 f2a2 	rbit	r2, r2
 8004b14:	603a      	str	r2, [r7, #0]
  return result;
 8004b16:	683a      	ldr	r2, [r7, #0]
 8004b18:	fab2 f282 	clz	r2, r2
 8004b1c:	b2d2      	uxtb	r2, r2
 8004b1e:	40d3      	lsrs	r3, r2
 8004b20:	4a04      	ldr	r2, [pc, #16]	@ (8004b34 <HAL_RCC_GetPCLK2Freq+0x40>)
 8004b22:	5cd3      	ldrb	r3, [r2, r3]
 8004b24:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3708      	adds	r7, #8
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}
 8004b30:	40021000 	.word	0x40021000
 8004b34:	080064ac 	.word	0x080064ac

08004b38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b082      	sub	sp, #8
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d101      	bne.n	8004b4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e049      	b.n	8004bde <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d106      	bne.n	8004b64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f7fc f8e0 	bl	8000d24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2202      	movs	r2, #2
 8004b68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	3304      	adds	r3, #4
 8004b74:	4619      	mov	r1, r3
 8004b76:	4610      	mov	r0, r2
 8004b78:	f000 f9bc 	bl	8004ef4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2201      	movs	r2, #1
 8004b88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2201      	movs	r2, #1
 8004b98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004bdc:	2300      	movs	r3, #0
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3708      	adds	r7, #8
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}
	...

08004be8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b085      	sub	sp, #20
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004bf6:	b2db      	uxtb	r3, r3
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d001      	beq.n	8004c00 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	e040      	b.n	8004c82 <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2202      	movs	r2, #2
 8004c04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	68da      	ldr	r2, [r3, #12]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f042 0201 	orr.w	r2, r2, #1
 8004c16:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a1c      	ldr	r2, [pc, #112]	@ (8004c90 <HAL_TIM_Base_Start_IT+0xa8>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d00e      	beq.n	8004c40 <HAL_TIM_Base_Start_IT+0x58>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c2a:	d009      	beq.n	8004c40 <HAL_TIM_Base_Start_IT+0x58>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a18      	ldr	r2, [pc, #96]	@ (8004c94 <HAL_TIM_Base_Start_IT+0xac>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d004      	beq.n	8004c40 <HAL_TIM_Base_Start_IT+0x58>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a17      	ldr	r2, [pc, #92]	@ (8004c98 <HAL_TIM_Base_Start_IT+0xb0>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d115      	bne.n	8004c6c <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	689a      	ldr	r2, [r3, #8]
 8004c46:	4b15      	ldr	r3, [pc, #84]	@ (8004c9c <HAL_TIM_Base_Start_IT+0xb4>)
 8004c48:	4013      	ands	r3, r2
 8004c4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2b06      	cmp	r3, #6
 8004c50:	d015      	beq.n	8004c7e <HAL_TIM_Base_Start_IT+0x96>
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c58:	d011      	beq.n	8004c7e <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f042 0201 	orr.w	r2, r2, #1
 8004c68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c6a:	e008      	b.n	8004c7e <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	681a      	ldr	r2, [r3, #0]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f042 0201 	orr.w	r2, r2, #1
 8004c7a:	601a      	str	r2, [r3, #0]
 8004c7c:	e000      	b.n	8004c80 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c7e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004c80:	2300      	movs	r3, #0
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3714      	adds	r7, #20
 8004c86:	46bd      	mov	sp, r7
 8004c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8c:	4770      	bx	lr
 8004c8e:	bf00      	nop
 8004c90:	40012c00 	.word	0x40012c00
 8004c94:	40000400 	.word	0x40000400
 8004c98:	40014000 	.word	0x40014000
 8004c9c:	00010007 	.word	0x00010007

08004ca0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b084      	sub	sp, #16
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	68db      	ldr	r3, [r3, #12]
 8004cae:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	691b      	ldr	r3, [r3, #16]
 8004cb6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	f003 0302 	and.w	r3, r3, #2
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d020      	beq.n	8004d04 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	f003 0302 	and.w	r3, r3, #2
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d01b      	beq.n	8004d04 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f06f 0202 	mvn.w	r2, #2
 8004cd4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2201      	movs	r2, #1
 8004cda:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	699b      	ldr	r3, [r3, #24]
 8004ce2:	f003 0303 	and.w	r3, r3, #3
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d003      	beq.n	8004cf2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f000 f8e4 	bl	8004eb8 <HAL_TIM_IC_CaptureCallback>
 8004cf0:	e005      	b.n	8004cfe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f000 f8d6 	bl	8004ea4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cf8:	6878      	ldr	r0, [r7, #4]
 8004cfa:	f000 f8e7 	bl	8004ecc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2200      	movs	r2, #0
 8004d02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	f003 0304 	and.w	r3, r3, #4
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d020      	beq.n	8004d50 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	f003 0304 	and.w	r3, r3, #4
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d01b      	beq.n	8004d50 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f06f 0204 	mvn.w	r2, #4
 8004d20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2202      	movs	r2, #2
 8004d26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	699b      	ldr	r3, [r3, #24]
 8004d2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d003      	beq.n	8004d3e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f000 f8be 	bl	8004eb8 <HAL_TIM_IC_CaptureCallback>
 8004d3c:	e005      	b.n	8004d4a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f000 f8b0 	bl	8004ea4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d44:	6878      	ldr	r0, [r7, #4]
 8004d46:	f000 f8c1 	bl	8004ecc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	f003 0308 	and.w	r3, r3, #8
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d020      	beq.n	8004d9c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	f003 0308 	and.w	r3, r3, #8
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d01b      	beq.n	8004d9c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f06f 0208 	mvn.w	r2, #8
 8004d6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2204      	movs	r2, #4
 8004d72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	69db      	ldr	r3, [r3, #28]
 8004d7a:	f003 0303 	and.w	r3, r3, #3
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d003      	beq.n	8004d8a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f000 f898 	bl	8004eb8 <HAL_TIM_IC_CaptureCallback>
 8004d88:	e005      	b.n	8004d96 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f000 f88a 	bl	8004ea4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d90:	6878      	ldr	r0, [r7, #4]
 8004d92:	f000 f89b 	bl	8004ecc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	f003 0310 	and.w	r3, r3, #16
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d020      	beq.n	8004de8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	f003 0310 	and.w	r3, r3, #16
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d01b      	beq.n	8004de8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f06f 0210 	mvn.w	r2, #16
 8004db8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2208      	movs	r2, #8
 8004dbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	69db      	ldr	r3, [r3, #28]
 8004dc6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d003      	beq.n	8004dd6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f000 f872 	bl	8004eb8 <HAL_TIM_IC_CaptureCallback>
 8004dd4:	e005      	b.n	8004de2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f000 f864 	bl	8004ea4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ddc:	6878      	ldr	r0, [r7, #4]
 8004dde:	f000 f875 	bl	8004ecc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2200      	movs	r2, #0
 8004de6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	f003 0301 	and.w	r3, r3, #1
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d00c      	beq.n	8004e0c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	f003 0301 	and.w	r3, r3, #1
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d007      	beq.n	8004e0c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f06f 0201 	mvn.w	r2, #1
 8004e04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f7fb fb00 	bl	800040c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d00c      	beq.n	8004e30 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d007      	beq.n	8004e30 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004e28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f000 f95e 	bl	80050ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d00c      	beq.n	8004e54 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d007      	beq.n	8004e54 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004e4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f000 f956 	bl	8005100 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d00c      	beq.n	8004e78 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d007      	beq.n	8004e78 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004e70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f000 f834 	bl	8004ee0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	f003 0320 	and.w	r3, r3, #32
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d00c      	beq.n	8004e9c <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	f003 0320 	and.w	r3, r3, #32
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d007      	beq.n	8004e9c <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f06f 0220 	mvn.w	r2, #32
 8004e94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f000 f91e 	bl	80050d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e9c:	bf00      	nop
 8004e9e:	3710      	adds	r7, #16
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}

08004ea4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b083      	sub	sp, #12
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004eac:	bf00      	nop
 8004eae:	370c      	adds	r7, #12
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb6:	4770      	bx	lr

08004eb8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b083      	sub	sp, #12
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ec0:	bf00      	nop
 8004ec2:	370c      	adds	r7, #12
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr

08004ecc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b083      	sub	sp, #12
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ed4:	bf00      	nop
 8004ed6:	370c      	adds	r7, #12
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ede:	4770      	bx	lr

08004ee0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b083      	sub	sp, #12
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ee8:	bf00      	nop
 8004eea:	370c      	adds	r7, #12
 8004eec:	46bd      	mov	sp, r7
 8004eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef2:	4770      	bx	lr

08004ef4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b085      	sub	sp, #20
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
 8004efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	4a38      	ldr	r2, [pc, #224]	@ (8004fe8 <TIM_Base_SetConfig+0xf4>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d007      	beq.n	8004f1c <TIM_Base_SetConfig+0x28>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f12:	d003      	beq.n	8004f1c <TIM_Base_SetConfig+0x28>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	4a35      	ldr	r2, [pc, #212]	@ (8004fec <TIM_Base_SetConfig+0xf8>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d108      	bne.n	8004f2e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	68fa      	ldr	r2, [r7, #12]
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	4a2d      	ldr	r2, [pc, #180]	@ (8004fe8 <TIM_Base_SetConfig+0xf4>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d013      	beq.n	8004f5e <TIM_Base_SetConfig+0x6a>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f3c:	d00f      	beq.n	8004f5e <TIM_Base_SetConfig+0x6a>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	4a2a      	ldr	r2, [pc, #168]	@ (8004fec <TIM_Base_SetConfig+0xf8>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d00b      	beq.n	8004f5e <TIM_Base_SetConfig+0x6a>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	4a29      	ldr	r2, [pc, #164]	@ (8004ff0 <TIM_Base_SetConfig+0xfc>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d007      	beq.n	8004f5e <TIM_Base_SetConfig+0x6a>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	4a28      	ldr	r2, [pc, #160]	@ (8004ff4 <TIM_Base_SetConfig+0x100>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d003      	beq.n	8004f5e <TIM_Base_SetConfig+0x6a>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	4a27      	ldr	r2, [pc, #156]	@ (8004ff8 <TIM_Base_SetConfig+0x104>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d108      	bne.n	8004f70 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	68db      	ldr	r3, [r3, #12]
 8004f6a:	68fa      	ldr	r2, [r7, #12]
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	695b      	ldr	r3, [r3, #20]
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	68fa      	ldr	r2, [r7, #12]
 8004f82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	689a      	ldr	r2, [r3, #8]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	4a14      	ldr	r2, [pc, #80]	@ (8004fe8 <TIM_Base_SetConfig+0xf4>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d00b      	beq.n	8004fb4 <TIM_Base_SetConfig+0xc0>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	4a14      	ldr	r2, [pc, #80]	@ (8004ff0 <TIM_Base_SetConfig+0xfc>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d007      	beq.n	8004fb4 <TIM_Base_SetConfig+0xc0>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	4a13      	ldr	r2, [pc, #76]	@ (8004ff4 <TIM_Base_SetConfig+0x100>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d003      	beq.n	8004fb4 <TIM_Base_SetConfig+0xc0>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	4a12      	ldr	r2, [pc, #72]	@ (8004ff8 <TIM_Base_SetConfig+0x104>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d103      	bne.n	8004fbc <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	691a      	ldr	r2, [r3, #16]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	691b      	ldr	r3, [r3, #16]
 8004fc6:	f003 0301 	and.w	r3, r3, #1
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d105      	bne.n	8004fda <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	691b      	ldr	r3, [r3, #16]
 8004fd2:	f023 0201 	bic.w	r2, r3, #1
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	611a      	str	r2, [r3, #16]
  }
}
 8004fda:	bf00      	nop
 8004fdc:	3714      	adds	r7, #20
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe4:	4770      	bx	lr
 8004fe6:	bf00      	nop
 8004fe8:	40012c00 	.word	0x40012c00
 8004fec:	40000400 	.word	0x40000400
 8004ff0:	40014000 	.word	0x40014000
 8004ff4:	40014400 	.word	0x40014400
 8004ff8:	40014800 	.word	0x40014800

08004ffc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b085      	sub	sp, #20
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
 8005004:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800500c:	2b01      	cmp	r3, #1
 800500e:	d101      	bne.n	8005014 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005010:	2302      	movs	r3, #2
 8005012:	e054      	b.n	80050be <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2201      	movs	r2, #1
 8005018:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2202      	movs	r2, #2
 8005020:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a24      	ldr	r2, [pc, #144]	@ (80050cc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d108      	bne.n	8005050 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005044:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	68fa      	ldr	r2, [r7, #12]
 800504c:	4313      	orrs	r3, r2
 800504e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005056:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	68fa      	ldr	r2, [r7, #12]
 800505e:	4313      	orrs	r3, r2
 8005060:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	68fa      	ldr	r2, [r7, #12]
 8005068:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a17      	ldr	r2, [pc, #92]	@ (80050cc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d00e      	beq.n	8005092 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800507c:	d009      	beq.n	8005092 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a13      	ldr	r2, [pc, #76]	@ (80050d0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d004      	beq.n	8005092 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a11      	ldr	r2, [pc, #68]	@ (80050d4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d10c      	bne.n	80050ac <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005098:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	68ba      	ldr	r2, [r7, #8]
 80050a0:	4313      	orrs	r3, r2
 80050a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	68ba      	ldr	r2, [r7, #8]
 80050aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2201      	movs	r2, #1
 80050b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2200      	movs	r2, #0
 80050b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80050bc:	2300      	movs	r3, #0
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3714      	adds	r7, #20
 80050c2:	46bd      	mov	sp, r7
 80050c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c8:	4770      	bx	lr
 80050ca:	bf00      	nop
 80050cc:	40012c00 	.word	0x40012c00
 80050d0:	40000400 	.word	0x40000400
 80050d4:	40014000 	.word	0x40014000

080050d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80050d8:	b480      	push	{r7}
 80050da:	b083      	sub	sp, #12
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80050e0:	bf00      	nop
 80050e2:	370c      	adds	r7, #12
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr

080050ec <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b083      	sub	sp, #12
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80050f4:	bf00      	nop
 80050f6:	370c      	adds	r7, #12
 80050f8:	46bd      	mov	sp, r7
 80050fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fe:	4770      	bx	lr

08005100 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005100:	b480      	push	{r7}
 8005102:	b083      	sub	sp, #12
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005108:	bf00      	nop
 800510a:	370c      	adds	r7, #12
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr

08005114 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b082      	sub	sp, #8
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d101      	bne.n	8005126 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005122:	2301      	movs	r3, #1
 8005124:	e040      	b.n	80051a8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800512a:	2b00      	cmp	r3, #0
 800512c:	d106      	bne.n	800513c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2200      	movs	r2, #0
 8005132:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f7fb fe36 	bl	8000da8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2224      	movs	r2, #36	@ 0x24
 8005140:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	681a      	ldr	r2, [r3, #0]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f022 0201 	bic.w	r2, r2, #1
 8005150:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005156:	2b00      	cmp	r3, #0
 8005158:	d002      	beq.n	8005160 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f000 f9e8 	bl	8005530 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f000 f8af 	bl	80052c4 <UART_SetConfig>
 8005166:	4603      	mov	r3, r0
 8005168:	2b01      	cmp	r3, #1
 800516a:	d101      	bne.n	8005170 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800516c:	2301      	movs	r3, #1
 800516e:	e01b      	b.n	80051a8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	685a      	ldr	r2, [r3, #4]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800517e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	689a      	ldr	r2, [r3, #8]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800518e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f042 0201 	orr.w	r2, r2, #1
 800519e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	f000 fa67 	bl	8005674 <UART_CheckIdleState>
 80051a6:	4603      	mov	r3, r0
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	3708      	adds	r7, #8
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}

080051b0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b08a      	sub	sp, #40	@ 0x28
 80051b4:	af02      	add	r7, sp, #8
 80051b6:	60f8      	str	r0, [r7, #12]
 80051b8:	60b9      	str	r1, [r7, #8]
 80051ba:	603b      	str	r3, [r7, #0]
 80051bc:	4613      	mov	r3, r2
 80051be:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80051c4:	2b20      	cmp	r3, #32
 80051c6:	d177      	bne.n	80052b8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d002      	beq.n	80051d4 <HAL_UART_Transmit+0x24>
 80051ce:	88fb      	ldrh	r3, [r7, #6]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d101      	bne.n	80051d8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80051d4:	2301      	movs	r3, #1
 80051d6:	e070      	b.n	80052ba <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2200      	movs	r2, #0
 80051dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	2221      	movs	r2, #33	@ 0x21
 80051e4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80051e6:	f7fb ff99 	bl	800111c <HAL_GetTick>
 80051ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	88fa      	ldrh	r2, [r7, #6]
 80051f0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	88fa      	ldrh	r2, [r7, #6]
 80051f8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005204:	d108      	bne.n	8005218 <HAL_UART_Transmit+0x68>
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	691b      	ldr	r3, [r3, #16]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d104      	bne.n	8005218 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800520e:	2300      	movs	r3, #0
 8005210:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	61bb      	str	r3, [r7, #24]
 8005216:	e003      	b.n	8005220 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800521c:	2300      	movs	r3, #0
 800521e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005220:	e02f      	b.n	8005282 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	9300      	str	r3, [sp, #0]
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	2200      	movs	r2, #0
 800522a:	2180      	movs	r1, #128	@ 0x80
 800522c:	68f8      	ldr	r0, [r7, #12]
 800522e:	f000 fac9 	bl	80057c4 <UART_WaitOnFlagUntilTimeout>
 8005232:	4603      	mov	r3, r0
 8005234:	2b00      	cmp	r3, #0
 8005236:	d004      	beq.n	8005242 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2220      	movs	r2, #32
 800523c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800523e:	2303      	movs	r3, #3
 8005240:	e03b      	b.n	80052ba <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005242:	69fb      	ldr	r3, [r7, #28]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d10b      	bne.n	8005260 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005248:	69bb      	ldr	r3, [r7, #24]
 800524a:	881a      	ldrh	r2, [r3, #0]
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005254:	b292      	uxth	r2, r2
 8005256:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005258:	69bb      	ldr	r3, [r7, #24]
 800525a:	3302      	adds	r3, #2
 800525c:	61bb      	str	r3, [r7, #24]
 800525e:	e007      	b.n	8005270 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005260:	69fb      	ldr	r3, [r7, #28]
 8005262:	781a      	ldrb	r2, [r3, #0]
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800526a:	69fb      	ldr	r3, [r7, #28]
 800526c:	3301      	adds	r3, #1
 800526e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005276:	b29b      	uxth	r3, r3
 8005278:	3b01      	subs	r3, #1
 800527a:	b29a      	uxth	r2, r3
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005288:	b29b      	uxth	r3, r3
 800528a:	2b00      	cmp	r3, #0
 800528c:	d1c9      	bne.n	8005222 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	9300      	str	r3, [sp, #0]
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	2200      	movs	r2, #0
 8005296:	2140      	movs	r1, #64	@ 0x40
 8005298:	68f8      	ldr	r0, [r7, #12]
 800529a:	f000 fa93 	bl	80057c4 <UART_WaitOnFlagUntilTimeout>
 800529e:	4603      	mov	r3, r0
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d004      	beq.n	80052ae <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2220      	movs	r2, #32
 80052a8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80052aa:	2303      	movs	r3, #3
 80052ac:	e005      	b.n	80052ba <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2220      	movs	r2, #32
 80052b2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80052b4:	2300      	movs	r3, #0
 80052b6:	e000      	b.n	80052ba <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80052b8:	2302      	movs	r3, #2
  }
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3720      	adds	r7, #32
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}
	...

080052c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b088      	sub	sp, #32
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80052cc:	2300      	movs	r3, #0
 80052ce:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	689a      	ldr	r2, [r3, #8]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	691b      	ldr	r3, [r3, #16]
 80052d8:	431a      	orrs	r2, r3
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	695b      	ldr	r3, [r3, #20]
 80052de:	431a      	orrs	r2, r3
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	69db      	ldr	r3, [r3, #28]
 80052e4:	4313      	orrs	r3, r2
 80052e6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	681a      	ldr	r2, [r3, #0]
 80052ee:	4b8a      	ldr	r3, [pc, #552]	@ (8005518 <UART_SetConfig+0x254>)
 80052f0:	4013      	ands	r3, r2
 80052f2:	687a      	ldr	r2, [r7, #4]
 80052f4:	6812      	ldr	r2, [r2, #0]
 80052f6:	6979      	ldr	r1, [r7, #20]
 80052f8:	430b      	orrs	r3, r1
 80052fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	68da      	ldr	r2, [r3, #12]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	430a      	orrs	r2, r1
 8005310:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	699b      	ldr	r3, [r3, #24]
 8005316:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6a1b      	ldr	r3, [r3, #32]
 800531c:	697a      	ldr	r2, [r7, #20]
 800531e:	4313      	orrs	r3, r2
 8005320:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	697a      	ldr	r2, [r7, #20]
 8005332:	430a      	orrs	r2, r1
 8005334:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a78      	ldr	r2, [pc, #480]	@ (800551c <UART_SetConfig+0x258>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d120      	bne.n	8005382 <UART_SetConfig+0xbe>
 8005340:	4b77      	ldr	r3, [pc, #476]	@ (8005520 <UART_SetConfig+0x25c>)
 8005342:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005344:	f003 0303 	and.w	r3, r3, #3
 8005348:	2b03      	cmp	r3, #3
 800534a:	d817      	bhi.n	800537c <UART_SetConfig+0xb8>
 800534c:	a201      	add	r2, pc, #4	@ (adr r2, 8005354 <UART_SetConfig+0x90>)
 800534e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005352:	bf00      	nop
 8005354:	08005365 	.word	0x08005365
 8005358:	08005371 	.word	0x08005371
 800535c:	08005377 	.word	0x08005377
 8005360:	0800536b 	.word	0x0800536b
 8005364:	2300      	movs	r3, #0
 8005366:	77fb      	strb	r3, [r7, #31]
 8005368:	e01d      	b.n	80053a6 <UART_SetConfig+0xe2>
 800536a:	2302      	movs	r3, #2
 800536c:	77fb      	strb	r3, [r7, #31]
 800536e:	e01a      	b.n	80053a6 <UART_SetConfig+0xe2>
 8005370:	2304      	movs	r3, #4
 8005372:	77fb      	strb	r3, [r7, #31]
 8005374:	e017      	b.n	80053a6 <UART_SetConfig+0xe2>
 8005376:	2308      	movs	r3, #8
 8005378:	77fb      	strb	r3, [r7, #31]
 800537a:	e014      	b.n	80053a6 <UART_SetConfig+0xe2>
 800537c:	2310      	movs	r3, #16
 800537e:	77fb      	strb	r3, [r7, #31]
 8005380:	e011      	b.n	80053a6 <UART_SetConfig+0xe2>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a67      	ldr	r2, [pc, #412]	@ (8005524 <UART_SetConfig+0x260>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d102      	bne.n	8005392 <UART_SetConfig+0xce>
 800538c:	2300      	movs	r3, #0
 800538e:	77fb      	strb	r3, [r7, #31]
 8005390:	e009      	b.n	80053a6 <UART_SetConfig+0xe2>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a64      	ldr	r2, [pc, #400]	@ (8005528 <UART_SetConfig+0x264>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d102      	bne.n	80053a2 <UART_SetConfig+0xde>
 800539c:	2300      	movs	r3, #0
 800539e:	77fb      	strb	r3, [r7, #31]
 80053a0:	e001      	b.n	80053a6 <UART_SetConfig+0xe2>
 80053a2:	2310      	movs	r3, #16
 80053a4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	69db      	ldr	r3, [r3, #28]
 80053aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80053ae:	d15a      	bne.n	8005466 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80053b0:	7ffb      	ldrb	r3, [r7, #31]
 80053b2:	2b08      	cmp	r3, #8
 80053b4:	d827      	bhi.n	8005406 <UART_SetConfig+0x142>
 80053b6:	a201      	add	r2, pc, #4	@ (adr r2, 80053bc <UART_SetConfig+0xf8>)
 80053b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053bc:	080053e1 	.word	0x080053e1
 80053c0:	080053e9 	.word	0x080053e9
 80053c4:	080053f1 	.word	0x080053f1
 80053c8:	08005407 	.word	0x08005407
 80053cc:	080053f7 	.word	0x080053f7
 80053d0:	08005407 	.word	0x08005407
 80053d4:	08005407 	.word	0x08005407
 80053d8:	08005407 	.word	0x08005407
 80053dc:	080053ff 	.word	0x080053ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053e0:	f7ff fb66 	bl	8004ab0 <HAL_RCC_GetPCLK1Freq>
 80053e4:	61b8      	str	r0, [r7, #24]
        break;
 80053e6:	e013      	b.n	8005410 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80053e8:	f7ff fb84 	bl	8004af4 <HAL_RCC_GetPCLK2Freq>
 80053ec:	61b8      	str	r0, [r7, #24]
        break;
 80053ee:	e00f      	b.n	8005410 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053f0:	4b4e      	ldr	r3, [pc, #312]	@ (800552c <UART_SetConfig+0x268>)
 80053f2:	61bb      	str	r3, [r7, #24]
        break;
 80053f4:	e00c      	b.n	8005410 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053f6:	f7ff fafb 	bl	80049f0 <HAL_RCC_GetSysClockFreq>
 80053fa:	61b8      	str	r0, [r7, #24]
        break;
 80053fc:	e008      	b.n	8005410 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005402:	61bb      	str	r3, [r7, #24]
        break;
 8005404:	e004      	b.n	8005410 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8005406:	2300      	movs	r3, #0
 8005408:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	77bb      	strb	r3, [r7, #30]
        break;
 800540e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005410:	69bb      	ldr	r3, [r7, #24]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d074      	beq.n	8005500 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005416:	69bb      	ldr	r3, [r7, #24]
 8005418:	005a      	lsls	r2, r3, #1
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	085b      	lsrs	r3, r3, #1
 8005420:	441a      	add	r2, r3
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	fbb2 f3f3 	udiv	r3, r2, r3
 800542a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	2b0f      	cmp	r3, #15
 8005430:	d916      	bls.n	8005460 <UART_SetConfig+0x19c>
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005438:	d212      	bcs.n	8005460 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	b29b      	uxth	r3, r3
 800543e:	f023 030f 	bic.w	r3, r3, #15
 8005442:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	085b      	lsrs	r3, r3, #1
 8005448:	b29b      	uxth	r3, r3
 800544a:	f003 0307 	and.w	r3, r3, #7
 800544e:	b29a      	uxth	r2, r3
 8005450:	89fb      	ldrh	r3, [r7, #14]
 8005452:	4313      	orrs	r3, r2
 8005454:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	89fa      	ldrh	r2, [r7, #14]
 800545c:	60da      	str	r2, [r3, #12]
 800545e:	e04f      	b.n	8005500 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005460:	2301      	movs	r3, #1
 8005462:	77bb      	strb	r3, [r7, #30]
 8005464:	e04c      	b.n	8005500 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005466:	7ffb      	ldrb	r3, [r7, #31]
 8005468:	2b08      	cmp	r3, #8
 800546a:	d828      	bhi.n	80054be <UART_SetConfig+0x1fa>
 800546c:	a201      	add	r2, pc, #4	@ (adr r2, 8005474 <UART_SetConfig+0x1b0>)
 800546e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005472:	bf00      	nop
 8005474:	08005499 	.word	0x08005499
 8005478:	080054a1 	.word	0x080054a1
 800547c:	080054a9 	.word	0x080054a9
 8005480:	080054bf 	.word	0x080054bf
 8005484:	080054af 	.word	0x080054af
 8005488:	080054bf 	.word	0x080054bf
 800548c:	080054bf 	.word	0x080054bf
 8005490:	080054bf 	.word	0x080054bf
 8005494:	080054b7 	.word	0x080054b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005498:	f7ff fb0a 	bl	8004ab0 <HAL_RCC_GetPCLK1Freq>
 800549c:	61b8      	str	r0, [r7, #24]
        break;
 800549e:	e013      	b.n	80054c8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80054a0:	f7ff fb28 	bl	8004af4 <HAL_RCC_GetPCLK2Freq>
 80054a4:	61b8      	str	r0, [r7, #24]
        break;
 80054a6:	e00f      	b.n	80054c8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054a8:	4b20      	ldr	r3, [pc, #128]	@ (800552c <UART_SetConfig+0x268>)
 80054aa:	61bb      	str	r3, [r7, #24]
        break;
 80054ac:	e00c      	b.n	80054c8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054ae:	f7ff fa9f 	bl	80049f0 <HAL_RCC_GetSysClockFreq>
 80054b2:	61b8      	str	r0, [r7, #24]
        break;
 80054b4:	e008      	b.n	80054c8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80054ba:	61bb      	str	r3, [r7, #24]
        break;
 80054bc:	e004      	b.n	80054c8 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80054be:	2300      	movs	r3, #0
 80054c0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	77bb      	strb	r3, [r7, #30]
        break;
 80054c6:	bf00      	nop
    }

    if (pclk != 0U)
 80054c8:	69bb      	ldr	r3, [r7, #24]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d018      	beq.n	8005500 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	085a      	lsrs	r2, r3, #1
 80054d4:	69bb      	ldr	r3, [r7, #24]
 80054d6:	441a      	add	r2, r3
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80054e0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	2b0f      	cmp	r3, #15
 80054e6:	d909      	bls.n	80054fc <UART_SetConfig+0x238>
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80054ee:	d205      	bcs.n	80054fc <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80054f0:	693b      	ldr	r3, [r7, #16]
 80054f2:	b29a      	uxth	r2, r3
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	60da      	str	r2, [r3, #12]
 80054fa:	e001      	b.n	8005500 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80054fc:	2301      	movs	r3, #1
 80054fe:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2200      	movs	r2, #0
 8005504:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2200      	movs	r2, #0
 800550a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800550c:	7fbb      	ldrb	r3, [r7, #30]
}
 800550e:	4618      	mov	r0, r3
 8005510:	3720      	adds	r7, #32
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}
 8005516:	bf00      	nop
 8005518:	efff69f3 	.word	0xefff69f3
 800551c:	40013800 	.word	0x40013800
 8005520:	40021000 	.word	0x40021000
 8005524:	40004400 	.word	0x40004400
 8005528:	40004800 	.word	0x40004800
 800552c:	007a1200 	.word	0x007a1200

08005530 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005530:	b480      	push	{r7}
 8005532:	b083      	sub	sp, #12
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800553c:	f003 0308 	and.w	r3, r3, #8
 8005540:	2b00      	cmp	r3, #0
 8005542:	d00a      	beq.n	800555a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	430a      	orrs	r2, r1
 8005558:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800555e:	f003 0301 	and.w	r3, r3, #1
 8005562:	2b00      	cmp	r3, #0
 8005564:	d00a      	beq.n	800557c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	430a      	orrs	r2, r1
 800557a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005580:	f003 0302 	and.w	r3, r3, #2
 8005584:	2b00      	cmp	r3, #0
 8005586:	d00a      	beq.n	800559e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	430a      	orrs	r2, r1
 800559c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055a2:	f003 0304 	and.w	r3, r3, #4
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d00a      	beq.n	80055c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	430a      	orrs	r2, r1
 80055be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055c4:	f003 0310 	and.w	r3, r3, #16
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d00a      	beq.n	80055e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	430a      	orrs	r2, r1
 80055e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055e6:	f003 0320 	and.w	r3, r3, #32
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d00a      	beq.n	8005604 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	430a      	orrs	r2, r1
 8005602:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005608:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800560c:	2b00      	cmp	r3, #0
 800560e:	d01a      	beq.n	8005646 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	430a      	orrs	r2, r1
 8005624:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800562a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800562e:	d10a      	bne.n	8005646 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	430a      	orrs	r2, r1
 8005644:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800564a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800564e:	2b00      	cmp	r3, #0
 8005650:	d00a      	beq.n	8005668 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	430a      	orrs	r2, r1
 8005666:	605a      	str	r2, [r3, #4]
  }
}
 8005668:	bf00      	nop
 800566a:	370c      	adds	r7, #12
 800566c:	46bd      	mov	sp, r7
 800566e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005672:	4770      	bx	lr

08005674 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b098      	sub	sp, #96	@ 0x60
 8005678:	af02      	add	r7, sp, #8
 800567a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2200      	movs	r2, #0
 8005680:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005684:	f7fb fd4a 	bl	800111c <HAL_GetTick>
 8005688:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f003 0308 	and.w	r3, r3, #8
 8005694:	2b08      	cmp	r3, #8
 8005696:	d12e      	bne.n	80056f6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005698:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800569c:	9300      	str	r3, [sp, #0]
 800569e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056a0:	2200      	movs	r2, #0
 80056a2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f000 f88c 	bl	80057c4 <UART_WaitOnFlagUntilTimeout>
 80056ac:	4603      	mov	r3, r0
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d021      	beq.n	80056f6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056ba:	e853 3f00 	ldrex	r3, [r3]
 80056be:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80056c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80056c6:	653b      	str	r3, [r7, #80]	@ 0x50
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	461a      	mov	r2, r3
 80056ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80056d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80056d2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056d4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80056d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80056d8:	e841 2300 	strex	r3, r2, [r1]
 80056dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80056de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d1e6      	bne.n	80056b2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2220      	movs	r2, #32
 80056e8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2200      	movs	r2, #0
 80056ee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80056f2:	2303      	movs	r3, #3
 80056f4:	e062      	b.n	80057bc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f003 0304 	and.w	r3, r3, #4
 8005700:	2b04      	cmp	r3, #4
 8005702:	d149      	bne.n	8005798 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005704:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005708:	9300      	str	r3, [sp, #0]
 800570a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800570c:	2200      	movs	r2, #0
 800570e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f000 f856 	bl	80057c4 <UART_WaitOnFlagUntilTimeout>
 8005718:	4603      	mov	r3, r0
 800571a:	2b00      	cmp	r3, #0
 800571c:	d03c      	beq.n	8005798 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005726:	e853 3f00 	ldrex	r3, [r3]
 800572a:	623b      	str	r3, [r7, #32]
   return(result);
 800572c:	6a3b      	ldr	r3, [r7, #32]
 800572e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005732:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	461a      	mov	r2, r3
 800573a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800573c:	633b      	str	r3, [r7, #48]	@ 0x30
 800573e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005740:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005742:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005744:	e841 2300 	strex	r3, r2, [r1]
 8005748:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800574a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800574c:	2b00      	cmp	r3, #0
 800574e:	d1e6      	bne.n	800571e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	3308      	adds	r3, #8
 8005756:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	e853 3f00 	ldrex	r3, [r3]
 800575e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	f023 0301 	bic.w	r3, r3, #1
 8005766:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	3308      	adds	r3, #8
 800576e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005770:	61fa      	str	r2, [r7, #28]
 8005772:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005774:	69b9      	ldr	r1, [r7, #24]
 8005776:	69fa      	ldr	r2, [r7, #28]
 8005778:	e841 2300 	strex	r3, r2, [r1]
 800577c:	617b      	str	r3, [r7, #20]
   return(result);
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d1e5      	bne.n	8005750 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2220      	movs	r2, #32
 8005788:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2200      	movs	r2, #0
 8005790:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005794:	2303      	movs	r3, #3
 8005796:	e011      	b.n	80057bc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2220      	movs	r2, #32
 800579c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2220      	movs	r2, #32
 80057a2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2200      	movs	r2, #0
 80057aa:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2200      	movs	r2, #0
 80057b0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2200      	movs	r2, #0
 80057b6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80057ba:	2300      	movs	r3, #0
}
 80057bc:	4618      	mov	r0, r3
 80057be:	3758      	adds	r7, #88	@ 0x58
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}

080057c4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b084      	sub	sp, #16
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	60f8      	str	r0, [r7, #12]
 80057cc:	60b9      	str	r1, [r7, #8]
 80057ce:	603b      	str	r3, [r7, #0]
 80057d0:	4613      	mov	r3, r2
 80057d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057d4:	e04f      	b.n	8005876 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057d6:	69bb      	ldr	r3, [r7, #24]
 80057d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057dc:	d04b      	beq.n	8005876 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057de:	f7fb fc9d 	bl	800111c <HAL_GetTick>
 80057e2:	4602      	mov	r2, r0
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	1ad3      	subs	r3, r2, r3
 80057e8:	69ba      	ldr	r2, [r7, #24]
 80057ea:	429a      	cmp	r2, r3
 80057ec:	d302      	bcc.n	80057f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80057ee:	69bb      	ldr	r3, [r7, #24]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d101      	bne.n	80057f8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80057f4:	2303      	movs	r3, #3
 80057f6:	e04e      	b.n	8005896 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f003 0304 	and.w	r3, r3, #4
 8005802:	2b00      	cmp	r3, #0
 8005804:	d037      	beq.n	8005876 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	2b80      	cmp	r3, #128	@ 0x80
 800580a:	d034      	beq.n	8005876 <UART_WaitOnFlagUntilTimeout+0xb2>
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	2b40      	cmp	r3, #64	@ 0x40
 8005810:	d031      	beq.n	8005876 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	69db      	ldr	r3, [r3, #28]
 8005818:	f003 0308 	and.w	r3, r3, #8
 800581c:	2b08      	cmp	r3, #8
 800581e:	d110      	bne.n	8005842 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	2208      	movs	r2, #8
 8005826:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005828:	68f8      	ldr	r0, [r7, #12]
 800582a:	f000 f838 	bl	800589e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2208      	movs	r2, #8
 8005832:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2200      	movs	r2, #0
 800583a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800583e:	2301      	movs	r3, #1
 8005840:	e029      	b.n	8005896 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	69db      	ldr	r3, [r3, #28]
 8005848:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800584c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005850:	d111      	bne.n	8005876 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800585a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800585c:	68f8      	ldr	r0, [r7, #12]
 800585e:	f000 f81e 	bl	800589e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2220      	movs	r2, #32
 8005866:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2200      	movs	r2, #0
 800586e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005872:	2303      	movs	r3, #3
 8005874:	e00f      	b.n	8005896 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	69da      	ldr	r2, [r3, #28]
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	4013      	ands	r3, r2
 8005880:	68ba      	ldr	r2, [r7, #8]
 8005882:	429a      	cmp	r2, r3
 8005884:	bf0c      	ite	eq
 8005886:	2301      	moveq	r3, #1
 8005888:	2300      	movne	r3, #0
 800588a:	b2db      	uxtb	r3, r3
 800588c:	461a      	mov	r2, r3
 800588e:	79fb      	ldrb	r3, [r7, #7]
 8005890:	429a      	cmp	r2, r3
 8005892:	d0a0      	beq.n	80057d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005894:	2300      	movs	r3, #0
}
 8005896:	4618      	mov	r0, r3
 8005898:	3710      	adds	r7, #16
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}

0800589e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800589e:	b480      	push	{r7}
 80058a0:	b095      	sub	sp, #84	@ 0x54
 80058a2:	af00      	add	r7, sp, #0
 80058a4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058ae:	e853 3f00 	ldrex	r3, [r3]
 80058b2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80058b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058b6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80058ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	461a      	mov	r2, r3
 80058c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80058c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80058c6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058c8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80058ca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80058cc:	e841 2300 	strex	r3, r2, [r1]
 80058d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80058d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d1e6      	bne.n	80058a6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	3308      	adds	r3, #8
 80058de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058e0:	6a3b      	ldr	r3, [r7, #32]
 80058e2:	e853 3f00 	ldrex	r3, [r3]
 80058e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80058e8:	69fb      	ldr	r3, [r7, #28]
 80058ea:	f023 0301 	bic.w	r3, r3, #1
 80058ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	3308      	adds	r3, #8
 80058f6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80058f8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80058fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80058fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005900:	e841 2300 	strex	r3, r2, [r1]
 8005904:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005908:	2b00      	cmp	r3, #0
 800590a:	d1e5      	bne.n	80058d8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005910:	2b01      	cmp	r3, #1
 8005912:	d118      	bne.n	8005946 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	e853 3f00 	ldrex	r3, [r3]
 8005920:	60bb      	str	r3, [r7, #8]
   return(result);
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	f023 0310 	bic.w	r3, r3, #16
 8005928:	647b      	str	r3, [r7, #68]	@ 0x44
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	461a      	mov	r2, r3
 8005930:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005932:	61bb      	str	r3, [r7, #24]
 8005934:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005936:	6979      	ldr	r1, [r7, #20]
 8005938:	69ba      	ldr	r2, [r7, #24]
 800593a:	e841 2300 	strex	r3, r2, [r1]
 800593e:	613b      	str	r3, [r7, #16]
   return(result);
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d1e6      	bne.n	8005914 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2220      	movs	r2, #32
 800594a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2200      	movs	r2, #0
 8005952:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2200      	movs	r2, #0
 8005958:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800595a:	bf00      	nop
 800595c:	3754      	adds	r7, #84	@ 0x54
 800595e:	46bd      	mov	sp, r7
 8005960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005964:	4770      	bx	lr
	...

08005968 <std>:
 8005968:	2300      	movs	r3, #0
 800596a:	b510      	push	{r4, lr}
 800596c:	4604      	mov	r4, r0
 800596e:	e9c0 3300 	strd	r3, r3, [r0]
 8005972:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005976:	6083      	str	r3, [r0, #8]
 8005978:	8181      	strh	r1, [r0, #12]
 800597a:	6643      	str	r3, [r0, #100]	@ 0x64
 800597c:	81c2      	strh	r2, [r0, #14]
 800597e:	6183      	str	r3, [r0, #24]
 8005980:	4619      	mov	r1, r3
 8005982:	2208      	movs	r2, #8
 8005984:	305c      	adds	r0, #92	@ 0x5c
 8005986:	f000 faa3 	bl	8005ed0 <memset>
 800598a:	4b0d      	ldr	r3, [pc, #52]	@ (80059c0 <std+0x58>)
 800598c:	6263      	str	r3, [r4, #36]	@ 0x24
 800598e:	4b0d      	ldr	r3, [pc, #52]	@ (80059c4 <std+0x5c>)
 8005990:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005992:	4b0d      	ldr	r3, [pc, #52]	@ (80059c8 <std+0x60>)
 8005994:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005996:	4b0d      	ldr	r3, [pc, #52]	@ (80059cc <std+0x64>)
 8005998:	6323      	str	r3, [r4, #48]	@ 0x30
 800599a:	4b0d      	ldr	r3, [pc, #52]	@ (80059d0 <std+0x68>)
 800599c:	6224      	str	r4, [r4, #32]
 800599e:	429c      	cmp	r4, r3
 80059a0:	d006      	beq.n	80059b0 <std+0x48>
 80059a2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80059a6:	4294      	cmp	r4, r2
 80059a8:	d002      	beq.n	80059b0 <std+0x48>
 80059aa:	33d0      	adds	r3, #208	@ 0xd0
 80059ac:	429c      	cmp	r4, r3
 80059ae:	d105      	bne.n	80059bc <std+0x54>
 80059b0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80059b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059b8:	f000 bb02 	b.w	8005fc0 <__retarget_lock_init_recursive>
 80059bc:	bd10      	pop	{r4, pc}
 80059be:	bf00      	nop
 80059c0:	08005d21 	.word	0x08005d21
 80059c4:	08005d43 	.word	0x08005d43
 80059c8:	08005d7b 	.word	0x08005d7b
 80059cc:	08005d9f 	.word	0x08005d9f
 80059d0:	200002ac 	.word	0x200002ac

080059d4 <stdio_exit_handler>:
 80059d4:	4a02      	ldr	r2, [pc, #8]	@ (80059e0 <stdio_exit_handler+0xc>)
 80059d6:	4903      	ldr	r1, [pc, #12]	@ (80059e4 <stdio_exit_handler+0x10>)
 80059d8:	4803      	ldr	r0, [pc, #12]	@ (80059e8 <stdio_exit_handler+0x14>)
 80059da:	f000 b869 	b.w	8005ab0 <_fwalk_sglue>
 80059de:	bf00      	nop
 80059e0:	2000000c 	.word	0x2000000c
 80059e4:	080062d1 	.word	0x080062d1
 80059e8:	2000001c 	.word	0x2000001c

080059ec <cleanup_stdio>:
 80059ec:	6841      	ldr	r1, [r0, #4]
 80059ee:	4b0c      	ldr	r3, [pc, #48]	@ (8005a20 <cleanup_stdio+0x34>)
 80059f0:	4299      	cmp	r1, r3
 80059f2:	b510      	push	{r4, lr}
 80059f4:	4604      	mov	r4, r0
 80059f6:	d001      	beq.n	80059fc <cleanup_stdio+0x10>
 80059f8:	f000 fc6a 	bl	80062d0 <_fflush_r>
 80059fc:	68a1      	ldr	r1, [r4, #8]
 80059fe:	4b09      	ldr	r3, [pc, #36]	@ (8005a24 <cleanup_stdio+0x38>)
 8005a00:	4299      	cmp	r1, r3
 8005a02:	d002      	beq.n	8005a0a <cleanup_stdio+0x1e>
 8005a04:	4620      	mov	r0, r4
 8005a06:	f000 fc63 	bl	80062d0 <_fflush_r>
 8005a0a:	68e1      	ldr	r1, [r4, #12]
 8005a0c:	4b06      	ldr	r3, [pc, #24]	@ (8005a28 <cleanup_stdio+0x3c>)
 8005a0e:	4299      	cmp	r1, r3
 8005a10:	d004      	beq.n	8005a1c <cleanup_stdio+0x30>
 8005a12:	4620      	mov	r0, r4
 8005a14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a18:	f000 bc5a 	b.w	80062d0 <_fflush_r>
 8005a1c:	bd10      	pop	{r4, pc}
 8005a1e:	bf00      	nop
 8005a20:	200002ac 	.word	0x200002ac
 8005a24:	20000314 	.word	0x20000314
 8005a28:	2000037c 	.word	0x2000037c

08005a2c <global_stdio_init.part.0>:
 8005a2c:	b510      	push	{r4, lr}
 8005a2e:	4b0b      	ldr	r3, [pc, #44]	@ (8005a5c <global_stdio_init.part.0+0x30>)
 8005a30:	4c0b      	ldr	r4, [pc, #44]	@ (8005a60 <global_stdio_init.part.0+0x34>)
 8005a32:	4a0c      	ldr	r2, [pc, #48]	@ (8005a64 <global_stdio_init.part.0+0x38>)
 8005a34:	601a      	str	r2, [r3, #0]
 8005a36:	4620      	mov	r0, r4
 8005a38:	2200      	movs	r2, #0
 8005a3a:	2104      	movs	r1, #4
 8005a3c:	f7ff ff94 	bl	8005968 <std>
 8005a40:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005a44:	2201      	movs	r2, #1
 8005a46:	2109      	movs	r1, #9
 8005a48:	f7ff ff8e 	bl	8005968 <std>
 8005a4c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005a50:	2202      	movs	r2, #2
 8005a52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a56:	2112      	movs	r1, #18
 8005a58:	f7ff bf86 	b.w	8005968 <std>
 8005a5c:	200003e4 	.word	0x200003e4
 8005a60:	200002ac 	.word	0x200002ac
 8005a64:	080059d5 	.word	0x080059d5

08005a68 <__sfp_lock_acquire>:
 8005a68:	4801      	ldr	r0, [pc, #4]	@ (8005a70 <__sfp_lock_acquire+0x8>)
 8005a6a:	f000 baaa 	b.w	8005fc2 <__retarget_lock_acquire_recursive>
 8005a6e:	bf00      	nop
 8005a70:	200003ed 	.word	0x200003ed

08005a74 <__sfp_lock_release>:
 8005a74:	4801      	ldr	r0, [pc, #4]	@ (8005a7c <__sfp_lock_release+0x8>)
 8005a76:	f000 baa5 	b.w	8005fc4 <__retarget_lock_release_recursive>
 8005a7a:	bf00      	nop
 8005a7c:	200003ed 	.word	0x200003ed

08005a80 <__sinit>:
 8005a80:	b510      	push	{r4, lr}
 8005a82:	4604      	mov	r4, r0
 8005a84:	f7ff fff0 	bl	8005a68 <__sfp_lock_acquire>
 8005a88:	6a23      	ldr	r3, [r4, #32]
 8005a8a:	b11b      	cbz	r3, 8005a94 <__sinit+0x14>
 8005a8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a90:	f7ff bff0 	b.w	8005a74 <__sfp_lock_release>
 8005a94:	4b04      	ldr	r3, [pc, #16]	@ (8005aa8 <__sinit+0x28>)
 8005a96:	6223      	str	r3, [r4, #32]
 8005a98:	4b04      	ldr	r3, [pc, #16]	@ (8005aac <__sinit+0x2c>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d1f5      	bne.n	8005a8c <__sinit+0xc>
 8005aa0:	f7ff ffc4 	bl	8005a2c <global_stdio_init.part.0>
 8005aa4:	e7f2      	b.n	8005a8c <__sinit+0xc>
 8005aa6:	bf00      	nop
 8005aa8:	080059ed 	.word	0x080059ed
 8005aac:	200003e4 	.word	0x200003e4

08005ab0 <_fwalk_sglue>:
 8005ab0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ab4:	4607      	mov	r7, r0
 8005ab6:	4688      	mov	r8, r1
 8005ab8:	4614      	mov	r4, r2
 8005aba:	2600      	movs	r6, #0
 8005abc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005ac0:	f1b9 0901 	subs.w	r9, r9, #1
 8005ac4:	d505      	bpl.n	8005ad2 <_fwalk_sglue+0x22>
 8005ac6:	6824      	ldr	r4, [r4, #0]
 8005ac8:	2c00      	cmp	r4, #0
 8005aca:	d1f7      	bne.n	8005abc <_fwalk_sglue+0xc>
 8005acc:	4630      	mov	r0, r6
 8005ace:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ad2:	89ab      	ldrh	r3, [r5, #12]
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	d907      	bls.n	8005ae8 <_fwalk_sglue+0x38>
 8005ad8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005adc:	3301      	adds	r3, #1
 8005ade:	d003      	beq.n	8005ae8 <_fwalk_sglue+0x38>
 8005ae0:	4629      	mov	r1, r5
 8005ae2:	4638      	mov	r0, r7
 8005ae4:	47c0      	blx	r8
 8005ae6:	4306      	orrs	r6, r0
 8005ae8:	3568      	adds	r5, #104	@ 0x68
 8005aea:	e7e9      	b.n	8005ac0 <_fwalk_sglue+0x10>

08005aec <_puts_r>:
 8005aec:	6a03      	ldr	r3, [r0, #32]
 8005aee:	b570      	push	{r4, r5, r6, lr}
 8005af0:	6884      	ldr	r4, [r0, #8]
 8005af2:	4605      	mov	r5, r0
 8005af4:	460e      	mov	r6, r1
 8005af6:	b90b      	cbnz	r3, 8005afc <_puts_r+0x10>
 8005af8:	f7ff ffc2 	bl	8005a80 <__sinit>
 8005afc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005afe:	07db      	lsls	r3, r3, #31
 8005b00:	d405      	bmi.n	8005b0e <_puts_r+0x22>
 8005b02:	89a3      	ldrh	r3, [r4, #12]
 8005b04:	0598      	lsls	r0, r3, #22
 8005b06:	d402      	bmi.n	8005b0e <_puts_r+0x22>
 8005b08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005b0a:	f000 fa5a 	bl	8005fc2 <__retarget_lock_acquire_recursive>
 8005b0e:	89a3      	ldrh	r3, [r4, #12]
 8005b10:	0719      	lsls	r1, r3, #28
 8005b12:	d502      	bpl.n	8005b1a <_puts_r+0x2e>
 8005b14:	6923      	ldr	r3, [r4, #16]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d135      	bne.n	8005b86 <_puts_r+0x9a>
 8005b1a:	4621      	mov	r1, r4
 8005b1c:	4628      	mov	r0, r5
 8005b1e:	f000 f981 	bl	8005e24 <__swsetup_r>
 8005b22:	b380      	cbz	r0, 8005b86 <_puts_r+0x9a>
 8005b24:	f04f 35ff 	mov.w	r5, #4294967295
 8005b28:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005b2a:	07da      	lsls	r2, r3, #31
 8005b2c:	d405      	bmi.n	8005b3a <_puts_r+0x4e>
 8005b2e:	89a3      	ldrh	r3, [r4, #12]
 8005b30:	059b      	lsls	r3, r3, #22
 8005b32:	d402      	bmi.n	8005b3a <_puts_r+0x4e>
 8005b34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005b36:	f000 fa45 	bl	8005fc4 <__retarget_lock_release_recursive>
 8005b3a:	4628      	mov	r0, r5
 8005b3c:	bd70      	pop	{r4, r5, r6, pc}
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	da04      	bge.n	8005b4c <_puts_r+0x60>
 8005b42:	69a2      	ldr	r2, [r4, #24]
 8005b44:	429a      	cmp	r2, r3
 8005b46:	dc17      	bgt.n	8005b78 <_puts_r+0x8c>
 8005b48:	290a      	cmp	r1, #10
 8005b4a:	d015      	beq.n	8005b78 <_puts_r+0x8c>
 8005b4c:	6823      	ldr	r3, [r4, #0]
 8005b4e:	1c5a      	adds	r2, r3, #1
 8005b50:	6022      	str	r2, [r4, #0]
 8005b52:	7019      	strb	r1, [r3, #0]
 8005b54:	68a3      	ldr	r3, [r4, #8]
 8005b56:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005b5a:	3b01      	subs	r3, #1
 8005b5c:	60a3      	str	r3, [r4, #8]
 8005b5e:	2900      	cmp	r1, #0
 8005b60:	d1ed      	bne.n	8005b3e <_puts_r+0x52>
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	da11      	bge.n	8005b8a <_puts_r+0x9e>
 8005b66:	4622      	mov	r2, r4
 8005b68:	210a      	movs	r1, #10
 8005b6a:	4628      	mov	r0, r5
 8005b6c:	f000 f91b 	bl	8005da6 <__swbuf_r>
 8005b70:	3001      	adds	r0, #1
 8005b72:	d0d7      	beq.n	8005b24 <_puts_r+0x38>
 8005b74:	250a      	movs	r5, #10
 8005b76:	e7d7      	b.n	8005b28 <_puts_r+0x3c>
 8005b78:	4622      	mov	r2, r4
 8005b7a:	4628      	mov	r0, r5
 8005b7c:	f000 f913 	bl	8005da6 <__swbuf_r>
 8005b80:	3001      	adds	r0, #1
 8005b82:	d1e7      	bne.n	8005b54 <_puts_r+0x68>
 8005b84:	e7ce      	b.n	8005b24 <_puts_r+0x38>
 8005b86:	3e01      	subs	r6, #1
 8005b88:	e7e4      	b.n	8005b54 <_puts_r+0x68>
 8005b8a:	6823      	ldr	r3, [r4, #0]
 8005b8c:	1c5a      	adds	r2, r3, #1
 8005b8e:	6022      	str	r2, [r4, #0]
 8005b90:	220a      	movs	r2, #10
 8005b92:	701a      	strb	r2, [r3, #0]
 8005b94:	e7ee      	b.n	8005b74 <_puts_r+0x88>
	...

08005b98 <puts>:
 8005b98:	4b02      	ldr	r3, [pc, #8]	@ (8005ba4 <puts+0xc>)
 8005b9a:	4601      	mov	r1, r0
 8005b9c:	6818      	ldr	r0, [r3, #0]
 8005b9e:	f7ff bfa5 	b.w	8005aec <_puts_r>
 8005ba2:	bf00      	nop
 8005ba4:	20000018 	.word	0x20000018

08005ba8 <setbuf>:
 8005ba8:	fab1 f281 	clz	r2, r1
 8005bac:	0952      	lsrs	r2, r2, #5
 8005bae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005bb2:	0052      	lsls	r2, r2, #1
 8005bb4:	f000 b800 	b.w	8005bb8 <setvbuf>

08005bb8 <setvbuf>:
 8005bb8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005bbc:	461d      	mov	r5, r3
 8005bbe:	4b57      	ldr	r3, [pc, #348]	@ (8005d1c <setvbuf+0x164>)
 8005bc0:	681f      	ldr	r7, [r3, #0]
 8005bc2:	4604      	mov	r4, r0
 8005bc4:	460e      	mov	r6, r1
 8005bc6:	4690      	mov	r8, r2
 8005bc8:	b127      	cbz	r7, 8005bd4 <setvbuf+0x1c>
 8005bca:	6a3b      	ldr	r3, [r7, #32]
 8005bcc:	b913      	cbnz	r3, 8005bd4 <setvbuf+0x1c>
 8005bce:	4638      	mov	r0, r7
 8005bd0:	f7ff ff56 	bl	8005a80 <__sinit>
 8005bd4:	f1b8 0f02 	cmp.w	r8, #2
 8005bd8:	d006      	beq.n	8005be8 <setvbuf+0x30>
 8005bda:	f1b8 0f01 	cmp.w	r8, #1
 8005bde:	f200 809a 	bhi.w	8005d16 <setvbuf+0x15e>
 8005be2:	2d00      	cmp	r5, #0
 8005be4:	f2c0 8097 	blt.w	8005d16 <setvbuf+0x15e>
 8005be8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005bea:	07d9      	lsls	r1, r3, #31
 8005bec:	d405      	bmi.n	8005bfa <setvbuf+0x42>
 8005bee:	89a3      	ldrh	r3, [r4, #12]
 8005bf0:	059a      	lsls	r2, r3, #22
 8005bf2:	d402      	bmi.n	8005bfa <setvbuf+0x42>
 8005bf4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005bf6:	f000 f9e4 	bl	8005fc2 <__retarget_lock_acquire_recursive>
 8005bfa:	4621      	mov	r1, r4
 8005bfc:	4638      	mov	r0, r7
 8005bfe:	f000 fb67 	bl	80062d0 <_fflush_r>
 8005c02:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005c04:	b141      	cbz	r1, 8005c18 <setvbuf+0x60>
 8005c06:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005c0a:	4299      	cmp	r1, r3
 8005c0c:	d002      	beq.n	8005c14 <setvbuf+0x5c>
 8005c0e:	4638      	mov	r0, r7
 8005c10:	f000 f9da 	bl	8005fc8 <_free_r>
 8005c14:	2300      	movs	r3, #0
 8005c16:	6363      	str	r3, [r4, #52]	@ 0x34
 8005c18:	2300      	movs	r3, #0
 8005c1a:	61a3      	str	r3, [r4, #24]
 8005c1c:	6063      	str	r3, [r4, #4]
 8005c1e:	89a3      	ldrh	r3, [r4, #12]
 8005c20:	061b      	lsls	r3, r3, #24
 8005c22:	d503      	bpl.n	8005c2c <setvbuf+0x74>
 8005c24:	6921      	ldr	r1, [r4, #16]
 8005c26:	4638      	mov	r0, r7
 8005c28:	f000 f9ce 	bl	8005fc8 <_free_r>
 8005c2c:	89a3      	ldrh	r3, [r4, #12]
 8005c2e:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 8005c32:	f023 0303 	bic.w	r3, r3, #3
 8005c36:	f1b8 0f02 	cmp.w	r8, #2
 8005c3a:	81a3      	strh	r3, [r4, #12]
 8005c3c:	d061      	beq.n	8005d02 <setvbuf+0x14a>
 8005c3e:	ab01      	add	r3, sp, #4
 8005c40:	466a      	mov	r2, sp
 8005c42:	4621      	mov	r1, r4
 8005c44:	4638      	mov	r0, r7
 8005c46:	f000 fb6b 	bl	8006320 <__swhatbuf_r>
 8005c4a:	89a3      	ldrh	r3, [r4, #12]
 8005c4c:	4318      	orrs	r0, r3
 8005c4e:	81a0      	strh	r0, [r4, #12]
 8005c50:	bb2d      	cbnz	r5, 8005c9e <setvbuf+0xe6>
 8005c52:	9d00      	ldr	r5, [sp, #0]
 8005c54:	4628      	mov	r0, r5
 8005c56:	f000 fa01 	bl	800605c <malloc>
 8005c5a:	4606      	mov	r6, r0
 8005c5c:	2800      	cmp	r0, #0
 8005c5e:	d152      	bne.n	8005d06 <setvbuf+0x14e>
 8005c60:	f8dd 9000 	ldr.w	r9, [sp]
 8005c64:	45a9      	cmp	r9, r5
 8005c66:	d140      	bne.n	8005cea <setvbuf+0x132>
 8005c68:	f04f 35ff 	mov.w	r5, #4294967295
 8005c6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c70:	f043 0202 	orr.w	r2, r3, #2
 8005c74:	81a2      	strh	r2, [r4, #12]
 8005c76:	2200      	movs	r2, #0
 8005c78:	60a2      	str	r2, [r4, #8]
 8005c7a:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 8005c7e:	6022      	str	r2, [r4, #0]
 8005c80:	6122      	str	r2, [r4, #16]
 8005c82:	2201      	movs	r2, #1
 8005c84:	6162      	str	r2, [r4, #20]
 8005c86:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005c88:	07d6      	lsls	r6, r2, #31
 8005c8a:	d404      	bmi.n	8005c96 <setvbuf+0xde>
 8005c8c:	0598      	lsls	r0, r3, #22
 8005c8e:	d402      	bmi.n	8005c96 <setvbuf+0xde>
 8005c90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005c92:	f000 f997 	bl	8005fc4 <__retarget_lock_release_recursive>
 8005c96:	4628      	mov	r0, r5
 8005c98:	b003      	add	sp, #12
 8005c9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005c9e:	2e00      	cmp	r6, #0
 8005ca0:	d0d8      	beq.n	8005c54 <setvbuf+0x9c>
 8005ca2:	6a3b      	ldr	r3, [r7, #32]
 8005ca4:	b913      	cbnz	r3, 8005cac <setvbuf+0xf4>
 8005ca6:	4638      	mov	r0, r7
 8005ca8:	f7ff feea 	bl	8005a80 <__sinit>
 8005cac:	f1b8 0f01 	cmp.w	r8, #1
 8005cb0:	bf08      	it	eq
 8005cb2:	89a3      	ldrheq	r3, [r4, #12]
 8005cb4:	6026      	str	r6, [r4, #0]
 8005cb6:	bf04      	itt	eq
 8005cb8:	f043 0301 	orreq.w	r3, r3, #1
 8005cbc:	81a3      	strheq	r3, [r4, #12]
 8005cbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005cc2:	f013 0208 	ands.w	r2, r3, #8
 8005cc6:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8005cca:	d01e      	beq.n	8005d0a <setvbuf+0x152>
 8005ccc:	07d9      	lsls	r1, r3, #31
 8005cce:	bf41      	itttt	mi
 8005cd0:	2200      	movmi	r2, #0
 8005cd2:	426d      	negmi	r5, r5
 8005cd4:	60a2      	strmi	r2, [r4, #8]
 8005cd6:	61a5      	strmi	r5, [r4, #24]
 8005cd8:	bf58      	it	pl
 8005cda:	60a5      	strpl	r5, [r4, #8]
 8005cdc:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005cde:	07d2      	lsls	r2, r2, #31
 8005ce0:	d401      	bmi.n	8005ce6 <setvbuf+0x12e>
 8005ce2:	059b      	lsls	r3, r3, #22
 8005ce4:	d513      	bpl.n	8005d0e <setvbuf+0x156>
 8005ce6:	2500      	movs	r5, #0
 8005ce8:	e7d5      	b.n	8005c96 <setvbuf+0xde>
 8005cea:	4648      	mov	r0, r9
 8005cec:	f000 f9b6 	bl	800605c <malloc>
 8005cf0:	4606      	mov	r6, r0
 8005cf2:	2800      	cmp	r0, #0
 8005cf4:	d0b8      	beq.n	8005c68 <setvbuf+0xb0>
 8005cf6:	89a3      	ldrh	r3, [r4, #12]
 8005cf8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005cfc:	81a3      	strh	r3, [r4, #12]
 8005cfe:	464d      	mov	r5, r9
 8005d00:	e7cf      	b.n	8005ca2 <setvbuf+0xea>
 8005d02:	2500      	movs	r5, #0
 8005d04:	e7b2      	b.n	8005c6c <setvbuf+0xb4>
 8005d06:	46a9      	mov	r9, r5
 8005d08:	e7f5      	b.n	8005cf6 <setvbuf+0x13e>
 8005d0a:	60a2      	str	r2, [r4, #8]
 8005d0c:	e7e6      	b.n	8005cdc <setvbuf+0x124>
 8005d0e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005d10:	f000 f958 	bl	8005fc4 <__retarget_lock_release_recursive>
 8005d14:	e7e7      	b.n	8005ce6 <setvbuf+0x12e>
 8005d16:	f04f 35ff 	mov.w	r5, #4294967295
 8005d1a:	e7bc      	b.n	8005c96 <setvbuf+0xde>
 8005d1c:	20000018 	.word	0x20000018

08005d20 <__sread>:
 8005d20:	b510      	push	{r4, lr}
 8005d22:	460c      	mov	r4, r1
 8005d24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d28:	f000 f8fc 	bl	8005f24 <_read_r>
 8005d2c:	2800      	cmp	r0, #0
 8005d2e:	bfab      	itete	ge
 8005d30:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005d32:	89a3      	ldrhlt	r3, [r4, #12]
 8005d34:	181b      	addge	r3, r3, r0
 8005d36:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005d3a:	bfac      	ite	ge
 8005d3c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005d3e:	81a3      	strhlt	r3, [r4, #12]
 8005d40:	bd10      	pop	{r4, pc}

08005d42 <__swrite>:
 8005d42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d46:	461f      	mov	r7, r3
 8005d48:	898b      	ldrh	r3, [r1, #12]
 8005d4a:	05db      	lsls	r3, r3, #23
 8005d4c:	4605      	mov	r5, r0
 8005d4e:	460c      	mov	r4, r1
 8005d50:	4616      	mov	r6, r2
 8005d52:	d505      	bpl.n	8005d60 <__swrite+0x1e>
 8005d54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d58:	2302      	movs	r3, #2
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	f000 f8d0 	bl	8005f00 <_lseek_r>
 8005d60:	89a3      	ldrh	r3, [r4, #12]
 8005d62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d66:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005d6a:	81a3      	strh	r3, [r4, #12]
 8005d6c:	4632      	mov	r2, r6
 8005d6e:	463b      	mov	r3, r7
 8005d70:	4628      	mov	r0, r5
 8005d72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005d76:	f000 b8e7 	b.w	8005f48 <_write_r>

08005d7a <__sseek>:
 8005d7a:	b510      	push	{r4, lr}
 8005d7c:	460c      	mov	r4, r1
 8005d7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d82:	f000 f8bd 	bl	8005f00 <_lseek_r>
 8005d86:	1c43      	adds	r3, r0, #1
 8005d88:	89a3      	ldrh	r3, [r4, #12]
 8005d8a:	bf15      	itete	ne
 8005d8c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005d8e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005d92:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005d96:	81a3      	strheq	r3, [r4, #12]
 8005d98:	bf18      	it	ne
 8005d9a:	81a3      	strhne	r3, [r4, #12]
 8005d9c:	bd10      	pop	{r4, pc}

08005d9e <__sclose>:
 8005d9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005da2:	f000 b89d 	b.w	8005ee0 <_close_r>

08005da6 <__swbuf_r>:
 8005da6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005da8:	460e      	mov	r6, r1
 8005daa:	4614      	mov	r4, r2
 8005dac:	4605      	mov	r5, r0
 8005dae:	b118      	cbz	r0, 8005db8 <__swbuf_r+0x12>
 8005db0:	6a03      	ldr	r3, [r0, #32]
 8005db2:	b90b      	cbnz	r3, 8005db8 <__swbuf_r+0x12>
 8005db4:	f7ff fe64 	bl	8005a80 <__sinit>
 8005db8:	69a3      	ldr	r3, [r4, #24]
 8005dba:	60a3      	str	r3, [r4, #8]
 8005dbc:	89a3      	ldrh	r3, [r4, #12]
 8005dbe:	071a      	lsls	r2, r3, #28
 8005dc0:	d501      	bpl.n	8005dc6 <__swbuf_r+0x20>
 8005dc2:	6923      	ldr	r3, [r4, #16]
 8005dc4:	b943      	cbnz	r3, 8005dd8 <__swbuf_r+0x32>
 8005dc6:	4621      	mov	r1, r4
 8005dc8:	4628      	mov	r0, r5
 8005dca:	f000 f82b 	bl	8005e24 <__swsetup_r>
 8005dce:	b118      	cbz	r0, 8005dd8 <__swbuf_r+0x32>
 8005dd0:	f04f 37ff 	mov.w	r7, #4294967295
 8005dd4:	4638      	mov	r0, r7
 8005dd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005dd8:	6823      	ldr	r3, [r4, #0]
 8005dda:	6922      	ldr	r2, [r4, #16]
 8005ddc:	1a98      	subs	r0, r3, r2
 8005dde:	6963      	ldr	r3, [r4, #20]
 8005de0:	b2f6      	uxtb	r6, r6
 8005de2:	4283      	cmp	r3, r0
 8005de4:	4637      	mov	r7, r6
 8005de6:	dc05      	bgt.n	8005df4 <__swbuf_r+0x4e>
 8005de8:	4621      	mov	r1, r4
 8005dea:	4628      	mov	r0, r5
 8005dec:	f000 fa70 	bl	80062d0 <_fflush_r>
 8005df0:	2800      	cmp	r0, #0
 8005df2:	d1ed      	bne.n	8005dd0 <__swbuf_r+0x2a>
 8005df4:	68a3      	ldr	r3, [r4, #8]
 8005df6:	3b01      	subs	r3, #1
 8005df8:	60a3      	str	r3, [r4, #8]
 8005dfa:	6823      	ldr	r3, [r4, #0]
 8005dfc:	1c5a      	adds	r2, r3, #1
 8005dfe:	6022      	str	r2, [r4, #0]
 8005e00:	701e      	strb	r6, [r3, #0]
 8005e02:	6962      	ldr	r2, [r4, #20]
 8005e04:	1c43      	adds	r3, r0, #1
 8005e06:	429a      	cmp	r2, r3
 8005e08:	d004      	beq.n	8005e14 <__swbuf_r+0x6e>
 8005e0a:	89a3      	ldrh	r3, [r4, #12]
 8005e0c:	07db      	lsls	r3, r3, #31
 8005e0e:	d5e1      	bpl.n	8005dd4 <__swbuf_r+0x2e>
 8005e10:	2e0a      	cmp	r6, #10
 8005e12:	d1df      	bne.n	8005dd4 <__swbuf_r+0x2e>
 8005e14:	4621      	mov	r1, r4
 8005e16:	4628      	mov	r0, r5
 8005e18:	f000 fa5a 	bl	80062d0 <_fflush_r>
 8005e1c:	2800      	cmp	r0, #0
 8005e1e:	d0d9      	beq.n	8005dd4 <__swbuf_r+0x2e>
 8005e20:	e7d6      	b.n	8005dd0 <__swbuf_r+0x2a>
	...

08005e24 <__swsetup_r>:
 8005e24:	b538      	push	{r3, r4, r5, lr}
 8005e26:	4b29      	ldr	r3, [pc, #164]	@ (8005ecc <__swsetup_r+0xa8>)
 8005e28:	4605      	mov	r5, r0
 8005e2a:	6818      	ldr	r0, [r3, #0]
 8005e2c:	460c      	mov	r4, r1
 8005e2e:	b118      	cbz	r0, 8005e38 <__swsetup_r+0x14>
 8005e30:	6a03      	ldr	r3, [r0, #32]
 8005e32:	b90b      	cbnz	r3, 8005e38 <__swsetup_r+0x14>
 8005e34:	f7ff fe24 	bl	8005a80 <__sinit>
 8005e38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e3c:	0719      	lsls	r1, r3, #28
 8005e3e:	d422      	bmi.n	8005e86 <__swsetup_r+0x62>
 8005e40:	06da      	lsls	r2, r3, #27
 8005e42:	d407      	bmi.n	8005e54 <__swsetup_r+0x30>
 8005e44:	2209      	movs	r2, #9
 8005e46:	602a      	str	r2, [r5, #0]
 8005e48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e4c:	81a3      	strh	r3, [r4, #12]
 8005e4e:	f04f 30ff 	mov.w	r0, #4294967295
 8005e52:	e033      	b.n	8005ebc <__swsetup_r+0x98>
 8005e54:	0758      	lsls	r0, r3, #29
 8005e56:	d512      	bpl.n	8005e7e <__swsetup_r+0x5a>
 8005e58:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005e5a:	b141      	cbz	r1, 8005e6e <__swsetup_r+0x4a>
 8005e5c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005e60:	4299      	cmp	r1, r3
 8005e62:	d002      	beq.n	8005e6a <__swsetup_r+0x46>
 8005e64:	4628      	mov	r0, r5
 8005e66:	f000 f8af 	bl	8005fc8 <_free_r>
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	6363      	str	r3, [r4, #52]	@ 0x34
 8005e6e:	89a3      	ldrh	r3, [r4, #12]
 8005e70:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005e74:	81a3      	strh	r3, [r4, #12]
 8005e76:	2300      	movs	r3, #0
 8005e78:	6063      	str	r3, [r4, #4]
 8005e7a:	6923      	ldr	r3, [r4, #16]
 8005e7c:	6023      	str	r3, [r4, #0]
 8005e7e:	89a3      	ldrh	r3, [r4, #12]
 8005e80:	f043 0308 	orr.w	r3, r3, #8
 8005e84:	81a3      	strh	r3, [r4, #12]
 8005e86:	6923      	ldr	r3, [r4, #16]
 8005e88:	b94b      	cbnz	r3, 8005e9e <__swsetup_r+0x7a>
 8005e8a:	89a3      	ldrh	r3, [r4, #12]
 8005e8c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005e90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e94:	d003      	beq.n	8005e9e <__swsetup_r+0x7a>
 8005e96:	4621      	mov	r1, r4
 8005e98:	4628      	mov	r0, r5
 8005e9a:	f000 fa67 	bl	800636c <__smakebuf_r>
 8005e9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ea2:	f013 0201 	ands.w	r2, r3, #1
 8005ea6:	d00a      	beq.n	8005ebe <__swsetup_r+0x9a>
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	60a2      	str	r2, [r4, #8]
 8005eac:	6962      	ldr	r2, [r4, #20]
 8005eae:	4252      	negs	r2, r2
 8005eb0:	61a2      	str	r2, [r4, #24]
 8005eb2:	6922      	ldr	r2, [r4, #16]
 8005eb4:	b942      	cbnz	r2, 8005ec8 <__swsetup_r+0xa4>
 8005eb6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005eba:	d1c5      	bne.n	8005e48 <__swsetup_r+0x24>
 8005ebc:	bd38      	pop	{r3, r4, r5, pc}
 8005ebe:	0799      	lsls	r1, r3, #30
 8005ec0:	bf58      	it	pl
 8005ec2:	6962      	ldrpl	r2, [r4, #20]
 8005ec4:	60a2      	str	r2, [r4, #8]
 8005ec6:	e7f4      	b.n	8005eb2 <__swsetup_r+0x8e>
 8005ec8:	2000      	movs	r0, #0
 8005eca:	e7f7      	b.n	8005ebc <__swsetup_r+0x98>
 8005ecc:	20000018 	.word	0x20000018

08005ed0 <memset>:
 8005ed0:	4402      	add	r2, r0
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d100      	bne.n	8005eda <memset+0xa>
 8005ed8:	4770      	bx	lr
 8005eda:	f803 1b01 	strb.w	r1, [r3], #1
 8005ede:	e7f9      	b.n	8005ed4 <memset+0x4>

08005ee0 <_close_r>:
 8005ee0:	b538      	push	{r3, r4, r5, lr}
 8005ee2:	4d06      	ldr	r5, [pc, #24]	@ (8005efc <_close_r+0x1c>)
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	4604      	mov	r4, r0
 8005ee8:	4608      	mov	r0, r1
 8005eea:	602b      	str	r3, [r5, #0]
 8005eec:	f7fb f815 	bl	8000f1a <_close>
 8005ef0:	1c43      	adds	r3, r0, #1
 8005ef2:	d102      	bne.n	8005efa <_close_r+0x1a>
 8005ef4:	682b      	ldr	r3, [r5, #0]
 8005ef6:	b103      	cbz	r3, 8005efa <_close_r+0x1a>
 8005ef8:	6023      	str	r3, [r4, #0]
 8005efa:	bd38      	pop	{r3, r4, r5, pc}
 8005efc:	200003e8 	.word	0x200003e8

08005f00 <_lseek_r>:
 8005f00:	b538      	push	{r3, r4, r5, lr}
 8005f02:	4d07      	ldr	r5, [pc, #28]	@ (8005f20 <_lseek_r+0x20>)
 8005f04:	4604      	mov	r4, r0
 8005f06:	4608      	mov	r0, r1
 8005f08:	4611      	mov	r1, r2
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	602a      	str	r2, [r5, #0]
 8005f0e:	461a      	mov	r2, r3
 8005f10:	f7fb f82a 	bl	8000f68 <_lseek>
 8005f14:	1c43      	adds	r3, r0, #1
 8005f16:	d102      	bne.n	8005f1e <_lseek_r+0x1e>
 8005f18:	682b      	ldr	r3, [r5, #0]
 8005f1a:	b103      	cbz	r3, 8005f1e <_lseek_r+0x1e>
 8005f1c:	6023      	str	r3, [r4, #0]
 8005f1e:	bd38      	pop	{r3, r4, r5, pc}
 8005f20:	200003e8 	.word	0x200003e8

08005f24 <_read_r>:
 8005f24:	b538      	push	{r3, r4, r5, lr}
 8005f26:	4d07      	ldr	r5, [pc, #28]	@ (8005f44 <_read_r+0x20>)
 8005f28:	4604      	mov	r4, r0
 8005f2a:	4608      	mov	r0, r1
 8005f2c:	4611      	mov	r1, r2
 8005f2e:	2200      	movs	r2, #0
 8005f30:	602a      	str	r2, [r5, #0]
 8005f32:	461a      	mov	r2, r3
 8005f34:	f7fa ffd4 	bl	8000ee0 <_read>
 8005f38:	1c43      	adds	r3, r0, #1
 8005f3a:	d102      	bne.n	8005f42 <_read_r+0x1e>
 8005f3c:	682b      	ldr	r3, [r5, #0]
 8005f3e:	b103      	cbz	r3, 8005f42 <_read_r+0x1e>
 8005f40:	6023      	str	r3, [r4, #0]
 8005f42:	bd38      	pop	{r3, r4, r5, pc}
 8005f44:	200003e8 	.word	0x200003e8

08005f48 <_write_r>:
 8005f48:	b538      	push	{r3, r4, r5, lr}
 8005f4a:	4d07      	ldr	r5, [pc, #28]	@ (8005f68 <_write_r+0x20>)
 8005f4c:	4604      	mov	r4, r0
 8005f4e:	4608      	mov	r0, r1
 8005f50:	4611      	mov	r1, r2
 8005f52:	2200      	movs	r2, #0
 8005f54:	602a      	str	r2, [r5, #0]
 8005f56:	461a      	mov	r2, r3
 8005f58:	f7fa fdf0 	bl	8000b3c <_write>
 8005f5c:	1c43      	adds	r3, r0, #1
 8005f5e:	d102      	bne.n	8005f66 <_write_r+0x1e>
 8005f60:	682b      	ldr	r3, [r5, #0]
 8005f62:	b103      	cbz	r3, 8005f66 <_write_r+0x1e>
 8005f64:	6023      	str	r3, [r4, #0]
 8005f66:	bd38      	pop	{r3, r4, r5, pc}
 8005f68:	200003e8 	.word	0x200003e8

08005f6c <__errno>:
 8005f6c:	4b01      	ldr	r3, [pc, #4]	@ (8005f74 <__errno+0x8>)
 8005f6e:	6818      	ldr	r0, [r3, #0]
 8005f70:	4770      	bx	lr
 8005f72:	bf00      	nop
 8005f74:	20000018 	.word	0x20000018

08005f78 <__libc_init_array>:
 8005f78:	b570      	push	{r4, r5, r6, lr}
 8005f7a:	4d0d      	ldr	r5, [pc, #52]	@ (8005fb0 <__libc_init_array+0x38>)
 8005f7c:	4c0d      	ldr	r4, [pc, #52]	@ (8005fb4 <__libc_init_array+0x3c>)
 8005f7e:	1b64      	subs	r4, r4, r5
 8005f80:	10a4      	asrs	r4, r4, #2
 8005f82:	2600      	movs	r6, #0
 8005f84:	42a6      	cmp	r6, r4
 8005f86:	d109      	bne.n	8005f9c <__libc_init_array+0x24>
 8005f88:	4d0b      	ldr	r5, [pc, #44]	@ (8005fb8 <__libc_init_array+0x40>)
 8005f8a:	4c0c      	ldr	r4, [pc, #48]	@ (8005fbc <__libc_init_array+0x44>)
 8005f8c:	f000 fa5c 	bl	8006448 <_init>
 8005f90:	1b64      	subs	r4, r4, r5
 8005f92:	10a4      	asrs	r4, r4, #2
 8005f94:	2600      	movs	r6, #0
 8005f96:	42a6      	cmp	r6, r4
 8005f98:	d105      	bne.n	8005fa6 <__libc_init_array+0x2e>
 8005f9a:	bd70      	pop	{r4, r5, r6, pc}
 8005f9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fa0:	4798      	blx	r3
 8005fa2:	3601      	adds	r6, #1
 8005fa4:	e7ee      	b.n	8005f84 <__libc_init_array+0xc>
 8005fa6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005faa:	4798      	blx	r3
 8005fac:	3601      	adds	r6, #1
 8005fae:	e7f2      	b.n	8005f96 <__libc_init_array+0x1e>
 8005fb0:	080064d4 	.word	0x080064d4
 8005fb4:	080064d4 	.word	0x080064d4
 8005fb8:	080064d4 	.word	0x080064d4
 8005fbc:	080064d8 	.word	0x080064d8

08005fc0 <__retarget_lock_init_recursive>:
 8005fc0:	4770      	bx	lr

08005fc2 <__retarget_lock_acquire_recursive>:
 8005fc2:	4770      	bx	lr

08005fc4 <__retarget_lock_release_recursive>:
 8005fc4:	4770      	bx	lr
	...

08005fc8 <_free_r>:
 8005fc8:	b538      	push	{r3, r4, r5, lr}
 8005fca:	4605      	mov	r5, r0
 8005fcc:	2900      	cmp	r1, #0
 8005fce:	d041      	beq.n	8006054 <_free_r+0x8c>
 8005fd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005fd4:	1f0c      	subs	r4, r1, #4
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	bfb8      	it	lt
 8005fda:	18e4      	addlt	r4, r4, r3
 8005fdc:	f000 f8e8 	bl	80061b0 <__malloc_lock>
 8005fe0:	4a1d      	ldr	r2, [pc, #116]	@ (8006058 <_free_r+0x90>)
 8005fe2:	6813      	ldr	r3, [r2, #0]
 8005fe4:	b933      	cbnz	r3, 8005ff4 <_free_r+0x2c>
 8005fe6:	6063      	str	r3, [r4, #4]
 8005fe8:	6014      	str	r4, [r2, #0]
 8005fea:	4628      	mov	r0, r5
 8005fec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005ff0:	f000 b8e4 	b.w	80061bc <__malloc_unlock>
 8005ff4:	42a3      	cmp	r3, r4
 8005ff6:	d908      	bls.n	800600a <_free_r+0x42>
 8005ff8:	6820      	ldr	r0, [r4, #0]
 8005ffa:	1821      	adds	r1, r4, r0
 8005ffc:	428b      	cmp	r3, r1
 8005ffe:	bf01      	itttt	eq
 8006000:	6819      	ldreq	r1, [r3, #0]
 8006002:	685b      	ldreq	r3, [r3, #4]
 8006004:	1809      	addeq	r1, r1, r0
 8006006:	6021      	streq	r1, [r4, #0]
 8006008:	e7ed      	b.n	8005fe6 <_free_r+0x1e>
 800600a:	461a      	mov	r2, r3
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	b10b      	cbz	r3, 8006014 <_free_r+0x4c>
 8006010:	42a3      	cmp	r3, r4
 8006012:	d9fa      	bls.n	800600a <_free_r+0x42>
 8006014:	6811      	ldr	r1, [r2, #0]
 8006016:	1850      	adds	r0, r2, r1
 8006018:	42a0      	cmp	r0, r4
 800601a:	d10b      	bne.n	8006034 <_free_r+0x6c>
 800601c:	6820      	ldr	r0, [r4, #0]
 800601e:	4401      	add	r1, r0
 8006020:	1850      	adds	r0, r2, r1
 8006022:	4283      	cmp	r3, r0
 8006024:	6011      	str	r1, [r2, #0]
 8006026:	d1e0      	bne.n	8005fea <_free_r+0x22>
 8006028:	6818      	ldr	r0, [r3, #0]
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	6053      	str	r3, [r2, #4]
 800602e:	4408      	add	r0, r1
 8006030:	6010      	str	r0, [r2, #0]
 8006032:	e7da      	b.n	8005fea <_free_r+0x22>
 8006034:	d902      	bls.n	800603c <_free_r+0x74>
 8006036:	230c      	movs	r3, #12
 8006038:	602b      	str	r3, [r5, #0]
 800603a:	e7d6      	b.n	8005fea <_free_r+0x22>
 800603c:	6820      	ldr	r0, [r4, #0]
 800603e:	1821      	adds	r1, r4, r0
 8006040:	428b      	cmp	r3, r1
 8006042:	bf04      	itt	eq
 8006044:	6819      	ldreq	r1, [r3, #0]
 8006046:	685b      	ldreq	r3, [r3, #4]
 8006048:	6063      	str	r3, [r4, #4]
 800604a:	bf04      	itt	eq
 800604c:	1809      	addeq	r1, r1, r0
 800604e:	6021      	streq	r1, [r4, #0]
 8006050:	6054      	str	r4, [r2, #4]
 8006052:	e7ca      	b.n	8005fea <_free_r+0x22>
 8006054:	bd38      	pop	{r3, r4, r5, pc}
 8006056:	bf00      	nop
 8006058:	200003f4 	.word	0x200003f4

0800605c <malloc>:
 800605c:	4b02      	ldr	r3, [pc, #8]	@ (8006068 <malloc+0xc>)
 800605e:	4601      	mov	r1, r0
 8006060:	6818      	ldr	r0, [r3, #0]
 8006062:	f000 b825 	b.w	80060b0 <_malloc_r>
 8006066:	bf00      	nop
 8006068:	20000018 	.word	0x20000018

0800606c <sbrk_aligned>:
 800606c:	b570      	push	{r4, r5, r6, lr}
 800606e:	4e0f      	ldr	r6, [pc, #60]	@ (80060ac <sbrk_aligned+0x40>)
 8006070:	460c      	mov	r4, r1
 8006072:	6831      	ldr	r1, [r6, #0]
 8006074:	4605      	mov	r5, r0
 8006076:	b911      	cbnz	r1, 800607e <sbrk_aligned+0x12>
 8006078:	f000 f9d6 	bl	8006428 <_sbrk_r>
 800607c:	6030      	str	r0, [r6, #0]
 800607e:	4621      	mov	r1, r4
 8006080:	4628      	mov	r0, r5
 8006082:	f000 f9d1 	bl	8006428 <_sbrk_r>
 8006086:	1c43      	adds	r3, r0, #1
 8006088:	d103      	bne.n	8006092 <sbrk_aligned+0x26>
 800608a:	f04f 34ff 	mov.w	r4, #4294967295
 800608e:	4620      	mov	r0, r4
 8006090:	bd70      	pop	{r4, r5, r6, pc}
 8006092:	1cc4      	adds	r4, r0, #3
 8006094:	f024 0403 	bic.w	r4, r4, #3
 8006098:	42a0      	cmp	r0, r4
 800609a:	d0f8      	beq.n	800608e <sbrk_aligned+0x22>
 800609c:	1a21      	subs	r1, r4, r0
 800609e:	4628      	mov	r0, r5
 80060a0:	f000 f9c2 	bl	8006428 <_sbrk_r>
 80060a4:	3001      	adds	r0, #1
 80060a6:	d1f2      	bne.n	800608e <sbrk_aligned+0x22>
 80060a8:	e7ef      	b.n	800608a <sbrk_aligned+0x1e>
 80060aa:	bf00      	nop
 80060ac:	200003f0 	.word	0x200003f0

080060b0 <_malloc_r>:
 80060b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80060b4:	1ccd      	adds	r5, r1, #3
 80060b6:	f025 0503 	bic.w	r5, r5, #3
 80060ba:	3508      	adds	r5, #8
 80060bc:	2d0c      	cmp	r5, #12
 80060be:	bf38      	it	cc
 80060c0:	250c      	movcc	r5, #12
 80060c2:	2d00      	cmp	r5, #0
 80060c4:	4606      	mov	r6, r0
 80060c6:	db01      	blt.n	80060cc <_malloc_r+0x1c>
 80060c8:	42a9      	cmp	r1, r5
 80060ca:	d904      	bls.n	80060d6 <_malloc_r+0x26>
 80060cc:	230c      	movs	r3, #12
 80060ce:	6033      	str	r3, [r6, #0]
 80060d0:	2000      	movs	r0, #0
 80060d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80060d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80061ac <_malloc_r+0xfc>
 80060da:	f000 f869 	bl	80061b0 <__malloc_lock>
 80060de:	f8d8 3000 	ldr.w	r3, [r8]
 80060e2:	461c      	mov	r4, r3
 80060e4:	bb44      	cbnz	r4, 8006138 <_malloc_r+0x88>
 80060e6:	4629      	mov	r1, r5
 80060e8:	4630      	mov	r0, r6
 80060ea:	f7ff ffbf 	bl	800606c <sbrk_aligned>
 80060ee:	1c43      	adds	r3, r0, #1
 80060f0:	4604      	mov	r4, r0
 80060f2:	d158      	bne.n	80061a6 <_malloc_r+0xf6>
 80060f4:	f8d8 4000 	ldr.w	r4, [r8]
 80060f8:	4627      	mov	r7, r4
 80060fa:	2f00      	cmp	r7, #0
 80060fc:	d143      	bne.n	8006186 <_malloc_r+0xd6>
 80060fe:	2c00      	cmp	r4, #0
 8006100:	d04b      	beq.n	800619a <_malloc_r+0xea>
 8006102:	6823      	ldr	r3, [r4, #0]
 8006104:	4639      	mov	r1, r7
 8006106:	4630      	mov	r0, r6
 8006108:	eb04 0903 	add.w	r9, r4, r3
 800610c:	f000 f98c 	bl	8006428 <_sbrk_r>
 8006110:	4581      	cmp	r9, r0
 8006112:	d142      	bne.n	800619a <_malloc_r+0xea>
 8006114:	6821      	ldr	r1, [r4, #0]
 8006116:	1a6d      	subs	r5, r5, r1
 8006118:	4629      	mov	r1, r5
 800611a:	4630      	mov	r0, r6
 800611c:	f7ff ffa6 	bl	800606c <sbrk_aligned>
 8006120:	3001      	adds	r0, #1
 8006122:	d03a      	beq.n	800619a <_malloc_r+0xea>
 8006124:	6823      	ldr	r3, [r4, #0]
 8006126:	442b      	add	r3, r5
 8006128:	6023      	str	r3, [r4, #0]
 800612a:	f8d8 3000 	ldr.w	r3, [r8]
 800612e:	685a      	ldr	r2, [r3, #4]
 8006130:	bb62      	cbnz	r2, 800618c <_malloc_r+0xdc>
 8006132:	f8c8 7000 	str.w	r7, [r8]
 8006136:	e00f      	b.n	8006158 <_malloc_r+0xa8>
 8006138:	6822      	ldr	r2, [r4, #0]
 800613a:	1b52      	subs	r2, r2, r5
 800613c:	d420      	bmi.n	8006180 <_malloc_r+0xd0>
 800613e:	2a0b      	cmp	r2, #11
 8006140:	d917      	bls.n	8006172 <_malloc_r+0xc2>
 8006142:	1961      	adds	r1, r4, r5
 8006144:	42a3      	cmp	r3, r4
 8006146:	6025      	str	r5, [r4, #0]
 8006148:	bf18      	it	ne
 800614a:	6059      	strne	r1, [r3, #4]
 800614c:	6863      	ldr	r3, [r4, #4]
 800614e:	bf08      	it	eq
 8006150:	f8c8 1000 	streq.w	r1, [r8]
 8006154:	5162      	str	r2, [r4, r5]
 8006156:	604b      	str	r3, [r1, #4]
 8006158:	4630      	mov	r0, r6
 800615a:	f000 f82f 	bl	80061bc <__malloc_unlock>
 800615e:	f104 000b 	add.w	r0, r4, #11
 8006162:	1d23      	adds	r3, r4, #4
 8006164:	f020 0007 	bic.w	r0, r0, #7
 8006168:	1ac2      	subs	r2, r0, r3
 800616a:	bf1c      	itt	ne
 800616c:	1a1b      	subne	r3, r3, r0
 800616e:	50a3      	strne	r3, [r4, r2]
 8006170:	e7af      	b.n	80060d2 <_malloc_r+0x22>
 8006172:	6862      	ldr	r2, [r4, #4]
 8006174:	42a3      	cmp	r3, r4
 8006176:	bf0c      	ite	eq
 8006178:	f8c8 2000 	streq.w	r2, [r8]
 800617c:	605a      	strne	r2, [r3, #4]
 800617e:	e7eb      	b.n	8006158 <_malloc_r+0xa8>
 8006180:	4623      	mov	r3, r4
 8006182:	6864      	ldr	r4, [r4, #4]
 8006184:	e7ae      	b.n	80060e4 <_malloc_r+0x34>
 8006186:	463c      	mov	r4, r7
 8006188:	687f      	ldr	r7, [r7, #4]
 800618a:	e7b6      	b.n	80060fa <_malloc_r+0x4a>
 800618c:	461a      	mov	r2, r3
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	42a3      	cmp	r3, r4
 8006192:	d1fb      	bne.n	800618c <_malloc_r+0xdc>
 8006194:	2300      	movs	r3, #0
 8006196:	6053      	str	r3, [r2, #4]
 8006198:	e7de      	b.n	8006158 <_malloc_r+0xa8>
 800619a:	230c      	movs	r3, #12
 800619c:	6033      	str	r3, [r6, #0]
 800619e:	4630      	mov	r0, r6
 80061a0:	f000 f80c 	bl	80061bc <__malloc_unlock>
 80061a4:	e794      	b.n	80060d0 <_malloc_r+0x20>
 80061a6:	6005      	str	r5, [r0, #0]
 80061a8:	e7d6      	b.n	8006158 <_malloc_r+0xa8>
 80061aa:	bf00      	nop
 80061ac:	200003f4 	.word	0x200003f4

080061b0 <__malloc_lock>:
 80061b0:	4801      	ldr	r0, [pc, #4]	@ (80061b8 <__malloc_lock+0x8>)
 80061b2:	f7ff bf06 	b.w	8005fc2 <__retarget_lock_acquire_recursive>
 80061b6:	bf00      	nop
 80061b8:	200003ec 	.word	0x200003ec

080061bc <__malloc_unlock>:
 80061bc:	4801      	ldr	r0, [pc, #4]	@ (80061c4 <__malloc_unlock+0x8>)
 80061be:	f7ff bf01 	b.w	8005fc4 <__retarget_lock_release_recursive>
 80061c2:	bf00      	nop
 80061c4:	200003ec 	.word	0x200003ec

080061c8 <__sflush_r>:
 80061c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80061cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061d0:	0716      	lsls	r6, r2, #28
 80061d2:	4605      	mov	r5, r0
 80061d4:	460c      	mov	r4, r1
 80061d6:	d454      	bmi.n	8006282 <__sflush_r+0xba>
 80061d8:	684b      	ldr	r3, [r1, #4]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	dc02      	bgt.n	80061e4 <__sflush_r+0x1c>
 80061de:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	dd48      	ble.n	8006276 <__sflush_r+0xae>
 80061e4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80061e6:	2e00      	cmp	r6, #0
 80061e8:	d045      	beq.n	8006276 <__sflush_r+0xae>
 80061ea:	2300      	movs	r3, #0
 80061ec:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80061f0:	682f      	ldr	r7, [r5, #0]
 80061f2:	6a21      	ldr	r1, [r4, #32]
 80061f4:	602b      	str	r3, [r5, #0]
 80061f6:	d030      	beq.n	800625a <__sflush_r+0x92>
 80061f8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80061fa:	89a3      	ldrh	r3, [r4, #12]
 80061fc:	0759      	lsls	r1, r3, #29
 80061fe:	d505      	bpl.n	800620c <__sflush_r+0x44>
 8006200:	6863      	ldr	r3, [r4, #4]
 8006202:	1ad2      	subs	r2, r2, r3
 8006204:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006206:	b10b      	cbz	r3, 800620c <__sflush_r+0x44>
 8006208:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800620a:	1ad2      	subs	r2, r2, r3
 800620c:	2300      	movs	r3, #0
 800620e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006210:	6a21      	ldr	r1, [r4, #32]
 8006212:	4628      	mov	r0, r5
 8006214:	47b0      	blx	r6
 8006216:	1c43      	adds	r3, r0, #1
 8006218:	89a3      	ldrh	r3, [r4, #12]
 800621a:	d106      	bne.n	800622a <__sflush_r+0x62>
 800621c:	6829      	ldr	r1, [r5, #0]
 800621e:	291d      	cmp	r1, #29
 8006220:	d82b      	bhi.n	800627a <__sflush_r+0xb2>
 8006222:	4a2a      	ldr	r2, [pc, #168]	@ (80062cc <__sflush_r+0x104>)
 8006224:	410a      	asrs	r2, r1
 8006226:	07d6      	lsls	r6, r2, #31
 8006228:	d427      	bmi.n	800627a <__sflush_r+0xb2>
 800622a:	2200      	movs	r2, #0
 800622c:	6062      	str	r2, [r4, #4]
 800622e:	04d9      	lsls	r1, r3, #19
 8006230:	6922      	ldr	r2, [r4, #16]
 8006232:	6022      	str	r2, [r4, #0]
 8006234:	d504      	bpl.n	8006240 <__sflush_r+0x78>
 8006236:	1c42      	adds	r2, r0, #1
 8006238:	d101      	bne.n	800623e <__sflush_r+0x76>
 800623a:	682b      	ldr	r3, [r5, #0]
 800623c:	b903      	cbnz	r3, 8006240 <__sflush_r+0x78>
 800623e:	6560      	str	r0, [r4, #84]	@ 0x54
 8006240:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006242:	602f      	str	r7, [r5, #0]
 8006244:	b1b9      	cbz	r1, 8006276 <__sflush_r+0xae>
 8006246:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800624a:	4299      	cmp	r1, r3
 800624c:	d002      	beq.n	8006254 <__sflush_r+0x8c>
 800624e:	4628      	mov	r0, r5
 8006250:	f7ff feba 	bl	8005fc8 <_free_r>
 8006254:	2300      	movs	r3, #0
 8006256:	6363      	str	r3, [r4, #52]	@ 0x34
 8006258:	e00d      	b.n	8006276 <__sflush_r+0xae>
 800625a:	2301      	movs	r3, #1
 800625c:	4628      	mov	r0, r5
 800625e:	47b0      	blx	r6
 8006260:	4602      	mov	r2, r0
 8006262:	1c50      	adds	r0, r2, #1
 8006264:	d1c9      	bne.n	80061fa <__sflush_r+0x32>
 8006266:	682b      	ldr	r3, [r5, #0]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d0c6      	beq.n	80061fa <__sflush_r+0x32>
 800626c:	2b1d      	cmp	r3, #29
 800626e:	d001      	beq.n	8006274 <__sflush_r+0xac>
 8006270:	2b16      	cmp	r3, #22
 8006272:	d11e      	bne.n	80062b2 <__sflush_r+0xea>
 8006274:	602f      	str	r7, [r5, #0]
 8006276:	2000      	movs	r0, #0
 8006278:	e022      	b.n	80062c0 <__sflush_r+0xf8>
 800627a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800627e:	b21b      	sxth	r3, r3
 8006280:	e01b      	b.n	80062ba <__sflush_r+0xf2>
 8006282:	690f      	ldr	r7, [r1, #16]
 8006284:	2f00      	cmp	r7, #0
 8006286:	d0f6      	beq.n	8006276 <__sflush_r+0xae>
 8006288:	0793      	lsls	r3, r2, #30
 800628a:	680e      	ldr	r6, [r1, #0]
 800628c:	bf08      	it	eq
 800628e:	694b      	ldreq	r3, [r1, #20]
 8006290:	600f      	str	r7, [r1, #0]
 8006292:	bf18      	it	ne
 8006294:	2300      	movne	r3, #0
 8006296:	eba6 0807 	sub.w	r8, r6, r7
 800629a:	608b      	str	r3, [r1, #8]
 800629c:	f1b8 0f00 	cmp.w	r8, #0
 80062a0:	dde9      	ble.n	8006276 <__sflush_r+0xae>
 80062a2:	6a21      	ldr	r1, [r4, #32]
 80062a4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80062a6:	4643      	mov	r3, r8
 80062a8:	463a      	mov	r2, r7
 80062aa:	4628      	mov	r0, r5
 80062ac:	47b0      	blx	r6
 80062ae:	2800      	cmp	r0, #0
 80062b0:	dc08      	bgt.n	80062c4 <__sflush_r+0xfc>
 80062b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80062b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80062ba:	81a3      	strh	r3, [r4, #12]
 80062bc:	f04f 30ff 	mov.w	r0, #4294967295
 80062c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062c4:	4407      	add	r7, r0
 80062c6:	eba8 0800 	sub.w	r8, r8, r0
 80062ca:	e7e7      	b.n	800629c <__sflush_r+0xd4>
 80062cc:	dfbffffe 	.word	0xdfbffffe

080062d0 <_fflush_r>:
 80062d0:	b538      	push	{r3, r4, r5, lr}
 80062d2:	690b      	ldr	r3, [r1, #16]
 80062d4:	4605      	mov	r5, r0
 80062d6:	460c      	mov	r4, r1
 80062d8:	b913      	cbnz	r3, 80062e0 <_fflush_r+0x10>
 80062da:	2500      	movs	r5, #0
 80062dc:	4628      	mov	r0, r5
 80062de:	bd38      	pop	{r3, r4, r5, pc}
 80062e0:	b118      	cbz	r0, 80062ea <_fflush_r+0x1a>
 80062e2:	6a03      	ldr	r3, [r0, #32]
 80062e4:	b90b      	cbnz	r3, 80062ea <_fflush_r+0x1a>
 80062e6:	f7ff fbcb 	bl	8005a80 <__sinit>
 80062ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d0f3      	beq.n	80062da <_fflush_r+0xa>
 80062f2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80062f4:	07d0      	lsls	r0, r2, #31
 80062f6:	d404      	bmi.n	8006302 <_fflush_r+0x32>
 80062f8:	0599      	lsls	r1, r3, #22
 80062fa:	d402      	bmi.n	8006302 <_fflush_r+0x32>
 80062fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80062fe:	f7ff fe60 	bl	8005fc2 <__retarget_lock_acquire_recursive>
 8006302:	4628      	mov	r0, r5
 8006304:	4621      	mov	r1, r4
 8006306:	f7ff ff5f 	bl	80061c8 <__sflush_r>
 800630a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800630c:	07da      	lsls	r2, r3, #31
 800630e:	4605      	mov	r5, r0
 8006310:	d4e4      	bmi.n	80062dc <_fflush_r+0xc>
 8006312:	89a3      	ldrh	r3, [r4, #12]
 8006314:	059b      	lsls	r3, r3, #22
 8006316:	d4e1      	bmi.n	80062dc <_fflush_r+0xc>
 8006318:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800631a:	f7ff fe53 	bl	8005fc4 <__retarget_lock_release_recursive>
 800631e:	e7dd      	b.n	80062dc <_fflush_r+0xc>

08006320 <__swhatbuf_r>:
 8006320:	b570      	push	{r4, r5, r6, lr}
 8006322:	460c      	mov	r4, r1
 8006324:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006328:	2900      	cmp	r1, #0
 800632a:	b096      	sub	sp, #88	@ 0x58
 800632c:	4615      	mov	r5, r2
 800632e:	461e      	mov	r6, r3
 8006330:	da0d      	bge.n	800634e <__swhatbuf_r+0x2e>
 8006332:	89a3      	ldrh	r3, [r4, #12]
 8006334:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006338:	f04f 0100 	mov.w	r1, #0
 800633c:	bf14      	ite	ne
 800633e:	2340      	movne	r3, #64	@ 0x40
 8006340:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006344:	2000      	movs	r0, #0
 8006346:	6031      	str	r1, [r6, #0]
 8006348:	602b      	str	r3, [r5, #0]
 800634a:	b016      	add	sp, #88	@ 0x58
 800634c:	bd70      	pop	{r4, r5, r6, pc}
 800634e:	466a      	mov	r2, sp
 8006350:	f000 f848 	bl	80063e4 <_fstat_r>
 8006354:	2800      	cmp	r0, #0
 8006356:	dbec      	blt.n	8006332 <__swhatbuf_r+0x12>
 8006358:	9901      	ldr	r1, [sp, #4]
 800635a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800635e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006362:	4259      	negs	r1, r3
 8006364:	4159      	adcs	r1, r3
 8006366:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800636a:	e7eb      	b.n	8006344 <__swhatbuf_r+0x24>

0800636c <__smakebuf_r>:
 800636c:	898b      	ldrh	r3, [r1, #12]
 800636e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006370:	079d      	lsls	r5, r3, #30
 8006372:	4606      	mov	r6, r0
 8006374:	460c      	mov	r4, r1
 8006376:	d507      	bpl.n	8006388 <__smakebuf_r+0x1c>
 8006378:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800637c:	6023      	str	r3, [r4, #0]
 800637e:	6123      	str	r3, [r4, #16]
 8006380:	2301      	movs	r3, #1
 8006382:	6163      	str	r3, [r4, #20]
 8006384:	b003      	add	sp, #12
 8006386:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006388:	ab01      	add	r3, sp, #4
 800638a:	466a      	mov	r2, sp
 800638c:	f7ff ffc8 	bl	8006320 <__swhatbuf_r>
 8006390:	9f00      	ldr	r7, [sp, #0]
 8006392:	4605      	mov	r5, r0
 8006394:	4639      	mov	r1, r7
 8006396:	4630      	mov	r0, r6
 8006398:	f7ff fe8a 	bl	80060b0 <_malloc_r>
 800639c:	b948      	cbnz	r0, 80063b2 <__smakebuf_r+0x46>
 800639e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063a2:	059a      	lsls	r2, r3, #22
 80063a4:	d4ee      	bmi.n	8006384 <__smakebuf_r+0x18>
 80063a6:	f023 0303 	bic.w	r3, r3, #3
 80063aa:	f043 0302 	orr.w	r3, r3, #2
 80063ae:	81a3      	strh	r3, [r4, #12]
 80063b0:	e7e2      	b.n	8006378 <__smakebuf_r+0xc>
 80063b2:	89a3      	ldrh	r3, [r4, #12]
 80063b4:	6020      	str	r0, [r4, #0]
 80063b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063ba:	81a3      	strh	r3, [r4, #12]
 80063bc:	9b01      	ldr	r3, [sp, #4]
 80063be:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80063c2:	b15b      	cbz	r3, 80063dc <__smakebuf_r+0x70>
 80063c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80063c8:	4630      	mov	r0, r6
 80063ca:	f000 f81d 	bl	8006408 <_isatty_r>
 80063ce:	b128      	cbz	r0, 80063dc <__smakebuf_r+0x70>
 80063d0:	89a3      	ldrh	r3, [r4, #12]
 80063d2:	f023 0303 	bic.w	r3, r3, #3
 80063d6:	f043 0301 	orr.w	r3, r3, #1
 80063da:	81a3      	strh	r3, [r4, #12]
 80063dc:	89a3      	ldrh	r3, [r4, #12]
 80063de:	431d      	orrs	r5, r3
 80063e0:	81a5      	strh	r5, [r4, #12]
 80063e2:	e7cf      	b.n	8006384 <__smakebuf_r+0x18>

080063e4 <_fstat_r>:
 80063e4:	b538      	push	{r3, r4, r5, lr}
 80063e6:	4d07      	ldr	r5, [pc, #28]	@ (8006404 <_fstat_r+0x20>)
 80063e8:	2300      	movs	r3, #0
 80063ea:	4604      	mov	r4, r0
 80063ec:	4608      	mov	r0, r1
 80063ee:	4611      	mov	r1, r2
 80063f0:	602b      	str	r3, [r5, #0]
 80063f2:	f7fa fd9e 	bl	8000f32 <_fstat>
 80063f6:	1c43      	adds	r3, r0, #1
 80063f8:	d102      	bne.n	8006400 <_fstat_r+0x1c>
 80063fa:	682b      	ldr	r3, [r5, #0]
 80063fc:	b103      	cbz	r3, 8006400 <_fstat_r+0x1c>
 80063fe:	6023      	str	r3, [r4, #0]
 8006400:	bd38      	pop	{r3, r4, r5, pc}
 8006402:	bf00      	nop
 8006404:	200003e8 	.word	0x200003e8

08006408 <_isatty_r>:
 8006408:	b538      	push	{r3, r4, r5, lr}
 800640a:	4d06      	ldr	r5, [pc, #24]	@ (8006424 <_isatty_r+0x1c>)
 800640c:	2300      	movs	r3, #0
 800640e:	4604      	mov	r4, r0
 8006410:	4608      	mov	r0, r1
 8006412:	602b      	str	r3, [r5, #0]
 8006414:	f7fa fd9d 	bl	8000f52 <_isatty>
 8006418:	1c43      	adds	r3, r0, #1
 800641a:	d102      	bne.n	8006422 <_isatty_r+0x1a>
 800641c:	682b      	ldr	r3, [r5, #0]
 800641e:	b103      	cbz	r3, 8006422 <_isatty_r+0x1a>
 8006420:	6023      	str	r3, [r4, #0]
 8006422:	bd38      	pop	{r3, r4, r5, pc}
 8006424:	200003e8 	.word	0x200003e8

08006428 <_sbrk_r>:
 8006428:	b538      	push	{r3, r4, r5, lr}
 800642a:	4d06      	ldr	r5, [pc, #24]	@ (8006444 <_sbrk_r+0x1c>)
 800642c:	2300      	movs	r3, #0
 800642e:	4604      	mov	r4, r0
 8006430:	4608      	mov	r0, r1
 8006432:	602b      	str	r3, [r5, #0]
 8006434:	f7fa fda6 	bl	8000f84 <_sbrk>
 8006438:	1c43      	adds	r3, r0, #1
 800643a:	d102      	bne.n	8006442 <_sbrk_r+0x1a>
 800643c:	682b      	ldr	r3, [r5, #0]
 800643e:	b103      	cbz	r3, 8006442 <_sbrk_r+0x1a>
 8006440:	6023      	str	r3, [r4, #0]
 8006442:	bd38      	pop	{r3, r4, r5, pc}
 8006444:	200003e8 	.word	0x200003e8

08006448 <_init>:
 8006448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800644a:	bf00      	nop
 800644c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800644e:	bc08      	pop	{r3}
 8006450:	469e      	mov	lr, r3
 8006452:	4770      	bx	lr

08006454 <_fini>:
 8006454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006456:	bf00      	nop
 8006458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800645a:	bc08      	pop	{r3}
 800645c:	469e      	mov	lr, r3
 800645e:	4770      	bx	lr
