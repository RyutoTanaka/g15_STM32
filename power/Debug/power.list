
power.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006afc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08006c8c  08006c8c  00007c8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d5c  08006d5c  00008068  2**0
                  CONTENTS
  4 .ARM          00000008  08006d5c  08006d5c  00007d5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d64  08006d64  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d64  08006d64  00007d64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006d68  08006d68  00007d68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08006d6c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00008068  2**0
                  CONTENTS
 10 .bss          00000398  20000068  20000068  00008068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000400  20000400  00008068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013767  00000000  00000000  00008098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000026a2  00000000  00000000  0001b7ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001130  00000000  00000000  0001dea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d67  00000000  00000000  0001efd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d904  00000000  00000000  0001fd3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000148f3  00000000  00000000  0003d643  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b0bf7  00000000  00000000  00051f36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00102b2d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005144  00000000  00000000  00102b70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000065  00000000  00000000  00107cb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006c74 	.word	0x08006c74

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08006c74 	.word	0x08006c74

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <canCommandDeserialize>:
						+ data->mode      << 2
						+ data->pull      << 3
						+ data->release   << 4;
}

void canCommandDeserialize(CanCommand* data, uint8_t* buffer){
 8000270:	b480      	push	{r7}
 8000272:	b083      	sub	sp, #12
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
 8000278:	6039      	str	r1, [r7, #0]
	data->motor_output = (buffer[0] & 0b00000001) != 0;
 800027a:	683b      	ldr	r3, [r7, #0]
 800027c:	781b      	ldrb	r3, [r3, #0]
 800027e:	f003 0301 	and.w	r3, r3, #1
 8000282:	2b00      	cmp	r3, #0
 8000284:	bf14      	ite	ne
 8000286:	2301      	movne	r3, #1
 8000288:	2300      	moveq	r3, #0
 800028a:	b2da      	uxtb	r2, r3
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	701a      	strb	r2, [r3, #0]
	data->power_off    = (buffer[0] & 0b00000010) != 0;
 8000290:	683b      	ldr	r3, [r7, #0]
 8000292:	781b      	ldrb	r3, [r3, #0]
 8000294:	f003 0302 	and.w	r3, r3, #2
 8000298:	2b00      	cmp	r3, #0
 800029a:	bf14      	ite	ne
 800029c:	2301      	movne	r3, #1
 800029e:	2300      	moveq	r3, #0
 80002a0:	b2da      	uxtb	r2, r3
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	705a      	strb	r2, [r3, #1]
	data->mode         = (buffer[0] & 0b00000100) != 0;
 80002a6:	683b      	ldr	r3, [r7, #0]
 80002a8:	781b      	ldrb	r3, [r3, #0]
 80002aa:	f003 0304 	and.w	r3, r3, #4
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	bf14      	ite	ne
 80002b2:	2301      	movne	r3, #1
 80002b4:	2300      	moveq	r3, #0
 80002b6:	b2da      	uxtb	r2, r3
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	709a      	strb	r2, [r3, #2]
	data->pull         = (buffer[0] & 0b00001000) != 0;
 80002bc:	683b      	ldr	r3, [r7, #0]
 80002be:	781b      	ldrb	r3, [r3, #0]
 80002c0:	f003 0308 	and.w	r3, r3, #8
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	bf14      	ite	ne
 80002c8:	2301      	movne	r3, #1
 80002ca:	2300      	moveq	r3, #0
 80002cc:	b2da      	uxtb	r2, r3
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	70da      	strb	r2, [r3, #3]
	data->release      = (buffer[0] & 0b00010000) != 0;
 80002d2:	683b      	ldr	r3, [r7, #0]
 80002d4:	781b      	ldrb	r3, [r3, #0]
 80002d6:	f003 0310 	and.w	r3, r3, #16
 80002da:	2b00      	cmp	r3, #0
 80002dc:	bf14      	ite	ne
 80002de:	2301      	movne	r3, #1
 80002e0:	2300      	moveq	r3, #0
 80002e2:	b2da      	uxtb	r2, r3
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	711a      	strb	r2, [r3, #4]

}
 80002e8:	bf00      	nop
 80002ea:	370c      	adds	r7, #12
 80002ec:	46bd      	mov	sp, r7
 80002ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f2:	4770      	bx	lr

080002f4 <powerResultSerialize>:

void powerResultSerialize(PowerResult* data, uint8_t* buffer){
 80002f4:	b480      	push	{r7}
 80002f6:	b083      	sub	sp, #12
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	6078      	str	r0, [r7, #4]
 80002fc:	6039      	str	r1, [r7, #0]
	buffer[0] = (uint8_t)(data->emergency) + ((uint8_t)data->motor_output << 1);
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	781b      	ldrb	r3, [r3, #0]
 8000302:	461a      	mov	r2, r3
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	785b      	ldrb	r3, [r3, #1]
 8000308:	005b      	lsls	r3, r3, #1
 800030a:	b2db      	uxtb	r3, r3
 800030c:	4413      	add	r3, r2
 800030e:	b2da      	uxtb	r2, r3
 8000310:	683b      	ldr	r3, [r7, #0]
 8000312:	701a      	strb	r2, [r3, #0]
	buffer[1] = data->v_bat;
 8000314:	683b      	ldr	r3, [r7, #0]
 8000316:	3301      	adds	r3, #1
 8000318:	687a      	ldr	r2, [r7, #4]
 800031a:	7892      	ldrb	r2, [r2, #2]
 800031c:	701a      	strb	r2, [r3, #0]
	buffer[2] = data->i_bat;
 800031e:	683b      	ldr	r3, [r7, #0]
 8000320:	3302      	adds	r3, #2
 8000322:	687a      	ldr	r2, [r7, #4]
 8000324:	78d2      	ldrb	r2, [r2, #3]
 8000326:	701a      	strb	r2, [r3, #0]
}
 8000328:	bf00      	nop
 800032a:	370c      	adds	r7, #12
 800032c:	46bd      	mov	sp, r7
 800032e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000332:	4770      	bx	lr

08000334 <canInit>:

static CAN_FilterTypeDef g_filter;

static bool g_updated = false;

HAL_StatusTypeDef canInit(CAN_HandleTypeDef *hcan){
 8000334:	b580      	push	{r7, lr}
 8000336:	b082      	sub	sp, #8
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]
	g_hcan = hcan;
 800033c:	4a1f      	ldr	r2, [pc, #124]	@ (80003bc <canInit+0x88>)
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	6013      	str	r3, [r2, #0]
	g_filter.FilterIdHigh         = MDC_CAN_ID << 5;               // フィルターID(上位16ビット)
 8000342:	4b1f      	ldr	r3, [pc, #124]	@ (80003c0 <canInit+0x8c>)
 8000344:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000348:	601a      	str	r2, [r3, #0]
	g_filter.FilterIdLow          = MDC_CAN_ID << 5;     // フィルターID(下位16ビット)                         // フィルターマスク(下位16ビット)
 800034a:	4b1d      	ldr	r3, [pc, #116]	@ (80003c0 <canInit+0x8c>)
 800034c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000350:	605a      	str	r2, [r3, #4]
	g_filter.FilterScale          = CAN_FILTERSCALE_16BIT;    // フィルタースケール
 8000352:	4b1b      	ldr	r3, [pc, #108]	@ (80003c0 <canInit+0x8c>)
 8000354:	2200      	movs	r2, #0
 8000356:	61da      	str	r2, [r3, #28]
	g_filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;         // フィルターに割り当てるFIFO
 8000358:	4b19      	ldr	r3, [pc, #100]	@ (80003c0 <canInit+0x8c>)
 800035a:	2200      	movs	r2, #0
 800035c:	611a      	str	r2, [r3, #16]
	g_filter.FilterBank           = 0;                        // フィルターバンクNo
 800035e:	4b18      	ldr	r3, [pc, #96]	@ (80003c0 <canInit+0x8c>)
 8000360:	2200      	movs	r2, #0
 8000362:	615a      	str	r2, [r3, #20]
	g_filter.FilterMode           = CAN_FILTERMODE_IDLIST;    // フィルターモード
 8000364:	4b16      	ldr	r3, [pc, #88]	@ (80003c0 <canInit+0x8c>)
 8000366:	2201      	movs	r2, #1
 8000368:	619a      	str	r2, [r3, #24]
	g_filter.SlaveStartFilterBank = 14;                       // スレーブCANの開始フィルターバンクNo
 800036a:	4b15      	ldr	r3, [pc, #84]	@ (80003c0 <canInit+0x8c>)
 800036c:	220e      	movs	r2, #14
 800036e:	625a      	str	r2, [r3, #36]	@ 0x24
	g_filter.FilterActivation     = ENABLE;                   // フィルター無効／有効
 8000370:	4b13      	ldr	r3, [pc, #76]	@ (80003c0 <canInit+0x8c>)
 8000372:	2201      	movs	r2, #1
 8000374:	621a      	str	r2, [r3, #32]
	HAL_CAN_Stop(hcan);
 8000376:	6878      	ldr	r0, [r7, #4]
 8000378:	f002 f9a5 	bl	80026c6 <HAL_CAN_Stop>
	if (HAL_CAN_ConfigFilter(hcan, &g_filter) != HAL_OK) return HAL_ERROR;
 800037c:	4910      	ldr	r1, [pc, #64]	@ (80003c0 <canInit+0x8c>)
 800037e:	6878      	ldr	r0, [r7, #4]
 8000380:	f002 f893 	bl	80024aa <HAL_CAN_ConfigFilter>
 8000384:	4603      	mov	r3, r0
 8000386:	2b00      	cmp	r3, #0
 8000388:	d001      	beq.n	800038e <canInit+0x5a>
 800038a:	2301      	movs	r3, #1
 800038c:	e011      	b.n	80003b2 <canInit+0x7e>
	if (HAL_CAN_Start(hcan)!=HAL_OK) return HAL_ERROR;
 800038e:	6878      	ldr	r0, [r7, #4]
 8000390:	f002 f955 	bl	800263e <HAL_CAN_Start>
 8000394:	4603      	mov	r3, r0
 8000396:	2b00      	cmp	r3, #0
 8000398:	d001      	beq.n	800039e <canInit+0x6a>
 800039a:	2301      	movs	r3, #1
 800039c:	e009      	b.n	80003b2 <canInit+0x7e>
	if (HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING)!=HAL_OK) return HAL_ERROR;
 800039e:	2102      	movs	r1, #2
 80003a0:	6878      	ldr	r0, [r7, #4]
 80003a2:	f002 fc00 	bl	8002ba6 <HAL_CAN_ActivateNotification>
 80003a6:	4603      	mov	r3, r0
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d001      	beq.n	80003b0 <canInit+0x7c>
 80003ac:	2301      	movs	r3, #1
 80003ae:	e000      	b.n	80003b2 <canInit+0x7e>
	return HAL_OK;
 80003b0:	2300      	movs	r3, #0
}
 80003b2:	4618      	mov	r0, r3
 80003b4:	3708      	adds	r7, #8
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bd80      	pop	{r7, pc}
 80003ba:	bf00      	nop
 80003bc:	2000008c 	.word	0x2000008c
 80003c0:	20000090 	.word	0x20000090

080003c4 <getCanData>:

void getCanData(CanCommand* cmd){
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b082      	sub	sp, #8
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
	g_updated = false;
 80003cc:	4b05      	ldr	r3, [pc, #20]	@ (80003e4 <getCanData+0x20>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	701a      	strb	r2, [r3, #0]
	canCommandDeserialize(cmd, g_rx_data);
 80003d2:	4905      	ldr	r1, [pc, #20]	@ (80003e8 <getCanData+0x24>)
 80003d4:	6878      	ldr	r0, [r7, #4]
 80003d6:	f7ff ff4b 	bl	8000270 <canCommandDeserialize>
}
 80003da:	bf00      	nop
 80003dc:	3708      	adds	r7, #8
 80003de:	46bd      	mov	sp, r7
 80003e0:	bd80      	pop	{r7, pc}
 80003e2:	bf00      	nop
 80003e4:	200000b8 	.word	0x200000b8
 80003e8:	20000088 	.word	0x20000088

080003ec <setCanData>:

void setCanData(PowerResult* res){
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b082      	sub	sp, #8
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
	powerResultSerialize(res,g_tx_data);
 80003f4:	4903      	ldr	r1, [pc, #12]	@ (8000404 <setCanData+0x18>)
 80003f6:	6878      	ldr	r0, [r7, #4]
 80003f8:	f7ff ff7c 	bl	80002f4 <powerResultSerialize>
}
 80003fc:	bf00      	nop
 80003fe:	3708      	adds	r7, #8
 8000400:	46bd      	mov	sp, r7
 8000402:	bd80      	pop	{r7, pc}
 8000404:	20000084 	.word	0x20000084

08000408 <isCanUpdated>:

bool isCanUpdated(){
 8000408:	b480      	push	{r7}
 800040a:	af00      	add	r7, sp, #0
	return g_updated;
 800040c:	4b03      	ldr	r3, [pc, #12]	@ (800041c <isCanUpdated+0x14>)
 800040e:	781b      	ldrb	r3, [r3, #0]
}
 8000410:	4618      	mov	r0, r3
 8000412:	46bd      	mov	sp, r7
 8000414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000418:	4770      	bx	lr
 800041a:	bf00      	nop
 800041c:	200000b8 	.word	0x200000b8

08000420 <sendCanData>:

void sendCanData(){
 8000420:	b580      	push	{r7, lr}
 8000422:	b08a      	sub	sp, #40	@ 0x28
 8000424:	af00      	add	r7, sp, #0
	CAN_TxHeaderTypeDef TxHeader;
	uint32_t TxMailbox;
	uint8_t data[8];
	if(0 < HAL_CAN_GetTxMailboxesFreeLevel(g_hcan)){
 8000426:	4b17      	ldr	r3, [pc, #92]	@ (8000484 <sendCanData+0x64>)
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	4618      	mov	r0, r3
 800042c:	f002 fa64 	bl	80028f8 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000430:	4603      	mov	r3, r0
 8000432:	2b00      	cmp	r3, #0
 8000434:	d021      	beq.n	800047a <sendCanData+0x5a>
	    TxHeader.StdId = POWER_CAN_ID;          // CAN ID
 8000436:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800043a:	613b      	str	r3, [r7, #16]
	    TxHeader.RTR = CAN_RTR_DATA;            // フレームタイプはデータフレーム
 800043c:	2300      	movs	r3, #0
 800043e:	61fb      	str	r3, [r7, #28]
	    TxHeader.IDE = CAN_ID_STD;              // 標準ID(11ﾋﾞｯﾄ)
 8000440:	2300      	movs	r3, #0
 8000442:	61bb      	str	r3, [r7, #24]
	    TxHeader.DLC = POWER_RESULT_BUFFER_SIZE;// データ長は8バイトに
 8000444:	2303      	movs	r3, #3
 8000446:	623b      	str	r3, [r7, #32]
	    TxHeader.TransmitGlobalTime = DISABLE;  // ???
 8000448:	2300      	movs	r3, #0
 800044a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	    memcpy(data,g_tx_data,sizeof(g_tx_data));
 800044e:	4a0e      	ldr	r2, [pc, #56]	@ (8000488 <sendCanData+0x68>)
 8000450:	1d3b      	adds	r3, r7, #4
 8000452:	6812      	ldr	r2, [r2, #0]
 8000454:	4611      	mov	r1, r2
 8000456:	8019      	strh	r1, [r3, #0]
 8000458:	3302      	adds	r3, #2
 800045a:	0c12      	lsrs	r2, r2, #16
 800045c:	701a      	strb	r2, [r3, #0]
	    if(HAL_CAN_AddTxMessage(g_hcan, &TxHeader, data, &TxMailbox)!=HAL_OK) Error_Handler();
 800045e:	4b09      	ldr	r3, [pc, #36]	@ (8000484 <sendCanData+0x64>)
 8000460:	6818      	ldr	r0, [r3, #0]
 8000462:	f107 030c 	add.w	r3, r7, #12
 8000466:	1d3a      	adds	r2, r7, #4
 8000468:	f107 0110 	add.w	r1, r7, #16
 800046c:	f002 f974 	bl	8002758 <HAL_CAN_AddTxMessage>
 8000470:	4603      	mov	r3, r0
 8000472:	2b00      	cmp	r3, #0
 8000474:	d001      	beq.n	800047a <sendCanData+0x5a>
 8000476:	f000 fc61 	bl	8000d3c <Error_Handler>
	}
}
 800047a:	bf00      	nop
 800047c:	3728      	adds	r7, #40	@ 0x28
 800047e:	46bd      	mov	sp, r7
 8000480:	bd80      	pop	{r7, pc}
 8000482:	bf00      	nop
 8000484:	2000008c 	.word	0x2000008c
 8000488:	20000084 	.word	0x20000084

0800048c <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b08c      	sub	sp, #48	@ 0x30
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]
    CAN_RxHeaderTypeDef RxHeader;
    uint8_t data[8];
    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, data) == HAL_OK)
 8000494:	f107 030c 	add.w	r3, r7, #12
 8000498:	f107 0214 	add.w	r2, r7, #20
 800049c:	2100      	movs	r1, #0
 800049e:	6878      	ldr	r0, [r7, #4]
 80004a0:	f002 fa5f 	bl	8002962 <HAL_CAN_GetRxMessage>
 80004a4:	4603      	mov	r3, r0
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d10a      	bne.n	80004c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>
    {
    	printf("callback %d",RxHeader.StdId);
 80004aa:	697b      	ldr	r3, [r7, #20]
 80004ac:	4619      	mov	r1, r3
 80004ae:	4806      	ldr	r0, [pc, #24]	@ (80004c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 80004b0:	f005 fc50 	bl	8005d54 <iprintf>
				g_updated = true;
 80004b4:	4b05      	ldr	r3, [pc, #20]	@ (80004cc <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 80004b6:	2201      	movs	r2, #1
 80004b8:	701a      	strb	r2, [r3, #0]
				memcpy(g_rx_data,data,sizeof(g_rx_data));
 80004ba:	7b3a      	ldrb	r2, [r7, #12]
 80004bc:	4b04      	ldr	r3, [pc, #16]	@ (80004d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 80004be:	701a      	strb	r2, [r3, #0]
    }
}
 80004c0:	bf00      	nop
 80004c2:	3730      	adds	r7, #48	@ 0x30
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bd80      	pop	{r7, pc}
 80004c8:	08006c8c 	.word	0x08006c8c
 80004cc:	200000b8 	.word	0x200000b8
 80004d0:	20000088 	.word	0x20000088

080004d4 <isNoError>:
typedef struct{
	bool battery;
	bool emergency;
}Error;

bool isNoError(Error e){
 80004d4:	b480      	push	{r7}
 80004d6:	b083      	sub	sp, #12
 80004d8:	af00      	add	r7, sp, #0
 80004da:	80b8      	strh	r0, [r7, #4]
	return (e.battery==false) && (e.emergency==false);
 80004dc:	793b      	ldrb	r3, [r7, #4]
 80004de:	f083 0301 	eor.w	r3, r3, #1
 80004e2:	b2db      	uxtb	r3, r3
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d007      	beq.n	80004f8 <isNoError+0x24>
 80004e8:	797b      	ldrb	r3, [r7, #5]
 80004ea:	f083 0301 	eor.w	r3, r3, #1
 80004ee:	b2db      	uxtb	r3, r3
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d001      	beq.n	80004f8 <isNoError+0x24>
 80004f4:	2301      	movs	r3, #1
 80004f6:	e000      	b.n	80004fa <isNoError+0x26>
 80004f8:	2300      	movs	r3, #0
 80004fa:	f003 0301 	and.w	r3, r3, #1
 80004fe:	b2db      	uxtb	r3, r3
}
 8000500:	4618      	mov	r0, r3
 8000502:	370c      	adds	r7, #12
 8000504:	46bd      	mov	sp, r7
 8000506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050a:	4770      	bx	lr

0800050c <errorReleaseRequest>:

bool errorReleaseRequest(bool sw){
 800050c:	b480      	push	{r7}
 800050e:	b085      	sub	sp, #20
 8000510:	af00      	add	r7, sp, #0
 8000512:	4603      	mov	r3, r0
 8000514:	71fb      	strb	r3, [r7, #7]
	static bool last_sw = false;
	bool request;
	request = (last_sw == true) && (sw == false);
 8000516:	4b0e      	ldr	r3, [pc, #56]	@ (8000550 <errorReleaseRequest+0x44>)
 8000518:	781b      	ldrb	r3, [r3, #0]
 800051a:	2b00      	cmp	r3, #0
 800051c:	d007      	beq.n	800052e <errorReleaseRequest+0x22>
 800051e:	79fb      	ldrb	r3, [r7, #7]
 8000520:	f083 0301 	eor.w	r3, r3, #1
 8000524:	b2db      	uxtb	r3, r3
 8000526:	2b00      	cmp	r3, #0
 8000528:	d001      	beq.n	800052e <errorReleaseRequest+0x22>
 800052a:	2301      	movs	r3, #1
 800052c:	e000      	b.n	8000530 <errorReleaseRequest+0x24>
 800052e:	2300      	movs	r3, #0
 8000530:	73fb      	strb	r3, [r7, #15]
 8000532:	7bfb      	ldrb	r3, [r7, #15]
 8000534:	f003 0301 	and.w	r3, r3, #1
 8000538:	73fb      	strb	r3, [r7, #15]
	last_sw = sw;
 800053a:	4a05      	ldr	r2, [pc, #20]	@ (8000550 <errorReleaseRequest+0x44>)
 800053c:	79fb      	ldrb	r3, [r7, #7]
 800053e:	7013      	strb	r3, [r2, #0]
	return request;
 8000540:	7bfb      	ldrb	r3, [r7, #15]
}
 8000542:	4618      	mov	r0, r3
 8000544:	3714      	adds	r7, #20
 8000546:	46bd      	mov	sp, r7
 8000548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop
 8000550:	20000299 	.word	0x20000299

08000554 <HAL_TIM_PeriodElapsedCallback>:
bool g_main_loop_flag = false;

bool batteryErrorCheck(uint16_t,uint16_t);

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
	if(htim == &htim6)
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	4a0c      	ldr	r2, [pc, #48]	@ (8000590 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000560:	4293      	cmp	r3, r2
 8000562:	d10a      	bne.n	800057a <HAL_TIM_PeriodElapsedCallback+0x26>
	{
		//mainloop
		if(g_main_loop_flag){
 8000564:	4b0b      	ldr	r3, [pc, #44]	@ (8000594 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	2b00      	cmp	r3, #0
 800056a:	d003      	beq.n	8000574 <HAL_TIM_PeriodElapsedCallback+0x20>
			printf("Control cycle is slow\r\n");
 800056c:	480a      	ldr	r0, [pc, #40]	@ (8000598 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800056e:	f005 fc59 	bl	8005e24 <puts>
 8000572:	e002      	b.n	800057a <HAL_TIM_PeriodElapsedCallback+0x26>
		}
		else{
			g_main_loop_flag = true;
 8000574:	4b07      	ldr	r3, [pc, #28]	@ (8000594 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000576:	2201      	movs	r2, #1
 8000578:	701a      	strb	r2, [r3, #0]
		}
	}
	if(htim == &htim7){
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	4a07      	ldr	r2, [pc, #28]	@ (800059c <HAL_TIM_PeriodElapsedCallback+0x48>)
 800057e:	4293      	cmp	r3, r2
 8000580:	d101      	bne.n	8000586 <HAL_TIM_PeriodElapsedCallback+0x32>
		sendCanData();
 8000582:	f7ff ff4d 	bl	8000420 <sendCanData>
	}

}
 8000586:	bf00      	nop
 8000588:	3708      	adds	r7, #8
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	20000178 	.word	0x20000178
 8000594:	20000298 	.word	0x20000298
 8000598:	08006c98 	.word	0x08006c98
 800059c:	200001c4 	.word	0x200001c4

080005a0 <batteryErrorCheck>:

// バッテリーの電流、電圧、非常停止スイッチの状態を確認する　異常があればtrueを返す
bool batteryErrorCheck(uint16_t i_bat,uint16_t v_bat){
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b084      	sub	sp, #16
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	4603      	mov	r3, r0
 80005a8:	460a      	mov	r2, r1
 80005aa:	80fb      	strh	r3, [r7, #6]
 80005ac:	4613      	mov	r3, r2
 80005ae:	80bb      	strh	r3, [r7, #4]
	static const uint16_t i_bat_th = 1000;
	static const uint16_t v_bat_high_th = 16.0f/0.0039f;
	static const uint16_t v_bat_low_th = 8.0f/0.0039f;
	static size_t nv;
	static size_t ni;
	if((v_bat > v_bat_high_th) || (v_bat < v_bat_low_th)) nv++;
 80005b0:	4b21      	ldr	r3, [pc, #132]	@ (8000638 <batteryErrorCheck+0x98>)
 80005b2:	881b      	ldrh	r3, [r3, #0]
 80005b4:	88ba      	ldrh	r2, [r7, #4]
 80005b6:	429a      	cmp	r2, r3
 80005b8:	d804      	bhi.n	80005c4 <batteryErrorCheck+0x24>
 80005ba:	4b20      	ldr	r3, [pc, #128]	@ (800063c <batteryErrorCheck+0x9c>)
 80005bc:	881b      	ldrh	r3, [r3, #0]
 80005be:	88ba      	ldrh	r2, [r7, #4]
 80005c0:	429a      	cmp	r2, r3
 80005c2:	d205      	bcs.n	80005d0 <batteryErrorCheck+0x30>
 80005c4:	4b1e      	ldr	r3, [pc, #120]	@ (8000640 <batteryErrorCheck+0xa0>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	3301      	adds	r3, #1
 80005ca:	4a1d      	ldr	r2, [pc, #116]	@ (8000640 <batteryErrorCheck+0xa0>)
 80005cc:	6013      	str	r3, [r2, #0]
 80005ce:	e002      	b.n	80005d6 <batteryErrorCheck+0x36>
	else nv=0;
 80005d0:	4b1b      	ldr	r3, [pc, #108]	@ (8000640 <batteryErrorCheck+0xa0>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	601a      	str	r2, [r3, #0]
	if(i_bat > i_bat_th)ni++;
 80005d6:	4b1b      	ldr	r3, [pc, #108]	@ (8000644 <batteryErrorCheck+0xa4>)
 80005d8:	881b      	ldrh	r3, [r3, #0]
 80005da:	88fa      	ldrh	r2, [r7, #6]
 80005dc:	429a      	cmp	r2, r3
 80005de:	d905      	bls.n	80005ec <batteryErrorCheck+0x4c>
 80005e0:	4b19      	ldr	r3, [pc, #100]	@ (8000648 <batteryErrorCheck+0xa8>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	3301      	adds	r3, #1
 80005e6:	4a18      	ldr	r2, [pc, #96]	@ (8000648 <batteryErrorCheck+0xa8>)
 80005e8:	6013      	str	r3, [r2, #0]
 80005ea:	e002      	b.n	80005f2 <batteryErrorCheck+0x52>
	else ni=0;
 80005ec:	4b16      	ldr	r3, [pc, #88]	@ (8000648 <batteryErrorCheck+0xa8>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
	bool error = (nv > 10)	|| (ni > 2);
 80005f2:	4b13      	ldr	r3, [pc, #76]	@ (8000640 <batteryErrorCheck+0xa0>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	2b0a      	cmp	r3, #10
 80005f8:	d803      	bhi.n	8000602 <batteryErrorCheck+0x62>
 80005fa:	4b13      	ldr	r3, [pc, #76]	@ (8000648 <batteryErrorCheck+0xa8>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	2b02      	cmp	r3, #2
 8000600:	d901      	bls.n	8000606 <batteryErrorCheck+0x66>
 8000602:	2301      	movs	r3, #1
 8000604:	e000      	b.n	8000608 <batteryErrorCheck+0x68>
 8000606:	2300      	movs	r3, #0
 8000608:	73fb      	strb	r3, [r7, #15]
 800060a:	7bfb      	ldrb	r3, [r7, #15]
 800060c:	f003 0301 	and.w	r3, r3, #1
 8000610:	73fb      	strb	r3, [r7, #15]
	if (nv > 10) printf("Vbat error \r\n");
 8000612:	4b0b      	ldr	r3, [pc, #44]	@ (8000640 <batteryErrorCheck+0xa0>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	2b0a      	cmp	r3, #10
 8000618:	d902      	bls.n	8000620 <batteryErrorCheck+0x80>
 800061a:	480c      	ldr	r0, [pc, #48]	@ (800064c <batteryErrorCheck+0xac>)
 800061c:	f005 fc02 	bl	8005e24 <puts>
	if (ni > 2) printf("Ibat error \r\n");
 8000620:	4b09      	ldr	r3, [pc, #36]	@ (8000648 <batteryErrorCheck+0xa8>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	2b02      	cmp	r3, #2
 8000626:	d902      	bls.n	800062e <batteryErrorCheck+0x8e>
 8000628:	4809      	ldr	r0, [pc, #36]	@ (8000650 <batteryErrorCheck+0xb0>)
 800062a:	f005 fbfb 	bl	8005e24 <puts>
	return error;
 800062e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000630:	4618      	mov	r0, r3
 8000632:	3710      	adds	r7, #16
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	08006ce8 	.word	0x08006ce8
 800063c:	08006cea 	.word	0x08006cea
 8000640:	2000029c 	.word	0x2000029c
 8000644:	08006cec 	.word	0x08006cec
 8000648:	200002a0 	.word	0x200002a0
 800064c:	08006cb0 	.word	0x08006cb0
 8000650:	08006cc0 	.word	0x08006cc0

08000654 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b088      	sub	sp, #32
 8000658:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	setbuf(stdout, NULL);
 800065a:	4b97      	ldr	r3, [pc, #604]	@ (80008b8 <main+0x264>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	689b      	ldr	r3, [r3, #8]
 8000660:	2100      	movs	r1, #0
 8000662:	4618      	mov	r0, r3
 8000664:	f005 fbe6 	bl	8005e34 <setbuf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000668:	f000 fdea 	bl	8001240 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800066c:	f000 f93c 	bl	80008e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000670:	f000 fae4 	bl	8000c3c <MX_GPIO_Init>
  MX_DMA_Init();
 8000674:	f000 fac4 	bl	8000c00 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000678:	f000 fa92 	bl	8000ba0 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800067c:	f000 f970 	bl	8000960 <MX_ADC1_Init>
  MX_CAN_Init();
 8000680:	f000 f9ec 	bl	8000a5c <MX_CAN_Init>
  MX_TIM6_Init();
 8000684:	f000 fa20 	bl	8000ac8 <MX_TIM6_Init>
  MX_TIM7_Init();
 8000688:	f000 fa54 	bl	8000b34 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  enum state state = state_wait;
 800068c:	2300      	movs	r3, #0
 800068e:	77fb      	strb	r3, [r7, #31]
  Error error = {0};
 8000690:	2300      	movs	r3, #0
 8000692:	823b      	strh	r3, [r7, #16]


  //GPIO初期設定
  HAL_GPIO_WritePin(relay_GPIO_Port, relay_Pin, false);
 8000694:	2200      	movs	r2, #0
 8000696:	2140      	movs	r1, #64	@ 0x40
 8000698:	4888      	ldr	r0, [pc, #544]	@ (80008bc <main+0x268>)
 800069a:	f003 f90b 	bl	80038b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(jetson_power_GPIO_Port, jetson_power_Pin, false);
 800069e:	2200      	movs	r2, #0
 80006a0:	2110      	movs	r1, #16
 80006a2:	4886      	ldr	r0, [pc, #536]	@ (80008bc <main+0x268>)
 80006a4:	f003 f906 	bl	80038b4 <HAL_GPIO_WritePin>

  //ADCスタート
  static uint16_t ADC_buff[2];
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80006a8:	2100      	movs	r1, #0
 80006aa:	4885      	ldr	r0, [pc, #532]	@ (80008c0 <main+0x26c>)
 80006ac:	f001 f8dc 	bl	8001868 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)ADC_buff, sizeof(ADC_buff) / sizeof(ADC_buff[0]));
 80006b0:	2202      	movs	r2, #2
 80006b2:	4984      	ldr	r1, [pc, #528]	@ (80008c4 <main+0x270>)
 80006b4:	4882      	ldr	r0, [pc, #520]	@ (80008c0 <main+0x26c>)
 80006b6:	f000 fffd 	bl	80016b4 <HAL_ADC_Start_DMA>
  hdma_adc1.Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT);
 80006ba:	4b83      	ldr	r3, [pc, #524]	@ (80008c8 <main+0x274>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	681a      	ldr	r2, [r3, #0]
 80006c0:	4b81      	ldr	r3, [pc, #516]	@ (80008c8 <main+0x274>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f022 0206 	bic.w	r2, r2, #6
 80006c8:	601a      	str	r2, [r3, #0]
  HAL_Delay(100);
 80006ca:	2064      	movs	r0, #100	@ 0x64
 80006cc:	f000 fe1e 	bl	800130c <HAL_Delay>
//	while (batteryErrorCheck(ADC_buff[0], ADC_buff[1]) == true
//			|| HAL_GPIO_ReadPin(emergency_switch_GPIO_Port,emergency_switch_Pin)) {
//		printf("start error! Ibat:%d,Vbat%d,SW,%d\r\n",ADC_buff[0], ADC_buff[1],HAL_GPIO_ReadPin(emergency_switch_GPIO_Port,emergency_switch_Pin));
//		HAL_Delay(1000);
//	}
  HAL_GPIO_WritePin(jetson_power_GPIO_Port, jetson_power_Pin, true);
 80006d0:	2201      	movs	r2, #1
 80006d2:	2110      	movs	r1, #16
 80006d4:	4879      	ldr	r0, [pc, #484]	@ (80008bc <main+0x268>)
 80006d6:	f003 f8ed 	bl	80038b4 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80006da:	2064      	movs	r0, #100	@ 0x64
 80006dc:	f000 fe16 	bl	800130c <HAL_Delay>




  //CANスタート
  canInit(&hcan);
 80006e0:	487a      	ldr	r0, [pc, #488]	@ (80008cc <main+0x278>)
 80006e2:	f7ff fe27 	bl	8000334 <canInit>
  size_t can_timeout_cnt = 0;
 80006e6:	2300      	movs	r3, #0
 80006e8:	61bb      	str	r3, [r7, #24]
  // relayをONにしてからMDに電源が入るまでの猶予
  size_t motor_delay_cnt = 0;
 80006ea:	2300      	movs	r3, #0
 80006ec:	617b      	str	r3, [r7, #20]
  // エラー解除待機中
  bool wait_flag=false;
 80006ee:	2300      	movs	r3, #0
 80006f0:	74fb      	strb	r3, [r7, #19]

  //timerスタート
  HAL_TIM_Base_Start_IT(&htim6);
 80006f2:	4877      	ldr	r0, [pc, #476]	@ (80008d0 <main+0x27c>)
 80006f4:	f004 fbac 	bl	8004e50 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 80006f8:	4876      	ldr	r0, [pc, #472]	@ (80008d4 <main+0x280>)
 80006fa:	f004 fba9 	bl	8004e50 <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN WHILE */

  while (1)
  {
		//mainloop wait
		while(g_main_loop_flag == false){}
 80006fe:	bf00      	nop
 8000700:	4b75      	ldr	r3, [pc, #468]	@ (80008d8 <main+0x284>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	f083 0301 	eor.w	r3, r3, #1
 8000708:	b2db      	uxtb	r3, r3
 800070a:	2b00      	cmp	r3, #0
 800070c:	d1f8      	bne.n	8000700 <main+0xac>

		error.battery = batteryErrorCheck(ADC_buff[0], ADC_buff[1]);
 800070e:	4b6d      	ldr	r3, [pc, #436]	@ (80008c4 <main+0x270>)
 8000710:	881b      	ldrh	r3, [r3, #0]
 8000712:	4a6c      	ldr	r2, [pc, #432]	@ (80008c4 <main+0x270>)
 8000714:	8852      	ldrh	r2, [r2, #2]
 8000716:	4611      	mov	r1, r2
 8000718:	4618      	mov	r0, r3
 800071a:	f7ff ff41 	bl	80005a0 <batteryErrorCheck>
 800071e:	4603      	mov	r3, r0
 8000720:	743b      	strb	r3, [r7, #16]
		error.emergency = HAL_GPIO_ReadPin(emergency_switch_GPIO_Port,emergency_switch_Pin);
 8000722:	2120      	movs	r1, #32
 8000724:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000728:	f003 f8ac 	bl	8003884 <HAL_GPIO_ReadPin>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	bf14      	ite	ne
 8000732:	2301      	movne	r3, #1
 8000734:	2300      	moveq	r3, #0
 8000736:	b2db      	uxtb	r3, r3
 8000738:	747b      	strb	r3, [r7, #17]

		//ADCデータ確認
		PowerResult result;
		result.i_bat = ADC_buff[0]>>4;
 800073a:	4b62      	ldr	r3, [pc, #392]	@ (80008c4 <main+0x270>)
 800073c:	881b      	ldrh	r3, [r3, #0]
 800073e:	091b      	lsrs	r3, r3, #4
 8000740:	b29b      	uxth	r3, r3
 8000742:	b2db      	uxtb	r3, r3
 8000744:	73fb      	strb	r3, [r7, #15]
		result.v_bat = ADC_buff[1]>>4;
 8000746:	4b5f      	ldr	r3, [pc, #380]	@ (80008c4 <main+0x270>)
 8000748:	885b      	ldrh	r3, [r3, #2]
 800074a:	091b      	lsrs	r3, r3, #4
 800074c:	b29b      	uxth	r3, r3
 800074e:	b2db      	uxtb	r3, r3
 8000750:	73bb      	strb	r3, [r7, #14]
		result.emergency = error.emergency;
 8000752:	7c7b      	ldrb	r3, [r7, #17]
 8000754:	733b      	strb	r3, [r7, #12]
		result.motor_output = (motor_delay_cnt > 10);
 8000756:	697b      	ldr	r3, [r7, #20]
 8000758:	2b0a      	cmp	r3, #10
 800075a:	bf8c      	ite	hi
 800075c:	2301      	movhi	r3, #1
 800075e:	2300      	movls	r3, #0
 8000760:	b2db      	uxtb	r3, r3
 8000762:	737b      	strb	r3, [r7, #13]

		//CAN送信
		setCanData(&result);
 8000764:	f107 030c 	add.w	r3, r7, #12
 8000768:	4618      	mov	r0, r3
 800076a:	f7ff fe3f 	bl	80003ec <setCanData>

		switch(state){
 800076e:	7ffb      	ldrb	r3, [r7, #31]
 8000770:	2b02      	cmp	r3, #2
 8000772:	d007      	beq.n	8000784 <main+0x130>
 8000774:	2b02      	cmp	r3, #2
 8000776:	f300 8086 	bgt.w	8000886 <main+0x232>
 800077a:	2b00      	cmp	r3, #0
 800077c:	d01c      	beq.n	80007b8 <main+0x164>
 800077e:	2b01      	cmp	r3, #1
 8000780:	d034      	beq.n	80007ec <main+0x198>
 8000782:	e080      	b.n	8000886 <main+0x232>
		case state_shutdown:
			static bool prev_emerg_sw = false;
			HAL_GPIO_WritePin(relay_GPIO_Port, relay_Pin, false);
 8000784:	2200      	movs	r2, #0
 8000786:	2140      	movs	r1, #64	@ 0x40
 8000788:	484c      	ldr	r0, [pc, #304]	@ (80008bc <main+0x268>)
 800078a:	f003 f893 	bl	80038b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(jetson_power_GPIO_Port, jetson_power_Pin, false);
 800078e:	2200      	movs	r2, #0
 8000790:	2110      	movs	r1, #16
 8000792:	484a      	ldr	r0, [pc, #296]	@ (80008bc <main+0x268>)
 8000794:	f003 f88e 	bl	80038b4 <HAL_GPIO_WritePin>
			if(prev_emerg_sw == true && error.emergency == false){
 8000798:	4b50      	ldr	r3, [pc, #320]	@ (80008dc <main+0x288>)
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d007      	beq.n	80007b0 <main+0x15c>
 80007a0:	7c7b      	ldrb	r3, [r7, #17]
 80007a2:	f083 0301 	eor.w	r3, r3, #1
 80007a6:	b2db      	uxtb	r3, r3
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <main+0x15c>
				state = state_wait;
 80007ac:	2300      	movs	r3, #0
 80007ae:	77fb      	strb	r3, [r7, #31]
			}
			prev_emerg_sw = error.emergency;
 80007b0:	7c7a      	ldrb	r2, [r7, #17]
 80007b2:	4b4a      	ldr	r3, [pc, #296]	@ (80008dc <main+0x288>)
 80007b4:	701a      	strb	r2, [r3, #0]
			break;
 80007b6:	e066      	b.n	8000886 <main+0x232>
		case state_wait:
			HAL_GPIO_WritePin(relay_GPIO_Port, relay_Pin, false);
 80007b8:	2200      	movs	r2, #0
 80007ba:	2140      	movs	r1, #64	@ 0x40
 80007bc:	483f      	ldr	r0, [pc, #252]	@ (80008bc <main+0x268>)
 80007be:	f003 f879 	bl	80038b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(jetson_power_GPIO_Port, jetson_power_Pin, true);
 80007c2:	2201      	movs	r2, #1
 80007c4:	2110      	movs	r1, #16
 80007c6:	483d      	ldr	r0, [pc, #244]	@ (80008bc <main+0x268>)
 80007c8:	f003 f874 	bl	80038b4 <HAL_GPIO_WritePin>
			if(isCanUpdated()){
 80007cc:	f7ff fe1c 	bl	8000408 <isCanUpdated>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d003      	beq.n	80007de <main+0x18a>
				can_timeout_cnt = 0;
 80007d6:	2300      	movs	r3, #0
 80007d8:	61bb      	str	r3, [r7, #24]
				state = state_active;
 80007da:	2301      	movs	r3, #1
 80007dc:	77fb      	strb	r3, [r7, #31]
			}
			printf("can reinit\r\n");
 80007de:	4840      	ldr	r0, [pc, #256]	@ (80008e0 <main+0x28c>)
 80007e0:	f005 fb20 	bl	8005e24 <puts>
			canInit(&hcan);
 80007e4:	4839      	ldr	r0, [pc, #228]	@ (80008cc <main+0x278>)
 80007e6:	f7ff fda5 	bl	8000334 <canInit>
			break;
 80007ea:	e04c      	b.n	8000886 <main+0x232>
		case state_active:
			if(error.battery==true){
 80007ec:	7c3b      	ldrb	r3, [r7, #16]
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <main+0x1a2>
				wait_flag = true;
 80007f2:	2301      	movs	r3, #1
 80007f4:	74fb      	strb	r3, [r7, #19]
			}
			//CANデータ確認
			CanCommand command;
			if(isCanUpdated()==false) can_timeout_cnt++;
 80007f6:	f7ff fe07 	bl	8000408 <isCanUpdated>
 80007fa:	4603      	mov	r3, r0
 80007fc:	f083 0301 	eor.w	r3, r3, #1
 8000800:	b2db      	uxtb	r3, r3
 8000802:	2b00      	cmp	r3, #0
 8000804:	d003      	beq.n	800080e <main+0x1ba>
 8000806:	69bb      	ldr	r3, [r7, #24]
 8000808:	3301      	adds	r3, #1
 800080a:	61bb      	str	r3, [r7, #24]
 800080c:	e001      	b.n	8000812 <main+0x1be>
			else can_timeout_cnt=0;
 800080e:	2300      	movs	r3, #0
 8000810:	61bb      	str	r3, [r7, #24]
			getCanData(&command);
 8000812:	1d3b      	adds	r3, r7, #4
 8000814:	4618      	mov	r0, r3
 8000816:	f7ff fdd5 	bl	80003c4 <getCanData>
			// state set
			if (command.power_off == true && command.motor_output == false) {
 800081a:	797b      	ldrb	r3, [r7, #5]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d008      	beq.n	8000832 <main+0x1de>
 8000820:	793b      	ldrb	r3, [r7, #4]
 8000822:	f083 0301 	eor.w	r3, r3, #1
 8000826:	b2db      	uxtb	r3, r3
 8000828:	2b00      	cmp	r3, #0
 800082a:	d002      	beq.n	8000832 <main+0x1de>
				state = state_shutdown;
 800082c:	2302      	movs	r3, #2
 800082e:	77fb      	strb	r3, [r7, #31]
 8000830:	e004      	b.n	800083c <main+0x1e8>
			} else if (can_timeout_cnt > 5) {
 8000832:	69bb      	ldr	r3, [r7, #24]
 8000834:	2b05      	cmp	r3, #5
 8000836:	d901      	bls.n	800083c <main+0x1e8>
				state = state_wait;
 8000838:	2300      	movs	r3, #0
 800083a:	77fb      	strb	r3, [r7, #31]
			}

			HAL_GPIO_WritePin(jetson_power_GPIO_Port, jetson_power_Pin, true);
 800083c:	2201      	movs	r2, #1
 800083e:	2110      	movs	r1, #16
 8000840:	481e      	ldr	r0, [pc, #120]	@ (80008bc <main+0x268>)
 8000842:	f003 f837 	bl	80038b4 <HAL_GPIO_WritePin>
			if (isNoError(error) == true && command.motor_output == true
 8000846:	6938      	ldr	r0, [r7, #16]
 8000848:	f7ff fe44 	bl	80004d4 <isNoError>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d011      	beq.n	8000876 <main+0x222>
 8000852:	793b      	ldrb	r3, [r7, #4]
 8000854:	2b00      	cmp	r3, #0
 8000856:	d00e      	beq.n	8000876 <main+0x222>
					&& wait_flag == false) {
 8000858:	7cfb      	ldrb	r3, [r7, #19]
 800085a:	f083 0301 	eor.w	r3, r3, #1
 800085e:	b2db      	uxtb	r3, r3
 8000860:	2b00      	cmp	r3, #0
 8000862:	d008      	beq.n	8000876 <main+0x222>
				//printf("motor_on : \r\n");
				HAL_GPIO_WritePin(relay_GPIO_Port, relay_Pin, true);
 8000864:	2201      	movs	r2, #1
 8000866:	2140      	movs	r1, #64	@ 0x40
 8000868:	4814      	ldr	r0, [pc, #80]	@ (80008bc <main+0x268>)
 800086a:	f003 f823 	bl	80038b4 <HAL_GPIO_WritePin>
				motor_delay_cnt++;
 800086e:	697b      	ldr	r3, [r7, #20]
 8000870:	3301      	adds	r3, #1
 8000872:	617b      	str	r3, [r7, #20]
			} else {
				//printf("motor_off : \r\n");
				HAL_GPIO_WritePin(relay_GPIO_Port, relay_Pin, false);
				motor_delay_cnt = 0;
			}
			break;
 8000874:	e006      	b.n	8000884 <main+0x230>
				HAL_GPIO_WritePin(relay_GPIO_Port, relay_Pin, false);
 8000876:	2200      	movs	r2, #0
 8000878:	2140      	movs	r1, #64	@ 0x40
 800087a:	4810      	ldr	r0, [pc, #64]	@ (80008bc <main+0x268>)
 800087c:	f003 f81a 	bl	80038b4 <HAL_GPIO_WritePin>
				motor_delay_cnt = 0;
 8000880:	2300      	movs	r3, #0
 8000882:	617b      	str	r3, [r7, #20]
			break;
 8000884:	bf00      	nop
		}



		printf("%d,%d,%d\r\n",state,ADC_buff[0],ADC_buff[1]);
 8000886:	7ff9      	ldrb	r1, [r7, #31]
 8000888:	4b0e      	ldr	r3, [pc, #56]	@ (80008c4 <main+0x270>)
 800088a:	881b      	ldrh	r3, [r3, #0]
 800088c:	461a      	mov	r2, r3
 800088e:	4b0d      	ldr	r3, [pc, #52]	@ (80008c4 <main+0x270>)
 8000890:	885b      	ldrh	r3, [r3, #2]
 8000892:	4814      	ldr	r0, [pc, #80]	@ (80008e4 <main+0x290>)
 8000894:	f005 fa5e 	bl	8005d54 <iprintf>

		if(wait_flag==true && errorReleaseRequest(error.emergency))wait_flag = false;
 8000898:	7cfb      	ldrb	r3, [r7, #19]
 800089a:	2b00      	cmp	r3, #0
 800089c:	d008      	beq.n	80008b0 <main+0x25c>
 800089e:	7c7b      	ldrb	r3, [r7, #17]
 80008a0:	4618      	mov	r0, r3
 80008a2:	f7ff fe33 	bl	800050c <errorReleaseRequest>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <main+0x25c>
 80008ac:	2300      	movs	r3, #0
 80008ae:	74fb      	strb	r3, [r7, #19]
    g_main_loop_flag = false;
 80008b0:	4b09      	ldr	r3, [pc, #36]	@ (80008d8 <main+0x284>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	701a      	strb	r2, [r3, #0]
  {
 80008b6:	e722      	b.n	80006fe <main+0xaa>
 80008b8:	20000018 	.word	0x20000018
 80008bc:	48000400 	.word	0x48000400
 80008c0:	200000bc 	.word	0x200000bc
 80008c4:	200002a4 	.word	0x200002a4
 80008c8:	2000010c 	.word	0x2000010c
 80008cc:	20000150 	.word	0x20000150
 80008d0:	20000178 	.word	0x20000178
 80008d4:	200001c4 	.word	0x200001c4
 80008d8:	20000298 	.word	0x20000298
 80008dc:	200002a8 	.word	0x200002a8
 80008e0:	08006cd0 	.word	0x08006cd0
 80008e4:	08006cdc 	.word	0x08006cdc

080008e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b090      	sub	sp, #64	@ 0x40
 80008ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ee:	f107 0318 	add.w	r3, r7, #24
 80008f2:	2228      	movs	r2, #40	@ 0x28
 80008f4:	2100      	movs	r1, #0
 80008f6:	4618      	mov	r0, r3
 80008f8:	f005 fc30 	bl	800615c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008fc:	1d3b      	adds	r3, r7, #4
 80008fe:	2200      	movs	r2, #0
 8000900:	601a      	str	r2, [r3, #0]
 8000902:	605a      	str	r2, [r3, #4]
 8000904:	609a      	str	r2, [r3, #8]
 8000906:	60da      	str	r2, [r3, #12]
 8000908:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800090a:	2302      	movs	r3, #2
 800090c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800090e:	2301      	movs	r3, #1
 8000910:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000912:	2310      	movs	r3, #16
 8000914:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000916:	2300      	movs	r3, #0
 8000918:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800091a:	f107 0318 	add.w	r3, r7, #24
 800091e:	4618      	mov	r0, r3
 8000920:	f002 ffe0 	bl	80038e4 <HAL_RCC_OscConfig>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800092a:	f000 fa07 	bl	8000d3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800092e:	230f      	movs	r3, #15
 8000930:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000932:	2300      	movs	r3, #0
 8000934:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000936:	2300      	movs	r3, #0
 8000938:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800093a:	2300      	movs	r3, #0
 800093c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800093e:	2300      	movs	r3, #0
 8000940:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000942:	1d3b      	adds	r3, r7, #4
 8000944:	2100      	movs	r1, #0
 8000946:	4618      	mov	r0, r3
 8000948:	f004 f80a 	bl	8004960 <HAL_RCC_ClockConfig>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000952:	f000 f9f3 	bl	8000d3c <Error_Handler>
  }
}
 8000956:	bf00      	nop
 8000958:	3740      	adds	r7, #64	@ 0x40
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
	...

08000960 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b08a      	sub	sp, #40	@ 0x28
 8000964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000966:	f107 031c 	add.w	r3, r7, #28
 800096a:	2200      	movs	r2, #0
 800096c:	601a      	str	r2, [r3, #0]
 800096e:	605a      	str	r2, [r3, #4]
 8000970:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000972:	1d3b      	adds	r3, r7, #4
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
 8000978:	605a      	str	r2, [r3, #4]
 800097a:	609a      	str	r2, [r3, #8]
 800097c:	60da      	str	r2, [r3, #12]
 800097e:	611a      	str	r2, [r3, #16]
 8000980:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000982:	4b35      	ldr	r3, [pc, #212]	@ (8000a58 <MX_ADC1_Init+0xf8>)
 8000984:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000988:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800098a:	4b33      	ldr	r3, [pc, #204]	@ (8000a58 <MX_ADC1_Init+0xf8>)
 800098c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000990:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000992:	4b31      	ldr	r3, [pc, #196]	@ (8000a58 <MX_ADC1_Init+0xf8>)
 8000994:	2200      	movs	r2, #0
 8000996:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000998:	4b2f      	ldr	r3, [pc, #188]	@ (8000a58 <MX_ADC1_Init+0xf8>)
 800099a:	2201      	movs	r2, #1
 800099c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800099e:	4b2e      	ldr	r3, [pc, #184]	@ (8000a58 <MX_ADC1_Init+0xf8>)
 80009a0:	2201      	movs	r2, #1
 80009a2:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009a4:	4b2c      	ldr	r3, [pc, #176]	@ (8000a58 <MX_ADC1_Init+0xf8>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009ac:	4b2a      	ldr	r3, [pc, #168]	@ (8000a58 <MX_ADC1_Init+0xf8>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009b2:	4b29      	ldr	r3, [pc, #164]	@ (8000a58 <MX_ADC1_Init+0xf8>)
 80009b4:	2201      	movs	r2, #1
 80009b6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009b8:	4b27      	ldr	r3, [pc, #156]	@ (8000a58 <MX_ADC1_Init+0xf8>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80009be:	4b26      	ldr	r3, [pc, #152]	@ (8000a58 <MX_ADC1_Init+0xf8>)
 80009c0:	2202      	movs	r2, #2
 80009c2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80009c4:	4b24      	ldr	r3, [pc, #144]	@ (8000a58 <MX_ADC1_Init+0xf8>)
 80009c6:	2201      	movs	r2, #1
 80009c8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009cc:	4b22      	ldr	r3, [pc, #136]	@ (8000a58 <MX_ADC1_Init+0xf8>)
 80009ce:	2204      	movs	r2, #4
 80009d0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80009d2:	4b21      	ldr	r3, [pc, #132]	@ (8000a58 <MX_ADC1_Init+0xf8>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80009d8:	4b1f      	ldr	r3, [pc, #124]	@ (8000a58 <MX_ADC1_Init+0xf8>)
 80009da:	2200      	movs	r2, #0
 80009dc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009de:	481e      	ldr	r0, [pc, #120]	@ (8000a58 <MX_ADC1_Init+0xf8>)
 80009e0:	f000 fcd6 	bl	8001390 <HAL_ADC_Init>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80009ea:	f000 f9a7 	bl	8000d3c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80009ee:	2300      	movs	r3, #0
 80009f0:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80009f2:	f107 031c 	add.w	r3, r7, #28
 80009f6:	4619      	mov	r1, r3
 80009f8:	4817      	ldr	r0, [pc, #92]	@ (8000a58 <MX_ADC1_Init+0xf8>)
 80009fa:	f001 fa65 	bl	8001ec8 <HAL_ADCEx_MultiModeConfigChannel>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8000a04:	f000 f99a 	bl	8000d3c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000a08:	230b      	movs	r3, #11
 8000a0a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a10:	2300      	movs	r3, #0
 8000a12:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 8000a14:	2307      	movs	r3, #7
 8000a16:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a20:	1d3b      	adds	r3, r7, #4
 8000a22:	4619      	mov	r1, r3
 8000a24:	480c      	ldr	r0, [pc, #48]	@ (8000a58 <MX_ADC1_Init+0xf8>)
 8000a26:	f000 ff91 	bl	800194c <HAL_ADC_ConfigChannel>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 8000a30:	f000 f984 	bl	8000d3c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000a34:	230c      	movs	r3, #12
 8000a36:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a3c:	1d3b      	adds	r3, r7, #4
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4805      	ldr	r0, [pc, #20]	@ (8000a58 <MX_ADC1_Init+0xf8>)
 8000a42:	f000 ff83 	bl	800194c <HAL_ADC_ConfigChannel>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <MX_ADC1_Init+0xf0>
  {
    Error_Handler();
 8000a4c:	f000 f976 	bl	8000d3c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a50:	bf00      	nop
 8000a52:	3728      	adds	r7, #40	@ 0x28
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	200000bc 	.word	0x200000bc

08000a5c <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000a60:	4b17      	ldr	r3, [pc, #92]	@ (8000ac0 <MX_CAN_Init+0x64>)
 8000a62:	4a18      	ldr	r2, [pc, #96]	@ (8000ac4 <MX_CAN_Init+0x68>)
 8000a64:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 3;
 8000a66:	4b16      	ldr	r3, [pc, #88]	@ (8000ac0 <MX_CAN_Init+0x64>)
 8000a68:	2203      	movs	r2, #3
 8000a6a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000a6c:	4b14      	ldr	r3, [pc, #80]	@ (8000ac0 <MX_CAN_Init+0x64>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000a72:	4b13      	ldr	r3, [pc, #76]	@ (8000ac0 <MX_CAN_Init+0x64>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 8000a78:	4b11      	ldr	r3, [pc, #68]	@ (8000ac0 <MX_CAN_Init+0x64>)
 8000a7a:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000a7e:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000a80:	4b0f      	ldr	r3, [pc, #60]	@ (8000ac0 <MX_CAN_Init+0x64>)
 8000a82:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 8000a86:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000a88:	4b0d      	ldr	r3, [pc, #52]	@ (8000ac0 <MX_CAN_Init+0x64>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000a8e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ac0 <MX_CAN_Init+0x64>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000a94:	4b0a      	ldr	r3, [pc, #40]	@ (8000ac0 <MX_CAN_Init+0x64>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000a9a:	4b09      	ldr	r3, [pc, #36]	@ (8000ac0 <MX_CAN_Init+0x64>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000aa0:	4b07      	ldr	r3, [pc, #28]	@ (8000ac0 <MX_CAN_Init+0x64>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000aa6:	4b06      	ldr	r3, [pc, #24]	@ (8000ac0 <MX_CAN_Init+0x64>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000aac:	4804      	ldr	r0, [pc, #16]	@ (8000ac0 <MX_CAN_Init+0x64>)
 8000aae:	f001 fc01 	bl	80022b4 <HAL_CAN_Init>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000ab8:	f000 f940 	bl	8000d3c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000abc:	bf00      	nop
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	20000150 	.word	0x20000150
 8000ac4:	40006400 	.word	0x40006400

08000ac8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b084      	sub	sp, #16
 8000acc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ace:	1d3b      	adds	r3, r7, #4
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
 8000ad4:	605a      	str	r2, [r3, #4]
 8000ad6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000ad8:	4b14      	ldr	r3, [pc, #80]	@ (8000b2c <MX_TIM6_Init+0x64>)
 8000ada:	4a15      	ldr	r2, [pc, #84]	@ (8000b30 <MX_TIM6_Init+0x68>)
 8000adc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 19;
 8000ade:	4b13      	ldr	r3, [pc, #76]	@ (8000b2c <MX_TIM6_Init+0x64>)
 8000ae0:	2213      	movs	r2, #19
 8000ae2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ae4:	4b11      	ldr	r3, [pc, #68]	@ (8000b2c <MX_TIM6_Init+0x64>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 7999;
 8000aea:	4b10      	ldr	r3, [pc, #64]	@ (8000b2c <MX_TIM6_Init+0x64>)
 8000aec:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000af0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000af2:	4b0e      	ldr	r3, [pc, #56]	@ (8000b2c <MX_TIM6_Init+0x64>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000af8:	480c      	ldr	r0, [pc, #48]	@ (8000b2c <MX_TIM6_Init+0x64>)
 8000afa:	f004 f951 	bl	8004da0 <HAL_TIM_Base_Init>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000b04:	f000 f91a 	bl	8000d3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000b10:	1d3b      	adds	r3, r7, #4
 8000b12:	4619      	mov	r1, r3
 8000b14:	4805      	ldr	r0, [pc, #20]	@ (8000b2c <MX_TIM6_Init+0x64>)
 8000b16:	f004 fba5 	bl	8005264 <HAL_TIMEx_MasterConfigSynchronization>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000b20:	f000 f90c 	bl	8000d3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000b24:	bf00      	nop
 8000b26:	3710      	adds	r7, #16
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	20000178 	.word	0x20000178
 8000b30:	40001000 	.word	0x40001000

08000b34 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b084      	sub	sp, #16
 8000b38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b3a:	1d3b      	adds	r3, r7, #4
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	601a      	str	r2, [r3, #0]
 8000b40:	605a      	str	r2, [r3, #4]
 8000b42:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000b44:	4b14      	ldr	r3, [pc, #80]	@ (8000b98 <MX_TIM7_Init+0x64>)
 8000b46:	4a15      	ldr	r2, [pc, #84]	@ (8000b9c <MX_TIM7_Init+0x68>)
 8000b48:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 19;
 8000b4a:	4b13      	ldr	r3, [pc, #76]	@ (8000b98 <MX_TIM7_Init+0x64>)
 8000b4c:	2213      	movs	r2, #19
 8000b4e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b50:	4b11      	ldr	r3, [pc, #68]	@ (8000b98 <MX_TIM7_Init+0x64>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 7999;
 8000b56:	4b10      	ldr	r3, [pc, #64]	@ (8000b98 <MX_TIM7_Init+0x64>)
 8000b58:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000b5c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b5e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b98 <MX_TIM7_Init+0x64>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000b64:	480c      	ldr	r0, [pc, #48]	@ (8000b98 <MX_TIM7_Init+0x64>)
 8000b66:	f004 f91b 	bl	8004da0 <HAL_TIM_Base_Init>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000b70:	f000 f8e4 	bl	8000d3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b74:	2300      	movs	r3, #0
 8000b76:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000b7c:	1d3b      	adds	r3, r7, #4
 8000b7e:	4619      	mov	r1, r3
 8000b80:	4805      	ldr	r0, [pc, #20]	@ (8000b98 <MX_TIM7_Init+0x64>)
 8000b82:	f004 fb6f 	bl	8005264 <HAL_TIMEx_MasterConfigSynchronization>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000b8c:	f000 f8d6 	bl	8000d3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000b90:	bf00      	nop
 8000b92:	3710      	adds	r7, #16
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	200001c4 	.word	0x200001c4
 8000b9c:	40001400 	.word	0x40001400

08000ba0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ba4:	4b14      	ldr	r3, [pc, #80]	@ (8000bf8 <MX_USART2_UART_Init+0x58>)
 8000ba6:	4a15      	ldr	r2, [pc, #84]	@ (8000bfc <MX_USART2_UART_Init+0x5c>)
 8000ba8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000baa:	4b13      	ldr	r3, [pc, #76]	@ (8000bf8 <MX_USART2_UART_Init+0x58>)
 8000bac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000bb0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bb2:	4b11      	ldr	r3, [pc, #68]	@ (8000bf8 <MX_USART2_UART_Init+0x58>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bb8:	4b0f      	ldr	r3, [pc, #60]	@ (8000bf8 <MX_USART2_UART_Init+0x58>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bbe:	4b0e      	ldr	r3, [pc, #56]	@ (8000bf8 <MX_USART2_UART_Init+0x58>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bc4:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf8 <MX_USART2_UART_Init+0x58>)
 8000bc6:	220c      	movs	r2, #12
 8000bc8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bca:	4b0b      	ldr	r3, [pc, #44]	@ (8000bf8 <MX_USART2_UART_Init+0x58>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bd0:	4b09      	ldr	r3, [pc, #36]	@ (8000bf8 <MX_USART2_UART_Init+0x58>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bd6:	4b08      	ldr	r3, [pc, #32]	@ (8000bf8 <MX_USART2_UART_Init+0x58>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bdc:	4b06      	ldr	r3, [pc, #24]	@ (8000bf8 <MX_USART2_UART_Init+0x58>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000be2:	4805      	ldr	r0, [pc, #20]	@ (8000bf8 <MX_USART2_UART_Init+0x58>)
 8000be4:	f004 fbca 	bl	800537c <HAL_UART_Init>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000bee:	f000 f8a5 	bl	8000d3c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bf2:	bf00      	nop
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	20000210 	.word	0x20000210
 8000bfc:	40004400 	.word	0x40004400

08000c00 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c06:	4b0c      	ldr	r3, [pc, #48]	@ (8000c38 <MX_DMA_Init+0x38>)
 8000c08:	695b      	ldr	r3, [r3, #20]
 8000c0a:	4a0b      	ldr	r2, [pc, #44]	@ (8000c38 <MX_DMA_Init+0x38>)
 8000c0c:	f043 0301 	orr.w	r3, r3, #1
 8000c10:	6153      	str	r3, [r2, #20]
 8000c12:	4b09      	ldr	r3, [pc, #36]	@ (8000c38 <MX_DMA_Init+0x38>)
 8000c14:	695b      	ldr	r3, [r3, #20]
 8000c16:	f003 0301 	and.w	r3, r3, #1
 8000c1a:	607b      	str	r3, [r7, #4]
 8000c1c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	2100      	movs	r1, #0
 8000c22:	200b      	movs	r0, #11
 8000c24:	f002 faef 	bl	8003206 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000c28:	200b      	movs	r0, #11
 8000c2a:	f002 fb08 	bl	800323e <HAL_NVIC_EnableIRQ>

}
 8000c2e:	bf00      	nop
 8000c30:	3708      	adds	r7, #8
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	40021000 	.word	0x40021000

08000c3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b088      	sub	sp, #32
 8000c40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c42:	f107 030c 	add.w	r3, r7, #12
 8000c46:	2200      	movs	r2, #0
 8000c48:	601a      	str	r2, [r3, #0]
 8000c4a:	605a      	str	r2, [r3, #4]
 8000c4c:	609a      	str	r2, [r3, #8]
 8000c4e:	60da      	str	r2, [r3, #12]
 8000c50:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c52:	4b2e      	ldr	r3, [pc, #184]	@ (8000d0c <MX_GPIO_Init+0xd0>)
 8000c54:	695b      	ldr	r3, [r3, #20]
 8000c56:	4a2d      	ldr	r2, [pc, #180]	@ (8000d0c <MX_GPIO_Init+0xd0>)
 8000c58:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000c5c:	6153      	str	r3, [r2, #20]
 8000c5e:	4b2b      	ldr	r3, [pc, #172]	@ (8000d0c <MX_GPIO_Init+0xd0>)
 8000c60:	695b      	ldr	r3, [r3, #20]
 8000c62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000c66:	60bb      	str	r3, [r7, #8]
 8000c68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c6a:	4b28      	ldr	r3, [pc, #160]	@ (8000d0c <MX_GPIO_Init+0xd0>)
 8000c6c:	695b      	ldr	r3, [r3, #20]
 8000c6e:	4a27      	ldr	r2, [pc, #156]	@ (8000d0c <MX_GPIO_Init+0xd0>)
 8000c70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c74:	6153      	str	r3, [r2, #20]
 8000c76:	4b25      	ldr	r3, [pc, #148]	@ (8000d0c <MX_GPIO_Init+0xd0>)
 8000c78:	695b      	ldr	r3, [r3, #20]
 8000c7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c7e:	607b      	str	r3, [r7, #4]
 8000c80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c82:	4b22      	ldr	r3, [pc, #136]	@ (8000d0c <MX_GPIO_Init+0xd0>)
 8000c84:	695b      	ldr	r3, [r3, #20]
 8000c86:	4a21      	ldr	r2, [pc, #132]	@ (8000d0c <MX_GPIO_Init+0xd0>)
 8000c88:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000c8c:	6153      	str	r3, [r2, #20]
 8000c8e:	4b1f      	ldr	r3, [pc, #124]	@ (8000d0c <MX_GPIO_Init+0xd0>)
 8000c90:	695b      	ldr	r3, [r3, #20]
 8000c92:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000c96:	603b      	str	r3, [r7, #0]
 8000c98:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, state_LED_Pin|emergency_LED_Pin, GPIO_PIN_RESET);
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	21c0      	movs	r1, #192	@ 0xc0
 8000c9e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ca2:	f002 fe07 	bl	80038b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, jetson_power_Pin|relay_Pin, GPIO_PIN_RESET);
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	2150      	movs	r1, #80	@ 0x50
 8000caa:	4819      	ldr	r0, [pc, #100]	@ (8000d10 <MX_GPIO_Init+0xd4>)
 8000cac:	f002 fe02 	bl	80038b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : emergency_switch_Pin */
  GPIO_InitStruct.Pin = emergency_switch_Pin;
 8000cb0:	2320      	movs	r3, #32
 8000cb2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(emergency_switch_GPIO_Port, &GPIO_InitStruct);
 8000cbc:	f107 030c 	add.w	r3, r7, #12
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cc6:	f002 fc6b 	bl	80035a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : state_LED_Pin emergency_LED_Pin */
  GPIO_InitStruct.Pin = state_LED_Pin|emergency_LED_Pin;
 8000cca:	23c0      	movs	r3, #192	@ 0xc0
 8000ccc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cda:	f107 030c 	add.w	r3, r7, #12
 8000cde:	4619      	mov	r1, r3
 8000ce0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ce4:	f002 fc5c 	bl	80035a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : jetson_power_Pin relay_Pin */
  GPIO_InitStruct.Pin = jetson_power_Pin|relay_Pin;
 8000ce8:	2350      	movs	r3, #80	@ 0x50
 8000cea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cec:	2301      	movs	r3, #1
 8000cee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cf8:	f107 030c 	add.w	r3, r7, #12
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	4804      	ldr	r0, [pc, #16]	@ (8000d10 <MX_GPIO_Init+0xd4>)
 8000d00:	f002 fc4e 	bl	80035a0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d04:	bf00      	nop
 8000d06:	3720      	adds	r7, #32
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	40021000 	.word	0x40021000
 8000d10:	48000400 	.word	0x48000400

08000d14 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b084      	sub	sp, #16
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	60f8      	str	r0, [r7, #12]
 8000d1c:	60b9      	str	r1, [r7, #8]
 8000d1e:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2,(uint8_t *)ptr,len,10);
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	b29a      	uxth	r2, r3
 8000d24:	230a      	movs	r3, #10
 8000d26:	68b9      	ldr	r1, [r7, #8]
 8000d28:	4803      	ldr	r0, [pc, #12]	@ (8000d38 <_write+0x24>)
 8000d2a:	f004 fb75 	bl	8005418 <HAL_UART_Transmit>
  return len;
 8000d2e:	687b      	ldr	r3, [r7, #4]
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	3710      	adds	r7, #16
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	20000210 	.word	0x20000210

08000d3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d40:	b672      	cpsid	i
}
 8000d42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d44:	bf00      	nop
 8000d46:	e7fd      	b.n	8000d44 <Error_Handler+0x8>

08000d48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d4e:	4b0f      	ldr	r3, [pc, #60]	@ (8000d8c <HAL_MspInit+0x44>)
 8000d50:	699b      	ldr	r3, [r3, #24]
 8000d52:	4a0e      	ldr	r2, [pc, #56]	@ (8000d8c <HAL_MspInit+0x44>)
 8000d54:	f043 0301 	orr.w	r3, r3, #1
 8000d58:	6193      	str	r3, [r2, #24]
 8000d5a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d8c <HAL_MspInit+0x44>)
 8000d5c:	699b      	ldr	r3, [r3, #24]
 8000d5e:	f003 0301 	and.w	r3, r3, #1
 8000d62:	607b      	str	r3, [r7, #4]
 8000d64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d66:	4b09      	ldr	r3, [pc, #36]	@ (8000d8c <HAL_MspInit+0x44>)
 8000d68:	69db      	ldr	r3, [r3, #28]
 8000d6a:	4a08      	ldr	r2, [pc, #32]	@ (8000d8c <HAL_MspInit+0x44>)
 8000d6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d70:	61d3      	str	r3, [r2, #28]
 8000d72:	4b06      	ldr	r3, [pc, #24]	@ (8000d8c <HAL_MspInit+0x44>)
 8000d74:	69db      	ldr	r3, [r3, #28]
 8000d76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d7a:	603b      	str	r3, [r7, #0]
 8000d7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d7e:	bf00      	nop
 8000d80:	370c      	adds	r7, #12
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	40021000 	.word	0x40021000

08000d90 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b08a      	sub	sp, #40	@ 0x28
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d98:	f107 0314 	add.w	r3, r7, #20
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	605a      	str	r2, [r3, #4]
 8000da2:	609a      	str	r2, [r3, #8]
 8000da4:	60da      	str	r2, [r3, #12]
 8000da6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000db0:	d14b      	bne.n	8000e4a <HAL_ADC_MspInit+0xba>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000db2:	4b28      	ldr	r3, [pc, #160]	@ (8000e54 <HAL_ADC_MspInit+0xc4>)
 8000db4:	695b      	ldr	r3, [r3, #20]
 8000db6:	4a27      	ldr	r2, [pc, #156]	@ (8000e54 <HAL_ADC_MspInit+0xc4>)
 8000db8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000dbc:	6153      	str	r3, [r2, #20]
 8000dbe:	4b25      	ldr	r3, [pc, #148]	@ (8000e54 <HAL_ADC_MspInit+0xc4>)
 8000dc0:	695b      	ldr	r3, [r3, #20]
 8000dc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dc6:	613b      	str	r3, [r7, #16]
 8000dc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dca:	4b22      	ldr	r3, [pc, #136]	@ (8000e54 <HAL_ADC_MspInit+0xc4>)
 8000dcc:	695b      	ldr	r3, [r3, #20]
 8000dce:	4a21      	ldr	r2, [pc, #132]	@ (8000e54 <HAL_ADC_MspInit+0xc4>)
 8000dd0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000dd4:	6153      	str	r3, [r2, #20]
 8000dd6:	4b1f      	ldr	r3, [pc, #124]	@ (8000e54 <HAL_ADC_MspInit+0xc4>)
 8000dd8:	695b      	ldr	r3, [r3, #20]
 8000dda:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000dde:	60fb      	str	r3, [r7, #12]
 8000de0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN11
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = i_bat_Pin|v_bat_Pin;
 8000de2:	2303      	movs	r3, #3
 8000de4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000de6:	2303      	movs	r3, #3
 8000de8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dea:	2300      	movs	r3, #0
 8000dec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dee:	f107 0314 	add.w	r3, r7, #20
 8000df2:	4619      	mov	r1, r3
 8000df4:	4818      	ldr	r0, [pc, #96]	@ (8000e58 <HAL_ADC_MspInit+0xc8>)
 8000df6:	f002 fbd3 	bl	80035a0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000dfa:	4b18      	ldr	r3, [pc, #96]	@ (8000e5c <HAL_ADC_MspInit+0xcc>)
 8000dfc:	4a18      	ldr	r2, [pc, #96]	@ (8000e60 <HAL_ADC_MspInit+0xd0>)
 8000dfe:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e00:	4b16      	ldr	r3, [pc, #88]	@ (8000e5c <HAL_ADC_MspInit+0xcc>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e06:	4b15      	ldr	r3, [pc, #84]	@ (8000e5c <HAL_ADC_MspInit+0xcc>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000e0c:	4b13      	ldr	r3, [pc, #76]	@ (8000e5c <HAL_ADC_MspInit+0xcc>)
 8000e0e:	2280      	movs	r2, #128	@ 0x80
 8000e10:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e12:	4b12      	ldr	r3, [pc, #72]	@ (8000e5c <HAL_ADC_MspInit+0xcc>)
 8000e14:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000e18:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e1a:	4b10      	ldr	r3, [pc, #64]	@ (8000e5c <HAL_ADC_MspInit+0xcc>)
 8000e1c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e20:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000e22:	4b0e      	ldr	r3, [pc, #56]	@ (8000e5c <HAL_ADC_MspInit+0xcc>)
 8000e24:	2220      	movs	r2, #32
 8000e26:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000e28:	4b0c      	ldr	r3, [pc, #48]	@ (8000e5c <HAL_ADC_MspInit+0xcc>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000e2e:	480b      	ldr	r0, [pc, #44]	@ (8000e5c <HAL_ADC_MspInit+0xcc>)
 8000e30:	f002 fa1f 	bl	8003272 <HAL_DMA_Init>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <HAL_ADC_MspInit+0xae>
    {
      Error_Handler();
 8000e3a:	f7ff ff7f 	bl	8000d3c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4a06      	ldr	r2, [pc, #24]	@ (8000e5c <HAL_ADC_MspInit+0xcc>)
 8000e42:	639a      	str	r2, [r3, #56]	@ 0x38
 8000e44:	4a05      	ldr	r2, [pc, #20]	@ (8000e5c <HAL_ADC_MspInit+0xcc>)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000e4a:	bf00      	nop
 8000e4c:	3728      	adds	r7, #40	@ 0x28
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	40021000 	.word	0x40021000
 8000e58:	48000400 	.word	0x48000400
 8000e5c:	2000010c 	.word	0x2000010c
 8000e60:	40020008 	.word	0x40020008

08000e64 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b08a      	sub	sp, #40	@ 0x28
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e6c:	f107 0314 	add.w	r3, r7, #20
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	605a      	str	r2, [r3, #4]
 8000e76:	609a      	str	r2, [r3, #8]
 8000e78:	60da      	str	r2, [r3, #12]
 8000e7a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a1c      	ldr	r2, [pc, #112]	@ (8000ef4 <HAL_CAN_MspInit+0x90>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d131      	bne.n	8000eea <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000e86:	4b1c      	ldr	r3, [pc, #112]	@ (8000ef8 <HAL_CAN_MspInit+0x94>)
 8000e88:	69db      	ldr	r3, [r3, #28]
 8000e8a:	4a1b      	ldr	r2, [pc, #108]	@ (8000ef8 <HAL_CAN_MspInit+0x94>)
 8000e8c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000e90:	61d3      	str	r3, [r2, #28]
 8000e92:	4b19      	ldr	r3, [pc, #100]	@ (8000ef8 <HAL_CAN_MspInit+0x94>)
 8000e94:	69db      	ldr	r3, [r3, #28]
 8000e96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000e9a:	613b      	str	r3, [r7, #16]
 8000e9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e9e:	4b16      	ldr	r3, [pc, #88]	@ (8000ef8 <HAL_CAN_MspInit+0x94>)
 8000ea0:	695b      	ldr	r3, [r3, #20]
 8000ea2:	4a15      	ldr	r2, [pc, #84]	@ (8000ef8 <HAL_CAN_MspInit+0x94>)
 8000ea4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ea8:	6153      	str	r3, [r2, #20]
 8000eaa:	4b13      	ldr	r3, [pc, #76]	@ (8000ef8 <HAL_CAN_MspInit+0x94>)
 8000eac:	695b      	ldr	r3, [r3, #20]
 8000eae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000eb2:	60fb      	str	r3, [r7, #12]
 8000eb4:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000eb6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000eba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ec4:	2303      	movs	r3, #3
 8000ec6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8000ec8:	2309      	movs	r3, #9
 8000eca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ecc:	f107 0314 	add.w	r3, r7, #20
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ed6:	f002 fb63 	bl	80035a0 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CAN_RX0_IRQn, 0, 0);
 8000eda:	2200      	movs	r2, #0
 8000edc:	2100      	movs	r1, #0
 8000ede:	2014      	movs	r0, #20
 8000ee0:	f002 f991 	bl	8003206 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX0_IRQn);
 8000ee4:	2014      	movs	r0, #20
 8000ee6:	f002 f9aa 	bl	800323e <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN_MspInit 1 */

  }

}
 8000eea:	bf00      	nop
 8000eec:	3728      	adds	r7, #40	@ 0x28
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	40006400 	.word	0x40006400
 8000ef8:	40021000 	.word	0x40021000

08000efc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b084      	sub	sp, #16
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a1a      	ldr	r2, [pc, #104]	@ (8000f74 <HAL_TIM_Base_MspInit+0x78>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d114      	bne.n	8000f38 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000f0e:	4b1a      	ldr	r3, [pc, #104]	@ (8000f78 <HAL_TIM_Base_MspInit+0x7c>)
 8000f10:	69db      	ldr	r3, [r3, #28]
 8000f12:	4a19      	ldr	r2, [pc, #100]	@ (8000f78 <HAL_TIM_Base_MspInit+0x7c>)
 8000f14:	f043 0310 	orr.w	r3, r3, #16
 8000f18:	61d3      	str	r3, [r2, #28]
 8000f1a:	4b17      	ldr	r3, [pc, #92]	@ (8000f78 <HAL_TIM_Base_MspInit+0x7c>)
 8000f1c:	69db      	ldr	r3, [r3, #28]
 8000f1e:	f003 0310 	and.w	r3, r3, #16
 8000f22:	60fb      	str	r3, [r7, #12]
 8000f24:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, 0, 0);
 8000f26:	2200      	movs	r2, #0
 8000f28:	2100      	movs	r1, #0
 8000f2a:	2036      	movs	r0, #54	@ 0x36
 8000f2c:	f002 f96b 	bl	8003206 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC1_IRQn);
 8000f30:	2036      	movs	r0, #54	@ 0x36
 8000f32:	f002 f984 	bl	800323e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8000f36:	e018      	b.n	8000f6a <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM7)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a0f      	ldr	r2, [pc, #60]	@ (8000f7c <HAL_TIM_Base_MspInit+0x80>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d113      	bne.n	8000f6a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000f42:	4b0d      	ldr	r3, [pc, #52]	@ (8000f78 <HAL_TIM_Base_MspInit+0x7c>)
 8000f44:	69db      	ldr	r3, [r3, #28]
 8000f46:	4a0c      	ldr	r2, [pc, #48]	@ (8000f78 <HAL_TIM_Base_MspInit+0x7c>)
 8000f48:	f043 0320 	orr.w	r3, r3, #32
 8000f4c:	61d3      	str	r3, [r2, #28]
 8000f4e:	4b0a      	ldr	r3, [pc, #40]	@ (8000f78 <HAL_TIM_Base_MspInit+0x7c>)
 8000f50:	69db      	ldr	r3, [r3, #28]
 8000f52:	f003 0320 	and.w	r3, r3, #32
 8000f56:	60bb      	str	r3, [r7, #8]
 8000f58:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_DAC2_IRQn, 0, 0);
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	2037      	movs	r0, #55	@ 0x37
 8000f60:	f002 f951 	bl	8003206 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_DAC2_IRQn);
 8000f64:	2037      	movs	r0, #55	@ 0x37
 8000f66:	f002 f96a 	bl	800323e <HAL_NVIC_EnableIRQ>
}
 8000f6a:	bf00      	nop
 8000f6c:	3710      	adds	r7, #16
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	40001000 	.word	0x40001000
 8000f78:	40021000 	.word	0x40021000
 8000f7c:	40001400 	.word	0x40001400

08000f80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b08a      	sub	sp, #40	@ 0x28
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f88:	f107 0314 	add.w	r3, r7, #20
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]
 8000f92:	609a      	str	r2, [r3, #8]
 8000f94:	60da      	str	r2, [r3, #12]
 8000f96:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a18      	ldr	r2, [pc, #96]	@ (8001000 <HAL_UART_MspInit+0x80>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d129      	bne.n	8000ff6 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fa2:	4b18      	ldr	r3, [pc, #96]	@ (8001004 <HAL_UART_MspInit+0x84>)
 8000fa4:	69db      	ldr	r3, [r3, #28]
 8000fa6:	4a17      	ldr	r2, [pc, #92]	@ (8001004 <HAL_UART_MspInit+0x84>)
 8000fa8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fac:	61d3      	str	r3, [r2, #28]
 8000fae:	4b15      	ldr	r3, [pc, #84]	@ (8001004 <HAL_UART_MspInit+0x84>)
 8000fb0:	69db      	ldr	r3, [r3, #28]
 8000fb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fb6:	613b      	str	r3, [r7, #16]
 8000fb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fba:	4b12      	ldr	r3, [pc, #72]	@ (8001004 <HAL_UART_MspInit+0x84>)
 8000fbc:	695b      	ldr	r3, [r3, #20]
 8000fbe:	4a11      	ldr	r2, [pc, #68]	@ (8001004 <HAL_UART_MspInit+0x84>)
 8000fc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fc4:	6153      	str	r3, [r2, #20]
 8000fc6:	4b0f      	ldr	r3, [pc, #60]	@ (8001004 <HAL_UART_MspInit+0x84>)
 8000fc8:	695b      	ldr	r3, [r3, #20]
 8000fca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fce:	60fb      	str	r3, [r7, #12]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000fd2:	f248 0304 	movw	r3, #32772	@ 0x8004
 8000fd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd8:	2302      	movs	r3, #2
 8000fda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fe0:	2303      	movs	r3, #3
 8000fe2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fe4:	2307      	movs	r3, #7
 8000fe6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe8:	f107 0314 	add.w	r3, r7, #20
 8000fec:	4619      	mov	r1, r3
 8000fee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ff2:	f002 fad5 	bl	80035a0 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000ff6:	bf00      	nop
 8000ff8:	3728      	adds	r7, #40	@ 0x28
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	40004400 	.word	0x40004400
 8001004:	40021000 	.word	0x40021000

08001008 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800100c:	bf00      	nop
 800100e:	e7fd      	b.n	800100c <NMI_Handler+0x4>

08001010 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001014:	bf00      	nop
 8001016:	e7fd      	b.n	8001014 <HardFault_Handler+0x4>

08001018 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800101c:	bf00      	nop
 800101e:	e7fd      	b.n	800101c <MemManage_Handler+0x4>

08001020 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001024:	bf00      	nop
 8001026:	e7fd      	b.n	8001024 <BusFault_Handler+0x4>

08001028 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800102c:	bf00      	nop
 800102e:	e7fd      	b.n	800102c <UsageFault_Handler+0x4>

08001030 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001034:	bf00      	nop
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr

0800103e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800103e:	b480      	push	{r7}
 8001040:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001042:	bf00      	nop
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr

0800104c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001050:	bf00      	nop
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr

0800105a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800105a:	b580      	push	{r7, lr}
 800105c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800105e:	f000 f935 	bl	80012cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001062:	bf00      	nop
 8001064:	bd80      	pop	{r7, pc}
	...

08001068 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800106c:	4802      	ldr	r0, [pc, #8]	@ (8001078 <DMA1_Channel1_IRQHandler+0x10>)
 800106e:	f002 f9a6 	bl	80033be <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001072:	bf00      	nop
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	2000010c 	.word	0x2000010c

0800107c <CAN_RX0_IRQHandler>:

/**
  * @brief This function handles CAN RX0 interrupt.
  */
void CAN_RX0_IRQHandler(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX0_IRQn 0 */

  /* USER CODE END CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001080:	4802      	ldr	r0, [pc, #8]	@ (800108c <CAN_RX0_IRQHandler+0x10>)
 8001082:	f001 fdb6 	bl	8002bf2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX0_IRQn 1 */

  /* USER CODE END CAN_RX0_IRQn 1 */
}
 8001086:	bf00      	nop
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	20000150 	.word	0x20000150

08001090 <TIM6_DAC1_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC1 underrun error interrupts.
  */
void TIM6_DAC1_IRQHandler(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC1_IRQn 0 */

  /* USER CODE END TIM6_DAC1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001094:	4802      	ldr	r0, [pc, #8]	@ (80010a0 <TIM6_DAC1_IRQHandler+0x10>)
 8001096:	f003 ff37 	bl	8004f08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC1_IRQn 1 */

  /* USER CODE END TIM6_DAC1_IRQn 1 */
}
 800109a:	bf00      	nop
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	20000178 	.word	0x20000178

080010a4 <TIM7_DAC2_IRQHandler>:

/**
  * @brief This function handles TIM7 global and DAC2 underrun error interrupts.
  */
void TIM7_DAC2_IRQHandler(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_DAC2_IRQn 0 */

  /* USER CODE END TIM7_DAC2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80010a8:	4802      	ldr	r0, [pc, #8]	@ (80010b4 <TIM7_DAC2_IRQHandler+0x10>)
 80010aa:	f003 ff2d 	bl	8004f08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_DAC2_IRQn 1 */

  /* USER CODE END TIM7_DAC2_IRQn 1 */
}
 80010ae:	bf00      	nop
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	200001c4 	.word	0x200001c4

080010b8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b086      	sub	sp, #24
 80010bc:	af00      	add	r7, sp, #0
 80010be:	60f8      	str	r0, [r7, #12]
 80010c0:	60b9      	str	r1, [r7, #8]
 80010c2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010c4:	2300      	movs	r3, #0
 80010c6:	617b      	str	r3, [r7, #20]
 80010c8:	e00a      	b.n	80010e0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80010ca:	f3af 8000 	nop.w
 80010ce:	4601      	mov	r1, r0
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	1c5a      	adds	r2, r3, #1
 80010d4:	60ba      	str	r2, [r7, #8]
 80010d6:	b2ca      	uxtb	r2, r1
 80010d8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	3301      	adds	r3, #1
 80010de:	617b      	str	r3, [r7, #20]
 80010e0:	697a      	ldr	r2, [r7, #20]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	429a      	cmp	r2, r3
 80010e6:	dbf0      	blt.n	80010ca <_read+0x12>
  }

  return len;
 80010e8:	687b      	ldr	r3, [r7, #4]
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3718      	adds	r7, #24
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <_close>:
  }
  return len;
}

int _close(int file)
{
 80010f2:	b480      	push	{r7}
 80010f4:	b083      	sub	sp, #12
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80010fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010fe:	4618      	mov	r0, r3
 8001100:	370c      	adds	r7, #12
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr

0800110a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800110a:	b480      	push	{r7}
 800110c:	b083      	sub	sp, #12
 800110e:	af00      	add	r7, sp, #0
 8001110:	6078      	str	r0, [r7, #4]
 8001112:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800111a:	605a      	str	r2, [r3, #4]
  return 0;
 800111c:	2300      	movs	r3, #0
}
 800111e:	4618      	mov	r0, r3
 8001120:	370c      	adds	r7, #12
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr

0800112a <_isatty>:

int _isatty(int file)
{
 800112a:	b480      	push	{r7}
 800112c:	b083      	sub	sp, #12
 800112e:	af00      	add	r7, sp, #0
 8001130:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001132:	2301      	movs	r3, #1
}
 8001134:	4618      	mov	r0, r3
 8001136:	370c      	adds	r7, #12
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr

08001140 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001140:	b480      	push	{r7}
 8001142:	b085      	sub	sp, #20
 8001144:	af00      	add	r7, sp, #0
 8001146:	60f8      	str	r0, [r7, #12]
 8001148:	60b9      	str	r1, [r7, #8]
 800114a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800114c:	2300      	movs	r3, #0
}
 800114e:	4618      	mov	r0, r3
 8001150:	3714      	adds	r7, #20
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
	...

0800115c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b086      	sub	sp, #24
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001164:	4a14      	ldr	r2, [pc, #80]	@ (80011b8 <_sbrk+0x5c>)
 8001166:	4b15      	ldr	r3, [pc, #84]	@ (80011bc <_sbrk+0x60>)
 8001168:	1ad3      	subs	r3, r2, r3
 800116a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001170:	4b13      	ldr	r3, [pc, #76]	@ (80011c0 <_sbrk+0x64>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d102      	bne.n	800117e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001178:	4b11      	ldr	r3, [pc, #68]	@ (80011c0 <_sbrk+0x64>)
 800117a:	4a12      	ldr	r2, [pc, #72]	@ (80011c4 <_sbrk+0x68>)
 800117c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800117e:	4b10      	ldr	r3, [pc, #64]	@ (80011c0 <_sbrk+0x64>)
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4413      	add	r3, r2
 8001186:	693a      	ldr	r2, [r7, #16]
 8001188:	429a      	cmp	r2, r3
 800118a:	d207      	bcs.n	800119c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800118c:	f005 f834 	bl	80061f8 <__errno>
 8001190:	4603      	mov	r3, r0
 8001192:	220c      	movs	r2, #12
 8001194:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001196:	f04f 33ff 	mov.w	r3, #4294967295
 800119a:	e009      	b.n	80011b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800119c:	4b08      	ldr	r3, [pc, #32]	@ (80011c0 <_sbrk+0x64>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011a2:	4b07      	ldr	r3, [pc, #28]	@ (80011c0 <_sbrk+0x64>)
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4413      	add	r3, r2
 80011aa:	4a05      	ldr	r2, [pc, #20]	@ (80011c0 <_sbrk+0x64>)
 80011ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011ae:	68fb      	ldr	r3, [r7, #12]
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3718      	adds	r7, #24
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	20003000 	.word	0x20003000
 80011bc:	00000400 	.word	0x00000400
 80011c0:	200002ac 	.word	0x200002ac
 80011c4:	20000400 	.word	0x20000400

080011c8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011cc:	4b06      	ldr	r3, [pc, #24]	@ (80011e8 <SystemInit+0x20>)
 80011ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011d2:	4a05      	ldr	r2, [pc, #20]	@ (80011e8 <SystemInit+0x20>)
 80011d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011dc:	bf00      	nop
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	e000ed00 	.word	0xe000ed00

080011ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80011ec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001224 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80011f0:	f7ff ffea 	bl	80011c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011f4:	480c      	ldr	r0, [pc, #48]	@ (8001228 <LoopForever+0x6>)
  ldr r1, =_edata
 80011f6:	490d      	ldr	r1, [pc, #52]	@ (800122c <LoopForever+0xa>)
  ldr r2, =_sidata
 80011f8:	4a0d      	ldr	r2, [pc, #52]	@ (8001230 <LoopForever+0xe>)
  movs r3, #0
 80011fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011fc:	e002      	b.n	8001204 <LoopCopyDataInit>

080011fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001200:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001202:	3304      	adds	r3, #4

08001204 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001204:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001206:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001208:	d3f9      	bcc.n	80011fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800120a:	4a0a      	ldr	r2, [pc, #40]	@ (8001234 <LoopForever+0x12>)
  ldr r4, =_ebss
 800120c:	4c0a      	ldr	r4, [pc, #40]	@ (8001238 <LoopForever+0x16>)
  movs r3, #0
 800120e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001210:	e001      	b.n	8001216 <LoopFillZerobss>

08001212 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001212:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001214:	3204      	adds	r2, #4

08001216 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001216:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001218:	d3fb      	bcc.n	8001212 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800121a:	f004 fff3 	bl	8006204 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800121e:	f7ff fa19 	bl	8000654 <main>

08001222 <LoopForever>:

LoopForever:
    b LoopForever
 8001222:	e7fe      	b.n	8001222 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001224:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001228:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800122c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001230:	08006d6c 	.word	0x08006d6c
  ldr r2, =_sbss
 8001234:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001238:	20000400 	.word	0x20000400

0800123c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800123c:	e7fe      	b.n	800123c <ADC1_2_IRQHandler>
	...

08001240 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001244:	4b08      	ldr	r3, [pc, #32]	@ (8001268 <HAL_Init+0x28>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a07      	ldr	r2, [pc, #28]	@ (8001268 <HAL_Init+0x28>)
 800124a:	f043 0310 	orr.w	r3, r3, #16
 800124e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001250:	2003      	movs	r0, #3
 8001252:	f001 ffcd 	bl	80031f0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001256:	2000      	movs	r0, #0
 8001258:	f000 f808 	bl	800126c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800125c:	f7ff fd74 	bl	8000d48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001260:	2300      	movs	r3, #0
}
 8001262:	4618      	mov	r0, r3
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	40022000 	.word	0x40022000

0800126c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001274:	4b12      	ldr	r3, [pc, #72]	@ (80012c0 <HAL_InitTick+0x54>)
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	4b12      	ldr	r3, [pc, #72]	@ (80012c4 <HAL_InitTick+0x58>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	4619      	mov	r1, r3
 800127e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001282:	fbb3 f3f1 	udiv	r3, r3, r1
 8001286:	fbb2 f3f3 	udiv	r3, r2, r3
 800128a:	4618      	mov	r0, r3
 800128c:	f001 ffe5 	bl	800325a <HAL_SYSTICK_Config>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e00e      	b.n	80012b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2b0f      	cmp	r3, #15
 800129e:	d80a      	bhi.n	80012b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012a0:	2200      	movs	r2, #0
 80012a2:	6879      	ldr	r1, [r7, #4]
 80012a4:	f04f 30ff 	mov.w	r0, #4294967295
 80012a8:	f001 ffad 	bl	8003206 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012ac:	4a06      	ldr	r2, [pc, #24]	@ (80012c8 <HAL_InitTick+0x5c>)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80012b2:	2300      	movs	r3, #0
 80012b4:	e000      	b.n	80012b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3708      	adds	r7, #8
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	20000000 	.word	0x20000000
 80012c4:	20000008 	.word	0x20000008
 80012c8:	20000004 	.word	0x20000004

080012cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012d0:	4b06      	ldr	r3, [pc, #24]	@ (80012ec <HAL_IncTick+0x20>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	461a      	mov	r2, r3
 80012d6:	4b06      	ldr	r3, [pc, #24]	@ (80012f0 <HAL_IncTick+0x24>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4413      	add	r3, r2
 80012dc:	4a04      	ldr	r2, [pc, #16]	@ (80012f0 <HAL_IncTick+0x24>)
 80012de:	6013      	str	r3, [r2, #0]
}
 80012e0:	bf00      	nop
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	20000008 	.word	0x20000008
 80012f0:	200002b0 	.word	0x200002b0

080012f4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  return uwTick;  
 80012f8:	4b03      	ldr	r3, [pc, #12]	@ (8001308 <HAL_GetTick+0x14>)
 80012fa:	681b      	ldr	r3, [r3, #0]
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	200002b0 	.word	0x200002b0

0800130c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001314:	f7ff ffee 	bl	80012f4 <HAL_GetTick>
 8001318:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001324:	d005      	beq.n	8001332 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001326:	4b0a      	ldr	r3, [pc, #40]	@ (8001350 <HAL_Delay+0x44>)
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	461a      	mov	r2, r3
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	4413      	add	r3, r2
 8001330:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001332:	bf00      	nop
 8001334:	f7ff ffde 	bl	80012f4 <HAL_GetTick>
 8001338:	4602      	mov	r2, r0
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	68fa      	ldr	r2, [r7, #12]
 8001340:	429a      	cmp	r2, r3
 8001342:	d8f7      	bhi.n	8001334 <HAL_Delay+0x28>
  {
  }
}
 8001344:	bf00      	nop
 8001346:	bf00      	nop
 8001348:	3710      	adds	r7, #16
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	20000008 	.word	0x20000008

08001354 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800135c:	bf00      	nop
 800135e:	370c      	adds	r7, #12
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr

08001368 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001370:	bf00      	nop
 8001372:	370c      	adds	r7, #12
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr

0800137c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001384:	bf00      	nop
 8001386:	370c      	adds	r7, #12
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr

08001390 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b09a      	sub	sp, #104	@ 0x68
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001398:	2300      	movs	r3, #0
 800139a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800139e:	2300      	movs	r3, #0
 80013a0:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 80013a2:	2300      	movs	r3, #0
 80013a4:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d101      	bne.n	80013b0 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80013ac:	2301      	movs	r3, #1
 80013ae:	e172      	b.n	8001696 <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	691b      	ldr	r3, [r3, #16]
 80013b4:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ba:	f003 0310 	and.w	r3, r3, #16
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d176      	bne.n	80014b0 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d152      	bne.n	8001470 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2200      	movs	r2, #0
 80013ce:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2200      	movs	r2, #0
 80013d4:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2200      	movs	r2, #0
 80013da:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2200      	movs	r2, #0
 80013e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f7ff fcd3 	bl	8000d90 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	689b      	ldr	r3, [r3, #8]
 80013f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d13b      	bne.n	8001470 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	f000 fef5 	bl	80021e8 <ADC_Disable>
 80013fe:	4603      	mov	r3, r0
 8001400:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001408:	f003 0310 	and.w	r3, r3, #16
 800140c:	2b00      	cmp	r3, #0
 800140e:	d12f      	bne.n	8001470 <HAL_ADC_Init+0xe0>
 8001410:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8001414:	2b00      	cmp	r3, #0
 8001416:	d12b      	bne.n	8001470 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800141c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001420:	f023 0302 	bic.w	r3, r3, #2
 8001424:	f043 0202 	orr.w	r2, r3, #2
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	689a      	ldr	r2, [r3, #8]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800143a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	689a      	ldr	r2, [r3, #8]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800144a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800144c:	4b94      	ldr	r3, [pc, #592]	@ (80016a0 <HAL_ADC_Init+0x310>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a94      	ldr	r2, [pc, #592]	@ (80016a4 <HAL_ADC_Init+0x314>)
 8001452:	fba2 2303 	umull	r2, r3, r2, r3
 8001456:	0c9a      	lsrs	r2, r3, #18
 8001458:	4613      	mov	r3, r2
 800145a:	009b      	lsls	r3, r3, #2
 800145c:	4413      	add	r3, r2
 800145e:	005b      	lsls	r3, r3, #1
 8001460:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001462:	e002      	b.n	800146a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	3b01      	subs	r3, #1
 8001468:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800146a:	68bb      	ldr	r3, [r7, #8]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d1f9      	bne.n	8001464 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	689b      	ldr	r3, [r3, #8]
 8001476:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d007      	beq.n	800148e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	689b      	ldr	r3, [r3, #8]
 8001484:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001488:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800148c:	d110      	bne.n	80014b0 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001492:	f023 0312 	bic.w	r3, r3, #18
 8001496:	f043 0210 	orr.w	r2, r3, #16
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014a2:	f043 0201 	orr.w	r2, r3, #1
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014b4:	f003 0310 	and.w	r3, r3, #16
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	f040 80df 	bne.w	800167c <HAL_ADC_Init+0x2ec>
 80014be:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	f040 80da 	bne.w	800167c <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	689b      	ldr	r3, [r3, #8]
 80014ce:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	f040 80d2 	bne.w	800167c <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014dc:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80014e0:	f043 0202 	orr.w	r2, r3, #2
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014e8:	4b6f      	ldr	r3, [pc, #444]	@ (80016a8 <HAL_ADC_Init+0x318>)
 80014ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80014f4:	d102      	bne.n	80014fc <HAL_ADC_Init+0x16c>
 80014f6:	4b6d      	ldr	r3, [pc, #436]	@ (80016ac <HAL_ADC_Init+0x31c>)
 80014f8:	60fb      	str	r3, [r7, #12]
 80014fa:	e002      	b.n	8001502 <HAL_ADC_Init+0x172>
 80014fc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001500:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	f003 0303 	and.w	r3, r3, #3
 800150c:	2b01      	cmp	r3, #1
 800150e:	d108      	bne.n	8001522 <HAL_ADC_Init+0x192>
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f003 0301 	and.w	r3, r3, #1
 800151a:	2b01      	cmp	r3, #1
 800151c:	d101      	bne.n	8001522 <HAL_ADC_Init+0x192>
 800151e:	2301      	movs	r3, #1
 8001520:	e000      	b.n	8001524 <HAL_ADC_Init+0x194>
 8001522:	2300      	movs	r3, #0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d11c      	bne.n	8001562 <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001528:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800152a:	2b00      	cmp	r3, #0
 800152c:	d010      	beq.n	8001550 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	f003 0303 	and.w	r3, r3, #3
 8001536:	2b01      	cmp	r3, #1
 8001538:	d107      	bne.n	800154a <HAL_ADC_Init+0x1ba>
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f003 0301 	and.w	r3, r3, #1
 8001542:	2b01      	cmp	r3, #1
 8001544:	d101      	bne.n	800154a <HAL_ADC_Init+0x1ba>
 8001546:	2301      	movs	r3, #1
 8001548:	e000      	b.n	800154c <HAL_ADC_Init+0x1bc>
 800154a:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800154c:	2b00      	cmp	r3, #0
 800154e:	d108      	bne.n	8001562 <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001550:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	431a      	orrs	r2, r3
 800155e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001560:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	7e5b      	ldrb	r3, [r3, #25]
 8001566:	035b      	lsls	r3, r3, #13
 8001568:	687a      	ldr	r2, [r7, #4]
 800156a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800156c:	2a01      	cmp	r2, #1
 800156e:	d002      	beq.n	8001576 <HAL_ADC_Init+0x1e6>
 8001570:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001574:	e000      	b.n	8001578 <HAL_ADC_Init+0x1e8>
 8001576:	2200      	movs	r2, #0
 8001578:	431a      	orrs	r2, r3
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	68db      	ldr	r3, [r3, #12]
 800157e:	431a      	orrs	r2, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	4313      	orrs	r3, r2
 8001586:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001588:	4313      	orrs	r3, r2
 800158a:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001592:	2b01      	cmp	r3, #1
 8001594:	d11b      	bne.n	80015ce <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	7e5b      	ldrb	r3, [r3, #25]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d109      	bne.n	80015b2 <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015a2:	3b01      	subs	r3, #1
 80015a4:	045a      	lsls	r2, r3, #17
 80015a6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80015a8:	4313      	orrs	r3, r2
 80015aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015ae:	663b      	str	r3, [r7, #96]	@ 0x60
 80015b0:	e00d      	b.n	80015ce <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015b6:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80015ba:	f043 0220 	orr.w	r2, r3, #32
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015c6:	f043 0201 	orr.w	r2, r3, #1
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d007      	beq.n	80015e6 <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015de:	4313      	orrs	r3, r2
 80015e0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80015e2:	4313      	orrs	r3, r2
 80015e4:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	f003 030c 	and.w	r3, r3, #12
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d114      	bne.n	800161e <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	68db      	ldr	r3, [r3, #12]
 80015fa:	687a      	ldr	r2, [r7, #4]
 80015fc:	6812      	ldr	r2, [r2, #0]
 80015fe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001602:	f023 0302 	bic.w	r3, r3, #2
 8001606:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	7e1b      	ldrb	r3, [r3, #24]
 800160c:	039a      	lsls	r2, r3, #14
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001614:	005b      	lsls	r3, r3, #1
 8001616:	4313      	orrs	r3, r2
 8001618:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800161a:	4313      	orrs	r3, r2
 800161c:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	68da      	ldr	r2, [r3, #12]
 8001624:	4b22      	ldr	r3, [pc, #136]	@ (80016b0 <HAL_ADC_Init+0x320>)
 8001626:	4013      	ands	r3, r2
 8001628:	687a      	ldr	r2, [r7, #4]
 800162a:	6812      	ldr	r2, [r2, #0]
 800162c:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800162e:	430b      	orrs	r3, r1
 8001630:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	691b      	ldr	r3, [r3, #16]
 8001636:	2b01      	cmp	r3, #1
 8001638:	d10c      	bne.n	8001654 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001640:	f023 010f 	bic.w	r1, r3, #15
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	69db      	ldr	r3, [r3, #28]
 8001648:	1e5a      	subs	r2, r3, #1
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	430a      	orrs	r2, r1
 8001650:	631a      	str	r2, [r3, #48]	@ 0x30
 8001652:	e007      	b.n	8001664 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f022 020f 	bic.w	r2, r2, #15
 8001662:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2200      	movs	r2, #0
 8001668:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800166e:	f023 0303 	bic.w	r3, r3, #3
 8001672:	f043 0201 	orr.w	r2, r3, #1
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	641a      	str	r2, [r3, #64]	@ 0x40
 800167a:	e00a      	b.n	8001692 <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001680:	f023 0312 	bic.w	r3, r3, #18
 8001684:	f043 0210 	orr.w	r2, r3, #16
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800168c:	2301      	movs	r3, #1
 800168e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001692:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8001696:	4618      	mov	r0, r3
 8001698:	3768      	adds	r7, #104	@ 0x68
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	20000000 	.word	0x20000000
 80016a4:	431bde83 	.word	0x431bde83
 80016a8:	50000300 	.word	0x50000300
 80016ac:	50000100 	.word	0x50000100
 80016b0:	fff0c007 	.word	0xfff0c007

080016b4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b086      	sub	sp, #24
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	60f8      	str	r0, [r7, #12]
 80016bc:	60b9      	str	r1, [r7, #8]
 80016be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016c0:	2300      	movs	r3, #0
 80016c2:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	f003 0304 	and.w	r3, r3, #4
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	f040 80b9 	bne.w	8001846 <HAL_ADC_Start_DMA+0x192>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d101      	bne.n	80016e2 <HAL_ADC_Start_DMA+0x2e>
 80016de:	2302      	movs	r3, #2
 80016e0:	e0b4      	b.n	800184c <HAL_ADC_Start_DMA+0x198>
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	2201      	movs	r2, #1
 80016e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 80016ea:	4b5a      	ldr	r3, [pc, #360]	@ (8001854 <HAL_ADC_Start_DMA+0x1a0>)
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	f003 031f 	and.w	r3, r3, #31
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	f040 80a0 	bne.w	8001838 <HAL_ADC_Start_DMA+0x184>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80016f8:	68f8      	ldr	r0, [r7, #12]
 80016fa:	f000 fd11 	bl	8002120 <ADC_Enable>
 80016fe:	4603      	mov	r3, r0
 8001700:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001702:	7dfb      	ldrb	r3, [r7, #23]
 8001704:	2b00      	cmp	r3, #0
 8001706:	f040 8092 	bne.w	800182e <HAL_ADC_Start_DMA+0x17a>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800170e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001712:	f023 0301 	bic.w	r3, r3, #1
 8001716:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800171e:	4b4d      	ldr	r3, [pc, #308]	@ (8001854 <HAL_ADC_Start_DMA+0x1a0>)
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	f003 031f 	and.w	r3, r3, #31
 8001726:	2b00      	cmp	r3, #0
 8001728:	d004      	beq.n	8001734 <HAL_ADC_Start_DMA+0x80>
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001732:	d115      	bne.n	8001760 <HAL_ADC_Start_DMA+0xac>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001738:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	68db      	ldr	r3, [r3, #12]
 8001746:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d027      	beq.n	800179e <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001752:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001756:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	641a      	str	r2, [r3, #64]	@ 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800175e:	e01e      	b.n	800179e <HAL_ADC_Start_DMA+0xea>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001764:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001774:	d004      	beq.n	8001780 <HAL_ADC_Start_DMA+0xcc>
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a37      	ldr	r2, [pc, #220]	@ (8001858 <HAL_ADC_Start_DMA+0x1a4>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d10e      	bne.n	800179e <HAL_ADC_Start_DMA+0xea>
 8001780:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001784:	68db      	ldr	r3, [r3, #12]
 8001786:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800178a:	2b00      	cmp	r3, #0
 800178c:	d007      	beq.n	800179e <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001792:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001796:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	641a      	str	r2, [r3, #64]	@ 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017a2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80017a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80017aa:	d106      	bne.n	80017ba <HAL_ADC_Start_DMA+0x106>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017b0:	f023 0206 	bic.w	r2, r3, #6
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	645a      	str	r2, [r3, #68]	@ 0x44
 80017b8:	e002      	b.n	80017c0 <HAL_ADC_Start_DMA+0x10c>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	2200      	movs	r2, #0
 80017be:	645a      	str	r2, [r3, #68]	@ 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	2200      	movs	r2, #0
 80017c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017cc:	4a23      	ldr	r2, [pc, #140]	@ (800185c <HAL_ADC_Start_DMA+0x1a8>)
 80017ce:	629a      	str	r2, [r3, #40]	@ 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017d4:	4a22      	ldr	r2, [pc, #136]	@ (8001860 <HAL_ADC_Start_DMA+0x1ac>)
 80017d6:	62da      	str	r2, [r3, #44]	@ 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017dc:	4a21      	ldr	r2, [pc, #132]	@ (8001864 <HAL_ADC_Start_DMA+0x1b0>)
 80017de:	631a      	str	r2, [r3, #48]	@ 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	221c      	movs	r2, #28
 80017e6:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	685a      	ldr	r2, [r3, #4]
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f042 0210 	orr.w	r2, r2, #16
 80017f6:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	68da      	ldr	r2, [r3, #12]
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f042 0201 	orr.w	r2, r2, #1
 8001806:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	3340      	adds	r3, #64	@ 0x40
 8001812:	4619      	mov	r1, r3
 8001814:	68ba      	ldr	r2, [r7, #8]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	f001 fd72 	bl	8003300 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	689a      	ldr	r2, [r3, #8]
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f042 0204 	orr.w	r2, r2, #4
 800182a:	609a      	str	r2, [r3, #8]
 800182c:	e00d      	b.n	800184a <HAL_ADC_Start_DMA+0x196>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	2200      	movs	r2, #0
 8001832:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8001836:	e008      	b.n	800184a <HAL_ADC_Start_DMA+0x196>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	2200      	movs	r2, #0
 8001840:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8001844:	e001      	b.n	800184a <HAL_ADC_Start_DMA+0x196>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001846:	2302      	movs	r3, #2
 8001848:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800184a:	7dfb      	ldrb	r3, [r7, #23]
}
 800184c:	4618      	mov	r0, r3
 800184e:	3718      	adds	r7, #24
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	50000300 	.word	0x50000300
 8001858:	50000100 	.word	0x50000100
 800185c:	08002055 	.word	0x08002055
 8001860:	080020cf 	.word	0x080020cf
 8001864:	080020eb 	.word	0x080020eb

08001868 <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b084      	sub	sp, #16
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001872:	2300      	movs	r3, #0
 8001874:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800187c:	2b01      	cmp	r3, #1
 800187e:	d101      	bne.n	8001884 <HAL_ADCEx_Calibration_Start+0x1c>
 8001880:	2302      	movs	r3, #2
 8001882:	e05f      	b.n	8001944 <HAL_ADCEx_Calibration_Start+0xdc>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2201      	movs	r2, #1
 8001888:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	f000 fcab 	bl	80021e8 <ADC_Disable>
 8001892:	4603      	mov	r3, r0
 8001894:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001896:	7bfb      	ldrb	r3, [r7, #15]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d14e      	bne.n	800193a <HAL_ADCEx_Calibration_Start+0xd2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2201      	movs	r2, #1
 80018a0:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	689a      	ldr	r2, [r3, #8]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 80018b0:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d107      	bne.n	80018c8 <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	689a      	ldr	r2, [r3, #8]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80018c6:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	689a      	ldr	r2, [r3, #8]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80018d6:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 80018d8:	f7ff fd0c 	bl	80012f4 <HAL_GetTick>
 80018dc:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80018de:	e01c      	b.n	800191a <HAL_ADCEx_Calibration_Start+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80018e0:	f7ff fd08 	bl	80012f4 <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	2b0a      	cmp	r3, #10
 80018ec:	d915      	bls.n	800191a <HAL_ADCEx_Calibration_Start+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80018f8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80018fc:	d10d      	bne.n	800191a <HAL_ADCEx_Calibration_Start+0xb2>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001902:	f023 0312 	bic.w	r3, r3, #18
 8001906:	f043 0210 	orr.w	r2, r3, #16
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2200      	movs	r2, #0
 8001912:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e014      	b.n	8001944 <HAL_ADCEx_Calibration_Start+0xdc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001924:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001928:	d0da      	beq.n	80018e0 <HAL_ADCEx_Calibration_Start+0x78>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800192e:	f023 0303 	bic.w	r3, r3, #3
 8001932:	f043 0201 	orr.w	r2, r3, #1
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2200      	movs	r2, #0
 800193e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001942:	7bfb      	ldrb	r3, [r7, #15]
}
 8001944:	4618      	mov	r0, r3
 8001946:	3710      	adds	r7, #16
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}

0800194c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800194c:	b480      	push	{r7}
 800194e:	b09b      	sub	sp, #108	@ 0x6c
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001956:	2300      	movs	r3, #0
 8001958:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 800195c:	2300      	movs	r3, #0
 800195e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001966:	2b01      	cmp	r3, #1
 8001968:	d101      	bne.n	800196e <HAL_ADC_ConfigChannel+0x22>
 800196a:	2302      	movs	r3, #2
 800196c:	e2a1      	b.n	8001eb2 <HAL_ADC_ConfigChannel+0x566>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2201      	movs	r2, #1
 8001972:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	f003 0304 	and.w	r3, r3, #4
 8001980:	2b00      	cmp	r3, #0
 8001982:	f040 8285 	bne.w	8001e90 <HAL_ADC_ConfigChannel+0x544>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	2b04      	cmp	r3, #4
 800198c:	d81c      	bhi.n	80019c8 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	685a      	ldr	r2, [r3, #4]
 8001998:	4613      	mov	r3, r2
 800199a:	005b      	lsls	r3, r3, #1
 800199c:	4413      	add	r3, r2
 800199e:	005b      	lsls	r3, r3, #1
 80019a0:	461a      	mov	r2, r3
 80019a2:	231f      	movs	r3, #31
 80019a4:	4093      	lsls	r3, r2
 80019a6:	43db      	mvns	r3, r3
 80019a8:	4019      	ands	r1, r3
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	6818      	ldr	r0, [r3, #0]
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	685a      	ldr	r2, [r3, #4]
 80019b2:	4613      	mov	r3, r2
 80019b4:	005b      	lsls	r3, r3, #1
 80019b6:	4413      	add	r3, r2
 80019b8:	005b      	lsls	r3, r3, #1
 80019ba:	fa00 f203 	lsl.w	r2, r0, r3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	430a      	orrs	r2, r1
 80019c4:	631a      	str	r2, [r3, #48]	@ 0x30
 80019c6:	e063      	b.n	8001a90 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	2b09      	cmp	r3, #9
 80019ce:	d81e      	bhi.n	8001a0e <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	685a      	ldr	r2, [r3, #4]
 80019da:	4613      	mov	r3, r2
 80019dc:	005b      	lsls	r3, r3, #1
 80019de:	4413      	add	r3, r2
 80019e0:	005b      	lsls	r3, r3, #1
 80019e2:	3b1e      	subs	r3, #30
 80019e4:	221f      	movs	r2, #31
 80019e6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ea:	43db      	mvns	r3, r3
 80019ec:	4019      	ands	r1, r3
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	6818      	ldr	r0, [r3, #0]
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	685a      	ldr	r2, [r3, #4]
 80019f6:	4613      	mov	r3, r2
 80019f8:	005b      	lsls	r3, r3, #1
 80019fa:	4413      	add	r3, r2
 80019fc:	005b      	lsls	r3, r3, #1
 80019fe:	3b1e      	subs	r3, #30
 8001a00:	fa00 f203 	lsl.w	r2, r0, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	430a      	orrs	r2, r1
 8001a0a:	635a      	str	r2, [r3, #52]	@ 0x34
 8001a0c:	e040      	b.n	8001a90 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	2b0e      	cmp	r3, #14
 8001a14:	d81e      	bhi.n	8001a54 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685a      	ldr	r2, [r3, #4]
 8001a20:	4613      	mov	r3, r2
 8001a22:	005b      	lsls	r3, r3, #1
 8001a24:	4413      	add	r3, r2
 8001a26:	005b      	lsls	r3, r3, #1
 8001a28:	3b3c      	subs	r3, #60	@ 0x3c
 8001a2a:	221f      	movs	r2, #31
 8001a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a30:	43db      	mvns	r3, r3
 8001a32:	4019      	ands	r1, r3
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	6818      	ldr	r0, [r3, #0]
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	685a      	ldr	r2, [r3, #4]
 8001a3c:	4613      	mov	r3, r2
 8001a3e:	005b      	lsls	r3, r3, #1
 8001a40:	4413      	add	r3, r2
 8001a42:	005b      	lsls	r3, r3, #1
 8001a44:	3b3c      	subs	r3, #60	@ 0x3c
 8001a46:	fa00 f203 	lsl.w	r2, r0, r3
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	430a      	orrs	r2, r1
 8001a50:	639a      	str	r2, [r3, #56]	@ 0x38
 8001a52:	e01d      	b.n	8001a90 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	685a      	ldr	r2, [r3, #4]
 8001a5e:	4613      	mov	r3, r2
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	4413      	add	r3, r2
 8001a64:	005b      	lsls	r3, r3, #1
 8001a66:	3b5a      	subs	r3, #90	@ 0x5a
 8001a68:	221f      	movs	r2, #31
 8001a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6e:	43db      	mvns	r3, r3
 8001a70:	4019      	ands	r1, r3
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	6818      	ldr	r0, [r3, #0]
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	685a      	ldr	r2, [r3, #4]
 8001a7a:	4613      	mov	r3, r2
 8001a7c:	005b      	lsls	r3, r3, #1
 8001a7e:	4413      	add	r3, r2
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	3b5a      	subs	r3, #90	@ 0x5a
 8001a84:	fa00 f203 	lsl.w	r2, r0, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	430a      	orrs	r2, r1
 8001a8e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	f003 030c 	and.w	r3, r3, #12
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	f040 80e5 	bne.w	8001c6a <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	2b09      	cmp	r3, #9
 8001aa6:	d91c      	bls.n	8001ae2 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	6999      	ldr	r1, [r3, #24]
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	4613      	mov	r3, r2
 8001ab4:	005b      	lsls	r3, r3, #1
 8001ab6:	4413      	add	r3, r2
 8001ab8:	3b1e      	subs	r3, #30
 8001aba:	2207      	movs	r2, #7
 8001abc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac0:	43db      	mvns	r3, r3
 8001ac2:	4019      	ands	r1, r3
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	6898      	ldr	r0, [r3, #8]
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	4613      	mov	r3, r2
 8001ace:	005b      	lsls	r3, r3, #1
 8001ad0:	4413      	add	r3, r2
 8001ad2:	3b1e      	subs	r3, #30
 8001ad4:	fa00 f203 	lsl.w	r2, r0, r3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	430a      	orrs	r2, r1
 8001ade:	619a      	str	r2, [r3, #24]
 8001ae0:	e019      	b.n	8001b16 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	6959      	ldr	r1, [r3, #20]
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	4613      	mov	r3, r2
 8001aee:	005b      	lsls	r3, r3, #1
 8001af0:	4413      	add	r3, r2
 8001af2:	2207      	movs	r2, #7
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	43db      	mvns	r3, r3
 8001afa:	4019      	ands	r1, r3
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	6898      	ldr	r0, [r3, #8]
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	4613      	mov	r3, r2
 8001b06:	005b      	lsls	r3, r3, #1
 8001b08:	4413      	add	r3, r2
 8001b0a:	fa00 f203 	lsl.w	r2, r0, r3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	430a      	orrs	r2, r1
 8001b14:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	695a      	ldr	r2, [r3, #20]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	08db      	lsrs	r3, r3, #3
 8001b22:	f003 0303 	and.w	r3, r3, #3
 8001b26:	005b      	lsls	r3, r3, #1
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	691b      	ldr	r3, [r3, #16]
 8001b32:	3b01      	subs	r3, #1
 8001b34:	2b03      	cmp	r3, #3
 8001b36:	d84f      	bhi.n	8001bd8 <HAL_ADC_ConfigChannel+0x28c>
 8001b38:	a201      	add	r2, pc, #4	@ (adr r2, 8001b40 <HAL_ADC_ConfigChannel+0x1f4>)
 8001b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b3e:	bf00      	nop
 8001b40:	08001b51 	.word	0x08001b51
 8001b44:	08001b73 	.word	0x08001b73
 8001b48:	08001b95 	.word	0x08001b95
 8001b4c:	08001bb7 	.word	0x08001bb7
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001b56:	4b9c      	ldr	r3, [pc, #624]	@ (8001dc8 <HAL_ADC_ConfigChannel+0x47c>)
 8001b58:	4013      	ands	r3, r2
 8001b5a:	683a      	ldr	r2, [r7, #0]
 8001b5c:	6812      	ldr	r2, [r2, #0]
 8001b5e:	0691      	lsls	r1, r2, #26
 8001b60:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001b62:	430a      	orrs	r2, r1
 8001b64:	431a      	orrs	r2, r3
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001b6e:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001b70:	e07b      	b.n	8001c6a <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001b78:	4b93      	ldr	r3, [pc, #588]	@ (8001dc8 <HAL_ADC_ConfigChannel+0x47c>)
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	683a      	ldr	r2, [r7, #0]
 8001b7e:	6812      	ldr	r2, [r2, #0]
 8001b80:	0691      	lsls	r1, r2, #26
 8001b82:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001b84:	430a      	orrs	r2, r1
 8001b86:	431a      	orrs	r2, r3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001b90:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001b92:	e06a      	b.n	8001c6a <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001b9a:	4b8b      	ldr	r3, [pc, #556]	@ (8001dc8 <HAL_ADC_ConfigChannel+0x47c>)
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	683a      	ldr	r2, [r7, #0]
 8001ba0:	6812      	ldr	r2, [r2, #0]
 8001ba2:	0691      	lsls	r1, r2, #26
 8001ba4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001ba6:	430a      	orrs	r2, r1
 8001ba8:	431a      	orrs	r2, r3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001bb2:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001bb4:	e059      	b.n	8001c6a <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001bbc:	4b82      	ldr	r3, [pc, #520]	@ (8001dc8 <HAL_ADC_ConfigChannel+0x47c>)
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	683a      	ldr	r2, [r7, #0]
 8001bc2:	6812      	ldr	r2, [r2, #0]
 8001bc4:	0691      	lsls	r1, r2, #26
 8001bc6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001bc8:	430a      	orrs	r2, r1
 8001bca:	431a      	orrs	r2, r3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001bd4:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001bd6:	e048      	b.n	8001c6a <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bde:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	069b      	lsls	r3, r3, #26
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d107      	bne.n	8001bfc <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001bfa:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001c02:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	069b      	lsls	r3, r3, #26
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d107      	bne.n	8001c20 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001c1e:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001c26:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	069b      	lsls	r3, r3, #26
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d107      	bne.n	8001c44 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001c42:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001c4a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	069b      	lsls	r3, r3, #26
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d107      	bne.n	8001c68 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001c66:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 8001c68:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	f003 0303 	and.w	r3, r3, #3
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d108      	bne.n	8001c8a <HAL_ADC_ConfigChannel+0x33e>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0301 	and.w	r3, r3, #1
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d101      	bne.n	8001c8a <HAL_ADC_ConfigChannel+0x33e>
 8001c86:	2301      	movs	r3, #1
 8001c88:	e000      	b.n	8001c8c <HAL_ADC_ConfigChannel+0x340>
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	f040 810a 	bne.w	8001ea6 <HAL_ADC_ConfigChannel+0x55a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	68db      	ldr	r3, [r3, #12]
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d00f      	beq.n	8001cba <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cac:	43da      	mvns	r2, r3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	400a      	ands	r2, r1
 8001cb4:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8001cb8:	e049      	b.n	8001d4e <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	409a      	lsls	r2, r3
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	430a      	orrs	r2, r1
 8001cd0:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	2b09      	cmp	r3, #9
 8001cda:	d91c      	bls.n	8001d16 <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	6999      	ldr	r1, [r3, #24]
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	4613      	mov	r3, r2
 8001ce8:	005b      	lsls	r3, r3, #1
 8001cea:	4413      	add	r3, r2
 8001cec:	3b1b      	subs	r3, #27
 8001cee:	2207      	movs	r2, #7
 8001cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf4:	43db      	mvns	r3, r3
 8001cf6:	4019      	ands	r1, r3
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	6898      	ldr	r0, [r3, #8]
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	4613      	mov	r3, r2
 8001d02:	005b      	lsls	r3, r3, #1
 8001d04:	4413      	add	r3, r2
 8001d06:	3b1b      	subs	r3, #27
 8001d08:	fa00 f203 	lsl.w	r2, r0, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	430a      	orrs	r2, r1
 8001d12:	619a      	str	r2, [r3, #24]
 8001d14:	e01b      	b.n	8001d4e <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	6959      	ldr	r1, [r3, #20]
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	1c5a      	adds	r2, r3, #1
 8001d22:	4613      	mov	r3, r2
 8001d24:	005b      	lsls	r3, r3, #1
 8001d26:	4413      	add	r3, r2
 8001d28:	2207      	movs	r2, #7
 8001d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2e:	43db      	mvns	r3, r3
 8001d30:	4019      	ands	r1, r3
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	6898      	ldr	r0, [r3, #8]
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	1c5a      	adds	r2, r3, #1
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	005b      	lsls	r3, r3, #1
 8001d40:	4413      	add	r3, r2
 8001d42:	fa00 f203 	lsl.w	r2, r0, r3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	430a      	orrs	r2, r1
 8001d4c:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d4e:	4b1f      	ldr	r3, [pc, #124]	@ (8001dcc <HAL_ADC_ConfigChannel+0x480>)
 8001d50:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	2b10      	cmp	r3, #16
 8001d58:	d105      	bne.n	8001d66 <HAL_ADC_ConfigChannel+0x41a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001d5a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d015      	beq.n	8001d92 <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001d6a:	2b11      	cmp	r3, #17
 8001d6c:	d105      	bne.n	8001d7a <HAL_ADC_ConfigChannel+0x42e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001d6e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d00b      	beq.n	8001d92 <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001d7e:	2b12      	cmp	r3, #18
 8001d80:	f040 8091 	bne.w	8001ea6 <HAL_ADC_ConfigChannel+0x55a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001d84:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	f040 808a 	bne.w	8001ea6 <HAL_ADC_ConfigChannel+0x55a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001d9a:	d102      	bne.n	8001da2 <HAL_ADC_ConfigChannel+0x456>
 8001d9c:	4b0c      	ldr	r3, [pc, #48]	@ (8001dd0 <HAL_ADC_ConfigChannel+0x484>)
 8001d9e:	60fb      	str	r3, [r7, #12]
 8001da0:	e002      	b.n	8001da8 <HAL_ADC_ConfigChannel+0x45c>
 8001da2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001da6:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	f003 0303 	and.w	r3, r3, #3
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d10e      	bne.n	8001dd4 <HAL_ADC_ConfigChannel+0x488>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 0301 	and.w	r3, r3, #1
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d107      	bne.n	8001dd4 <HAL_ADC_ConfigChannel+0x488>
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e006      	b.n	8001dd6 <HAL_ADC_ConfigChannel+0x48a>
 8001dc8:	83fff000 	.word	0x83fff000
 8001dcc:	50000300 	.word	0x50000300
 8001dd0:	50000100 	.word	0x50000100
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d150      	bne.n	8001e7c <HAL_ADC_ConfigChannel+0x530>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001dda:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d010      	beq.n	8001e02 <HAL_ADC_ConfigChannel+0x4b6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	f003 0303 	and.w	r3, r3, #3
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d107      	bne.n	8001dfc <HAL_ADC_ConfigChannel+0x4b0>
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 0301 	and.w	r3, r3, #1
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d101      	bne.n	8001dfc <HAL_ADC_ConfigChannel+0x4b0>
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e000      	b.n	8001dfe <HAL_ADC_ConfigChannel+0x4b2>
 8001dfc:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d13c      	bne.n	8001e7c <HAL_ADC_ConfigChannel+0x530>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	2b10      	cmp	r3, #16
 8001e08:	d11d      	bne.n	8001e46 <HAL_ADC_ConfigChannel+0x4fa>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001e12:	d118      	bne.n	8001e46 <HAL_ADC_ConfigChannel+0x4fa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001e14:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001e1c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001e1e:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001e20:	4b27      	ldr	r3, [pc, #156]	@ (8001ec0 <HAL_ADC_ConfigChannel+0x574>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a27      	ldr	r2, [pc, #156]	@ (8001ec4 <HAL_ADC_ConfigChannel+0x578>)
 8001e26:	fba2 2303 	umull	r2, r3, r2, r3
 8001e2a:	0c9a      	lsrs	r2, r3, #18
 8001e2c:	4613      	mov	r3, r2
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	4413      	add	r3, r2
 8001e32:	005b      	lsls	r3, r3, #1
 8001e34:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001e36:	e002      	b.n	8001e3e <HAL_ADC_ConfigChannel+0x4f2>
          {
            wait_loop_index--;
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	3b01      	subs	r3, #1
 8001e3c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d1f9      	bne.n	8001e38 <HAL_ADC_ConfigChannel+0x4ec>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001e44:	e02e      	b.n	8001ea4 <HAL_ADC_ConfigChannel+0x558>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	2b11      	cmp	r3, #17
 8001e4c:	d10b      	bne.n	8001e66 <HAL_ADC_ConfigChannel+0x51a>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001e56:	d106      	bne.n	8001e66 <HAL_ADC_ConfigChannel+0x51a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001e58:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8001e60:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001e62:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001e64:	e01e      	b.n	8001ea4 <HAL_ADC_ConfigChannel+0x558>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	2b12      	cmp	r3, #18
 8001e6c:	d11a      	bne.n	8001ea4 <HAL_ADC_ConfigChannel+0x558>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001e6e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001e76:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001e78:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001e7a:	e013      	b.n	8001ea4 <HAL_ADC_ConfigChannel+0x558>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e80:	f043 0220 	orr.w	r2, r3, #32
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8001e8e:	e00a      	b.n	8001ea6 <HAL_ADC_ConfigChannel+0x55a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e94:	f043 0220 	orr.w	r2, r3, #32
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8001ea2:	e000      	b.n	8001ea6 <HAL_ADC_ConfigChannel+0x55a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001ea4:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001eae:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	376c      	adds	r7, #108	@ 0x6c
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	20000000 	.word	0x20000000
 8001ec4:	431bde83 	.word	0x431bde83

08001ec8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b099      	sub	sp, #100	@ 0x64
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001ee0:	d102      	bne.n	8001ee8 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8001ee2:	4b5a      	ldr	r3, [pc, #360]	@ (800204c <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8001ee4:	60bb      	str	r3, [r7, #8]
 8001ee6:	e002      	b.n	8001eee <HAL_ADCEx_MultiModeConfigChannel+0x26>
 8001ee8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001eec:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d101      	bne.n	8001ef8 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e0a2      	b.n	800203e <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d101      	bne.n	8001f06 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001f02:	2302      	movs	r3, #2
 8001f04:	e09b      	b.n	800203e <HAL_ADCEx_MultiModeConfigChannel+0x176>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2201      	movs	r2, #1
 8001f0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	f003 0304 	and.w	r3, r3, #4
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d17f      	bne.n	800201c <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	f003 0304 	and.w	r3, r3, #4
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d179      	bne.n	800201c <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f28:	4b49      	ldr	r3, [pc, #292]	@ (8002050 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 8001f2a:	65bb      	str	r3, [r7, #88]	@ 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d040      	beq.n	8001fb6 <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001f34:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	6859      	ldr	r1, [r3, #4]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001f46:	035b      	lsls	r3, r3, #13
 8001f48:	430b      	orrs	r3, r1
 8001f4a:	431a      	orrs	r2, r3
 8001f4c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001f4e:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	f003 0303 	and.w	r3, r3, #3
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d108      	bne.n	8001f70 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 0301 	and.w	r3, r3, #1
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d101      	bne.n	8001f70 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e000      	b.n	8001f72 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8001f70:	2300      	movs	r3, #0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d15c      	bne.n	8002030 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	f003 0303 	and.w	r3, r3, #3
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d107      	bne.n	8001f92 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0301 	and.w	r3, r3, #1
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d101      	bne.n	8001f92 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e000      	b.n	8001f94 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8001f92:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d14b      	bne.n	8002030 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001f98:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8001fa0:	f023 030f 	bic.w	r3, r3, #15
 8001fa4:	683a      	ldr	r2, [r7, #0]
 8001fa6:	6811      	ldr	r1, [r2, #0]
 8001fa8:	683a      	ldr	r2, [r7, #0]
 8001faa:	6892      	ldr	r2, [r2, #8]
 8001fac:	430a      	orrs	r2, r1
 8001fae:	431a      	orrs	r2, r3
 8001fb0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001fb2:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001fb4:	e03c      	b.n	8002030 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001fb6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001fbe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001fc0:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	f003 0303 	and.w	r3, r3, #3
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d108      	bne.n	8001fe2 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0301 	and.w	r3, r3, #1
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d101      	bne.n	8001fe2 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e000      	b.n	8001fe4 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d123      	bne.n	8002030 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	f003 0303 	and.w	r3, r3, #3
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d107      	bne.n	8002004 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 0301 	and.w	r3, r3, #1
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d101      	bne.n	8002004 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8002000:	2301      	movs	r3, #1
 8002002:	e000      	b.n	8002006 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8002004:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002006:	2b00      	cmp	r3, #0
 8002008:	d112      	bne.n	8002030 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800200a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002012:	f023 030f 	bic.w	r3, r3, #15
 8002016:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002018:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800201a:	e009      	b.n	8002030 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002020:	f043 0220 	orr.w	r2, r3, #32
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800202e:	e000      	b.n	8002032 <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002030:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2200      	movs	r2, #0
 8002036:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800203a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
} 
 800203e:	4618      	mov	r0, r3
 8002040:	3764      	adds	r7, #100	@ 0x64
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	50000100 	.word	0x50000100
 8002050:	50000300 	.word	0x50000300

08002054 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002060:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002066:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800206a:	2b00      	cmp	r3, #0
 800206c:	d126      	bne.n	80020bc <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002072:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002084:	2b00      	cmp	r3, #0
 8002086:	d115      	bne.n	80020b4 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800208c:	2b00      	cmp	r3, #0
 800208e:	d111      	bne.n	80020b4 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002094:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020a0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d105      	bne.n	80020b4 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ac:	f043 0201 	orr.w	r2, r3, #1
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80020b4:	68f8      	ldr	r0, [r7, #12]
 80020b6:	f7ff f94d 	bl	8001354 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80020ba:	e004      	b.n	80020c6 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	4798      	blx	r3
}
 80020c6:	bf00      	nop
 80020c8:	3710      	adds	r7, #16
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}

080020ce <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80020ce:	b580      	push	{r7, lr}
 80020d0:	b084      	sub	sp, #16
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020da:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80020dc:	68f8      	ldr	r0, [r7, #12]
 80020de:	f7ff f943 	bl	8001368 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 80020e2:	bf00      	nop
 80020e4:	3710      	adds	r7, #16
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}

080020ea <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80020ea:	b580      	push	{r7, lr}
 80020ec:	b084      	sub	sp, #16
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020f6:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020fc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002108:	f043 0204 	orr.w	r2, r3, #4
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	645a      	str	r2, [r3, #68]	@ 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002110:	68f8      	ldr	r0, [r7, #12]
 8002112:	f7ff f933 	bl	800137c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002116:	bf00      	nop
 8002118:	3710      	adds	r7, #16
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
	...

08002120 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b084      	sub	sp, #16
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002128:	2300      	movs	r3, #0
 800212a:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	f003 0303 	and.w	r3, r3, #3
 8002136:	2b01      	cmp	r3, #1
 8002138:	d108      	bne.n	800214c <ADC_Enable+0x2c>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0301 	and.w	r3, r3, #1
 8002144:	2b01      	cmp	r3, #1
 8002146:	d101      	bne.n	800214c <ADC_Enable+0x2c>
 8002148:	2301      	movs	r3, #1
 800214a:	e000      	b.n	800214e <ADC_Enable+0x2e>
 800214c:	2300      	movs	r3, #0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d143      	bne.n	80021da <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	689a      	ldr	r2, [r3, #8]
 8002158:	4b22      	ldr	r3, [pc, #136]	@ (80021e4 <ADC_Enable+0xc4>)
 800215a:	4013      	ands	r3, r2
 800215c:	2b00      	cmp	r3, #0
 800215e:	d00d      	beq.n	800217c <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002164:	f043 0210 	orr.w	r2, r3, #16
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002170:	f043 0201 	orr.w	r2, r3, #1
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	645a      	str	r2, [r3, #68]	@ 0x44
      
      return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e02f      	b.n	80021dc <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	689a      	ldr	r2, [r3, #8]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f042 0201 	orr.w	r2, r2, #1
 800218a:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 800218c:	f7ff f8b2 	bl	80012f4 <HAL_GetTick>
 8002190:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002192:	e01b      	b.n	80021cc <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002194:	f7ff f8ae 	bl	80012f4 <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d914      	bls.n	80021cc <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 0301 	and.w	r3, r3, #1
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d00d      	beq.n	80021cc <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021b4:	f043 0210 	orr.w	r2, r3, #16
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021c0:	f043 0201 	orr.w	r2, r3, #1
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	e007      	b.n	80021dc <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0301 	and.w	r3, r3, #1
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d1dc      	bne.n	8002194 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80021da:	2300      	movs	r3, #0
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3710      	adds	r7, #16
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	8000003f 	.word	0x8000003f

080021e8 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b084      	sub	sp, #16
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80021f0:	2300      	movs	r3, #0
 80021f2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	f003 0303 	and.w	r3, r3, #3
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d108      	bne.n	8002214 <ADC_Disable+0x2c>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0301 	and.w	r3, r3, #1
 800220c:	2b01      	cmp	r3, #1
 800220e:	d101      	bne.n	8002214 <ADC_Disable+0x2c>
 8002210:	2301      	movs	r3, #1
 8002212:	e000      	b.n	8002216 <ADC_Disable+0x2e>
 8002214:	2300      	movs	r3, #0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d047      	beq.n	80022aa <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	f003 030d 	and.w	r3, r3, #13
 8002224:	2b01      	cmp	r3, #1
 8002226:	d10f      	bne.n	8002248 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	689a      	ldr	r2, [r3, #8]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f042 0202 	orr.w	r2, r2, #2
 8002236:	609a      	str	r2, [r3, #8]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	2203      	movs	r2, #3
 800223e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002240:	f7ff f858 	bl	80012f4 <HAL_GetTick>
 8002244:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002246:	e029      	b.n	800229c <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800224c:	f043 0210 	orr.w	r2, r3, #16
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002258:	f043 0201 	orr.w	r2, r3, #1
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e023      	b.n	80022ac <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002264:	f7ff f846 	bl	80012f4 <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	2b02      	cmp	r3, #2
 8002270:	d914      	bls.n	800229c <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	f003 0301 	and.w	r3, r3, #1
 800227c:	2b01      	cmp	r3, #1
 800227e:	d10d      	bne.n	800229c <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002284:	f043 0210 	orr.w	r2, r3, #16
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002290:	f043 0201 	orr.w	r2, r3, #1
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	e007      	b.n	80022ac <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	f003 0301 	and.w	r3, r3, #1
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d0dc      	beq.n	8002264 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80022aa:	2300      	movs	r3, #0
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3710      	adds	r7, #16
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}

080022b4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d101      	bne.n	80022c6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e0ed      	b.n	80024a2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d102      	bne.n	80022d8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f7fe fdc6 	bl	8000e64 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f042 0201 	orr.w	r2, r2, #1
 80022e6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80022e8:	f7ff f804 	bl	80012f4 <HAL_GetTick>
 80022ec:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80022ee:	e012      	b.n	8002316 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80022f0:	f7ff f800 	bl	80012f4 <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	2b0a      	cmp	r3, #10
 80022fc:	d90b      	bls.n	8002316 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002302:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2205      	movs	r2, #5
 800230e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e0c5      	b.n	80024a2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f003 0301 	and.w	r3, r3, #1
 8002320:	2b00      	cmp	r3, #0
 8002322:	d0e5      	beq.n	80022f0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f022 0202 	bic.w	r2, r2, #2
 8002332:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002334:	f7fe ffde 	bl	80012f4 <HAL_GetTick>
 8002338:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800233a:	e012      	b.n	8002362 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800233c:	f7fe ffda 	bl	80012f4 <HAL_GetTick>
 8002340:	4602      	mov	r2, r0
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	2b0a      	cmp	r3, #10
 8002348:	d90b      	bls.n	8002362 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800234e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2205      	movs	r2, #5
 800235a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e09f      	b.n	80024a2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f003 0302 	and.w	r3, r3, #2
 800236c:	2b00      	cmp	r3, #0
 800236e:	d1e5      	bne.n	800233c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	7e1b      	ldrb	r3, [r3, #24]
 8002374:	2b01      	cmp	r3, #1
 8002376:	d108      	bne.n	800238a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002386:	601a      	str	r2, [r3, #0]
 8002388:	e007      	b.n	800239a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002398:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	7e5b      	ldrb	r3, [r3, #25]
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d108      	bne.n	80023b4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80023b0:	601a      	str	r2, [r3, #0]
 80023b2:	e007      	b.n	80023c4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80023c2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	7e9b      	ldrb	r3, [r3, #26]
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d108      	bne.n	80023de <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f042 0220 	orr.w	r2, r2, #32
 80023da:	601a      	str	r2, [r3, #0]
 80023dc:	e007      	b.n	80023ee <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f022 0220 	bic.w	r2, r2, #32
 80023ec:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	7edb      	ldrb	r3, [r3, #27]
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d108      	bne.n	8002408 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f022 0210 	bic.w	r2, r2, #16
 8002404:	601a      	str	r2, [r3, #0]
 8002406:	e007      	b.n	8002418 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f042 0210 	orr.w	r2, r2, #16
 8002416:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	7f1b      	ldrb	r3, [r3, #28]
 800241c:	2b01      	cmp	r3, #1
 800241e:	d108      	bne.n	8002432 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f042 0208 	orr.w	r2, r2, #8
 800242e:	601a      	str	r2, [r3, #0]
 8002430:	e007      	b.n	8002442 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f022 0208 	bic.w	r2, r2, #8
 8002440:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	7f5b      	ldrb	r3, [r3, #29]
 8002446:	2b01      	cmp	r3, #1
 8002448:	d108      	bne.n	800245c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f042 0204 	orr.w	r2, r2, #4
 8002458:	601a      	str	r2, [r3, #0]
 800245a:	e007      	b.n	800246c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f022 0204 	bic.w	r2, r2, #4
 800246a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	689a      	ldr	r2, [r3, #8]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	431a      	orrs	r2, r3
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	691b      	ldr	r3, [r3, #16]
 800247a:	431a      	orrs	r2, r3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	695b      	ldr	r3, [r3, #20]
 8002480:	ea42 0103 	orr.w	r1, r2, r3
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	1e5a      	subs	r2, r3, #1
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	430a      	orrs	r2, r1
 8002490:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2200      	movs	r2, #0
 8002496:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2201      	movs	r2, #1
 800249c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80024a0:	2300      	movs	r3, #0
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3710      	adds	r7, #16
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}

080024aa <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80024aa:	b480      	push	{r7}
 80024ac:	b087      	sub	sp, #28
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
 80024b2:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024c0:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80024c2:	7cfb      	ldrb	r3, [r7, #19]
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d003      	beq.n	80024d0 <HAL_CAN_ConfigFilter+0x26>
 80024c8:	7cfb      	ldrb	r3, [r7, #19]
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	f040 80aa 	bne.w	8002624 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80024d6:	f043 0201 	orr.w	r2, r3, #1
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	695b      	ldr	r3, [r3, #20]
 80024e4:	f003 031f 	and.w	r3, r3, #31
 80024e8:	2201      	movs	r2, #1
 80024ea:	fa02 f303 	lsl.w	r3, r2, r3
 80024ee:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	43db      	mvns	r3, r3
 80024fa:	401a      	ands	r2, r3
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	69db      	ldr	r3, [r3, #28]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d123      	bne.n	8002552 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	43db      	mvns	r3, r3
 8002514:	401a      	ands	r2, r3
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002528:	683a      	ldr	r2, [r7, #0]
 800252a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800252c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	3248      	adds	r2, #72	@ 0x48
 8002532:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002546:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002548:	6979      	ldr	r1, [r7, #20]
 800254a:	3348      	adds	r3, #72	@ 0x48
 800254c:	00db      	lsls	r3, r3, #3
 800254e:	440b      	add	r3, r1
 8002550:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	69db      	ldr	r3, [r3, #28]
 8002556:	2b01      	cmp	r3, #1
 8002558:	d122      	bne.n	80025a0 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	431a      	orrs	r2, r3
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002576:	683a      	ldr	r2, [r7, #0]
 8002578:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800257a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	3248      	adds	r2, #72	@ 0x48
 8002580:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	68db      	ldr	r3, [r3, #12]
 800258e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002594:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002596:	6979      	ldr	r1, [r7, #20]
 8002598:	3348      	adds	r3, #72	@ 0x48
 800259a:	00db      	lsls	r3, r3, #3
 800259c:	440b      	add	r3, r1
 800259e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	699b      	ldr	r3, [r3, #24]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d109      	bne.n	80025bc <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	43db      	mvns	r3, r3
 80025b2:	401a      	ands	r2, r3
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80025ba:	e007      	b.n	80025cc <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	431a      	orrs	r2, r3
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	691b      	ldr	r3, [r3, #16]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d109      	bne.n	80025e8 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	43db      	mvns	r3, r3
 80025de:	401a      	ands	r2, r3
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80025e6:	e007      	b.n	80025f8 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	431a      	orrs	r2, r3
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	6a1b      	ldr	r3, [r3, #32]
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d107      	bne.n	8002610 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	431a      	orrs	r2, r3
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002616:	f023 0201 	bic.w	r2, r3, #1
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8002620:	2300      	movs	r3, #0
 8002622:	e006      	b.n	8002632 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002628:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
  }
}
 8002632:	4618      	mov	r0, r3
 8002634:	371c      	adds	r7, #28
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr

0800263e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800263e:	b580      	push	{r7, lr}
 8002640:	b084      	sub	sp, #16
 8002642:	af00      	add	r7, sp, #0
 8002644:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	f893 3020 	ldrb.w	r3, [r3, #32]
 800264c:	b2db      	uxtb	r3, r3
 800264e:	2b01      	cmp	r3, #1
 8002650:	d12e      	bne.n	80026b0 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2202      	movs	r2, #2
 8002656:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f022 0201 	bic.w	r2, r2, #1
 8002668:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800266a:	f7fe fe43 	bl	80012f4 <HAL_GetTick>
 800266e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002670:	e012      	b.n	8002698 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002672:	f7fe fe3f 	bl	80012f4 <HAL_GetTick>
 8002676:	4602      	mov	r2, r0
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	2b0a      	cmp	r3, #10
 800267e:	d90b      	bls.n	8002698 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002684:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2205      	movs	r2, #5
 8002690:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e012      	b.n	80026be <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f003 0301 	and.w	r3, r3, #1
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d1e5      	bne.n	8002672 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80026ac:	2300      	movs	r3, #0
 80026ae:	e006      	b.n	80026be <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026b4:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
  }
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3710      	adds	r7, #16
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}

080026c6 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 80026c6:	b580      	push	{r7, lr}
 80026c8:	b084      	sub	sp, #16
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d133      	bne.n	8002742 <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f042 0201 	orr.w	r2, r2, #1
 80026e8:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80026ea:	f7fe fe03 	bl	80012f4 <HAL_GetTick>
 80026ee:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80026f0:	e012      	b.n	8002718 <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80026f2:	f7fe fdff 	bl	80012f4 <HAL_GetTick>
 80026f6:	4602      	mov	r2, r0
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	2b0a      	cmp	r3, #10
 80026fe:	d90b      	bls.n	8002718 <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002704:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2205      	movs	r2, #5
 8002710:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	e01b      	b.n	8002750 <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	f003 0301 	and.w	r3, r3, #1
 8002722:	2b00      	cmp	r3, #0
 8002724:	d0e5      	beq.n	80026f2 <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f022 0202 	bic.w	r2, r2, #2
 8002734:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2201      	movs	r2, #1
 800273a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 800273e:	2300      	movs	r3, #0
 8002740:	e006      	b.n	8002750 <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002746:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
  }
}
 8002750:	4618      	mov	r0, r3
 8002752:	3710      	adds	r7, #16
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}

08002758 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002758:	b480      	push	{r7}
 800275a:	b089      	sub	sp, #36	@ 0x24
 800275c:	af00      	add	r7, sp, #0
 800275e:	60f8      	str	r0, [r7, #12]
 8002760:	60b9      	str	r1, [r7, #8]
 8002762:	607a      	str	r2, [r7, #4]
 8002764:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	f893 3020 	ldrb.w	r3, [r3, #32]
 800276c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002776:	7ffb      	ldrb	r3, [r7, #31]
 8002778:	2b01      	cmp	r3, #1
 800277a:	d003      	beq.n	8002784 <HAL_CAN_AddTxMessage+0x2c>
 800277c:	7ffb      	ldrb	r3, [r7, #31]
 800277e:	2b02      	cmp	r3, #2
 8002780:	f040 80ad 	bne.w	80028de <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002784:	69bb      	ldr	r3, [r7, #24]
 8002786:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d10a      	bne.n	80027a4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800278e:	69bb      	ldr	r3, [r7, #24]
 8002790:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002794:	2b00      	cmp	r3, #0
 8002796:	d105      	bne.n	80027a4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002798:	69bb      	ldr	r3, [r7, #24]
 800279a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800279e:	2b00      	cmp	r3, #0
 80027a0:	f000 8095 	beq.w	80028ce <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80027a4:	69bb      	ldr	r3, [r7, #24]
 80027a6:	0e1b      	lsrs	r3, r3, #24
 80027a8:	f003 0303 	and.w	r3, r3, #3
 80027ac:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80027ae:	2201      	movs	r2, #1
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	409a      	lsls	r2, r3
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d10d      	bne.n	80027dc <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80027ca:	68f9      	ldr	r1, [r7, #12]
 80027cc:	6809      	ldr	r1, [r1, #0]
 80027ce:	431a      	orrs	r2, r3
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	3318      	adds	r3, #24
 80027d4:	011b      	lsls	r3, r3, #4
 80027d6:	440b      	add	r3, r1
 80027d8:	601a      	str	r2, [r3, #0]
 80027da:	e00f      	b.n	80027fc <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80027e6:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80027ec:	68f9      	ldr	r1, [r7, #12]
 80027ee:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80027f0:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	3318      	adds	r3, #24
 80027f6:	011b      	lsls	r3, r3, #4
 80027f8:	440b      	add	r3, r1
 80027fa:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	6819      	ldr	r1, [r3, #0]
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	691a      	ldr	r2, [r3, #16]
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	3318      	adds	r3, #24
 8002808:	011b      	lsls	r3, r3, #4
 800280a:	440b      	add	r3, r1
 800280c:	3304      	adds	r3, #4
 800280e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	7d1b      	ldrb	r3, [r3, #20]
 8002814:	2b01      	cmp	r3, #1
 8002816:	d111      	bne.n	800283c <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	3318      	adds	r3, #24
 8002820:	011b      	lsls	r3, r3, #4
 8002822:	4413      	add	r3, r2
 8002824:	3304      	adds	r3, #4
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	68fa      	ldr	r2, [r7, #12]
 800282a:	6811      	ldr	r1, [r2, #0]
 800282c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	3318      	adds	r3, #24
 8002834:	011b      	lsls	r3, r3, #4
 8002836:	440b      	add	r3, r1
 8002838:	3304      	adds	r3, #4
 800283a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	3307      	adds	r3, #7
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	061a      	lsls	r2, r3, #24
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	3306      	adds	r3, #6
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	041b      	lsls	r3, r3, #16
 800284c:	431a      	orrs	r2, r3
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	3305      	adds	r3, #5
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	021b      	lsls	r3, r3, #8
 8002856:	4313      	orrs	r3, r2
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	3204      	adds	r2, #4
 800285c:	7812      	ldrb	r2, [r2, #0]
 800285e:	4610      	mov	r0, r2
 8002860:	68fa      	ldr	r2, [r7, #12]
 8002862:	6811      	ldr	r1, [r2, #0]
 8002864:	ea43 0200 	orr.w	r2, r3, r0
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	011b      	lsls	r3, r3, #4
 800286c:	440b      	add	r3, r1
 800286e:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8002872:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	3303      	adds	r3, #3
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	061a      	lsls	r2, r3, #24
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	3302      	adds	r3, #2
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	041b      	lsls	r3, r3, #16
 8002884:	431a      	orrs	r2, r3
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	3301      	adds	r3, #1
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	021b      	lsls	r3, r3, #8
 800288e:	4313      	orrs	r3, r2
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	7812      	ldrb	r2, [r2, #0]
 8002894:	4610      	mov	r0, r2
 8002896:	68fa      	ldr	r2, [r7, #12]
 8002898:	6811      	ldr	r1, [r2, #0]
 800289a:	ea43 0200 	orr.w	r2, r3, r0
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	011b      	lsls	r3, r3, #4
 80028a2:	440b      	add	r3, r1
 80028a4:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80028a8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	3318      	adds	r3, #24
 80028b2:	011b      	lsls	r3, r3, #4
 80028b4:	4413      	add	r3, r2
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	68fa      	ldr	r2, [r7, #12]
 80028ba:	6811      	ldr	r1, [r2, #0]
 80028bc:	f043 0201 	orr.w	r2, r3, #1
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	3318      	adds	r3, #24
 80028c4:	011b      	lsls	r3, r3, #4
 80028c6:	440b      	add	r3, r1
 80028c8:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80028ca:	2300      	movs	r3, #0
 80028cc:	e00e      	b.n	80028ec <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028d2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e006      	b.n	80028ec <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028e2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
  }
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3724      	adds	r7, #36	@ 0x24
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr

080028f8 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b085      	sub	sp, #20
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8002900:	2300      	movs	r3, #0
 8002902:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	f893 3020 	ldrb.w	r3, [r3, #32]
 800290a:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 800290c:	7afb      	ldrb	r3, [r7, #11]
 800290e:	2b01      	cmp	r3, #1
 8002910:	d002      	beq.n	8002918 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8002912:	7afb      	ldrb	r3, [r7, #11]
 8002914:	2b02      	cmp	r3, #2
 8002916:	d11d      	bne.n	8002954 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d002      	beq.n	800292c <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	3301      	adds	r3, #1
 800292a:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d002      	beq.n	8002940 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	3301      	adds	r3, #1
 800293e:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d002      	beq.n	8002954 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	3301      	adds	r3, #1
 8002952:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8002954:	68fb      	ldr	r3, [r7, #12]
}
 8002956:	4618      	mov	r0, r3
 8002958:	3714      	adds	r7, #20
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr

08002962 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002962:	b480      	push	{r7}
 8002964:	b087      	sub	sp, #28
 8002966:	af00      	add	r7, sp, #0
 8002968:	60f8      	str	r0, [r7, #12]
 800296a:	60b9      	str	r1, [r7, #8]
 800296c:	607a      	str	r2, [r7, #4]
 800296e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002976:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002978:	7dfb      	ldrb	r3, [r7, #23]
 800297a:	2b01      	cmp	r3, #1
 800297c:	d003      	beq.n	8002986 <HAL_CAN_GetRxMessage+0x24>
 800297e:	7dfb      	ldrb	r3, [r7, #23]
 8002980:	2b02      	cmp	r3, #2
 8002982:	f040 8103 	bne.w	8002b8c <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d10e      	bne.n	80029aa <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	f003 0303 	and.w	r3, r3, #3
 8002996:	2b00      	cmp	r3, #0
 8002998:	d116      	bne.n	80029c8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800299e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e0f7      	b.n	8002b9a <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	691b      	ldr	r3, [r3, #16]
 80029b0:	f003 0303 	and.w	r3, r3, #3
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d107      	bne.n	80029c8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029bc:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e0e8      	b.n	8002b9a <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	331b      	adds	r3, #27
 80029d0:	011b      	lsls	r3, r3, #4
 80029d2:	4413      	add	r3, r2
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0204 	and.w	r2, r3, #4
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d10c      	bne.n	8002a00 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	331b      	adds	r3, #27
 80029ee:	011b      	lsls	r3, r3, #4
 80029f0:	4413      	add	r3, r2
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	0d5b      	lsrs	r3, r3, #21
 80029f6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	601a      	str	r2, [r3, #0]
 80029fe:	e00b      	b.n	8002a18 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	331b      	adds	r3, #27
 8002a08:	011b      	lsls	r3, r3, #4
 8002a0a:	4413      	add	r3, r2
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	08db      	lsrs	r3, r3, #3
 8002a10:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	331b      	adds	r3, #27
 8002a20:	011b      	lsls	r3, r3, #4
 8002a22:	4413      	add	r3, r2
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0202 	and.w	r2, r3, #2
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	331b      	adds	r3, #27
 8002a36:	011b      	lsls	r3, r3, #4
 8002a38:	4413      	add	r3, r2
 8002a3a:	3304      	adds	r3, #4
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0308 	and.w	r3, r3, #8
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d003      	beq.n	8002a4e <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2208      	movs	r2, #8
 8002a4a:	611a      	str	r2, [r3, #16]
 8002a4c:	e00b      	b.n	8002a66 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	331b      	adds	r3, #27
 8002a56:	011b      	lsls	r3, r3, #4
 8002a58:	4413      	add	r3, r2
 8002a5a:	3304      	adds	r3, #4
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 020f 	and.w	r2, r3, #15
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	331b      	adds	r3, #27
 8002a6e:	011b      	lsls	r3, r3, #4
 8002a70:	4413      	add	r3, r2
 8002a72:	3304      	adds	r3, #4
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	0a1b      	lsrs	r3, r3, #8
 8002a78:	b2da      	uxtb	r2, r3
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	331b      	adds	r3, #27
 8002a86:	011b      	lsls	r3, r3, #4
 8002a88:	4413      	add	r3, r2
 8002a8a:	3304      	adds	r3, #4
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	0c1b      	lsrs	r3, r3, #16
 8002a90:	b29a      	uxth	r2, r3
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	011b      	lsls	r3, r3, #4
 8002a9e:	4413      	add	r3, r2
 8002aa0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	b2da      	uxtb	r2, r3
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	011b      	lsls	r3, r3, #4
 8002ab4:	4413      	add	r3, r2
 8002ab6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	0a1a      	lsrs	r2, r3, #8
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	3301      	adds	r3, #1
 8002ac2:	b2d2      	uxtb	r2, r2
 8002ac4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	011b      	lsls	r3, r3, #4
 8002ace:	4413      	add	r3, r2
 8002ad0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	0c1a      	lsrs	r2, r3, #16
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	3302      	adds	r3, #2
 8002adc:	b2d2      	uxtb	r2, r2
 8002ade:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	011b      	lsls	r3, r3, #4
 8002ae8:	4413      	add	r3, r2
 8002aea:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	0e1a      	lsrs	r2, r3, #24
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	3303      	adds	r3, #3
 8002af6:	b2d2      	uxtb	r2, r2
 8002af8:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	011b      	lsls	r3, r3, #4
 8002b02:	4413      	add	r3, r2
 8002b04:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	3304      	adds	r3, #4
 8002b0e:	b2d2      	uxtb	r2, r2
 8002b10:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	011b      	lsls	r3, r3, #4
 8002b1a:	4413      	add	r3, r2
 8002b1c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	0a1a      	lsrs	r2, r3, #8
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	3305      	adds	r3, #5
 8002b28:	b2d2      	uxtb	r2, r2
 8002b2a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	011b      	lsls	r3, r3, #4
 8002b34:	4413      	add	r3, r2
 8002b36:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	0c1a      	lsrs	r2, r3, #16
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	3306      	adds	r3, #6
 8002b42:	b2d2      	uxtb	r2, r2
 8002b44:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	011b      	lsls	r3, r3, #4
 8002b4e:	4413      	add	r3, r2
 8002b50:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	0e1a      	lsrs	r2, r3, #24
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	3307      	adds	r3, #7
 8002b5c:	b2d2      	uxtb	r2, r2
 8002b5e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d108      	bne.n	8002b78 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	68da      	ldr	r2, [r3, #12]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f042 0220 	orr.w	r2, r2, #32
 8002b74:	60da      	str	r2, [r3, #12]
 8002b76:	e007      	b.n	8002b88 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	691a      	ldr	r2, [r3, #16]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f042 0220 	orr.w	r2, r2, #32
 8002b86:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	e006      	b.n	8002b9a <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b90:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
  }
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	371c      	adds	r7, #28
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr

08002ba6 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002ba6:	b480      	push	{r7}
 8002ba8:	b085      	sub	sp, #20
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	6078      	str	r0, [r7, #4]
 8002bae:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bb6:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002bb8:	7bfb      	ldrb	r3, [r7, #15]
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d002      	beq.n	8002bc4 <HAL_CAN_ActivateNotification+0x1e>
 8002bbe:	7bfb      	ldrb	r3, [r7, #15]
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	d109      	bne.n	8002bd8 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	6959      	ldr	r1, [r3, #20]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	683a      	ldr	r2, [r7, #0]
 8002bd0:	430a      	orrs	r2, r1
 8002bd2:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	e006      	b.n	8002be6 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bdc:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
  }
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3714      	adds	r7, #20
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr

08002bf2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002bf2:	b580      	push	{r7, lr}
 8002bf4:	b08a      	sub	sp, #40	@ 0x28
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	695b      	ldr	r3, [r3, #20]
 8002c04:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	691b      	ldr	r3, [r3, #16]
 8002c24:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	699b      	ldr	r3, [r3, #24]
 8002c2c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002c2e:	6a3b      	ldr	r3, [r7, #32]
 8002c30:	f003 0301 	and.w	r3, r3, #1
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d07c      	beq.n	8002d32 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002c38:	69bb      	ldr	r3, [r7, #24]
 8002c3a:	f003 0301 	and.w	r3, r3, #1
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d023      	beq.n	8002c8a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	2201      	movs	r2, #1
 8002c48:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002c4a:	69bb      	ldr	r3, [r7, #24]
 8002c4c:	f003 0302 	and.w	r3, r3, #2
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d003      	beq.n	8002c5c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f000 f983 	bl	8002f60 <HAL_CAN_TxMailbox0CompleteCallback>
 8002c5a:	e016      	b.n	8002c8a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002c5c:	69bb      	ldr	r3, [r7, #24]
 8002c5e:	f003 0304 	and.w	r3, r3, #4
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d004      	beq.n	8002c70 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c68:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002c6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c6e:	e00c      	b.n	8002c8a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002c70:	69bb      	ldr	r3, [r7, #24]
 8002c72:	f003 0308 	and.w	r3, r3, #8
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d004      	beq.n	8002c84 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c7c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002c80:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c82:	e002      	b.n	8002c8a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f000 f989 	bl	8002f9c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002c8a:	69bb      	ldr	r3, [r7, #24]
 8002c8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d024      	beq.n	8002cde <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002c9c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002c9e:	69bb      	ldr	r3, [r7, #24]
 8002ca0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d003      	beq.n	8002cb0 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	f000 f963 	bl	8002f74 <HAL_CAN_TxMailbox1CompleteCallback>
 8002cae:	e016      	b.n	8002cde <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002cb0:	69bb      	ldr	r3, [r7, #24]
 8002cb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d004      	beq.n	8002cc4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cbc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002cc0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cc2:	e00c      	b.n	8002cde <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d004      	beq.n	8002cd8 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cd0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002cd4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cd6:	e002      	b.n	8002cde <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f000 f969 	bl	8002fb0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002cde:	69bb      	ldr	r3, [r7, #24]
 8002ce0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d024      	beq.n	8002d32 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002cf0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002cf2:	69bb      	ldr	r3, [r7, #24]
 8002cf4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d003      	beq.n	8002d04 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	f000 f943 	bl	8002f88 <HAL_CAN_TxMailbox2CompleteCallback>
 8002d02:	e016      	b.n	8002d32 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002d04:	69bb      	ldr	r3, [r7, #24]
 8002d06:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d004      	beq.n	8002d18 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d10:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002d14:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d16:	e00c      	b.n	8002d32 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002d18:	69bb      	ldr	r3, [r7, #24]
 8002d1a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d004      	beq.n	8002d2c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d28:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d2a:	e002      	b.n	8002d32 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002d2c:	6878      	ldr	r0, [r7, #4]
 8002d2e:	f000 f949 	bl	8002fc4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002d32:	6a3b      	ldr	r3, [r7, #32]
 8002d34:	f003 0308 	and.w	r3, r3, #8
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d00c      	beq.n	8002d56 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	f003 0310 	and.w	r3, r3, #16
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d007      	beq.n	8002d56 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d48:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002d4c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	2210      	movs	r2, #16
 8002d54:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002d56:	6a3b      	ldr	r3, [r7, #32]
 8002d58:	f003 0304 	and.w	r3, r3, #4
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d00b      	beq.n	8002d78 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	f003 0308 	and.w	r3, r3, #8
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d006      	beq.n	8002d78 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	2208      	movs	r2, #8
 8002d70:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f000 f930 	bl	8002fd8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002d78:	6a3b      	ldr	r3, [r7, #32]
 8002d7a:	f003 0302 	and.w	r3, r3, #2
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d009      	beq.n	8002d96 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	f003 0303 	and.w	r3, r3, #3
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d002      	beq.n	8002d96 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f7fd fb7b 	bl	800048c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002d96:	6a3b      	ldr	r3, [r7, #32]
 8002d98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d00c      	beq.n	8002dba <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	f003 0310 	and.w	r3, r3, #16
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d007      	beq.n	8002dba <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dac:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002db0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	2210      	movs	r2, #16
 8002db8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002dba:	6a3b      	ldr	r3, [r7, #32]
 8002dbc:	f003 0320 	and.w	r3, r3, #32
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d00b      	beq.n	8002ddc <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	f003 0308 	and.w	r3, r3, #8
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d006      	beq.n	8002ddc <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	2208      	movs	r2, #8
 8002dd4:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f000 f912 	bl	8003000 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002ddc:	6a3b      	ldr	r3, [r7, #32]
 8002dde:	f003 0310 	and.w	r3, r3, #16
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d009      	beq.n	8002dfa <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	691b      	ldr	r3, [r3, #16]
 8002dec:	f003 0303 	and.w	r3, r3, #3
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d002      	beq.n	8002dfa <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f000 f8f9 	bl	8002fec <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002dfa:	6a3b      	ldr	r3, [r7, #32]
 8002dfc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d00b      	beq.n	8002e1c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	f003 0310 	and.w	r3, r3, #16
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d006      	beq.n	8002e1c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	2210      	movs	r2, #16
 8002e14:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f000 f8fc 	bl	8003014 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002e1c:	6a3b      	ldr	r3, [r7, #32]
 8002e1e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d00b      	beq.n	8002e3e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	f003 0308 	and.w	r3, r3, #8
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d006      	beq.n	8002e3e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	2208      	movs	r2, #8
 8002e36:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f000 f8f5 	bl	8003028 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002e3e:	6a3b      	ldr	r3, [r7, #32]
 8002e40:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d07b      	beq.n	8002f40 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002e48:	69fb      	ldr	r3, [r7, #28]
 8002e4a:	f003 0304 	and.w	r3, r3, #4
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d072      	beq.n	8002f38 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002e52:	6a3b      	ldr	r3, [r7, #32]
 8002e54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d008      	beq.n	8002e6e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d003      	beq.n	8002e6e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e68:	f043 0301 	orr.w	r3, r3, #1
 8002e6c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002e6e:	6a3b      	ldr	r3, [r7, #32]
 8002e70:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d008      	beq.n	8002e8a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d003      	beq.n	8002e8a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e84:	f043 0302 	orr.w	r3, r3, #2
 8002e88:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002e8a:	6a3b      	ldr	r3, [r7, #32]
 8002e8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d008      	beq.n	8002ea6 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d003      	beq.n	8002ea6 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ea0:	f043 0304 	orr.w	r3, r3, #4
 8002ea4:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002ea6:	6a3b      	ldr	r3, [r7, #32]
 8002ea8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d043      	beq.n	8002f38 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d03e      	beq.n	8002f38 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002ec0:	2b60      	cmp	r3, #96	@ 0x60
 8002ec2:	d02b      	beq.n	8002f1c <HAL_CAN_IRQHandler+0x32a>
 8002ec4:	2b60      	cmp	r3, #96	@ 0x60
 8002ec6:	d82e      	bhi.n	8002f26 <HAL_CAN_IRQHandler+0x334>
 8002ec8:	2b50      	cmp	r3, #80	@ 0x50
 8002eca:	d022      	beq.n	8002f12 <HAL_CAN_IRQHandler+0x320>
 8002ecc:	2b50      	cmp	r3, #80	@ 0x50
 8002ece:	d82a      	bhi.n	8002f26 <HAL_CAN_IRQHandler+0x334>
 8002ed0:	2b40      	cmp	r3, #64	@ 0x40
 8002ed2:	d019      	beq.n	8002f08 <HAL_CAN_IRQHandler+0x316>
 8002ed4:	2b40      	cmp	r3, #64	@ 0x40
 8002ed6:	d826      	bhi.n	8002f26 <HAL_CAN_IRQHandler+0x334>
 8002ed8:	2b30      	cmp	r3, #48	@ 0x30
 8002eda:	d010      	beq.n	8002efe <HAL_CAN_IRQHandler+0x30c>
 8002edc:	2b30      	cmp	r3, #48	@ 0x30
 8002ede:	d822      	bhi.n	8002f26 <HAL_CAN_IRQHandler+0x334>
 8002ee0:	2b10      	cmp	r3, #16
 8002ee2:	d002      	beq.n	8002eea <HAL_CAN_IRQHandler+0x2f8>
 8002ee4:	2b20      	cmp	r3, #32
 8002ee6:	d005      	beq.n	8002ef4 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002ee8:	e01d      	b.n	8002f26 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eec:	f043 0308 	orr.w	r3, r3, #8
 8002ef0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002ef2:	e019      	b.n	8002f28 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ef6:	f043 0310 	orr.w	r3, r3, #16
 8002efa:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002efc:	e014      	b.n	8002f28 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f00:	f043 0320 	orr.w	r3, r3, #32
 8002f04:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002f06:	e00f      	b.n	8002f28 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002f0e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002f10:	e00a      	b.n	8002f28 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f18:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002f1a:	e005      	b.n	8002f28 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f22:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002f24:	e000      	b.n	8002f28 <HAL_CAN_IRQHandler+0x336>
            break;
 8002f26:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	699a      	ldr	r2, [r3, #24]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002f36:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	2204      	movs	r2, #4
 8002f3e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d008      	beq.n	8002f58 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f4c:	431a      	orrs	r2, r3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f000 f872 	bl	800303c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002f58:	bf00      	nop
 8002f5a:	3728      	adds	r7, #40	@ 0x28
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}

08002f60 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002f68:	bf00      	nop
 8002f6a:	370c      	adds	r7, #12
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr

08002f74 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002f7c:	bf00      	nop
 8002f7e:	370c      	adds	r7, #12
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr

08002f88 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002f90:	bf00      	nop
 8002f92:	370c      	adds	r7, #12
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr

08002f9c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002fa4:	bf00      	nop
 8002fa6:	370c      	adds	r7, #12
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr

08002fb0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002fb8:	bf00      	nop
 8002fba:	370c      	adds	r7, #12
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr

08002fc4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002fcc:	bf00      	nop
 8002fce:	370c      	adds	r7, #12
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr

08002fd8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002fe0:	bf00      	nop
 8002fe2:	370c      	adds	r7, #12
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr

08002fec <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002ff4:	bf00      	nop
 8002ff6:	370c      	adds	r7, #12
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr

08003000 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003008:	bf00      	nop
 800300a:	370c      	adds	r7, #12
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr

08003014 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800301c:	bf00      	nop
 800301e:	370c      	adds	r7, #12
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr

08003028 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003030:	bf00      	nop
 8003032:	370c      	adds	r7, #12
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr

0800303c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003044:	bf00      	nop
 8003046:	370c      	adds	r7, #12
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr

08003050 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003050:	b480      	push	{r7}
 8003052:	b085      	sub	sp, #20
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f003 0307 	and.w	r3, r3, #7
 800305e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003060:	4b0c      	ldr	r3, [pc, #48]	@ (8003094 <__NVIC_SetPriorityGrouping+0x44>)
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003066:	68ba      	ldr	r2, [r7, #8]
 8003068:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800306c:	4013      	ands	r3, r2
 800306e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003078:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800307c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003080:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003082:	4a04      	ldr	r2, [pc, #16]	@ (8003094 <__NVIC_SetPriorityGrouping+0x44>)
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	60d3      	str	r3, [r2, #12]
}
 8003088:	bf00      	nop
 800308a:	3714      	adds	r7, #20
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr
 8003094:	e000ed00 	.word	0xe000ed00

08003098 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003098:	b480      	push	{r7}
 800309a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800309c:	4b04      	ldr	r3, [pc, #16]	@ (80030b0 <__NVIC_GetPriorityGrouping+0x18>)
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	0a1b      	lsrs	r3, r3, #8
 80030a2:	f003 0307 	and.w	r3, r3, #7
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr
 80030b0:	e000ed00 	.word	0xe000ed00

080030b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	4603      	mov	r3, r0
 80030bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	db0b      	blt.n	80030de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030c6:	79fb      	ldrb	r3, [r7, #7]
 80030c8:	f003 021f 	and.w	r2, r3, #31
 80030cc:	4907      	ldr	r1, [pc, #28]	@ (80030ec <__NVIC_EnableIRQ+0x38>)
 80030ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030d2:	095b      	lsrs	r3, r3, #5
 80030d4:	2001      	movs	r0, #1
 80030d6:	fa00 f202 	lsl.w	r2, r0, r2
 80030da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80030de:	bf00      	nop
 80030e0:	370c      	adds	r7, #12
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr
 80030ea:	bf00      	nop
 80030ec:	e000e100 	.word	0xe000e100

080030f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	4603      	mov	r3, r0
 80030f8:	6039      	str	r1, [r7, #0]
 80030fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003100:	2b00      	cmp	r3, #0
 8003102:	db0a      	blt.n	800311a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	b2da      	uxtb	r2, r3
 8003108:	490c      	ldr	r1, [pc, #48]	@ (800313c <__NVIC_SetPriority+0x4c>)
 800310a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800310e:	0112      	lsls	r2, r2, #4
 8003110:	b2d2      	uxtb	r2, r2
 8003112:	440b      	add	r3, r1
 8003114:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003118:	e00a      	b.n	8003130 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	b2da      	uxtb	r2, r3
 800311e:	4908      	ldr	r1, [pc, #32]	@ (8003140 <__NVIC_SetPriority+0x50>)
 8003120:	79fb      	ldrb	r3, [r7, #7]
 8003122:	f003 030f 	and.w	r3, r3, #15
 8003126:	3b04      	subs	r3, #4
 8003128:	0112      	lsls	r2, r2, #4
 800312a:	b2d2      	uxtb	r2, r2
 800312c:	440b      	add	r3, r1
 800312e:	761a      	strb	r2, [r3, #24]
}
 8003130:	bf00      	nop
 8003132:	370c      	adds	r7, #12
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr
 800313c:	e000e100 	.word	0xe000e100
 8003140:	e000ed00 	.word	0xe000ed00

08003144 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003144:	b480      	push	{r7}
 8003146:	b089      	sub	sp, #36	@ 0x24
 8003148:	af00      	add	r7, sp, #0
 800314a:	60f8      	str	r0, [r7, #12]
 800314c:	60b9      	str	r1, [r7, #8]
 800314e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	f003 0307 	and.w	r3, r3, #7
 8003156:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	f1c3 0307 	rsb	r3, r3, #7
 800315e:	2b04      	cmp	r3, #4
 8003160:	bf28      	it	cs
 8003162:	2304      	movcs	r3, #4
 8003164:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	3304      	adds	r3, #4
 800316a:	2b06      	cmp	r3, #6
 800316c:	d902      	bls.n	8003174 <NVIC_EncodePriority+0x30>
 800316e:	69fb      	ldr	r3, [r7, #28]
 8003170:	3b03      	subs	r3, #3
 8003172:	e000      	b.n	8003176 <NVIC_EncodePriority+0x32>
 8003174:	2300      	movs	r3, #0
 8003176:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003178:	f04f 32ff 	mov.w	r2, #4294967295
 800317c:	69bb      	ldr	r3, [r7, #24]
 800317e:	fa02 f303 	lsl.w	r3, r2, r3
 8003182:	43da      	mvns	r2, r3
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	401a      	ands	r2, r3
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800318c:	f04f 31ff 	mov.w	r1, #4294967295
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	fa01 f303 	lsl.w	r3, r1, r3
 8003196:	43d9      	mvns	r1, r3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800319c:	4313      	orrs	r3, r2
         );
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3724      	adds	r7, #36	@ 0x24
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr
	...

080031ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b082      	sub	sp, #8
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	3b01      	subs	r3, #1
 80031b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80031bc:	d301      	bcc.n	80031c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031be:	2301      	movs	r3, #1
 80031c0:	e00f      	b.n	80031e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031c2:	4a0a      	ldr	r2, [pc, #40]	@ (80031ec <SysTick_Config+0x40>)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	3b01      	subs	r3, #1
 80031c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031ca:	210f      	movs	r1, #15
 80031cc:	f04f 30ff 	mov.w	r0, #4294967295
 80031d0:	f7ff ff8e 	bl	80030f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031d4:	4b05      	ldr	r3, [pc, #20]	@ (80031ec <SysTick_Config+0x40>)
 80031d6:	2200      	movs	r2, #0
 80031d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031da:	4b04      	ldr	r3, [pc, #16]	@ (80031ec <SysTick_Config+0x40>)
 80031dc:	2207      	movs	r2, #7
 80031de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031e0:	2300      	movs	r3, #0
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3708      	adds	r7, #8
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	e000e010 	.word	0xe000e010

080031f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b082      	sub	sp, #8
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	f7ff ff29 	bl	8003050 <__NVIC_SetPriorityGrouping>
}
 80031fe:	bf00      	nop
 8003200:	3708      	adds	r7, #8
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}

08003206 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003206:	b580      	push	{r7, lr}
 8003208:	b086      	sub	sp, #24
 800320a:	af00      	add	r7, sp, #0
 800320c:	4603      	mov	r3, r0
 800320e:	60b9      	str	r1, [r7, #8]
 8003210:	607a      	str	r2, [r7, #4]
 8003212:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003214:	2300      	movs	r3, #0
 8003216:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003218:	f7ff ff3e 	bl	8003098 <__NVIC_GetPriorityGrouping>
 800321c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800321e:	687a      	ldr	r2, [r7, #4]
 8003220:	68b9      	ldr	r1, [r7, #8]
 8003222:	6978      	ldr	r0, [r7, #20]
 8003224:	f7ff ff8e 	bl	8003144 <NVIC_EncodePriority>
 8003228:	4602      	mov	r2, r0
 800322a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800322e:	4611      	mov	r1, r2
 8003230:	4618      	mov	r0, r3
 8003232:	f7ff ff5d 	bl	80030f0 <__NVIC_SetPriority>
}
 8003236:	bf00      	nop
 8003238:	3718      	adds	r7, #24
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}

0800323e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800323e:	b580      	push	{r7, lr}
 8003240:	b082      	sub	sp, #8
 8003242:	af00      	add	r7, sp, #0
 8003244:	4603      	mov	r3, r0
 8003246:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003248:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800324c:	4618      	mov	r0, r3
 800324e:	f7ff ff31 	bl	80030b4 <__NVIC_EnableIRQ>
}
 8003252:	bf00      	nop
 8003254:	3708      	adds	r7, #8
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}

0800325a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800325a:	b580      	push	{r7, lr}
 800325c:	b082      	sub	sp, #8
 800325e:	af00      	add	r7, sp, #0
 8003260:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f7ff ffa2 	bl	80031ac <SysTick_Config>
 8003268:	4603      	mov	r3, r0
}
 800326a:	4618      	mov	r0, r3
 800326c:	3708      	adds	r7, #8
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}

08003272 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003272:	b580      	push	{r7, lr}
 8003274:	b084      	sub	sp, #16
 8003276:	af00      	add	r7, sp, #0
 8003278:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800327a:	2300      	movs	r3, #0
 800327c:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d101      	bne.n	8003288 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e037      	b.n	80032f8 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2202      	movs	r2, #2
 800328c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800329e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80032a2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80032ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	68db      	ldr	r3, [r3, #12]
 80032b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	695b      	ldr	r3, [r3, #20]
 80032be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	69db      	ldr	r3, [r3, #28]
 80032ca:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80032cc:	68fa      	ldr	r2, [r7, #12]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	68fa      	ldr	r2, [r7, #12]
 80032d8:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f000 f940 	bl	8003560 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2200      	movs	r2, #0
 80032e4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2201      	movs	r2, #1
 80032ea:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2200      	movs	r2, #0
 80032f2:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80032f6:	2300      	movs	r3, #0
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3710      	adds	r7, #16
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}

08003300 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b086      	sub	sp, #24
 8003304:	af00      	add	r7, sp, #0
 8003306:	60f8      	str	r0, [r7, #12]
 8003308:	60b9      	str	r1, [r7, #8]
 800330a:	607a      	str	r2, [r7, #4]
 800330c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800330e:	2300      	movs	r3, #0
 8003310:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003318:	2b01      	cmp	r3, #1
 800331a:	d101      	bne.n	8003320 <HAL_DMA_Start_IT+0x20>
 800331c:	2302      	movs	r3, #2
 800331e:	e04a      	b.n	80033b6 <HAL_DMA_Start_IT+0xb6>
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2201      	movs	r2, #1
 8003324:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800332e:	2b01      	cmp	r3, #1
 8003330:	d13a      	bne.n	80033a8 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2202      	movs	r2, #2
 8003336:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2200      	movs	r2, #0
 800333e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f022 0201 	bic.w	r2, r2, #1
 800334e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	68b9      	ldr	r1, [r7, #8]
 8003356:	68f8      	ldr	r0, [r7, #12]
 8003358:	f000 f8d4 	bl	8003504 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003360:	2b00      	cmp	r3, #0
 8003362:	d008      	beq.n	8003376 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f042 020e 	orr.w	r2, r2, #14
 8003372:	601a      	str	r2, [r3, #0]
 8003374:	e00f      	b.n	8003396 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f042 020a 	orr.w	r2, r2, #10
 8003384:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f022 0204 	bic.w	r2, r2, #4
 8003394:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f042 0201 	orr.w	r2, r2, #1
 80033a4:	601a      	str	r2, [r3, #0]
 80033a6:	e005      	b.n	80033b4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2200      	movs	r2, #0
 80033ac:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80033b0:	2302      	movs	r3, #2
 80033b2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80033b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3718      	adds	r7, #24
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}

080033be <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80033be:	b580      	push	{r7, lr}
 80033c0:	b084      	sub	sp, #16
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033da:	2204      	movs	r2, #4
 80033dc:	409a      	lsls	r2, r3
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	4013      	ands	r3, r2
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d024      	beq.n	8003430 <HAL_DMA_IRQHandler+0x72>
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	f003 0304 	and.w	r3, r3, #4
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d01f      	beq.n	8003430 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0320 	and.w	r3, r3, #32
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d107      	bne.n	800340e <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f022 0204 	bic.w	r2, r2, #4
 800340c:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003416:	2104      	movs	r1, #4
 8003418:	fa01 f202 	lsl.w	r2, r1, r2
 800341c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003422:	2b00      	cmp	r3, #0
 8003424:	d06a      	beq.n	80034fc <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800342e:	e065      	b.n	80034fc <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003434:	2202      	movs	r2, #2
 8003436:	409a      	lsls	r2, r3
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	4013      	ands	r3, r2
 800343c:	2b00      	cmp	r3, #0
 800343e:	d02c      	beq.n	800349a <HAL_DMA_IRQHandler+0xdc>
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	f003 0302 	and.w	r3, r3, #2
 8003446:	2b00      	cmp	r3, #0
 8003448:	d027      	beq.n	800349a <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0320 	and.w	r3, r3, #32
 8003454:	2b00      	cmp	r3, #0
 8003456:	d10b      	bne.n	8003470 <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f022 020a 	bic.w	r2, r2, #10
 8003466:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2201      	movs	r2, #1
 800346c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003478:	2102      	movs	r1, #2
 800347a:	fa01 f202 	lsl.w	r2, r1, r2
 800347e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2200      	movs	r2, #0
 8003484:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800348c:	2b00      	cmp	r3, #0
 800348e:	d035      	beq.n	80034fc <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003498:	e030      	b.n	80034fc <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800349e:	2208      	movs	r2, #8
 80034a0:	409a      	lsls	r2, r3
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	4013      	ands	r3, r2
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d028      	beq.n	80034fc <HAL_DMA_IRQHandler+0x13e>
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	f003 0308 	and.w	r3, r3, #8
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d023      	beq.n	80034fc <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f022 020e 	bic.w	r2, r2, #14
 80034c2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034cc:	2101      	movs	r1, #1
 80034ce:	fa01 f202 	lsl.w	r2, r1, r2
 80034d2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2201      	movs	r2, #1
 80034d8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2201      	movs	r2, #1
 80034de:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d004      	beq.n	80034fc <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	4798      	blx	r3
    }
  }
}
 80034fa:	e7ff      	b.n	80034fc <HAL_DMA_IRQHandler+0x13e>
 80034fc:	bf00      	nop
 80034fe:	3710      	adds	r7, #16
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}

08003504 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003504:	b480      	push	{r7}
 8003506:	b085      	sub	sp, #20
 8003508:	af00      	add	r7, sp, #0
 800350a:	60f8      	str	r0, [r7, #12]
 800350c:	60b9      	str	r1, [r7, #8]
 800350e:	607a      	str	r2, [r7, #4]
 8003510:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800351a:	2101      	movs	r1, #1
 800351c:	fa01 f202 	lsl.w	r2, r1, r2
 8003520:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	683a      	ldr	r2, [r7, #0]
 8003528:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	2b10      	cmp	r3, #16
 8003530:	d108      	bne.n	8003544 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	68ba      	ldr	r2, [r7, #8]
 8003540:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003542:	e007      	b.n	8003554 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	68ba      	ldr	r2, [r7, #8]
 800354a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	687a      	ldr	r2, [r7, #4]
 8003552:	60da      	str	r2, [r3, #12]
}
 8003554:	bf00      	nop
 8003556:	3714      	adds	r7, #20
 8003558:	46bd      	mov	sp, r7
 800355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355e:	4770      	bx	lr

08003560 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003560:	b480      	push	{r7}
 8003562:	b083      	sub	sp, #12
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	461a      	mov	r2, r3
 800356e:	4b09      	ldr	r3, [pc, #36]	@ (8003594 <DMA_CalcBaseAndBitshift+0x34>)
 8003570:	4413      	add	r3, r2
 8003572:	4a09      	ldr	r2, [pc, #36]	@ (8003598 <DMA_CalcBaseAndBitshift+0x38>)
 8003574:	fba2 2303 	umull	r2, r3, r2, r3
 8003578:	091b      	lsrs	r3, r3, #4
 800357a:	009a      	lsls	r2, r3, #2
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	4a06      	ldr	r2, [pc, #24]	@ (800359c <DMA_CalcBaseAndBitshift+0x3c>)
 8003584:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 8003586:	bf00      	nop
 8003588:	370c      	adds	r7, #12
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr
 8003592:	bf00      	nop
 8003594:	bffdfff8 	.word	0xbffdfff8
 8003598:	cccccccd 	.word	0xcccccccd
 800359c:	40020000 	.word	0x40020000

080035a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b087      	sub	sp, #28
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80035aa:	2300      	movs	r3, #0
 80035ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035ae:	e14e      	b.n	800384e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	2101      	movs	r1, #1
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	fa01 f303 	lsl.w	r3, r1, r3
 80035bc:	4013      	ands	r3, r2
 80035be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	f000 8140 	beq.w	8003848 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	f003 0303 	and.w	r3, r3, #3
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d005      	beq.n	80035e0 <HAL_GPIO_Init+0x40>
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	f003 0303 	and.w	r3, r3, #3
 80035dc:	2b02      	cmp	r3, #2
 80035de:	d130      	bne.n	8003642 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	005b      	lsls	r3, r3, #1
 80035ea:	2203      	movs	r2, #3
 80035ec:	fa02 f303 	lsl.w	r3, r2, r3
 80035f0:	43db      	mvns	r3, r3
 80035f2:	693a      	ldr	r2, [r7, #16]
 80035f4:	4013      	ands	r3, r2
 80035f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	68da      	ldr	r2, [r3, #12]
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	005b      	lsls	r3, r3, #1
 8003600:	fa02 f303 	lsl.w	r3, r2, r3
 8003604:	693a      	ldr	r2, [r7, #16]
 8003606:	4313      	orrs	r3, r2
 8003608:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	693a      	ldr	r2, [r7, #16]
 800360e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003616:	2201      	movs	r2, #1
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	fa02 f303 	lsl.w	r3, r2, r3
 800361e:	43db      	mvns	r3, r3
 8003620:	693a      	ldr	r2, [r7, #16]
 8003622:	4013      	ands	r3, r2
 8003624:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	091b      	lsrs	r3, r3, #4
 800362c:	f003 0201 	and.w	r2, r3, #1
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	fa02 f303 	lsl.w	r3, r2, r3
 8003636:	693a      	ldr	r2, [r7, #16]
 8003638:	4313      	orrs	r3, r2
 800363a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	693a      	ldr	r2, [r7, #16]
 8003640:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	f003 0303 	and.w	r3, r3, #3
 800364a:	2b03      	cmp	r3, #3
 800364c:	d017      	beq.n	800367e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	68db      	ldr	r3, [r3, #12]
 8003652:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	005b      	lsls	r3, r3, #1
 8003658:	2203      	movs	r2, #3
 800365a:	fa02 f303 	lsl.w	r3, r2, r3
 800365e:	43db      	mvns	r3, r3
 8003660:	693a      	ldr	r2, [r7, #16]
 8003662:	4013      	ands	r3, r2
 8003664:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	689a      	ldr	r2, [r3, #8]
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	005b      	lsls	r3, r3, #1
 800366e:	fa02 f303 	lsl.w	r3, r2, r3
 8003672:	693a      	ldr	r2, [r7, #16]
 8003674:	4313      	orrs	r3, r2
 8003676:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	693a      	ldr	r2, [r7, #16]
 800367c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	f003 0303 	and.w	r3, r3, #3
 8003686:	2b02      	cmp	r3, #2
 8003688:	d123      	bne.n	80036d2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	08da      	lsrs	r2, r3, #3
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	3208      	adds	r2, #8
 8003692:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003696:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	f003 0307 	and.w	r3, r3, #7
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	220f      	movs	r2, #15
 80036a2:	fa02 f303 	lsl.w	r3, r2, r3
 80036a6:	43db      	mvns	r3, r3
 80036a8:	693a      	ldr	r2, [r7, #16]
 80036aa:	4013      	ands	r3, r2
 80036ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	691a      	ldr	r2, [r3, #16]
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	f003 0307 	and.w	r3, r3, #7
 80036b8:	009b      	lsls	r3, r3, #2
 80036ba:	fa02 f303 	lsl.w	r3, r2, r3
 80036be:	693a      	ldr	r2, [r7, #16]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	08da      	lsrs	r2, r3, #3
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	3208      	adds	r2, #8
 80036cc:	6939      	ldr	r1, [r7, #16]
 80036ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	005b      	lsls	r3, r3, #1
 80036dc:	2203      	movs	r2, #3
 80036de:	fa02 f303 	lsl.w	r3, r2, r3
 80036e2:	43db      	mvns	r3, r3
 80036e4:	693a      	ldr	r2, [r7, #16]
 80036e6:	4013      	ands	r3, r2
 80036e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	f003 0203 	and.w	r2, r3, #3
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	005b      	lsls	r3, r3, #1
 80036f6:	fa02 f303 	lsl.w	r3, r2, r3
 80036fa:	693a      	ldr	r2, [r7, #16]
 80036fc:	4313      	orrs	r3, r2
 80036fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	693a      	ldr	r2, [r7, #16]
 8003704:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800370e:	2b00      	cmp	r3, #0
 8003710:	f000 809a 	beq.w	8003848 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003714:	4b55      	ldr	r3, [pc, #340]	@ (800386c <HAL_GPIO_Init+0x2cc>)
 8003716:	699b      	ldr	r3, [r3, #24]
 8003718:	4a54      	ldr	r2, [pc, #336]	@ (800386c <HAL_GPIO_Init+0x2cc>)
 800371a:	f043 0301 	orr.w	r3, r3, #1
 800371e:	6193      	str	r3, [r2, #24]
 8003720:	4b52      	ldr	r3, [pc, #328]	@ (800386c <HAL_GPIO_Init+0x2cc>)
 8003722:	699b      	ldr	r3, [r3, #24]
 8003724:	f003 0301 	and.w	r3, r3, #1
 8003728:	60bb      	str	r3, [r7, #8]
 800372a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800372c:	4a50      	ldr	r2, [pc, #320]	@ (8003870 <HAL_GPIO_Init+0x2d0>)
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	089b      	lsrs	r3, r3, #2
 8003732:	3302      	adds	r3, #2
 8003734:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003738:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	f003 0303 	and.w	r3, r3, #3
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	220f      	movs	r2, #15
 8003744:	fa02 f303 	lsl.w	r3, r2, r3
 8003748:	43db      	mvns	r3, r3
 800374a:	693a      	ldr	r2, [r7, #16]
 800374c:	4013      	ands	r3, r2
 800374e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003756:	d013      	beq.n	8003780 <HAL_GPIO_Init+0x1e0>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	4a46      	ldr	r2, [pc, #280]	@ (8003874 <HAL_GPIO_Init+0x2d4>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d00d      	beq.n	800377c <HAL_GPIO_Init+0x1dc>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	4a45      	ldr	r2, [pc, #276]	@ (8003878 <HAL_GPIO_Init+0x2d8>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d007      	beq.n	8003778 <HAL_GPIO_Init+0x1d8>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	4a44      	ldr	r2, [pc, #272]	@ (800387c <HAL_GPIO_Init+0x2dc>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d101      	bne.n	8003774 <HAL_GPIO_Init+0x1d4>
 8003770:	2303      	movs	r3, #3
 8003772:	e006      	b.n	8003782 <HAL_GPIO_Init+0x1e2>
 8003774:	2305      	movs	r3, #5
 8003776:	e004      	b.n	8003782 <HAL_GPIO_Init+0x1e2>
 8003778:	2302      	movs	r3, #2
 800377a:	e002      	b.n	8003782 <HAL_GPIO_Init+0x1e2>
 800377c:	2301      	movs	r3, #1
 800377e:	e000      	b.n	8003782 <HAL_GPIO_Init+0x1e2>
 8003780:	2300      	movs	r3, #0
 8003782:	697a      	ldr	r2, [r7, #20]
 8003784:	f002 0203 	and.w	r2, r2, #3
 8003788:	0092      	lsls	r2, r2, #2
 800378a:	4093      	lsls	r3, r2
 800378c:	693a      	ldr	r2, [r7, #16]
 800378e:	4313      	orrs	r3, r2
 8003790:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003792:	4937      	ldr	r1, [pc, #220]	@ (8003870 <HAL_GPIO_Init+0x2d0>)
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	089b      	lsrs	r3, r3, #2
 8003798:	3302      	adds	r3, #2
 800379a:	693a      	ldr	r2, [r7, #16]
 800379c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80037a0:	4b37      	ldr	r3, [pc, #220]	@ (8003880 <HAL_GPIO_Init+0x2e0>)
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	43db      	mvns	r3, r3
 80037aa:	693a      	ldr	r2, [r7, #16]
 80037ac:	4013      	ands	r3, r2
 80037ae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d003      	beq.n	80037c4 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80037bc:	693a      	ldr	r2, [r7, #16]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80037c4:	4a2e      	ldr	r2, [pc, #184]	@ (8003880 <HAL_GPIO_Init+0x2e0>)
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80037ca:	4b2d      	ldr	r3, [pc, #180]	@ (8003880 <HAL_GPIO_Init+0x2e0>)
 80037cc:	68db      	ldr	r3, [r3, #12]
 80037ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	43db      	mvns	r3, r3
 80037d4:	693a      	ldr	r2, [r7, #16]
 80037d6:	4013      	ands	r3, r2
 80037d8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d003      	beq.n	80037ee <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80037e6:	693a      	ldr	r2, [r7, #16]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80037ee:	4a24      	ldr	r2, [pc, #144]	@ (8003880 <HAL_GPIO_Init+0x2e0>)
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80037f4:	4b22      	ldr	r3, [pc, #136]	@ (8003880 <HAL_GPIO_Init+0x2e0>)
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	43db      	mvns	r3, r3
 80037fe:	693a      	ldr	r2, [r7, #16]
 8003800:	4013      	ands	r3, r2
 8003802:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800380c:	2b00      	cmp	r3, #0
 800380e:	d003      	beq.n	8003818 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8003810:	693a      	ldr	r2, [r7, #16]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	4313      	orrs	r3, r2
 8003816:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003818:	4a19      	ldr	r2, [pc, #100]	@ (8003880 <HAL_GPIO_Init+0x2e0>)
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800381e:	4b18      	ldr	r3, [pc, #96]	@ (8003880 <HAL_GPIO_Init+0x2e0>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	43db      	mvns	r3, r3
 8003828:	693a      	ldr	r2, [r7, #16]
 800382a:	4013      	ands	r3, r2
 800382c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d003      	beq.n	8003842 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800383a:	693a      	ldr	r2, [r7, #16]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	4313      	orrs	r3, r2
 8003840:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003842:	4a0f      	ldr	r2, [pc, #60]	@ (8003880 <HAL_GPIO_Init+0x2e0>)
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	3301      	adds	r3, #1
 800384c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	fa22 f303 	lsr.w	r3, r2, r3
 8003858:	2b00      	cmp	r3, #0
 800385a:	f47f aea9 	bne.w	80035b0 <HAL_GPIO_Init+0x10>
  }
}
 800385e:	bf00      	nop
 8003860:	bf00      	nop
 8003862:	371c      	adds	r7, #28
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr
 800386c:	40021000 	.word	0x40021000
 8003870:	40010000 	.word	0x40010000
 8003874:	48000400 	.word	0x48000400
 8003878:	48000800 	.word	0x48000800
 800387c:	48000c00 	.word	0x48000c00
 8003880:	40010400 	.word	0x40010400

08003884 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003884:	b480      	push	{r7}
 8003886:	b085      	sub	sp, #20
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	460b      	mov	r3, r1
 800388e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	691a      	ldr	r2, [r3, #16]
 8003894:	887b      	ldrh	r3, [r7, #2]
 8003896:	4013      	ands	r3, r2
 8003898:	2b00      	cmp	r3, #0
 800389a:	d002      	beq.n	80038a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800389c:	2301      	movs	r3, #1
 800389e:	73fb      	strb	r3, [r7, #15]
 80038a0:	e001      	b.n	80038a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80038a2:	2300      	movs	r3, #0
 80038a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80038a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3714      	adds	r7, #20
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr

080038b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b083      	sub	sp, #12
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
 80038bc:	460b      	mov	r3, r1
 80038be:	807b      	strh	r3, [r7, #2]
 80038c0:	4613      	mov	r3, r2
 80038c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80038c4:	787b      	ldrb	r3, [r7, #1]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d003      	beq.n	80038d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80038ca:	887a      	ldrh	r2, [r7, #2]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80038d0:	e002      	b.n	80038d8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80038d2:	887a      	ldrh	r2, [r7, #2]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80038d8:	bf00      	nop
 80038da:	370c      	adds	r7, #12
 80038dc:	46bd      	mov	sp, r7
 80038de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e2:	4770      	bx	lr

080038e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038f0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80038f4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038fa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d102      	bne.n	800390a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	f001 b823 	b.w	8004950 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800390a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800390e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0301 	and.w	r3, r3, #1
 800391a:	2b00      	cmp	r3, #0
 800391c:	f000 817d 	beq.w	8003c1a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003920:	4bbc      	ldr	r3, [pc, #752]	@ (8003c14 <HAL_RCC_OscConfig+0x330>)
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	f003 030c 	and.w	r3, r3, #12
 8003928:	2b04      	cmp	r3, #4
 800392a:	d00c      	beq.n	8003946 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800392c:	4bb9      	ldr	r3, [pc, #740]	@ (8003c14 <HAL_RCC_OscConfig+0x330>)
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	f003 030c 	and.w	r3, r3, #12
 8003934:	2b08      	cmp	r3, #8
 8003936:	d15c      	bne.n	80039f2 <HAL_RCC_OscConfig+0x10e>
 8003938:	4bb6      	ldr	r3, [pc, #728]	@ (8003c14 <HAL_RCC_OscConfig+0x330>)
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003940:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003944:	d155      	bne.n	80039f2 <HAL_RCC_OscConfig+0x10e>
 8003946:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800394a:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800394e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8003952:	fa93 f3a3 	rbit	r3, r3
 8003956:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800395a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800395e:	fab3 f383 	clz	r3, r3
 8003962:	b2db      	uxtb	r3, r3
 8003964:	095b      	lsrs	r3, r3, #5
 8003966:	b2db      	uxtb	r3, r3
 8003968:	f043 0301 	orr.w	r3, r3, #1
 800396c:	b2db      	uxtb	r3, r3
 800396e:	2b01      	cmp	r3, #1
 8003970:	d102      	bne.n	8003978 <HAL_RCC_OscConfig+0x94>
 8003972:	4ba8      	ldr	r3, [pc, #672]	@ (8003c14 <HAL_RCC_OscConfig+0x330>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	e015      	b.n	80039a4 <HAL_RCC_OscConfig+0xc0>
 8003978:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800397c:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003980:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8003984:	fa93 f3a3 	rbit	r3, r3
 8003988:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 800398c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003990:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8003994:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8003998:	fa93 f3a3 	rbit	r3, r3
 800399c:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80039a0:	4b9c      	ldr	r3, [pc, #624]	@ (8003c14 <HAL_RCC_OscConfig+0x330>)
 80039a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039a4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80039a8:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 80039ac:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80039b0:	fa92 f2a2 	rbit	r2, r2
 80039b4:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 80039b8:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 80039bc:	fab2 f282 	clz	r2, r2
 80039c0:	b2d2      	uxtb	r2, r2
 80039c2:	f042 0220 	orr.w	r2, r2, #32
 80039c6:	b2d2      	uxtb	r2, r2
 80039c8:	f002 021f 	and.w	r2, r2, #31
 80039cc:	2101      	movs	r1, #1
 80039ce:	fa01 f202 	lsl.w	r2, r1, r2
 80039d2:	4013      	ands	r3, r2
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	f000 811f 	beq.w	8003c18 <HAL_RCC_OscConfig+0x334>
 80039da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039de:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	f040 8116 	bne.w	8003c18 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	f000 bfaf 	b.w	8004950 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039f6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a02:	d106      	bne.n	8003a12 <HAL_RCC_OscConfig+0x12e>
 8003a04:	4b83      	ldr	r3, [pc, #524]	@ (8003c14 <HAL_RCC_OscConfig+0x330>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a82      	ldr	r2, [pc, #520]	@ (8003c14 <HAL_RCC_OscConfig+0x330>)
 8003a0a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a0e:	6013      	str	r3, [r2, #0]
 8003a10:	e036      	b.n	8003a80 <HAL_RCC_OscConfig+0x19c>
 8003a12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a16:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d10c      	bne.n	8003a3c <HAL_RCC_OscConfig+0x158>
 8003a22:	4b7c      	ldr	r3, [pc, #496]	@ (8003c14 <HAL_RCC_OscConfig+0x330>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a7b      	ldr	r2, [pc, #492]	@ (8003c14 <HAL_RCC_OscConfig+0x330>)
 8003a28:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a2c:	6013      	str	r3, [r2, #0]
 8003a2e:	4b79      	ldr	r3, [pc, #484]	@ (8003c14 <HAL_RCC_OscConfig+0x330>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a78      	ldr	r2, [pc, #480]	@ (8003c14 <HAL_RCC_OscConfig+0x330>)
 8003a34:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a38:	6013      	str	r3, [r2, #0]
 8003a3a:	e021      	b.n	8003a80 <HAL_RCC_OscConfig+0x19c>
 8003a3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a40:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a4c:	d10c      	bne.n	8003a68 <HAL_RCC_OscConfig+0x184>
 8003a4e:	4b71      	ldr	r3, [pc, #452]	@ (8003c14 <HAL_RCC_OscConfig+0x330>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a70      	ldr	r2, [pc, #448]	@ (8003c14 <HAL_RCC_OscConfig+0x330>)
 8003a54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003a58:	6013      	str	r3, [r2, #0]
 8003a5a:	4b6e      	ldr	r3, [pc, #440]	@ (8003c14 <HAL_RCC_OscConfig+0x330>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a6d      	ldr	r2, [pc, #436]	@ (8003c14 <HAL_RCC_OscConfig+0x330>)
 8003a60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a64:	6013      	str	r3, [r2, #0]
 8003a66:	e00b      	b.n	8003a80 <HAL_RCC_OscConfig+0x19c>
 8003a68:	4b6a      	ldr	r3, [pc, #424]	@ (8003c14 <HAL_RCC_OscConfig+0x330>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a69      	ldr	r2, [pc, #420]	@ (8003c14 <HAL_RCC_OscConfig+0x330>)
 8003a6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a72:	6013      	str	r3, [r2, #0]
 8003a74:	4b67      	ldr	r3, [pc, #412]	@ (8003c14 <HAL_RCC_OscConfig+0x330>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a66      	ldr	r2, [pc, #408]	@ (8003c14 <HAL_RCC_OscConfig+0x330>)
 8003a7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a7e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003a80:	4b64      	ldr	r3, [pc, #400]	@ (8003c14 <HAL_RCC_OscConfig+0x330>)
 8003a82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a84:	f023 020f 	bic.w	r2, r3, #15
 8003a88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a8c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	495f      	ldr	r1, [pc, #380]	@ (8003c14 <HAL_RCC_OscConfig+0x330>)
 8003a96:	4313      	orrs	r3, r2
 8003a98:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a9e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d059      	beq.n	8003b5e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aaa:	f7fd fc23 	bl	80012f4 <HAL_GetTick>
 8003aae:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ab2:	e00a      	b.n	8003aca <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ab4:	f7fd fc1e 	bl	80012f4 <HAL_GetTick>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003abe:	1ad3      	subs	r3, r2, r3
 8003ac0:	2b64      	cmp	r3, #100	@ 0x64
 8003ac2:	d902      	bls.n	8003aca <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8003ac4:	2303      	movs	r3, #3
 8003ac6:	f000 bf43 	b.w	8004950 <HAL_RCC_OscConfig+0x106c>
 8003aca:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003ace:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ad2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8003ad6:	fa93 f3a3 	rbit	r3, r3
 8003ada:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8003ade:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ae2:	fab3 f383 	clz	r3, r3
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	095b      	lsrs	r3, r3, #5
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	f043 0301 	orr.w	r3, r3, #1
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d102      	bne.n	8003afc <HAL_RCC_OscConfig+0x218>
 8003af6:	4b47      	ldr	r3, [pc, #284]	@ (8003c14 <HAL_RCC_OscConfig+0x330>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	e015      	b.n	8003b28 <HAL_RCC_OscConfig+0x244>
 8003afc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003b00:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b04:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8003b08:	fa93 f3a3 	rbit	r3, r3
 8003b0c:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8003b10:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003b14:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8003b18:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8003b1c:	fa93 f3a3 	rbit	r3, r3
 8003b20:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8003b24:	4b3b      	ldr	r3, [pc, #236]	@ (8003c14 <HAL_RCC_OscConfig+0x330>)
 8003b26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b28:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003b2c:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8003b30:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8003b34:	fa92 f2a2 	rbit	r2, r2
 8003b38:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8003b3c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8003b40:	fab2 f282 	clz	r2, r2
 8003b44:	b2d2      	uxtb	r2, r2
 8003b46:	f042 0220 	orr.w	r2, r2, #32
 8003b4a:	b2d2      	uxtb	r2, r2
 8003b4c:	f002 021f 	and.w	r2, r2, #31
 8003b50:	2101      	movs	r1, #1
 8003b52:	fa01 f202 	lsl.w	r2, r1, r2
 8003b56:	4013      	ands	r3, r2
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d0ab      	beq.n	8003ab4 <HAL_RCC_OscConfig+0x1d0>
 8003b5c:	e05d      	b.n	8003c1a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b5e:	f7fd fbc9 	bl	80012f4 <HAL_GetTick>
 8003b62:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b66:	e00a      	b.n	8003b7e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b68:	f7fd fbc4 	bl	80012f4 <HAL_GetTick>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	2b64      	cmp	r3, #100	@ 0x64
 8003b76:	d902      	bls.n	8003b7e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8003b78:	2303      	movs	r3, #3
 8003b7a:	f000 bee9 	b.w	8004950 <HAL_RCC_OscConfig+0x106c>
 8003b7e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003b82:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b86:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8003b8a:	fa93 f3a3 	rbit	r3, r3
 8003b8e:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8003b92:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b96:	fab3 f383 	clz	r3, r3
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	095b      	lsrs	r3, r3, #5
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	f043 0301 	orr.w	r3, r3, #1
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	d102      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x2cc>
 8003baa:	4b1a      	ldr	r3, [pc, #104]	@ (8003c14 <HAL_RCC_OscConfig+0x330>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	e015      	b.n	8003bdc <HAL_RCC_OscConfig+0x2f8>
 8003bb0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003bb4:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bb8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8003bbc:	fa93 f3a3 	rbit	r3, r3
 8003bc0:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8003bc4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003bc8:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8003bcc:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003bd0:	fa93 f3a3 	rbit	r3, r3
 8003bd4:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8003bd8:	4b0e      	ldr	r3, [pc, #56]	@ (8003c14 <HAL_RCC_OscConfig+0x330>)
 8003bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bdc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003be0:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8003be4:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8003be8:	fa92 f2a2 	rbit	r2, r2
 8003bec:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8003bf0:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8003bf4:	fab2 f282 	clz	r2, r2
 8003bf8:	b2d2      	uxtb	r2, r2
 8003bfa:	f042 0220 	orr.w	r2, r2, #32
 8003bfe:	b2d2      	uxtb	r2, r2
 8003c00:	f002 021f 	and.w	r2, r2, #31
 8003c04:	2101      	movs	r1, #1
 8003c06:	fa01 f202 	lsl.w	r2, r1, r2
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d1ab      	bne.n	8003b68 <HAL_RCC_OscConfig+0x284>
 8003c10:	e003      	b.n	8003c1a <HAL_RCC_OscConfig+0x336>
 8003c12:	bf00      	nop
 8003c14:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c1e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0302 	and.w	r3, r3, #2
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	f000 817d 	beq.w	8003f2a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003c30:	4ba6      	ldr	r3, [pc, #664]	@ (8003ecc <HAL_RCC_OscConfig+0x5e8>)
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	f003 030c 	and.w	r3, r3, #12
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d00b      	beq.n	8003c54 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003c3c:	4ba3      	ldr	r3, [pc, #652]	@ (8003ecc <HAL_RCC_OscConfig+0x5e8>)
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	f003 030c 	and.w	r3, r3, #12
 8003c44:	2b08      	cmp	r3, #8
 8003c46:	d172      	bne.n	8003d2e <HAL_RCC_OscConfig+0x44a>
 8003c48:	4ba0      	ldr	r3, [pc, #640]	@ (8003ecc <HAL_RCC_OscConfig+0x5e8>)
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d16c      	bne.n	8003d2e <HAL_RCC_OscConfig+0x44a>
 8003c54:	2302      	movs	r3, #2
 8003c56:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c5a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8003c5e:	fa93 f3a3 	rbit	r3, r3
 8003c62:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8003c66:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c6a:	fab3 f383 	clz	r3, r3
 8003c6e:	b2db      	uxtb	r3, r3
 8003c70:	095b      	lsrs	r3, r3, #5
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	f043 0301 	orr.w	r3, r3, #1
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d102      	bne.n	8003c84 <HAL_RCC_OscConfig+0x3a0>
 8003c7e:	4b93      	ldr	r3, [pc, #588]	@ (8003ecc <HAL_RCC_OscConfig+0x5e8>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	e013      	b.n	8003cac <HAL_RCC_OscConfig+0x3c8>
 8003c84:	2302      	movs	r3, #2
 8003c86:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c8a:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8003c8e:	fa93 f3a3 	rbit	r3, r3
 8003c92:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8003c96:	2302      	movs	r3, #2
 8003c98:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8003c9c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8003ca0:	fa93 f3a3 	rbit	r3, r3
 8003ca4:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8003ca8:	4b88      	ldr	r3, [pc, #544]	@ (8003ecc <HAL_RCC_OscConfig+0x5e8>)
 8003caa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cac:	2202      	movs	r2, #2
 8003cae:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8003cb2:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8003cb6:	fa92 f2a2 	rbit	r2, r2
 8003cba:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8003cbe:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8003cc2:	fab2 f282 	clz	r2, r2
 8003cc6:	b2d2      	uxtb	r2, r2
 8003cc8:	f042 0220 	orr.w	r2, r2, #32
 8003ccc:	b2d2      	uxtb	r2, r2
 8003cce:	f002 021f 	and.w	r2, r2, #31
 8003cd2:	2101      	movs	r1, #1
 8003cd4:	fa01 f202 	lsl.w	r2, r1, r2
 8003cd8:	4013      	ands	r3, r2
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d00a      	beq.n	8003cf4 <HAL_RCC_OscConfig+0x410>
 8003cde:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ce2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	691b      	ldr	r3, [r3, #16]
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d002      	beq.n	8003cf4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	f000 be2e 	b.w	8004950 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cf4:	4b75      	ldr	r3, [pc, #468]	@ (8003ecc <HAL_RCC_OscConfig+0x5e8>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003cfc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d00:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	695b      	ldr	r3, [r3, #20]
 8003d08:	21f8      	movs	r1, #248	@ 0xf8
 8003d0a:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d0e:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8003d12:	fa91 f1a1 	rbit	r1, r1
 8003d16:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8003d1a:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8003d1e:	fab1 f181 	clz	r1, r1
 8003d22:	b2c9      	uxtb	r1, r1
 8003d24:	408b      	lsls	r3, r1
 8003d26:	4969      	ldr	r1, [pc, #420]	@ (8003ecc <HAL_RCC_OscConfig+0x5e8>)
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d2c:	e0fd      	b.n	8003f2a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d32:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	691b      	ldr	r3, [r3, #16]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	f000 8088 	beq.w	8003e50 <HAL_RCC_OscConfig+0x56c>
 8003d40:	2301      	movs	r3, #1
 8003d42:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d46:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8003d4a:	fa93 f3a3 	rbit	r3, r3
 8003d4e:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8003d52:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d56:	fab3 f383 	clz	r3, r3
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003d60:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	461a      	mov	r2, r3
 8003d68:	2301      	movs	r3, #1
 8003d6a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d6c:	f7fd fac2 	bl	80012f4 <HAL_GetTick>
 8003d70:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d74:	e00a      	b.n	8003d8c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d76:	f7fd fabd 	bl	80012f4 <HAL_GetTick>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d902      	bls.n	8003d8c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	f000 bde2 	b.w	8004950 <HAL_RCC_OscConfig+0x106c>
 8003d8c:	2302      	movs	r3, #2
 8003d8e:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d92:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8003d96:	fa93 f3a3 	rbit	r3, r3
 8003d9a:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8003d9e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003da2:	fab3 f383 	clz	r3, r3
 8003da6:	b2db      	uxtb	r3, r3
 8003da8:	095b      	lsrs	r3, r3, #5
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	f043 0301 	orr.w	r3, r3, #1
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d102      	bne.n	8003dbc <HAL_RCC_OscConfig+0x4d8>
 8003db6:	4b45      	ldr	r3, [pc, #276]	@ (8003ecc <HAL_RCC_OscConfig+0x5e8>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	e013      	b.n	8003de4 <HAL_RCC_OscConfig+0x500>
 8003dbc:	2302      	movs	r3, #2
 8003dbe:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dc2:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8003dc6:	fa93 f3a3 	rbit	r3, r3
 8003dca:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8003dce:	2302      	movs	r3, #2
 8003dd0:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8003dd4:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8003dd8:	fa93 f3a3 	rbit	r3, r3
 8003ddc:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8003de0:	4b3a      	ldr	r3, [pc, #232]	@ (8003ecc <HAL_RCC_OscConfig+0x5e8>)
 8003de2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003de4:	2202      	movs	r2, #2
 8003de6:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8003dea:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8003dee:	fa92 f2a2 	rbit	r2, r2
 8003df2:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8003df6:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8003dfa:	fab2 f282 	clz	r2, r2
 8003dfe:	b2d2      	uxtb	r2, r2
 8003e00:	f042 0220 	orr.w	r2, r2, #32
 8003e04:	b2d2      	uxtb	r2, r2
 8003e06:	f002 021f 	and.w	r2, r2, #31
 8003e0a:	2101      	movs	r1, #1
 8003e0c:	fa01 f202 	lsl.w	r2, r1, r2
 8003e10:	4013      	ands	r3, r2
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d0af      	beq.n	8003d76 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e16:	4b2d      	ldr	r3, [pc, #180]	@ (8003ecc <HAL_RCC_OscConfig+0x5e8>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e22:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	695b      	ldr	r3, [r3, #20]
 8003e2a:	21f8      	movs	r1, #248	@ 0xf8
 8003e2c:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e30:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8003e34:	fa91 f1a1 	rbit	r1, r1
 8003e38:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8003e3c:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8003e40:	fab1 f181 	clz	r1, r1
 8003e44:	b2c9      	uxtb	r1, r1
 8003e46:	408b      	lsls	r3, r1
 8003e48:	4920      	ldr	r1, [pc, #128]	@ (8003ecc <HAL_RCC_OscConfig+0x5e8>)
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	600b      	str	r3, [r1, #0]
 8003e4e:	e06c      	b.n	8003f2a <HAL_RCC_OscConfig+0x646>
 8003e50:	2301      	movs	r3, #1
 8003e52:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e56:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003e5a:	fa93 f3a3 	rbit	r3, r3
 8003e5e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8003e62:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e66:	fab3 f383 	clz	r3, r3
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003e70:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003e74:	009b      	lsls	r3, r3, #2
 8003e76:	461a      	mov	r2, r3
 8003e78:	2300      	movs	r3, #0
 8003e7a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e7c:	f7fd fa3a 	bl	80012f4 <HAL_GetTick>
 8003e80:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e84:	e00a      	b.n	8003e9c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e86:	f7fd fa35 	bl	80012f4 <HAL_GetTick>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	2b02      	cmp	r3, #2
 8003e94:	d902      	bls.n	8003e9c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8003e96:	2303      	movs	r3, #3
 8003e98:	f000 bd5a 	b.w	8004950 <HAL_RCC_OscConfig+0x106c>
 8003e9c:	2302      	movs	r3, #2
 8003e9e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ea2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8003ea6:	fa93 f3a3 	rbit	r3, r3
 8003eaa:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8003eae:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003eb2:	fab3 f383 	clz	r3, r3
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	095b      	lsrs	r3, r3, #5
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	f043 0301 	orr.w	r3, r3, #1
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d104      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x5ec>
 8003ec6:	4b01      	ldr	r3, [pc, #4]	@ (8003ecc <HAL_RCC_OscConfig+0x5e8>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	e015      	b.n	8003ef8 <HAL_RCC_OscConfig+0x614>
 8003ecc:	40021000 	.word	0x40021000
 8003ed0:	2302      	movs	r3, #2
 8003ed2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ed6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8003eda:	fa93 f3a3 	rbit	r3, r3
 8003ede:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8003ee2:	2302      	movs	r3, #2
 8003ee4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8003ee8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003eec:	fa93 f3a3 	rbit	r3, r3
 8003ef0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8003ef4:	4bc8      	ldr	r3, [pc, #800]	@ (8004218 <HAL_RCC_OscConfig+0x934>)
 8003ef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ef8:	2202      	movs	r2, #2
 8003efa:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8003efe:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8003f02:	fa92 f2a2 	rbit	r2, r2
 8003f06:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8003f0a:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8003f0e:	fab2 f282 	clz	r2, r2
 8003f12:	b2d2      	uxtb	r2, r2
 8003f14:	f042 0220 	orr.w	r2, r2, #32
 8003f18:	b2d2      	uxtb	r2, r2
 8003f1a:	f002 021f 	and.w	r2, r2, #31
 8003f1e:	2101      	movs	r1, #1
 8003f20:	fa01 f202 	lsl.w	r2, r1, r2
 8003f24:	4013      	ands	r3, r2
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d1ad      	bne.n	8003e86 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f2e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 0308 	and.w	r3, r3, #8
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	f000 8110 	beq.w	8004160 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f44:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	699b      	ldr	r3, [r3, #24]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d079      	beq.n	8004044 <HAL_RCC_OscConfig+0x760>
 8003f50:	2301      	movs	r3, #1
 8003f52:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f56:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003f5a:	fa93 f3a3 	rbit	r3, r3
 8003f5e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8003f62:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f66:	fab3 f383 	clz	r3, r3
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	461a      	mov	r2, r3
 8003f6e:	4bab      	ldr	r3, [pc, #684]	@ (800421c <HAL_RCC_OscConfig+0x938>)
 8003f70:	4413      	add	r3, r2
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	461a      	mov	r2, r3
 8003f76:	2301      	movs	r3, #1
 8003f78:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f7a:	f7fd f9bb 	bl	80012f4 <HAL_GetTick>
 8003f7e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f82:	e00a      	b.n	8003f9a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f84:	f7fd f9b6 	bl	80012f4 <HAL_GetTick>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003f8e:	1ad3      	subs	r3, r2, r3
 8003f90:	2b02      	cmp	r3, #2
 8003f92:	d902      	bls.n	8003f9a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003f94:	2303      	movs	r3, #3
 8003f96:	f000 bcdb 	b.w	8004950 <HAL_RCC_OscConfig+0x106c>
 8003f9a:	2302      	movs	r3, #2
 8003f9c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fa0:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8003fa4:	fa93 f3a3 	rbit	r3, r3
 8003fa8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003fac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fb0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003fb4:	2202      	movs	r2, #2
 8003fb6:	601a      	str	r2, [r3, #0]
 8003fb8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fbc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	fa93 f2a3 	rbit	r2, r3
 8003fc6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003fce:	601a      	str	r2, [r3, #0]
 8003fd0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fd4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003fd8:	2202      	movs	r2, #2
 8003fda:	601a      	str	r2, [r3, #0]
 8003fdc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fe0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	fa93 f2a3 	rbit	r2, r3
 8003fea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fee:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003ff2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ff4:	4b88      	ldr	r3, [pc, #544]	@ (8004218 <HAL_RCC_OscConfig+0x934>)
 8003ff6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003ff8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ffc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8004000:	2102      	movs	r1, #2
 8004002:	6019      	str	r1, [r3, #0]
 8004004:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004008:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	fa93 f1a3 	rbit	r1, r3
 8004012:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004016:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800401a:	6019      	str	r1, [r3, #0]
  return result;
 800401c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004020:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	fab3 f383 	clz	r3, r3
 800402a:	b2db      	uxtb	r3, r3
 800402c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8004030:	b2db      	uxtb	r3, r3
 8004032:	f003 031f 	and.w	r3, r3, #31
 8004036:	2101      	movs	r1, #1
 8004038:	fa01 f303 	lsl.w	r3, r1, r3
 800403c:	4013      	ands	r3, r2
 800403e:	2b00      	cmp	r3, #0
 8004040:	d0a0      	beq.n	8003f84 <HAL_RCC_OscConfig+0x6a0>
 8004042:	e08d      	b.n	8004160 <HAL_RCC_OscConfig+0x87c>
 8004044:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004048:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800404c:	2201      	movs	r2, #1
 800404e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004050:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004054:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	fa93 f2a3 	rbit	r2, r3
 800405e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004062:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8004066:	601a      	str	r2, [r3, #0]
  return result;
 8004068:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800406c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8004070:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004072:	fab3 f383 	clz	r3, r3
 8004076:	b2db      	uxtb	r3, r3
 8004078:	461a      	mov	r2, r3
 800407a:	4b68      	ldr	r3, [pc, #416]	@ (800421c <HAL_RCC_OscConfig+0x938>)
 800407c:	4413      	add	r3, r2
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	461a      	mov	r2, r3
 8004082:	2300      	movs	r3, #0
 8004084:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004086:	f7fd f935 	bl	80012f4 <HAL_GetTick>
 800408a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800408e:	e00a      	b.n	80040a6 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004090:	f7fd f930 	bl	80012f4 <HAL_GetTick>
 8004094:	4602      	mov	r2, r0
 8004096:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	2b02      	cmp	r3, #2
 800409e:	d902      	bls.n	80040a6 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80040a0:	2303      	movs	r3, #3
 80040a2:	f000 bc55 	b.w	8004950 <HAL_RCC_OscConfig+0x106c>
 80040a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040aa:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80040ae:	2202      	movs	r2, #2
 80040b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040b6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	fa93 f2a3 	rbit	r2, r3
 80040c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040c4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80040c8:	601a      	str	r2, [r3, #0]
 80040ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040ce:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80040d2:	2202      	movs	r2, #2
 80040d4:	601a      	str	r2, [r3, #0]
 80040d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040da:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	fa93 f2a3 	rbit	r2, r3
 80040e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040e8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80040ec:	601a      	str	r2, [r3, #0]
 80040ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040f2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80040f6:	2202      	movs	r2, #2
 80040f8:	601a      	str	r2, [r3, #0]
 80040fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040fe:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	fa93 f2a3 	rbit	r2, r3
 8004108:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800410c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8004110:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004112:	4b41      	ldr	r3, [pc, #260]	@ (8004218 <HAL_RCC_OscConfig+0x934>)
 8004114:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004116:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800411a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800411e:	2102      	movs	r1, #2
 8004120:	6019      	str	r1, [r3, #0]
 8004122:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004126:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	fa93 f1a3 	rbit	r1, r3
 8004130:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004134:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8004138:	6019      	str	r1, [r3, #0]
  return result;
 800413a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800413e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	fab3 f383 	clz	r3, r3
 8004148:	b2db      	uxtb	r3, r3
 800414a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800414e:	b2db      	uxtb	r3, r3
 8004150:	f003 031f 	and.w	r3, r3, #31
 8004154:	2101      	movs	r1, #1
 8004156:	fa01 f303 	lsl.w	r3, r1, r3
 800415a:	4013      	ands	r3, r2
 800415c:	2b00      	cmp	r3, #0
 800415e:	d197      	bne.n	8004090 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004160:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004164:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 0304 	and.w	r3, r3, #4
 8004170:	2b00      	cmp	r3, #0
 8004172:	f000 81a1 	beq.w	80044b8 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004176:	2300      	movs	r3, #0
 8004178:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800417c:	4b26      	ldr	r3, [pc, #152]	@ (8004218 <HAL_RCC_OscConfig+0x934>)
 800417e:	69db      	ldr	r3, [r3, #28]
 8004180:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004184:	2b00      	cmp	r3, #0
 8004186:	d116      	bne.n	80041b6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004188:	4b23      	ldr	r3, [pc, #140]	@ (8004218 <HAL_RCC_OscConfig+0x934>)
 800418a:	69db      	ldr	r3, [r3, #28]
 800418c:	4a22      	ldr	r2, [pc, #136]	@ (8004218 <HAL_RCC_OscConfig+0x934>)
 800418e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004192:	61d3      	str	r3, [r2, #28]
 8004194:	4b20      	ldr	r3, [pc, #128]	@ (8004218 <HAL_RCC_OscConfig+0x934>)
 8004196:	69db      	ldr	r3, [r3, #28]
 8004198:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 800419c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041a0:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80041a4:	601a      	str	r2, [r3, #0]
 80041a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041aa:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80041ae:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80041b0:	2301      	movs	r3, #1
 80041b2:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041b6:	4b1a      	ldr	r3, [pc, #104]	@ (8004220 <HAL_RCC_OscConfig+0x93c>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d11a      	bne.n	80041f8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041c2:	4b17      	ldr	r3, [pc, #92]	@ (8004220 <HAL_RCC_OscConfig+0x93c>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a16      	ldr	r2, [pc, #88]	@ (8004220 <HAL_RCC_OscConfig+0x93c>)
 80041c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041cc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041ce:	f7fd f891 	bl	80012f4 <HAL_GetTick>
 80041d2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041d6:	e009      	b.n	80041ec <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041d8:	f7fd f88c 	bl	80012f4 <HAL_GetTick>
 80041dc:	4602      	mov	r2, r0
 80041de:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80041e2:	1ad3      	subs	r3, r2, r3
 80041e4:	2b64      	cmp	r3, #100	@ 0x64
 80041e6:	d901      	bls.n	80041ec <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80041e8:	2303      	movs	r3, #3
 80041ea:	e3b1      	b.n	8004950 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041ec:	4b0c      	ldr	r3, [pc, #48]	@ (8004220 <HAL_RCC_OscConfig+0x93c>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d0ef      	beq.n	80041d8 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041fc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	2b01      	cmp	r3, #1
 8004206:	d10d      	bne.n	8004224 <HAL_RCC_OscConfig+0x940>
 8004208:	4b03      	ldr	r3, [pc, #12]	@ (8004218 <HAL_RCC_OscConfig+0x934>)
 800420a:	6a1b      	ldr	r3, [r3, #32]
 800420c:	4a02      	ldr	r2, [pc, #8]	@ (8004218 <HAL_RCC_OscConfig+0x934>)
 800420e:	f043 0301 	orr.w	r3, r3, #1
 8004212:	6213      	str	r3, [r2, #32]
 8004214:	e03c      	b.n	8004290 <HAL_RCC_OscConfig+0x9ac>
 8004216:	bf00      	nop
 8004218:	40021000 	.word	0x40021000
 800421c:	10908120 	.word	0x10908120
 8004220:	40007000 	.word	0x40007000
 8004224:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004228:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d10c      	bne.n	800424e <HAL_RCC_OscConfig+0x96a>
 8004234:	4bc1      	ldr	r3, [pc, #772]	@ (800453c <HAL_RCC_OscConfig+0xc58>)
 8004236:	6a1b      	ldr	r3, [r3, #32]
 8004238:	4ac0      	ldr	r2, [pc, #768]	@ (800453c <HAL_RCC_OscConfig+0xc58>)
 800423a:	f023 0301 	bic.w	r3, r3, #1
 800423e:	6213      	str	r3, [r2, #32]
 8004240:	4bbe      	ldr	r3, [pc, #760]	@ (800453c <HAL_RCC_OscConfig+0xc58>)
 8004242:	6a1b      	ldr	r3, [r3, #32]
 8004244:	4abd      	ldr	r2, [pc, #756]	@ (800453c <HAL_RCC_OscConfig+0xc58>)
 8004246:	f023 0304 	bic.w	r3, r3, #4
 800424a:	6213      	str	r3, [r2, #32]
 800424c:	e020      	b.n	8004290 <HAL_RCC_OscConfig+0x9ac>
 800424e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004252:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	68db      	ldr	r3, [r3, #12]
 800425a:	2b05      	cmp	r3, #5
 800425c:	d10c      	bne.n	8004278 <HAL_RCC_OscConfig+0x994>
 800425e:	4bb7      	ldr	r3, [pc, #732]	@ (800453c <HAL_RCC_OscConfig+0xc58>)
 8004260:	6a1b      	ldr	r3, [r3, #32]
 8004262:	4ab6      	ldr	r2, [pc, #728]	@ (800453c <HAL_RCC_OscConfig+0xc58>)
 8004264:	f043 0304 	orr.w	r3, r3, #4
 8004268:	6213      	str	r3, [r2, #32]
 800426a:	4bb4      	ldr	r3, [pc, #720]	@ (800453c <HAL_RCC_OscConfig+0xc58>)
 800426c:	6a1b      	ldr	r3, [r3, #32]
 800426e:	4ab3      	ldr	r2, [pc, #716]	@ (800453c <HAL_RCC_OscConfig+0xc58>)
 8004270:	f043 0301 	orr.w	r3, r3, #1
 8004274:	6213      	str	r3, [r2, #32]
 8004276:	e00b      	b.n	8004290 <HAL_RCC_OscConfig+0x9ac>
 8004278:	4bb0      	ldr	r3, [pc, #704]	@ (800453c <HAL_RCC_OscConfig+0xc58>)
 800427a:	6a1b      	ldr	r3, [r3, #32]
 800427c:	4aaf      	ldr	r2, [pc, #700]	@ (800453c <HAL_RCC_OscConfig+0xc58>)
 800427e:	f023 0301 	bic.w	r3, r3, #1
 8004282:	6213      	str	r3, [r2, #32]
 8004284:	4bad      	ldr	r3, [pc, #692]	@ (800453c <HAL_RCC_OscConfig+0xc58>)
 8004286:	6a1b      	ldr	r3, [r3, #32]
 8004288:	4aac      	ldr	r2, [pc, #688]	@ (800453c <HAL_RCC_OscConfig+0xc58>)
 800428a:	f023 0304 	bic.w	r3, r3, #4
 800428e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004290:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004294:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	2b00      	cmp	r3, #0
 800429e:	f000 8081 	beq.w	80043a4 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042a2:	f7fd f827 	bl	80012f4 <HAL_GetTick>
 80042a6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042aa:	e00b      	b.n	80042c4 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042ac:	f7fd f822 	bl	80012f4 <HAL_GetTick>
 80042b0:	4602      	mov	r2, r0
 80042b2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80042b6:	1ad3      	subs	r3, r2, r3
 80042b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042bc:	4293      	cmp	r3, r2
 80042be:	d901      	bls.n	80042c4 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80042c0:	2303      	movs	r3, #3
 80042c2:	e345      	b.n	8004950 <HAL_RCC_OscConfig+0x106c>
 80042c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042c8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80042cc:	2202      	movs	r2, #2
 80042ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042d4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	fa93 f2a3 	rbit	r2, r3
 80042de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042e2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80042e6:	601a      	str	r2, [r3, #0]
 80042e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042ec:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80042f0:	2202      	movs	r2, #2
 80042f2:	601a      	str	r2, [r3, #0]
 80042f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042f8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	fa93 f2a3 	rbit	r2, r3
 8004302:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004306:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800430a:	601a      	str	r2, [r3, #0]
  return result;
 800430c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004310:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8004314:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004316:	fab3 f383 	clz	r3, r3
 800431a:	b2db      	uxtb	r3, r3
 800431c:	095b      	lsrs	r3, r3, #5
 800431e:	b2db      	uxtb	r3, r3
 8004320:	f043 0302 	orr.w	r3, r3, #2
 8004324:	b2db      	uxtb	r3, r3
 8004326:	2b02      	cmp	r3, #2
 8004328:	d102      	bne.n	8004330 <HAL_RCC_OscConfig+0xa4c>
 800432a:	4b84      	ldr	r3, [pc, #528]	@ (800453c <HAL_RCC_OscConfig+0xc58>)
 800432c:	6a1b      	ldr	r3, [r3, #32]
 800432e:	e013      	b.n	8004358 <HAL_RCC_OscConfig+0xa74>
 8004330:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004334:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8004338:	2202      	movs	r2, #2
 800433a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800433c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004340:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	fa93 f2a3 	rbit	r2, r3
 800434a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800434e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8004352:	601a      	str	r2, [r3, #0]
 8004354:	4b79      	ldr	r3, [pc, #484]	@ (800453c <HAL_RCC_OscConfig+0xc58>)
 8004356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004358:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800435c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8004360:	2102      	movs	r1, #2
 8004362:	6011      	str	r1, [r2, #0]
 8004364:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004368:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 800436c:	6812      	ldr	r2, [r2, #0]
 800436e:	fa92 f1a2 	rbit	r1, r2
 8004372:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004376:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800437a:	6011      	str	r1, [r2, #0]
  return result;
 800437c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004380:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8004384:	6812      	ldr	r2, [r2, #0]
 8004386:	fab2 f282 	clz	r2, r2
 800438a:	b2d2      	uxtb	r2, r2
 800438c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004390:	b2d2      	uxtb	r2, r2
 8004392:	f002 021f 	and.w	r2, r2, #31
 8004396:	2101      	movs	r1, #1
 8004398:	fa01 f202 	lsl.w	r2, r1, r2
 800439c:	4013      	ands	r3, r2
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d084      	beq.n	80042ac <HAL_RCC_OscConfig+0x9c8>
 80043a2:	e07f      	b.n	80044a4 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043a4:	f7fc ffa6 	bl	80012f4 <HAL_GetTick>
 80043a8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043ac:	e00b      	b.n	80043c6 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043ae:	f7fc ffa1 	bl	80012f4 <HAL_GetTick>
 80043b2:	4602      	mov	r2, r0
 80043b4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80043b8:	1ad3      	subs	r3, r2, r3
 80043ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043be:	4293      	cmp	r3, r2
 80043c0:	d901      	bls.n	80043c6 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80043c2:	2303      	movs	r3, #3
 80043c4:	e2c4      	b.n	8004950 <HAL_RCC_OscConfig+0x106c>
 80043c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043ca:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80043ce:	2202      	movs	r2, #2
 80043d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043d6:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	fa93 f2a3 	rbit	r2, r3
 80043e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043e4:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80043e8:	601a      	str	r2, [r3, #0]
 80043ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043ee:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80043f2:	2202      	movs	r2, #2
 80043f4:	601a      	str	r2, [r3, #0]
 80043f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043fa:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	fa93 f2a3 	rbit	r2, r3
 8004404:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004408:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800440c:	601a      	str	r2, [r3, #0]
  return result;
 800440e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004412:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8004416:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004418:	fab3 f383 	clz	r3, r3
 800441c:	b2db      	uxtb	r3, r3
 800441e:	095b      	lsrs	r3, r3, #5
 8004420:	b2db      	uxtb	r3, r3
 8004422:	f043 0302 	orr.w	r3, r3, #2
 8004426:	b2db      	uxtb	r3, r3
 8004428:	2b02      	cmp	r3, #2
 800442a:	d102      	bne.n	8004432 <HAL_RCC_OscConfig+0xb4e>
 800442c:	4b43      	ldr	r3, [pc, #268]	@ (800453c <HAL_RCC_OscConfig+0xc58>)
 800442e:	6a1b      	ldr	r3, [r3, #32]
 8004430:	e013      	b.n	800445a <HAL_RCC_OscConfig+0xb76>
 8004432:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004436:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800443a:	2202      	movs	r2, #2
 800443c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800443e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004442:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	fa93 f2a3 	rbit	r2, r3
 800444c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004450:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8004454:	601a      	str	r2, [r3, #0]
 8004456:	4b39      	ldr	r3, [pc, #228]	@ (800453c <HAL_RCC_OscConfig+0xc58>)
 8004458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800445a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800445e:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8004462:	2102      	movs	r1, #2
 8004464:	6011      	str	r1, [r2, #0]
 8004466:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800446a:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800446e:	6812      	ldr	r2, [r2, #0]
 8004470:	fa92 f1a2 	rbit	r1, r2
 8004474:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004478:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800447c:	6011      	str	r1, [r2, #0]
  return result;
 800447e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004482:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8004486:	6812      	ldr	r2, [r2, #0]
 8004488:	fab2 f282 	clz	r2, r2
 800448c:	b2d2      	uxtb	r2, r2
 800448e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004492:	b2d2      	uxtb	r2, r2
 8004494:	f002 021f 	and.w	r2, r2, #31
 8004498:	2101      	movs	r1, #1
 800449a:	fa01 f202 	lsl.w	r2, r1, r2
 800449e:	4013      	ands	r3, r2
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d184      	bne.n	80043ae <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80044a4:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d105      	bne.n	80044b8 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044ac:	4b23      	ldr	r3, [pc, #140]	@ (800453c <HAL_RCC_OscConfig+0xc58>)
 80044ae:	69db      	ldr	r3, [r3, #28]
 80044b0:	4a22      	ldr	r2, [pc, #136]	@ (800453c <HAL_RCC_OscConfig+0xc58>)
 80044b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80044b6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044bc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	69db      	ldr	r3, [r3, #28]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	f000 8242 	beq.w	800494e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80044ca:	4b1c      	ldr	r3, [pc, #112]	@ (800453c <HAL_RCC_OscConfig+0xc58>)
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	f003 030c 	and.w	r3, r3, #12
 80044d2:	2b08      	cmp	r3, #8
 80044d4:	f000 8213 	beq.w	80048fe <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044dc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	69db      	ldr	r3, [r3, #28]
 80044e4:	2b02      	cmp	r3, #2
 80044e6:	f040 8162 	bne.w	80047ae <HAL_RCC_OscConfig+0xeca>
 80044ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044ee:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80044f2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80044f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044fc:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	fa93 f2a3 	rbit	r2, r3
 8004506:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800450a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800450e:	601a      	str	r2, [r3, #0]
  return result;
 8004510:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004514:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8004518:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800451a:	fab3 f383 	clz	r3, r3
 800451e:	b2db      	uxtb	r3, r3
 8004520:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004524:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004528:	009b      	lsls	r3, r3, #2
 800452a:	461a      	mov	r2, r3
 800452c:	2300      	movs	r3, #0
 800452e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004530:	f7fc fee0 	bl	80012f4 <HAL_GetTick>
 8004534:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004538:	e00c      	b.n	8004554 <HAL_RCC_OscConfig+0xc70>
 800453a:	bf00      	nop
 800453c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004540:	f7fc fed8 	bl	80012f4 <HAL_GetTick>
 8004544:	4602      	mov	r2, r0
 8004546:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800454a:	1ad3      	subs	r3, r2, r3
 800454c:	2b02      	cmp	r3, #2
 800454e:	d901      	bls.n	8004554 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8004550:	2303      	movs	r3, #3
 8004552:	e1fd      	b.n	8004950 <HAL_RCC_OscConfig+0x106c>
 8004554:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004558:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800455c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004560:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004562:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004566:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	fa93 f2a3 	rbit	r2, r3
 8004570:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004574:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8004578:	601a      	str	r2, [r3, #0]
  return result;
 800457a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800457e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8004582:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004584:	fab3 f383 	clz	r3, r3
 8004588:	b2db      	uxtb	r3, r3
 800458a:	095b      	lsrs	r3, r3, #5
 800458c:	b2db      	uxtb	r3, r3
 800458e:	f043 0301 	orr.w	r3, r3, #1
 8004592:	b2db      	uxtb	r3, r3
 8004594:	2b01      	cmp	r3, #1
 8004596:	d102      	bne.n	800459e <HAL_RCC_OscConfig+0xcba>
 8004598:	4bb0      	ldr	r3, [pc, #704]	@ (800485c <HAL_RCC_OscConfig+0xf78>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	e027      	b.n	80045ee <HAL_RCC_OscConfig+0xd0a>
 800459e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045a2:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80045a6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80045aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045b0:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	fa93 f2a3 	rbit	r2, r3
 80045ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045be:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80045c2:	601a      	str	r2, [r3, #0]
 80045c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045c8:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80045cc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80045d0:	601a      	str	r2, [r3, #0]
 80045d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045d6:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	fa93 f2a3 	rbit	r2, r3
 80045e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045e4:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80045e8:	601a      	str	r2, [r3, #0]
 80045ea:	4b9c      	ldr	r3, [pc, #624]	@ (800485c <HAL_RCC_OscConfig+0xf78>)
 80045ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ee:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80045f2:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80045f6:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80045fa:	6011      	str	r1, [r2, #0]
 80045fc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004600:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8004604:	6812      	ldr	r2, [r2, #0]
 8004606:	fa92 f1a2 	rbit	r1, r2
 800460a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800460e:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8004612:	6011      	str	r1, [r2, #0]
  return result;
 8004614:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004618:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800461c:	6812      	ldr	r2, [r2, #0]
 800461e:	fab2 f282 	clz	r2, r2
 8004622:	b2d2      	uxtb	r2, r2
 8004624:	f042 0220 	orr.w	r2, r2, #32
 8004628:	b2d2      	uxtb	r2, r2
 800462a:	f002 021f 	and.w	r2, r2, #31
 800462e:	2101      	movs	r1, #1
 8004630:	fa01 f202 	lsl.w	r2, r1, r2
 8004634:	4013      	ands	r3, r2
 8004636:	2b00      	cmp	r3, #0
 8004638:	d182      	bne.n	8004540 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800463a:	4b88      	ldr	r3, [pc, #544]	@ (800485c <HAL_RCC_OscConfig+0xf78>)
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004642:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004646:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800464e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004652:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	6a1b      	ldr	r3, [r3, #32]
 800465a:	430b      	orrs	r3, r1
 800465c:	497f      	ldr	r1, [pc, #508]	@ (800485c <HAL_RCC_OscConfig+0xf78>)
 800465e:	4313      	orrs	r3, r2
 8004660:	604b      	str	r3, [r1, #4]
 8004662:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004666:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800466a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800466e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004670:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004674:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	fa93 f2a3 	rbit	r2, r3
 800467e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004682:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8004686:	601a      	str	r2, [r3, #0]
  return result;
 8004688:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800468c:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8004690:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004692:	fab3 f383 	clz	r3, r3
 8004696:	b2db      	uxtb	r3, r3
 8004698:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800469c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80046a0:	009b      	lsls	r3, r3, #2
 80046a2:	461a      	mov	r2, r3
 80046a4:	2301      	movs	r3, #1
 80046a6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046a8:	f7fc fe24 	bl	80012f4 <HAL_GetTick>
 80046ac:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80046b0:	e009      	b.n	80046c6 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046b2:	f7fc fe1f 	bl	80012f4 <HAL_GetTick>
 80046b6:	4602      	mov	r2, r0
 80046b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	2b02      	cmp	r3, #2
 80046c0:	d901      	bls.n	80046c6 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80046c2:	2303      	movs	r3, #3
 80046c4:	e144      	b.n	8004950 <HAL_RCC_OscConfig+0x106c>
 80046c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046ca:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80046ce:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80046d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046d8:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	fa93 f2a3 	rbit	r2, r3
 80046e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046e6:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80046ea:	601a      	str	r2, [r3, #0]
  return result;
 80046ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046f0:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80046f4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80046f6:	fab3 f383 	clz	r3, r3
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	095b      	lsrs	r3, r3, #5
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	f043 0301 	orr.w	r3, r3, #1
 8004704:	b2db      	uxtb	r3, r3
 8004706:	2b01      	cmp	r3, #1
 8004708:	d102      	bne.n	8004710 <HAL_RCC_OscConfig+0xe2c>
 800470a:	4b54      	ldr	r3, [pc, #336]	@ (800485c <HAL_RCC_OscConfig+0xf78>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	e027      	b.n	8004760 <HAL_RCC_OscConfig+0xe7c>
 8004710:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004714:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8004718:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800471c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800471e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004722:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	fa93 f2a3 	rbit	r2, r3
 800472c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004730:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8004734:	601a      	str	r2, [r3, #0]
 8004736:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800473a:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800473e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004742:	601a      	str	r2, [r3, #0]
 8004744:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004748:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	fa93 f2a3 	rbit	r2, r3
 8004752:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004756:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800475a:	601a      	str	r2, [r3, #0]
 800475c:	4b3f      	ldr	r3, [pc, #252]	@ (800485c <HAL_RCC_OscConfig+0xf78>)
 800475e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004760:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004764:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8004768:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800476c:	6011      	str	r1, [r2, #0]
 800476e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004772:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8004776:	6812      	ldr	r2, [r2, #0]
 8004778:	fa92 f1a2 	rbit	r1, r2
 800477c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004780:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8004784:	6011      	str	r1, [r2, #0]
  return result;
 8004786:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800478a:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800478e:	6812      	ldr	r2, [r2, #0]
 8004790:	fab2 f282 	clz	r2, r2
 8004794:	b2d2      	uxtb	r2, r2
 8004796:	f042 0220 	orr.w	r2, r2, #32
 800479a:	b2d2      	uxtb	r2, r2
 800479c:	f002 021f 	and.w	r2, r2, #31
 80047a0:	2101      	movs	r1, #1
 80047a2:	fa01 f202 	lsl.w	r2, r1, r2
 80047a6:	4013      	ands	r3, r2
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d082      	beq.n	80046b2 <HAL_RCC_OscConfig+0xdce>
 80047ac:	e0cf      	b.n	800494e <HAL_RCC_OscConfig+0x106a>
 80047ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047b2:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80047b6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80047ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047c0:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	fa93 f2a3 	rbit	r2, r3
 80047ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047ce:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80047d2:	601a      	str	r2, [r3, #0]
  return result;
 80047d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047d8:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80047dc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047de:	fab3 f383 	clz	r3, r3
 80047e2:	b2db      	uxtb	r3, r3
 80047e4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80047e8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80047ec:	009b      	lsls	r3, r3, #2
 80047ee:	461a      	mov	r2, r3
 80047f0:	2300      	movs	r3, #0
 80047f2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047f4:	f7fc fd7e 	bl	80012f4 <HAL_GetTick>
 80047f8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047fc:	e009      	b.n	8004812 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047fe:	f7fc fd79 	bl	80012f4 <HAL_GetTick>
 8004802:	4602      	mov	r2, r0
 8004804:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004808:	1ad3      	subs	r3, r2, r3
 800480a:	2b02      	cmp	r3, #2
 800480c:	d901      	bls.n	8004812 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800480e:	2303      	movs	r3, #3
 8004810:	e09e      	b.n	8004950 <HAL_RCC_OscConfig+0x106c>
 8004812:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004816:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800481a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800481e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004820:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004824:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	fa93 f2a3 	rbit	r2, r3
 800482e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004832:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8004836:	601a      	str	r2, [r3, #0]
  return result;
 8004838:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800483c:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8004840:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004842:	fab3 f383 	clz	r3, r3
 8004846:	b2db      	uxtb	r3, r3
 8004848:	095b      	lsrs	r3, r3, #5
 800484a:	b2db      	uxtb	r3, r3
 800484c:	f043 0301 	orr.w	r3, r3, #1
 8004850:	b2db      	uxtb	r3, r3
 8004852:	2b01      	cmp	r3, #1
 8004854:	d104      	bne.n	8004860 <HAL_RCC_OscConfig+0xf7c>
 8004856:	4b01      	ldr	r3, [pc, #4]	@ (800485c <HAL_RCC_OscConfig+0xf78>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	e029      	b.n	80048b0 <HAL_RCC_OscConfig+0xfcc>
 800485c:	40021000 	.word	0x40021000
 8004860:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004864:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8004868:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800486c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800486e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004872:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	fa93 f2a3 	rbit	r2, r3
 800487c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004880:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8004884:	601a      	str	r2, [r3, #0]
 8004886:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800488a:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800488e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004892:	601a      	str	r2, [r3, #0]
 8004894:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004898:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	fa93 f2a3 	rbit	r2, r3
 80048a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048a6:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80048aa:	601a      	str	r2, [r3, #0]
 80048ac:	4b2b      	ldr	r3, [pc, #172]	@ (800495c <HAL_RCC_OscConfig+0x1078>)
 80048ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048b0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80048b4:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80048b8:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80048bc:	6011      	str	r1, [r2, #0]
 80048be:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80048c2:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80048c6:	6812      	ldr	r2, [r2, #0]
 80048c8:	fa92 f1a2 	rbit	r1, r2
 80048cc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80048d0:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80048d4:	6011      	str	r1, [r2, #0]
  return result;
 80048d6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80048da:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80048de:	6812      	ldr	r2, [r2, #0]
 80048e0:	fab2 f282 	clz	r2, r2
 80048e4:	b2d2      	uxtb	r2, r2
 80048e6:	f042 0220 	orr.w	r2, r2, #32
 80048ea:	b2d2      	uxtb	r2, r2
 80048ec:	f002 021f 	and.w	r2, r2, #31
 80048f0:	2101      	movs	r1, #1
 80048f2:	fa01 f202 	lsl.w	r2, r1, r2
 80048f6:	4013      	ands	r3, r2
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d180      	bne.n	80047fe <HAL_RCC_OscConfig+0xf1a>
 80048fc:	e027      	b.n	800494e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80048fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004902:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	69db      	ldr	r3, [r3, #28]
 800490a:	2b01      	cmp	r3, #1
 800490c:	d101      	bne.n	8004912 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e01e      	b.n	8004950 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004912:	4b12      	ldr	r3, [pc, #72]	@ (800495c <HAL_RCC_OscConfig+0x1078>)
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800491a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800491e:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004922:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004926:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	6a1b      	ldr	r3, [r3, #32]
 800492e:	429a      	cmp	r2, r3
 8004930:	d10b      	bne.n	800494a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004932:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8004936:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800493a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800493e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004946:	429a      	cmp	r2, r3
 8004948:	d001      	beq.n	800494e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	e000      	b.n	8004950 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800494e:	2300      	movs	r3, #0
}
 8004950:	4618      	mov	r0, r3
 8004952:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}
 800495a:	bf00      	nop
 800495c:	40021000 	.word	0x40021000

08004960 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b09e      	sub	sp, #120	@ 0x78
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
 8004968:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800496a:	2300      	movs	r3, #0
 800496c:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d101      	bne.n	8004978 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004974:	2301      	movs	r3, #1
 8004976:	e162      	b.n	8004c3e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004978:	4b90      	ldr	r3, [pc, #576]	@ (8004bbc <HAL_RCC_ClockConfig+0x25c>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f003 0307 	and.w	r3, r3, #7
 8004980:	683a      	ldr	r2, [r7, #0]
 8004982:	429a      	cmp	r2, r3
 8004984:	d910      	bls.n	80049a8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004986:	4b8d      	ldr	r3, [pc, #564]	@ (8004bbc <HAL_RCC_ClockConfig+0x25c>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f023 0207 	bic.w	r2, r3, #7
 800498e:	498b      	ldr	r1, [pc, #556]	@ (8004bbc <HAL_RCC_ClockConfig+0x25c>)
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	4313      	orrs	r3, r2
 8004994:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004996:	4b89      	ldr	r3, [pc, #548]	@ (8004bbc <HAL_RCC_ClockConfig+0x25c>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 0307 	and.w	r3, r3, #7
 800499e:	683a      	ldr	r2, [r7, #0]
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d001      	beq.n	80049a8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	e14a      	b.n	8004c3e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f003 0302 	and.w	r3, r3, #2
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d008      	beq.n	80049c6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049b4:	4b82      	ldr	r3, [pc, #520]	@ (8004bc0 <HAL_RCC_ClockConfig+0x260>)
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	497f      	ldr	r1, [pc, #508]	@ (8004bc0 <HAL_RCC_ClockConfig+0x260>)
 80049c2:	4313      	orrs	r3, r2
 80049c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 0301 	and.w	r3, r3, #1
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	f000 80dc 	beq.w	8004b8c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d13c      	bne.n	8004a56 <HAL_RCC_ClockConfig+0xf6>
 80049dc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80049e0:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049e2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80049e4:	fa93 f3a3 	rbit	r3, r3
 80049e8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80049ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049ec:	fab3 f383 	clz	r3, r3
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	095b      	lsrs	r3, r3, #5
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	f043 0301 	orr.w	r3, r3, #1
 80049fa:	b2db      	uxtb	r3, r3
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d102      	bne.n	8004a06 <HAL_RCC_ClockConfig+0xa6>
 8004a00:	4b6f      	ldr	r3, [pc, #444]	@ (8004bc0 <HAL_RCC_ClockConfig+0x260>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	e00f      	b.n	8004a26 <HAL_RCC_ClockConfig+0xc6>
 8004a06:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004a0a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a0c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004a0e:	fa93 f3a3 	rbit	r3, r3
 8004a12:	667b      	str	r3, [r7, #100]	@ 0x64
 8004a14:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004a18:	663b      	str	r3, [r7, #96]	@ 0x60
 8004a1a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004a1c:	fa93 f3a3 	rbit	r3, r3
 8004a20:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004a22:	4b67      	ldr	r3, [pc, #412]	@ (8004bc0 <HAL_RCC_ClockConfig+0x260>)
 8004a24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a26:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004a2a:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004a2c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004a2e:	fa92 f2a2 	rbit	r2, r2
 8004a32:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8004a34:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004a36:	fab2 f282 	clz	r2, r2
 8004a3a:	b2d2      	uxtb	r2, r2
 8004a3c:	f042 0220 	orr.w	r2, r2, #32
 8004a40:	b2d2      	uxtb	r2, r2
 8004a42:	f002 021f 	and.w	r2, r2, #31
 8004a46:	2101      	movs	r1, #1
 8004a48:	fa01 f202 	lsl.w	r2, r1, r2
 8004a4c:	4013      	ands	r3, r2
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d17b      	bne.n	8004b4a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	e0f3      	b.n	8004c3e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	2b02      	cmp	r3, #2
 8004a5c:	d13c      	bne.n	8004ad8 <HAL_RCC_ClockConfig+0x178>
 8004a5e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004a62:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a64:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a66:	fa93 f3a3 	rbit	r3, r3
 8004a6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004a6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a6e:	fab3 f383 	clz	r3, r3
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	095b      	lsrs	r3, r3, #5
 8004a76:	b2db      	uxtb	r3, r3
 8004a78:	f043 0301 	orr.w	r3, r3, #1
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	d102      	bne.n	8004a88 <HAL_RCC_ClockConfig+0x128>
 8004a82:	4b4f      	ldr	r3, [pc, #316]	@ (8004bc0 <HAL_RCC_ClockConfig+0x260>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	e00f      	b.n	8004aa8 <HAL_RCC_ClockConfig+0x148>
 8004a88:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004a8c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a90:	fa93 f3a3 	rbit	r3, r3
 8004a94:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a96:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004a9a:	643b      	str	r3, [r7, #64]	@ 0x40
 8004a9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a9e:	fa93 f3a3 	rbit	r3, r3
 8004aa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004aa4:	4b46      	ldr	r3, [pc, #280]	@ (8004bc0 <HAL_RCC_ClockConfig+0x260>)
 8004aa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aa8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004aac:	63ba      	str	r2, [r7, #56]	@ 0x38
 8004aae:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004ab0:	fa92 f2a2 	rbit	r2, r2
 8004ab4:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8004ab6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004ab8:	fab2 f282 	clz	r2, r2
 8004abc:	b2d2      	uxtb	r2, r2
 8004abe:	f042 0220 	orr.w	r2, r2, #32
 8004ac2:	b2d2      	uxtb	r2, r2
 8004ac4:	f002 021f 	and.w	r2, r2, #31
 8004ac8:	2101      	movs	r1, #1
 8004aca:	fa01 f202 	lsl.w	r2, r1, r2
 8004ace:	4013      	ands	r3, r2
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d13a      	bne.n	8004b4a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	e0b2      	b.n	8004c3e <HAL_RCC_ClockConfig+0x2de>
 8004ad8:	2302      	movs	r3, #2
 8004ada:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004adc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ade:	fa93 f3a3 	rbit	r3, r3
 8004ae2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004ae4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ae6:	fab3 f383 	clz	r3, r3
 8004aea:	b2db      	uxtb	r3, r3
 8004aec:	095b      	lsrs	r3, r3, #5
 8004aee:	b2db      	uxtb	r3, r3
 8004af0:	f043 0301 	orr.w	r3, r3, #1
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d102      	bne.n	8004b00 <HAL_RCC_ClockConfig+0x1a0>
 8004afa:	4b31      	ldr	r3, [pc, #196]	@ (8004bc0 <HAL_RCC_ClockConfig+0x260>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	e00d      	b.n	8004b1c <HAL_RCC_ClockConfig+0x1bc>
 8004b00:	2302      	movs	r3, #2
 8004b02:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b06:	fa93 f3a3 	rbit	r3, r3
 8004b0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b0c:	2302      	movs	r3, #2
 8004b0e:	623b      	str	r3, [r7, #32]
 8004b10:	6a3b      	ldr	r3, [r7, #32]
 8004b12:	fa93 f3a3 	rbit	r3, r3
 8004b16:	61fb      	str	r3, [r7, #28]
 8004b18:	4b29      	ldr	r3, [pc, #164]	@ (8004bc0 <HAL_RCC_ClockConfig+0x260>)
 8004b1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b1c:	2202      	movs	r2, #2
 8004b1e:	61ba      	str	r2, [r7, #24]
 8004b20:	69ba      	ldr	r2, [r7, #24]
 8004b22:	fa92 f2a2 	rbit	r2, r2
 8004b26:	617a      	str	r2, [r7, #20]
  return result;
 8004b28:	697a      	ldr	r2, [r7, #20]
 8004b2a:	fab2 f282 	clz	r2, r2
 8004b2e:	b2d2      	uxtb	r2, r2
 8004b30:	f042 0220 	orr.w	r2, r2, #32
 8004b34:	b2d2      	uxtb	r2, r2
 8004b36:	f002 021f 	and.w	r2, r2, #31
 8004b3a:	2101      	movs	r1, #1
 8004b3c:	fa01 f202 	lsl.w	r2, r1, r2
 8004b40:	4013      	ands	r3, r2
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d101      	bne.n	8004b4a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e079      	b.n	8004c3e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b4a:	4b1d      	ldr	r3, [pc, #116]	@ (8004bc0 <HAL_RCC_ClockConfig+0x260>)
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	f023 0203 	bic.w	r2, r3, #3
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	491a      	ldr	r1, [pc, #104]	@ (8004bc0 <HAL_RCC_ClockConfig+0x260>)
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b5c:	f7fc fbca 	bl	80012f4 <HAL_GetTick>
 8004b60:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b62:	e00a      	b.n	8004b7a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b64:	f7fc fbc6 	bl	80012f4 <HAL_GetTick>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004b6c:	1ad3      	subs	r3, r2, r3
 8004b6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d901      	bls.n	8004b7a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004b76:	2303      	movs	r3, #3
 8004b78:	e061      	b.n	8004c3e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b7a:	4b11      	ldr	r3, [pc, #68]	@ (8004bc0 <HAL_RCC_ClockConfig+0x260>)
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	f003 020c 	and.w	r2, r3, #12
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	009b      	lsls	r3, r3, #2
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	d1eb      	bne.n	8004b64 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b8c:	4b0b      	ldr	r3, [pc, #44]	@ (8004bbc <HAL_RCC_ClockConfig+0x25c>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f003 0307 	and.w	r3, r3, #7
 8004b94:	683a      	ldr	r2, [r7, #0]
 8004b96:	429a      	cmp	r2, r3
 8004b98:	d214      	bcs.n	8004bc4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b9a:	4b08      	ldr	r3, [pc, #32]	@ (8004bbc <HAL_RCC_ClockConfig+0x25c>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f023 0207 	bic.w	r2, r3, #7
 8004ba2:	4906      	ldr	r1, [pc, #24]	@ (8004bbc <HAL_RCC_ClockConfig+0x25c>)
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004baa:	4b04      	ldr	r3, [pc, #16]	@ (8004bbc <HAL_RCC_ClockConfig+0x25c>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f003 0307 	and.w	r3, r3, #7
 8004bb2:	683a      	ldr	r2, [r7, #0]
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	d005      	beq.n	8004bc4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	e040      	b.n	8004c3e <HAL_RCC_ClockConfig+0x2de>
 8004bbc:	40022000 	.word	0x40022000
 8004bc0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f003 0304 	and.w	r3, r3, #4
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d008      	beq.n	8004be2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004bd0:	4b1d      	ldr	r3, [pc, #116]	@ (8004c48 <HAL_RCC_ClockConfig+0x2e8>)
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	68db      	ldr	r3, [r3, #12]
 8004bdc:	491a      	ldr	r1, [pc, #104]	@ (8004c48 <HAL_RCC_ClockConfig+0x2e8>)
 8004bde:	4313      	orrs	r3, r2
 8004be0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f003 0308 	and.w	r3, r3, #8
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d009      	beq.n	8004c02 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004bee:	4b16      	ldr	r3, [pc, #88]	@ (8004c48 <HAL_RCC_ClockConfig+0x2e8>)
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	691b      	ldr	r3, [r3, #16]
 8004bfa:	00db      	lsls	r3, r3, #3
 8004bfc:	4912      	ldr	r1, [pc, #72]	@ (8004c48 <HAL_RCC_ClockConfig+0x2e8>)
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004c02:	f000 f829 	bl	8004c58 <HAL_RCC_GetSysClockFreq>
 8004c06:	4601      	mov	r1, r0
 8004c08:	4b0f      	ldr	r3, [pc, #60]	@ (8004c48 <HAL_RCC_ClockConfig+0x2e8>)
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004c10:	22f0      	movs	r2, #240	@ 0xf0
 8004c12:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c14:	693a      	ldr	r2, [r7, #16]
 8004c16:	fa92 f2a2 	rbit	r2, r2
 8004c1a:	60fa      	str	r2, [r7, #12]
  return result;
 8004c1c:	68fa      	ldr	r2, [r7, #12]
 8004c1e:	fab2 f282 	clz	r2, r2
 8004c22:	b2d2      	uxtb	r2, r2
 8004c24:	40d3      	lsrs	r3, r2
 8004c26:	4a09      	ldr	r2, [pc, #36]	@ (8004c4c <HAL_RCC_ClockConfig+0x2ec>)
 8004c28:	5cd3      	ldrb	r3, [r2, r3]
 8004c2a:	fa21 f303 	lsr.w	r3, r1, r3
 8004c2e:	4a08      	ldr	r2, [pc, #32]	@ (8004c50 <HAL_RCC_ClockConfig+0x2f0>)
 8004c30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004c32:	4b08      	ldr	r3, [pc, #32]	@ (8004c54 <HAL_RCC_ClockConfig+0x2f4>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4618      	mov	r0, r3
 8004c38:	f7fc fb18 	bl	800126c <HAL_InitTick>
  
  return HAL_OK;
 8004c3c:	2300      	movs	r3, #0
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3778      	adds	r7, #120	@ 0x78
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}
 8004c46:	bf00      	nop
 8004c48:	40021000 	.word	0x40021000
 8004c4c:	08006cf0 	.word	0x08006cf0
 8004c50:	20000000 	.word	0x20000000
 8004c54:	20000004 	.word	0x20000004

08004c58 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b087      	sub	sp, #28
 8004c5c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	60fb      	str	r3, [r7, #12]
 8004c62:	2300      	movs	r3, #0
 8004c64:	60bb      	str	r3, [r7, #8]
 8004c66:	2300      	movs	r3, #0
 8004c68:	617b      	str	r3, [r7, #20]
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8004c72:	4b1e      	ldr	r3, [pc, #120]	@ (8004cec <HAL_RCC_GetSysClockFreq+0x94>)
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	f003 030c 	and.w	r3, r3, #12
 8004c7e:	2b04      	cmp	r3, #4
 8004c80:	d002      	beq.n	8004c88 <HAL_RCC_GetSysClockFreq+0x30>
 8004c82:	2b08      	cmp	r3, #8
 8004c84:	d003      	beq.n	8004c8e <HAL_RCC_GetSysClockFreq+0x36>
 8004c86:	e026      	b.n	8004cd6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004c88:	4b19      	ldr	r3, [pc, #100]	@ (8004cf0 <HAL_RCC_GetSysClockFreq+0x98>)
 8004c8a:	613b      	str	r3, [r7, #16]
      break;
 8004c8c:	e026      	b.n	8004cdc <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	0c9b      	lsrs	r3, r3, #18
 8004c92:	f003 030f 	and.w	r3, r3, #15
 8004c96:	4a17      	ldr	r2, [pc, #92]	@ (8004cf4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004c98:	5cd3      	ldrb	r3, [r2, r3]
 8004c9a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8004c9c:	4b13      	ldr	r3, [pc, #76]	@ (8004cec <HAL_RCC_GetSysClockFreq+0x94>)
 8004c9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ca0:	f003 030f 	and.w	r3, r3, #15
 8004ca4:	4a14      	ldr	r2, [pc, #80]	@ (8004cf8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004ca6:	5cd3      	ldrb	r3, [r2, r3]
 8004ca8:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d008      	beq.n	8004cc6 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004cb4:	4a0e      	ldr	r2, [pc, #56]	@ (8004cf0 <HAL_RCC_GetSysClockFreq+0x98>)
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	fbb2 f2f3 	udiv	r2, r2, r3
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	fb02 f303 	mul.w	r3, r2, r3
 8004cc2:	617b      	str	r3, [r7, #20]
 8004cc4:	e004      	b.n	8004cd0 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	4a0c      	ldr	r2, [pc, #48]	@ (8004cfc <HAL_RCC_GetSysClockFreq+0xa4>)
 8004cca:	fb02 f303 	mul.w	r3, r2, r3
 8004cce:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	613b      	str	r3, [r7, #16]
      break;
 8004cd4:	e002      	b.n	8004cdc <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004cd6:	4b06      	ldr	r3, [pc, #24]	@ (8004cf0 <HAL_RCC_GetSysClockFreq+0x98>)
 8004cd8:	613b      	str	r3, [r7, #16]
      break;
 8004cda:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004cdc:	693b      	ldr	r3, [r7, #16]
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	371c      	adds	r7, #28
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce8:	4770      	bx	lr
 8004cea:	bf00      	nop
 8004cec:	40021000 	.word	0x40021000
 8004cf0:	007a1200 	.word	0x007a1200
 8004cf4:	08006d08 	.word	0x08006d08
 8004cf8:	08006d18 	.word	0x08006d18
 8004cfc:	003d0900 	.word	0x003d0900

08004d00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d00:	b480      	push	{r7}
 8004d02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d04:	4b03      	ldr	r3, [pc, #12]	@ (8004d14 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d06:	681b      	ldr	r3, [r3, #0]
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr
 8004d12:	bf00      	nop
 8004d14:	20000000 	.word	0x20000000

08004d18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b082      	sub	sp, #8
 8004d1c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004d1e:	f7ff ffef 	bl	8004d00 <HAL_RCC_GetHCLKFreq>
 8004d22:	4601      	mov	r1, r0
 8004d24:	4b0b      	ldr	r3, [pc, #44]	@ (8004d54 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004d2c:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8004d30:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d32:	687a      	ldr	r2, [r7, #4]
 8004d34:	fa92 f2a2 	rbit	r2, r2
 8004d38:	603a      	str	r2, [r7, #0]
  return result;
 8004d3a:	683a      	ldr	r2, [r7, #0]
 8004d3c:	fab2 f282 	clz	r2, r2
 8004d40:	b2d2      	uxtb	r2, r2
 8004d42:	40d3      	lsrs	r3, r2
 8004d44:	4a04      	ldr	r2, [pc, #16]	@ (8004d58 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004d46:	5cd3      	ldrb	r3, [r2, r3]
 8004d48:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3708      	adds	r7, #8
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}
 8004d54:	40021000 	.word	0x40021000
 8004d58:	08006d00 	.word	0x08006d00

08004d5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b082      	sub	sp, #8
 8004d60:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004d62:	f7ff ffcd 	bl	8004d00 <HAL_RCC_GetHCLKFreq>
 8004d66:	4601      	mov	r1, r0
 8004d68:	4b0b      	ldr	r3, [pc, #44]	@ (8004d98 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8004d70:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8004d74:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d76:	687a      	ldr	r2, [r7, #4]
 8004d78:	fa92 f2a2 	rbit	r2, r2
 8004d7c:	603a      	str	r2, [r7, #0]
  return result;
 8004d7e:	683a      	ldr	r2, [r7, #0]
 8004d80:	fab2 f282 	clz	r2, r2
 8004d84:	b2d2      	uxtb	r2, r2
 8004d86:	40d3      	lsrs	r3, r2
 8004d88:	4a04      	ldr	r2, [pc, #16]	@ (8004d9c <HAL_RCC_GetPCLK2Freq+0x40>)
 8004d8a:	5cd3      	ldrb	r3, [r2, r3]
 8004d8c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004d90:	4618      	mov	r0, r3
 8004d92:	3708      	adds	r7, #8
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}
 8004d98:	40021000 	.word	0x40021000
 8004d9c:	08006d00 	.word	0x08006d00

08004da0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b082      	sub	sp, #8
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d101      	bne.n	8004db2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	e049      	b.n	8004e46 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d106      	bne.n	8004dcc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f7fc f898 	bl	8000efc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2202      	movs	r2, #2
 8004dd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	3304      	adds	r3, #4
 8004ddc:	4619      	mov	r1, r3
 8004dde:	4610      	mov	r0, r2
 8004de0:	f000 f9bc 	bl	800515c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2201      	movs	r2, #1
 8004de8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2201      	movs	r2, #1
 8004df0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2201      	movs	r2, #1
 8004df8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2201      	movs	r2, #1
 8004e08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2201      	movs	r2, #1
 8004e10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2201      	movs	r2, #1
 8004e18:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2201      	movs	r2, #1
 8004e20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2201      	movs	r2, #1
 8004e28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2201      	movs	r2, #1
 8004e30:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2201      	movs	r2, #1
 8004e38:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004e44:	2300      	movs	r3, #0
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3708      	adds	r7, #8
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}
	...

08004e50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b085      	sub	sp, #20
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e5e:	b2db      	uxtb	r3, r3
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d001      	beq.n	8004e68 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004e64:	2301      	movs	r3, #1
 8004e66:	e040      	b.n	8004eea <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2202      	movs	r2, #2
 8004e6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	68da      	ldr	r2, [r3, #12]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f042 0201 	orr.w	r2, r2, #1
 8004e7e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a1c      	ldr	r2, [pc, #112]	@ (8004ef8 <HAL_TIM_Base_Start_IT+0xa8>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d00e      	beq.n	8004ea8 <HAL_TIM_Base_Start_IT+0x58>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e92:	d009      	beq.n	8004ea8 <HAL_TIM_Base_Start_IT+0x58>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a18      	ldr	r2, [pc, #96]	@ (8004efc <HAL_TIM_Base_Start_IT+0xac>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d004      	beq.n	8004ea8 <HAL_TIM_Base_Start_IT+0x58>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a17      	ldr	r2, [pc, #92]	@ (8004f00 <HAL_TIM_Base_Start_IT+0xb0>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d115      	bne.n	8004ed4 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	689a      	ldr	r2, [r3, #8]
 8004eae:	4b15      	ldr	r3, [pc, #84]	@ (8004f04 <HAL_TIM_Base_Start_IT+0xb4>)
 8004eb0:	4013      	ands	r3, r2
 8004eb2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2b06      	cmp	r3, #6
 8004eb8:	d015      	beq.n	8004ee6 <HAL_TIM_Base_Start_IT+0x96>
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ec0:	d011      	beq.n	8004ee6 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	681a      	ldr	r2, [r3, #0]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f042 0201 	orr.w	r2, r2, #1
 8004ed0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ed2:	e008      	b.n	8004ee6 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f042 0201 	orr.w	r2, r2, #1
 8004ee2:	601a      	str	r2, [r3, #0]
 8004ee4:	e000      	b.n	8004ee8 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ee6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004ee8:	2300      	movs	r3, #0
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3714      	adds	r7, #20
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr
 8004ef6:	bf00      	nop
 8004ef8:	40012c00 	.word	0x40012c00
 8004efc:	40000400 	.word	0x40000400
 8004f00:	40014000 	.word	0x40014000
 8004f04:	00010007 	.word	0x00010007

08004f08 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b084      	sub	sp, #16
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	68db      	ldr	r3, [r3, #12]
 8004f16:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	691b      	ldr	r3, [r3, #16]
 8004f1e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	f003 0302 	and.w	r3, r3, #2
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d020      	beq.n	8004f6c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	f003 0302 	and.w	r3, r3, #2
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d01b      	beq.n	8004f6c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f06f 0202 	mvn.w	r2, #2
 8004f3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2201      	movs	r2, #1
 8004f42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	699b      	ldr	r3, [r3, #24]
 8004f4a:	f003 0303 	and.w	r3, r3, #3
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d003      	beq.n	8004f5a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f000 f8e4 	bl	8005120 <HAL_TIM_IC_CaptureCallback>
 8004f58:	e005      	b.n	8004f66 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f000 f8d6 	bl	800510c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f60:	6878      	ldr	r0, [r7, #4]
 8004f62:	f000 f8e7 	bl	8005134 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	f003 0304 	and.w	r3, r3, #4
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d020      	beq.n	8004fb8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	f003 0304 	and.w	r3, r3, #4
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d01b      	beq.n	8004fb8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f06f 0204 	mvn.w	r2, #4
 8004f88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2202      	movs	r2, #2
 8004f8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	699b      	ldr	r3, [r3, #24]
 8004f96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d003      	beq.n	8004fa6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f000 f8be 	bl	8005120 <HAL_TIM_IC_CaptureCallback>
 8004fa4:	e005      	b.n	8004fb2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f000 f8b0 	bl	800510c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fac:	6878      	ldr	r0, [r7, #4]
 8004fae:	f000 f8c1 	bl	8005134 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	f003 0308 	and.w	r3, r3, #8
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d020      	beq.n	8005004 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	f003 0308 	and.w	r3, r3, #8
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d01b      	beq.n	8005004 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f06f 0208 	mvn.w	r2, #8
 8004fd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2204      	movs	r2, #4
 8004fda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	69db      	ldr	r3, [r3, #28]
 8004fe2:	f003 0303 	and.w	r3, r3, #3
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d003      	beq.n	8004ff2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f000 f898 	bl	8005120 <HAL_TIM_IC_CaptureCallback>
 8004ff0:	e005      	b.n	8004ffe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f000 f88a 	bl	800510c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f000 f89b 	bl	8005134 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2200      	movs	r2, #0
 8005002:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	f003 0310 	and.w	r3, r3, #16
 800500a:	2b00      	cmp	r3, #0
 800500c:	d020      	beq.n	8005050 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	f003 0310 	and.w	r3, r3, #16
 8005014:	2b00      	cmp	r3, #0
 8005016:	d01b      	beq.n	8005050 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f06f 0210 	mvn.w	r2, #16
 8005020:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2208      	movs	r2, #8
 8005026:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	69db      	ldr	r3, [r3, #28]
 800502e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005032:	2b00      	cmp	r3, #0
 8005034:	d003      	beq.n	800503e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f000 f872 	bl	8005120 <HAL_TIM_IC_CaptureCallback>
 800503c:	e005      	b.n	800504a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f000 f864 	bl	800510c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005044:	6878      	ldr	r0, [r7, #4]
 8005046:	f000 f875 	bl	8005134 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2200      	movs	r2, #0
 800504e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	f003 0301 	and.w	r3, r3, #1
 8005056:	2b00      	cmp	r3, #0
 8005058:	d00c      	beq.n	8005074 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	f003 0301 	and.w	r3, r3, #1
 8005060:	2b00      	cmp	r3, #0
 8005062:	d007      	beq.n	8005074 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f06f 0201 	mvn.w	r2, #1
 800506c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f7fb fa70 	bl	8000554 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800507a:	2b00      	cmp	r3, #0
 800507c:	d00c      	beq.n	8005098 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005084:	2b00      	cmp	r3, #0
 8005086:	d007      	beq.n	8005098 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005090:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f000 f95e 	bl	8005354 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d00c      	beq.n	80050bc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d007      	beq.n	80050bc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80050b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f000 f956 	bl	8005368 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d00c      	beq.n	80050e0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d007      	beq.n	80050e0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80050d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f000 f834 	bl	8005148 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	f003 0320 	and.w	r3, r3, #32
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d00c      	beq.n	8005104 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	f003 0320 	and.w	r3, r3, #32
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d007      	beq.n	8005104 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f06f 0220 	mvn.w	r2, #32
 80050fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f000 f91e 	bl	8005340 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005104:	bf00      	nop
 8005106:	3710      	adds	r7, #16
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}

0800510c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800510c:	b480      	push	{r7}
 800510e:	b083      	sub	sp, #12
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005114:	bf00      	nop
 8005116:	370c      	adds	r7, #12
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr

08005120 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005120:	b480      	push	{r7}
 8005122:	b083      	sub	sp, #12
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005128:	bf00      	nop
 800512a:	370c      	adds	r7, #12
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr

08005134 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005134:	b480      	push	{r7}
 8005136:	b083      	sub	sp, #12
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800513c:	bf00      	nop
 800513e:	370c      	adds	r7, #12
 8005140:	46bd      	mov	sp, r7
 8005142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005146:	4770      	bx	lr

08005148 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005148:	b480      	push	{r7}
 800514a:	b083      	sub	sp, #12
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005150:	bf00      	nop
 8005152:	370c      	adds	r7, #12
 8005154:	46bd      	mov	sp, r7
 8005156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515a:	4770      	bx	lr

0800515c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800515c:	b480      	push	{r7}
 800515e:	b085      	sub	sp, #20
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
 8005164:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	4a38      	ldr	r2, [pc, #224]	@ (8005250 <TIM_Base_SetConfig+0xf4>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d007      	beq.n	8005184 <TIM_Base_SetConfig+0x28>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800517a:	d003      	beq.n	8005184 <TIM_Base_SetConfig+0x28>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	4a35      	ldr	r2, [pc, #212]	@ (8005254 <TIM_Base_SetConfig+0xf8>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d108      	bne.n	8005196 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800518a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	68fa      	ldr	r2, [r7, #12]
 8005192:	4313      	orrs	r3, r2
 8005194:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	4a2d      	ldr	r2, [pc, #180]	@ (8005250 <TIM_Base_SetConfig+0xf4>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d013      	beq.n	80051c6 <TIM_Base_SetConfig+0x6a>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051a4:	d00f      	beq.n	80051c6 <TIM_Base_SetConfig+0x6a>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	4a2a      	ldr	r2, [pc, #168]	@ (8005254 <TIM_Base_SetConfig+0xf8>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d00b      	beq.n	80051c6 <TIM_Base_SetConfig+0x6a>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	4a29      	ldr	r2, [pc, #164]	@ (8005258 <TIM_Base_SetConfig+0xfc>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d007      	beq.n	80051c6 <TIM_Base_SetConfig+0x6a>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	4a28      	ldr	r2, [pc, #160]	@ (800525c <TIM_Base_SetConfig+0x100>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d003      	beq.n	80051c6 <TIM_Base_SetConfig+0x6a>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	4a27      	ldr	r2, [pc, #156]	@ (8005260 <TIM_Base_SetConfig+0x104>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d108      	bne.n	80051d8 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80051cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	68db      	ldr	r3, [r3, #12]
 80051d2:	68fa      	ldr	r2, [r7, #12]
 80051d4:	4313      	orrs	r3, r2
 80051d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	695b      	ldr	r3, [r3, #20]
 80051e2:	4313      	orrs	r3, r2
 80051e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	68fa      	ldr	r2, [r7, #12]
 80051ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	689a      	ldr	r2, [r3, #8]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	681a      	ldr	r2, [r3, #0]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	4a14      	ldr	r2, [pc, #80]	@ (8005250 <TIM_Base_SetConfig+0xf4>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d00b      	beq.n	800521c <TIM_Base_SetConfig+0xc0>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	4a14      	ldr	r2, [pc, #80]	@ (8005258 <TIM_Base_SetConfig+0xfc>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d007      	beq.n	800521c <TIM_Base_SetConfig+0xc0>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	4a13      	ldr	r2, [pc, #76]	@ (800525c <TIM_Base_SetConfig+0x100>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d003      	beq.n	800521c <TIM_Base_SetConfig+0xc0>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	4a12      	ldr	r2, [pc, #72]	@ (8005260 <TIM_Base_SetConfig+0x104>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d103      	bne.n	8005224 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	691a      	ldr	r2, [r3, #16]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2201      	movs	r2, #1
 8005228:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	691b      	ldr	r3, [r3, #16]
 800522e:	f003 0301 	and.w	r3, r3, #1
 8005232:	2b01      	cmp	r3, #1
 8005234:	d105      	bne.n	8005242 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	691b      	ldr	r3, [r3, #16]
 800523a:	f023 0201 	bic.w	r2, r3, #1
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	611a      	str	r2, [r3, #16]
  }
}
 8005242:	bf00      	nop
 8005244:	3714      	adds	r7, #20
 8005246:	46bd      	mov	sp, r7
 8005248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524c:	4770      	bx	lr
 800524e:	bf00      	nop
 8005250:	40012c00 	.word	0x40012c00
 8005254:	40000400 	.word	0x40000400
 8005258:	40014000 	.word	0x40014000
 800525c:	40014400 	.word	0x40014400
 8005260:	40014800 	.word	0x40014800

08005264 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005264:	b480      	push	{r7}
 8005266:	b085      	sub	sp, #20
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
 800526c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005274:	2b01      	cmp	r3, #1
 8005276:	d101      	bne.n	800527c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005278:	2302      	movs	r3, #2
 800527a:	e054      	b.n	8005326 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2201      	movs	r2, #1
 8005280:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2202      	movs	r2, #2
 8005288:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a24      	ldr	r2, [pc, #144]	@ (8005334 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d108      	bne.n	80052b8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80052ac:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	68fa      	ldr	r2, [r7, #12]
 80052b4:	4313      	orrs	r3, r2
 80052b6:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	68fa      	ldr	r2, [r7, #12]
 80052c6:	4313      	orrs	r3, r2
 80052c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	68fa      	ldr	r2, [r7, #12]
 80052d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a17      	ldr	r2, [pc, #92]	@ (8005334 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d00e      	beq.n	80052fa <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052e4:	d009      	beq.n	80052fa <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a13      	ldr	r2, [pc, #76]	@ (8005338 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d004      	beq.n	80052fa <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a11      	ldr	r2, [pc, #68]	@ (800533c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d10c      	bne.n	8005314 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005300:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	689b      	ldr	r3, [r3, #8]
 8005306:	68ba      	ldr	r2, [r7, #8]
 8005308:	4313      	orrs	r3, r2
 800530a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	68ba      	ldr	r2, [r7, #8]
 8005312:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2201      	movs	r2, #1
 8005318:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2200      	movs	r2, #0
 8005320:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005324:	2300      	movs	r3, #0
}
 8005326:	4618      	mov	r0, r3
 8005328:	3714      	adds	r7, #20
 800532a:	46bd      	mov	sp, r7
 800532c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005330:	4770      	bx	lr
 8005332:	bf00      	nop
 8005334:	40012c00 	.word	0x40012c00
 8005338:	40000400 	.word	0x40000400
 800533c:	40014000 	.word	0x40014000

08005340 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005340:	b480      	push	{r7}
 8005342:	b083      	sub	sp, #12
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005348:	bf00      	nop
 800534a:	370c      	adds	r7, #12
 800534c:	46bd      	mov	sp, r7
 800534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005352:	4770      	bx	lr

08005354 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005354:	b480      	push	{r7}
 8005356:	b083      	sub	sp, #12
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800535c:	bf00      	nop
 800535e:	370c      	adds	r7, #12
 8005360:	46bd      	mov	sp, r7
 8005362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005366:	4770      	bx	lr

08005368 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005368:	b480      	push	{r7}
 800536a:	b083      	sub	sp, #12
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005370:	bf00      	nop
 8005372:	370c      	adds	r7, #12
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr

0800537c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b082      	sub	sp, #8
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d101      	bne.n	800538e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800538a:	2301      	movs	r3, #1
 800538c:	e040      	b.n	8005410 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005392:	2b00      	cmp	r3, #0
 8005394:	d106      	bne.n	80053a4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2200      	movs	r2, #0
 800539a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f7fb fdee 	bl	8000f80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2224      	movs	r2, #36	@ 0x24
 80053a8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f022 0201 	bic.w	r2, r2, #1
 80053b8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d002      	beq.n	80053c8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f000 f9e8 	bl	8005798 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f000 f8af 	bl	800552c <UART_SetConfig>
 80053ce:	4603      	mov	r3, r0
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	d101      	bne.n	80053d8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80053d4:	2301      	movs	r3, #1
 80053d6:	e01b      	b.n	8005410 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	685a      	ldr	r2, [r3, #4]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80053e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	689a      	ldr	r2, [r3, #8]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80053f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f042 0201 	orr.w	r2, r2, #1
 8005406:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	f000 fa67 	bl	80058dc <UART_CheckIdleState>
 800540e:	4603      	mov	r3, r0
}
 8005410:	4618      	mov	r0, r3
 8005412:	3708      	adds	r7, #8
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}

08005418 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b08a      	sub	sp, #40	@ 0x28
 800541c:	af02      	add	r7, sp, #8
 800541e:	60f8      	str	r0, [r7, #12]
 8005420:	60b9      	str	r1, [r7, #8]
 8005422:	603b      	str	r3, [r7, #0]
 8005424:	4613      	mov	r3, r2
 8005426:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800542c:	2b20      	cmp	r3, #32
 800542e:	d177      	bne.n	8005520 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d002      	beq.n	800543c <HAL_UART_Transmit+0x24>
 8005436:	88fb      	ldrh	r3, [r7, #6]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d101      	bne.n	8005440 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800543c:	2301      	movs	r3, #1
 800543e:	e070      	b.n	8005522 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2200      	movs	r2, #0
 8005444:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2221      	movs	r2, #33	@ 0x21
 800544c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800544e:	f7fb ff51 	bl	80012f4 <HAL_GetTick>
 8005452:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	88fa      	ldrh	r2, [r7, #6]
 8005458:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	88fa      	ldrh	r2, [r7, #6]
 8005460:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	689b      	ldr	r3, [r3, #8]
 8005468:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800546c:	d108      	bne.n	8005480 <HAL_UART_Transmit+0x68>
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	691b      	ldr	r3, [r3, #16]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d104      	bne.n	8005480 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005476:	2300      	movs	r3, #0
 8005478:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	61bb      	str	r3, [r7, #24]
 800547e:	e003      	b.n	8005488 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005484:	2300      	movs	r3, #0
 8005486:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005488:	e02f      	b.n	80054ea <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	9300      	str	r3, [sp, #0]
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	2200      	movs	r2, #0
 8005492:	2180      	movs	r1, #128	@ 0x80
 8005494:	68f8      	ldr	r0, [r7, #12]
 8005496:	f000 fac9 	bl	8005a2c <UART_WaitOnFlagUntilTimeout>
 800549a:	4603      	mov	r3, r0
 800549c:	2b00      	cmp	r3, #0
 800549e:	d004      	beq.n	80054aa <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2220      	movs	r2, #32
 80054a4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80054a6:	2303      	movs	r3, #3
 80054a8:	e03b      	b.n	8005522 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80054aa:	69fb      	ldr	r3, [r7, #28]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d10b      	bne.n	80054c8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80054b0:	69bb      	ldr	r3, [r7, #24]
 80054b2:	881a      	ldrh	r2, [r3, #0]
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80054bc:	b292      	uxth	r2, r2
 80054be:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80054c0:	69bb      	ldr	r3, [r7, #24]
 80054c2:	3302      	adds	r3, #2
 80054c4:	61bb      	str	r3, [r7, #24]
 80054c6:	e007      	b.n	80054d8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80054c8:	69fb      	ldr	r3, [r7, #28]
 80054ca:	781a      	ldrb	r2, [r3, #0]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80054d2:	69fb      	ldr	r3, [r7, #28]
 80054d4:	3301      	adds	r3, #1
 80054d6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80054de:	b29b      	uxth	r3, r3
 80054e0:	3b01      	subs	r3, #1
 80054e2:	b29a      	uxth	r2, r3
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d1c9      	bne.n	800548a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	9300      	str	r3, [sp, #0]
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	2200      	movs	r2, #0
 80054fe:	2140      	movs	r1, #64	@ 0x40
 8005500:	68f8      	ldr	r0, [r7, #12]
 8005502:	f000 fa93 	bl	8005a2c <UART_WaitOnFlagUntilTimeout>
 8005506:	4603      	mov	r3, r0
 8005508:	2b00      	cmp	r3, #0
 800550a:	d004      	beq.n	8005516 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2220      	movs	r2, #32
 8005510:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005512:	2303      	movs	r3, #3
 8005514:	e005      	b.n	8005522 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2220      	movs	r2, #32
 800551a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800551c:	2300      	movs	r3, #0
 800551e:	e000      	b.n	8005522 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005520:	2302      	movs	r3, #2
  }
}
 8005522:	4618      	mov	r0, r3
 8005524:	3720      	adds	r7, #32
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}
	...

0800552c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b088      	sub	sp, #32
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005534:	2300      	movs	r3, #0
 8005536:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	689a      	ldr	r2, [r3, #8]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	691b      	ldr	r3, [r3, #16]
 8005540:	431a      	orrs	r2, r3
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	695b      	ldr	r3, [r3, #20]
 8005546:	431a      	orrs	r2, r3
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	69db      	ldr	r3, [r3, #28]
 800554c:	4313      	orrs	r3, r2
 800554e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	681a      	ldr	r2, [r3, #0]
 8005556:	4b8a      	ldr	r3, [pc, #552]	@ (8005780 <UART_SetConfig+0x254>)
 8005558:	4013      	ands	r3, r2
 800555a:	687a      	ldr	r2, [r7, #4]
 800555c:	6812      	ldr	r2, [r2, #0]
 800555e:	6979      	ldr	r1, [r7, #20]
 8005560:	430b      	orrs	r3, r1
 8005562:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	68da      	ldr	r2, [r3, #12]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	430a      	orrs	r2, r1
 8005578:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	699b      	ldr	r3, [r3, #24]
 800557e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6a1b      	ldr	r3, [r3, #32]
 8005584:	697a      	ldr	r2, [r7, #20]
 8005586:	4313      	orrs	r3, r2
 8005588:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	689b      	ldr	r3, [r3, #8]
 8005590:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	697a      	ldr	r2, [r7, #20]
 800559a:	430a      	orrs	r2, r1
 800559c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a78      	ldr	r2, [pc, #480]	@ (8005784 <UART_SetConfig+0x258>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d120      	bne.n	80055ea <UART_SetConfig+0xbe>
 80055a8:	4b77      	ldr	r3, [pc, #476]	@ (8005788 <UART_SetConfig+0x25c>)
 80055aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055ac:	f003 0303 	and.w	r3, r3, #3
 80055b0:	2b03      	cmp	r3, #3
 80055b2:	d817      	bhi.n	80055e4 <UART_SetConfig+0xb8>
 80055b4:	a201      	add	r2, pc, #4	@ (adr r2, 80055bc <UART_SetConfig+0x90>)
 80055b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055ba:	bf00      	nop
 80055bc:	080055cd 	.word	0x080055cd
 80055c0:	080055d9 	.word	0x080055d9
 80055c4:	080055df 	.word	0x080055df
 80055c8:	080055d3 	.word	0x080055d3
 80055cc:	2300      	movs	r3, #0
 80055ce:	77fb      	strb	r3, [r7, #31]
 80055d0:	e01d      	b.n	800560e <UART_SetConfig+0xe2>
 80055d2:	2302      	movs	r3, #2
 80055d4:	77fb      	strb	r3, [r7, #31]
 80055d6:	e01a      	b.n	800560e <UART_SetConfig+0xe2>
 80055d8:	2304      	movs	r3, #4
 80055da:	77fb      	strb	r3, [r7, #31]
 80055dc:	e017      	b.n	800560e <UART_SetConfig+0xe2>
 80055de:	2308      	movs	r3, #8
 80055e0:	77fb      	strb	r3, [r7, #31]
 80055e2:	e014      	b.n	800560e <UART_SetConfig+0xe2>
 80055e4:	2310      	movs	r3, #16
 80055e6:	77fb      	strb	r3, [r7, #31]
 80055e8:	e011      	b.n	800560e <UART_SetConfig+0xe2>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a67      	ldr	r2, [pc, #412]	@ (800578c <UART_SetConfig+0x260>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d102      	bne.n	80055fa <UART_SetConfig+0xce>
 80055f4:	2300      	movs	r3, #0
 80055f6:	77fb      	strb	r3, [r7, #31]
 80055f8:	e009      	b.n	800560e <UART_SetConfig+0xe2>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a64      	ldr	r2, [pc, #400]	@ (8005790 <UART_SetConfig+0x264>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d102      	bne.n	800560a <UART_SetConfig+0xde>
 8005604:	2300      	movs	r3, #0
 8005606:	77fb      	strb	r3, [r7, #31]
 8005608:	e001      	b.n	800560e <UART_SetConfig+0xe2>
 800560a:	2310      	movs	r3, #16
 800560c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	69db      	ldr	r3, [r3, #28]
 8005612:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005616:	d15a      	bne.n	80056ce <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8005618:	7ffb      	ldrb	r3, [r7, #31]
 800561a:	2b08      	cmp	r3, #8
 800561c:	d827      	bhi.n	800566e <UART_SetConfig+0x142>
 800561e:	a201      	add	r2, pc, #4	@ (adr r2, 8005624 <UART_SetConfig+0xf8>)
 8005620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005624:	08005649 	.word	0x08005649
 8005628:	08005651 	.word	0x08005651
 800562c:	08005659 	.word	0x08005659
 8005630:	0800566f 	.word	0x0800566f
 8005634:	0800565f 	.word	0x0800565f
 8005638:	0800566f 	.word	0x0800566f
 800563c:	0800566f 	.word	0x0800566f
 8005640:	0800566f 	.word	0x0800566f
 8005644:	08005667 	.word	0x08005667
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005648:	f7ff fb66 	bl	8004d18 <HAL_RCC_GetPCLK1Freq>
 800564c:	61b8      	str	r0, [r7, #24]
        break;
 800564e:	e013      	b.n	8005678 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005650:	f7ff fb84 	bl	8004d5c <HAL_RCC_GetPCLK2Freq>
 8005654:	61b8      	str	r0, [r7, #24]
        break;
 8005656:	e00f      	b.n	8005678 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005658:	4b4e      	ldr	r3, [pc, #312]	@ (8005794 <UART_SetConfig+0x268>)
 800565a:	61bb      	str	r3, [r7, #24]
        break;
 800565c:	e00c      	b.n	8005678 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800565e:	f7ff fafb 	bl	8004c58 <HAL_RCC_GetSysClockFreq>
 8005662:	61b8      	str	r0, [r7, #24]
        break;
 8005664:	e008      	b.n	8005678 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005666:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800566a:	61bb      	str	r3, [r7, #24]
        break;
 800566c:	e004      	b.n	8005678 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800566e:	2300      	movs	r3, #0
 8005670:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	77bb      	strb	r3, [r7, #30]
        break;
 8005676:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005678:	69bb      	ldr	r3, [r7, #24]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d074      	beq.n	8005768 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800567e:	69bb      	ldr	r3, [r7, #24]
 8005680:	005a      	lsls	r2, r3, #1
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	085b      	lsrs	r3, r3, #1
 8005688:	441a      	add	r2, r3
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005692:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	2b0f      	cmp	r3, #15
 8005698:	d916      	bls.n	80056c8 <UART_SetConfig+0x19c>
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056a0:	d212      	bcs.n	80056c8 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	b29b      	uxth	r3, r3
 80056a6:	f023 030f 	bic.w	r3, r3, #15
 80056aa:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	085b      	lsrs	r3, r3, #1
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	f003 0307 	and.w	r3, r3, #7
 80056b6:	b29a      	uxth	r2, r3
 80056b8:	89fb      	ldrh	r3, [r7, #14]
 80056ba:	4313      	orrs	r3, r2
 80056bc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	89fa      	ldrh	r2, [r7, #14]
 80056c4:	60da      	str	r2, [r3, #12]
 80056c6:	e04f      	b.n	8005768 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80056c8:	2301      	movs	r3, #1
 80056ca:	77bb      	strb	r3, [r7, #30]
 80056cc:	e04c      	b.n	8005768 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80056ce:	7ffb      	ldrb	r3, [r7, #31]
 80056d0:	2b08      	cmp	r3, #8
 80056d2:	d828      	bhi.n	8005726 <UART_SetConfig+0x1fa>
 80056d4:	a201      	add	r2, pc, #4	@ (adr r2, 80056dc <UART_SetConfig+0x1b0>)
 80056d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056da:	bf00      	nop
 80056dc:	08005701 	.word	0x08005701
 80056e0:	08005709 	.word	0x08005709
 80056e4:	08005711 	.word	0x08005711
 80056e8:	08005727 	.word	0x08005727
 80056ec:	08005717 	.word	0x08005717
 80056f0:	08005727 	.word	0x08005727
 80056f4:	08005727 	.word	0x08005727
 80056f8:	08005727 	.word	0x08005727
 80056fc:	0800571f 	.word	0x0800571f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005700:	f7ff fb0a 	bl	8004d18 <HAL_RCC_GetPCLK1Freq>
 8005704:	61b8      	str	r0, [r7, #24]
        break;
 8005706:	e013      	b.n	8005730 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005708:	f7ff fb28 	bl	8004d5c <HAL_RCC_GetPCLK2Freq>
 800570c:	61b8      	str	r0, [r7, #24]
        break;
 800570e:	e00f      	b.n	8005730 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005710:	4b20      	ldr	r3, [pc, #128]	@ (8005794 <UART_SetConfig+0x268>)
 8005712:	61bb      	str	r3, [r7, #24]
        break;
 8005714:	e00c      	b.n	8005730 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005716:	f7ff fa9f 	bl	8004c58 <HAL_RCC_GetSysClockFreq>
 800571a:	61b8      	str	r0, [r7, #24]
        break;
 800571c:	e008      	b.n	8005730 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800571e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005722:	61bb      	str	r3, [r7, #24]
        break;
 8005724:	e004      	b.n	8005730 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8005726:	2300      	movs	r3, #0
 8005728:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	77bb      	strb	r3, [r7, #30]
        break;
 800572e:	bf00      	nop
    }

    if (pclk != 0U)
 8005730:	69bb      	ldr	r3, [r7, #24]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d018      	beq.n	8005768 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	085a      	lsrs	r2, r3, #1
 800573c:	69bb      	ldr	r3, [r7, #24]
 800573e:	441a      	add	r2, r3
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	fbb2 f3f3 	udiv	r3, r2, r3
 8005748:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	2b0f      	cmp	r3, #15
 800574e:	d909      	bls.n	8005764 <UART_SetConfig+0x238>
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005756:	d205      	bcs.n	8005764 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	b29a      	uxth	r2, r3
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	60da      	str	r2, [r3, #12]
 8005762:	e001      	b.n	8005768 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005764:	2301      	movs	r3, #1
 8005766:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2200      	movs	r2, #0
 800576c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2200      	movs	r2, #0
 8005772:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005774:	7fbb      	ldrb	r3, [r7, #30]
}
 8005776:	4618      	mov	r0, r3
 8005778:	3720      	adds	r7, #32
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}
 800577e:	bf00      	nop
 8005780:	efff69f3 	.word	0xefff69f3
 8005784:	40013800 	.word	0x40013800
 8005788:	40021000 	.word	0x40021000
 800578c:	40004400 	.word	0x40004400
 8005790:	40004800 	.word	0x40004800
 8005794:	007a1200 	.word	0x007a1200

08005798 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005798:	b480      	push	{r7}
 800579a:	b083      	sub	sp, #12
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057a4:	f003 0308 	and.w	r3, r3, #8
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d00a      	beq.n	80057c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	430a      	orrs	r2, r1
 80057c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057c6:	f003 0301 	and.w	r3, r3, #1
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d00a      	beq.n	80057e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	430a      	orrs	r2, r1
 80057e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057e8:	f003 0302 	and.w	r3, r3, #2
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d00a      	beq.n	8005806 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	430a      	orrs	r2, r1
 8005804:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800580a:	f003 0304 	and.w	r3, r3, #4
 800580e:	2b00      	cmp	r3, #0
 8005810:	d00a      	beq.n	8005828 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	430a      	orrs	r2, r1
 8005826:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800582c:	f003 0310 	and.w	r3, r3, #16
 8005830:	2b00      	cmp	r3, #0
 8005832:	d00a      	beq.n	800584a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	689b      	ldr	r3, [r3, #8]
 800583a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	430a      	orrs	r2, r1
 8005848:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800584e:	f003 0320 	and.w	r3, r3, #32
 8005852:	2b00      	cmp	r3, #0
 8005854:	d00a      	beq.n	800586c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	430a      	orrs	r2, r1
 800586a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005870:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005874:	2b00      	cmp	r3, #0
 8005876:	d01a      	beq.n	80058ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	430a      	orrs	r2, r1
 800588c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005892:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005896:	d10a      	bne.n	80058ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	430a      	orrs	r2, r1
 80058ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d00a      	beq.n	80058d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	430a      	orrs	r2, r1
 80058ce:	605a      	str	r2, [r3, #4]
  }
}
 80058d0:	bf00      	nop
 80058d2:	370c      	adds	r7, #12
 80058d4:	46bd      	mov	sp, r7
 80058d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058da:	4770      	bx	lr

080058dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b098      	sub	sp, #96	@ 0x60
 80058e0:	af02      	add	r7, sp, #8
 80058e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2200      	movs	r2, #0
 80058e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80058ec:	f7fb fd02 	bl	80012f4 <HAL_GetTick>
 80058f0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f003 0308 	and.w	r3, r3, #8
 80058fc:	2b08      	cmp	r3, #8
 80058fe:	d12e      	bne.n	800595e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005900:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005904:	9300      	str	r3, [sp, #0]
 8005906:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005908:	2200      	movs	r2, #0
 800590a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f000 f88c 	bl	8005a2c <UART_WaitOnFlagUntilTimeout>
 8005914:	4603      	mov	r3, r0
 8005916:	2b00      	cmp	r3, #0
 8005918:	d021      	beq.n	800595e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005920:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005922:	e853 3f00 	ldrex	r3, [r3]
 8005926:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005928:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800592a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800592e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	461a      	mov	r2, r3
 8005936:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005938:	647b      	str	r3, [r7, #68]	@ 0x44
 800593a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800593c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800593e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005940:	e841 2300 	strex	r3, r2, [r1]
 8005944:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005946:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005948:	2b00      	cmp	r3, #0
 800594a:	d1e6      	bne.n	800591a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2220      	movs	r2, #32
 8005950:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2200      	movs	r2, #0
 8005956:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800595a:	2303      	movs	r3, #3
 800595c:	e062      	b.n	8005a24 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f003 0304 	and.w	r3, r3, #4
 8005968:	2b04      	cmp	r3, #4
 800596a:	d149      	bne.n	8005a00 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800596c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005970:	9300      	str	r3, [sp, #0]
 8005972:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005974:	2200      	movs	r2, #0
 8005976:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f000 f856 	bl	8005a2c <UART_WaitOnFlagUntilTimeout>
 8005980:	4603      	mov	r3, r0
 8005982:	2b00      	cmp	r3, #0
 8005984:	d03c      	beq.n	8005a00 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800598c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800598e:	e853 3f00 	ldrex	r3, [r3]
 8005992:	623b      	str	r3, [r7, #32]
   return(result);
 8005994:	6a3b      	ldr	r3, [r7, #32]
 8005996:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800599a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	461a      	mov	r2, r3
 80059a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80059a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80059a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059a8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80059aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059ac:	e841 2300 	strex	r3, r2, [r1]
 80059b0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80059b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d1e6      	bne.n	8005986 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	3308      	adds	r3, #8
 80059be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	e853 3f00 	ldrex	r3, [r3]
 80059c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	f023 0301 	bic.w	r3, r3, #1
 80059ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	3308      	adds	r3, #8
 80059d6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80059d8:	61fa      	str	r2, [r7, #28]
 80059da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059dc:	69b9      	ldr	r1, [r7, #24]
 80059de:	69fa      	ldr	r2, [r7, #28]
 80059e0:	e841 2300 	strex	r3, r2, [r1]
 80059e4:	617b      	str	r3, [r7, #20]
   return(result);
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d1e5      	bne.n	80059b8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2220      	movs	r2, #32
 80059f0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2200      	movs	r2, #0
 80059f8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80059fc:	2303      	movs	r3, #3
 80059fe:	e011      	b.n	8005a24 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2220      	movs	r2, #32
 8005a04:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2220      	movs	r2, #32
 8005a0a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2200      	movs	r2, #0
 8005a12:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2200      	movs	r2, #0
 8005a18:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005a22:	2300      	movs	r3, #0
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	3758      	adds	r7, #88	@ 0x58
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}

08005a2c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b084      	sub	sp, #16
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	60f8      	str	r0, [r7, #12]
 8005a34:	60b9      	str	r1, [r7, #8]
 8005a36:	603b      	str	r3, [r7, #0]
 8005a38:	4613      	mov	r3, r2
 8005a3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a3c:	e04f      	b.n	8005ade <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a3e:	69bb      	ldr	r3, [r7, #24]
 8005a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a44:	d04b      	beq.n	8005ade <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a46:	f7fb fc55 	bl	80012f4 <HAL_GetTick>
 8005a4a:	4602      	mov	r2, r0
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	1ad3      	subs	r3, r2, r3
 8005a50:	69ba      	ldr	r2, [r7, #24]
 8005a52:	429a      	cmp	r2, r3
 8005a54:	d302      	bcc.n	8005a5c <UART_WaitOnFlagUntilTimeout+0x30>
 8005a56:	69bb      	ldr	r3, [r7, #24]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d101      	bne.n	8005a60 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005a5c:	2303      	movs	r3, #3
 8005a5e:	e04e      	b.n	8005afe <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f003 0304 	and.w	r3, r3, #4
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d037      	beq.n	8005ade <UART_WaitOnFlagUntilTimeout+0xb2>
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	2b80      	cmp	r3, #128	@ 0x80
 8005a72:	d034      	beq.n	8005ade <UART_WaitOnFlagUntilTimeout+0xb2>
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	2b40      	cmp	r3, #64	@ 0x40
 8005a78:	d031      	beq.n	8005ade <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	69db      	ldr	r3, [r3, #28]
 8005a80:	f003 0308 	and.w	r3, r3, #8
 8005a84:	2b08      	cmp	r3, #8
 8005a86:	d110      	bne.n	8005aaa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	2208      	movs	r2, #8
 8005a8e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005a90:	68f8      	ldr	r0, [r7, #12]
 8005a92:	f000 f838 	bl	8005b06 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	2208      	movs	r2, #8
 8005a9a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	e029      	b.n	8005afe <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	69db      	ldr	r3, [r3, #28]
 8005ab0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ab4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ab8:	d111      	bne.n	8005ade <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005ac2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005ac4:	68f8      	ldr	r0, [r7, #12]
 8005ac6:	f000 f81e 	bl	8005b06 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2220      	movs	r2, #32
 8005ace:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005ada:	2303      	movs	r3, #3
 8005adc:	e00f      	b.n	8005afe <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	69da      	ldr	r2, [r3, #28]
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	4013      	ands	r3, r2
 8005ae8:	68ba      	ldr	r2, [r7, #8]
 8005aea:	429a      	cmp	r2, r3
 8005aec:	bf0c      	ite	eq
 8005aee:	2301      	moveq	r3, #1
 8005af0:	2300      	movne	r3, #0
 8005af2:	b2db      	uxtb	r3, r3
 8005af4:	461a      	mov	r2, r3
 8005af6:	79fb      	ldrb	r3, [r7, #7]
 8005af8:	429a      	cmp	r2, r3
 8005afa:	d0a0      	beq.n	8005a3e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005afc:	2300      	movs	r3, #0
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3710      	adds	r7, #16
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}

08005b06 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b06:	b480      	push	{r7}
 8005b08:	b095      	sub	sp, #84	@ 0x54
 8005b0a:	af00      	add	r7, sp, #0
 8005b0c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b16:	e853 3f00 	ldrex	r3, [r3]
 8005b1a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005b1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b1e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005b22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	461a      	mov	r2, r3
 8005b2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b2c:	643b      	str	r3, [r7, #64]	@ 0x40
 8005b2e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b30:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005b32:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005b34:	e841 2300 	strex	r3, r2, [r1]
 8005b38:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005b3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d1e6      	bne.n	8005b0e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	3308      	adds	r3, #8
 8005b46:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b48:	6a3b      	ldr	r3, [r7, #32]
 8005b4a:	e853 3f00 	ldrex	r3, [r3]
 8005b4e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b50:	69fb      	ldr	r3, [r7, #28]
 8005b52:	f023 0301 	bic.w	r3, r3, #1
 8005b56:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	3308      	adds	r3, #8
 8005b5e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005b60:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005b62:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b64:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005b66:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b68:	e841 2300 	strex	r3, r2, [r1]
 8005b6c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d1e5      	bne.n	8005b40 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	d118      	bne.n	8005bae <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	e853 3f00 	ldrex	r3, [r3]
 8005b88:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	f023 0310 	bic.w	r3, r3, #16
 8005b90:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	461a      	mov	r2, r3
 8005b98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b9a:	61bb      	str	r3, [r7, #24]
 8005b9c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b9e:	6979      	ldr	r1, [r7, #20]
 8005ba0:	69ba      	ldr	r2, [r7, #24]
 8005ba2:	e841 2300 	strex	r3, r2, [r1]
 8005ba6:	613b      	str	r3, [r7, #16]
   return(result);
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d1e6      	bne.n	8005b7c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2220      	movs	r2, #32
 8005bb2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005bc2:	bf00      	nop
 8005bc4:	3754      	adds	r7, #84	@ 0x54
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bcc:	4770      	bx	lr
	...

08005bd0 <std>:
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	b510      	push	{r4, lr}
 8005bd4:	4604      	mov	r4, r0
 8005bd6:	e9c0 3300 	strd	r3, r3, [r0]
 8005bda:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005bde:	6083      	str	r3, [r0, #8]
 8005be0:	8181      	strh	r1, [r0, #12]
 8005be2:	6643      	str	r3, [r0, #100]	@ 0x64
 8005be4:	81c2      	strh	r2, [r0, #14]
 8005be6:	6183      	str	r3, [r0, #24]
 8005be8:	4619      	mov	r1, r3
 8005bea:	2208      	movs	r2, #8
 8005bec:	305c      	adds	r0, #92	@ 0x5c
 8005bee:	f000 fab5 	bl	800615c <memset>
 8005bf2:	4b0d      	ldr	r3, [pc, #52]	@ (8005c28 <std+0x58>)
 8005bf4:	6263      	str	r3, [r4, #36]	@ 0x24
 8005bf6:	4b0d      	ldr	r3, [pc, #52]	@ (8005c2c <std+0x5c>)
 8005bf8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005bfa:	4b0d      	ldr	r3, [pc, #52]	@ (8005c30 <std+0x60>)
 8005bfc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005bfe:	4b0d      	ldr	r3, [pc, #52]	@ (8005c34 <std+0x64>)
 8005c00:	6323      	str	r3, [r4, #48]	@ 0x30
 8005c02:	4b0d      	ldr	r3, [pc, #52]	@ (8005c38 <std+0x68>)
 8005c04:	6224      	str	r4, [r4, #32]
 8005c06:	429c      	cmp	r4, r3
 8005c08:	d006      	beq.n	8005c18 <std+0x48>
 8005c0a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005c0e:	4294      	cmp	r4, r2
 8005c10:	d002      	beq.n	8005c18 <std+0x48>
 8005c12:	33d0      	adds	r3, #208	@ 0xd0
 8005c14:	429c      	cmp	r4, r3
 8005c16:	d105      	bne.n	8005c24 <std+0x54>
 8005c18:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005c1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c20:	f000 bb14 	b.w	800624c <__retarget_lock_init_recursive>
 8005c24:	bd10      	pop	{r4, pc}
 8005c26:	bf00      	nop
 8005c28:	08005fad 	.word	0x08005fad
 8005c2c:	08005fcf 	.word	0x08005fcf
 8005c30:	08006007 	.word	0x08006007
 8005c34:	0800602b 	.word	0x0800602b
 8005c38:	200002b4 	.word	0x200002b4

08005c3c <stdio_exit_handler>:
 8005c3c:	4a02      	ldr	r2, [pc, #8]	@ (8005c48 <stdio_exit_handler+0xc>)
 8005c3e:	4903      	ldr	r1, [pc, #12]	@ (8005c4c <stdio_exit_handler+0x10>)
 8005c40:	4803      	ldr	r0, [pc, #12]	@ (8005c50 <stdio_exit_handler+0x14>)
 8005c42:	f000 b869 	b.w	8005d18 <_fwalk_sglue>
 8005c46:	bf00      	nop
 8005c48:	2000000c 	.word	0x2000000c
 8005c4c:	08006afd 	.word	0x08006afd
 8005c50:	2000001c 	.word	0x2000001c

08005c54 <cleanup_stdio>:
 8005c54:	6841      	ldr	r1, [r0, #4]
 8005c56:	4b0c      	ldr	r3, [pc, #48]	@ (8005c88 <cleanup_stdio+0x34>)
 8005c58:	4299      	cmp	r1, r3
 8005c5a:	b510      	push	{r4, lr}
 8005c5c:	4604      	mov	r4, r0
 8005c5e:	d001      	beq.n	8005c64 <cleanup_stdio+0x10>
 8005c60:	f000 ff4c 	bl	8006afc <_fflush_r>
 8005c64:	68a1      	ldr	r1, [r4, #8]
 8005c66:	4b09      	ldr	r3, [pc, #36]	@ (8005c8c <cleanup_stdio+0x38>)
 8005c68:	4299      	cmp	r1, r3
 8005c6a:	d002      	beq.n	8005c72 <cleanup_stdio+0x1e>
 8005c6c:	4620      	mov	r0, r4
 8005c6e:	f000 ff45 	bl	8006afc <_fflush_r>
 8005c72:	68e1      	ldr	r1, [r4, #12]
 8005c74:	4b06      	ldr	r3, [pc, #24]	@ (8005c90 <cleanup_stdio+0x3c>)
 8005c76:	4299      	cmp	r1, r3
 8005c78:	d004      	beq.n	8005c84 <cleanup_stdio+0x30>
 8005c7a:	4620      	mov	r0, r4
 8005c7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c80:	f000 bf3c 	b.w	8006afc <_fflush_r>
 8005c84:	bd10      	pop	{r4, pc}
 8005c86:	bf00      	nop
 8005c88:	200002b4 	.word	0x200002b4
 8005c8c:	2000031c 	.word	0x2000031c
 8005c90:	20000384 	.word	0x20000384

08005c94 <global_stdio_init.part.0>:
 8005c94:	b510      	push	{r4, lr}
 8005c96:	4b0b      	ldr	r3, [pc, #44]	@ (8005cc4 <global_stdio_init.part.0+0x30>)
 8005c98:	4c0b      	ldr	r4, [pc, #44]	@ (8005cc8 <global_stdio_init.part.0+0x34>)
 8005c9a:	4a0c      	ldr	r2, [pc, #48]	@ (8005ccc <global_stdio_init.part.0+0x38>)
 8005c9c:	601a      	str	r2, [r3, #0]
 8005c9e:	4620      	mov	r0, r4
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	2104      	movs	r1, #4
 8005ca4:	f7ff ff94 	bl	8005bd0 <std>
 8005ca8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005cac:	2201      	movs	r2, #1
 8005cae:	2109      	movs	r1, #9
 8005cb0:	f7ff ff8e 	bl	8005bd0 <std>
 8005cb4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005cb8:	2202      	movs	r2, #2
 8005cba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005cbe:	2112      	movs	r1, #18
 8005cc0:	f7ff bf86 	b.w	8005bd0 <std>
 8005cc4:	200003ec 	.word	0x200003ec
 8005cc8:	200002b4 	.word	0x200002b4
 8005ccc:	08005c3d 	.word	0x08005c3d

08005cd0 <__sfp_lock_acquire>:
 8005cd0:	4801      	ldr	r0, [pc, #4]	@ (8005cd8 <__sfp_lock_acquire+0x8>)
 8005cd2:	f000 babc 	b.w	800624e <__retarget_lock_acquire_recursive>
 8005cd6:	bf00      	nop
 8005cd8:	200003f5 	.word	0x200003f5

08005cdc <__sfp_lock_release>:
 8005cdc:	4801      	ldr	r0, [pc, #4]	@ (8005ce4 <__sfp_lock_release+0x8>)
 8005cde:	f000 bab7 	b.w	8006250 <__retarget_lock_release_recursive>
 8005ce2:	bf00      	nop
 8005ce4:	200003f5 	.word	0x200003f5

08005ce8 <__sinit>:
 8005ce8:	b510      	push	{r4, lr}
 8005cea:	4604      	mov	r4, r0
 8005cec:	f7ff fff0 	bl	8005cd0 <__sfp_lock_acquire>
 8005cf0:	6a23      	ldr	r3, [r4, #32]
 8005cf2:	b11b      	cbz	r3, 8005cfc <__sinit+0x14>
 8005cf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005cf8:	f7ff bff0 	b.w	8005cdc <__sfp_lock_release>
 8005cfc:	4b04      	ldr	r3, [pc, #16]	@ (8005d10 <__sinit+0x28>)
 8005cfe:	6223      	str	r3, [r4, #32]
 8005d00:	4b04      	ldr	r3, [pc, #16]	@ (8005d14 <__sinit+0x2c>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d1f5      	bne.n	8005cf4 <__sinit+0xc>
 8005d08:	f7ff ffc4 	bl	8005c94 <global_stdio_init.part.0>
 8005d0c:	e7f2      	b.n	8005cf4 <__sinit+0xc>
 8005d0e:	bf00      	nop
 8005d10:	08005c55 	.word	0x08005c55
 8005d14:	200003ec 	.word	0x200003ec

08005d18 <_fwalk_sglue>:
 8005d18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d1c:	4607      	mov	r7, r0
 8005d1e:	4688      	mov	r8, r1
 8005d20:	4614      	mov	r4, r2
 8005d22:	2600      	movs	r6, #0
 8005d24:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005d28:	f1b9 0901 	subs.w	r9, r9, #1
 8005d2c:	d505      	bpl.n	8005d3a <_fwalk_sglue+0x22>
 8005d2e:	6824      	ldr	r4, [r4, #0]
 8005d30:	2c00      	cmp	r4, #0
 8005d32:	d1f7      	bne.n	8005d24 <_fwalk_sglue+0xc>
 8005d34:	4630      	mov	r0, r6
 8005d36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d3a:	89ab      	ldrh	r3, [r5, #12]
 8005d3c:	2b01      	cmp	r3, #1
 8005d3e:	d907      	bls.n	8005d50 <_fwalk_sglue+0x38>
 8005d40:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005d44:	3301      	adds	r3, #1
 8005d46:	d003      	beq.n	8005d50 <_fwalk_sglue+0x38>
 8005d48:	4629      	mov	r1, r5
 8005d4a:	4638      	mov	r0, r7
 8005d4c:	47c0      	blx	r8
 8005d4e:	4306      	orrs	r6, r0
 8005d50:	3568      	adds	r5, #104	@ 0x68
 8005d52:	e7e9      	b.n	8005d28 <_fwalk_sglue+0x10>

08005d54 <iprintf>:
 8005d54:	b40f      	push	{r0, r1, r2, r3}
 8005d56:	b507      	push	{r0, r1, r2, lr}
 8005d58:	4906      	ldr	r1, [pc, #24]	@ (8005d74 <iprintf+0x20>)
 8005d5a:	ab04      	add	r3, sp, #16
 8005d5c:	6808      	ldr	r0, [r1, #0]
 8005d5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d62:	6881      	ldr	r1, [r0, #8]
 8005d64:	9301      	str	r3, [sp, #4]
 8005d66:	f000 fb9f 	bl	80064a8 <_vfiprintf_r>
 8005d6a:	b003      	add	sp, #12
 8005d6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005d70:	b004      	add	sp, #16
 8005d72:	4770      	bx	lr
 8005d74:	20000018 	.word	0x20000018

08005d78 <_puts_r>:
 8005d78:	6a03      	ldr	r3, [r0, #32]
 8005d7a:	b570      	push	{r4, r5, r6, lr}
 8005d7c:	6884      	ldr	r4, [r0, #8]
 8005d7e:	4605      	mov	r5, r0
 8005d80:	460e      	mov	r6, r1
 8005d82:	b90b      	cbnz	r3, 8005d88 <_puts_r+0x10>
 8005d84:	f7ff ffb0 	bl	8005ce8 <__sinit>
 8005d88:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005d8a:	07db      	lsls	r3, r3, #31
 8005d8c:	d405      	bmi.n	8005d9a <_puts_r+0x22>
 8005d8e:	89a3      	ldrh	r3, [r4, #12]
 8005d90:	0598      	lsls	r0, r3, #22
 8005d92:	d402      	bmi.n	8005d9a <_puts_r+0x22>
 8005d94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005d96:	f000 fa5a 	bl	800624e <__retarget_lock_acquire_recursive>
 8005d9a:	89a3      	ldrh	r3, [r4, #12]
 8005d9c:	0719      	lsls	r1, r3, #28
 8005d9e:	d502      	bpl.n	8005da6 <_puts_r+0x2e>
 8005da0:	6923      	ldr	r3, [r4, #16]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d135      	bne.n	8005e12 <_puts_r+0x9a>
 8005da6:	4621      	mov	r1, r4
 8005da8:	4628      	mov	r0, r5
 8005daa:	f000 f981 	bl	80060b0 <__swsetup_r>
 8005dae:	b380      	cbz	r0, 8005e12 <_puts_r+0x9a>
 8005db0:	f04f 35ff 	mov.w	r5, #4294967295
 8005db4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005db6:	07da      	lsls	r2, r3, #31
 8005db8:	d405      	bmi.n	8005dc6 <_puts_r+0x4e>
 8005dba:	89a3      	ldrh	r3, [r4, #12]
 8005dbc:	059b      	lsls	r3, r3, #22
 8005dbe:	d402      	bmi.n	8005dc6 <_puts_r+0x4e>
 8005dc0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005dc2:	f000 fa45 	bl	8006250 <__retarget_lock_release_recursive>
 8005dc6:	4628      	mov	r0, r5
 8005dc8:	bd70      	pop	{r4, r5, r6, pc}
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	da04      	bge.n	8005dd8 <_puts_r+0x60>
 8005dce:	69a2      	ldr	r2, [r4, #24]
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	dc17      	bgt.n	8005e04 <_puts_r+0x8c>
 8005dd4:	290a      	cmp	r1, #10
 8005dd6:	d015      	beq.n	8005e04 <_puts_r+0x8c>
 8005dd8:	6823      	ldr	r3, [r4, #0]
 8005dda:	1c5a      	adds	r2, r3, #1
 8005ddc:	6022      	str	r2, [r4, #0]
 8005dde:	7019      	strb	r1, [r3, #0]
 8005de0:	68a3      	ldr	r3, [r4, #8]
 8005de2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005de6:	3b01      	subs	r3, #1
 8005de8:	60a3      	str	r3, [r4, #8]
 8005dea:	2900      	cmp	r1, #0
 8005dec:	d1ed      	bne.n	8005dca <_puts_r+0x52>
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	da11      	bge.n	8005e16 <_puts_r+0x9e>
 8005df2:	4622      	mov	r2, r4
 8005df4:	210a      	movs	r1, #10
 8005df6:	4628      	mov	r0, r5
 8005df8:	f000 f91b 	bl	8006032 <__swbuf_r>
 8005dfc:	3001      	adds	r0, #1
 8005dfe:	d0d7      	beq.n	8005db0 <_puts_r+0x38>
 8005e00:	250a      	movs	r5, #10
 8005e02:	e7d7      	b.n	8005db4 <_puts_r+0x3c>
 8005e04:	4622      	mov	r2, r4
 8005e06:	4628      	mov	r0, r5
 8005e08:	f000 f913 	bl	8006032 <__swbuf_r>
 8005e0c:	3001      	adds	r0, #1
 8005e0e:	d1e7      	bne.n	8005de0 <_puts_r+0x68>
 8005e10:	e7ce      	b.n	8005db0 <_puts_r+0x38>
 8005e12:	3e01      	subs	r6, #1
 8005e14:	e7e4      	b.n	8005de0 <_puts_r+0x68>
 8005e16:	6823      	ldr	r3, [r4, #0]
 8005e18:	1c5a      	adds	r2, r3, #1
 8005e1a:	6022      	str	r2, [r4, #0]
 8005e1c:	220a      	movs	r2, #10
 8005e1e:	701a      	strb	r2, [r3, #0]
 8005e20:	e7ee      	b.n	8005e00 <_puts_r+0x88>
	...

08005e24 <puts>:
 8005e24:	4b02      	ldr	r3, [pc, #8]	@ (8005e30 <puts+0xc>)
 8005e26:	4601      	mov	r1, r0
 8005e28:	6818      	ldr	r0, [r3, #0]
 8005e2a:	f7ff bfa5 	b.w	8005d78 <_puts_r>
 8005e2e:	bf00      	nop
 8005e30:	20000018 	.word	0x20000018

08005e34 <setbuf>:
 8005e34:	fab1 f281 	clz	r2, r1
 8005e38:	0952      	lsrs	r2, r2, #5
 8005e3a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005e3e:	0052      	lsls	r2, r2, #1
 8005e40:	f000 b800 	b.w	8005e44 <setvbuf>

08005e44 <setvbuf>:
 8005e44:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005e48:	461d      	mov	r5, r3
 8005e4a:	4b57      	ldr	r3, [pc, #348]	@ (8005fa8 <setvbuf+0x164>)
 8005e4c:	681f      	ldr	r7, [r3, #0]
 8005e4e:	4604      	mov	r4, r0
 8005e50:	460e      	mov	r6, r1
 8005e52:	4690      	mov	r8, r2
 8005e54:	b127      	cbz	r7, 8005e60 <setvbuf+0x1c>
 8005e56:	6a3b      	ldr	r3, [r7, #32]
 8005e58:	b913      	cbnz	r3, 8005e60 <setvbuf+0x1c>
 8005e5a:	4638      	mov	r0, r7
 8005e5c:	f7ff ff44 	bl	8005ce8 <__sinit>
 8005e60:	f1b8 0f02 	cmp.w	r8, #2
 8005e64:	d006      	beq.n	8005e74 <setvbuf+0x30>
 8005e66:	f1b8 0f01 	cmp.w	r8, #1
 8005e6a:	f200 809a 	bhi.w	8005fa2 <setvbuf+0x15e>
 8005e6e:	2d00      	cmp	r5, #0
 8005e70:	f2c0 8097 	blt.w	8005fa2 <setvbuf+0x15e>
 8005e74:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005e76:	07d9      	lsls	r1, r3, #31
 8005e78:	d405      	bmi.n	8005e86 <setvbuf+0x42>
 8005e7a:	89a3      	ldrh	r3, [r4, #12]
 8005e7c:	059a      	lsls	r2, r3, #22
 8005e7e:	d402      	bmi.n	8005e86 <setvbuf+0x42>
 8005e80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005e82:	f000 f9e4 	bl	800624e <__retarget_lock_acquire_recursive>
 8005e86:	4621      	mov	r1, r4
 8005e88:	4638      	mov	r0, r7
 8005e8a:	f000 fe37 	bl	8006afc <_fflush_r>
 8005e8e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005e90:	b141      	cbz	r1, 8005ea4 <setvbuf+0x60>
 8005e92:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005e96:	4299      	cmp	r1, r3
 8005e98:	d002      	beq.n	8005ea0 <setvbuf+0x5c>
 8005e9a:	4638      	mov	r0, r7
 8005e9c:	f000 f9da 	bl	8006254 <_free_r>
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	6363      	str	r3, [r4, #52]	@ 0x34
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	61a3      	str	r3, [r4, #24]
 8005ea8:	6063      	str	r3, [r4, #4]
 8005eaa:	89a3      	ldrh	r3, [r4, #12]
 8005eac:	061b      	lsls	r3, r3, #24
 8005eae:	d503      	bpl.n	8005eb8 <setvbuf+0x74>
 8005eb0:	6921      	ldr	r1, [r4, #16]
 8005eb2:	4638      	mov	r0, r7
 8005eb4:	f000 f9ce 	bl	8006254 <_free_r>
 8005eb8:	89a3      	ldrh	r3, [r4, #12]
 8005eba:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 8005ebe:	f023 0303 	bic.w	r3, r3, #3
 8005ec2:	f1b8 0f02 	cmp.w	r8, #2
 8005ec6:	81a3      	strh	r3, [r4, #12]
 8005ec8:	d061      	beq.n	8005f8e <setvbuf+0x14a>
 8005eca:	ab01      	add	r3, sp, #4
 8005ecc:	466a      	mov	r2, sp
 8005ece:	4621      	mov	r1, r4
 8005ed0:	4638      	mov	r0, r7
 8005ed2:	f000 fe3b 	bl	8006b4c <__swhatbuf_r>
 8005ed6:	89a3      	ldrh	r3, [r4, #12]
 8005ed8:	4318      	orrs	r0, r3
 8005eda:	81a0      	strh	r0, [r4, #12]
 8005edc:	bb2d      	cbnz	r5, 8005f2a <setvbuf+0xe6>
 8005ede:	9d00      	ldr	r5, [sp, #0]
 8005ee0:	4628      	mov	r0, r5
 8005ee2:	f000 fa01 	bl	80062e8 <malloc>
 8005ee6:	4606      	mov	r6, r0
 8005ee8:	2800      	cmp	r0, #0
 8005eea:	d152      	bne.n	8005f92 <setvbuf+0x14e>
 8005eec:	f8dd 9000 	ldr.w	r9, [sp]
 8005ef0:	45a9      	cmp	r9, r5
 8005ef2:	d140      	bne.n	8005f76 <setvbuf+0x132>
 8005ef4:	f04f 35ff 	mov.w	r5, #4294967295
 8005ef8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005efc:	f043 0202 	orr.w	r2, r3, #2
 8005f00:	81a2      	strh	r2, [r4, #12]
 8005f02:	2200      	movs	r2, #0
 8005f04:	60a2      	str	r2, [r4, #8]
 8005f06:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 8005f0a:	6022      	str	r2, [r4, #0]
 8005f0c:	6122      	str	r2, [r4, #16]
 8005f0e:	2201      	movs	r2, #1
 8005f10:	6162      	str	r2, [r4, #20]
 8005f12:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005f14:	07d6      	lsls	r6, r2, #31
 8005f16:	d404      	bmi.n	8005f22 <setvbuf+0xde>
 8005f18:	0598      	lsls	r0, r3, #22
 8005f1a:	d402      	bmi.n	8005f22 <setvbuf+0xde>
 8005f1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005f1e:	f000 f997 	bl	8006250 <__retarget_lock_release_recursive>
 8005f22:	4628      	mov	r0, r5
 8005f24:	b003      	add	sp, #12
 8005f26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005f2a:	2e00      	cmp	r6, #0
 8005f2c:	d0d8      	beq.n	8005ee0 <setvbuf+0x9c>
 8005f2e:	6a3b      	ldr	r3, [r7, #32]
 8005f30:	b913      	cbnz	r3, 8005f38 <setvbuf+0xf4>
 8005f32:	4638      	mov	r0, r7
 8005f34:	f7ff fed8 	bl	8005ce8 <__sinit>
 8005f38:	f1b8 0f01 	cmp.w	r8, #1
 8005f3c:	bf08      	it	eq
 8005f3e:	89a3      	ldrheq	r3, [r4, #12]
 8005f40:	6026      	str	r6, [r4, #0]
 8005f42:	bf04      	itt	eq
 8005f44:	f043 0301 	orreq.w	r3, r3, #1
 8005f48:	81a3      	strheq	r3, [r4, #12]
 8005f4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f4e:	f013 0208 	ands.w	r2, r3, #8
 8005f52:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8005f56:	d01e      	beq.n	8005f96 <setvbuf+0x152>
 8005f58:	07d9      	lsls	r1, r3, #31
 8005f5a:	bf41      	itttt	mi
 8005f5c:	2200      	movmi	r2, #0
 8005f5e:	426d      	negmi	r5, r5
 8005f60:	60a2      	strmi	r2, [r4, #8]
 8005f62:	61a5      	strmi	r5, [r4, #24]
 8005f64:	bf58      	it	pl
 8005f66:	60a5      	strpl	r5, [r4, #8]
 8005f68:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005f6a:	07d2      	lsls	r2, r2, #31
 8005f6c:	d401      	bmi.n	8005f72 <setvbuf+0x12e>
 8005f6e:	059b      	lsls	r3, r3, #22
 8005f70:	d513      	bpl.n	8005f9a <setvbuf+0x156>
 8005f72:	2500      	movs	r5, #0
 8005f74:	e7d5      	b.n	8005f22 <setvbuf+0xde>
 8005f76:	4648      	mov	r0, r9
 8005f78:	f000 f9b6 	bl	80062e8 <malloc>
 8005f7c:	4606      	mov	r6, r0
 8005f7e:	2800      	cmp	r0, #0
 8005f80:	d0b8      	beq.n	8005ef4 <setvbuf+0xb0>
 8005f82:	89a3      	ldrh	r3, [r4, #12]
 8005f84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f88:	81a3      	strh	r3, [r4, #12]
 8005f8a:	464d      	mov	r5, r9
 8005f8c:	e7cf      	b.n	8005f2e <setvbuf+0xea>
 8005f8e:	2500      	movs	r5, #0
 8005f90:	e7b2      	b.n	8005ef8 <setvbuf+0xb4>
 8005f92:	46a9      	mov	r9, r5
 8005f94:	e7f5      	b.n	8005f82 <setvbuf+0x13e>
 8005f96:	60a2      	str	r2, [r4, #8]
 8005f98:	e7e6      	b.n	8005f68 <setvbuf+0x124>
 8005f9a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005f9c:	f000 f958 	bl	8006250 <__retarget_lock_release_recursive>
 8005fa0:	e7e7      	b.n	8005f72 <setvbuf+0x12e>
 8005fa2:	f04f 35ff 	mov.w	r5, #4294967295
 8005fa6:	e7bc      	b.n	8005f22 <setvbuf+0xde>
 8005fa8:	20000018 	.word	0x20000018

08005fac <__sread>:
 8005fac:	b510      	push	{r4, lr}
 8005fae:	460c      	mov	r4, r1
 8005fb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fb4:	f000 f8fc 	bl	80061b0 <_read_r>
 8005fb8:	2800      	cmp	r0, #0
 8005fba:	bfab      	itete	ge
 8005fbc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005fbe:	89a3      	ldrhlt	r3, [r4, #12]
 8005fc0:	181b      	addge	r3, r3, r0
 8005fc2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005fc6:	bfac      	ite	ge
 8005fc8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005fca:	81a3      	strhlt	r3, [r4, #12]
 8005fcc:	bd10      	pop	{r4, pc}

08005fce <__swrite>:
 8005fce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fd2:	461f      	mov	r7, r3
 8005fd4:	898b      	ldrh	r3, [r1, #12]
 8005fd6:	05db      	lsls	r3, r3, #23
 8005fd8:	4605      	mov	r5, r0
 8005fda:	460c      	mov	r4, r1
 8005fdc:	4616      	mov	r6, r2
 8005fde:	d505      	bpl.n	8005fec <__swrite+0x1e>
 8005fe0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fe4:	2302      	movs	r3, #2
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	f000 f8d0 	bl	800618c <_lseek_r>
 8005fec:	89a3      	ldrh	r3, [r4, #12]
 8005fee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005ff2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005ff6:	81a3      	strh	r3, [r4, #12]
 8005ff8:	4632      	mov	r2, r6
 8005ffa:	463b      	mov	r3, r7
 8005ffc:	4628      	mov	r0, r5
 8005ffe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006002:	f000 b8e7 	b.w	80061d4 <_write_r>

08006006 <__sseek>:
 8006006:	b510      	push	{r4, lr}
 8006008:	460c      	mov	r4, r1
 800600a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800600e:	f000 f8bd 	bl	800618c <_lseek_r>
 8006012:	1c43      	adds	r3, r0, #1
 8006014:	89a3      	ldrh	r3, [r4, #12]
 8006016:	bf15      	itete	ne
 8006018:	6560      	strne	r0, [r4, #84]	@ 0x54
 800601a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800601e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006022:	81a3      	strheq	r3, [r4, #12]
 8006024:	bf18      	it	ne
 8006026:	81a3      	strhne	r3, [r4, #12]
 8006028:	bd10      	pop	{r4, pc}

0800602a <__sclose>:
 800602a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800602e:	f000 b89d 	b.w	800616c <_close_r>

08006032 <__swbuf_r>:
 8006032:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006034:	460e      	mov	r6, r1
 8006036:	4614      	mov	r4, r2
 8006038:	4605      	mov	r5, r0
 800603a:	b118      	cbz	r0, 8006044 <__swbuf_r+0x12>
 800603c:	6a03      	ldr	r3, [r0, #32]
 800603e:	b90b      	cbnz	r3, 8006044 <__swbuf_r+0x12>
 8006040:	f7ff fe52 	bl	8005ce8 <__sinit>
 8006044:	69a3      	ldr	r3, [r4, #24]
 8006046:	60a3      	str	r3, [r4, #8]
 8006048:	89a3      	ldrh	r3, [r4, #12]
 800604a:	071a      	lsls	r2, r3, #28
 800604c:	d501      	bpl.n	8006052 <__swbuf_r+0x20>
 800604e:	6923      	ldr	r3, [r4, #16]
 8006050:	b943      	cbnz	r3, 8006064 <__swbuf_r+0x32>
 8006052:	4621      	mov	r1, r4
 8006054:	4628      	mov	r0, r5
 8006056:	f000 f82b 	bl	80060b0 <__swsetup_r>
 800605a:	b118      	cbz	r0, 8006064 <__swbuf_r+0x32>
 800605c:	f04f 37ff 	mov.w	r7, #4294967295
 8006060:	4638      	mov	r0, r7
 8006062:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006064:	6823      	ldr	r3, [r4, #0]
 8006066:	6922      	ldr	r2, [r4, #16]
 8006068:	1a98      	subs	r0, r3, r2
 800606a:	6963      	ldr	r3, [r4, #20]
 800606c:	b2f6      	uxtb	r6, r6
 800606e:	4283      	cmp	r3, r0
 8006070:	4637      	mov	r7, r6
 8006072:	dc05      	bgt.n	8006080 <__swbuf_r+0x4e>
 8006074:	4621      	mov	r1, r4
 8006076:	4628      	mov	r0, r5
 8006078:	f000 fd40 	bl	8006afc <_fflush_r>
 800607c:	2800      	cmp	r0, #0
 800607e:	d1ed      	bne.n	800605c <__swbuf_r+0x2a>
 8006080:	68a3      	ldr	r3, [r4, #8]
 8006082:	3b01      	subs	r3, #1
 8006084:	60a3      	str	r3, [r4, #8]
 8006086:	6823      	ldr	r3, [r4, #0]
 8006088:	1c5a      	adds	r2, r3, #1
 800608a:	6022      	str	r2, [r4, #0]
 800608c:	701e      	strb	r6, [r3, #0]
 800608e:	6962      	ldr	r2, [r4, #20]
 8006090:	1c43      	adds	r3, r0, #1
 8006092:	429a      	cmp	r2, r3
 8006094:	d004      	beq.n	80060a0 <__swbuf_r+0x6e>
 8006096:	89a3      	ldrh	r3, [r4, #12]
 8006098:	07db      	lsls	r3, r3, #31
 800609a:	d5e1      	bpl.n	8006060 <__swbuf_r+0x2e>
 800609c:	2e0a      	cmp	r6, #10
 800609e:	d1df      	bne.n	8006060 <__swbuf_r+0x2e>
 80060a0:	4621      	mov	r1, r4
 80060a2:	4628      	mov	r0, r5
 80060a4:	f000 fd2a 	bl	8006afc <_fflush_r>
 80060a8:	2800      	cmp	r0, #0
 80060aa:	d0d9      	beq.n	8006060 <__swbuf_r+0x2e>
 80060ac:	e7d6      	b.n	800605c <__swbuf_r+0x2a>
	...

080060b0 <__swsetup_r>:
 80060b0:	b538      	push	{r3, r4, r5, lr}
 80060b2:	4b29      	ldr	r3, [pc, #164]	@ (8006158 <__swsetup_r+0xa8>)
 80060b4:	4605      	mov	r5, r0
 80060b6:	6818      	ldr	r0, [r3, #0]
 80060b8:	460c      	mov	r4, r1
 80060ba:	b118      	cbz	r0, 80060c4 <__swsetup_r+0x14>
 80060bc:	6a03      	ldr	r3, [r0, #32]
 80060be:	b90b      	cbnz	r3, 80060c4 <__swsetup_r+0x14>
 80060c0:	f7ff fe12 	bl	8005ce8 <__sinit>
 80060c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80060c8:	0719      	lsls	r1, r3, #28
 80060ca:	d422      	bmi.n	8006112 <__swsetup_r+0x62>
 80060cc:	06da      	lsls	r2, r3, #27
 80060ce:	d407      	bmi.n	80060e0 <__swsetup_r+0x30>
 80060d0:	2209      	movs	r2, #9
 80060d2:	602a      	str	r2, [r5, #0]
 80060d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80060d8:	81a3      	strh	r3, [r4, #12]
 80060da:	f04f 30ff 	mov.w	r0, #4294967295
 80060de:	e033      	b.n	8006148 <__swsetup_r+0x98>
 80060e0:	0758      	lsls	r0, r3, #29
 80060e2:	d512      	bpl.n	800610a <__swsetup_r+0x5a>
 80060e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80060e6:	b141      	cbz	r1, 80060fa <__swsetup_r+0x4a>
 80060e8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80060ec:	4299      	cmp	r1, r3
 80060ee:	d002      	beq.n	80060f6 <__swsetup_r+0x46>
 80060f0:	4628      	mov	r0, r5
 80060f2:	f000 f8af 	bl	8006254 <_free_r>
 80060f6:	2300      	movs	r3, #0
 80060f8:	6363      	str	r3, [r4, #52]	@ 0x34
 80060fa:	89a3      	ldrh	r3, [r4, #12]
 80060fc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006100:	81a3      	strh	r3, [r4, #12]
 8006102:	2300      	movs	r3, #0
 8006104:	6063      	str	r3, [r4, #4]
 8006106:	6923      	ldr	r3, [r4, #16]
 8006108:	6023      	str	r3, [r4, #0]
 800610a:	89a3      	ldrh	r3, [r4, #12]
 800610c:	f043 0308 	orr.w	r3, r3, #8
 8006110:	81a3      	strh	r3, [r4, #12]
 8006112:	6923      	ldr	r3, [r4, #16]
 8006114:	b94b      	cbnz	r3, 800612a <__swsetup_r+0x7a>
 8006116:	89a3      	ldrh	r3, [r4, #12]
 8006118:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800611c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006120:	d003      	beq.n	800612a <__swsetup_r+0x7a>
 8006122:	4621      	mov	r1, r4
 8006124:	4628      	mov	r0, r5
 8006126:	f000 fd37 	bl	8006b98 <__smakebuf_r>
 800612a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800612e:	f013 0201 	ands.w	r2, r3, #1
 8006132:	d00a      	beq.n	800614a <__swsetup_r+0x9a>
 8006134:	2200      	movs	r2, #0
 8006136:	60a2      	str	r2, [r4, #8]
 8006138:	6962      	ldr	r2, [r4, #20]
 800613a:	4252      	negs	r2, r2
 800613c:	61a2      	str	r2, [r4, #24]
 800613e:	6922      	ldr	r2, [r4, #16]
 8006140:	b942      	cbnz	r2, 8006154 <__swsetup_r+0xa4>
 8006142:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006146:	d1c5      	bne.n	80060d4 <__swsetup_r+0x24>
 8006148:	bd38      	pop	{r3, r4, r5, pc}
 800614a:	0799      	lsls	r1, r3, #30
 800614c:	bf58      	it	pl
 800614e:	6962      	ldrpl	r2, [r4, #20]
 8006150:	60a2      	str	r2, [r4, #8]
 8006152:	e7f4      	b.n	800613e <__swsetup_r+0x8e>
 8006154:	2000      	movs	r0, #0
 8006156:	e7f7      	b.n	8006148 <__swsetup_r+0x98>
 8006158:	20000018 	.word	0x20000018

0800615c <memset>:
 800615c:	4402      	add	r2, r0
 800615e:	4603      	mov	r3, r0
 8006160:	4293      	cmp	r3, r2
 8006162:	d100      	bne.n	8006166 <memset+0xa>
 8006164:	4770      	bx	lr
 8006166:	f803 1b01 	strb.w	r1, [r3], #1
 800616a:	e7f9      	b.n	8006160 <memset+0x4>

0800616c <_close_r>:
 800616c:	b538      	push	{r3, r4, r5, lr}
 800616e:	4d06      	ldr	r5, [pc, #24]	@ (8006188 <_close_r+0x1c>)
 8006170:	2300      	movs	r3, #0
 8006172:	4604      	mov	r4, r0
 8006174:	4608      	mov	r0, r1
 8006176:	602b      	str	r3, [r5, #0]
 8006178:	f7fa ffbb 	bl	80010f2 <_close>
 800617c:	1c43      	adds	r3, r0, #1
 800617e:	d102      	bne.n	8006186 <_close_r+0x1a>
 8006180:	682b      	ldr	r3, [r5, #0]
 8006182:	b103      	cbz	r3, 8006186 <_close_r+0x1a>
 8006184:	6023      	str	r3, [r4, #0]
 8006186:	bd38      	pop	{r3, r4, r5, pc}
 8006188:	200003f0 	.word	0x200003f0

0800618c <_lseek_r>:
 800618c:	b538      	push	{r3, r4, r5, lr}
 800618e:	4d07      	ldr	r5, [pc, #28]	@ (80061ac <_lseek_r+0x20>)
 8006190:	4604      	mov	r4, r0
 8006192:	4608      	mov	r0, r1
 8006194:	4611      	mov	r1, r2
 8006196:	2200      	movs	r2, #0
 8006198:	602a      	str	r2, [r5, #0]
 800619a:	461a      	mov	r2, r3
 800619c:	f7fa ffd0 	bl	8001140 <_lseek>
 80061a0:	1c43      	adds	r3, r0, #1
 80061a2:	d102      	bne.n	80061aa <_lseek_r+0x1e>
 80061a4:	682b      	ldr	r3, [r5, #0]
 80061a6:	b103      	cbz	r3, 80061aa <_lseek_r+0x1e>
 80061a8:	6023      	str	r3, [r4, #0]
 80061aa:	bd38      	pop	{r3, r4, r5, pc}
 80061ac:	200003f0 	.word	0x200003f0

080061b0 <_read_r>:
 80061b0:	b538      	push	{r3, r4, r5, lr}
 80061b2:	4d07      	ldr	r5, [pc, #28]	@ (80061d0 <_read_r+0x20>)
 80061b4:	4604      	mov	r4, r0
 80061b6:	4608      	mov	r0, r1
 80061b8:	4611      	mov	r1, r2
 80061ba:	2200      	movs	r2, #0
 80061bc:	602a      	str	r2, [r5, #0]
 80061be:	461a      	mov	r2, r3
 80061c0:	f7fa ff7a 	bl	80010b8 <_read>
 80061c4:	1c43      	adds	r3, r0, #1
 80061c6:	d102      	bne.n	80061ce <_read_r+0x1e>
 80061c8:	682b      	ldr	r3, [r5, #0]
 80061ca:	b103      	cbz	r3, 80061ce <_read_r+0x1e>
 80061cc:	6023      	str	r3, [r4, #0]
 80061ce:	bd38      	pop	{r3, r4, r5, pc}
 80061d0:	200003f0 	.word	0x200003f0

080061d4 <_write_r>:
 80061d4:	b538      	push	{r3, r4, r5, lr}
 80061d6:	4d07      	ldr	r5, [pc, #28]	@ (80061f4 <_write_r+0x20>)
 80061d8:	4604      	mov	r4, r0
 80061da:	4608      	mov	r0, r1
 80061dc:	4611      	mov	r1, r2
 80061de:	2200      	movs	r2, #0
 80061e0:	602a      	str	r2, [r5, #0]
 80061e2:	461a      	mov	r2, r3
 80061e4:	f7fa fd96 	bl	8000d14 <_write>
 80061e8:	1c43      	adds	r3, r0, #1
 80061ea:	d102      	bne.n	80061f2 <_write_r+0x1e>
 80061ec:	682b      	ldr	r3, [r5, #0]
 80061ee:	b103      	cbz	r3, 80061f2 <_write_r+0x1e>
 80061f0:	6023      	str	r3, [r4, #0]
 80061f2:	bd38      	pop	{r3, r4, r5, pc}
 80061f4:	200003f0 	.word	0x200003f0

080061f8 <__errno>:
 80061f8:	4b01      	ldr	r3, [pc, #4]	@ (8006200 <__errno+0x8>)
 80061fa:	6818      	ldr	r0, [r3, #0]
 80061fc:	4770      	bx	lr
 80061fe:	bf00      	nop
 8006200:	20000018 	.word	0x20000018

08006204 <__libc_init_array>:
 8006204:	b570      	push	{r4, r5, r6, lr}
 8006206:	4d0d      	ldr	r5, [pc, #52]	@ (800623c <__libc_init_array+0x38>)
 8006208:	4c0d      	ldr	r4, [pc, #52]	@ (8006240 <__libc_init_array+0x3c>)
 800620a:	1b64      	subs	r4, r4, r5
 800620c:	10a4      	asrs	r4, r4, #2
 800620e:	2600      	movs	r6, #0
 8006210:	42a6      	cmp	r6, r4
 8006212:	d109      	bne.n	8006228 <__libc_init_array+0x24>
 8006214:	4d0b      	ldr	r5, [pc, #44]	@ (8006244 <__libc_init_array+0x40>)
 8006216:	4c0c      	ldr	r4, [pc, #48]	@ (8006248 <__libc_init_array+0x44>)
 8006218:	f000 fd2c 	bl	8006c74 <_init>
 800621c:	1b64      	subs	r4, r4, r5
 800621e:	10a4      	asrs	r4, r4, #2
 8006220:	2600      	movs	r6, #0
 8006222:	42a6      	cmp	r6, r4
 8006224:	d105      	bne.n	8006232 <__libc_init_array+0x2e>
 8006226:	bd70      	pop	{r4, r5, r6, pc}
 8006228:	f855 3b04 	ldr.w	r3, [r5], #4
 800622c:	4798      	blx	r3
 800622e:	3601      	adds	r6, #1
 8006230:	e7ee      	b.n	8006210 <__libc_init_array+0xc>
 8006232:	f855 3b04 	ldr.w	r3, [r5], #4
 8006236:	4798      	blx	r3
 8006238:	3601      	adds	r6, #1
 800623a:	e7f2      	b.n	8006222 <__libc_init_array+0x1e>
 800623c:	08006d64 	.word	0x08006d64
 8006240:	08006d64 	.word	0x08006d64
 8006244:	08006d64 	.word	0x08006d64
 8006248:	08006d68 	.word	0x08006d68

0800624c <__retarget_lock_init_recursive>:
 800624c:	4770      	bx	lr

0800624e <__retarget_lock_acquire_recursive>:
 800624e:	4770      	bx	lr

08006250 <__retarget_lock_release_recursive>:
 8006250:	4770      	bx	lr
	...

08006254 <_free_r>:
 8006254:	b538      	push	{r3, r4, r5, lr}
 8006256:	4605      	mov	r5, r0
 8006258:	2900      	cmp	r1, #0
 800625a:	d041      	beq.n	80062e0 <_free_r+0x8c>
 800625c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006260:	1f0c      	subs	r4, r1, #4
 8006262:	2b00      	cmp	r3, #0
 8006264:	bfb8      	it	lt
 8006266:	18e4      	addlt	r4, r4, r3
 8006268:	f000 f8e8 	bl	800643c <__malloc_lock>
 800626c:	4a1d      	ldr	r2, [pc, #116]	@ (80062e4 <_free_r+0x90>)
 800626e:	6813      	ldr	r3, [r2, #0]
 8006270:	b933      	cbnz	r3, 8006280 <_free_r+0x2c>
 8006272:	6063      	str	r3, [r4, #4]
 8006274:	6014      	str	r4, [r2, #0]
 8006276:	4628      	mov	r0, r5
 8006278:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800627c:	f000 b8e4 	b.w	8006448 <__malloc_unlock>
 8006280:	42a3      	cmp	r3, r4
 8006282:	d908      	bls.n	8006296 <_free_r+0x42>
 8006284:	6820      	ldr	r0, [r4, #0]
 8006286:	1821      	adds	r1, r4, r0
 8006288:	428b      	cmp	r3, r1
 800628a:	bf01      	itttt	eq
 800628c:	6819      	ldreq	r1, [r3, #0]
 800628e:	685b      	ldreq	r3, [r3, #4]
 8006290:	1809      	addeq	r1, r1, r0
 8006292:	6021      	streq	r1, [r4, #0]
 8006294:	e7ed      	b.n	8006272 <_free_r+0x1e>
 8006296:	461a      	mov	r2, r3
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	b10b      	cbz	r3, 80062a0 <_free_r+0x4c>
 800629c:	42a3      	cmp	r3, r4
 800629e:	d9fa      	bls.n	8006296 <_free_r+0x42>
 80062a0:	6811      	ldr	r1, [r2, #0]
 80062a2:	1850      	adds	r0, r2, r1
 80062a4:	42a0      	cmp	r0, r4
 80062a6:	d10b      	bne.n	80062c0 <_free_r+0x6c>
 80062a8:	6820      	ldr	r0, [r4, #0]
 80062aa:	4401      	add	r1, r0
 80062ac:	1850      	adds	r0, r2, r1
 80062ae:	4283      	cmp	r3, r0
 80062b0:	6011      	str	r1, [r2, #0]
 80062b2:	d1e0      	bne.n	8006276 <_free_r+0x22>
 80062b4:	6818      	ldr	r0, [r3, #0]
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	6053      	str	r3, [r2, #4]
 80062ba:	4408      	add	r0, r1
 80062bc:	6010      	str	r0, [r2, #0]
 80062be:	e7da      	b.n	8006276 <_free_r+0x22>
 80062c0:	d902      	bls.n	80062c8 <_free_r+0x74>
 80062c2:	230c      	movs	r3, #12
 80062c4:	602b      	str	r3, [r5, #0]
 80062c6:	e7d6      	b.n	8006276 <_free_r+0x22>
 80062c8:	6820      	ldr	r0, [r4, #0]
 80062ca:	1821      	adds	r1, r4, r0
 80062cc:	428b      	cmp	r3, r1
 80062ce:	bf04      	itt	eq
 80062d0:	6819      	ldreq	r1, [r3, #0]
 80062d2:	685b      	ldreq	r3, [r3, #4]
 80062d4:	6063      	str	r3, [r4, #4]
 80062d6:	bf04      	itt	eq
 80062d8:	1809      	addeq	r1, r1, r0
 80062da:	6021      	streq	r1, [r4, #0]
 80062dc:	6054      	str	r4, [r2, #4]
 80062de:	e7ca      	b.n	8006276 <_free_r+0x22>
 80062e0:	bd38      	pop	{r3, r4, r5, pc}
 80062e2:	bf00      	nop
 80062e4:	200003fc 	.word	0x200003fc

080062e8 <malloc>:
 80062e8:	4b02      	ldr	r3, [pc, #8]	@ (80062f4 <malloc+0xc>)
 80062ea:	4601      	mov	r1, r0
 80062ec:	6818      	ldr	r0, [r3, #0]
 80062ee:	f000 b825 	b.w	800633c <_malloc_r>
 80062f2:	bf00      	nop
 80062f4:	20000018 	.word	0x20000018

080062f8 <sbrk_aligned>:
 80062f8:	b570      	push	{r4, r5, r6, lr}
 80062fa:	4e0f      	ldr	r6, [pc, #60]	@ (8006338 <sbrk_aligned+0x40>)
 80062fc:	460c      	mov	r4, r1
 80062fe:	6831      	ldr	r1, [r6, #0]
 8006300:	4605      	mov	r5, r0
 8006302:	b911      	cbnz	r1, 800630a <sbrk_aligned+0x12>
 8006304:	f000 fca6 	bl	8006c54 <_sbrk_r>
 8006308:	6030      	str	r0, [r6, #0]
 800630a:	4621      	mov	r1, r4
 800630c:	4628      	mov	r0, r5
 800630e:	f000 fca1 	bl	8006c54 <_sbrk_r>
 8006312:	1c43      	adds	r3, r0, #1
 8006314:	d103      	bne.n	800631e <sbrk_aligned+0x26>
 8006316:	f04f 34ff 	mov.w	r4, #4294967295
 800631a:	4620      	mov	r0, r4
 800631c:	bd70      	pop	{r4, r5, r6, pc}
 800631e:	1cc4      	adds	r4, r0, #3
 8006320:	f024 0403 	bic.w	r4, r4, #3
 8006324:	42a0      	cmp	r0, r4
 8006326:	d0f8      	beq.n	800631a <sbrk_aligned+0x22>
 8006328:	1a21      	subs	r1, r4, r0
 800632a:	4628      	mov	r0, r5
 800632c:	f000 fc92 	bl	8006c54 <_sbrk_r>
 8006330:	3001      	adds	r0, #1
 8006332:	d1f2      	bne.n	800631a <sbrk_aligned+0x22>
 8006334:	e7ef      	b.n	8006316 <sbrk_aligned+0x1e>
 8006336:	bf00      	nop
 8006338:	200003f8 	.word	0x200003f8

0800633c <_malloc_r>:
 800633c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006340:	1ccd      	adds	r5, r1, #3
 8006342:	f025 0503 	bic.w	r5, r5, #3
 8006346:	3508      	adds	r5, #8
 8006348:	2d0c      	cmp	r5, #12
 800634a:	bf38      	it	cc
 800634c:	250c      	movcc	r5, #12
 800634e:	2d00      	cmp	r5, #0
 8006350:	4606      	mov	r6, r0
 8006352:	db01      	blt.n	8006358 <_malloc_r+0x1c>
 8006354:	42a9      	cmp	r1, r5
 8006356:	d904      	bls.n	8006362 <_malloc_r+0x26>
 8006358:	230c      	movs	r3, #12
 800635a:	6033      	str	r3, [r6, #0]
 800635c:	2000      	movs	r0, #0
 800635e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006362:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006438 <_malloc_r+0xfc>
 8006366:	f000 f869 	bl	800643c <__malloc_lock>
 800636a:	f8d8 3000 	ldr.w	r3, [r8]
 800636e:	461c      	mov	r4, r3
 8006370:	bb44      	cbnz	r4, 80063c4 <_malloc_r+0x88>
 8006372:	4629      	mov	r1, r5
 8006374:	4630      	mov	r0, r6
 8006376:	f7ff ffbf 	bl	80062f8 <sbrk_aligned>
 800637a:	1c43      	adds	r3, r0, #1
 800637c:	4604      	mov	r4, r0
 800637e:	d158      	bne.n	8006432 <_malloc_r+0xf6>
 8006380:	f8d8 4000 	ldr.w	r4, [r8]
 8006384:	4627      	mov	r7, r4
 8006386:	2f00      	cmp	r7, #0
 8006388:	d143      	bne.n	8006412 <_malloc_r+0xd6>
 800638a:	2c00      	cmp	r4, #0
 800638c:	d04b      	beq.n	8006426 <_malloc_r+0xea>
 800638e:	6823      	ldr	r3, [r4, #0]
 8006390:	4639      	mov	r1, r7
 8006392:	4630      	mov	r0, r6
 8006394:	eb04 0903 	add.w	r9, r4, r3
 8006398:	f000 fc5c 	bl	8006c54 <_sbrk_r>
 800639c:	4581      	cmp	r9, r0
 800639e:	d142      	bne.n	8006426 <_malloc_r+0xea>
 80063a0:	6821      	ldr	r1, [r4, #0]
 80063a2:	1a6d      	subs	r5, r5, r1
 80063a4:	4629      	mov	r1, r5
 80063a6:	4630      	mov	r0, r6
 80063a8:	f7ff ffa6 	bl	80062f8 <sbrk_aligned>
 80063ac:	3001      	adds	r0, #1
 80063ae:	d03a      	beq.n	8006426 <_malloc_r+0xea>
 80063b0:	6823      	ldr	r3, [r4, #0]
 80063b2:	442b      	add	r3, r5
 80063b4:	6023      	str	r3, [r4, #0]
 80063b6:	f8d8 3000 	ldr.w	r3, [r8]
 80063ba:	685a      	ldr	r2, [r3, #4]
 80063bc:	bb62      	cbnz	r2, 8006418 <_malloc_r+0xdc>
 80063be:	f8c8 7000 	str.w	r7, [r8]
 80063c2:	e00f      	b.n	80063e4 <_malloc_r+0xa8>
 80063c4:	6822      	ldr	r2, [r4, #0]
 80063c6:	1b52      	subs	r2, r2, r5
 80063c8:	d420      	bmi.n	800640c <_malloc_r+0xd0>
 80063ca:	2a0b      	cmp	r2, #11
 80063cc:	d917      	bls.n	80063fe <_malloc_r+0xc2>
 80063ce:	1961      	adds	r1, r4, r5
 80063d0:	42a3      	cmp	r3, r4
 80063d2:	6025      	str	r5, [r4, #0]
 80063d4:	bf18      	it	ne
 80063d6:	6059      	strne	r1, [r3, #4]
 80063d8:	6863      	ldr	r3, [r4, #4]
 80063da:	bf08      	it	eq
 80063dc:	f8c8 1000 	streq.w	r1, [r8]
 80063e0:	5162      	str	r2, [r4, r5]
 80063e2:	604b      	str	r3, [r1, #4]
 80063e4:	4630      	mov	r0, r6
 80063e6:	f000 f82f 	bl	8006448 <__malloc_unlock>
 80063ea:	f104 000b 	add.w	r0, r4, #11
 80063ee:	1d23      	adds	r3, r4, #4
 80063f0:	f020 0007 	bic.w	r0, r0, #7
 80063f4:	1ac2      	subs	r2, r0, r3
 80063f6:	bf1c      	itt	ne
 80063f8:	1a1b      	subne	r3, r3, r0
 80063fa:	50a3      	strne	r3, [r4, r2]
 80063fc:	e7af      	b.n	800635e <_malloc_r+0x22>
 80063fe:	6862      	ldr	r2, [r4, #4]
 8006400:	42a3      	cmp	r3, r4
 8006402:	bf0c      	ite	eq
 8006404:	f8c8 2000 	streq.w	r2, [r8]
 8006408:	605a      	strne	r2, [r3, #4]
 800640a:	e7eb      	b.n	80063e4 <_malloc_r+0xa8>
 800640c:	4623      	mov	r3, r4
 800640e:	6864      	ldr	r4, [r4, #4]
 8006410:	e7ae      	b.n	8006370 <_malloc_r+0x34>
 8006412:	463c      	mov	r4, r7
 8006414:	687f      	ldr	r7, [r7, #4]
 8006416:	e7b6      	b.n	8006386 <_malloc_r+0x4a>
 8006418:	461a      	mov	r2, r3
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	42a3      	cmp	r3, r4
 800641e:	d1fb      	bne.n	8006418 <_malloc_r+0xdc>
 8006420:	2300      	movs	r3, #0
 8006422:	6053      	str	r3, [r2, #4]
 8006424:	e7de      	b.n	80063e4 <_malloc_r+0xa8>
 8006426:	230c      	movs	r3, #12
 8006428:	6033      	str	r3, [r6, #0]
 800642a:	4630      	mov	r0, r6
 800642c:	f000 f80c 	bl	8006448 <__malloc_unlock>
 8006430:	e794      	b.n	800635c <_malloc_r+0x20>
 8006432:	6005      	str	r5, [r0, #0]
 8006434:	e7d6      	b.n	80063e4 <_malloc_r+0xa8>
 8006436:	bf00      	nop
 8006438:	200003fc 	.word	0x200003fc

0800643c <__malloc_lock>:
 800643c:	4801      	ldr	r0, [pc, #4]	@ (8006444 <__malloc_lock+0x8>)
 800643e:	f7ff bf06 	b.w	800624e <__retarget_lock_acquire_recursive>
 8006442:	bf00      	nop
 8006444:	200003f4 	.word	0x200003f4

08006448 <__malloc_unlock>:
 8006448:	4801      	ldr	r0, [pc, #4]	@ (8006450 <__malloc_unlock+0x8>)
 800644a:	f7ff bf01 	b.w	8006250 <__retarget_lock_release_recursive>
 800644e:	bf00      	nop
 8006450:	200003f4 	.word	0x200003f4

08006454 <__sfputc_r>:
 8006454:	6893      	ldr	r3, [r2, #8]
 8006456:	3b01      	subs	r3, #1
 8006458:	2b00      	cmp	r3, #0
 800645a:	b410      	push	{r4}
 800645c:	6093      	str	r3, [r2, #8]
 800645e:	da08      	bge.n	8006472 <__sfputc_r+0x1e>
 8006460:	6994      	ldr	r4, [r2, #24]
 8006462:	42a3      	cmp	r3, r4
 8006464:	db01      	blt.n	800646a <__sfputc_r+0x16>
 8006466:	290a      	cmp	r1, #10
 8006468:	d103      	bne.n	8006472 <__sfputc_r+0x1e>
 800646a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800646e:	f7ff bde0 	b.w	8006032 <__swbuf_r>
 8006472:	6813      	ldr	r3, [r2, #0]
 8006474:	1c58      	adds	r0, r3, #1
 8006476:	6010      	str	r0, [r2, #0]
 8006478:	7019      	strb	r1, [r3, #0]
 800647a:	4608      	mov	r0, r1
 800647c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006480:	4770      	bx	lr

08006482 <__sfputs_r>:
 8006482:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006484:	4606      	mov	r6, r0
 8006486:	460f      	mov	r7, r1
 8006488:	4614      	mov	r4, r2
 800648a:	18d5      	adds	r5, r2, r3
 800648c:	42ac      	cmp	r4, r5
 800648e:	d101      	bne.n	8006494 <__sfputs_r+0x12>
 8006490:	2000      	movs	r0, #0
 8006492:	e007      	b.n	80064a4 <__sfputs_r+0x22>
 8006494:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006498:	463a      	mov	r2, r7
 800649a:	4630      	mov	r0, r6
 800649c:	f7ff ffda 	bl	8006454 <__sfputc_r>
 80064a0:	1c43      	adds	r3, r0, #1
 80064a2:	d1f3      	bne.n	800648c <__sfputs_r+0xa>
 80064a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080064a8 <_vfiprintf_r>:
 80064a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064ac:	460d      	mov	r5, r1
 80064ae:	b09d      	sub	sp, #116	@ 0x74
 80064b0:	4614      	mov	r4, r2
 80064b2:	4698      	mov	r8, r3
 80064b4:	4606      	mov	r6, r0
 80064b6:	b118      	cbz	r0, 80064c0 <_vfiprintf_r+0x18>
 80064b8:	6a03      	ldr	r3, [r0, #32]
 80064ba:	b90b      	cbnz	r3, 80064c0 <_vfiprintf_r+0x18>
 80064bc:	f7ff fc14 	bl	8005ce8 <__sinit>
 80064c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80064c2:	07d9      	lsls	r1, r3, #31
 80064c4:	d405      	bmi.n	80064d2 <_vfiprintf_r+0x2a>
 80064c6:	89ab      	ldrh	r3, [r5, #12]
 80064c8:	059a      	lsls	r2, r3, #22
 80064ca:	d402      	bmi.n	80064d2 <_vfiprintf_r+0x2a>
 80064cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80064ce:	f7ff febe 	bl	800624e <__retarget_lock_acquire_recursive>
 80064d2:	89ab      	ldrh	r3, [r5, #12]
 80064d4:	071b      	lsls	r3, r3, #28
 80064d6:	d501      	bpl.n	80064dc <_vfiprintf_r+0x34>
 80064d8:	692b      	ldr	r3, [r5, #16]
 80064da:	b99b      	cbnz	r3, 8006504 <_vfiprintf_r+0x5c>
 80064dc:	4629      	mov	r1, r5
 80064de:	4630      	mov	r0, r6
 80064e0:	f7ff fde6 	bl	80060b0 <__swsetup_r>
 80064e4:	b170      	cbz	r0, 8006504 <_vfiprintf_r+0x5c>
 80064e6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80064e8:	07dc      	lsls	r4, r3, #31
 80064ea:	d504      	bpl.n	80064f6 <_vfiprintf_r+0x4e>
 80064ec:	f04f 30ff 	mov.w	r0, #4294967295
 80064f0:	b01d      	add	sp, #116	@ 0x74
 80064f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064f6:	89ab      	ldrh	r3, [r5, #12]
 80064f8:	0598      	lsls	r0, r3, #22
 80064fa:	d4f7      	bmi.n	80064ec <_vfiprintf_r+0x44>
 80064fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80064fe:	f7ff fea7 	bl	8006250 <__retarget_lock_release_recursive>
 8006502:	e7f3      	b.n	80064ec <_vfiprintf_r+0x44>
 8006504:	2300      	movs	r3, #0
 8006506:	9309      	str	r3, [sp, #36]	@ 0x24
 8006508:	2320      	movs	r3, #32
 800650a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800650e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006512:	2330      	movs	r3, #48	@ 0x30
 8006514:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80066c4 <_vfiprintf_r+0x21c>
 8006518:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800651c:	f04f 0901 	mov.w	r9, #1
 8006520:	4623      	mov	r3, r4
 8006522:	469a      	mov	sl, r3
 8006524:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006528:	b10a      	cbz	r2, 800652e <_vfiprintf_r+0x86>
 800652a:	2a25      	cmp	r2, #37	@ 0x25
 800652c:	d1f9      	bne.n	8006522 <_vfiprintf_r+0x7a>
 800652e:	ebba 0b04 	subs.w	fp, sl, r4
 8006532:	d00b      	beq.n	800654c <_vfiprintf_r+0xa4>
 8006534:	465b      	mov	r3, fp
 8006536:	4622      	mov	r2, r4
 8006538:	4629      	mov	r1, r5
 800653a:	4630      	mov	r0, r6
 800653c:	f7ff ffa1 	bl	8006482 <__sfputs_r>
 8006540:	3001      	adds	r0, #1
 8006542:	f000 80a7 	beq.w	8006694 <_vfiprintf_r+0x1ec>
 8006546:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006548:	445a      	add	r2, fp
 800654a:	9209      	str	r2, [sp, #36]	@ 0x24
 800654c:	f89a 3000 	ldrb.w	r3, [sl]
 8006550:	2b00      	cmp	r3, #0
 8006552:	f000 809f 	beq.w	8006694 <_vfiprintf_r+0x1ec>
 8006556:	2300      	movs	r3, #0
 8006558:	f04f 32ff 	mov.w	r2, #4294967295
 800655c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006560:	f10a 0a01 	add.w	sl, sl, #1
 8006564:	9304      	str	r3, [sp, #16]
 8006566:	9307      	str	r3, [sp, #28]
 8006568:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800656c:	931a      	str	r3, [sp, #104]	@ 0x68
 800656e:	4654      	mov	r4, sl
 8006570:	2205      	movs	r2, #5
 8006572:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006576:	4853      	ldr	r0, [pc, #332]	@ (80066c4 <_vfiprintf_r+0x21c>)
 8006578:	f7f9 fe2a 	bl	80001d0 <memchr>
 800657c:	9a04      	ldr	r2, [sp, #16]
 800657e:	b9d8      	cbnz	r0, 80065b8 <_vfiprintf_r+0x110>
 8006580:	06d1      	lsls	r1, r2, #27
 8006582:	bf44      	itt	mi
 8006584:	2320      	movmi	r3, #32
 8006586:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800658a:	0713      	lsls	r3, r2, #28
 800658c:	bf44      	itt	mi
 800658e:	232b      	movmi	r3, #43	@ 0x2b
 8006590:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006594:	f89a 3000 	ldrb.w	r3, [sl]
 8006598:	2b2a      	cmp	r3, #42	@ 0x2a
 800659a:	d015      	beq.n	80065c8 <_vfiprintf_r+0x120>
 800659c:	9a07      	ldr	r2, [sp, #28]
 800659e:	4654      	mov	r4, sl
 80065a0:	2000      	movs	r0, #0
 80065a2:	f04f 0c0a 	mov.w	ip, #10
 80065a6:	4621      	mov	r1, r4
 80065a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80065ac:	3b30      	subs	r3, #48	@ 0x30
 80065ae:	2b09      	cmp	r3, #9
 80065b0:	d94b      	bls.n	800664a <_vfiprintf_r+0x1a2>
 80065b2:	b1b0      	cbz	r0, 80065e2 <_vfiprintf_r+0x13a>
 80065b4:	9207      	str	r2, [sp, #28]
 80065b6:	e014      	b.n	80065e2 <_vfiprintf_r+0x13a>
 80065b8:	eba0 0308 	sub.w	r3, r0, r8
 80065bc:	fa09 f303 	lsl.w	r3, r9, r3
 80065c0:	4313      	orrs	r3, r2
 80065c2:	9304      	str	r3, [sp, #16]
 80065c4:	46a2      	mov	sl, r4
 80065c6:	e7d2      	b.n	800656e <_vfiprintf_r+0xc6>
 80065c8:	9b03      	ldr	r3, [sp, #12]
 80065ca:	1d19      	adds	r1, r3, #4
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	9103      	str	r1, [sp, #12]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	bfbb      	ittet	lt
 80065d4:	425b      	neglt	r3, r3
 80065d6:	f042 0202 	orrlt.w	r2, r2, #2
 80065da:	9307      	strge	r3, [sp, #28]
 80065dc:	9307      	strlt	r3, [sp, #28]
 80065de:	bfb8      	it	lt
 80065e0:	9204      	strlt	r2, [sp, #16]
 80065e2:	7823      	ldrb	r3, [r4, #0]
 80065e4:	2b2e      	cmp	r3, #46	@ 0x2e
 80065e6:	d10a      	bne.n	80065fe <_vfiprintf_r+0x156>
 80065e8:	7863      	ldrb	r3, [r4, #1]
 80065ea:	2b2a      	cmp	r3, #42	@ 0x2a
 80065ec:	d132      	bne.n	8006654 <_vfiprintf_r+0x1ac>
 80065ee:	9b03      	ldr	r3, [sp, #12]
 80065f0:	1d1a      	adds	r2, r3, #4
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	9203      	str	r2, [sp, #12]
 80065f6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80065fa:	3402      	adds	r4, #2
 80065fc:	9305      	str	r3, [sp, #20]
 80065fe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80066d4 <_vfiprintf_r+0x22c>
 8006602:	7821      	ldrb	r1, [r4, #0]
 8006604:	2203      	movs	r2, #3
 8006606:	4650      	mov	r0, sl
 8006608:	f7f9 fde2 	bl	80001d0 <memchr>
 800660c:	b138      	cbz	r0, 800661e <_vfiprintf_r+0x176>
 800660e:	9b04      	ldr	r3, [sp, #16]
 8006610:	eba0 000a 	sub.w	r0, r0, sl
 8006614:	2240      	movs	r2, #64	@ 0x40
 8006616:	4082      	lsls	r2, r0
 8006618:	4313      	orrs	r3, r2
 800661a:	3401      	adds	r4, #1
 800661c:	9304      	str	r3, [sp, #16]
 800661e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006622:	4829      	ldr	r0, [pc, #164]	@ (80066c8 <_vfiprintf_r+0x220>)
 8006624:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006628:	2206      	movs	r2, #6
 800662a:	f7f9 fdd1 	bl	80001d0 <memchr>
 800662e:	2800      	cmp	r0, #0
 8006630:	d03f      	beq.n	80066b2 <_vfiprintf_r+0x20a>
 8006632:	4b26      	ldr	r3, [pc, #152]	@ (80066cc <_vfiprintf_r+0x224>)
 8006634:	bb1b      	cbnz	r3, 800667e <_vfiprintf_r+0x1d6>
 8006636:	9b03      	ldr	r3, [sp, #12]
 8006638:	3307      	adds	r3, #7
 800663a:	f023 0307 	bic.w	r3, r3, #7
 800663e:	3308      	adds	r3, #8
 8006640:	9303      	str	r3, [sp, #12]
 8006642:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006644:	443b      	add	r3, r7
 8006646:	9309      	str	r3, [sp, #36]	@ 0x24
 8006648:	e76a      	b.n	8006520 <_vfiprintf_r+0x78>
 800664a:	fb0c 3202 	mla	r2, ip, r2, r3
 800664e:	460c      	mov	r4, r1
 8006650:	2001      	movs	r0, #1
 8006652:	e7a8      	b.n	80065a6 <_vfiprintf_r+0xfe>
 8006654:	2300      	movs	r3, #0
 8006656:	3401      	adds	r4, #1
 8006658:	9305      	str	r3, [sp, #20]
 800665a:	4619      	mov	r1, r3
 800665c:	f04f 0c0a 	mov.w	ip, #10
 8006660:	4620      	mov	r0, r4
 8006662:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006666:	3a30      	subs	r2, #48	@ 0x30
 8006668:	2a09      	cmp	r2, #9
 800666a:	d903      	bls.n	8006674 <_vfiprintf_r+0x1cc>
 800666c:	2b00      	cmp	r3, #0
 800666e:	d0c6      	beq.n	80065fe <_vfiprintf_r+0x156>
 8006670:	9105      	str	r1, [sp, #20]
 8006672:	e7c4      	b.n	80065fe <_vfiprintf_r+0x156>
 8006674:	fb0c 2101 	mla	r1, ip, r1, r2
 8006678:	4604      	mov	r4, r0
 800667a:	2301      	movs	r3, #1
 800667c:	e7f0      	b.n	8006660 <_vfiprintf_r+0x1b8>
 800667e:	ab03      	add	r3, sp, #12
 8006680:	9300      	str	r3, [sp, #0]
 8006682:	462a      	mov	r2, r5
 8006684:	4b12      	ldr	r3, [pc, #72]	@ (80066d0 <_vfiprintf_r+0x228>)
 8006686:	a904      	add	r1, sp, #16
 8006688:	4630      	mov	r0, r6
 800668a:	f3af 8000 	nop.w
 800668e:	4607      	mov	r7, r0
 8006690:	1c78      	adds	r0, r7, #1
 8006692:	d1d6      	bne.n	8006642 <_vfiprintf_r+0x19a>
 8006694:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006696:	07d9      	lsls	r1, r3, #31
 8006698:	d405      	bmi.n	80066a6 <_vfiprintf_r+0x1fe>
 800669a:	89ab      	ldrh	r3, [r5, #12]
 800669c:	059a      	lsls	r2, r3, #22
 800669e:	d402      	bmi.n	80066a6 <_vfiprintf_r+0x1fe>
 80066a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80066a2:	f7ff fdd5 	bl	8006250 <__retarget_lock_release_recursive>
 80066a6:	89ab      	ldrh	r3, [r5, #12]
 80066a8:	065b      	lsls	r3, r3, #25
 80066aa:	f53f af1f 	bmi.w	80064ec <_vfiprintf_r+0x44>
 80066ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80066b0:	e71e      	b.n	80064f0 <_vfiprintf_r+0x48>
 80066b2:	ab03      	add	r3, sp, #12
 80066b4:	9300      	str	r3, [sp, #0]
 80066b6:	462a      	mov	r2, r5
 80066b8:	4b05      	ldr	r3, [pc, #20]	@ (80066d0 <_vfiprintf_r+0x228>)
 80066ba:	a904      	add	r1, sp, #16
 80066bc:	4630      	mov	r0, r6
 80066be:	f000 f879 	bl	80067b4 <_printf_i>
 80066c2:	e7e4      	b.n	800668e <_vfiprintf_r+0x1e6>
 80066c4:	08006d28 	.word	0x08006d28
 80066c8:	08006d32 	.word	0x08006d32
 80066cc:	00000000 	.word	0x00000000
 80066d0:	08006483 	.word	0x08006483
 80066d4:	08006d2e 	.word	0x08006d2e

080066d8 <_printf_common>:
 80066d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066dc:	4616      	mov	r6, r2
 80066de:	4698      	mov	r8, r3
 80066e0:	688a      	ldr	r2, [r1, #8]
 80066e2:	690b      	ldr	r3, [r1, #16]
 80066e4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80066e8:	4293      	cmp	r3, r2
 80066ea:	bfb8      	it	lt
 80066ec:	4613      	movlt	r3, r2
 80066ee:	6033      	str	r3, [r6, #0]
 80066f0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80066f4:	4607      	mov	r7, r0
 80066f6:	460c      	mov	r4, r1
 80066f8:	b10a      	cbz	r2, 80066fe <_printf_common+0x26>
 80066fa:	3301      	adds	r3, #1
 80066fc:	6033      	str	r3, [r6, #0]
 80066fe:	6823      	ldr	r3, [r4, #0]
 8006700:	0699      	lsls	r1, r3, #26
 8006702:	bf42      	ittt	mi
 8006704:	6833      	ldrmi	r3, [r6, #0]
 8006706:	3302      	addmi	r3, #2
 8006708:	6033      	strmi	r3, [r6, #0]
 800670a:	6825      	ldr	r5, [r4, #0]
 800670c:	f015 0506 	ands.w	r5, r5, #6
 8006710:	d106      	bne.n	8006720 <_printf_common+0x48>
 8006712:	f104 0a19 	add.w	sl, r4, #25
 8006716:	68e3      	ldr	r3, [r4, #12]
 8006718:	6832      	ldr	r2, [r6, #0]
 800671a:	1a9b      	subs	r3, r3, r2
 800671c:	42ab      	cmp	r3, r5
 800671e:	dc26      	bgt.n	800676e <_printf_common+0x96>
 8006720:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006724:	6822      	ldr	r2, [r4, #0]
 8006726:	3b00      	subs	r3, #0
 8006728:	bf18      	it	ne
 800672a:	2301      	movne	r3, #1
 800672c:	0692      	lsls	r2, r2, #26
 800672e:	d42b      	bmi.n	8006788 <_printf_common+0xb0>
 8006730:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006734:	4641      	mov	r1, r8
 8006736:	4638      	mov	r0, r7
 8006738:	47c8      	blx	r9
 800673a:	3001      	adds	r0, #1
 800673c:	d01e      	beq.n	800677c <_printf_common+0xa4>
 800673e:	6823      	ldr	r3, [r4, #0]
 8006740:	6922      	ldr	r2, [r4, #16]
 8006742:	f003 0306 	and.w	r3, r3, #6
 8006746:	2b04      	cmp	r3, #4
 8006748:	bf02      	ittt	eq
 800674a:	68e5      	ldreq	r5, [r4, #12]
 800674c:	6833      	ldreq	r3, [r6, #0]
 800674e:	1aed      	subeq	r5, r5, r3
 8006750:	68a3      	ldr	r3, [r4, #8]
 8006752:	bf0c      	ite	eq
 8006754:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006758:	2500      	movne	r5, #0
 800675a:	4293      	cmp	r3, r2
 800675c:	bfc4      	itt	gt
 800675e:	1a9b      	subgt	r3, r3, r2
 8006760:	18ed      	addgt	r5, r5, r3
 8006762:	2600      	movs	r6, #0
 8006764:	341a      	adds	r4, #26
 8006766:	42b5      	cmp	r5, r6
 8006768:	d11a      	bne.n	80067a0 <_printf_common+0xc8>
 800676a:	2000      	movs	r0, #0
 800676c:	e008      	b.n	8006780 <_printf_common+0xa8>
 800676e:	2301      	movs	r3, #1
 8006770:	4652      	mov	r2, sl
 8006772:	4641      	mov	r1, r8
 8006774:	4638      	mov	r0, r7
 8006776:	47c8      	blx	r9
 8006778:	3001      	adds	r0, #1
 800677a:	d103      	bne.n	8006784 <_printf_common+0xac>
 800677c:	f04f 30ff 	mov.w	r0, #4294967295
 8006780:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006784:	3501      	adds	r5, #1
 8006786:	e7c6      	b.n	8006716 <_printf_common+0x3e>
 8006788:	18e1      	adds	r1, r4, r3
 800678a:	1c5a      	adds	r2, r3, #1
 800678c:	2030      	movs	r0, #48	@ 0x30
 800678e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006792:	4422      	add	r2, r4
 8006794:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006798:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800679c:	3302      	adds	r3, #2
 800679e:	e7c7      	b.n	8006730 <_printf_common+0x58>
 80067a0:	2301      	movs	r3, #1
 80067a2:	4622      	mov	r2, r4
 80067a4:	4641      	mov	r1, r8
 80067a6:	4638      	mov	r0, r7
 80067a8:	47c8      	blx	r9
 80067aa:	3001      	adds	r0, #1
 80067ac:	d0e6      	beq.n	800677c <_printf_common+0xa4>
 80067ae:	3601      	adds	r6, #1
 80067b0:	e7d9      	b.n	8006766 <_printf_common+0x8e>
	...

080067b4 <_printf_i>:
 80067b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80067b8:	7e0f      	ldrb	r7, [r1, #24]
 80067ba:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80067bc:	2f78      	cmp	r7, #120	@ 0x78
 80067be:	4691      	mov	r9, r2
 80067c0:	4680      	mov	r8, r0
 80067c2:	460c      	mov	r4, r1
 80067c4:	469a      	mov	sl, r3
 80067c6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80067ca:	d807      	bhi.n	80067dc <_printf_i+0x28>
 80067cc:	2f62      	cmp	r7, #98	@ 0x62
 80067ce:	d80a      	bhi.n	80067e6 <_printf_i+0x32>
 80067d0:	2f00      	cmp	r7, #0
 80067d2:	f000 80d2 	beq.w	800697a <_printf_i+0x1c6>
 80067d6:	2f58      	cmp	r7, #88	@ 0x58
 80067d8:	f000 80b9 	beq.w	800694e <_printf_i+0x19a>
 80067dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80067e0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80067e4:	e03a      	b.n	800685c <_printf_i+0xa8>
 80067e6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80067ea:	2b15      	cmp	r3, #21
 80067ec:	d8f6      	bhi.n	80067dc <_printf_i+0x28>
 80067ee:	a101      	add	r1, pc, #4	@ (adr r1, 80067f4 <_printf_i+0x40>)
 80067f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80067f4:	0800684d 	.word	0x0800684d
 80067f8:	08006861 	.word	0x08006861
 80067fc:	080067dd 	.word	0x080067dd
 8006800:	080067dd 	.word	0x080067dd
 8006804:	080067dd 	.word	0x080067dd
 8006808:	080067dd 	.word	0x080067dd
 800680c:	08006861 	.word	0x08006861
 8006810:	080067dd 	.word	0x080067dd
 8006814:	080067dd 	.word	0x080067dd
 8006818:	080067dd 	.word	0x080067dd
 800681c:	080067dd 	.word	0x080067dd
 8006820:	08006961 	.word	0x08006961
 8006824:	0800688b 	.word	0x0800688b
 8006828:	0800691b 	.word	0x0800691b
 800682c:	080067dd 	.word	0x080067dd
 8006830:	080067dd 	.word	0x080067dd
 8006834:	08006983 	.word	0x08006983
 8006838:	080067dd 	.word	0x080067dd
 800683c:	0800688b 	.word	0x0800688b
 8006840:	080067dd 	.word	0x080067dd
 8006844:	080067dd 	.word	0x080067dd
 8006848:	08006923 	.word	0x08006923
 800684c:	6833      	ldr	r3, [r6, #0]
 800684e:	1d1a      	adds	r2, r3, #4
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	6032      	str	r2, [r6, #0]
 8006854:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006858:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800685c:	2301      	movs	r3, #1
 800685e:	e09d      	b.n	800699c <_printf_i+0x1e8>
 8006860:	6833      	ldr	r3, [r6, #0]
 8006862:	6820      	ldr	r0, [r4, #0]
 8006864:	1d19      	adds	r1, r3, #4
 8006866:	6031      	str	r1, [r6, #0]
 8006868:	0606      	lsls	r6, r0, #24
 800686a:	d501      	bpl.n	8006870 <_printf_i+0xbc>
 800686c:	681d      	ldr	r5, [r3, #0]
 800686e:	e003      	b.n	8006878 <_printf_i+0xc4>
 8006870:	0645      	lsls	r5, r0, #25
 8006872:	d5fb      	bpl.n	800686c <_printf_i+0xb8>
 8006874:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006878:	2d00      	cmp	r5, #0
 800687a:	da03      	bge.n	8006884 <_printf_i+0xd0>
 800687c:	232d      	movs	r3, #45	@ 0x2d
 800687e:	426d      	negs	r5, r5
 8006880:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006884:	4859      	ldr	r0, [pc, #356]	@ (80069ec <_printf_i+0x238>)
 8006886:	230a      	movs	r3, #10
 8006888:	e011      	b.n	80068ae <_printf_i+0xfa>
 800688a:	6821      	ldr	r1, [r4, #0]
 800688c:	6833      	ldr	r3, [r6, #0]
 800688e:	0608      	lsls	r0, r1, #24
 8006890:	f853 5b04 	ldr.w	r5, [r3], #4
 8006894:	d402      	bmi.n	800689c <_printf_i+0xe8>
 8006896:	0649      	lsls	r1, r1, #25
 8006898:	bf48      	it	mi
 800689a:	b2ad      	uxthmi	r5, r5
 800689c:	2f6f      	cmp	r7, #111	@ 0x6f
 800689e:	4853      	ldr	r0, [pc, #332]	@ (80069ec <_printf_i+0x238>)
 80068a0:	6033      	str	r3, [r6, #0]
 80068a2:	bf14      	ite	ne
 80068a4:	230a      	movne	r3, #10
 80068a6:	2308      	moveq	r3, #8
 80068a8:	2100      	movs	r1, #0
 80068aa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80068ae:	6866      	ldr	r6, [r4, #4]
 80068b0:	60a6      	str	r6, [r4, #8]
 80068b2:	2e00      	cmp	r6, #0
 80068b4:	bfa2      	ittt	ge
 80068b6:	6821      	ldrge	r1, [r4, #0]
 80068b8:	f021 0104 	bicge.w	r1, r1, #4
 80068bc:	6021      	strge	r1, [r4, #0]
 80068be:	b90d      	cbnz	r5, 80068c4 <_printf_i+0x110>
 80068c0:	2e00      	cmp	r6, #0
 80068c2:	d04b      	beq.n	800695c <_printf_i+0x1a8>
 80068c4:	4616      	mov	r6, r2
 80068c6:	fbb5 f1f3 	udiv	r1, r5, r3
 80068ca:	fb03 5711 	mls	r7, r3, r1, r5
 80068ce:	5dc7      	ldrb	r7, [r0, r7]
 80068d0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80068d4:	462f      	mov	r7, r5
 80068d6:	42bb      	cmp	r3, r7
 80068d8:	460d      	mov	r5, r1
 80068da:	d9f4      	bls.n	80068c6 <_printf_i+0x112>
 80068dc:	2b08      	cmp	r3, #8
 80068de:	d10b      	bne.n	80068f8 <_printf_i+0x144>
 80068e0:	6823      	ldr	r3, [r4, #0]
 80068e2:	07df      	lsls	r7, r3, #31
 80068e4:	d508      	bpl.n	80068f8 <_printf_i+0x144>
 80068e6:	6923      	ldr	r3, [r4, #16]
 80068e8:	6861      	ldr	r1, [r4, #4]
 80068ea:	4299      	cmp	r1, r3
 80068ec:	bfde      	ittt	le
 80068ee:	2330      	movle	r3, #48	@ 0x30
 80068f0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80068f4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80068f8:	1b92      	subs	r2, r2, r6
 80068fa:	6122      	str	r2, [r4, #16]
 80068fc:	f8cd a000 	str.w	sl, [sp]
 8006900:	464b      	mov	r3, r9
 8006902:	aa03      	add	r2, sp, #12
 8006904:	4621      	mov	r1, r4
 8006906:	4640      	mov	r0, r8
 8006908:	f7ff fee6 	bl	80066d8 <_printf_common>
 800690c:	3001      	adds	r0, #1
 800690e:	d14a      	bne.n	80069a6 <_printf_i+0x1f2>
 8006910:	f04f 30ff 	mov.w	r0, #4294967295
 8006914:	b004      	add	sp, #16
 8006916:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800691a:	6823      	ldr	r3, [r4, #0]
 800691c:	f043 0320 	orr.w	r3, r3, #32
 8006920:	6023      	str	r3, [r4, #0]
 8006922:	4833      	ldr	r0, [pc, #204]	@ (80069f0 <_printf_i+0x23c>)
 8006924:	2778      	movs	r7, #120	@ 0x78
 8006926:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800692a:	6823      	ldr	r3, [r4, #0]
 800692c:	6831      	ldr	r1, [r6, #0]
 800692e:	061f      	lsls	r7, r3, #24
 8006930:	f851 5b04 	ldr.w	r5, [r1], #4
 8006934:	d402      	bmi.n	800693c <_printf_i+0x188>
 8006936:	065f      	lsls	r7, r3, #25
 8006938:	bf48      	it	mi
 800693a:	b2ad      	uxthmi	r5, r5
 800693c:	6031      	str	r1, [r6, #0]
 800693e:	07d9      	lsls	r1, r3, #31
 8006940:	bf44      	itt	mi
 8006942:	f043 0320 	orrmi.w	r3, r3, #32
 8006946:	6023      	strmi	r3, [r4, #0]
 8006948:	b11d      	cbz	r5, 8006952 <_printf_i+0x19e>
 800694a:	2310      	movs	r3, #16
 800694c:	e7ac      	b.n	80068a8 <_printf_i+0xf4>
 800694e:	4827      	ldr	r0, [pc, #156]	@ (80069ec <_printf_i+0x238>)
 8006950:	e7e9      	b.n	8006926 <_printf_i+0x172>
 8006952:	6823      	ldr	r3, [r4, #0]
 8006954:	f023 0320 	bic.w	r3, r3, #32
 8006958:	6023      	str	r3, [r4, #0]
 800695a:	e7f6      	b.n	800694a <_printf_i+0x196>
 800695c:	4616      	mov	r6, r2
 800695e:	e7bd      	b.n	80068dc <_printf_i+0x128>
 8006960:	6833      	ldr	r3, [r6, #0]
 8006962:	6825      	ldr	r5, [r4, #0]
 8006964:	6961      	ldr	r1, [r4, #20]
 8006966:	1d18      	adds	r0, r3, #4
 8006968:	6030      	str	r0, [r6, #0]
 800696a:	062e      	lsls	r6, r5, #24
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	d501      	bpl.n	8006974 <_printf_i+0x1c0>
 8006970:	6019      	str	r1, [r3, #0]
 8006972:	e002      	b.n	800697a <_printf_i+0x1c6>
 8006974:	0668      	lsls	r0, r5, #25
 8006976:	d5fb      	bpl.n	8006970 <_printf_i+0x1bc>
 8006978:	8019      	strh	r1, [r3, #0]
 800697a:	2300      	movs	r3, #0
 800697c:	6123      	str	r3, [r4, #16]
 800697e:	4616      	mov	r6, r2
 8006980:	e7bc      	b.n	80068fc <_printf_i+0x148>
 8006982:	6833      	ldr	r3, [r6, #0]
 8006984:	1d1a      	adds	r2, r3, #4
 8006986:	6032      	str	r2, [r6, #0]
 8006988:	681e      	ldr	r6, [r3, #0]
 800698a:	6862      	ldr	r2, [r4, #4]
 800698c:	2100      	movs	r1, #0
 800698e:	4630      	mov	r0, r6
 8006990:	f7f9 fc1e 	bl	80001d0 <memchr>
 8006994:	b108      	cbz	r0, 800699a <_printf_i+0x1e6>
 8006996:	1b80      	subs	r0, r0, r6
 8006998:	6060      	str	r0, [r4, #4]
 800699a:	6863      	ldr	r3, [r4, #4]
 800699c:	6123      	str	r3, [r4, #16]
 800699e:	2300      	movs	r3, #0
 80069a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80069a4:	e7aa      	b.n	80068fc <_printf_i+0x148>
 80069a6:	6923      	ldr	r3, [r4, #16]
 80069a8:	4632      	mov	r2, r6
 80069aa:	4649      	mov	r1, r9
 80069ac:	4640      	mov	r0, r8
 80069ae:	47d0      	blx	sl
 80069b0:	3001      	adds	r0, #1
 80069b2:	d0ad      	beq.n	8006910 <_printf_i+0x15c>
 80069b4:	6823      	ldr	r3, [r4, #0]
 80069b6:	079b      	lsls	r3, r3, #30
 80069b8:	d413      	bmi.n	80069e2 <_printf_i+0x22e>
 80069ba:	68e0      	ldr	r0, [r4, #12]
 80069bc:	9b03      	ldr	r3, [sp, #12]
 80069be:	4298      	cmp	r0, r3
 80069c0:	bfb8      	it	lt
 80069c2:	4618      	movlt	r0, r3
 80069c4:	e7a6      	b.n	8006914 <_printf_i+0x160>
 80069c6:	2301      	movs	r3, #1
 80069c8:	4632      	mov	r2, r6
 80069ca:	4649      	mov	r1, r9
 80069cc:	4640      	mov	r0, r8
 80069ce:	47d0      	blx	sl
 80069d0:	3001      	adds	r0, #1
 80069d2:	d09d      	beq.n	8006910 <_printf_i+0x15c>
 80069d4:	3501      	adds	r5, #1
 80069d6:	68e3      	ldr	r3, [r4, #12]
 80069d8:	9903      	ldr	r1, [sp, #12]
 80069da:	1a5b      	subs	r3, r3, r1
 80069dc:	42ab      	cmp	r3, r5
 80069de:	dcf2      	bgt.n	80069c6 <_printf_i+0x212>
 80069e0:	e7eb      	b.n	80069ba <_printf_i+0x206>
 80069e2:	2500      	movs	r5, #0
 80069e4:	f104 0619 	add.w	r6, r4, #25
 80069e8:	e7f5      	b.n	80069d6 <_printf_i+0x222>
 80069ea:	bf00      	nop
 80069ec:	08006d39 	.word	0x08006d39
 80069f0:	08006d4a 	.word	0x08006d4a

080069f4 <__sflush_r>:
 80069f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80069f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069fc:	0716      	lsls	r6, r2, #28
 80069fe:	4605      	mov	r5, r0
 8006a00:	460c      	mov	r4, r1
 8006a02:	d454      	bmi.n	8006aae <__sflush_r+0xba>
 8006a04:	684b      	ldr	r3, [r1, #4]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	dc02      	bgt.n	8006a10 <__sflush_r+0x1c>
 8006a0a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	dd48      	ble.n	8006aa2 <__sflush_r+0xae>
 8006a10:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006a12:	2e00      	cmp	r6, #0
 8006a14:	d045      	beq.n	8006aa2 <__sflush_r+0xae>
 8006a16:	2300      	movs	r3, #0
 8006a18:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006a1c:	682f      	ldr	r7, [r5, #0]
 8006a1e:	6a21      	ldr	r1, [r4, #32]
 8006a20:	602b      	str	r3, [r5, #0]
 8006a22:	d030      	beq.n	8006a86 <__sflush_r+0x92>
 8006a24:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006a26:	89a3      	ldrh	r3, [r4, #12]
 8006a28:	0759      	lsls	r1, r3, #29
 8006a2a:	d505      	bpl.n	8006a38 <__sflush_r+0x44>
 8006a2c:	6863      	ldr	r3, [r4, #4]
 8006a2e:	1ad2      	subs	r2, r2, r3
 8006a30:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006a32:	b10b      	cbz	r3, 8006a38 <__sflush_r+0x44>
 8006a34:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006a36:	1ad2      	subs	r2, r2, r3
 8006a38:	2300      	movs	r3, #0
 8006a3a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006a3c:	6a21      	ldr	r1, [r4, #32]
 8006a3e:	4628      	mov	r0, r5
 8006a40:	47b0      	blx	r6
 8006a42:	1c43      	adds	r3, r0, #1
 8006a44:	89a3      	ldrh	r3, [r4, #12]
 8006a46:	d106      	bne.n	8006a56 <__sflush_r+0x62>
 8006a48:	6829      	ldr	r1, [r5, #0]
 8006a4a:	291d      	cmp	r1, #29
 8006a4c:	d82b      	bhi.n	8006aa6 <__sflush_r+0xb2>
 8006a4e:	4a2a      	ldr	r2, [pc, #168]	@ (8006af8 <__sflush_r+0x104>)
 8006a50:	410a      	asrs	r2, r1
 8006a52:	07d6      	lsls	r6, r2, #31
 8006a54:	d427      	bmi.n	8006aa6 <__sflush_r+0xb2>
 8006a56:	2200      	movs	r2, #0
 8006a58:	6062      	str	r2, [r4, #4]
 8006a5a:	04d9      	lsls	r1, r3, #19
 8006a5c:	6922      	ldr	r2, [r4, #16]
 8006a5e:	6022      	str	r2, [r4, #0]
 8006a60:	d504      	bpl.n	8006a6c <__sflush_r+0x78>
 8006a62:	1c42      	adds	r2, r0, #1
 8006a64:	d101      	bne.n	8006a6a <__sflush_r+0x76>
 8006a66:	682b      	ldr	r3, [r5, #0]
 8006a68:	b903      	cbnz	r3, 8006a6c <__sflush_r+0x78>
 8006a6a:	6560      	str	r0, [r4, #84]	@ 0x54
 8006a6c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006a6e:	602f      	str	r7, [r5, #0]
 8006a70:	b1b9      	cbz	r1, 8006aa2 <__sflush_r+0xae>
 8006a72:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006a76:	4299      	cmp	r1, r3
 8006a78:	d002      	beq.n	8006a80 <__sflush_r+0x8c>
 8006a7a:	4628      	mov	r0, r5
 8006a7c:	f7ff fbea 	bl	8006254 <_free_r>
 8006a80:	2300      	movs	r3, #0
 8006a82:	6363      	str	r3, [r4, #52]	@ 0x34
 8006a84:	e00d      	b.n	8006aa2 <__sflush_r+0xae>
 8006a86:	2301      	movs	r3, #1
 8006a88:	4628      	mov	r0, r5
 8006a8a:	47b0      	blx	r6
 8006a8c:	4602      	mov	r2, r0
 8006a8e:	1c50      	adds	r0, r2, #1
 8006a90:	d1c9      	bne.n	8006a26 <__sflush_r+0x32>
 8006a92:	682b      	ldr	r3, [r5, #0]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d0c6      	beq.n	8006a26 <__sflush_r+0x32>
 8006a98:	2b1d      	cmp	r3, #29
 8006a9a:	d001      	beq.n	8006aa0 <__sflush_r+0xac>
 8006a9c:	2b16      	cmp	r3, #22
 8006a9e:	d11e      	bne.n	8006ade <__sflush_r+0xea>
 8006aa0:	602f      	str	r7, [r5, #0]
 8006aa2:	2000      	movs	r0, #0
 8006aa4:	e022      	b.n	8006aec <__sflush_r+0xf8>
 8006aa6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006aaa:	b21b      	sxth	r3, r3
 8006aac:	e01b      	b.n	8006ae6 <__sflush_r+0xf2>
 8006aae:	690f      	ldr	r7, [r1, #16]
 8006ab0:	2f00      	cmp	r7, #0
 8006ab2:	d0f6      	beq.n	8006aa2 <__sflush_r+0xae>
 8006ab4:	0793      	lsls	r3, r2, #30
 8006ab6:	680e      	ldr	r6, [r1, #0]
 8006ab8:	bf08      	it	eq
 8006aba:	694b      	ldreq	r3, [r1, #20]
 8006abc:	600f      	str	r7, [r1, #0]
 8006abe:	bf18      	it	ne
 8006ac0:	2300      	movne	r3, #0
 8006ac2:	eba6 0807 	sub.w	r8, r6, r7
 8006ac6:	608b      	str	r3, [r1, #8]
 8006ac8:	f1b8 0f00 	cmp.w	r8, #0
 8006acc:	dde9      	ble.n	8006aa2 <__sflush_r+0xae>
 8006ace:	6a21      	ldr	r1, [r4, #32]
 8006ad0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006ad2:	4643      	mov	r3, r8
 8006ad4:	463a      	mov	r2, r7
 8006ad6:	4628      	mov	r0, r5
 8006ad8:	47b0      	blx	r6
 8006ada:	2800      	cmp	r0, #0
 8006adc:	dc08      	bgt.n	8006af0 <__sflush_r+0xfc>
 8006ade:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ae2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006ae6:	81a3      	strh	r3, [r4, #12]
 8006ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8006aec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006af0:	4407      	add	r7, r0
 8006af2:	eba8 0800 	sub.w	r8, r8, r0
 8006af6:	e7e7      	b.n	8006ac8 <__sflush_r+0xd4>
 8006af8:	dfbffffe 	.word	0xdfbffffe

08006afc <_fflush_r>:
 8006afc:	b538      	push	{r3, r4, r5, lr}
 8006afe:	690b      	ldr	r3, [r1, #16]
 8006b00:	4605      	mov	r5, r0
 8006b02:	460c      	mov	r4, r1
 8006b04:	b913      	cbnz	r3, 8006b0c <_fflush_r+0x10>
 8006b06:	2500      	movs	r5, #0
 8006b08:	4628      	mov	r0, r5
 8006b0a:	bd38      	pop	{r3, r4, r5, pc}
 8006b0c:	b118      	cbz	r0, 8006b16 <_fflush_r+0x1a>
 8006b0e:	6a03      	ldr	r3, [r0, #32]
 8006b10:	b90b      	cbnz	r3, 8006b16 <_fflush_r+0x1a>
 8006b12:	f7ff f8e9 	bl	8005ce8 <__sinit>
 8006b16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d0f3      	beq.n	8006b06 <_fflush_r+0xa>
 8006b1e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006b20:	07d0      	lsls	r0, r2, #31
 8006b22:	d404      	bmi.n	8006b2e <_fflush_r+0x32>
 8006b24:	0599      	lsls	r1, r3, #22
 8006b26:	d402      	bmi.n	8006b2e <_fflush_r+0x32>
 8006b28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006b2a:	f7ff fb90 	bl	800624e <__retarget_lock_acquire_recursive>
 8006b2e:	4628      	mov	r0, r5
 8006b30:	4621      	mov	r1, r4
 8006b32:	f7ff ff5f 	bl	80069f4 <__sflush_r>
 8006b36:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006b38:	07da      	lsls	r2, r3, #31
 8006b3a:	4605      	mov	r5, r0
 8006b3c:	d4e4      	bmi.n	8006b08 <_fflush_r+0xc>
 8006b3e:	89a3      	ldrh	r3, [r4, #12]
 8006b40:	059b      	lsls	r3, r3, #22
 8006b42:	d4e1      	bmi.n	8006b08 <_fflush_r+0xc>
 8006b44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006b46:	f7ff fb83 	bl	8006250 <__retarget_lock_release_recursive>
 8006b4a:	e7dd      	b.n	8006b08 <_fflush_r+0xc>

08006b4c <__swhatbuf_r>:
 8006b4c:	b570      	push	{r4, r5, r6, lr}
 8006b4e:	460c      	mov	r4, r1
 8006b50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b54:	2900      	cmp	r1, #0
 8006b56:	b096      	sub	sp, #88	@ 0x58
 8006b58:	4615      	mov	r5, r2
 8006b5a:	461e      	mov	r6, r3
 8006b5c:	da0d      	bge.n	8006b7a <__swhatbuf_r+0x2e>
 8006b5e:	89a3      	ldrh	r3, [r4, #12]
 8006b60:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006b64:	f04f 0100 	mov.w	r1, #0
 8006b68:	bf14      	ite	ne
 8006b6a:	2340      	movne	r3, #64	@ 0x40
 8006b6c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006b70:	2000      	movs	r0, #0
 8006b72:	6031      	str	r1, [r6, #0]
 8006b74:	602b      	str	r3, [r5, #0]
 8006b76:	b016      	add	sp, #88	@ 0x58
 8006b78:	bd70      	pop	{r4, r5, r6, pc}
 8006b7a:	466a      	mov	r2, sp
 8006b7c:	f000 f848 	bl	8006c10 <_fstat_r>
 8006b80:	2800      	cmp	r0, #0
 8006b82:	dbec      	blt.n	8006b5e <__swhatbuf_r+0x12>
 8006b84:	9901      	ldr	r1, [sp, #4]
 8006b86:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006b8a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006b8e:	4259      	negs	r1, r3
 8006b90:	4159      	adcs	r1, r3
 8006b92:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006b96:	e7eb      	b.n	8006b70 <__swhatbuf_r+0x24>

08006b98 <__smakebuf_r>:
 8006b98:	898b      	ldrh	r3, [r1, #12]
 8006b9a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b9c:	079d      	lsls	r5, r3, #30
 8006b9e:	4606      	mov	r6, r0
 8006ba0:	460c      	mov	r4, r1
 8006ba2:	d507      	bpl.n	8006bb4 <__smakebuf_r+0x1c>
 8006ba4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006ba8:	6023      	str	r3, [r4, #0]
 8006baa:	6123      	str	r3, [r4, #16]
 8006bac:	2301      	movs	r3, #1
 8006bae:	6163      	str	r3, [r4, #20]
 8006bb0:	b003      	add	sp, #12
 8006bb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006bb4:	ab01      	add	r3, sp, #4
 8006bb6:	466a      	mov	r2, sp
 8006bb8:	f7ff ffc8 	bl	8006b4c <__swhatbuf_r>
 8006bbc:	9f00      	ldr	r7, [sp, #0]
 8006bbe:	4605      	mov	r5, r0
 8006bc0:	4639      	mov	r1, r7
 8006bc2:	4630      	mov	r0, r6
 8006bc4:	f7ff fbba 	bl	800633c <_malloc_r>
 8006bc8:	b948      	cbnz	r0, 8006bde <__smakebuf_r+0x46>
 8006bca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006bce:	059a      	lsls	r2, r3, #22
 8006bd0:	d4ee      	bmi.n	8006bb0 <__smakebuf_r+0x18>
 8006bd2:	f023 0303 	bic.w	r3, r3, #3
 8006bd6:	f043 0302 	orr.w	r3, r3, #2
 8006bda:	81a3      	strh	r3, [r4, #12]
 8006bdc:	e7e2      	b.n	8006ba4 <__smakebuf_r+0xc>
 8006bde:	89a3      	ldrh	r3, [r4, #12]
 8006be0:	6020      	str	r0, [r4, #0]
 8006be2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006be6:	81a3      	strh	r3, [r4, #12]
 8006be8:	9b01      	ldr	r3, [sp, #4]
 8006bea:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006bee:	b15b      	cbz	r3, 8006c08 <__smakebuf_r+0x70>
 8006bf0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006bf4:	4630      	mov	r0, r6
 8006bf6:	f000 f81d 	bl	8006c34 <_isatty_r>
 8006bfa:	b128      	cbz	r0, 8006c08 <__smakebuf_r+0x70>
 8006bfc:	89a3      	ldrh	r3, [r4, #12]
 8006bfe:	f023 0303 	bic.w	r3, r3, #3
 8006c02:	f043 0301 	orr.w	r3, r3, #1
 8006c06:	81a3      	strh	r3, [r4, #12]
 8006c08:	89a3      	ldrh	r3, [r4, #12]
 8006c0a:	431d      	orrs	r5, r3
 8006c0c:	81a5      	strh	r5, [r4, #12]
 8006c0e:	e7cf      	b.n	8006bb0 <__smakebuf_r+0x18>

08006c10 <_fstat_r>:
 8006c10:	b538      	push	{r3, r4, r5, lr}
 8006c12:	4d07      	ldr	r5, [pc, #28]	@ (8006c30 <_fstat_r+0x20>)
 8006c14:	2300      	movs	r3, #0
 8006c16:	4604      	mov	r4, r0
 8006c18:	4608      	mov	r0, r1
 8006c1a:	4611      	mov	r1, r2
 8006c1c:	602b      	str	r3, [r5, #0]
 8006c1e:	f7fa fa74 	bl	800110a <_fstat>
 8006c22:	1c43      	adds	r3, r0, #1
 8006c24:	d102      	bne.n	8006c2c <_fstat_r+0x1c>
 8006c26:	682b      	ldr	r3, [r5, #0]
 8006c28:	b103      	cbz	r3, 8006c2c <_fstat_r+0x1c>
 8006c2a:	6023      	str	r3, [r4, #0]
 8006c2c:	bd38      	pop	{r3, r4, r5, pc}
 8006c2e:	bf00      	nop
 8006c30:	200003f0 	.word	0x200003f0

08006c34 <_isatty_r>:
 8006c34:	b538      	push	{r3, r4, r5, lr}
 8006c36:	4d06      	ldr	r5, [pc, #24]	@ (8006c50 <_isatty_r+0x1c>)
 8006c38:	2300      	movs	r3, #0
 8006c3a:	4604      	mov	r4, r0
 8006c3c:	4608      	mov	r0, r1
 8006c3e:	602b      	str	r3, [r5, #0]
 8006c40:	f7fa fa73 	bl	800112a <_isatty>
 8006c44:	1c43      	adds	r3, r0, #1
 8006c46:	d102      	bne.n	8006c4e <_isatty_r+0x1a>
 8006c48:	682b      	ldr	r3, [r5, #0]
 8006c4a:	b103      	cbz	r3, 8006c4e <_isatty_r+0x1a>
 8006c4c:	6023      	str	r3, [r4, #0]
 8006c4e:	bd38      	pop	{r3, r4, r5, pc}
 8006c50:	200003f0 	.word	0x200003f0

08006c54 <_sbrk_r>:
 8006c54:	b538      	push	{r3, r4, r5, lr}
 8006c56:	4d06      	ldr	r5, [pc, #24]	@ (8006c70 <_sbrk_r+0x1c>)
 8006c58:	2300      	movs	r3, #0
 8006c5a:	4604      	mov	r4, r0
 8006c5c:	4608      	mov	r0, r1
 8006c5e:	602b      	str	r3, [r5, #0]
 8006c60:	f7fa fa7c 	bl	800115c <_sbrk>
 8006c64:	1c43      	adds	r3, r0, #1
 8006c66:	d102      	bne.n	8006c6e <_sbrk_r+0x1a>
 8006c68:	682b      	ldr	r3, [r5, #0]
 8006c6a:	b103      	cbz	r3, 8006c6e <_sbrk_r+0x1a>
 8006c6c:	6023      	str	r3, [r4, #0]
 8006c6e:	bd38      	pop	{r3, r4, r5, pc}
 8006c70:	200003f0 	.word	0x200003f0

08006c74 <_init>:
 8006c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c76:	bf00      	nop
 8006c78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c7a:	bc08      	pop	{r3}
 8006c7c:	469e      	mov	lr, r3
 8006c7e:	4770      	bx	lr

08006c80 <_fini>:
 8006c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c82:	bf00      	nop
 8006c84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c86:	bc08      	pop	{r3}
 8006c88:	469e      	mov	lr, r3
 8006c8a:	4770      	bx	lr
