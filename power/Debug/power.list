
power.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000379c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003924  08003924  00004924  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800395c  0800395c  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  0800395c  0800395c  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800395c  0800395c  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800395c  0800395c  0000495c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003960  08003960  00004960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003964  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000500c  2**0
                  CONTENTS
 10 .bss          00000120  2000000c  2000000c  0000500c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000012c  2000012c  0000500c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bba1  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000019ac  00000000  00000000  00010bdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000910  00000000  00000000  00012590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000701  00000000  00000000  00012ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001abae  00000000  00000000  000135a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c726  00000000  00000000  0002e14f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a0f1b  00000000  00000000  0003a875  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000db790  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000024c8  00000000  00000000  000db7d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005d  00000000  00000000  000ddc9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800390c 	.word	0x0800390c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800390c 	.word	0x0800390c

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 fb00 	bl	80007d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f80a 	bl	80001e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f934 	bl	8000440 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001d8:	f000 f902 	bl	80003e0 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80001dc:	f000 f85c 	bl	8000298 <MX_ADC1_Init>
  MX_CAN_Init();
 80001e0:	f000 f8ca 	bl	8000378 <MX_CAN_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001e4:	bf00      	nop
 80001e6:	e7fd      	b.n	80001e4 <main+0x1c>

080001e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b096      	sub	sp, #88	@ 0x58
 80001ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ee:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80001f2:	2228      	movs	r2, #40	@ 0x28
 80001f4:	2100      	movs	r1, #0
 80001f6:	4618      	mov	r0, r3
 80001f8:	f003 fb5b 	bl	80038b2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001fc:	f107 031c 	add.w	r3, r7, #28
 8000200:	2200      	movs	r2, #0
 8000202:	601a      	str	r2, [r3, #0]
 8000204:	605a      	str	r2, [r3, #4]
 8000206:	609a      	str	r2, [r3, #8]
 8000208:	60da      	str	r2, [r3, #12]
 800020a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800020c:	1d3b      	adds	r3, r7, #4
 800020e:	2200      	movs	r2, #0
 8000210:	601a      	str	r2, [r3, #0]
 8000212:	605a      	str	r2, [r3, #4]
 8000214:	609a      	str	r2, [r3, #8]
 8000216:	60da      	str	r2, [r3, #12]
 8000218:	611a      	str	r2, [r3, #16]
 800021a:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800021c:	2302      	movs	r3, #2
 800021e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000220:	2301      	movs	r3, #1
 8000222:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000224:	2310      	movs	r3, #16
 8000226:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000228:	2302      	movs	r3, #2
 800022a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800022c:	2300      	movs	r3, #0
 800022e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000230:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8000234:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000236:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800023a:	4618      	mov	r0, r3
 800023c:	f001 fc16 	bl	8001a6c <HAL_RCC_OscConfig>
 8000240:	4603      	mov	r3, r0
 8000242:	2b00      	cmp	r3, #0
 8000244:	d001      	beq.n	800024a <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000246:	f000 f967 	bl	8000518 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800024a:	230f      	movs	r3, #15
 800024c:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800024e:	2300      	movs	r3, #0
 8000250:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000252:	2300      	movs	r3, #0
 8000254:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000256:	2300      	movs	r3, #0
 8000258:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800025a:	2300      	movs	r3, #0
 800025c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800025e:	f107 031c 	add.w	r3, r7, #28
 8000262:	2100      	movs	r1, #0
 8000264:	4618      	mov	r0, r3
 8000266:	f002 fc3f 	bl	8002ae8 <HAL_RCC_ClockConfig>
 800026a:	4603      	mov	r3, r0
 800026c:	2b00      	cmp	r3, #0
 800026e:	d001      	beq.n	8000274 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000270:	f000 f952 	bl	8000518 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000274:	2380      	movs	r3, #128	@ 0x80
 8000276:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000278:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800027c:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800027e:	1d3b      	adds	r3, r7, #4
 8000280:	4618      	mov	r0, r3
 8000282:	f002 fe51 	bl	8002f28 <HAL_RCCEx_PeriphCLKConfig>
 8000286:	4603      	mov	r3, r0
 8000288:	2b00      	cmp	r3, #0
 800028a:	d001      	beq.n	8000290 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 800028c:	f000 f944 	bl	8000518 <Error_Handler>
  }
}
 8000290:	bf00      	nop
 8000292:	3758      	adds	r7, #88	@ 0x58
 8000294:	46bd      	mov	sp, r7
 8000296:	bd80      	pop	{r7, pc}

08000298 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	b08a      	sub	sp, #40	@ 0x28
 800029c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800029e:	f107 031c 	add.w	r3, r7, #28
 80002a2:	2200      	movs	r2, #0
 80002a4:	601a      	str	r2, [r3, #0]
 80002a6:	605a      	str	r2, [r3, #4]
 80002a8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80002aa:	1d3b      	adds	r3, r7, #4
 80002ac:	2200      	movs	r2, #0
 80002ae:	601a      	str	r2, [r3, #0]
 80002b0:	605a      	str	r2, [r3, #4]
 80002b2:	609a      	str	r2, [r3, #8]
 80002b4:	60da      	str	r2, [r3, #12]
 80002b6:	611a      	str	r2, [r3, #16]
 80002b8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80002ba:	4b2e      	ldr	r3, [pc, #184]	@ (8000374 <MX_ADC1_Init+0xdc>)
 80002bc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80002c0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80002c2:	4b2c      	ldr	r3, [pc, #176]	@ (8000374 <MX_ADC1_Init+0xdc>)
 80002c4:	2200      	movs	r2, #0
 80002c6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80002c8:	4b2a      	ldr	r3, [pc, #168]	@ (8000374 <MX_ADC1_Init+0xdc>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80002ce:	4b29      	ldr	r3, [pc, #164]	@ (8000374 <MX_ADC1_Init+0xdc>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80002d4:	4b27      	ldr	r3, [pc, #156]	@ (8000374 <MX_ADC1_Init+0xdc>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80002da:	4b26      	ldr	r3, [pc, #152]	@ (8000374 <MX_ADC1_Init+0xdc>)
 80002dc:	2200      	movs	r2, #0
 80002de:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80002e2:	4b24      	ldr	r3, [pc, #144]	@ (8000374 <MX_ADC1_Init+0xdc>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80002e8:	4b22      	ldr	r3, [pc, #136]	@ (8000374 <MX_ADC1_Init+0xdc>)
 80002ea:	2201      	movs	r2, #1
 80002ec:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002ee:	4b21      	ldr	r3, [pc, #132]	@ (8000374 <MX_ADC1_Init+0xdc>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80002f4:	4b1f      	ldr	r3, [pc, #124]	@ (8000374 <MX_ADC1_Init+0xdc>)
 80002f6:	2201      	movs	r2, #1
 80002f8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80002fa:	4b1e      	ldr	r3, [pc, #120]	@ (8000374 <MX_ADC1_Init+0xdc>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000302:	4b1c      	ldr	r3, [pc, #112]	@ (8000374 <MX_ADC1_Init+0xdc>)
 8000304:	2204      	movs	r2, #4
 8000306:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000308:	4b1a      	ldr	r3, [pc, #104]	@ (8000374 <MX_ADC1_Init+0xdc>)
 800030a:	2200      	movs	r2, #0
 800030c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800030e:	4b19      	ldr	r3, [pc, #100]	@ (8000374 <MX_ADC1_Init+0xdc>)
 8000310:	2200      	movs	r2, #0
 8000312:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000314:	4817      	ldr	r0, [pc, #92]	@ (8000374 <MX_ADC1_Init+0xdc>)
 8000316:	f000 fac1 	bl	800089c <HAL_ADC_Init>
 800031a:	4603      	mov	r3, r0
 800031c:	2b00      	cmp	r3, #0
 800031e:	d001      	beq.n	8000324 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000320:	f000 f8fa 	bl	8000518 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000324:	2300      	movs	r3, #0
 8000326:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000328:	f107 031c 	add.w	r3, r7, #28
 800032c:	4619      	mov	r1, r3
 800032e:	4811      	ldr	r0, [pc, #68]	@ (8000374 <MX_ADC1_Init+0xdc>)
 8000330:	f000 ff04 	bl	800113c <HAL_ADCEx_MultiModeConfigChannel>
 8000334:	4603      	mov	r3, r0
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800033a:	f000 f8ed 	bl	8000518 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800033e:	230b      	movs	r3, #11
 8000340:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000342:	2301      	movs	r3, #1
 8000344:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000346:	2300      	movs	r3, #0
 8000348:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800034a:	2300      	movs	r3, #0
 800034c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800034e:	2300      	movs	r3, #0
 8000350:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000352:	2300      	movs	r3, #0
 8000354:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000356:	1d3b      	adds	r3, r7, #4
 8000358:	4619      	mov	r1, r3
 800035a:	4806      	ldr	r0, [pc, #24]	@ (8000374 <MX_ADC1_Init+0xdc>)
 800035c:	f000 fc30 	bl	8000bc0 <HAL_ADC_ConfigChannel>
 8000360:	4603      	mov	r3, r0
 8000362:	2b00      	cmp	r3, #0
 8000364:	d001      	beq.n	800036a <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000366:	f000 f8d7 	bl	8000518 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800036a:	bf00      	nop
 800036c:	3728      	adds	r7, #40	@ 0x28
 800036e:	46bd      	mov	sp, r7
 8000370:	bd80      	pop	{r7, pc}
 8000372:	bf00      	nop
 8000374:	20000028 	.word	0x20000028

08000378 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 800037c:	4b16      	ldr	r3, [pc, #88]	@ (80003d8 <MX_CAN_Init+0x60>)
 800037e:	4a17      	ldr	r2, [pc, #92]	@ (80003dc <MX_CAN_Init+0x64>)
 8000380:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8000382:	4b15      	ldr	r3, [pc, #84]	@ (80003d8 <MX_CAN_Init+0x60>)
 8000384:	2210      	movs	r2, #16
 8000386:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000388:	4b13      	ldr	r3, [pc, #76]	@ (80003d8 <MX_CAN_Init+0x60>)
 800038a:	2200      	movs	r2, #0
 800038c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800038e:	4b12      	ldr	r3, [pc, #72]	@ (80003d8 <MX_CAN_Init+0x60>)
 8000390:	2200      	movs	r2, #0
 8000392:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000394:	4b10      	ldr	r3, [pc, #64]	@ (80003d8 <MX_CAN_Init+0x60>)
 8000396:	2200      	movs	r2, #0
 8000398:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 800039a:	4b0f      	ldr	r3, [pc, #60]	@ (80003d8 <MX_CAN_Init+0x60>)
 800039c:	2200      	movs	r2, #0
 800039e:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80003a0:	4b0d      	ldr	r3, [pc, #52]	@ (80003d8 <MX_CAN_Init+0x60>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80003a6:	4b0c      	ldr	r3, [pc, #48]	@ (80003d8 <MX_CAN_Init+0x60>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80003ac:	4b0a      	ldr	r3, [pc, #40]	@ (80003d8 <MX_CAN_Init+0x60>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80003b2:	4b09      	ldr	r3, [pc, #36]	@ (80003d8 <MX_CAN_Init+0x60>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80003b8:	4b07      	ldr	r3, [pc, #28]	@ (80003d8 <MX_CAN_Init+0x60>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80003be:	4b06      	ldr	r3, [pc, #24]	@ (80003d8 <MX_CAN_Init+0x60>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80003c4:	4804      	ldr	r0, [pc, #16]	@ (80003d8 <MX_CAN_Init+0x60>)
 80003c6:	f000 ffe5 	bl	8001394 <HAL_CAN_Init>
 80003ca:	4603      	mov	r3, r0
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d001      	beq.n	80003d4 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 80003d0:	f000 f8a2 	bl	8000518 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80003d4:	bf00      	nop
 80003d6:	bd80      	pop	{r7, pc}
 80003d8:	20000078 	.word	0x20000078
 80003dc:	40006400 	.word	0x40006400

080003e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80003e4:	4b14      	ldr	r3, [pc, #80]	@ (8000438 <MX_USART2_UART_Init+0x58>)
 80003e6:	4a15      	ldr	r2, [pc, #84]	@ (800043c <MX_USART2_UART_Init+0x5c>)
 80003e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80003ea:	4b13      	ldr	r3, [pc, #76]	@ (8000438 <MX_USART2_UART_Init+0x58>)
 80003ec:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 80003f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003f2:	4b11      	ldr	r3, [pc, #68]	@ (8000438 <MX_USART2_UART_Init+0x58>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003f8:	4b0f      	ldr	r3, [pc, #60]	@ (8000438 <MX_USART2_UART_Init+0x58>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000438 <MX_USART2_UART_Init+0x58>)
 8000400:	2200      	movs	r2, #0
 8000402:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000404:	4b0c      	ldr	r3, [pc, #48]	@ (8000438 <MX_USART2_UART_Init+0x58>)
 8000406:	220c      	movs	r2, #12
 8000408:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800040a:	4b0b      	ldr	r3, [pc, #44]	@ (8000438 <MX_USART2_UART_Init+0x58>)
 800040c:	2200      	movs	r2, #0
 800040e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000410:	4b09      	ldr	r3, [pc, #36]	@ (8000438 <MX_USART2_UART_Init+0x58>)
 8000412:	2200      	movs	r2, #0
 8000414:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000416:	4b08      	ldr	r3, [pc, #32]	@ (8000438 <MX_USART2_UART_Init+0x58>)
 8000418:	2200      	movs	r2, #0
 800041a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800041c:	4b06      	ldr	r3, [pc, #24]	@ (8000438 <MX_USART2_UART_Init+0x58>)
 800041e:	2200      	movs	r2, #0
 8000420:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000422:	4805      	ldr	r0, [pc, #20]	@ (8000438 <MX_USART2_UART_Init+0x58>)
 8000424:	f002 fea6 	bl	8003174 <HAL_UART_Init>
 8000428:	4603      	mov	r3, r0
 800042a:	2b00      	cmp	r3, #0
 800042c:	d001      	beq.n	8000432 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800042e:	f000 f873 	bl	8000518 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000432:	bf00      	nop
 8000434:	bd80      	pop	{r7, pc}
 8000436:	bf00      	nop
 8000438:	200000a0 	.word	0x200000a0
 800043c:	40004400 	.word	0x40004400

08000440 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b088      	sub	sp, #32
 8000444:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000446:	f107 030c 	add.w	r3, r7, #12
 800044a:	2200      	movs	r2, #0
 800044c:	601a      	str	r2, [r3, #0]
 800044e:	605a      	str	r2, [r3, #4]
 8000450:	609a      	str	r2, [r3, #8]
 8000452:	60da      	str	r2, [r3, #12]
 8000454:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000456:	4b2e      	ldr	r3, [pc, #184]	@ (8000510 <MX_GPIO_Init+0xd0>)
 8000458:	695b      	ldr	r3, [r3, #20]
 800045a:	4a2d      	ldr	r2, [pc, #180]	@ (8000510 <MX_GPIO_Init+0xd0>)
 800045c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000460:	6153      	str	r3, [r2, #20]
 8000462:	4b2b      	ldr	r3, [pc, #172]	@ (8000510 <MX_GPIO_Init+0xd0>)
 8000464:	695b      	ldr	r3, [r3, #20]
 8000466:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800046a:	60bb      	str	r3, [r7, #8]
 800046c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800046e:	4b28      	ldr	r3, [pc, #160]	@ (8000510 <MX_GPIO_Init+0xd0>)
 8000470:	695b      	ldr	r3, [r3, #20]
 8000472:	4a27      	ldr	r2, [pc, #156]	@ (8000510 <MX_GPIO_Init+0xd0>)
 8000474:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000478:	6153      	str	r3, [r2, #20]
 800047a:	4b25      	ldr	r3, [pc, #148]	@ (8000510 <MX_GPIO_Init+0xd0>)
 800047c:	695b      	ldr	r3, [r3, #20]
 800047e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000482:	607b      	str	r3, [r7, #4]
 8000484:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000486:	4b22      	ldr	r3, [pc, #136]	@ (8000510 <MX_GPIO_Init+0xd0>)
 8000488:	695b      	ldr	r3, [r3, #20]
 800048a:	4a21      	ldr	r2, [pc, #132]	@ (8000510 <MX_GPIO_Init+0xd0>)
 800048c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000490:	6153      	str	r3, [r2, #20]
 8000492:	4b1f      	ldr	r3, [pc, #124]	@ (8000510 <MX_GPIO_Init+0xd0>)
 8000494:	695b      	ldr	r3, [r3, #20]
 8000496:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800049a:	603b      	str	r3, [r7, #0]
 800049c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, state_LED_Pin|emergency_LED_Pin, GPIO_PIN_RESET);
 800049e:	2200      	movs	r2, #0
 80004a0:	21c0      	movs	r1, #192	@ 0xc0
 80004a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004a6:	f001 fac9 	bl	8001a3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, dcdc_Pin|relay_Pin, GPIO_PIN_RESET);
 80004aa:	2200      	movs	r2, #0
 80004ac:	2150      	movs	r1, #80	@ 0x50
 80004ae:	4819      	ldr	r0, [pc, #100]	@ (8000514 <MX_GPIO_Init+0xd4>)
 80004b0:	f001 fac4 	bl	8001a3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : emergency_switch_Pin */
  GPIO_InitStruct.Pin = emergency_switch_Pin;
 80004b4:	2320      	movs	r3, #32
 80004b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004b8:	2300      	movs	r3, #0
 80004ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004bc:	2300      	movs	r3, #0
 80004be:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(emergency_switch_GPIO_Port, &GPIO_InitStruct);
 80004c0:	f107 030c 	add.w	r3, r7, #12
 80004c4:	4619      	mov	r1, r3
 80004c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004ca:	f001 f945 	bl	8001758 <HAL_GPIO_Init>

  /*Configure GPIO pins : state_LED_Pin emergency_LED_Pin */
  GPIO_InitStruct.Pin = state_LED_Pin|emergency_LED_Pin;
 80004ce:	23c0      	movs	r3, #192	@ 0xc0
 80004d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004d2:	2301      	movs	r3, #1
 80004d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d6:	2300      	movs	r3, #0
 80004d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004da:	2300      	movs	r3, #0
 80004dc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004de:	f107 030c 	add.w	r3, r7, #12
 80004e2:	4619      	mov	r1, r3
 80004e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004e8:	f001 f936 	bl	8001758 <HAL_GPIO_Init>

  /*Configure GPIO pins : dcdc_Pin relay_Pin */
  GPIO_InitStruct.Pin = dcdc_Pin|relay_Pin;
 80004ec:	2350      	movs	r3, #80	@ 0x50
 80004ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004f0:	2301      	movs	r3, #1
 80004f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f4:	2300      	movs	r3, #0
 80004f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004f8:	2300      	movs	r3, #0
 80004fa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004fc:	f107 030c 	add.w	r3, r7, #12
 8000500:	4619      	mov	r1, r3
 8000502:	4804      	ldr	r0, [pc, #16]	@ (8000514 <MX_GPIO_Init+0xd4>)
 8000504:	f001 f928 	bl	8001758 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000508:	bf00      	nop
 800050a:	3720      	adds	r7, #32
 800050c:	46bd      	mov	sp, r7
 800050e:	bd80      	pop	{r7, pc}
 8000510:	40021000 	.word	0x40021000
 8000514:	48000400 	.word	0x48000400

08000518 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800051c:	b672      	cpsid	i
}
 800051e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000520:	bf00      	nop
 8000522:	e7fd      	b.n	8000520 <Error_Handler+0x8>

08000524 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000524:	b480      	push	{r7}
 8000526:	b083      	sub	sp, #12
 8000528:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800052a:	4b0f      	ldr	r3, [pc, #60]	@ (8000568 <HAL_MspInit+0x44>)
 800052c:	699b      	ldr	r3, [r3, #24]
 800052e:	4a0e      	ldr	r2, [pc, #56]	@ (8000568 <HAL_MspInit+0x44>)
 8000530:	f043 0301 	orr.w	r3, r3, #1
 8000534:	6193      	str	r3, [r2, #24]
 8000536:	4b0c      	ldr	r3, [pc, #48]	@ (8000568 <HAL_MspInit+0x44>)
 8000538:	699b      	ldr	r3, [r3, #24]
 800053a:	f003 0301 	and.w	r3, r3, #1
 800053e:	607b      	str	r3, [r7, #4]
 8000540:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000542:	4b09      	ldr	r3, [pc, #36]	@ (8000568 <HAL_MspInit+0x44>)
 8000544:	69db      	ldr	r3, [r3, #28]
 8000546:	4a08      	ldr	r2, [pc, #32]	@ (8000568 <HAL_MspInit+0x44>)
 8000548:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800054c:	61d3      	str	r3, [r2, #28]
 800054e:	4b06      	ldr	r3, [pc, #24]	@ (8000568 <HAL_MspInit+0x44>)
 8000550:	69db      	ldr	r3, [r3, #28]
 8000552:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000556:	603b      	str	r3, [r7, #0]
 8000558:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800055a:	bf00      	nop
 800055c:	370c      	adds	r7, #12
 800055e:	46bd      	mov	sp, r7
 8000560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop
 8000568:	40021000 	.word	0x40021000

0800056c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b08a      	sub	sp, #40	@ 0x28
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000574:	f107 0314 	add.w	r3, r7, #20
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	605a      	str	r2, [r3, #4]
 800057e:	609a      	str	r2, [r3, #8]
 8000580:	60da      	str	r2, [r3, #12]
 8000582:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800058c:	d123      	bne.n	80005d6 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800058e:	4b14      	ldr	r3, [pc, #80]	@ (80005e0 <HAL_ADC_MspInit+0x74>)
 8000590:	695b      	ldr	r3, [r3, #20]
 8000592:	4a13      	ldr	r2, [pc, #76]	@ (80005e0 <HAL_ADC_MspInit+0x74>)
 8000594:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000598:	6153      	str	r3, [r2, #20]
 800059a:	4b11      	ldr	r3, [pc, #68]	@ (80005e0 <HAL_ADC_MspInit+0x74>)
 800059c:	695b      	ldr	r3, [r3, #20]
 800059e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005a2:	613b      	str	r3, [r7, #16]
 80005a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005a6:	4b0e      	ldr	r3, [pc, #56]	@ (80005e0 <HAL_ADC_MspInit+0x74>)
 80005a8:	695b      	ldr	r3, [r3, #20]
 80005aa:	4a0d      	ldr	r2, [pc, #52]	@ (80005e0 <HAL_ADC_MspInit+0x74>)
 80005ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80005b0:	6153      	str	r3, [r2, #20]
 80005b2:	4b0b      	ldr	r3, [pc, #44]	@ (80005e0 <HAL_ADC_MspInit+0x74>)
 80005b4:	695b      	ldr	r3, [r3, #20]
 80005b6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80005ba:	60fb      	str	r3, [r7, #12]
 80005bc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN11
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = i_bat_Pin|v_bat_Pin;
 80005be:	2303      	movs	r3, #3
 80005c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005c2:	2303      	movs	r3, #3
 80005c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c6:	2300      	movs	r3, #0
 80005c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005ca:	f107 0314 	add.w	r3, r7, #20
 80005ce:	4619      	mov	r1, r3
 80005d0:	4804      	ldr	r0, [pc, #16]	@ (80005e4 <HAL_ADC_MspInit+0x78>)
 80005d2:	f001 f8c1 	bl	8001758 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80005d6:	bf00      	nop
 80005d8:	3728      	adds	r7, #40	@ 0x28
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	40021000 	.word	0x40021000
 80005e4:	48000400 	.word	0x48000400

080005e8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b08a      	sub	sp, #40	@ 0x28
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f0:	f107 0314 	add.w	r3, r7, #20
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
 80005f8:	605a      	str	r2, [r3, #4]
 80005fa:	609a      	str	r2, [r3, #8]
 80005fc:	60da      	str	r2, [r3, #12]
 80005fe:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a18      	ldr	r2, [pc, #96]	@ (8000668 <HAL_CAN_MspInit+0x80>)
 8000606:	4293      	cmp	r3, r2
 8000608:	d129      	bne.n	800065e <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800060a:	4b18      	ldr	r3, [pc, #96]	@ (800066c <HAL_CAN_MspInit+0x84>)
 800060c:	69db      	ldr	r3, [r3, #28]
 800060e:	4a17      	ldr	r2, [pc, #92]	@ (800066c <HAL_CAN_MspInit+0x84>)
 8000610:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000614:	61d3      	str	r3, [r2, #28]
 8000616:	4b15      	ldr	r3, [pc, #84]	@ (800066c <HAL_CAN_MspInit+0x84>)
 8000618:	69db      	ldr	r3, [r3, #28]
 800061a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800061e:	613b      	str	r3, [r7, #16]
 8000620:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000622:	4b12      	ldr	r3, [pc, #72]	@ (800066c <HAL_CAN_MspInit+0x84>)
 8000624:	695b      	ldr	r3, [r3, #20]
 8000626:	4a11      	ldr	r2, [pc, #68]	@ (800066c <HAL_CAN_MspInit+0x84>)
 8000628:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800062c:	6153      	str	r3, [r2, #20]
 800062e:	4b0f      	ldr	r3, [pc, #60]	@ (800066c <HAL_CAN_MspInit+0x84>)
 8000630:	695b      	ldr	r3, [r3, #20]
 8000632:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000636:	60fb      	str	r3, [r7, #12]
 8000638:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800063a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800063e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000640:	2302      	movs	r3, #2
 8000642:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000644:	2300      	movs	r3, #0
 8000646:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000648:	2303      	movs	r3, #3
 800064a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 800064c:	2309      	movs	r3, #9
 800064e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000650:	f107 0314 	add.w	r3, r7, #20
 8000654:	4619      	mov	r1, r3
 8000656:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800065a:	f001 f87d 	bl	8001758 <HAL_GPIO_Init>

  /* USER CODE END CAN_MspInit 1 */

  }

}
 800065e:	bf00      	nop
 8000660:	3728      	adds	r7, #40	@ 0x28
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	40006400 	.word	0x40006400
 800066c:	40021000 	.word	0x40021000

08000670 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b08a      	sub	sp, #40	@ 0x28
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000678:	f107 0314 	add.w	r3, r7, #20
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	605a      	str	r2, [r3, #4]
 8000682:	609a      	str	r2, [r3, #8]
 8000684:	60da      	str	r2, [r3, #12]
 8000686:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a18      	ldr	r2, [pc, #96]	@ (80006f0 <HAL_UART_MspInit+0x80>)
 800068e:	4293      	cmp	r3, r2
 8000690:	d129      	bne.n	80006e6 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000692:	4b18      	ldr	r3, [pc, #96]	@ (80006f4 <HAL_UART_MspInit+0x84>)
 8000694:	69db      	ldr	r3, [r3, #28]
 8000696:	4a17      	ldr	r2, [pc, #92]	@ (80006f4 <HAL_UART_MspInit+0x84>)
 8000698:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800069c:	61d3      	str	r3, [r2, #28]
 800069e:	4b15      	ldr	r3, [pc, #84]	@ (80006f4 <HAL_UART_MspInit+0x84>)
 80006a0:	69db      	ldr	r3, [r3, #28]
 80006a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80006a6:	613b      	str	r3, [r7, #16]
 80006a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006aa:	4b12      	ldr	r3, [pc, #72]	@ (80006f4 <HAL_UART_MspInit+0x84>)
 80006ac:	695b      	ldr	r3, [r3, #20]
 80006ae:	4a11      	ldr	r2, [pc, #68]	@ (80006f4 <HAL_UART_MspInit+0x84>)
 80006b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006b4:	6153      	str	r3, [r2, #20]
 80006b6:	4b0f      	ldr	r3, [pc, #60]	@ (80006f4 <HAL_UART_MspInit+0x84>)
 80006b8:	695b      	ldr	r3, [r3, #20]
 80006ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80006be:	60fb      	str	r3, [r7, #12]
 80006c0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 80006c2:	f248 0304 	movw	r3, #32772	@ 0x8004
 80006c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006c8:	2302      	movs	r3, #2
 80006ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006cc:	2300      	movs	r3, #0
 80006ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006d0:	2303      	movs	r3, #3
 80006d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80006d4:	2307      	movs	r3, #7
 80006d6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d8:	f107 0314 	add.w	r3, r7, #20
 80006dc:	4619      	mov	r1, r3
 80006de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006e2:	f001 f839 	bl	8001758 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80006e6:	bf00      	nop
 80006e8:	3728      	adds	r7, #40	@ 0x28
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	40004400 	.word	0x40004400
 80006f4:	40021000 	.word	0x40021000

080006f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006fc:	bf00      	nop
 80006fe:	e7fd      	b.n	80006fc <NMI_Handler+0x4>

08000700 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000704:	bf00      	nop
 8000706:	e7fd      	b.n	8000704 <HardFault_Handler+0x4>

08000708 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800070c:	bf00      	nop
 800070e:	e7fd      	b.n	800070c <MemManage_Handler+0x4>

08000710 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000714:	bf00      	nop
 8000716:	e7fd      	b.n	8000714 <BusFault_Handler+0x4>

08000718 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800071c:	bf00      	nop
 800071e:	e7fd      	b.n	800071c <UsageFault_Handler+0x4>

08000720 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000724:	bf00      	nop
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr

0800072e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800072e:	b480      	push	{r7}
 8000730:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000732:	bf00      	nop
 8000734:	46bd      	mov	sp, r7
 8000736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073a:	4770      	bx	lr

0800073c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000740:	bf00      	nop
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr

0800074a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800074a:	b580      	push	{r7, lr}
 800074c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800074e:	f000 f885 	bl	800085c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}
	...

08000758 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800075c:	4b06      	ldr	r3, [pc, #24]	@ (8000778 <SystemInit+0x20>)
 800075e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000762:	4a05      	ldr	r2, [pc, #20]	@ (8000778 <SystemInit+0x20>)
 8000764:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000768:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800076c:	bf00      	nop
 800076e:	46bd      	mov	sp, r7
 8000770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000774:	4770      	bx	lr
 8000776:	bf00      	nop
 8000778:	e000ed00 	.word	0xe000ed00

0800077c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800077c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80007b4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000780:	f7ff ffea 	bl	8000758 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000784:	480c      	ldr	r0, [pc, #48]	@ (80007b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000786:	490d      	ldr	r1, [pc, #52]	@ (80007bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000788:	4a0d      	ldr	r2, [pc, #52]	@ (80007c0 <LoopForever+0xe>)
  movs r3, #0
 800078a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800078c:	e002      	b.n	8000794 <LoopCopyDataInit>

0800078e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800078e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000790:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000792:	3304      	adds	r3, #4

08000794 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000794:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000796:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000798:	d3f9      	bcc.n	800078e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800079a:	4a0a      	ldr	r2, [pc, #40]	@ (80007c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800079c:	4c0a      	ldr	r4, [pc, #40]	@ (80007c8 <LoopForever+0x16>)
  movs r3, #0
 800079e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007a0:	e001      	b.n	80007a6 <LoopFillZerobss>

080007a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007a4:	3204      	adds	r2, #4

080007a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007a8:	d3fb      	bcc.n	80007a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007aa:	f003 f88b 	bl	80038c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80007ae:	f7ff fd0b 	bl	80001c8 <main>

080007b2 <LoopForever>:

LoopForever:
    b LoopForever
 80007b2:	e7fe      	b.n	80007b2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80007b4:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80007b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007bc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80007c0:	08003964 	.word	0x08003964
  ldr r2, =_sbss
 80007c4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80007c8:	2000012c 	.word	0x2000012c

080007cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80007cc:	e7fe      	b.n	80007cc <ADC1_2_IRQHandler>
	...

080007d0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007d4:	4b08      	ldr	r3, [pc, #32]	@ (80007f8 <HAL_Init+0x28>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a07      	ldr	r2, [pc, #28]	@ (80007f8 <HAL_Init+0x28>)
 80007da:	f043 0310 	orr.w	r3, r3, #16
 80007de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007e0:	2003      	movs	r0, #3
 80007e2:	f000 ff85 	bl	80016f0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007e6:	2000      	movs	r0, #0
 80007e8:	f000 f808 	bl	80007fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007ec:	f7ff fe9a 	bl	8000524 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007f0:	2300      	movs	r3, #0
}
 80007f2:	4618      	mov	r0, r3
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	40022000 	.word	0x40022000

080007fc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000804:	4b12      	ldr	r3, [pc, #72]	@ (8000850 <HAL_InitTick+0x54>)
 8000806:	681a      	ldr	r2, [r3, #0]
 8000808:	4b12      	ldr	r3, [pc, #72]	@ (8000854 <HAL_InitTick+0x58>)
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	4619      	mov	r1, r3
 800080e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000812:	fbb3 f3f1 	udiv	r3, r3, r1
 8000816:	fbb2 f3f3 	udiv	r3, r2, r3
 800081a:	4618      	mov	r0, r3
 800081c:	f000 ff8f 	bl	800173e <HAL_SYSTICK_Config>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000826:	2301      	movs	r3, #1
 8000828:	e00e      	b.n	8000848 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	2b0f      	cmp	r3, #15
 800082e:	d80a      	bhi.n	8000846 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000830:	2200      	movs	r2, #0
 8000832:	6879      	ldr	r1, [r7, #4]
 8000834:	f04f 30ff 	mov.w	r0, #4294967295
 8000838:	f000 ff65 	bl	8001706 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800083c:	4a06      	ldr	r2, [pc, #24]	@ (8000858 <HAL_InitTick+0x5c>)
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000842:	2300      	movs	r3, #0
 8000844:	e000      	b.n	8000848 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000846:	2301      	movs	r3, #1
}
 8000848:	4618      	mov	r0, r3
 800084a:	3708      	adds	r7, #8
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	20000000 	.word	0x20000000
 8000854:	20000008 	.word	0x20000008
 8000858:	20000004 	.word	0x20000004

0800085c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000860:	4b06      	ldr	r3, [pc, #24]	@ (800087c <HAL_IncTick+0x20>)
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	461a      	mov	r2, r3
 8000866:	4b06      	ldr	r3, [pc, #24]	@ (8000880 <HAL_IncTick+0x24>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	4413      	add	r3, r2
 800086c:	4a04      	ldr	r2, [pc, #16]	@ (8000880 <HAL_IncTick+0x24>)
 800086e:	6013      	str	r3, [r2, #0]
}
 8000870:	bf00      	nop
 8000872:	46bd      	mov	sp, r7
 8000874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000878:	4770      	bx	lr
 800087a:	bf00      	nop
 800087c:	20000008 	.word	0x20000008
 8000880:	20000128 	.word	0x20000128

08000884 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  return uwTick;  
 8000888:	4b03      	ldr	r3, [pc, #12]	@ (8000898 <HAL_GetTick+0x14>)
 800088a:	681b      	ldr	r3, [r3, #0]
}
 800088c:	4618      	mov	r0, r3
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	20000128 	.word	0x20000128

0800089c <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b09a      	sub	sp, #104	@ 0x68
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80008a4:	2300      	movs	r3, #0
 80008a6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80008aa:	2300      	movs	r3, #0
 80008ac:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 80008ae:	2300      	movs	r3, #0
 80008b0:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d101      	bne.n	80008bc <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80008b8:	2301      	movs	r3, #1
 80008ba:	e172      	b.n	8000ba2 <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	691b      	ldr	r3, [r3, #16]
 80008c0:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008c6:	f003 0310 	and.w	r3, r3, #16
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d176      	bne.n	80009bc <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d152      	bne.n	800097c <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	2200      	movs	r2, #0
 80008da:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	2200      	movs	r2, #0
 80008e0:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	2200      	movs	r2, #0
 80008e6:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	2200      	movs	r2, #0
 80008ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80008f0:	6878      	ldr	r0, [r7, #4]
 80008f2:	f7ff fe3b 	bl	800056c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	689b      	ldr	r3, [r3, #8]
 80008fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000900:	2b00      	cmp	r3, #0
 8000902:	d13b      	bne.n	800097c <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000904:	6878      	ldr	r0, [r7, #4]
 8000906:	f000 fcdf 	bl	80012c8 <ADC_Disable>
 800090a:	4603      	mov	r3, r0
 800090c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000914:	f003 0310 	and.w	r3, r3, #16
 8000918:	2b00      	cmp	r3, #0
 800091a:	d12f      	bne.n	800097c <HAL_ADC_Init+0xe0>
 800091c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000920:	2b00      	cmp	r3, #0
 8000922:	d12b      	bne.n	800097c <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000928:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800092c:	f023 0302 	bic.w	r3, r3, #2
 8000930:	f043 0202 	orr.w	r2, r3, #2
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	689a      	ldr	r2, [r3, #8]
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8000946:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	689a      	ldr	r2, [r3, #8]
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000956:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000958:	4b94      	ldr	r3, [pc, #592]	@ (8000bac <HAL_ADC_Init+0x310>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4a94      	ldr	r2, [pc, #592]	@ (8000bb0 <HAL_ADC_Init+0x314>)
 800095e:	fba2 2303 	umull	r2, r3, r2, r3
 8000962:	0c9a      	lsrs	r2, r3, #18
 8000964:	4613      	mov	r3, r2
 8000966:	009b      	lsls	r3, r3, #2
 8000968:	4413      	add	r3, r2
 800096a:	005b      	lsls	r3, r3, #1
 800096c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800096e:	e002      	b.n	8000976 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000970:	68bb      	ldr	r3, [r7, #8]
 8000972:	3b01      	subs	r3, #1
 8000974:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000976:	68bb      	ldr	r3, [r7, #8]
 8000978:	2b00      	cmp	r3, #0
 800097a:	d1f9      	bne.n	8000970 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	689b      	ldr	r3, [r3, #8]
 8000982:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000986:	2b00      	cmp	r3, #0
 8000988:	d007      	beq.n	800099a <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	689b      	ldr	r3, [r3, #8]
 8000990:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000994:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000998:	d110      	bne.n	80009bc <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800099e:	f023 0312 	bic.w	r3, r3, #18
 80009a2:	f043 0210 	orr.w	r2, r3, #16
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009ae:	f043 0201 	orr.w	r2, r3, #1
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 80009b6:	2301      	movs	r3, #1
 80009b8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009c0:	f003 0310 	and.w	r3, r3, #16
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	f040 80df 	bne.w	8000b88 <HAL_ADC_Init+0x2ec>
 80009ca:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	f040 80da 	bne.w	8000b88 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	689b      	ldr	r3, [r3, #8]
 80009da:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80009de:	2b00      	cmp	r3, #0
 80009e0:	f040 80d2 	bne.w	8000b88 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009e8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80009ec:	f043 0202 	orr.w	r2, r3, #2
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80009f4:	4b6f      	ldr	r3, [pc, #444]	@ (8000bb4 <HAL_ADC_Init+0x318>)
 80009f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000a00:	d102      	bne.n	8000a08 <HAL_ADC_Init+0x16c>
 8000a02:	4b6d      	ldr	r3, [pc, #436]	@ (8000bb8 <HAL_ADC_Init+0x31c>)
 8000a04:	60fb      	str	r3, [r7, #12]
 8000a06:	e002      	b.n	8000a0e <HAL_ADC_Init+0x172>
 8000a08:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000a0c:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	689b      	ldr	r3, [r3, #8]
 8000a14:	f003 0303 	and.w	r3, r3, #3
 8000a18:	2b01      	cmp	r3, #1
 8000a1a:	d108      	bne.n	8000a2e <HAL_ADC_Init+0x192>
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	f003 0301 	and.w	r3, r3, #1
 8000a26:	2b01      	cmp	r3, #1
 8000a28:	d101      	bne.n	8000a2e <HAL_ADC_Init+0x192>
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	e000      	b.n	8000a30 <HAL_ADC_Init+0x194>
 8000a2e:	2300      	movs	r3, #0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d11c      	bne.n	8000a6e <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000a34:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d010      	beq.n	8000a5c <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	689b      	ldr	r3, [r3, #8]
 8000a3e:	f003 0303 	and.w	r3, r3, #3
 8000a42:	2b01      	cmp	r3, #1
 8000a44:	d107      	bne.n	8000a56 <HAL_ADC_Init+0x1ba>
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	f003 0301 	and.w	r3, r3, #1
 8000a4e:	2b01      	cmp	r3, #1
 8000a50:	d101      	bne.n	8000a56 <HAL_ADC_Init+0x1ba>
 8000a52:	2301      	movs	r3, #1
 8000a54:	e000      	b.n	8000a58 <HAL_ADC_Init+0x1bc>
 8000a56:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d108      	bne.n	8000a6e <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000a5c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000a5e:	689b      	ldr	r3, [r3, #8]
 8000a60:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	685b      	ldr	r3, [r3, #4]
 8000a68:	431a      	orrs	r2, r3
 8000a6a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000a6c:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	7e5b      	ldrb	r3, [r3, #25]
 8000a72:	035b      	lsls	r3, r3, #13
 8000a74:	687a      	ldr	r2, [r7, #4]
 8000a76:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8000a78:	2a01      	cmp	r2, #1
 8000a7a:	d002      	beq.n	8000a82 <HAL_ADC_Init+0x1e6>
 8000a7c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000a80:	e000      	b.n	8000a84 <HAL_ADC_Init+0x1e8>
 8000a82:	2200      	movs	r2, #0
 8000a84:	431a      	orrs	r2, r3
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	68db      	ldr	r3, [r3, #12]
 8000a8a:	431a      	orrs	r2, r3
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	689b      	ldr	r3, [r3, #8]
 8000a90:	4313      	orrs	r3, r2
 8000a92:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000a94:	4313      	orrs	r3, r2
 8000a96:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a9e:	2b01      	cmp	r3, #1
 8000aa0:	d11b      	bne.n	8000ada <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	7e5b      	ldrb	r3, [r3, #25]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d109      	bne.n	8000abe <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000aae:	3b01      	subs	r3, #1
 8000ab0:	045a      	lsls	r2, r3, #17
 8000ab2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000ab4:	4313      	orrs	r3, r2
 8000ab6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000aba:	663b      	str	r3, [r7, #96]	@ 0x60
 8000abc:	e00d      	b.n	8000ada <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ac2:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8000ac6:	f043 0220 	orr.w	r2, r3, #32
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ad2:	f043 0201 	orr.w	r2, r3, #1
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ade:	2b01      	cmp	r3, #1
 8000ae0:	d007      	beq.n	8000af2 <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000aea:	4313      	orrs	r3, r2
 8000aec:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000aee:	4313      	orrs	r3, r2
 8000af0:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	689b      	ldr	r3, [r3, #8]
 8000af8:	f003 030c 	and.w	r3, r3, #12
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d114      	bne.n	8000b2a <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	68db      	ldr	r3, [r3, #12]
 8000b06:	687a      	ldr	r2, [r7, #4]
 8000b08:	6812      	ldr	r2, [r2, #0]
 8000b0a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000b0e:	f023 0302 	bic.w	r3, r3, #2
 8000b12:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	7e1b      	ldrb	r3, [r3, #24]
 8000b18:	039a      	lsls	r2, r3, #14
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8000b20:	005b      	lsls	r3, r3, #1
 8000b22:	4313      	orrs	r3, r2
 8000b24:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000b26:	4313      	orrs	r3, r2
 8000b28:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	68da      	ldr	r2, [r3, #12]
 8000b30:	4b22      	ldr	r3, [pc, #136]	@ (8000bbc <HAL_ADC_Init+0x320>)
 8000b32:	4013      	ands	r3, r2
 8000b34:	687a      	ldr	r2, [r7, #4]
 8000b36:	6812      	ldr	r2, [r2, #0]
 8000b38:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8000b3a:	430b      	orrs	r3, r1
 8000b3c:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	691b      	ldr	r3, [r3, #16]
 8000b42:	2b01      	cmp	r3, #1
 8000b44:	d10c      	bne.n	8000b60 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b4c:	f023 010f 	bic.w	r1, r3, #15
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	69db      	ldr	r3, [r3, #28]
 8000b54:	1e5a      	subs	r2, r3, #1
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	430a      	orrs	r2, r1
 8000b5c:	631a      	str	r2, [r3, #48]	@ 0x30
 8000b5e:	e007      	b.n	8000b70 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	f022 020f 	bic.w	r2, r2, #15
 8000b6e:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	2200      	movs	r2, #0
 8000b74:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b7a:	f023 0303 	bic.w	r3, r3, #3
 8000b7e:	f043 0201 	orr.w	r2, r3, #1
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	641a      	str	r2, [r3, #64]	@ 0x40
 8000b86:	e00a      	b.n	8000b9e <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b8c:	f023 0312 	bic.w	r3, r3, #18
 8000b90:	f043 0210 	orr.w	r2, r3, #16
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8000b98:	2301      	movs	r3, #1
 8000b9a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8000b9e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	3768      	adds	r7, #104	@ 0x68
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	20000000 	.word	0x20000000
 8000bb0:	431bde83 	.word	0x431bde83
 8000bb4:	50000300 	.word	0x50000300
 8000bb8:	50000100 	.word	0x50000100
 8000bbc:	fff0c007 	.word	0xfff0c007

08000bc0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b09b      	sub	sp, #108	@ 0x6c
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
 8000bc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000bda:	2b01      	cmp	r3, #1
 8000bdc:	d101      	bne.n	8000be2 <HAL_ADC_ConfigChannel+0x22>
 8000bde:	2302      	movs	r3, #2
 8000be0:	e2a1      	b.n	8001126 <HAL_ADC_ConfigChannel+0x566>
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	2201      	movs	r2, #1
 8000be6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	689b      	ldr	r3, [r3, #8]
 8000bf0:	f003 0304 	and.w	r3, r3, #4
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	f040 8285 	bne.w	8001104 <HAL_ADC_ConfigChannel+0x544>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	685b      	ldr	r3, [r3, #4]
 8000bfe:	2b04      	cmp	r3, #4
 8000c00:	d81c      	bhi.n	8000c3c <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	685a      	ldr	r2, [r3, #4]
 8000c0c:	4613      	mov	r3, r2
 8000c0e:	005b      	lsls	r3, r3, #1
 8000c10:	4413      	add	r3, r2
 8000c12:	005b      	lsls	r3, r3, #1
 8000c14:	461a      	mov	r2, r3
 8000c16:	231f      	movs	r3, #31
 8000c18:	4093      	lsls	r3, r2
 8000c1a:	43db      	mvns	r3, r3
 8000c1c:	4019      	ands	r1, r3
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	6818      	ldr	r0, [r3, #0]
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	685a      	ldr	r2, [r3, #4]
 8000c26:	4613      	mov	r3, r2
 8000c28:	005b      	lsls	r3, r3, #1
 8000c2a:	4413      	add	r3, r2
 8000c2c:	005b      	lsls	r3, r3, #1
 8000c2e:	fa00 f203 	lsl.w	r2, r0, r3
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	430a      	orrs	r2, r1
 8000c38:	631a      	str	r2, [r3, #48]	@ 0x30
 8000c3a:	e063      	b.n	8000d04 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	685b      	ldr	r3, [r3, #4]
 8000c40:	2b09      	cmp	r3, #9
 8000c42:	d81e      	bhi.n	8000c82 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	685a      	ldr	r2, [r3, #4]
 8000c4e:	4613      	mov	r3, r2
 8000c50:	005b      	lsls	r3, r3, #1
 8000c52:	4413      	add	r3, r2
 8000c54:	005b      	lsls	r3, r3, #1
 8000c56:	3b1e      	subs	r3, #30
 8000c58:	221f      	movs	r2, #31
 8000c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5e:	43db      	mvns	r3, r3
 8000c60:	4019      	ands	r1, r3
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	6818      	ldr	r0, [r3, #0]
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	685a      	ldr	r2, [r3, #4]
 8000c6a:	4613      	mov	r3, r2
 8000c6c:	005b      	lsls	r3, r3, #1
 8000c6e:	4413      	add	r3, r2
 8000c70:	005b      	lsls	r3, r3, #1
 8000c72:	3b1e      	subs	r3, #30
 8000c74:	fa00 f203 	lsl.w	r2, r0, r3
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	430a      	orrs	r2, r1
 8000c7e:	635a      	str	r2, [r3, #52]	@ 0x34
 8000c80:	e040      	b.n	8000d04 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	685b      	ldr	r3, [r3, #4]
 8000c86:	2b0e      	cmp	r3, #14
 8000c88:	d81e      	bhi.n	8000cc8 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	685a      	ldr	r2, [r3, #4]
 8000c94:	4613      	mov	r3, r2
 8000c96:	005b      	lsls	r3, r3, #1
 8000c98:	4413      	add	r3, r2
 8000c9a:	005b      	lsls	r3, r3, #1
 8000c9c:	3b3c      	subs	r3, #60	@ 0x3c
 8000c9e:	221f      	movs	r2, #31
 8000ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca4:	43db      	mvns	r3, r3
 8000ca6:	4019      	ands	r1, r3
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	6818      	ldr	r0, [r3, #0]
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	685a      	ldr	r2, [r3, #4]
 8000cb0:	4613      	mov	r3, r2
 8000cb2:	005b      	lsls	r3, r3, #1
 8000cb4:	4413      	add	r3, r2
 8000cb6:	005b      	lsls	r3, r3, #1
 8000cb8:	3b3c      	subs	r3, #60	@ 0x3c
 8000cba:	fa00 f203 	lsl.w	r2, r0, r3
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	430a      	orrs	r2, r1
 8000cc4:	639a      	str	r2, [r3, #56]	@ 0x38
 8000cc6:	e01d      	b.n	8000d04 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	685a      	ldr	r2, [r3, #4]
 8000cd2:	4613      	mov	r3, r2
 8000cd4:	005b      	lsls	r3, r3, #1
 8000cd6:	4413      	add	r3, r2
 8000cd8:	005b      	lsls	r3, r3, #1
 8000cda:	3b5a      	subs	r3, #90	@ 0x5a
 8000cdc:	221f      	movs	r2, #31
 8000cde:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce2:	43db      	mvns	r3, r3
 8000ce4:	4019      	ands	r1, r3
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	6818      	ldr	r0, [r3, #0]
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	685a      	ldr	r2, [r3, #4]
 8000cee:	4613      	mov	r3, r2
 8000cf0:	005b      	lsls	r3, r3, #1
 8000cf2:	4413      	add	r3, r2
 8000cf4:	005b      	lsls	r3, r3, #1
 8000cf6:	3b5a      	subs	r3, #90	@ 0x5a
 8000cf8:	fa00 f203 	lsl.w	r2, r0, r3
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	430a      	orrs	r2, r1
 8000d02:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	689b      	ldr	r3, [r3, #8]
 8000d0a:	f003 030c 	and.w	r3, r3, #12
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	f040 80e5 	bne.w	8000ede <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	2b09      	cmp	r3, #9
 8000d1a:	d91c      	bls.n	8000d56 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	6999      	ldr	r1, [r3, #24]
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	681a      	ldr	r2, [r3, #0]
 8000d26:	4613      	mov	r3, r2
 8000d28:	005b      	lsls	r3, r3, #1
 8000d2a:	4413      	add	r3, r2
 8000d2c:	3b1e      	subs	r3, #30
 8000d2e:	2207      	movs	r2, #7
 8000d30:	fa02 f303 	lsl.w	r3, r2, r3
 8000d34:	43db      	mvns	r3, r3
 8000d36:	4019      	ands	r1, r3
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	6898      	ldr	r0, [r3, #8]
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	681a      	ldr	r2, [r3, #0]
 8000d40:	4613      	mov	r3, r2
 8000d42:	005b      	lsls	r3, r3, #1
 8000d44:	4413      	add	r3, r2
 8000d46:	3b1e      	subs	r3, #30
 8000d48:	fa00 f203 	lsl.w	r2, r0, r3
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	430a      	orrs	r2, r1
 8000d52:	619a      	str	r2, [r3, #24]
 8000d54:	e019      	b.n	8000d8a <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	6959      	ldr	r1, [r3, #20]
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	681a      	ldr	r2, [r3, #0]
 8000d60:	4613      	mov	r3, r2
 8000d62:	005b      	lsls	r3, r3, #1
 8000d64:	4413      	add	r3, r2
 8000d66:	2207      	movs	r2, #7
 8000d68:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6c:	43db      	mvns	r3, r3
 8000d6e:	4019      	ands	r1, r3
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	6898      	ldr	r0, [r3, #8]
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	681a      	ldr	r2, [r3, #0]
 8000d78:	4613      	mov	r3, r2
 8000d7a:	005b      	lsls	r3, r3, #1
 8000d7c:	4413      	add	r3, r2
 8000d7e:	fa00 f203 	lsl.w	r2, r0, r3
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	430a      	orrs	r2, r1
 8000d88:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	695a      	ldr	r2, [r3, #20]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	68db      	ldr	r3, [r3, #12]
 8000d94:	08db      	lsrs	r3, r3, #3
 8000d96:	f003 0303 	and.w	r3, r3, #3
 8000d9a:	005b      	lsls	r3, r3, #1
 8000d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000da0:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	691b      	ldr	r3, [r3, #16]
 8000da6:	3b01      	subs	r3, #1
 8000da8:	2b03      	cmp	r3, #3
 8000daa:	d84f      	bhi.n	8000e4c <HAL_ADC_ConfigChannel+0x28c>
 8000dac:	a201      	add	r2, pc, #4	@ (adr r2, 8000db4 <HAL_ADC_ConfigChannel+0x1f4>)
 8000dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000db2:	bf00      	nop
 8000db4:	08000dc5 	.word	0x08000dc5
 8000db8:	08000de7 	.word	0x08000de7
 8000dbc:	08000e09 	.word	0x08000e09
 8000dc0:	08000e2b 	.word	0x08000e2b
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000dca:	4b9c      	ldr	r3, [pc, #624]	@ (800103c <HAL_ADC_ConfigChannel+0x47c>)
 8000dcc:	4013      	ands	r3, r2
 8000dce:	683a      	ldr	r2, [r7, #0]
 8000dd0:	6812      	ldr	r2, [r2, #0]
 8000dd2:	0691      	lsls	r1, r2, #26
 8000dd4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000dd6:	430a      	orrs	r2, r1
 8000dd8:	431a      	orrs	r2, r3
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8000de2:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8000de4:	e07b      	b.n	8000ede <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8000dec:	4b93      	ldr	r3, [pc, #588]	@ (800103c <HAL_ADC_ConfigChannel+0x47c>)
 8000dee:	4013      	ands	r3, r2
 8000df0:	683a      	ldr	r2, [r7, #0]
 8000df2:	6812      	ldr	r2, [r2, #0]
 8000df4:	0691      	lsls	r1, r2, #26
 8000df6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000df8:	430a      	orrs	r2, r1
 8000dfa:	431a      	orrs	r2, r3
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8000e04:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8000e06:	e06a      	b.n	8000ede <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8000e0e:	4b8b      	ldr	r3, [pc, #556]	@ (800103c <HAL_ADC_ConfigChannel+0x47c>)
 8000e10:	4013      	ands	r3, r2
 8000e12:	683a      	ldr	r2, [r7, #0]
 8000e14:	6812      	ldr	r2, [r2, #0]
 8000e16:	0691      	lsls	r1, r2, #26
 8000e18:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000e1a:	430a      	orrs	r2, r1
 8000e1c:	431a      	orrs	r2, r3
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8000e26:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8000e28:	e059      	b.n	8000ede <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8000e30:	4b82      	ldr	r3, [pc, #520]	@ (800103c <HAL_ADC_ConfigChannel+0x47c>)
 8000e32:	4013      	ands	r3, r2
 8000e34:	683a      	ldr	r2, [r7, #0]
 8000e36:	6812      	ldr	r2, [r2, #0]
 8000e38:	0691      	lsls	r1, r2, #26
 8000e3a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000e3c:	430a      	orrs	r2, r1
 8000e3e:	431a      	orrs	r2, r3
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8000e48:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8000e4a:	e048      	b.n	8000ede <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e52:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	069b      	lsls	r3, r3, #26
 8000e5c:	429a      	cmp	r2, r3
 8000e5e:	d107      	bne.n	8000e70 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8000e6e:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8000e76:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	069b      	lsls	r3, r3, #26
 8000e80:	429a      	cmp	r2, r3
 8000e82:	d107      	bne.n	8000e94 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8000e92:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000e9a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	069b      	lsls	r3, r3, #26
 8000ea4:	429a      	cmp	r2, r3
 8000ea6:	d107      	bne.n	8000eb8 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8000eb6:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8000ebe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	069b      	lsls	r3, r3, #26
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	d107      	bne.n	8000edc <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8000eda:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 8000edc:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	689b      	ldr	r3, [r3, #8]
 8000ee4:	f003 0303 	and.w	r3, r3, #3
 8000ee8:	2b01      	cmp	r3, #1
 8000eea:	d108      	bne.n	8000efe <HAL_ADC_ConfigChannel+0x33e>
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f003 0301 	and.w	r3, r3, #1
 8000ef6:	2b01      	cmp	r3, #1
 8000ef8:	d101      	bne.n	8000efe <HAL_ADC_ConfigChannel+0x33e>
 8000efa:	2301      	movs	r3, #1
 8000efc:	e000      	b.n	8000f00 <HAL_ADC_ConfigChannel+0x340>
 8000efe:	2300      	movs	r3, #0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	f040 810a 	bne.w	800111a <HAL_ADC_ConfigChannel+0x55a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	68db      	ldr	r3, [r3, #12]
 8000f0a:	2b01      	cmp	r3, #1
 8000f0c:	d00f      	beq.n	8000f2e <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f20:	43da      	mvns	r2, r3
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	400a      	ands	r2, r1
 8000f28:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8000f2c:	e049      	b.n	8000fc2 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	409a      	lsls	r2, r3
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	430a      	orrs	r2, r1
 8000f44:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	2b09      	cmp	r3, #9
 8000f4e:	d91c      	bls.n	8000f8a <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	6999      	ldr	r1, [r3, #24]
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	005b      	lsls	r3, r3, #1
 8000f5e:	4413      	add	r3, r2
 8000f60:	3b1b      	subs	r3, #27
 8000f62:	2207      	movs	r2, #7
 8000f64:	fa02 f303 	lsl.w	r3, r2, r3
 8000f68:	43db      	mvns	r3, r3
 8000f6a:	4019      	ands	r1, r3
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	6898      	ldr	r0, [r3, #8]
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	4613      	mov	r3, r2
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	4413      	add	r3, r2
 8000f7a:	3b1b      	subs	r3, #27
 8000f7c:	fa00 f203 	lsl.w	r2, r0, r3
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	430a      	orrs	r2, r1
 8000f86:	619a      	str	r2, [r3, #24]
 8000f88:	e01b      	b.n	8000fc2 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	6959      	ldr	r1, [r3, #20]
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	1c5a      	adds	r2, r3, #1
 8000f96:	4613      	mov	r3, r2
 8000f98:	005b      	lsls	r3, r3, #1
 8000f9a:	4413      	add	r3, r2
 8000f9c:	2207      	movs	r2, #7
 8000f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa2:	43db      	mvns	r3, r3
 8000fa4:	4019      	ands	r1, r3
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	6898      	ldr	r0, [r3, #8]
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	1c5a      	adds	r2, r3, #1
 8000fb0:	4613      	mov	r3, r2
 8000fb2:	005b      	lsls	r3, r3, #1
 8000fb4:	4413      	add	r3, r2
 8000fb6:	fa00 f203 	lsl.w	r2, r0, r3
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	430a      	orrs	r2, r1
 8000fc0:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000fc2:	4b1f      	ldr	r3, [pc, #124]	@ (8001040 <HAL_ADC_ConfigChannel+0x480>)
 8000fc4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	2b10      	cmp	r3, #16
 8000fcc:	d105      	bne.n	8000fda <HAL_ADC_ConfigChannel+0x41a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8000fce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000fd0:	689b      	ldr	r3, [r3, #8]
 8000fd2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d015      	beq.n	8001006 <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8000fde:	2b11      	cmp	r3, #17
 8000fe0:	d105      	bne.n	8000fee <HAL_ADC_ConfigChannel+0x42e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8000fe2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000fe4:	689b      	ldr	r3, [r3, #8]
 8000fe6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d00b      	beq.n	8001006 <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8000ff2:	2b12      	cmp	r3, #18
 8000ff4:	f040 8091 	bne.w	800111a <HAL_ADC_ConfigChannel+0x55a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8000ff8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000ffa:	689b      	ldr	r3, [r3, #8]
 8000ffc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001000:	2b00      	cmp	r3, #0
 8001002:	f040 808a 	bne.w	800111a <HAL_ADC_ConfigChannel+0x55a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800100e:	d102      	bne.n	8001016 <HAL_ADC_ConfigChannel+0x456>
 8001010:	4b0c      	ldr	r3, [pc, #48]	@ (8001044 <HAL_ADC_ConfigChannel+0x484>)
 8001012:	60fb      	str	r3, [r7, #12]
 8001014:	e002      	b.n	800101c <HAL_ADC_ConfigChannel+0x45c>
 8001016:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800101a:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	689b      	ldr	r3, [r3, #8]
 8001022:	f003 0303 	and.w	r3, r3, #3
 8001026:	2b01      	cmp	r3, #1
 8001028:	d10e      	bne.n	8001048 <HAL_ADC_ConfigChannel+0x488>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f003 0301 	and.w	r3, r3, #1
 8001034:	2b01      	cmp	r3, #1
 8001036:	d107      	bne.n	8001048 <HAL_ADC_ConfigChannel+0x488>
 8001038:	2301      	movs	r3, #1
 800103a:	e006      	b.n	800104a <HAL_ADC_ConfigChannel+0x48a>
 800103c:	83fff000 	.word	0x83fff000
 8001040:	50000300 	.word	0x50000300
 8001044:	50000100 	.word	0x50000100
 8001048:	2300      	movs	r3, #0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d150      	bne.n	80010f0 <HAL_ADC_ConfigChannel+0x530>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800104e:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001050:	2b00      	cmp	r3, #0
 8001052:	d010      	beq.n	8001076 <HAL_ADC_ConfigChannel+0x4b6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	689b      	ldr	r3, [r3, #8]
 8001058:	f003 0303 	and.w	r3, r3, #3
 800105c:	2b01      	cmp	r3, #1
 800105e:	d107      	bne.n	8001070 <HAL_ADC_ConfigChannel+0x4b0>
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f003 0301 	and.w	r3, r3, #1
 8001068:	2b01      	cmp	r3, #1
 800106a:	d101      	bne.n	8001070 <HAL_ADC_ConfigChannel+0x4b0>
 800106c:	2301      	movs	r3, #1
 800106e:	e000      	b.n	8001072 <HAL_ADC_ConfigChannel+0x4b2>
 8001070:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001072:	2b00      	cmp	r3, #0
 8001074:	d13c      	bne.n	80010f0 <HAL_ADC_ConfigChannel+0x530>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	2b10      	cmp	r3, #16
 800107c:	d11d      	bne.n	80010ba <HAL_ADC_ConfigChannel+0x4fa>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001086:	d118      	bne.n	80010ba <HAL_ADC_ConfigChannel+0x4fa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001088:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800108a:	689b      	ldr	r3, [r3, #8]
 800108c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001090:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001092:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001094:	4b27      	ldr	r3, [pc, #156]	@ (8001134 <HAL_ADC_ConfigChannel+0x574>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a27      	ldr	r2, [pc, #156]	@ (8001138 <HAL_ADC_ConfigChannel+0x578>)
 800109a:	fba2 2303 	umull	r2, r3, r2, r3
 800109e:	0c9a      	lsrs	r2, r3, #18
 80010a0:	4613      	mov	r3, r2
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	4413      	add	r3, r2
 80010a6:	005b      	lsls	r3, r3, #1
 80010a8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80010aa:	e002      	b.n	80010b2 <HAL_ADC_ConfigChannel+0x4f2>
          {
            wait_loop_index--;
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	3b01      	subs	r3, #1
 80010b0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80010b2:	68bb      	ldr	r3, [r7, #8]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d1f9      	bne.n	80010ac <HAL_ADC_ConfigChannel+0x4ec>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80010b8:	e02e      	b.n	8001118 <HAL_ADC_ConfigChannel+0x558>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	2b11      	cmp	r3, #17
 80010c0:	d10b      	bne.n	80010da <HAL_ADC_ConfigChannel+0x51a>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80010ca:	d106      	bne.n	80010da <HAL_ADC_ConfigChannel+0x51a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80010cc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80010ce:	689b      	ldr	r3, [r3, #8]
 80010d0:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 80010d4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80010d6:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80010d8:	e01e      	b.n	8001118 <HAL_ADC_ConfigChannel+0x558>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	2b12      	cmp	r3, #18
 80010e0:	d11a      	bne.n	8001118 <HAL_ADC_ConfigChannel+0x558>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80010e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80010e4:	689b      	ldr	r3, [r3, #8]
 80010e6:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80010ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80010ec:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80010ee:	e013      	b.n	8001118 <HAL_ADC_ConfigChannel+0x558>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010f4:	f043 0220 	orr.w	r2, r3, #32
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 80010fc:	2301      	movs	r3, #1
 80010fe:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8001102:	e00a      	b.n	800111a <HAL_ADC_ConfigChannel+0x55a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001108:	f043 0220 	orr.w	r2, r3, #32
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001110:	2301      	movs	r3, #1
 8001112:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8001116:	e000      	b.n	800111a <HAL_ADC_ConfigChannel+0x55a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001118:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2200      	movs	r2, #0
 800111e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001122:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8001126:	4618      	mov	r0, r3
 8001128:	376c      	adds	r7, #108	@ 0x6c
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	20000000 	.word	0x20000000
 8001138:	431bde83 	.word	0x431bde83

0800113c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 800113c:	b480      	push	{r7}
 800113e:	b099      	sub	sp, #100	@ 0x64
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001146:	2300      	movs	r3, #0
 8001148:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001154:	d102      	bne.n	800115c <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8001156:	4b5a      	ldr	r3, [pc, #360]	@ (80012c0 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8001158:	60bb      	str	r3, [r7, #8]
 800115a:	e002      	b.n	8001162 <HAL_ADCEx_MultiModeConfigChannel+0x26>
 800115c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001160:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d101      	bne.n	800116c <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8001168:	2301      	movs	r3, #1
 800116a:	e0a2      	b.n	80012b2 <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001172:	2b01      	cmp	r3, #1
 8001174:	d101      	bne.n	800117a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001176:	2302      	movs	r3, #2
 8001178:	e09b      	b.n	80012b2 <HAL_ADCEx_MultiModeConfigChannel+0x176>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2201      	movs	r2, #1
 800117e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	689b      	ldr	r3, [r3, #8]
 8001188:	f003 0304 	and.w	r3, r3, #4
 800118c:	2b00      	cmp	r3, #0
 800118e:	d17f      	bne.n	8001290 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	689b      	ldr	r3, [r3, #8]
 8001194:	f003 0304 	and.w	r3, r3, #4
 8001198:	2b00      	cmp	r3, #0
 800119a:	d179      	bne.n	8001290 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800119c:	4b49      	ldr	r3, [pc, #292]	@ (80012c4 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 800119e:	65bb      	str	r3, [r7, #88]	@ 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d040      	beq.n	800122a <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80011a8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80011aa:	689b      	ldr	r3, [r3, #8]
 80011ac:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	6859      	ldr	r1, [r3, #4]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80011ba:	035b      	lsls	r3, r3, #13
 80011bc:	430b      	orrs	r3, r1
 80011be:	431a      	orrs	r2, r3
 80011c0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80011c2:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	689b      	ldr	r3, [r3, #8]
 80011ca:	f003 0303 	and.w	r3, r3, #3
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d108      	bne.n	80011e4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f003 0301 	and.w	r3, r3, #1
 80011dc:	2b01      	cmp	r3, #1
 80011de:	d101      	bne.n	80011e4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80011e0:	2301      	movs	r3, #1
 80011e2:	e000      	b.n	80011e6 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 80011e4:	2300      	movs	r3, #0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d15c      	bne.n	80012a4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	689b      	ldr	r3, [r3, #8]
 80011ee:	f003 0303 	and.w	r3, r3, #3
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d107      	bne.n	8001206 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f003 0301 	and.w	r3, r3, #1
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d101      	bne.n	8001206 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8001202:	2301      	movs	r3, #1
 8001204:	e000      	b.n	8001208 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8001206:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001208:	2b00      	cmp	r3, #0
 800120a:	d14b      	bne.n	80012a4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 800120c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800120e:	689b      	ldr	r3, [r3, #8]
 8001210:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8001214:	f023 030f 	bic.w	r3, r3, #15
 8001218:	683a      	ldr	r2, [r7, #0]
 800121a:	6811      	ldr	r1, [r2, #0]
 800121c:	683a      	ldr	r2, [r7, #0]
 800121e:	6892      	ldr	r2, [r2, #8]
 8001220:	430a      	orrs	r2, r1
 8001222:	431a      	orrs	r2, r3
 8001224:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001226:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001228:	e03c      	b.n	80012a4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800122a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800122c:	689b      	ldr	r3, [r3, #8]
 800122e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001232:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001234:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	f003 0303 	and.w	r3, r3, #3
 8001240:	2b01      	cmp	r3, #1
 8001242:	d108      	bne.n	8001256 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f003 0301 	and.w	r3, r3, #1
 800124e:	2b01      	cmp	r3, #1
 8001250:	d101      	bne.n	8001256 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8001252:	2301      	movs	r3, #1
 8001254:	e000      	b.n	8001258 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8001256:	2300      	movs	r3, #0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d123      	bne.n	80012a4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	689b      	ldr	r3, [r3, #8]
 8001260:	f003 0303 	and.w	r3, r3, #3
 8001264:	2b01      	cmp	r3, #1
 8001266:	d107      	bne.n	8001278 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f003 0301 	and.w	r3, r3, #1
 8001270:	2b01      	cmp	r3, #1
 8001272:	d101      	bne.n	8001278 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8001274:	2301      	movs	r3, #1
 8001276:	e000      	b.n	800127a <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8001278:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800127a:	2b00      	cmp	r3, #0
 800127c:	d112      	bne.n	80012a4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800127e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001280:	689b      	ldr	r3, [r3, #8]
 8001282:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8001286:	f023 030f 	bic.w	r3, r3, #15
 800128a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800128c:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800128e:	e009      	b.n	80012a4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001294:	f043 0220 	orr.w	r2, r3, #32
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 800129c:	2301      	movs	r3, #1
 800129e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80012a2:	e000      	b.n	80012a6 <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80012a4:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2200      	movs	r2, #0
 80012aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80012ae:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
} 
 80012b2:	4618      	mov	r0, r3
 80012b4:	3764      	adds	r7, #100	@ 0x64
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	50000100 	.word	0x50000100
 80012c4:	50000300 	.word	0x50000300

080012c8 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80012d0:	2300      	movs	r3, #0
 80012d2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	f003 0303 	and.w	r3, r3, #3
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d108      	bne.n	80012f4 <ADC_Disable+0x2c>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f003 0301 	and.w	r3, r3, #1
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d101      	bne.n	80012f4 <ADC_Disable+0x2c>
 80012f0:	2301      	movs	r3, #1
 80012f2:	e000      	b.n	80012f6 <ADC_Disable+0x2e>
 80012f4:	2300      	movs	r3, #0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d047      	beq.n	800138a <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	f003 030d 	and.w	r3, r3, #13
 8001304:	2b01      	cmp	r3, #1
 8001306:	d10f      	bne.n	8001328 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	689a      	ldr	r2, [r3, #8]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f042 0202 	orr.w	r2, r2, #2
 8001316:	609a      	str	r2, [r3, #8]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2203      	movs	r2, #3
 800131e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001320:	f7ff fab0 	bl	8000884 <HAL_GetTick>
 8001324:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001326:	e029      	b.n	800137c <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800132c:	f043 0210 	orr.w	r2, r3, #16
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001338:	f043 0201 	orr.w	r2, r3, #1
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 8001340:	2301      	movs	r3, #1
 8001342:	e023      	b.n	800138c <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001344:	f7ff fa9e 	bl	8000884 <HAL_GetTick>
 8001348:	4602      	mov	r2, r0
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	2b02      	cmp	r3, #2
 8001350:	d914      	bls.n	800137c <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	f003 0301 	and.w	r3, r3, #1
 800135c:	2b01      	cmp	r3, #1
 800135e:	d10d      	bne.n	800137c <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001364:	f043 0210 	orr.w	r2, r3, #16
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001370:	f043 0201 	orr.w	r2, r3, #1
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8001378:	2301      	movs	r3, #1
 800137a:	e007      	b.n	800138c <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	f003 0301 	and.w	r3, r3, #1
 8001386:	2b01      	cmp	r3, #1
 8001388:	d0dc      	beq.n	8001344 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800138a:	2300      	movs	r3, #0
}
 800138c:	4618      	mov	r0, r3
 800138e:	3710      	adds	r7, #16
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}

08001394 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d101      	bne.n	80013a6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
 80013a4:	e0ed      	b.n	8001582 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d102      	bne.n	80013b8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	f7ff f918 	bl	80005e8 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f042 0201 	orr.w	r2, r2, #1
 80013c6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013c8:	f7ff fa5c 	bl	8000884 <HAL_GetTick>
 80013cc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80013ce:	e012      	b.n	80013f6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80013d0:	f7ff fa58 	bl	8000884 <HAL_GetTick>
 80013d4:	4602      	mov	r2, r0
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	2b0a      	cmp	r3, #10
 80013dc:	d90b      	bls.n	80013f6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013e2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2205      	movs	r2, #5
 80013ee:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e0c5      	b.n	8001582 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f003 0301 	and.w	r3, r3, #1
 8001400:	2b00      	cmp	r3, #0
 8001402:	d0e5      	beq.n	80013d0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f022 0202 	bic.w	r2, r2, #2
 8001412:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001414:	f7ff fa36 	bl	8000884 <HAL_GetTick>
 8001418:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800141a:	e012      	b.n	8001442 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800141c:	f7ff fa32 	bl	8000884 <HAL_GetTick>
 8001420:	4602      	mov	r2, r0
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	2b0a      	cmp	r3, #10
 8001428:	d90b      	bls.n	8001442 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800142e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2205      	movs	r2, #5
 800143a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	e09f      	b.n	8001582 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f003 0302 	and.w	r3, r3, #2
 800144c:	2b00      	cmp	r3, #0
 800144e:	d1e5      	bne.n	800141c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	7e1b      	ldrb	r3, [r3, #24]
 8001454:	2b01      	cmp	r3, #1
 8001456:	d108      	bne.n	800146a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	e007      	b.n	800147a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001478:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	7e5b      	ldrb	r3, [r3, #25]
 800147e:	2b01      	cmp	r3, #1
 8001480:	d108      	bne.n	8001494 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001490:	601a      	str	r2, [r3, #0]
 8001492:	e007      	b.n	80014a4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80014a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	7e9b      	ldrb	r3, [r3, #26]
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d108      	bne.n	80014be <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f042 0220 	orr.w	r2, r2, #32
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	e007      	b.n	80014ce <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f022 0220 	bic.w	r2, r2, #32
 80014cc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	7edb      	ldrb	r3, [r3, #27]
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d108      	bne.n	80014e8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f022 0210 	bic.w	r2, r2, #16
 80014e4:	601a      	str	r2, [r3, #0]
 80014e6:	e007      	b.n	80014f8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f042 0210 	orr.w	r2, r2, #16
 80014f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	7f1b      	ldrb	r3, [r3, #28]
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d108      	bne.n	8001512 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f042 0208 	orr.w	r2, r2, #8
 800150e:	601a      	str	r2, [r3, #0]
 8001510:	e007      	b.n	8001522 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f022 0208 	bic.w	r2, r2, #8
 8001520:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	7f5b      	ldrb	r3, [r3, #29]
 8001526:	2b01      	cmp	r3, #1
 8001528:	d108      	bne.n	800153c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f042 0204 	orr.w	r2, r2, #4
 8001538:	601a      	str	r2, [r3, #0]
 800153a:	e007      	b.n	800154c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f022 0204 	bic.w	r2, r2, #4
 800154a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	689a      	ldr	r2, [r3, #8]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	68db      	ldr	r3, [r3, #12]
 8001554:	431a      	orrs	r2, r3
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	691b      	ldr	r3, [r3, #16]
 800155a:	431a      	orrs	r2, r3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	695b      	ldr	r3, [r3, #20]
 8001560:	ea42 0103 	orr.w	r1, r2, r3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	1e5a      	subs	r2, r3, #1
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	430a      	orrs	r2, r1
 8001570:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2200      	movs	r2, #0
 8001576:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2201      	movs	r2, #1
 800157c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001580:	2300      	movs	r3, #0
}
 8001582:	4618      	mov	r0, r3
 8001584:	3710      	adds	r7, #16
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
	...

0800158c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800158c:	b480      	push	{r7}
 800158e:	b085      	sub	sp, #20
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	f003 0307 	and.w	r3, r3, #7
 800159a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800159c:	4b0c      	ldr	r3, [pc, #48]	@ (80015d0 <__NVIC_SetPriorityGrouping+0x44>)
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015a2:	68ba      	ldr	r2, [r7, #8]
 80015a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015a8:	4013      	ands	r3, r2
 80015aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80015b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015be:	4a04      	ldr	r2, [pc, #16]	@ (80015d0 <__NVIC_SetPriorityGrouping+0x44>)
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	60d3      	str	r3, [r2, #12]
}
 80015c4:	bf00      	nop
 80015c6:	3714      	adds	r7, #20
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr
 80015d0:	e000ed00 	.word	0xe000ed00

080015d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015d8:	4b04      	ldr	r3, [pc, #16]	@ (80015ec <__NVIC_GetPriorityGrouping+0x18>)
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	0a1b      	lsrs	r3, r3, #8
 80015de:	f003 0307 	and.w	r3, r3, #7
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr
 80015ec:	e000ed00 	.word	0xe000ed00

080015f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	4603      	mov	r3, r0
 80015f8:	6039      	str	r1, [r7, #0]
 80015fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001600:	2b00      	cmp	r3, #0
 8001602:	db0a      	blt.n	800161a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	b2da      	uxtb	r2, r3
 8001608:	490c      	ldr	r1, [pc, #48]	@ (800163c <__NVIC_SetPriority+0x4c>)
 800160a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800160e:	0112      	lsls	r2, r2, #4
 8001610:	b2d2      	uxtb	r2, r2
 8001612:	440b      	add	r3, r1
 8001614:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001618:	e00a      	b.n	8001630 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	b2da      	uxtb	r2, r3
 800161e:	4908      	ldr	r1, [pc, #32]	@ (8001640 <__NVIC_SetPriority+0x50>)
 8001620:	79fb      	ldrb	r3, [r7, #7]
 8001622:	f003 030f 	and.w	r3, r3, #15
 8001626:	3b04      	subs	r3, #4
 8001628:	0112      	lsls	r2, r2, #4
 800162a:	b2d2      	uxtb	r2, r2
 800162c:	440b      	add	r3, r1
 800162e:	761a      	strb	r2, [r3, #24]
}
 8001630:	bf00      	nop
 8001632:	370c      	adds	r7, #12
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr
 800163c:	e000e100 	.word	0xe000e100
 8001640:	e000ed00 	.word	0xe000ed00

08001644 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001644:	b480      	push	{r7}
 8001646:	b089      	sub	sp, #36	@ 0x24
 8001648:	af00      	add	r7, sp, #0
 800164a:	60f8      	str	r0, [r7, #12]
 800164c:	60b9      	str	r1, [r7, #8]
 800164e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	f003 0307 	and.w	r3, r3, #7
 8001656:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	f1c3 0307 	rsb	r3, r3, #7
 800165e:	2b04      	cmp	r3, #4
 8001660:	bf28      	it	cs
 8001662:	2304      	movcs	r3, #4
 8001664:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	3304      	adds	r3, #4
 800166a:	2b06      	cmp	r3, #6
 800166c:	d902      	bls.n	8001674 <NVIC_EncodePriority+0x30>
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	3b03      	subs	r3, #3
 8001672:	e000      	b.n	8001676 <NVIC_EncodePriority+0x32>
 8001674:	2300      	movs	r3, #0
 8001676:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001678:	f04f 32ff 	mov.w	r2, #4294967295
 800167c:	69bb      	ldr	r3, [r7, #24]
 800167e:	fa02 f303 	lsl.w	r3, r2, r3
 8001682:	43da      	mvns	r2, r3
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	401a      	ands	r2, r3
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800168c:	f04f 31ff 	mov.w	r1, #4294967295
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	fa01 f303 	lsl.w	r3, r1, r3
 8001696:	43d9      	mvns	r1, r3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800169c:	4313      	orrs	r3, r2
         );
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3724      	adds	r7, #36	@ 0x24
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
	...

080016ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	3b01      	subs	r3, #1
 80016b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80016bc:	d301      	bcc.n	80016c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016be:	2301      	movs	r3, #1
 80016c0:	e00f      	b.n	80016e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016c2:	4a0a      	ldr	r2, [pc, #40]	@ (80016ec <SysTick_Config+0x40>)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	3b01      	subs	r3, #1
 80016c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016ca:	210f      	movs	r1, #15
 80016cc:	f04f 30ff 	mov.w	r0, #4294967295
 80016d0:	f7ff ff8e 	bl	80015f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016d4:	4b05      	ldr	r3, [pc, #20]	@ (80016ec <SysTick_Config+0x40>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016da:	4b04      	ldr	r3, [pc, #16]	@ (80016ec <SysTick_Config+0x40>)
 80016dc:	2207      	movs	r2, #7
 80016de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016e0:	2300      	movs	r3, #0
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	e000e010 	.word	0xe000e010

080016f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	f7ff ff47 	bl	800158c <__NVIC_SetPriorityGrouping>
}
 80016fe:	bf00      	nop
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}

08001706 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001706:	b580      	push	{r7, lr}
 8001708:	b086      	sub	sp, #24
 800170a:	af00      	add	r7, sp, #0
 800170c:	4603      	mov	r3, r0
 800170e:	60b9      	str	r1, [r7, #8]
 8001710:	607a      	str	r2, [r7, #4]
 8001712:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001714:	2300      	movs	r3, #0
 8001716:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001718:	f7ff ff5c 	bl	80015d4 <__NVIC_GetPriorityGrouping>
 800171c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800171e:	687a      	ldr	r2, [r7, #4]
 8001720:	68b9      	ldr	r1, [r7, #8]
 8001722:	6978      	ldr	r0, [r7, #20]
 8001724:	f7ff ff8e 	bl	8001644 <NVIC_EncodePriority>
 8001728:	4602      	mov	r2, r0
 800172a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800172e:	4611      	mov	r1, r2
 8001730:	4618      	mov	r0, r3
 8001732:	f7ff ff5d 	bl	80015f0 <__NVIC_SetPriority>
}
 8001736:	bf00      	nop
 8001738:	3718      	adds	r7, #24
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}

0800173e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800173e:	b580      	push	{r7, lr}
 8001740:	b082      	sub	sp, #8
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f7ff ffb0 	bl	80016ac <SysTick_Config>
 800174c:	4603      	mov	r3, r0
}
 800174e:	4618      	mov	r0, r3
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
	...

08001758 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001758:	b480      	push	{r7}
 800175a:	b087      	sub	sp, #28
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001762:	2300      	movs	r3, #0
 8001764:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001766:	e14e      	b.n	8001a06 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	2101      	movs	r1, #1
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	fa01 f303 	lsl.w	r3, r1, r3
 8001774:	4013      	ands	r3, r2
 8001776:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	2b00      	cmp	r3, #0
 800177c:	f000 8140 	beq.w	8001a00 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f003 0303 	and.w	r3, r3, #3
 8001788:	2b01      	cmp	r3, #1
 800178a:	d005      	beq.n	8001798 <HAL_GPIO_Init+0x40>
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f003 0303 	and.w	r3, r3, #3
 8001794:	2b02      	cmp	r3, #2
 8001796:	d130      	bne.n	80017fa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	005b      	lsls	r3, r3, #1
 80017a2:	2203      	movs	r2, #3
 80017a4:	fa02 f303 	lsl.w	r3, r2, r3
 80017a8:	43db      	mvns	r3, r3
 80017aa:	693a      	ldr	r2, [r7, #16]
 80017ac:	4013      	ands	r3, r2
 80017ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	68da      	ldr	r2, [r3, #12]
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	005b      	lsls	r3, r3, #1
 80017b8:	fa02 f303 	lsl.w	r3, r2, r3
 80017bc:	693a      	ldr	r2, [r7, #16]
 80017be:	4313      	orrs	r3, r2
 80017c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	693a      	ldr	r2, [r7, #16]
 80017c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017ce:	2201      	movs	r2, #1
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	fa02 f303 	lsl.w	r3, r2, r3
 80017d6:	43db      	mvns	r3, r3
 80017d8:	693a      	ldr	r2, [r7, #16]
 80017da:	4013      	ands	r3, r2
 80017dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	091b      	lsrs	r3, r3, #4
 80017e4:	f003 0201 	and.w	r2, r3, #1
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	fa02 f303 	lsl.w	r3, r2, r3
 80017ee:	693a      	ldr	r2, [r7, #16]
 80017f0:	4313      	orrs	r3, r2
 80017f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	693a      	ldr	r2, [r7, #16]
 80017f8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	f003 0303 	and.w	r3, r3, #3
 8001802:	2b03      	cmp	r3, #3
 8001804:	d017      	beq.n	8001836 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	68db      	ldr	r3, [r3, #12]
 800180a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	005b      	lsls	r3, r3, #1
 8001810:	2203      	movs	r2, #3
 8001812:	fa02 f303 	lsl.w	r3, r2, r3
 8001816:	43db      	mvns	r3, r3
 8001818:	693a      	ldr	r2, [r7, #16]
 800181a:	4013      	ands	r3, r2
 800181c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	689a      	ldr	r2, [r3, #8]
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	005b      	lsls	r3, r3, #1
 8001826:	fa02 f303 	lsl.w	r3, r2, r3
 800182a:	693a      	ldr	r2, [r7, #16]
 800182c:	4313      	orrs	r3, r2
 800182e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	693a      	ldr	r2, [r7, #16]
 8001834:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	f003 0303 	and.w	r3, r3, #3
 800183e:	2b02      	cmp	r3, #2
 8001840:	d123      	bne.n	800188a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	08da      	lsrs	r2, r3, #3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	3208      	adds	r2, #8
 800184a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800184e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	f003 0307 	and.w	r3, r3, #7
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	220f      	movs	r2, #15
 800185a:	fa02 f303 	lsl.w	r3, r2, r3
 800185e:	43db      	mvns	r3, r3
 8001860:	693a      	ldr	r2, [r7, #16]
 8001862:	4013      	ands	r3, r2
 8001864:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	691a      	ldr	r2, [r3, #16]
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	f003 0307 	and.w	r3, r3, #7
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	fa02 f303 	lsl.w	r3, r2, r3
 8001876:	693a      	ldr	r2, [r7, #16]
 8001878:	4313      	orrs	r3, r2
 800187a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	08da      	lsrs	r2, r3, #3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	3208      	adds	r2, #8
 8001884:	6939      	ldr	r1, [r7, #16]
 8001886:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	005b      	lsls	r3, r3, #1
 8001894:	2203      	movs	r2, #3
 8001896:	fa02 f303 	lsl.w	r3, r2, r3
 800189a:	43db      	mvns	r3, r3
 800189c:	693a      	ldr	r2, [r7, #16]
 800189e:	4013      	ands	r3, r2
 80018a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	f003 0203 	and.w	r2, r3, #3
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	005b      	lsls	r3, r3, #1
 80018ae:	fa02 f303 	lsl.w	r3, r2, r3
 80018b2:	693a      	ldr	r2, [r7, #16]
 80018b4:	4313      	orrs	r3, r2
 80018b6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	693a      	ldr	r2, [r7, #16]
 80018bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	f000 809a 	beq.w	8001a00 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018cc:	4b55      	ldr	r3, [pc, #340]	@ (8001a24 <HAL_GPIO_Init+0x2cc>)
 80018ce:	699b      	ldr	r3, [r3, #24]
 80018d0:	4a54      	ldr	r2, [pc, #336]	@ (8001a24 <HAL_GPIO_Init+0x2cc>)
 80018d2:	f043 0301 	orr.w	r3, r3, #1
 80018d6:	6193      	str	r3, [r2, #24]
 80018d8:	4b52      	ldr	r3, [pc, #328]	@ (8001a24 <HAL_GPIO_Init+0x2cc>)
 80018da:	699b      	ldr	r3, [r3, #24]
 80018dc:	f003 0301 	and.w	r3, r3, #1
 80018e0:	60bb      	str	r3, [r7, #8]
 80018e2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80018e4:	4a50      	ldr	r2, [pc, #320]	@ (8001a28 <HAL_GPIO_Init+0x2d0>)
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	089b      	lsrs	r3, r3, #2
 80018ea:	3302      	adds	r3, #2
 80018ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	f003 0303 	and.w	r3, r3, #3
 80018f8:	009b      	lsls	r3, r3, #2
 80018fa:	220f      	movs	r2, #15
 80018fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001900:	43db      	mvns	r3, r3
 8001902:	693a      	ldr	r2, [r7, #16]
 8001904:	4013      	ands	r3, r2
 8001906:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800190e:	d013      	beq.n	8001938 <HAL_GPIO_Init+0x1e0>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	4a46      	ldr	r2, [pc, #280]	@ (8001a2c <HAL_GPIO_Init+0x2d4>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d00d      	beq.n	8001934 <HAL_GPIO_Init+0x1dc>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	4a45      	ldr	r2, [pc, #276]	@ (8001a30 <HAL_GPIO_Init+0x2d8>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d007      	beq.n	8001930 <HAL_GPIO_Init+0x1d8>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	4a44      	ldr	r2, [pc, #272]	@ (8001a34 <HAL_GPIO_Init+0x2dc>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d101      	bne.n	800192c <HAL_GPIO_Init+0x1d4>
 8001928:	2303      	movs	r3, #3
 800192a:	e006      	b.n	800193a <HAL_GPIO_Init+0x1e2>
 800192c:	2305      	movs	r3, #5
 800192e:	e004      	b.n	800193a <HAL_GPIO_Init+0x1e2>
 8001930:	2302      	movs	r3, #2
 8001932:	e002      	b.n	800193a <HAL_GPIO_Init+0x1e2>
 8001934:	2301      	movs	r3, #1
 8001936:	e000      	b.n	800193a <HAL_GPIO_Init+0x1e2>
 8001938:	2300      	movs	r3, #0
 800193a:	697a      	ldr	r2, [r7, #20]
 800193c:	f002 0203 	and.w	r2, r2, #3
 8001940:	0092      	lsls	r2, r2, #2
 8001942:	4093      	lsls	r3, r2
 8001944:	693a      	ldr	r2, [r7, #16]
 8001946:	4313      	orrs	r3, r2
 8001948:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800194a:	4937      	ldr	r1, [pc, #220]	@ (8001a28 <HAL_GPIO_Init+0x2d0>)
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	089b      	lsrs	r3, r3, #2
 8001950:	3302      	adds	r3, #2
 8001952:	693a      	ldr	r2, [r7, #16]
 8001954:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001958:	4b37      	ldr	r3, [pc, #220]	@ (8001a38 <HAL_GPIO_Init+0x2e0>)
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	43db      	mvns	r3, r3
 8001962:	693a      	ldr	r2, [r7, #16]
 8001964:	4013      	ands	r3, r2
 8001966:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001970:	2b00      	cmp	r3, #0
 8001972:	d003      	beq.n	800197c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001974:	693a      	ldr	r2, [r7, #16]
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	4313      	orrs	r3, r2
 800197a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800197c:	4a2e      	ldr	r2, [pc, #184]	@ (8001a38 <HAL_GPIO_Init+0x2e0>)
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001982:	4b2d      	ldr	r3, [pc, #180]	@ (8001a38 <HAL_GPIO_Init+0x2e0>)
 8001984:	68db      	ldr	r3, [r3, #12]
 8001986:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	43db      	mvns	r3, r3
 800198c:	693a      	ldr	r2, [r7, #16]
 800198e:	4013      	ands	r3, r2
 8001990:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d003      	beq.n	80019a6 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800199e:	693a      	ldr	r2, [r7, #16]
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80019a6:	4a24      	ldr	r2, [pc, #144]	@ (8001a38 <HAL_GPIO_Init+0x2e0>)
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019ac:	4b22      	ldr	r3, [pc, #136]	@ (8001a38 <HAL_GPIO_Init+0x2e0>)
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	43db      	mvns	r3, r3
 80019b6:	693a      	ldr	r2, [r7, #16]
 80019b8:	4013      	ands	r3, r2
 80019ba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d003      	beq.n	80019d0 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80019c8:	693a      	ldr	r2, [r7, #16]
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	4313      	orrs	r3, r2
 80019ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80019d0:	4a19      	ldr	r2, [pc, #100]	@ (8001a38 <HAL_GPIO_Init+0x2e0>)
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019d6:	4b18      	ldr	r3, [pc, #96]	@ (8001a38 <HAL_GPIO_Init+0x2e0>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	43db      	mvns	r3, r3
 80019e0:	693a      	ldr	r2, [r7, #16]
 80019e2:	4013      	ands	r3, r2
 80019e4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d003      	beq.n	80019fa <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80019f2:	693a      	ldr	r2, [r7, #16]
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	4313      	orrs	r3, r2
 80019f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80019fa:	4a0f      	ldr	r2, [pc, #60]	@ (8001a38 <HAL_GPIO_Init+0x2e0>)
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	3301      	adds	r3, #1
 8001a04:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	fa22 f303 	lsr.w	r3, r2, r3
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	f47f aea9 	bne.w	8001768 <HAL_GPIO_Init+0x10>
  }
}
 8001a16:	bf00      	nop
 8001a18:	bf00      	nop
 8001a1a:	371c      	adds	r7, #28
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr
 8001a24:	40021000 	.word	0x40021000
 8001a28:	40010000 	.word	0x40010000
 8001a2c:	48000400 	.word	0x48000400
 8001a30:	48000800 	.word	0x48000800
 8001a34:	48000c00 	.word	0x48000c00
 8001a38:	40010400 	.word	0x40010400

08001a3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
 8001a44:	460b      	mov	r3, r1
 8001a46:	807b      	strh	r3, [r7, #2]
 8001a48:	4613      	mov	r3, r2
 8001a4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a4c:	787b      	ldrb	r3, [r7, #1]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d003      	beq.n	8001a5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a52:	887a      	ldrh	r2, [r7, #2]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a58:	e002      	b.n	8001a60 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a5a:	887a      	ldrh	r2, [r7, #2]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001a60:	bf00      	nop
 8001a62:	370c      	adds	r7, #12
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr

08001a6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a78:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a7c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a82:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d102      	bne.n	8001a92 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	f001 b823 	b.w	8002ad8 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a96:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0301 	and.w	r3, r3, #1
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	f000 817d 	beq.w	8001da2 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001aa8:	4bbc      	ldr	r3, [pc, #752]	@ (8001d9c <HAL_RCC_OscConfig+0x330>)
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f003 030c 	and.w	r3, r3, #12
 8001ab0:	2b04      	cmp	r3, #4
 8001ab2:	d00c      	beq.n	8001ace <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ab4:	4bb9      	ldr	r3, [pc, #740]	@ (8001d9c <HAL_RCC_OscConfig+0x330>)
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f003 030c 	and.w	r3, r3, #12
 8001abc:	2b08      	cmp	r3, #8
 8001abe:	d15c      	bne.n	8001b7a <HAL_RCC_OscConfig+0x10e>
 8001ac0:	4bb6      	ldr	r3, [pc, #728]	@ (8001d9c <HAL_RCC_OscConfig+0x330>)
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ac8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001acc:	d155      	bne.n	8001b7a <HAL_RCC_OscConfig+0x10e>
 8001ace:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ad2:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8001ada:	fa93 f3a3 	rbit	r3, r3
 8001ade:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001ae2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ae6:	fab3 f383 	clz	r3, r3
 8001aea:	b2db      	uxtb	r3, r3
 8001aec:	095b      	lsrs	r3, r3, #5
 8001aee:	b2db      	uxtb	r3, r3
 8001af0:	f043 0301 	orr.w	r3, r3, #1
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	d102      	bne.n	8001b00 <HAL_RCC_OscConfig+0x94>
 8001afa:	4ba8      	ldr	r3, [pc, #672]	@ (8001d9c <HAL_RCC_OscConfig+0x330>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	e015      	b.n	8001b2c <HAL_RCC_OscConfig+0xc0>
 8001b00:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b04:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b08:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8001b0c:	fa93 f3a3 	rbit	r3, r3
 8001b10:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001b14:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b18:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001b1c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8001b20:	fa93 f3a3 	rbit	r3, r3
 8001b24:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8001b28:	4b9c      	ldr	r3, [pc, #624]	@ (8001d9c <HAL_RCC_OscConfig+0x330>)
 8001b2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b2c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001b30:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8001b34:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001b38:	fa92 f2a2 	rbit	r2, r2
 8001b3c:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8001b40:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8001b44:	fab2 f282 	clz	r2, r2
 8001b48:	b2d2      	uxtb	r2, r2
 8001b4a:	f042 0220 	orr.w	r2, r2, #32
 8001b4e:	b2d2      	uxtb	r2, r2
 8001b50:	f002 021f 	and.w	r2, r2, #31
 8001b54:	2101      	movs	r1, #1
 8001b56:	fa01 f202 	lsl.w	r2, r1, r2
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	f000 811f 	beq.w	8001da0 <HAL_RCC_OscConfig+0x334>
 8001b62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b66:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	f040 8116 	bne.w	8001da0 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	f000 bfaf 	b.w	8002ad8 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b7e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b8a:	d106      	bne.n	8001b9a <HAL_RCC_OscConfig+0x12e>
 8001b8c:	4b83      	ldr	r3, [pc, #524]	@ (8001d9c <HAL_RCC_OscConfig+0x330>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a82      	ldr	r2, [pc, #520]	@ (8001d9c <HAL_RCC_OscConfig+0x330>)
 8001b92:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b96:	6013      	str	r3, [r2, #0]
 8001b98:	e036      	b.n	8001c08 <HAL_RCC_OscConfig+0x19c>
 8001b9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b9e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d10c      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x158>
 8001baa:	4b7c      	ldr	r3, [pc, #496]	@ (8001d9c <HAL_RCC_OscConfig+0x330>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a7b      	ldr	r2, [pc, #492]	@ (8001d9c <HAL_RCC_OscConfig+0x330>)
 8001bb0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001bb4:	6013      	str	r3, [r2, #0]
 8001bb6:	4b79      	ldr	r3, [pc, #484]	@ (8001d9c <HAL_RCC_OscConfig+0x330>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a78      	ldr	r2, [pc, #480]	@ (8001d9c <HAL_RCC_OscConfig+0x330>)
 8001bbc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001bc0:	6013      	str	r3, [r2, #0]
 8001bc2:	e021      	b.n	8001c08 <HAL_RCC_OscConfig+0x19c>
 8001bc4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bc8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001bd4:	d10c      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x184>
 8001bd6:	4b71      	ldr	r3, [pc, #452]	@ (8001d9c <HAL_RCC_OscConfig+0x330>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a70      	ldr	r2, [pc, #448]	@ (8001d9c <HAL_RCC_OscConfig+0x330>)
 8001bdc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001be0:	6013      	str	r3, [r2, #0]
 8001be2:	4b6e      	ldr	r3, [pc, #440]	@ (8001d9c <HAL_RCC_OscConfig+0x330>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a6d      	ldr	r2, [pc, #436]	@ (8001d9c <HAL_RCC_OscConfig+0x330>)
 8001be8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bec:	6013      	str	r3, [r2, #0]
 8001bee:	e00b      	b.n	8001c08 <HAL_RCC_OscConfig+0x19c>
 8001bf0:	4b6a      	ldr	r3, [pc, #424]	@ (8001d9c <HAL_RCC_OscConfig+0x330>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a69      	ldr	r2, [pc, #420]	@ (8001d9c <HAL_RCC_OscConfig+0x330>)
 8001bf6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001bfa:	6013      	str	r3, [r2, #0]
 8001bfc:	4b67      	ldr	r3, [pc, #412]	@ (8001d9c <HAL_RCC_OscConfig+0x330>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a66      	ldr	r2, [pc, #408]	@ (8001d9c <HAL_RCC_OscConfig+0x330>)
 8001c02:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c06:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c08:	4b64      	ldr	r3, [pc, #400]	@ (8001d9c <HAL_RCC_OscConfig+0x330>)
 8001c0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c0c:	f023 020f 	bic.w	r2, r3, #15
 8001c10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c14:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	495f      	ldr	r1, [pc, #380]	@ (8001d9c <HAL_RCC_OscConfig+0x330>)
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c26:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d059      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c32:	f7fe fe27 	bl	8000884 <HAL_GetTick>
 8001c36:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c3a:	e00a      	b.n	8001c52 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c3c:	f7fe fe22 	bl	8000884 <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001c46:	1ad3      	subs	r3, r2, r3
 8001c48:	2b64      	cmp	r3, #100	@ 0x64
 8001c4a:	d902      	bls.n	8001c52 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001c4c:	2303      	movs	r3, #3
 8001c4e:	f000 bf43 	b.w	8002ad8 <HAL_RCC_OscConfig+0x106c>
 8001c52:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c56:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c5a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001c5e:	fa93 f3a3 	rbit	r3, r3
 8001c62:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8001c66:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c6a:	fab3 f383 	clz	r3, r3
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	095b      	lsrs	r3, r3, #5
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	f043 0301 	orr.w	r3, r3, #1
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d102      	bne.n	8001c84 <HAL_RCC_OscConfig+0x218>
 8001c7e:	4b47      	ldr	r3, [pc, #284]	@ (8001d9c <HAL_RCC_OscConfig+0x330>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	e015      	b.n	8001cb0 <HAL_RCC_OscConfig+0x244>
 8001c84:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c88:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c8c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001c90:	fa93 f3a3 	rbit	r3, r3
 8001c94:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001c98:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c9c:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001ca0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8001ca4:	fa93 f3a3 	rbit	r3, r3
 8001ca8:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8001cac:	4b3b      	ldr	r3, [pc, #236]	@ (8001d9c <HAL_RCC_OscConfig+0x330>)
 8001cae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cb0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001cb4:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8001cb8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001cbc:	fa92 f2a2 	rbit	r2, r2
 8001cc0:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8001cc4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8001cc8:	fab2 f282 	clz	r2, r2
 8001ccc:	b2d2      	uxtb	r2, r2
 8001cce:	f042 0220 	orr.w	r2, r2, #32
 8001cd2:	b2d2      	uxtb	r2, r2
 8001cd4:	f002 021f 	and.w	r2, r2, #31
 8001cd8:	2101      	movs	r1, #1
 8001cda:	fa01 f202 	lsl.w	r2, r1, r2
 8001cde:	4013      	ands	r3, r2
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d0ab      	beq.n	8001c3c <HAL_RCC_OscConfig+0x1d0>
 8001ce4:	e05d      	b.n	8001da2 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce6:	f7fe fdcd 	bl	8000884 <HAL_GetTick>
 8001cea:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cee:	e00a      	b.n	8001d06 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cf0:	f7fe fdc8 	bl	8000884 <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001cfa:	1ad3      	subs	r3, r2, r3
 8001cfc:	2b64      	cmp	r3, #100	@ 0x64
 8001cfe:	d902      	bls.n	8001d06 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001d00:	2303      	movs	r3, #3
 8001d02:	f000 bee9 	b.w	8002ad8 <HAL_RCC_OscConfig+0x106c>
 8001d06:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d0a:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d0e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8001d12:	fa93 f3a3 	rbit	r3, r3
 8001d16:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8001d1a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d1e:	fab3 f383 	clz	r3, r3
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	095b      	lsrs	r3, r3, #5
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	f043 0301 	orr.w	r3, r3, #1
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d102      	bne.n	8001d38 <HAL_RCC_OscConfig+0x2cc>
 8001d32:	4b1a      	ldr	r3, [pc, #104]	@ (8001d9c <HAL_RCC_OscConfig+0x330>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	e015      	b.n	8001d64 <HAL_RCC_OscConfig+0x2f8>
 8001d38:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d3c:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d40:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8001d44:	fa93 f3a3 	rbit	r3, r3
 8001d48:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001d4c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d50:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001d54:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8001d58:	fa93 f3a3 	rbit	r3, r3
 8001d5c:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8001d60:	4b0e      	ldr	r3, [pc, #56]	@ (8001d9c <HAL_RCC_OscConfig+0x330>)
 8001d62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d64:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001d68:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8001d6c:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001d70:	fa92 f2a2 	rbit	r2, r2
 8001d74:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8001d78:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001d7c:	fab2 f282 	clz	r2, r2
 8001d80:	b2d2      	uxtb	r2, r2
 8001d82:	f042 0220 	orr.w	r2, r2, #32
 8001d86:	b2d2      	uxtb	r2, r2
 8001d88:	f002 021f 	and.w	r2, r2, #31
 8001d8c:	2101      	movs	r1, #1
 8001d8e:	fa01 f202 	lsl.w	r2, r1, r2
 8001d92:	4013      	ands	r3, r2
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d1ab      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x284>
 8001d98:	e003      	b.n	8001da2 <HAL_RCC_OscConfig+0x336>
 8001d9a:	bf00      	nop
 8001d9c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001da0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001da2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001da6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 0302 	and.w	r3, r3, #2
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	f000 817d 	beq.w	80020b2 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001db8:	4ba6      	ldr	r3, [pc, #664]	@ (8002054 <HAL_RCC_OscConfig+0x5e8>)
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f003 030c 	and.w	r3, r3, #12
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d00b      	beq.n	8001ddc <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001dc4:	4ba3      	ldr	r3, [pc, #652]	@ (8002054 <HAL_RCC_OscConfig+0x5e8>)
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f003 030c 	and.w	r3, r3, #12
 8001dcc:	2b08      	cmp	r3, #8
 8001dce:	d172      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x44a>
 8001dd0:	4ba0      	ldr	r3, [pc, #640]	@ (8002054 <HAL_RCC_OscConfig+0x5e8>)
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d16c      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x44a>
 8001ddc:	2302      	movs	r3, #2
 8001dde:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de2:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001de6:	fa93 f3a3 	rbit	r3, r3
 8001dea:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8001dee:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001df2:	fab3 f383 	clz	r3, r3
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	095b      	lsrs	r3, r3, #5
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	f043 0301 	orr.w	r3, r3, #1
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d102      	bne.n	8001e0c <HAL_RCC_OscConfig+0x3a0>
 8001e06:	4b93      	ldr	r3, [pc, #588]	@ (8002054 <HAL_RCC_OscConfig+0x5e8>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	e013      	b.n	8001e34 <HAL_RCC_OscConfig+0x3c8>
 8001e0c:	2302      	movs	r3, #2
 8001e0e:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e12:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8001e16:	fa93 f3a3 	rbit	r3, r3
 8001e1a:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001e1e:	2302      	movs	r3, #2
 8001e20:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001e24:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8001e28:	fa93 f3a3 	rbit	r3, r3
 8001e2c:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8001e30:	4b88      	ldr	r3, [pc, #544]	@ (8002054 <HAL_RCC_OscConfig+0x5e8>)
 8001e32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e34:	2202      	movs	r2, #2
 8001e36:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8001e3a:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001e3e:	fa92 f2a2 	rbit	r2, r2
 8001e42:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8001e46:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8001e4a:	fab2 f282 	clz	r2, r2
 8001e4e:	b2d2      	uxtb	r2, r2
 8001e50:	f042 0220 	orr.w	r2, r2, #32
 8001e54:	b2d2      	uxtb	r2, r2
 8001e56:	f002 021f 	and.w	r2, r2, #31
 8001e5a:	2101      	movs	r1, #1
 8001e5c:	fa01 f202 	lsl.w	r2, r1, r2
 8001e60:	4013      	ands	r3, r2
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d00a      	beq.n	8001e7c <HAL_RCC_OscConfig+0x410>
 8001e66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e6a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	691b      	ldr	r3, [r3, #16]
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d002      	beq.n	8001e7c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	f000 be2e 	b.w	8002ad8 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e7c:	4b75      	ldr	r3, [pc, #468]	@ (8002054 <HAL_RCC_OscConfig+0x5e8>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e88:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	695b      	ldr	r3, [r3, #20]
 8001e90:	21f8      	movs	r1, #248	@ 0xf8
 8001e92:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e96:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001e9a:	fa91 f1a1 	rbit	r1, r1
 8001e9e:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8001ea2:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8001ea6:	fab1 f181 	clz	r1, r1
 8001eaa:	b2c9      	uxtb	r1, r1
 8001eac:	408b      	lsls	r3, r1
 8001eae:	4969      	ldr	r1, [pc, #420]	@ (8002054 <HAL_RCC_OscConfig+0x5e8>)
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eb4:	e0fd      	b.n	80020b2 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001eb6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001eba:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	691b      	ldr	r3, [r3, #16]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	f000 8088 	beq.w	8001fd8 <HAL_RCC_OscConfig+0x56c>
 8001ec8:	2301      	movs	r3, #1
 8001eca:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ece:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001ed2:	fa93 f3a3 	rbit	r3, r3
 8001ed6:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8001eda:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ede:	fab3 f383 	clz	r3, r3
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001ee8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	461a      	mov	r2, r3
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef4:	f7fe fcc6 	bl	8000884 <HAL_GetTick>
 8001ef8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001efc:	e00a      	b.n	8001f14 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001efe:	f7fe fcc1 	bl	8000884 <HAL_GetTick>
 8001f02:	4602      	mov	r2, r0
 8001f04:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d902      	bls.n	8001f14 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	f000 bde2 	b.w	8002ad8 <HAL_RCC_OscConfig+0x106c>
 8001f14:	2302      	movs	r3, #2
 8001f16:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f1a:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8001f1e:	fa93 f3a3 	rbit	r3, r3
 8001f22:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8001f26:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f2a:	fab3 f383 	clz	r3, r3
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	095b      	lsrs	r3, r3, #5
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	f043 0301 	orr.w	r3, r3, #1
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d102      	bne.n	8001f44 <HAL_RCC_OscConfig+0x4d8>
 8001f3e:	4b45      	ldr	r3, [pc, #276]	@ (8002054 <HAL_RCC_OscConfig+0x5e8>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	e013      	b.n	8001f6c <HAL_RCC_OscConfig+0x500>
 8001f44:	2302      	movs	r3, #2
 8001f46:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f4a:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8001f4e:	fa93 f3a3 	rbit	r3, r3
 8001f52:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001f56:	2302      	movs	r3, #2
 8001f58:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001f5c:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8001f60:	fa93 f3a3 	rbit	r3, r3
 8001f64:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8001f68:	4b3a      	ldr	r3, [pc, #232]	@ (8002054 <HAL_RCC_OscConfig+0x5e8>)
 8001f6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f6c:	2202      	movs	r2, #2
 8001f6e:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8001f72:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001f76:	fa92 f2a2 	rbit	r2, r2
 8001f7a:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8001f7e:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8001f82:	fab2 f282 	clz	r2, r2
 8001f86:	b2d2      	uxtb	r2, r2
 8001f88:	f042 0220 	orr.w	r2, r2, #32
 8001f8c:	b2d2      	uxtb	r2, r2
 8001f8e:	f002 021f 	and.w	r2, r2, #31
 8001f92:	2101      	movs	r1, #1
 8001f94:	fa01 f202 	lsl.w	r2, r1, r2
 8001f98:	4013      	ands	r3, r2
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d0af      	beq.n	8001efe <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f9e:	4b2d      	ldr	r3, [pc, #180]	@ (8002054 <HAL_RCC_OscConfig+0x5e8>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001fa6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001faa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	695b      	ldr	r3, [r3, #20]
 8001fb2:	21f8      	movs	r1, #248	@ 0xf8
 8001fb4:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb8:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001fbc:	fa91 f1a1 	rbit	r1, r1
 8001fc0:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8001fc4:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8001fc8:	fab1 f181 	clz	r1, r1
 8001fcc:	b2c9      	uxtb	r1, r1
 8001fce:	408b      	lsls	r3, r1
 8001fd0:	4920      	ldr	r1, [pc, #128]	@ (8002054 <HAL_RCC_OscConfig+0x5e8>)
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	600b      	str	r3, [r1, #0]
 8001fd6:	e06c      	b.n	80020b2 <HAL_RCC_OscConfig+0x646>
 8001fd8:	2301      	movs	r3, #1
 8001fda:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fde:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001fe2:	fa93 f3a3 	rbit	r3, r3
 8001fe6:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8001fea:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fee:	fab3 f383 	clz	r3, r3
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001ff8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	461a      	mov	r2, r3
 8002000:	2300      	movs	r3, #0
 8002002:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002004:	f7fe fc3e 	bl	8000884 <HAL_GetTick>
 8002008:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800200c:	e00a      	b.n	8002024 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800200e:	f7fe fc39 	bl	8000884 <HAL_GetTick>
 8002012:	4602      	mov	r2, r0
 8002014:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	2b02      	cmp	r3, #2
 800201c:	d902      	bls.n	8002024 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	f000 bd5a 	b.w	8002ad8 <HAL_RCC_OscConfig+0x106c>
 8002024:	2302      	movs	r3, #2
 8002026:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800202a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800202e:	fa93 f3a3 	rbit	r3, r3
 8002032:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8002036:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800203a:	fab3 f383 	clz	r3, r3
 800203e:	b2db      	uxtb	r3, r3
 8002040:	095b      	lsrs	r3, r3, #5
 8002042:	b2db      	uxtb	r3, r3
 8002044:	f043 0301 	orr.w	r3, r3, #1
 8002048:	b2db      	uxtb	r3, r3
 800204a:	2b01      	cmp	r3, #1
 800204c:	d104      	bne.n	8002058 <HAL_RCC_OscConfig+0x5ec>
 800204e:	4b01      	ldr	r3, [pc, #4]	@ (8002054 <HAL_RCC_OscConfig+0x5e8>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	e015      	b.n	8002080 <HAL_RCC_OscConfig+0x614>
 8002054:	40021000 	.word	0x40021000
 8002058:	2302      	movs	r3, #2
 800205a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800205e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002062:	fa93 f3a3 	rbit	r3, r3
 8002066:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800206a:	2302      	movs	r3, #2
 800206c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002070:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002074:	fa93 f3a3 	rbit	r3, r3
 8002078:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800207c:	4bc8      	ldr	r3, [pc, #800]	@ (80023a0 <HAL_RCC_OscConfig+0x934>)
 800207e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002080:	2202      	movs	r2, #2
 8002082:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8002086:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800208a:	fa92 f2a2 	rbit	r2, r2
 800208e:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8002092:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8002096:	fab2 f282 	clz	r2, r2
 800209a:	b2d2      	uxtb	r2, r2
 800209c:	f042 0220 	orr.w	r2, r2, #32
 80020a0:	b2d2      	uxtb	r2, r2
 80020a2:	f002 021f 	and.w	r2, r2, #31
 80020a6:	2101      	movs	r1, #1
 80020a8:	fa01 f202 	lsl.w	r2, r1, r2
 80020ac:	4013      	ands	r3, r2
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d1ad      	bne.n	800200e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020b6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 0308 	and.w	r3, r3, #8
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	f000 8110 	beq.w	80022e8 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020cc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	699b      	ldr	r3, [r3, #24]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d079      	beq.n	80021cc <HAL_RCC_OscConfig+0x760>
 80020d8:	2301      	movs	r3, #1
 80020da:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020de:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80020e2:	fa93 f3a3 	rbit	r3, r3
 80020e6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 80020ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020ee:	fab3 f383 	clz	r3, r3
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	461a      	mov	r2, r3
 80020f6:	4bab      	ldr	r3, [pc, #684]	@ (80023a4 <HAL_RCC_OscConfig+0x938>)
 80020f8:	4413      	add	r3, r2
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	461a      	mov	r2, r3
 80020fe:	2301      	movs	r3, #1
 8002100:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002102:	f7fe fbbf 	bl	8000884 <HAL_GetTick>
 8002106:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800210a:	e00a      	b.n	8002122 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800210c:	f7fe fbba 	bl	8000884 <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002116:	1ad3      	subs	r3, r2, r3
 8002118:	2b02      	cmp	r3, #2
 800211a:	d902      	bls.n	8002122 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 800211c:	2303      	movs	r3, #3
 800211e:	f000 bcdb 	b.w	8002ad8 <HAL_RCC_OscConfig+0x106c>
 8002122:	2302      	movs	r3, #2
 8002124:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002128:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800212c:	fa93 f3a3 	rbit	r3, r3
 8002130:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002134:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002138:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800213c:	2202      	movs	r2, #2
 800213e:	601a      	str	r2, [r3, #0]
 8002140:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002144:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	fa93 f2a3 	rbit	r2, r3
 800214e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002152:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002156:	601a      	str	r2, [r3, #0]
 8002158:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800215c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002160:	2202      	movs	r2, #2
 8002162:	601a      	str	r2, [r3, #0]
 8002164:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002168:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	fa93 f2a3 	rbit	r2, r3
 8002172:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002176:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800217a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800217c:	4b88      	ldr	r3, [pc, #544]	@ (80023a0 <HAL_RCC_OscConfig+0x934>)
 800217e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002180:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002184:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002188:	2102      	movs	r1, #2
 800218a:	6019      	str	r1, [r3, #0]
 800218c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002190:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	fa93 f1a3 	rbit	r1, r3
 800219a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800219e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80021a2:	6019      	str	r1, [r3, #0]
  return result;
 80021a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021a8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	fab3 f383 	clz	r3, r3
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	f003 031f 	and.w	r3, r3, #31
 80021be:	2101      	movs	r1, #1
 80021c0:	fa01 f303 	lsl.w	r3, r1, r3
 80021c4:	4013      	ands	r3, r2
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d0a0      	beq.n	800210c <HAL_RCC_OscConfig+0x6a0>
 80021ca:	e08d      	b.n	80022e8 <HAL_RCC_OscConfig+0x87c>
 80021cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021d0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80021d4:	2201      	movs	r2, #1
 80021d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021dc:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	fa93 f2a3 	rbit	r2, r3
 80021e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021ea:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80021ee:	601a      	str	r2, [r3, #0]
  return result;
 80021f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021f4:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80021f8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021fa:	fab3 f383 	clz	r3, r3
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	461a      	mov	r2, r3
 8002202:	4b68      	ldr	r3, [pc, #416]	@ (80023a4 <HAL_RCC_OscConfig+0x938>)
 8002204:	4413      	add	r3, r2
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	461a      	mov	r2, r3
 800220a:	2300      	movs	r3, #0
 800220c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800220e:	f7fe fb39 	bl	8000884 <HAL_GetTick>
 8002212:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002216:	e00a      	b.n	800222e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002218:	f7fe fb34 	bl	8000884 <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	2b02      	cmp	r3, #2
 8002226:	d902      	bls.n	800222e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002228:	2303      	movs	r3, #3
 800222a:	f000 bc55 	b.w	8002ad8 <HAL_RCC_OscConfig+0x106c>
 800222e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002232:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002236:	2202      	movs	r2, #2
 8002238:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800223a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800223e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	fa93 f2a3 	rbit	r2, r3
 8002248:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800224c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002250:	601a      	str	r2, [r3, #0]
 8002252:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002256:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800225a:	2202      	movs	r2, #2
 800225c:	601a      	str	r2, [r3, #0]
 800225e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002262:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	fa93 f2a3 	rbit	r2, r3
 800226c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002270:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002274:	601a      	str	r2, [r3, #0]
 8002276:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800227a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800227e:	2202      	movs	r2, #2
 8002280:	601a      	str	r2, [r3, #0]
 8002282:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002286:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	fa93 f2a3 	rbit	r2, r3
 8002290:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002294:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002298:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800229a:	4b41      	ldr	r3, [pc, #260]	@ (80023a0 <HAL_RCC_OscConfig+0x934>)
 800229c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800229e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022a2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80022a6:	2102      	movs	r1, #2
 80022a8:	6019      	str	r1, [r3, #0]
 80022aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022ae:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	fa93 f1a3 	rbit	r1, r3
 80022b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022bc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80022c0:	6019      	str	r1, [r3, #0]
  return result;
 80022c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022c6:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	fab3 f383 	clz	r3, r3
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	f003 031f 	and.w	r3, r3, #31
 80022dc:	2101      	movs	r1, #1
 80022de:	fa01 f303 	lsl.w	r3, r1, r3
 80022e2:	4013      	ands	r3, r2
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d197      	bne.n	8002218 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022ec:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0304 	and.w	r3, r3, #4
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	f000 81a1 	beq.w	8002640 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022fe:	2300      	movs	r3, #0
 8002300:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002304:	4b26      	ldr	r3, [pc, #152]	@ (80023a0 <HAL_RCC_OscConfig+0x934>)
 8002306:	69db      	ldr	r3, [r3, #28]
 8002308:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d116      	bne.n	800233e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002310:	4b23      	ldr	r3, [pc, #140]	@ (80023a0 <HAL_RCC_OscConfig+0x934>)
 8002312:	69db      	ldr	r3, [r3, #28]
 8002314:	4a22      	ldr	r2, [pc, #136]	@ (80023a0 <HAL_RCC_OscConfig+0x934>)
 8002316:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800231a:	61d3      	str	r3, [r2, #28]
 800231c:	4b20      	ldr	r3, [pc, #128]	@ (80023a0 <HAL_RCC_OscConfig+0x934>)
 800231e:	69db      	ldr	r3, [r3, #28]
 8002320:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002324:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002328:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800232c:	601a      	str	r2, [r3, #0]
 800232e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002332:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002336:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002338:	2301      	movs	r3, #1
 800233a:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800233e:	4b1a      	ldr	r3, [pc, #104]	@ (80023a8 <HAL_RCC_OscConfig+0x93c>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002346:	2b00      	cmp	r3, #0
 8002348:	d11a      	bne.n	8002380 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800234a:	4b17      	ldr	r3, [pc, #92]	@ (80023a8 <HAL_RCC_OscConfig+0x93c>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a16      	ldr	r2, [pc, #88]	@ (80023a8 <HAL_RCC_OscConfig+0x93c>)
 8002350:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002354:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002356:	f7fe fa95 	bl	8000884 <HAL_GetTick>
 800235a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800235e:	e009      	b.n	8002374 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002360:	f7fe fa90 	bl	8000884 <HAL_GetTick>
 8002364:	4602      	mov	r2, r0
 8002366:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	2b64      	cmp	r3, #100	@ 0x64
 800236e:	d901      	bls.n	8002374 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002370:	2303      	movs	r3, #3
 8002372:	e3b1      	b.n	8002ad8 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002374:	4b0c      	ldr	r3, [pc, #48]	@ (80023a8 <HAL_RCC_OscConfig+0x93c>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800237c:	2b00      	cmp	r3, #0
 800237e:	d0ef      	beq.n	8002360 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002380:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002384:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	2b01      	cmp	r3, #1
 800238e:	d10d      	bne.n	80023ac <HAL_RCC_OscConfig+0x940>
 8002390:	4b03      	ldr	r3, [pc, #12]	@ (80023a0 <HAL_RCC_OscConfig+0x934>)
 8002392:	6a1b      	ldr	r3, [r3, #32]
 8002394:	4a02      	ldr	r2, [pc, #8]	@ (80023a0 <HAL_RCC_OscConfig+0x934>)
 8002396:	f043 0301 	orr.w	r3, r3, #1
 800239a:	6213      	str	r3, [r2, #32]
 800239c:	e03c      	b.n	8002418 <HAL_RCC_OscConfig+0x9ac>
 800239e:	bf00      	nop
 80023a0:	40021000 	.word	0x40021000
 80023a4:	10908120 	.word	0x10908120
 80023a8:	40007000 	.word	0x40007000
 80023ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023b0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d10c      	bne.n	80023d6 <HAL_RCC_OscConfig+0x96a>
 80023bc:	4bc1      	ldr	r3, [pc, #772]	@ (80026c4 <HAL_RCC_OscConfig+0xc58>)
 80023be:	6a1b      	ldr	r3, [r3, #32]
 80023c0:	4ac0      	ldr	r2, [pc, #768]	@ (80026c4 <HAL_RCC_OscConfig+0xc58>)
 80023c2:	f023 0301 	bic.w	r3, r3, #1
 80023c6:	6213      	str	r3, [r2, #32]
 80023c8:	4bbe      	ldr	r3, [pc, #760]	@ (80026c4 <HAL_RCC_OscConfig+0xc58>)
 80023ca:	6a1b      	ldr	r3, [r3, #32]
 80023cc:	4abd      	ldr	r2, [pc, #756]	@ (80026c4 <HAL_RCC_OscConfig+0xc58>)
 80023ce:	f023 0304 	bic.w	r3, r3, #4
 80023d2:	6213      	str	r3, [r2, #32]
 80023d4:	e020      	b.n	8002418 <HAL_RCC_OscConfig+0x9ac>
 80023d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023da:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	68db      	ldr	r3, [r3, #12]
 80023e2:	2b05      	cmp	r3, #5
 80023e4:	d10c      	bne.n	8002400 <HAL_RCC_OscConfig+0x994>
 80023e6:	4bb7      	ldr	r3, [pc, #732]	@ (80026c4 <HAL_RCC_OscConfig+0xc58>)
 80023e8:	6a1b      	ldr	r3, [r3, #32]
 80023ea:	4ab6      	ldr	r2, [pc, #728]	@ (80026c4 <HAL_RCC_OscConfig+0xc58>)
 80023ec:	f043 0304 	orr.w	r3, r3, #4
 80023f0:	6213      	str	r3, [r2, #32]
 80023f2:	4bb4      	ldr	r3, [pc, #720]	@ (80026c4 <HAL_RCC_OscConfig+0xc58>)
 80023f4:	6a1b      	ldr	r3, [r3, #32]
 80023f6:	4ab3      	ldr	r2, [pc, #716]	@ (80026c4 <HAL_RCC_OscConfig+0xc58>)
 80023f8:	f043 0301 	orr.w	r3, r3, #1
 80023fc:	6213      	str	r3, [r2, #32]
 80023fe:	e00b      	b.n	8002418 <HAL_RCC_OscConfig+0x9ac>
 8002400:	4bb0      	ldr	r3, [pc, #704]	@ (80026c4 <HAL_RCC_OscConfig+0xc58>)
 8002402:	6a1b      	ldr	r3, [r3, #32]
 8002404:	4aaf      	ldr	r2, [pc, #700]	@ (80026c4 <HAL_RCC_OscConfig+0xc58>)
 8002406:	f023 0301 	bic.w	r3, r3, #1
 800240a:	6213      	str	r3, [r2, #32]
 800240c:	4bad      	ldr	r3, [pc, #692]	@ (80026c4 <HAL_RCC_OscConfig+0xc58>)
 800240e:	6a1b      	ldr	r3, [r3, #32]
 8002410:	4aac      	ldr	r2, [pc, #688]	@ (80026c4 <HAL_RCC_OscConfig+0xc58>)
 8002412:	f023 0304 	bic.w	r3, r3, #4
 8002416:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002418:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800241c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	2b00      	cmp	r3, #0
 8002426:	f000 8081 	beq.w	800252c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800242a:	f7fe fa2b 	bl	8000884 <HAL_GetTick>
 800242e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002432:	e00b      	b.n	800244c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002434:	f7fe fa26 	bl	8000884 <HAL_GetTick>
 8002438:	4602      	mov	r2, r0
 800243a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002444:	4293      	cmp	r3, r2
 8002446:	d901      	bls.n	800244c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002448:	2303      	movs	r3, #3
 800244a:	e345      	b.n	8002ad8 <HAL_RCC_OscConfig+0x106c>
 800244c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002450:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002454:	2202      	movs	r2, #2
 8002456:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002458:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800245c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	fa93 f2a3 	rbit	r2, r3
 8002466:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800246a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800246e:	601a      	str	r2, [r3, #0]
 8002470:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002474:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002478:	2202      	movs	r2, #2
 800247a:	601a      	str	r2, [r3, #0]
 800247c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002480:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	fa93 f2a3 	rbit	r2, r3
 800248a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800248e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002492:	601a      	str	r2, [r3, #0]
  return result;
 8002494:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002498:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800249c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800249e:	fab3 f383 	clz	r3, r3
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	095b      	lsrs	r3, r3, #5
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	f043 0302 	orr.w	r3, r3, #2
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d102      	bne.n	80024b8 <HAL_RCC_OscConfig+0xa4c>
 80024b2:	4b84      	ldr	r3, [pc, #528]	@ (80026c4 <HAL_RCC_OscConfig+0xc58>)
 80024b4:	6a1b      	ldr	r3, [r3, #32]
 80024b6:	e013      	b.n	80024e0 <HAL_RCC_OscConfig+0xa74>
 80024b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024bc:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80024c0:	2202      	movs	r2, #2
 80024c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024c8:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	fa93 f2a3 	rbit	r2, r3
 80024d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024d6:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80024da:	601a      	str	r2, [r3, #0]
 80024dc:	4b79      	ldr	r3, [pc, #484]	@ (80026c4 <HAL_RCC_OscConfig+0xc58>)
 80024de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024e0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80024e4:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80024e8:	2102      	movs	r1, #2
 80024ea:	6011      	str	r1, [r2, #0]
 80024ec:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80024f0:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80024f4:	6812      	ldr	r2, [r2, #0]
 80024f6:	fa92 f1a2 	rbit	r1, r2
 80024fa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80024fe:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002502:	6011      	str	r1, [r2, #0]
  return result;
 8002504:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002508:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800250c:	6812      	ldr	r2, [r2, #0]
 800250e:	fab2 f282 	clz	r2, r2
 8002512:	b2d2      	uxtb	r2, r2
 8002514:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002518:	b2d2      	uxtb	r2, r2
 800251a:	f002 021f 	and.w	r2, r2, #31
 800251e:	2101      	movs	r1, #1
 8002520:	fa01 f202 	lsl.w	r2, r1, r2
 8002524:	4013      	ands	r3, r2
 8002526:	2b00      	cmp	r3, #0
 8002528:	d084      	beq.n	8002434 <HAL_RCC_OscConfig+0x9c8>
 800252a:	e07f      	b.n	800262c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800252c:	f7fe f9aa 	bl	8000884 <HAL_GetTick>
 8002530:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002534:	e00b      	b.n	800254e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002536:	f7fe f9a5 	bl	8000884 <HAL_GetTick>
 800253a:	4602      	mov	r2, r0
 800253c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002546:	4293      	cmp	r3, r2
 8002548:	d901      	bls.n	800254e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e2c4      	b.n	8002ad8 <HAL_RCC_OscConfig+0x106c>
 800254e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002552:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002556:	2202      	movs	r2, #2
 8002558:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800255a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800255e:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	fa93 f2a3 	rbit	r2, r3
 8002568:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800256c:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002570:	601a      	str	r2, [r3, #0]
 8002572:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002576:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800257a:	2202      	movs	r2, #2
 800257c:	601a      	str	r2, [r3, #0]
 800257e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002582:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	fa93 f2a3 	rbit	r2, r3
 800258c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002590:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002594:	601a      	str	r2, [r3, #0]
  return result;
 8002596:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800259a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800259e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025a0:	fab3 f383 	clz	r3, r3
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	095b      	lsrs	r3, r3, #5
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	f043 0302 	orr.w	r3, r3, #2
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	d102      	bne.n	80025ba <HAL_RCC_OscConfig+0xb4e>
 80025b4:	4b43      	ldr	r3, [pc, #268]	@ (80026c4 <HAL_RCC_OscConfig+0xc58>)
 80025b6:	6a1b      	ldr	r3, [r3, #32]
 80025b8:	e013      	b.n	80025e2 <HAL_RCC_OscConfig+0xb76>
 80025ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025be:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80025c2:	2202      	movs	r2, #2
 80025c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025ca:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	fa93 f2a3 	rbit	r2, r3
 80025d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025d8:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80025dc:	601a      	str	r2, [r3, #0]
 80025de:	4b39      	ldr	r3, [pc, #228]	@ (80026c4 <HAL_RCC_OscConfig+0xc58>)
 80025e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025e2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80025e6:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80025ea:	2102      	movs	r1, #2
 80025ec:	6011      	str	r1, [r2, #0]
 80025ee:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80025f2:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80025f6:	6812      	ldr	r2, [r2, #0]
 80025f8:	fa92 f1a2 	rbit	r1, r2
 80025fc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002600:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002604:	6011      	str	r1, [r2, #0]
  return result;
 8002606:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800260a:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800260e:	6812      	ldr	r2, [r2, #0]
 8002610:	fab2 f282 	clz	r2, r2
 8002614:	b2d2      	uxtb	r2, r2
 8002616:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800261a:	b2d2      	uxtb	r2, r2
 800261c:	f002 021f 	and.w	r2, r2, #31
 8002620:	2101      	movs	r1, #1
 8002622:	fa01 f202 	lsl.w	r2, r1, r2
 8002626:	4013      	ands	r3, r2
 8002628:	2b00      	cmp	r3, #0
 800262a:	d184      	bne.n	8002536 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800262c:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8002630:	2b01      	cmp	r3, #1
 8002632:	d105      	bne.n	8002640 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002634:	4b23      	ldr	r3, [pc, #140]	@ (80026c4 <HAL_RCC_OscConfig+0xc58>)
 8002636:	69db      	ldr	r3, [r3, #28]
 8002638:	4a22      	ldr	r2, [pc, #136]	@ (80026c4 <HAL_RCC_OscConfig+0xc58>)
 800263a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800263e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002640:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002644:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	69db      	ldr	r3, [r3, #28]
 800264c:	2b00      	cmp	r3, #0
 800264e:	f000 8242 	beq.w	8002ad6 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002652:	4b1c      	ldr	r3, [pc, #112]	@ (80026c4 <HAL_RCC_OscConfig+0xc58>)
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	f003 030c 	and.w	r3, r3, #12
 800265a:	2b08      	cmp	r3, #8
 800265c:	f000 8213 	beq.w	8002a86 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002660:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002664:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	69db      	ldr	r3, [r3, #28]
 800266c:	2b02      	cmp	r3, #2
 800266e:	f040 8162 	bne.w	8002936 <HAL_RCC_OscConfig+0xeca>
 8002672:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002676:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800267a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800267e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002680:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002684:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	fa93 f2a3 	rbit	r2, r3
 800268e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002692:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002696:	601a      	str	r2, [r3, #0]
  return result;
 8002698:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800269c:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80026a0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026a2:	fab3 f383 	clz	r3, r3
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80026ac:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80026b0:	009b      	lsls	r3, r3, #2
 80026b2:	461a      	mov	r2, r3
 80026b4:	2300      	movs	r3, #0
 80026b6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b8:	f7fe f8e4 	bl	8000884 <HAL_GetTick>
 80026bc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026c0:	e00c      	b.n	80026dc <HAL_RCC_OscConfig+0xc70>
 80026c2:	bf00      	nop
 80026c4:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026c8:	f7fe f8dc 	bl	8000884 <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80026d2:	1ad3      	subs	r3, r2, r3
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d901      	bls.n	80026dc <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80026d8:	2303      	movs	r3, #3
 80026da:	e1fd      	b.n	8002ad8 <HAL_RCC_OscConfig+0x106c>
 80026dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026e0:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80026e4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80026e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026ee:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	fa93 f2a3 	rbit	r2, r3
 80026f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026fc:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002700:	601a      	str	r2, [r3, #0]
  return result;
 8002702:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002706:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800270a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800270c:	fab3 f383 	clz	r3, r3
 8002710:	b2db      	uxtb	r3, r3
 8002712:	095b      	lsrs	r3, r3, #5
 8002714:	b2db      	uxtb	r3, r3
 8002716:	f043 0301 	orr.w	r3, r3, #1
 800271a:	b2db      	uxtb	r3, r3
 800271c:	2b01      	cmp	r3, #1
 800271e:	d102      	bne.n	8002726 <HAL_RCC_OscConfig+0xcba>
 8002720:	4bb0      	ldr	r3, [pc, #704]	@ (80029e4 <HAL_RCC_OscConfig+0xf78>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	e027      	b.n	8002776 <HAL_RCC_OscConfig+0xd0a>
 8002726:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800272a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800272e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002732:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002734:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002738:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	fa93 f2a3 	rbit	r2, r3
 8002742:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002746:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800274a:	601a      	str	r2, [r3, #0]
 800274c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002750:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002754:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002758:	601a      	str	r2, [r3, #0]
 800275a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800275e:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	fa93 f2a3 	rbit	r2, r3
 8002768:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800276c:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002770:	601a      	str	r2, [r3, #0]
 8002772:	4b9c      	ldr	r3, [pc, #624]	@ (80029e4 <HAL_RCC_OscConfig+0xf78>)
 8002774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002776:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800277a:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800277e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002782:	6011      	str	r1, [r2, #0]
 8002784:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002788:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800278c:	6812      	ldr	r2, [r2, #0]
 800278e:	fa92 f1a2 	rbit	r1, r2
 8002792:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002796:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800279a:	6011      	str	r1, [r2, #0]
  return result;
 800279c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80027a0:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80027a4:	6812      	ldr	r2, [r2, #0]
 80027a6:	fab2 f282 	clz	r2, r2
 80027aa:	b2d2      	uxtb	r2, r2
 80027ac:	f042 0220 	orr.w	r2, r2, #32
 80027b0:	b2d2      	uxtb	r2, r2
 80027b2:	f002 021f 	and.w	r2, r2, #31
 80027b6:	2101      	movs	r1, #1
 80027b8:	fa01 f202 	lsl.w	r2, r1, r2
 80027bc:	4013      	ands	r3, r2
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d182      	bne.n	80026c8 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027c2:	4b88      	ldr	r3, [pc, #544]	@ (80029e4 <HAL_RCC_OscConfig+0xf78>)
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80027ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027ce:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80027d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027da:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	6a1b      	ldr	r3, [r3, #32]
 80027e2:	430b      	orrs	r3, r1
 80027e4:	497f      	ldr	r1, [pc, #508]	@ (80029e4 <HAL_RCC_OscConfig+0xf78>)
 80027e6:	4313      	orrs	r3, r2
 80027e8:	604b      	str	r3, [r1, #4]
 80027ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027ee:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80027f2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80027f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027fc:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	fa93 f2a3 	rbit	r2, r3
 8002806:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800280a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800280e:	601a      	str	r2, [r3, #0]
  return result;
 8002810:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002814:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002818:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800281a:	fab3 f383 	clz	r3, r3
 800281e:	b2db      	uxtb	r3, r3
 8002820:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002824:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	461a      	mov	r2, r3
 800282c:	2301      	movs	r3, #1
 800282e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002830:	f7fe f828 	bl	8000884 <HAL_GetTick>
 8002834:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002838:	e009      	b.n	800284e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800283a:	f7fe f823 	bl	8000884 <HAL_GetTick>
 800283e:	4602      	mov	r2, r0
 8002840:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	2b02      	cmp	r3, #2
 8002848:	d901      	bls.n	800284e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	e144      	b.n	8002ad8 <HAL_RCC_OscConfig+0x106c>
 800284e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002852:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002856:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800285a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800285c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002860:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	fa93 f2a3 	rbit	r2, r3
 800286a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800286e:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002872:	601a      	str	r2, [r3, #0]
  return result;
 8002874:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002878:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800287c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800287e:	fab3 f383 	clz	r3, r3
 8002882:	b2db      	uxtb	r3, r3
 8002884:	095b      	lsrs	r3, r3, #5
 8002886:	b2db      	uxtb	r3, r3
 8002888:	f043 0301 	orr.w	r3, r3, #1
 800288c:	b2db      	uxtb	r3, r3
 800288e:	2b01      	cmp	r3, #1
 8002890:	d102      	bne.n	8002898 <HAL_RCC_OscConfig+0xe2c>
 8002892:	4b54      	ldr	r3, [pc, #336]	@ (80029e4 <HAL_RCC_OscConfig+0xf78>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	e027      	b.n	80028e8 <HAL_RCC_OscConfig+0xe7c>
 8002898:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800289c:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80028a0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80028a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028aa:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	fa93 f2a3 	rbit	r2, r3
 80028b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028b8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80028bc:	601a      	str	r2, [r3, #0]
 80028be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028c2:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80028c6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80028ca:	601a      	str	r2, [r3, #0]
 80028cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028d0:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	fa93 f2a3 	rbit	r2, r3
 80028da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028de:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80028e2:	601a      	str	r2, [r3, #0]
 80028e4:	4b3f      	ldr	r3, [pc, #252]	@ (80029e4 <HAL_RCC_OscConfig+0xf78>)
 80028e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028e8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80028ec:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80028f0:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80028f4:	6011      	str	r1, [r2, #0]
 80028f6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80028fa:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80028fe:	6812      	ldr	r2, [r2, #0]
 8002900:	fa92 f1a2 	rbit	r1, r2
 8002904:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002908:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800290c:	6011      	str	r1, [r2, #0]
  return result;
 800290e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002912:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002916:	6812      	ldr	r2, [r2, #0]
 8002918:	fab2 f282 	clz	r2, r2
 800291c:	b2d2      	uxtb	r2, r2
 800291e:	f042 0220 	orr.w	r2, r2, #32
 8002922:	b2d2      	uxtb	r2, r2
 8002924:	f002 021f 	and.w	r2, r2, #31
 8002928:	2101      	movs	r1, #1
 800292a:	fa01 f202 	lsl.w	r2, r1, r2
 800292e:	4013      	ands	r3, r2
 8002930:	2b00      	cmp	r3, #0
 8002932:	d082      	beq.n	800283a <HAL_RCC_OscConfig+0xdce>
 8002934:	e0cf      	b.n	8002ad6 <HAL_RCC_OscConfig+0x106a>
 8002936:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800293a:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800293e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002942:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002944:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002948:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	fa93 f2a3 	rbit	r2, r3
 8002952:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002956:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800295a:	601a      	str	r2, [r3, #0]
  return result;
 800295c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002960:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002964:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002966:	fab3 f383 	clz	r3, r3
 800296a:	b2db      	uxtb	r3, r3
 800296c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002970:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	461a      	mov	r2, r3
 8002978:	2300      	movs	r3, #0
 800297a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800297c:	f7fd ff82 	bl	8000884 <HAL_GetTick>
 8002980:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002984:	e009      	b.n	800299a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002986:	f7fd ff7d 	bl	8000884 <HAL_GetTick>
 800298a:	4602      	mov	r2, r0
 800298c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	2b02      	cmp	r3, #2
 8002994:	d901      	bls.n	800299a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	e09e      	b.n	8002ad8 <HAL_RCC_OscConfig+0x106c>
 800299a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800299e:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80029a2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80029a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029ac:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	fa93 f2a3 	rbit	r2, r3
 80029b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029ba:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80029be:	601a      	str	r2, [r3, #0]
  return result;
 80029c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029c4:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80029c8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029ca:	fab3 f383 	clz	r3, r3
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	095b      	lsrs	r3, r3, #5
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	f043 0301 	orr.w	r3, r3, #1
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d104      	bne.n	80029e8 <HAL_RCC_OscConfig+0xf7c>
 80029de:	4b01      	ldr	r3, [pc, #4]	@ (80029e4 <HAL_RCC_OscConfig+0xf78>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	e029      	b.n	8002a38 <HAL_RCC_OscConfig+0xfcc>
 80029e4:	40021000 	.word	0x40021000
 80029e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029ec:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80029f0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80029f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029fa:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	fa93 f2a3 	rbit	r2, r3
 8002a04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a08:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002a0c:	601a      	str	r2, [r3, #0]
 8002a0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a12:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002a16:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a1a:	601a      	str	r2, [r3, #0]
 8002a1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a20:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	fa93 f2a3 	rbit	r2, r3
 8002a2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a2e:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002a32:	601a      	str	r2, [r3, #0]
 8002a34:	4b2b      	ldr	r3, [pc, #172]	@ (8002ae4 <HAL_RCC_OscConfig+0x1078>)
 8002a36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a38:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002a3c:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002a40:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002a44:	6011      	str	r1, [r2, #0]
 8002a46:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002a4a:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002a4e:	6812      	ldr	r2, [r2, #0]
 8002a50:	fa92 f1a2 	rbit	r1, r2
 8002a54:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002a58:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002a5c:	6011      	str	r1, [r2, #0]
  return result;
 8002a5e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002a62:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002a66:	6812      	ldr	r2, [r2, #0]
 8002a68:	fab2 f282 	clz	r2, r2
 8002a6c:	b2d2      	uxtb	r2, r2
 8002a6e:	f042 0220 	orr.w	r2, r2, #32
 8002a72:	b2d2      	uxtb	r2, r2
 8002a74:	f002 021f 	and.w	r2, r2, #31
 8002a78:	2101      	movs	r1, #1
 8002a7a:	fa01 f202 	lsl.w	r2, r1, r2
 8002a7e:	4013      	ands	r3, r2
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d180      	bne.n	8002986 <HAL_RCC_OscConfig+0xf1a>
 8002a84:	e027      	b.n	8002ad6 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a8a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	69db      	ldr	r3, [r3, #28]
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d101      	bne.n	8002a9a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e01e      	b.n	8002ad8 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a9a:	4b12      	ldr	r3, [pc, #72]	@ (8002ae4 <HAL_RCC_OscConfig+0x1078>)
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002aa2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002aa6:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002aaa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002aae:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	6a1b      	ldr	r3, [r3, #32]
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d10b      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002aba:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002abe:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002ac2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ac6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d001      	beq.n	8002ad6 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e000      	b.n	8002ad8 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002ad6:	2300      	movs	r3, #0
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	40021000 	.word	0x40021000

08002ae8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b09e      	sub	sp, #120	@ 0x78
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002af2:	2300      	movs	r3, #0
 8002af4:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d101      	bne.n	8002b00 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e162      	b.n	8002dc6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b00:	4b90      	ldr	r3, [pc, #576]	@ (8002d44 <HAL_RCC_ClockConfig+0x25c>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0307 	and.w	r3, r3, #7
 8002b08:	683a      	ldr	r2, [r7, #0]
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d910      	bls.n	8002b30 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b0e:	4b8d      	ldr	r3, [pc, #564]	@ (8002d44 <HAL_RCC_ClockConfig+0x25c>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f023 0207 	bic.w	r2, r3, #7
 8002b16:	498b      	ldr	r1, [pc, #556]	@ (8002d44 <HAL_RCC_ClockConfig+0x25c>)
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b1e:	4b89      	ldr	r3, [pc, #548]	@ (8002d44 <HAL_RCC_ClockConfig+0x25c>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0307 	and.w	r3, r3, #7
 8002b26:	683a      	ldr	r2, [r7, #0]
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d001      	beq.n	8002b30 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e14a      	b.n	8002dc6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0302 	and.w	r3, r3, #2
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d008      	beq.n	8002b4e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b3c:	4b82      	ldr	r3, [pc, #520]	@ (8002d48 <HAL_RCC_ClockConfig+0x260>)
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	497f      	ldr	r1, [pc, #508]	@ (8002d48 <HAL_RCC_ClockConfig+0x260>)
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0301 	and.w	r3, r3, #1
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	f000 80dc 	beq.w	8002d14 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d13c      	bne.n	8002bde <HAL_RCC_ClockConfig+0xf6>
 8002b64:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002b68:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b6a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002b6c:	fa93 f3a3 	rbit	r3, r3
 8002b70:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002b72:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b74:	fab3 f383 	clz	r3, r3
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	095b      	lsrs	r3, r3, #5
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	f043 0301 	orr.w	r3, r3, #1
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d102      	bne.n	8002b8e <HAL_RCC_ClockConfig+0xa6>
 8002b88:	4b6f      	ldr	r3, [pc, #444]	@ (8002d48 <HAL_RCC_ClockConfig+0x260>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	e00f      	b.n	8002bae <HAL_RCC_ClockConfig+0xc6>
 8002b8e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002b92:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b94:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002b96:	fa93 f3a3 	rbit	r3, r3
 8002b9a:	667b      	str	r3, [r7, #100]	@ 0x64
 8002b9c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002ba0:	663b      	str	r3, [r7, #96]	@ 0x60
 8002ba2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002ba4:	fa93 f3a3 	rbit	r3, r3
 8002ba8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002baa:	4b67      	ldr	r3, [pc, #412]	@ (8002d48 <HAL_RCC_ClockConfig+0x260>)
 8002bac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bae:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002bb2:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002bb4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002bb6:	fa92 f2a2 	rbit	r2, r2
 8002bba:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002bbc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002bbe:	fab2 f282 	clz	r2, r2
 8002bc2:	b2d2      	uxtb	r2, r2
 8002bc4:	f042 0220 	orr.w	r2, r2, #32
 8002bc8:	b2d2      	uxtb	r2, r2
 8002bca:	f002 021f 	and.w	r2, r2, #31
 8002bce:	2101      	movs	r1, #1
 8002bd0:	fa01 f202 	lsl.w	r2, r1, r2
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d17b      	bne.n	8002cd2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e0f3      	b.n	8002dc6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	2b02      	cmp	r3, #2
 8002be4:	d13c      	bne.n	8002c60 <HAL_RCC_ClockConfig+0x178>
 8002be6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002bea:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002bee:	fa93 f3a3 	rbit	r3, r3
 8002bf2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002bf4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bf6:	fab3 f383 	clz	r3, r3
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	095b      	lsrs	r3, r3, #5
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	f043 0301 	orr.w	r3, r3, #1
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d102      	bne.n	8002c10 <HAL_RCC_ClockConfig+0x128>
 8002c0a:	4b4f      	ldr	r3, [pc, #316]	@ (8002d48 <HAL_RCC_ClockConfig+0x260>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	e00f      	b.n	8002c30 <HAL_RCC_ClockConfig+0x148>
 8002c10:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c14:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c18:	fa93 f3a3 	rbit	r3, r3
 8002c1c:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c1e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c22:	643b      	str	r3, [r7, #64]	@ 0x40
 8002c24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c26:	fa93 f3a3 	rbit	r3, r3
 8002c2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c2c:	4b46      	ldr	r3, [pc, #280]	@ (8002d48 <HAL_RCC_ClockConfig+0x260>)
 8002c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c30:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002c34:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002c36:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002c38:	fa92 f2a2 	rbit	r2, r2
 8002c3c:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002c3e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002c40:	fab2 f282 	clz	r2, r2
 8002c44:	b2d2      	uxtb	r2, r2
 8002c46:	f042 0220 	orr.w	r2, r2, #32
 8002c4a:	b2d2      	uxtb	r2, r2
 8002c4c:	f002 021f 	and.w	r2, r2, #31
 8002c50:	2101      	movs	r1, #1
 8002c52:	fa01 f202 	lsl.w	r2, r1, r2
 8002c56:	4013      	ands	r3, r2
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d13a      	bne.n	8002cd2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e0b2      	b.n	8002dc6 <HAL_RCC_ClockConfig+0x2de>
 8002c60:	2302      	movs	r3, #2
 8002c62:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c66:	fa93 f3a3 	rbit	r3, r3
 8002c6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002c6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c6e:	fab3 f383 	clz	r3, r3
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	095b      	lsrs	r3, r3, #5
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	f043 0301 	orr.w	r3, r3, #1
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d102      	bne.n	8002c88 <HAL_RCC_ClockConfig+0x1a0>
 8002c82:	4b31      	ldr	r3, [pc, #196]	@ (8002d48 <HAL_RCC_ClockConfig+0x260>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	e00d      	b.n	8002ca4 <HAL_RCC_ClockConfig+0x1bc>
 8002c88:	2302      	movs	r3, #2
 8002c8a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c8e:	fa93 f3a3 	rbit	r3, r3
 8002c92:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c94:	2302      	movs	r3, #2
 8002c96:	623b      	str	r3, [r7, #32]
 8002c98:	6a3b      	ldr	r3, [r7, #32]
 8002c9a:	fa93 f3a3 	rbit	r3, r3
 8002c9e:	61fb      	str	r3, [r7, #28]
 8002ca0:	4b29      	ldr	r3, [pc, #164]	@ (8002d48 <HAL_RCC_ClockConfig+0x260>)
 8002ca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ca4:	2202      	movs	r2, #2
 8002ca6:	61ba      	str	r2, [r7, #24]
 8002ca8:	69ba      	ldr	r2, [r7, #24]
 8002caa:	fa92 f2a2 	rbit	r2, r2
 8002cae:	617a      	str	r2, [r7, #20]
  return result;
 8002cb0:	697a      	ldr	r2, [r7, #20]
 8002cb2:	fab2 f282 	clz	r2, r2
 8002cb6:	b2d2      	uxtb	r2, r2
 8002cb8:	f042 0220 	orr.w	r2, r2, #32
 8002cbc:	b2d2      	uxtb	r2, r2
 8002cbe:	f002 021f 	and.w	r2, r2, #31
 8002cc2:	2101      	movs	r1, #1
 8002cc4:	fa01 f202 	lsl.w	r2, r1, r2
 8002cc8:	4013      	ands	r3, r2
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d101      	bne.n	8002cd2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e079      	b.n	8002dc6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cd2:	4b1d      	ldr	r3, [pc, #116]	@ (8002d48 <HAL_RCC_ClockConfig+0x260>)
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	f023 0203 	bic.w	r2, r3, #3
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	491a      	ldr	r1, [pc, #104]	@ (8002d48 <HAL_RCC_ClockConfig+0x260>)
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ce4:	f7fd fdce 	bl	8000884 <HAL_GetTick>
 8002ce8:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cea:	e00a      	b.n	8002d02 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cec:	f7fd fdca 	bl	8000884 <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d901      	bls.n	8002d02 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e061      	b.n	8002dc6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d02:	4b11      	ldr	r3, [pc, #68]	@ (8002d48 <HAL_RCC_ClockConfig+0x260>)
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	f003 020c 	and.w	r2, r3, #12
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d1eb      	bne.n	8002cec <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d14:	4b0b      	ldr	r3, [pc, #44]	@ (8002d44 <HAL_RCC_ClockConfig+0x25c>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 0307 	and.w	r3, r3, #7
 8002d1c:	683a      	ldr	r2, [r7, #0]
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d214      	bcs.n	8002d4c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d22:	4b08      	ldr	r3, [pc, #32]	@ (8002d44 <HAL_RCC_ClockConfig+0x25c>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f023 0207 	bic.w	r2, r3, #7
 8002d2a:	4906      	ldr	r1, [pc, #24]	@ (8002d44 <HAL_RCC_ClockConfig+0x25c>)
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d32:	4b04      	ldr	r3, [pc, #16]	@ (8002d44 <HAL_RCC_ClockConfig+0x25c>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0307 	and.w	r3, r3, #7
 8002d3a:	683a      	ldr	r2, [r7, #0]
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d005      	beq.n	8002d4c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e040      	b.n	8002dc6 <HAL_RCC_ClockConfig+0x2de>
 8002d44:	40022000 	.word	0x40022000
 8002d48:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0304 	and.w	r3, r3, #4
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d008      	beq.n	8002d6a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d58:	4b1d      	ldr	r3, [pc, #116]	@ (8002dd0 <HAL_RCC_ClockConfig+0x2e8>)
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	491a      	ldr	r1, [pc, #104]	@ (8002dd0 <HAL_RCC_ClockConfig+0x2e8>)
 8002d66:	4313      	orrs	r3, r2
 8002d68:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0308 	and.w	r3, r3, #8
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d009      	beq.n	8002d8a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d76:	4b16      	ldr	r3, [pc, #88]	@ (8002dd0 <HAL_RCC_ClockConfig+0x2e8>)
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	691b      	ldr	r3, [r3, #16]
 8002d82:	00db      	lsls	r3, r3, #3
 8002d84:	4912      	ldr	r1, [pc, #72]	@ (8002dd0 <HAL_RCC_ClockConfig+0x2e8>)
 8002d86:	4313      	orrs	r3, r2
 8002d88:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002d8a:	f000 f829 	bl	8002de0 <HAL_RCC_GetSysClockFreq>
 8002d8e:	4601      	mov	r1, r0
 8002d90:	4b0f      	ldr	r3, [pc, #60]	@ (8002dd0 <HAL_RCC_ClockConfig+0x2e8>)
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d98:	22f0      	movs	r2, #240	@ 0xf0
 8002d9a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d9c:	693a      	ldr	r2, [r7, #16]
 8002d9e:	fa92 f2a2 	rbit	r2, r2
 8002da2:	60fa      	str	r2, [r7, #12]
  return result;
 8002da4:	68fa      	ldr	r2, [r7, #12]
 8002da6:	fab2 f282 	clz	r2, r2
 8002daa:	b2d2      	uxtb	r2, r2
 8002dac:	40d3      	lsrs	r3, r2
 8002dae:	4a09      	ldr	r2, [pc, #36]	@ (8002dd4 <HAL_RCC_ClockConfig+0x2ec>)
 8002db0:	5cd3      	ldrb	r3, [r2, r3]
 8002db2:	fa21 f303 	lsr.w	r3, r1, r3
 8002db6:	4a08      	ldr	r2, [pc, #32]	@ (8002dd8 <HAL_RCC_ClockConfig+0x2f0>)
 8002db8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002dba:	4b08      	ldr	r3, [pc, #32]	@ (8002ddc <HAL_RCC_ClockConfig+0x2f4>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f7fd fd1c 	bl	80007fc <HAL_InitTick>
  
  return HAL_OK;
 8002dc4:	2300      	movs	r3, #0
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3778      	adds	r7, #120	@ 0x78
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	40021000 	.word	0x40021000
 8002dd4:	08003924 	.word	0x08003924
 8002dd8:	20000000 	.word	0x20000000
 8002ddc:	20000004 	.word	0x20000004

08002de0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b087      	sub	sp, #28
 8002de4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002de6:	2300      	movs	r3, #0
 8002de8:	60fb      	str	r3, [r7, #12]
 8002dea:	2300      	movs	r3, #0
 8002dec:	60bb      	str	r3, [r7, #8]
 8002dee:	2300      	movs	r3, #0
 8002df0:	617b      	str	r3, [r7, #20]
 8002df2:	2300      	movs	r3, #0
 8002df4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002df6:	2300      	movs	r3, #0
 8002df8:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002dfa:	4b1e      	ldr	r3, [pc, #120]	@ (8002e74 <HAL_RCC_GetSysClockFreq+0x94>)
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f003 030c 	and.w	r3, r3, #12
 8002e06:	2b04      	cmp	r3, #4
 8002e08:	d002      	beq.n	8002e10 <HAL_RCC_GetSysClockFreq+0x30>
 8002e0a:	2b08      	cmp	r3, #8
 8002e0c:	d003      	beq.n	8002e16 <HAL_RCC_GetSysClockFreq+0x36>
 8002e0e:	e026      	b.n	8002e5e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e10:	4b19      	ldr	r3, [pc, #100]	@ (8002e78 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e12:	613b      	str	r3, [r7, #16]
      break;
 8002e14:	e026      	b.n	8002e64 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	0c9b      	lsrs	r3, r3, #18
 8002e1a:	f003 030f 	and.w	r3, r3, #15
 8002e1e:	4a17      	ldr	r2, [pc, #92]	@ (8002e7c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002e20:	5cd3      	ldrb	r3, [r2, r3]
 8002e22:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002e24:	4b13      	ldr	r3, [pc, #76]	@ (8002e74 <HAL_RCC_GetSysClockFreq+0x94>)
 8002e26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e28:	f003 030f 	and.w	r3, r3, #15
 8002e2c:	4a14      	ldr	r2, [pc, #80]	@ (8002e80 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002e2e:	5cd3      	ldrb	r3, [r2, r3]
 8002e30:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d008      	beq.n	8002e4e <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002e3c:	4a0e      	ldr	r2, [pc, #56]	@ (8002e78 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	fb02 f303 	mul.w	r3, r2, r3
 8002e4a:	617b      	str	r3, [r7, #20]
 8002e4c:	e004      	b.n	8002e58 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4a0c      	ldr	r2, [pc, #48]	@ (8002e84 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002e52:	fb02 f303 	mul.w	r3, r2, r3
 8002e56:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	613b      	str	r3, [r7, #16]
      break;
 8002e5c:	e002      	b.n	8002e64 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e5e:	4b06      	ldr	r3, [pc, #24]	@ (8002e78 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e60:	613b      	str	r3, [r7, #16]
      break;
 8002e62:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e64:	693b      	ldr	r3, [r7, #16]
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	371c      	adds	r7, #28
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop
 8002e74:	40021000 	.word	0x40021000
 8002e78:	007a1200 	.word	0x007a1200
 8002e7c:	0800393c 	.word	0x0800393c
 8002e80:	0800394c 	.word	0x0800394c
 8002e84:	003d0900 	.word	0x003d0900

08002e88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e8c:	4b03      	ldr	r3, [pc, #12]	@ (8002e9c <HAL_RCC_GetHCLKFreq+0x14>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr
 8002e9a:	bf00      	nop
 8002e9c:	20000000 	.word	0x20000000

08002ea0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b082      	sub	sp, #8
 8002ea4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002ea6:	f7ff ffef 	bl	8002e88 <HAL_RCC_GetHCLKFreq>
 8002eaa:	4601      	mov	r1, r0
 8002eac:	4b0b      	ldr	r3, [pc, #44]	@ (8002edc <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002eb4:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002eb8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	fa92 f2a2 	rbit	r2, r2
 8002ec0:	603a      	str	r2, [r7, #0]
  return result;
 8002ec2:	683a      	ldr	r2, [r7, #0]
 8002ec4:	fab2 f282 	clz	r2, r2
 8002ec8:	b2d2      	uxtb	r2, r2
 8002eca:	40d3      	lsrs	r3, r2
 8002ecc:	4a04      	ldr	r2, [pc, #16]	@ (8002ee0 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002ece:	5cd3      	ldrb	r3, [r2, r3]
 8002ed0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3708      	adds	r7, #8
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	40021000 	.word	0x40021000
 8002ee0:	08003934 	.word	0x08003934

08002ee4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b082      	sub	sp, #8
 8002ee8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002eea:	f7ff ffcd 	bl	8002e88 <HAL_RCC_GetHCLKFreq>
 8002eee:	4601      	mov	r1, r0
 8002ef0:	4b0b      	ldr	r3, [pc, #44]	@ (8002f20 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8002ef8:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002efc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	fa92 f2a2 	rbit	r2, r2
 8002f04:	603a      	str	r2, [r7, #0]
  return result;
 8002f06:	683a      	ldr	r2, [r7, #0]
 8002f08:	fab2 f282 	clz	r2, r2
 8002f0c:	b2d2      	uxtb	r2, r2
 8002f0e:	40d3      	lsrs	r3, r2
 8002f10:	4a04      	ldr	r2, [pc, #16]	@ (8002f24 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002f12:	5cd3      	ldrb	r3, [r2, r3]
 8002f14:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3708      	adds	r7, #8
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	40021000 	.word	0x40021000
 8002f24:	08003934 	.word	0x08003934

08002f28 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b092      	sub	sp, #72	@ 0x48
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f30:	2300      	movs	r3, #0
 8002f32:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8002f34:	2300      	movs	r3, #0
 8002f36:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	f000 80cd 	beq.w	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f4c:	4b86      	ldr	r3, [pc, #536]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f4e:	69db      	ldr	r3, [r3, #28]
 8002f50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d10e      	bne.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f58:	4b83      	ldr	r3, [pc, #524]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f5a:	69db      	ldr	r3, [r3, #28]
 8002f5c:	4a82      	ldr	r2, [pc, #520]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f62:	61d3      	str	r3, [r2, #28]
 8002f64:	4b80      	ldr	r3, [pc, #512]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f66:	69db      	ldr	r3, [r3, #28]
 8002f68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f6c:	60bb      	str	r3, [r7, #8]
 8002f6e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f70:	2301      	movs	r3, #1
 8002f72:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f76:	4b7d      	ldr	r3, [pc, #500]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d118      	bne.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f82:	4b7a      	ldr	r3, [pc, #488]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a79      	ldr	r2, [pc, #484]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002f88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f8c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f8e:	f7fd fc79 	bl	8000884 <HAL_GetTick>
 8002f92:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f94:	e008      	b.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f96:	f7fd fc75 	bl	8000884 <HAL_GetTick>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	2b64      	cmp	r3, #100	@ 0x64
 8002fa2:	d901      	bls.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002fa4:	2303      	movs	r3, #3
 8002fa6:	e0db      	b.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fa8:	4b70      	ldr	r3, [pc, #448]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d0f0      	beq.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002fb4:	4b6c      	ldr	r3, [pc, #432]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002fb6:	6a1b      	ldr	r3, [r3, #32]
 8002fb8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002fbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002fbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d07d      	beq.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002fcc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d076      	beq.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002fd2:	4b65      	ldr	r3, [pc, #404]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002fd4:	6a1b      	ldr	r3, [r3, #32]
 8002fd6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002fda:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002fdc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002fe0:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fe4:	fa93 f3a3 	rbit	r3, r3
 8002fe8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002fea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002fec:	fab3 f383 	clz	r3, r3
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	4b5e      	ldr	r3, [pc, #376]	@ (8003170 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002ff6:	4413      	add	r3, r2
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	6013      	str	r3, [r2, #0]
 8003000:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003004:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003006:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003008:	fa93 f3a3 	rbit	r3, r3
 800300c:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800300e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003010:	fab3 f383 	clz	r3, r3
 8003014:	b2db      	uxtb	r3, r3
 8003016:	461a      	mov	r2, r3
 8003018:	4b55      	ldr	r3, [pc, #340]	@ (8003170 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800301a:	4413      	add	r3, r2
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	461a      	mov	r2, r3
 8003020:	2300      	movs	r3, #0
 8003022:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003024:	4a50      	ldr	r2, [pc, #320]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003026:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003028:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800302a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800302c:	f003 0301 	and.w	r3, r3, #1
 8003030:	2b00      	cmp	r3, #0
 8003032:	d045      	beq.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003034:	f7fd fc26 	bl	8000884 <HAL_GetTick>
 8003038:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800303a:	e00a      	b.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800303c:	f7fd fc22 	bl	8000884 <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	f241 3288 	movw	r2, #5000	@ 0x1388
 800304a:	4293      	cmp	r3, r2
 800304c:	d901      	bls.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e086      	b.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8003052:	2302      	movs	r3, #2
 8003054:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003056:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003058:	fa93 f3a3 	rbit	r3, r3
 800305c:	627b      	str	r3, [r7, #36]	@ 0x24
 800305e:	2302      	movs	r3, #2
 8003060:	623b      	str	r3, [r7, #32]
 8003062:	6a3b      	ldr	r3, [r7, #32]
 8003064:	fa93 f3a3 	rbit	r3, r3
 8003068:	61fb      	str	r3, [r7, #28]
  return result;
 800306a:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800306c:	fab3 f383 	clz	r3, r3
 8003070:	b2db      	uxtb	r3, r3
 8003072:	095b      	lsrs	r3, r3, #5
 8003074:	b2db      	uxtb	r3, r3
 8003076:	f043 0302 	orr.w	r3, r3, #2
 800307a:	b2db      	uxtb	r3, r3
 800307c:	2b02      	cmp	r3, #2
 800307e:	d102      	bne.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003080:	4b39      	ldr	r3, [pc, #228]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003082:	6a1b      	ldr	r3, [r3, #32]
 8003084:	e007      	b.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003086:	2302      	movs	r3, #2
 8003088:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800308a:	69bb      	ldr	r3, [r7, #24]
 800308c:	fa93 f3a3 	rbit	r3, r3
 8003090:	617b      	str	r3, [r7, #20]
 8003092:	4b35      	ldr	r3, [pc, #212]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003096:	2202      	movs	r2, #2
 8003098:	613a      	str	r2, [r7, #16]
 800309a:	693a      	ldr	r2, [r7, #16]
 800309c:	fa92 f2a2 	rbit	r2, r2
 80030a0:	60fa      	str	r2, [r7, #12]
  return result;
 80030a2:	68fa      	ldr	r2, [r7, #12]
 80030a4:	fab2 f282 	clz	r2, r2
 80030a8:	b2d2      	uxtb	r2, r2
 80030aa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80030ae:	b2d2      	uxtb	r2, r2
 80030b0:	f002 021f 	and.w	r2, r2, #31
 80030b4:	2101      	movs	r1, #1
 80030b6:	fa01 f202 	lsl.w	r2, r1, r2
 80030ba:	4013      	ands	r3, r2
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d0bd      	beq.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80030c0:	4b29      	ldr	r3, [pc, #164]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80030c2:	6a1b      	ldr	r3, [r3, #32]
 80030c4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	4926      	ldr	r1, [pc, #152]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80030ce:	4313      	orrs	r3, r2
 80030d0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80030d2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d105      	bne.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030da:	4b23      	ldr	r3, [pc, #140]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80030dc:	69db      	ldr	r3, [r3, #28]
 80030de:	4a22      	ldr	r2, [pc, #136]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80030e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80030e4:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0301 	and.w	r3, r3, #1
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d008      	beq.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80030f2:	4b1d      	ldr	r3, [pc, #116]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80030f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030f6:	f023 0203 	bic.w	r2, r3, #3
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	491a      	ldr	r1, [pc, #104]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003100:	4313      	orrs	r3, r2
 8003102:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 0320 	and.w	r3, r3, #32
 800310c:	2b00      	cmp	r3, #0
 800310e:	d008      	beq.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003110:	4b15      	ldr	r3, [pc, #84]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003112:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003114:	f023 0210 	bic.w	r2, r3, #16
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	4912      	ldr	r1, [pc, #72]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800311e:	4313      	orrs	r3, r2
 8003120:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800312a:	2b00      	cmp	r3, #0
 800312c:	d008      	beq.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800312e:	4b0e      	ldr	r3, [pc, #56]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003130:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003132:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	691b      	ldr	r3, [r3, #16]
 800313a:	490b      	ldr	r1, [pc, #44]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800313c:	4313      	orrs	r3, r2
 800313e:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003148:	2b00      	cmp	r3, #0
 800314a:	d008      	beq.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800314c:	4b06      	ldr	r3, [pc, #24]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800314e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003150:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	695b      	ldr	r3, [r3, #20]
 8003158:	4903      	ldr	r1, [pc, #12]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800315a:	4313      	orrs	r3, r2
 800315c:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800315e:	2300      	movs	r3, #0
}
 8003160:	4618      	mov	r0, r3
 8003162:	3748      	adds	r7, #72	@ 0x48
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}
 8003168:	40021000 	.word	0x40021000
 800316c:	40007000 	.word	0x40007000
 8003170:	10908100 	.word	0x10908100

08003174 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b082      	sub	sp, #8
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d101      	bne.n	8003186 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e040      	b.n	8003208 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800318a:	2b00      	cmp	r3, #0
 800318c:	d106      	bne.n	800319c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f7fd fa6a 	bl	8000670 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2224      	movs	r2, #36	@ 0x24
 80031a0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f022 0201 	bic.w	r2, r2, #1
 80031b0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d002      	beq.n	80031c0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f000 f95e 	bl	800347c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f000 f825 	bl	8003210 <UART_SetConfig>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d101      	bne.n	80031d0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e01b      	b.n	8003208 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	685a      	ldr	r2, [r3, #4]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80031de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	689a      	ldr	r2, [r3, #8]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80031ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f042 0201 	orr.w	r2, r2, #1
 80031fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	f000 f9dd 	bl	80035c0 <UART_CheckIdleState>
 8003206:	4603      	mov	r3, r0
}
 8003208:	4618      	mov	r0, r3
 800320a:	3708      	adds	r7, #8
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}

08003210 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b088      	sub	sp, #32
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003218:	2300      	movs	r3, #0
 800321a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	689a      	ldr	r2, [r3, #8]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	691b      	ldr	r3, [r3, #16]
 8003224:	431a      	orrs	r2, r3
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	695b      	ldr	r3, [r3, #20]
 800322a:	431a      	orrs	r2, r3
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	69db      	ldr	r3, [r3, #28]
 8003230:	4313      	orrs	r3, r2
 8003232:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	4b8a      	ldr	r3, [pc, #552]	@ (8003464 <UART_SetConfig+0x254>)
 800323c:	4013      	ands	r3, r2
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	6812      	ldr	r2, [r2, #0]
 8003242:	6979      	ldr	r1, [r7, #20]
 8003244:	430b      	orrs	r3, r1
 8003246:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	68da      	ldr	r2, [r3, #12]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	430a      	orrs	r2, r1
 800325c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	699b      	ldr	r3, [r3, #24]
 8003262:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6a1b      	ldr	r3, [r3, #32]
 8003268:	697a      	ldr	r2, [r7, #20]
 800326a:	4313      	orrs	r3, r2
 800326c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	697a      	ldr	r2, [r7, #20]
 800327e:	430a      	orrs	r2, r1
 8003280:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a78      	ldr	r2, [pc, #480]	@ (8003468 <UART_SetConfig+0x258>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d120      	bne.n	80032ce <UART_SetConfig+0xbe>
 800328c:	4b77      	ldr	r3, [pc, #476]	@ (800346c <UART_SetConfig+0x25c>)
 800328e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003290:	f003 0303 	and.w	r3, r3, #3
 8003294:	2b03      	cmp	r3, #3
 8003296:	d817      	bhi.n	80032c8 <UART_SetConfig+0xb8>
 8003298:	a201      	add	r2, pc, #4	@ (adr r2, 80032a0 <UART_SetConfig+0x90>)
 800329a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800329e:	bf00      	nop
 80032a0:	080032b1 	.word	0x080032b1
 80032a4:	080032bd 	.word	0x080032bd
 80032a8:	080032c3 	.word	0x080032c3
 80032ac:	080032b7 	.word	0x080032b7
 80032b0:	2300      	movs	r3, #0
 80032b2:	77fb      	strb	r3, [r7, #31]
 80032b4:	e01d      	b.n	80032f2 <UART_SetConfig+0xe2>
 80032b6:	2302      	movs	r3, #2
 80032b8:	77fb      	strb	r3, [r7, #31]
 80032ba:	e01a      	b.n	80032f2 <UART_SetConfig+0xe2>
 80032bc:	2304      	movs	r3, #4
 80032be:	77fb      	strb	r3, [r7, #31]
 80032c0:	e017      	b.n	80032f2 <UART_SetConfig+0xe2>
 80032c2:	2308      	movs	r3, #8
 80032c4:	77fb      	strb	r3, [r7, #31]
 80032c6:	e014      	b.n	80032f2 <UART_SetConfig+0xe2>
 80032c8:	2310      	movs	r3, #16
 80032ca:	77fb      	strb	r3, [r7, #31]
 80032cc:	e011      	b.n	80032f2 <UART_SetConfig+0xe2>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a67      	ldr	r2, [pc, #412]	@ (8003470 <UART_SetConfig+0x260>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d102      	bne.n	80032de <UART_SetConfig+0xce>
 80032d8:	2300      	movs	r3, #0
 80032da:	77fb      	strb	r3, [r7, #31]
 80032dc:	e009      	b.n	80032f2 <UART_SetConfig+0xe2>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a64      	ldr	r2, [pc, #400]	@ (8003474 <UART_SetConfig+0x264>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d102      	bne.n	80032ee <UART_SetConfig+0xde>
 80032e8:	2300      	movs	r3, #0
 80032ea:	77fb      	strb	r3, [r7, #31]
 80032ec:	e001      	b.n	80032f2 <UART_SetConfig+0xe2>
 80032ee:	2310      	movs	r3, #16
 80032f0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	69db      	ldr	r3, [r3, #28]
 80032f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80032fa:	d15a      	bne.n	80033b2 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80032fc:	7ffb      	ldrb	r3, [r7, #31]
 80032fe:	2b08      	cmp	r3, #8
 8003300:	d827      	bhi.n	8003352 <UART_SetConfig+0x142>
 8003302:	a201      	add	r2, pc, #4	@ (adr r2, 8003308 <UART_SetConfig+0xf8>)
 8003304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003308:	0800332d 	.word	0x0800332d
 800330c:	08003335 	.word	0x08003335
 8003310:	0800333d 	.word	0x0800333d
 8003314:	08003353 	.word	0x08003353
 8003318:	08003343 	.word	0x08003343
 800331c:	08003353 	.word	0x08003353
 8003320:	08003353 	.word	0x08003353
 8003324:	08003353 	.word	0x08003353
 8003328:	0800334b 	.word	0x0800334b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800332c:	f7ff fdb8 	bl	8002ea0 <HAL_RCC_GetPCLK1Freq>
 8003330:	61b8      	str	r0, [r7, #24]
        break;
 8003332:	e013      	b.n	800335c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003334:	f7ff fdd6 	bl	8002ee4 <HAL_RCC_GetPCLK2Freq>
 8003338:	61b8      	str	r0, [r7, #24]
        break;
 800333a:	e00f      	b.n	800335c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800333c:	4b4e      	ldr	r3, [pc, #312]	@ (8003478 <UART_SetConfig+0x268>)
 800333e:	61bb      	str	r3, [r7, #24]
        break;
 8003340:	e00c      	b.n	800335c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003342:	f7ff fd4d 	bl	8002de0 <HAL_RCC_GetSysClockFreq>
 8003346:	61b8      	str	r0, [r7, #24]
        break;
 8003348:	e008      	b.n	800335c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800334a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800334e:	61bb      	str	r3, [r7, #24]
        break;
 8003350:	e004      	b.n	800335c <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8003352:	2300      	movs	r3, #0
 8003354:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	77bb      	strb	r3, [r7, #30]
        break;
 800335a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800335c:	69bb      	ldr	r3, [r7, #24]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d074      	beq.n	800344c <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003362:	69bb      	ldr	r3, [r7, #24]
 8003364:	005a      	lsls	r2, r3, #1
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	085b      	lsrs	r3, r3, #1
 800336c:	441a      	add	r2, r3
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	fbb2 f3f3 	udiv	r3, r2, r3
 8003376:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	2b0f      	cmp	r3, #15
 800337c:	d916      	bls.n	80033ac <UART_SetConfig+0x19c>
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003384:	d212      	bcs.n	80033ac <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	b29b      	uxth	r3, r3
 800338a:	f023 030f 	bic.w	r3, r3, #15
 800338e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	085b      	lsrs	r3, r3, #1
 8003394:	b29b      	uxth	r3, r3
 8003396:	f003 0307 	and.w	r3, r3, #7
 800339a:	b29a      	uxth	r2, r3
 800339c:	89fb      	ldrh	r3, [r7, #14]
 800339e:	4313      	orrs	r3, r2
 80033a0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	89fa      	ldrh	r2, [r7, #14]
 80033a8:	60da      	str	r2, [r3, #12]
 80033aa:	e04f      	b.n	800344c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	77bb      	strb	r3, [r7, #30]
 80033b0:	e04c      	b.n	800344c <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80033b2:	7ffb      	ldrb	r3, [r7, #31]
 80033b4:	2b08      	cmp	r3, #8
 80033b6:	d828      	bhi.n	800340a <UART_SetConfig+0x1fa>
 80033b8:	a201      	add	r2, pc, #4	@ (adr r2, 80033c0 <UART_SetConfig+0x1b0>)
 80033ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033be:	bf00      	nop
 80033c0:	080033e5 	.word	0x080033e5
 80033c4:	080033ed 	.word	0x080033ed
 80033c8:	080033f5 	.word	0x080033f5
 80033cc:	0800340b 	.word	0x0800340b
 80033d0:	080033fb 	.word	0x080033fb
 80033d4:	0800340b 	.word	0x0800340b
 80033d8:	0800340b 	.word	0x0800340b
 80033dc:	0800340b 	.word	0x0800340b
 80033e0:	08003403 	.word	0x08003403
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033e4:	f7ff fd5c 	bl	8002ea0 <HAL_RCC_GetPCLK1Freq>
 80033e8:	61b8      	str	r0, [r7, #24]
        break;
 80033ea:	e013      	b.n	8003414 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80033ec:	f7ff fd7a 	bl	8002ee4 <HAL_RCC_GetPCLK2Freq>
 80033f0:	61b8      	str	r0, [r7, #24]
        break;
 80033f2:	e00f      	b.n	8003414 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033f4:	4b20      	ldr	r3, [pc, #128]	@ (8003478 <UART_SetConfig+0x268>)
 80033f6:	61bb      	str	r3, [r7, #24]
        break;
 80033f8:	e00c      	b.n	8003414 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033fa:	f7ff fcf1 	bl	8002de0 <HAL_RCC_GetSysClockFreq>
 80033fe:	61b8      	str	r0, [r7, #24]
        break;
 8003400:	e008      	b.n	8003414 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003402:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003406:	61bb      	str	r3, [r7, #24]
        break;
 8003408:	e004      	b.n	8003414 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800340a:	2300      	movs	r3, #0
 800340c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	77bb      	strb	r3, [r7, #30]
        break;
 8003412:	bf00      	nop
    }

    if (pclk != 0U)
 8003414:	69bb      	ldr	r3, [r7, #24]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d018      	beq.n	800344c <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	085a      	lsrs	r2, r3, #1
 8003420:	69bb      	ldr	r3, [r7, #24]
 8003422:	441a      	add	r2, r3
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	fbb2 f3f3 	udiv	r3, r2, r3
 800342c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	2b0f      	cmp	r3, #15
 8003432:	d909      	bls.n	8003448 <UART_SetConfig+0x238>
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800343a:	d205      	bcs.n	8003448 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	b29a      	uxth	r2, r3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	60da      	str	r2, [r3, #12]
 8003446:	e001      	b.n	800344c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2200      	movs	r2, #0
 8003450:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2200      	movs	r2, #0
 8003456:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003458:	7fbb      	ldrb	r3, [r7, #30]
}
 800345a:	4618      	mov	r0, r3
 800345c:	3720      	adds	r7, #32
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	efff69f3 	.word	0xefff69f3
 8003468:	40013800 	.word	0x40013800
 800346c:	40021000 	.word	0x40021000
 8003470:	40004400 	.word	0x40004400
 8003474:	40004800 	.word	0x40004800
 8003478:	007a1200 	.word	0x007a1200

0800347c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800347c:	b480      	push	{r7}
 800347e:	b083      	sub	sp, #12
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003488:	f003 0308 	and.w	r3, r3, #8
 800348c:	2b00      	cmp	r3, #0
 800348e:	d00a      	beq.n	80034a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	430a      	orrs	r2, r1
 80034a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034aa:	f003 0301 	and.w	r3, r3, #1
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d00a      	beq.n	80034c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	430a      	orrs	r2, r1
 80034c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034cc:	f003 0302 	and.w	r3, r3, #2
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d00a      	beq.n	80034ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	430a      	orrs	r2, r1
 80034e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ee:	f003 0304 	and.w	r3, r3, #4
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d00a      	beq.n	800350c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	430a      	orrs	r2, r1
 800350a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003510:	f003 0310 	and.w	r3, r3, #16
 8003514:	2b00      	cmp	r3, #0
 8003516:	d00a      	beq.n	800352e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	430a      	orrs	r2, r1
 800352c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003532:	f003 0320 	and.w	r3, r3, #32
 8003536:	2b00      	cmp	r3, #0
 8003538:	d00a      	beq.n	8003550 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	430a      	orrs	r2, r1
 800354e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003554:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003558:	2b00      	cmp	r3, #0
 800355a:	d01a      	beq.n	8003592 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	430a      	orrs	r2, r1
 8003570:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003576:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800357a:	d10a      	bne.n	8003592 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	430a      	orrs	r2, r1
 8003590:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003596:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800359a:	2b00      	cmp	r3, #0
 800359c:	d00a      	beq.n	80035b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	430a      	orrs	r2, r1
 80035b2:	605a      	str	r2, [r3, #4]
  }
}
 80035b4:	bf00      	nop
 80035b6:	370c      	adds	r7, #12
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr

080035c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b098      	sub	sp, #96	@ 0x60
 80035c4:	af02      	add	r7, sp, #8
 80035c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2200      	movs	r2, #0
 80035cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80035d0:	f7fd f958 	bl	8000884 <HAL_GetTick>
 80035d4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0308 	and.w	r3, r3, #8
 80035e0:	2b08      	cmp	r3, #8
 80035e2:	d12e      	bne.n	8003642 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035e4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80035e8:	9300      	str	r3, [sp, #0]
 80035ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035ec:	2200      	movs	r2, #0
 80035ee:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f000 f88c 	bl	8003710 <UART_WaitOnFlagUntilTimeout>
 80035f8:	4603      	mov	r3, r0
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d021      	beq.n	8003642 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003604:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003606:	e853 3f00 	ldrex	r3, [r3]
 800360a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800360c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800360e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003612:	653b      	str	r3, [r7, #80]	@ 0x50
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	461a      	mov	r2, r3
 800361a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800361c:	647b      	str	r3, [r7, #68]	@ 0x44
 800361e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003620:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003622:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003624:	e841 2300 	strex	r3, r2, [r1]
 8003628:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800362a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800362c:	2b00      	cmp	r3, #0
 800362e:	d1e6      	bne.n	80035fe <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2220      	movs	r2, #32
 8003634:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2200      	movs	r2, #0
 800363a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	e062      	b.n	8003708 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 0304 	and.w	r3, r3, #4
 800364c:	2b04      	cmp	r3, #4
 800364e:	d149      	bne.n	80036e4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003650:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003654:	9300      	str	r3, [sp, #0]
 8003656:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003658:	2200      	movs	r2, #0
 800365a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f000 f856 	bl	8003710 <UART_WaitOnFlagUntilTimeout>
 8003664:	4603      	mov	r3, r0
 8003666:	2b00      	cmp	r3, #0
 8003668:	d03c      	beq.n	80036e4 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003672:	e853 3f00 	ldrex	r3, [r3]
 8003676:	623b      	str	r3, [r7, #32]
   return(result);
 8003678:	6a3b      	ldr	r3, [r7, #32]
 800367a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800367e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	461a      	mov	r2, r3
 8003686:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003688:	633b      	str	r3, [r7, #48]	@ 0x30
 800368a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800368c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800368e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003690:	e841 2300 	strex	r3, r2, [r1]
 8003694:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003696:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003698:	2b00      	cmp	r3, #0
 800369a:	d1e6      	bne.n	800366a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	3308      	adds	r3, #8
 80036a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	e853 3f00 	ldrex	r3, [r3]
 80036aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f023 0301 	bic.w	r3, r3, #1
 80036b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	3308      	adds	r3, #8
 80036ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80036bc:	61fa      	str	r2, [r7, #28]
 80036be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036c0:	69b9      	ldr	r1, [r7, #24]
 80036c2:	69fa      	ldr	r2, [r7, #28]
 80036c4:	e841 2300 	strex	r3, r2, [r1]
 80036c8:	617b      	str	r3, [r7, #20]
   return(result);
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d1e5      	bne.n	800369c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2220      	movs	r2, #32
 80036d4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2200      	movs	r2, #0
 80036dc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80036e0:	2303      	movs	r3, #3
 80036e2:	e011      	b.n	8003708 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2220      	movs	r2, #32
 80036e8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2220      	movs	r2, #32
 80036ee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2200      	movs	r2, #0
 80036fc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2200      	movs	r2, #0
 8003702:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003706:	2300      	movs	r3, #0
}
 8003708:	4618      	mov	r0, r3
 800370a:	3758      	adds	r7, #88	@ 0x58
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}

08003710 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b084      	sub	sp, #16
 8003714:	af00      	add	r7, sp, #0
 8003716:	60f8      	str	r0, [r7, #12]
 8003718:	60b9      	str	r1, [r7, #8]
 800371a:	603b      	str	r3, [r7, #0]
 800371c:	4613      	mov	r3, r2
 800371e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003720:	e04f      	b.n	80037c2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003722:	69bb      	ldr	r3, [r7, #24]
 8003724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003728:	d04b      	beq.n	80037c2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800372a:	f7fd f8ab 	bl	8000884 <HAL_GetTick>
 800372e:	4602      	mov	r2, r0
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	69ba      	ldr	r2, [r7, #24]
 8003736:	429a      	cmp	r2, r3
 8003738:	d302      	bcc.n	8003740 <UART_WaitOnFlagUntilTimeout+0x30>
 800373a:	69bb      	ldr	r3, [r7, #24]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d101      	bne.n	8003744 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003740:	2303      	movs	r3, #3
 8003742:	e04e      	b.n	80037e2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0304 	and.w	r3, r3, #4
 800374e:	2b00      	cmp	r3, #0
 8003750:	d037      	beq.n	80037c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	2b80      	cmp	r3, #128	@ 0x80
 8003756:	d034      	beq.n	80037c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	2b40      	cmp	r3, #64	@ 0x40
 800375c:	d031      	beq.n	80037c2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	69db      	ldr	r3, [r3, #28]
 8003764:	f003 0308 	and.w	r3, r3, #8
 8003768:	2b08      	cmp	r3, #8
 800376a:	d110      	bne.n	800378e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	2208      	movs	r2, #8
 8003772:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003774:	68f8      	ldr	r0, [r7, #12]
 8003776:	f000 f838 	bl	80037ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2208      	movs	r2, #8
 800377e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2200      	movs	r2, #0
 8003786:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e029      	b.n	80037e2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	69db      	ldr	r3, [r3, #28]
 8003794:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003798:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800379c:	d111      	bne.n	80037c2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80037a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80037a8:	68f8      	ldr	r0, [r7, #12]
 80037aa:	f000 f81e 	bl	80037ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2220      	movs	r2, #32
 80037b2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80037be:	2303      	movs	r3, #3
 80037c0:	e00f      	b.n	80037e2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	69da      	ldr	r2, [r3, #28]
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	4013      	ands	r3, r2
 80037cc:	68ba      	ldr	r2, [r7, #8]
 80037ce:	429a      	cmp	r2, r3
 80037d0:	bf0c      	ite	eq
 80037d2:	2301      	moveq	r3, #1
 80037d4:	2300      	movne	r3, #0
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	461a      	mov	r2, r3
 80037da:	79fb      	ldrb	r3, [r7, #7]
 80037dc:	429a      	cmp	r2, r3
 80037de:	d0a0      	beq.n	8003722 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80037e0:	2300      	movs	r3, #0
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3710      	adds	r7, #16
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}

080037ea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80037ea:	b480      	push	{r7}
 80037ec:	b095      	sub	sp, #84	@ 0x54
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037fa:	e853 3f00 	ldrex	r3, [r3]
 80037fe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003802:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003806:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	461a      	mov	r2, r3
 800380e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003810:	643b      	str	r3, [r7, #64]	@ 0x40
 8003812:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003814:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003816:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003818:	e841 2300 	strex	r3, r2, [r1]
 800381c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800381e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003820:	2b00      	cmp	r3, #0
 8003822:	d1e6      	bne.n	80037f2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	3308      	adds	r3, #8
 800382a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800382c:	6a3b      	ldr	r3, [r7, #32]
 800382e:	e853 3f00 	ldrex	r3, [r3]
 8003832:	61fb      	str	r3, [r7, #28]
   return(result);
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	f023 0301 	bic.w	r3, r3, #1
 800383a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	3308      	adds	r3, #8
 8003842:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003844:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003846:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003848:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800384a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800384c:	e841 2300 	strex	r3, r2, [r1]
 8003850:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003854:	2b00      	cmp	r3, #0
 8003856:	d1e5      	bne.n	8003824 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800385c:	2b01      	cmp	r3, #1
 800385e:	d118      	bne.n	8003892 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	e853 3f00 	ldrex	r3, [r3]
 800386c:	60bb      	str	r3, [r7, #8]
   return(result);
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	f023 0310 	bic.w	r3, r3, #16
 8003874:	647b      	str	r3, [r7, #68]	@ 0x44
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	461a      	mov	r2, r3
 800387c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800387e:	61bb      	str	r3, [r7, #24]
 8003880:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003882:	6979      	ldr	r1, [r7, #20]
 8003884:	69ba      	ldr	r2, [r7, #24]
 8003886:	e841 2300 	strex	r3, r2, [r1]
 800388a:	613b      	str	r3, [r7, #16]
   return(result);
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d1e6      	bne.n	8003860 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2220      	movs	r2, #32
 8003896:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2200      	movs	r2, #0
 800389e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2200      	movs	r2, #0
 80038a4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80038a6:	bf00      	nop
 80038a8:	3754      	adds	r7, #84	@ 0x54
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr

080038b2 <memset>:
 80038b2:	4402      	add	r2, r0
 80038b4:	4603      	mov	r3, r0
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d100      	bne.n	80038bc <memset+0xa>
 80038ba:	4770      	bx	lr
 80038bc:	f803 1b01 	strb.w	r1, [r3], #1
 80038c0:	e7f9      	b.n	80038b6 <memset+0x4>
	...

080038c4 <__libc_init_array>:
 80038c4:	b570      	push	{r4, r5, r6, lr}
 80038c6:	4d0d      	ldr	r5, [pc, #52]	@ (80038fc <__libc_init_array+0x38>)
 80038c8:	4c0d      	ldr	r4, [pc, #52]	@ (8003900 <__libc_init_array+0x3c>)
 80038ca:	1b64      	subs	r4, r4, r5
 80038cc:	10a4      	asrs	r4, r4, #2
 80038ce:	2600      	movs	r6, #0
 80038d0:	42a6      	cmp	r6, r4
 80038d2:	d109      	bne.n	80038e8 <__libc_init_array+0x24>
 80038d4:	4d0b      	ldr	r5, [pc, #44]	@ (8003904 <__libc_init_array+0x40>)
 80038d6:	4c0c      	ldr	r4, [pc, #48]	@ (8003908 <__libc_init_array+0x44>)
 80038d8:	f000 f818 	bl	800390c <_init>
 80038dc:	1b64      	subs	r4, r4, r5
 80038de:	10a4      	asrs	r4, r4, #2
 80038e0:	2600      	movs	r6, #0
 80038e2:	42a6      	cmp	r6, r4
 80038e4:	d105      	bne.n	80038f2 <__libc_init_array+0x2e>
 80038e6:	bd70      	pop	{r4, r5, r6, pc}
 80038e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80038ec:	4798      	blx	r3
 80038ee:	3601      	adds	r6, #1
 80038f0:	e7ee      	b.n	80038d0 <__libc_init_array+0xc>
 80038f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80038f6:	4798      	blx	r3
 80038f8:	3601      	adds	r6, #1
 80038fa:	e7f2      	b.n	80038e2 <__libc_init_array+0x1e>
 80038fc:	0800395c 	.word	0x0800395c
 8003900:	0800395c 	.word	0x0800395c
 8003904:	0800395c 	.word	0x0800395c
 8003908:	08003960 	.word	0x08003960

0800390c <_init>:
 800390c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800390e:	bf00      	nop
 8003910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003912:	bc08      	pop	{r3}
 8003914:	469e      	mov	lr, r3
 8003916:	4770      	bx	lr

08003918 <_fini>:
 8003918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800391a:	bf00      	nop
 800391c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800391e:	bc08      	pop	{r3}
 8003920:	469e      	mov	lr, r3
 8003922:	4770      	bx	lr
