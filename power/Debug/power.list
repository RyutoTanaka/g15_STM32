
power.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ad0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08006c60  08006c60  00007c60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d18  08006d18  00008068  2**0
                  CONTENTS
  4 .ARM          00000008  08006d18  08006d18  00007d18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d20  08006d20  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d20  08006d20  00007d20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006d24  08006d24  00007d24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08006d28  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00008068  2**0
                  CONTENTS
 10 .bss          00000398  20000068  20000068  00008068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000400  20000400  00008068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013685  00000000  00000000  00008098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000026a2  00000000  00000000  0001b71d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001120  00000000  00000000  0001ddc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d5a  00000000  00000000  0001eee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d8ec  00000000  00000000  0001fc3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001489e  00000000  00000000  0003d526  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b0b87  00000000  00000000  00051dc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010294b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000050f4  00000000  00000000  00102990  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000065  00000000  00000000  00107a84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006c48 	.word	0x08006c48

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08006c48 	.word	0x08006c48

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <powerCommandDeserialize>:

void powerCommandSerialize(PowerCommand* data, uint8_t* buffer){
	*buffer =  (uint8_t)(data->motor_output) + ((uint8_t)data->power_off << 1);
}

void powerCommandDeserialize(PowerCommand* data, uint8_t* buffer){
 8000270:	b480      	push	{r7}
 8000272:	b083      	sub	sp, #12
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
 8000278:	6039      	str	r1, [r7, #0]
	data->motor_output = (buffer[0]&0x01)==0x01;
 800027a:	683b      	ldr	r3, [r7, #0]
 800027c:	781b      	ldrb	r3, [r3, #0]
 800027e:	f003 0301 	and.w	r3, r3, #1
 8000282:	2b00      	cmp	r3, #0
 8000284:	bf14      	ite	ne
 8000286:	2301      	movne	r3, #1
 8000288:	2300      	moveq	r3, #0
 800028a:	b2da      	uxtb	r2, r3
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	701a      	strb	r2, [r3, #0]
	data->power_off = (buffer[0]&0x02)==0x02;
 8000290:	683b      	ldr	r3, [r7, #0]
 8000292:	781b      	ldrb	r3, [r3, #0]
 8000294:	f003 0302 	and.w	r3, r3, #2
 8000298:	2b00      	cmp	r3, #0
 800029a:	bf14      	ite	ne
 800029c:	2301      	movne	r3, #1
 800029e:	2300      	moveq	r3, #0
 80002a0:	b2da      	uxtb	r2, r3
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	705a      	strb	r2, [r3, #1]
}
 80002a6:	bf00      	nop
 80002a8:	370c      	adds	r7, #12
 80002aa:	46bd      	mov	sp, r7
 80002ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b0:	4770      	bx	lr

080002b2 <powerResultSerialize>:

void powerResultSerialize(PowerResult* data, uint8_t* buffer){
 80002b2:	b480      	push	{r7}
 80002b4:	b083      	sub	sp, #12
 80002b6:	af00      	add	r7, sp, #0
 80002b8:	6078      	str	r0, [r7, #4]
 80002ba:	6039      	str	r1, [r7, #0]
	buffer[0] = (uint8_t)(data->emergency) + ((uint8_t)data->motor_output << 1);
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	781b      	ldrb	r3, [r3, #0]
 80002c0:	461a      	mov	r2, r3
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	785b      	ldrb	r3, [r3, #1]
 80002c6:	005b      	lsls	r3, r3, #1
 80002c8:	b2db      	uxtb	r3, r3
 80002ca:	4413      	add	r3, r2
 80002cc:	b2da      	uxtb	r2, r3
 80002ce:	683b      	ldr	r3, [r7, #0]
 80002d0:	701a      	strb	r2, [r3, #0]
	buffer[1] = data->v_bat;
 80002d2:	683b      	ldr	r3, [r7, #0]
 80002d4:	3301      	adds	r3, #1
 80002d6:	687a      	ldr	r2, [r7, #4]
 80002d8:	7892      	ldrb	r2, [r2, #2]
 80002da:	701a      	strb	r2, [r3, #0]
	buffer[2] = data->i_bat;
 80002dc:	683b      	ldr	r3, [r7, #0]
 80002de:	3302      	adds	r3, #2
 80002e0:	687a      	ldr	r2, [r7, #4]
 80002e2:	78d2      	ldrb	r2, [r2, #3]
 80002e4:	701a      	strb	r2, [r3, #0]
}
 80002e6:	bf00      	nop
 80002e8:	370c      	adds	r7, #12
 80002ea:	46bd      	mov	sp, r7
 80002ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f0:	4770      	bx	lr
	...

080002f4 <canInit>:

static CAN_FilterTypeDef g_filter;

static bool g_updated = false;

HAL_StatusTypeDef canInit(CAN_HandleTypeDef *hcan){
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b082      	sub	sp, #8
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	6078      	str	r0, [r7, #4]
	g_hcan = hcan;
 80002fc:	4a1f      	ldr	r2, [pc, #124]	@ (800037c <canInit+0x88>)
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	6013      	str	r3, [r2, #0]
	g_filter.FilterIdHigh         = MDC_CAN_ID << 5;               // フィルターID(上位16ビット)
 8000302:	4b1f      	ldr	r3, [pc, #124]	@ (8000380 <canInit+0x8c>)
 8000304:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000308:	601a      	str	r2, [r3, #0]
	g_filter.FilterIdLow          = MDC_CAN_ID << 5;     // フィルターID(下位16ビット)                         // フィルターマスク(下位16ビット)
 800030a:	4b1d      	ldr	r3, [pc, #116]	@ (8000380 <canInit+0x8c>)
 800030c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000310:	605a      	str	r2, [r3, #4]
	g_filter.FilterScale          = CAN_FILTERSCALE_16BIT;    // フィルタースケール
 8000312:	4b1b      	ldr	r3, [pc, #108]	@ (8000380 <canInit+0x8c>)
 8000314:	2200      	movs	r2, #0
 8000316:	61da      	str	r2, [r3, #28]
	g_filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;         // フィルターに割り当てるFIFO
 8000318:	4b19      	ldr	r3, [pc, #100]	@ (8000380 <canInit+0x8c>)
 800031a:	2200      	movs	r2, #0
 800031c:	611a      	str	r2, [r3, #16]
	g_filter.FilterBank           = 0;                        // フィルターバンクNo
 800031e:	4b18      	ldr	r3, [pc, #96]	@ (8000380 <canInit+0x8c>)
 8000320:	2200      	movs	r2, #0
 8000322:	615a      	str	r2, [r3, #20]
	g_filter.FilterMode           = CAN_FILTERMODE_IDLIST;    // フィルターモード
 8000324:	4b16      	ldr	r3, [pc, #88]	@ (8000380 <canInit+0x8c>)
 8000326:	2201      	movs	r2, #1
 8000328:	619a      	str	r2, [r3, #24]
	g_filter.SlaveStartFilterBank = 14;                       // スレーブCANの開始フィルターバンクNo
 800032a:	4b15      	ldr	r3, [pc, #84]	@ (8000380 <canInit+0x8c>)
 800032c:	220e      	movs	r2, #14
 800032e:	625a      	str	r2, [r3, #36]	@ 0x24
	g_filter.FilterActivation     = ENABLE;                   // フィルター無効／有効
 8000330:	4b13      	ldr	r3, [pc, #76]	@ (8000380 <canInit+0x8c>)
 8000332:	2201      	movs	r2, #1
 8000334:	621a      	str	r2, [r3, #32]
	HAL_CAN_Stop(hcan);
 8000336:	6878      	ldr	r0, [r7, #4]
 8000338:	f002 f9af 	bl	800269a <HAL_CAN_Stop>
	if (HAL_CAN_ConfigFilter(hcan, &g_filter) != HAL_OK) return HAL_ERROR;
 800033c:	4910      	ldr	r1, [pc, #64]	@ (8000380 <canInit+0x8c>)
 800033e:	6878      	ldr	r0, [r7, #4]
 8000340:	f002 f89d 	bl	800247e <HAL_CAN_ConfigFilter>
 8000344:	4603      	mov	r3, r0
 8000346:	2b00      	cmp	r3, #0
 8000348:	d001      	beq.n	800034e <canInit+0x5a>
 800034a:	2301      	movs	r3, #1
 800034c:	e011      	b.n	8000372 <canInit+0x7e>
	if (HAL_CAN_Start(hcan)!=HAL_OK) return HAL_ERROR;
 800034e:	6878      	ldr	r0, [r7, #4]
 8000350:	f002 f95f 	bl	8002612 <HAL_CAN_Start>
 8000354:	4603      	mov	r3, r0
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <canInit+0x6a>
 800035a:	2301      	movs	r3, #1
 800035c:	e009      	b.n	8000372 <canInit+0x7e>
	if (HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING)!=HAL_OK) return HAL_ERROR;
 800035e:	2102      	movs	r1, #2
 8000360:	6878      	ldr	r0, [r7, #4]
 8000362:	f002 fc0a 	bl	8002b7a <HAL_CAN_ActivateNotification>
 8000366:	4603      	mov	r3, r0
 8000368:	2b00      	cmp	r3, #0
 800036a:	d001      	beq.n	8000370 <canInit+0x7c>
 800036c:	2301      	movs	r3, #1
 800036e:	e000      	b.n	8000372 <canInit+0x7e>
	return HAL_OK;
 8000370:	2300      	movs	r3, #0
}
 8000372:	4618      	mov	r0, r3
 8000374:	3708      	adds	r7, #8
 8000376:	46bd      	mov	sp, r7
 8000378:	bd80      	pop	{r7, pc}
 800037a:	bf00      	nop
 800037c:	2000008c 	.word	0x2000008c
 8000380:	20000090 	.word	0x20000090

08000384 <getCanData>:

void getCanData(PowerCommand* cmd){
 8000384:	b580      	push	{r7, lr}
 8000386:	b082      	sub	sp, #8
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]
	g_updated = false;
 800038c:	4b05      	ldr	r3, [pc, #20]	@ (80003a4 <getCanData+0x20>)
 800038e:	2200      	movs	r2, #0
 8000390:	701a      	strb	r2, [r3, #0]
	powerCommandDeserialize(cmd, g_rx_data);
 8000392:	4905      	ldr	r1, [pc, #20]	@ (80003a8 <getCanData+0x24>)
 8000394:	6878      	ldr	r0, [r7, #4]
 8000396:	f7ff ff6b 	bl	8000270 <powerCommandDeserialize>
}
 800039a:	bf00      	nop
 800039c:	3708      	adds	r7, #8
 800039e:	46bd      	mov	sp, r7
 80003a0:	bd80      	pop	{r7, pc}
 80003a2:	bf00      	nop
 80003a4:	200000b8 	.word	0x200000b8
 80003a8:	20000088 	.word	0x20000088

080003ac <setCanData>:

void setCanData(PowerResult* res){
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b082      	sub	sp, #8
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]
	powerResultSerialize(res,g_tx_data);
 80003b4:	4903      	ldr	r1, [pc, #12]	@ (80003c4 <setCanData+0x18>)
 80003b6:	6878      	ldr	r0, [r7, #4]
 80003b8:	f7ff ff7b 	bl	80002b2 <powerResultSerialize>
}
 80003bc:	bf00      	nop
 80003be:	3708      	adds	r7, #8
 80003c0:	46bd      	mov	sp, r7
 80003c2:	bd80      	pop	{r7, pc}
 80003c4:	20000084 	.word	0x20000084

080003c8 <isCanUpdated>:

bool isCanUpdated(){
 80003c8:	b480      	push	{r7}
 80003ca:	af00      	add	r7, sp, #0
	return g_updated;
 80003cc:	4b03      	ldr	r3, [pc, #12]	@ (80003dc <isCanUpdated+0x14>)
 80003ce:	781b      	ldrb	r3, [r3, #0]
}
 80003d0:	4618      	mov	r0, r3
 80003d2:	46bd      	mov	sp, r7
 80003d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d8:	4770      	bx	lr
 80003da:	bf00      	nop
 80003dc:	200000b8 	.word	0x200000b8

080003e0 <sendCanData>:

void sendCanData(){
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b088      	sub	sp, #32
 80003e4:	af00      	add	r7, sp, #0
	CAN_TxHeaderTypeDef TxHeader;
	uint32_t TxMailbox;
	uint8_t data[POWER_RESULT_BUFFER_SIZE];
	if(0 < HAL_CAN_GetTxMailboxesFreeLevel(g_hcan)){
 80003e6:	4b16      	ldr	r3, [pc, #88]	@ (8000440 <sendCanData+0x60>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	4618      	mov	r0, r3
 80003ec:	f002 fa6e 	bl	80028cc <HAL_CAN_GetTxMailboxesFreeLevel>
 80003f0:	4603      	mov	r3, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d01f      	beq.n	8000436 <sendCanData+0x56>
	    TxHeader.StdId = POWER_CAN_ID;          // CAN ID
 80003f6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80003fa:	60bb      	str	r3, [r7, #8]
	    TxHeader.RTR = CAN_RTR_DATA;            // フレームタイプはデータフレーム
 80003fc:	2300      	movs	r3, #0
 80003fe:	617b      	str	r3, [r7, #20]
	    TxHeader.IDE = CAN_ID_STD;              // 標準ID(11ﾋﾞｯﾄ)
 8000400:	2300      	movs	r3, #0
 8000402:	613b      	str	r3, [r7, #16]
	    TxHeader.DLC = POWER_RESULT_BUFFER_SIZE;// データ長は8バイトに
 8000404:	2303      	movs	r3, #3
 8000406:	61bb      	str	r3, [r7, #24]
	    TxHeader.TransmitGlobalTime = DISABLE;  // ???
 8000408:	2300      	movs	r3, #0
 800040a:	773b      	strb	r3, [r7, #28]
	    memcpy(data,g_tx_data,sizeof(g_tx_data));
 800040c:	4a0d      	ldr	r2, [pc, #52]	@ (8000444 <sendCanData+0x64>)
 800040e:	463b      	mov	r3, r7
 8000410:	6812      	ldr	r2, [r2, #0]
 8000412:	4611      	mov	r1, r2
 8000414:	8019      	strh	r1, [r3, #0]
 8000416:	3302      	adds	r3, #2
 8000418:	0c12      	lsrs	r2, r2, #16
 800041a:	701a      	strb	r2, [r3, #0]
	    if(HAL_CAN_AddTxMessage(g_hcan, &TxHeader, data, &TxMailbox)!=HAL_OK) Error_Handler();
 800041c:	4b08      	ldr	r3, [pc, #32]	@ (8000440 <sendCanData+0x60>)
 800041e:	6818      	ldr	r0, [r3, #0]
 8000420:	1d3b      	adds	r3, r7, #4
 8000422:	463a      	mov	r2, r7
 8000424:	f107 0108 	add.w	r1, r7, #8
 8000428:	f002 f980 	bl	800272c <HAL_CAN_AddTxMessage>
 800042c:	4603      	mov	r3, r0
 800042e:	2b00      	cmp	r3, #0
 8000430:	d001      	beq.n	8000436 <sendCanData+0x56>
 8000432:	f000 fc6d 	bl	8000d10 <Error_Handler>
	}
}
 8000436:	bf00      	nop
 8000438:	3720      	adds	r7, #32
 800043a:	46bd      	mov	sp, r7
 800043c:	bd80      	pop	{r7, pc}
 800043e:	bf00      	nop
 8000440:	2000008c 	.word	0x2000008c
 8000444:	20000084 	.word	0x20000084

08000448 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b08a      	sub	sp, #40	@ 0x28
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
    CAN_RxHeaderTypeDef RxHeader;
    uint8_t data[POWER_COMMAND_BUFFER_SIZE];
    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, data) == HAL_OK)
 8000450:	f107 0308 	add.w	r3, r7, #8
 8000454:	f107 020c 	add.w	r2, r7, #12
 8000458:	2100      	movs	r1, #0
 800045a:	6878      	ldr	r0, [r7, #4]
 800045c:	f002 fa6b 	bl	8002936 <HAL_CAN_GetRxMessage>
 8000460:	4603      	mov	r3, r0
 8000462:	2b00      	cmp	r3, #0
 8000464:	d105      	bne.n	8000472 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a>
    {
				g_updated = true;
 8000466:	4b05      	ldr	r3, [pc, #20]	@ (800047c <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8000468:	2201      	movs	r2, #1
 800046a:	701a      	strb	r2, [r3, #0]
				memcpy(g_rx_data,data,sizeof(g_rx_data));
 800046c:	7a3a      	ldrb	r2, [r7, #8]
 800046e:	4b04      	ldr	r3, [pc, #16]	@ (8000480 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8000470:	701a      	strb	r2, [r3, #0]
    }
}
 8000472:	bf00      	nop
 8000474:	3728      	adds	r7, #40	@ 0x28
 8000476:	46bd      	mov	sp, r7
 8000478:	bd80      	pop	{r7, pc}
 800047a:	bf00      	nop
 800047c:	200000b8 	.word	0x200000b8
 8000480:	20000088 	.word	0x20000088

08000484 <isNoError>:
typedef struct{
	bool battery;
	bool emergency;
}Error;

bool isNoError(Error e){
 8000484:	b480      	push	{r7}
 8000486:	b083      	sub	sp, #12
 8000488:	af00      	add	r7, sp, #0
 800048a:	80b8      	strh	r0, [r7, #4]
	return (e.battery==false) && (e.emergency==false);
 800048c:	793b      	ldrb	r3, [r7, #4]
 800048e:	f083 0301 	eor.w	r3, r3, #1
 8000492:	b2db      	uxtb	r3, r3
 8000494:	2b00      	cmp	r3, #0
 8000496:	d007      	beq.n	80004a8 <isNoError+0x24>
 8000498:	797b      	ldrb	r3, [r7, #5]
 800049a:	f083 0301 	eor.w	r3, r3, #1
 800049e:	b2db      	uxtb	r3, r3
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d001      	beq.n	80004a8 <isNoError+0x24>
 80004a4:	2301      	movs	r3, #1
 80004a6:	e000      	b.n	80004aa <isNoError+0x26>
 80004a8:	2300      	movs	r3, #0
 80004aa:	f003 0301 	and.w	r3, r3, #1
 80004ae:	b2db      	uxtb	r3, r3
}
 80004b0:	4618      	mov	r0, r3
 80004b2:	370c      	adds	r7, #12
 80004b4:	46bd      	mov	sp, r7
 80004b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ba:	4770      	bx	lr

080004bc <errorReleaseRequest>:

bool errorReleaseRequest(bool sw){
 80004bc:	b480      	push	{r7}
 80004be:	b085      	sub	sp, #20
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	4603      	mov	r3, r0
 80004c4:	71fb      	strb	r3, [r7, #7]
	static bool last_sw = false;
	bool request;
	request = (last_sw == true) && (sw == false);
 80004c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000500 <errorReleaseRequest+0x44>)
 80004c8:	781b      	ldrb	r3, [r3, #0]
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d007      	beq.n	80004de <errorReleaseRequest+0x22>
 80004ce:	79fb      	ldrb	r3, [r7, #7]
 80004d0:	f083 0301 	eor.w	r3, r3, #1
 80004d4:	b2db      	uxtb	r3, r3
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d001      	beq.n	80004de <errorReleaseRequest+0x22>
 80004da:	2301      	movs	r3, #1
 80004dc:	e000      	b.n	80004e0 <errorReleaseRequest+0x24>
 80004de:	2300      	movs	r3, #0
 80004e0:	73fb      	strb	r3, [r7, #15]
 80004e2:	7bfb      	ldrb	r3, [r7, #15]
 80004e4:	f003 0301 	and.w	r3, r3, #1
 80004e8:	73fb      	strb	r3, [r7, #15]
	last_sw = sw;
 80004ea:	4a05      	ldr	r2, [pc, #20]	@ (8000500 <errorReleaseRequest+0x44>)
 80004ec:	79fb      	ldrb	r3, [r7, #7]
 80004ee:	7013      	strb	r3, [r2, #0]
	return request;
 80004f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80004f2:	4618      	mov	r0, r3
 80004f4:	3714      	adds	r7, #20
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop
 8000500:	20000299 	.word	0x20000299

08000504 <HAL_TIM_PeriodElapsedCallback>:
bool g_main_loop_flag = false;

bool batteryErrorCheck(uint16_t,uint16_t);

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
	if(htim == &htim6)
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	4a0c      	ldr	r2, [pc, #48]	@ (8000540 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000510:	4293      	cmp	r3, r2
 8000512:	d10a      	bne.n	800052a <HAL_TIM_PeriodElapsedCallback+0x26>
	{
		//mainloop
		if(g_main_loop_flag){
 8000514:	4b0b      	ldr	r3, [pc, #44]	@ (8000544 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000516:	781b      	ldrb	r3, [r3, #0]
 8000518:	2b00      	cmp	r3, #0
 800051a:	d003      	beq.n	8000524 <HAL_TIM_PeriodElapsedCallback+0x20>
			printf("Control cycle is slow\r\n");
 800051c:	480a      	ldr	r0, [pc, #40]	@ (8000548 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800051e:	f005 fc6b 	bl	8005df8 <puts>
 8000522:	e002      	b.n	800052a <HAL_TIM_PeriodElapsedCallback+0x26>
		}
		else{
			g_main_loop_flag = true;
 8000524:	4b07      	ldr	r3, [pc, #28]	@ (8000544 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000526:	2201      	movs	r2, #1
 8000528:	701a      	strb	r2, [r3, #0]
		}
	}
	if(htim == &htim7){
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	4a07      	ldr	r2, [pc, #28]	@ (800054c <HAL_TIM_PeriodElapsedCallback+0x48>)
 800052e:	4293      	cmp	r3, r2
 8000530:	d101      	bne.n	8000536 <HAL_TIM_PeriodElapsedCallback+0x32>
		sendCanData();
 8000532:	f7ff ff55 	bl	80003e0 <sendCanData>
	}

}
 8000536:	bf00      	nop
 8000538:	3708      	adds	r7, #8
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	20000178 	.word	0x20000178
 8000544:	20000298 	.word	0x20000298
 8000548:	08006c60 	.word	0x08006c60
 800054c:	200001c4 	.word	0x200001c4

08000550 <batteryErrorCheck>:

// バッテリーの電流、電圧、非常停止スイッチの状態を確認する　異常があればtrueを返す
bool batteryErrorCheck(uint16_t i_bat,uint16_t v_bat){
 8000550:	b580      	push	{r7, lr}
 8000552:	b084      	sub	sp, #16
 8000554:	af00      	add	r7, sp, #0
 8000556:	4603      	mov	r3, r0
 8000558:	460a      	mov	r2, r1
 800055a:	80fb      	strh	r3, [r7, #6]
 800055c:	4613      	mov	r3, r2
 800055e:	80bb      	strh	r3, [r7, #4]
	static const uint16_t i_bat_th = 1000;
	static const uint16_t v_bat_high_th = 16.0f/0.0039f;
	static const uint16_t v_bat_low_th = 8.0f/0.0039f;
	static size_t nv;
	static size_t ni;
	if((v_bat > v_bat_high_th) || (v_bat < v_bat_low_th)) nv++;
 8000560:	4b21      	ldr	r3, [pc, #132]	@ (80005e8 <batteryErrorCheck+0x98>)
 8000562:	881b      	ldrh	r3, [r3, #0]
 8000564:	88ba      	ldrh	r2, [r7, #4]
 8000566:	429a      	cmp	r2, r3
 8000568:	d804      	bhi.n	8000574 <batteryErrorCheck+0x24>
 800056a:	4b20      	ldr	r3, [pc, #128]	@ (80005ec <batteryErrorCheck+0x9c>)
 800056c:	881b      	ldrh	r3, [r3, #0]
 800056e:	88ba      	ldrh	r2, [r7, #4]
 8000570:	429a      	cmp	r2, r3
 8000572:	d205      	bcs.n	8000580 <batteryErrorCheck+0x30>
 8000574:	4b1e      	ldr	r3, [pc, #120]	@ (80005f0 <batteryErrorCheck+0xa0>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	3301      	adds	r3, #1
 800057a:	4a1d      	ldr	r2, [pc, #116]	@ (80005f0 <batteryErrorCheck+0xa0>)
 800057c:	6013      	str	r3, [r2, #0]
 800057e:	e002      	b.n	8000586 <batteryErrorCheck+0x36>
	else nv=0;
 8000580:	4b1b      	ldr	r3, [pc, #108]	@ (80005f0 <batteryErrorCheck+0xa0>)
 8000582:	2200      	movs	r2, #0
 8000584:	601a      	str	r2, [r3, #0]
	if(i_bat > i_bat_th)ni++;
 8000586:	4b1b      	ldr	r3, [pc, #108]	@ (80005f4 <batteryErrorCheck+0xa4>)
 8000588:	881b      	ldrh	r3, [r3, #0]
 800058a:	88fa      	ldrh	r2, [r7, #6]
 800058c:	429a      	cmp	r2, r3
 800058e:	d905      	bls.n	800059c <batteryErrorCheck+0x4c>
 8000590:	4b19      	ldr	r3, [pc, #100]	@ (80005f8 <batteryErrorCheck+0xa8>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	3301      	adds	r3, #1
 8000596:	4a18      	ldr	r2, [pc, #96]	@ (80005f8 <batteryErrorCheck+0xa8>)
 8000598:	6013      	str	r3, [r2, #0]
 800059a:	e002      	b.n	80005a2 <batteryErrorCheck+0x52>
	else ni=0;
 800059c:	4b16      	ldr	r3, [pc, #88]	@ (80005f8 <batteryErrorCheck+0xa8>)
 800059e:	2200      	movs	r2, #0
 80005a0:	601a      	str	r2, [r3, #0]
	bool error = (nv > 10)	|| (ni > 2);
 80005a2:	4b13      	ldr	r3, [pc, #76]	@ (80005f0 <batteryErrorCheck+0xa0>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	2b0a      	cmp	r3, #10
 80005a8:	d803      	bhi.n	80005b2 <batteryErrorCheck+0x62>
 80005aa:	4b13      	ldr	r3, [pc, #76]	@ (80005f8 <batteryErrorCheck+0xa8>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	2b02      	cmp	r3, #2
 80005b0:	d901      	bls.n	80005b6 <batteryErrorCheck+0x66>
 80005b2:	2301      	movs	r3, #1
 80005b4:	e000      	b.n	80005b8 <batteryErrorCheck+0x68>
 80005b6:	2300      	movs	r3, #0
 80005b8:	73fb      	strb	r3, [r7, #15]
 80005ba:	7bfb      	ldrb	r3, [r7, #15]
 80005bc:	f003 0301 	and.w	r3, r3, #1
 80005c0:	73fb      	strb	r3, [r7, #15]
	if (nv > 10) printf("Vbat error \r\n");
 80005c2:	4b0b      	ldr	r3, [pc, #44]	@ (80005f0 <batteryErrorCheck+0xa0>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	2b0a      	cmp	r3, #10
 80005c8:	d902      	bls.n	80005d0 <batteryErrorCheck+0x80>
 80005ca:	480c      	ldr	r0, [pc, #48]	@ (80005fc <batteryErrorCheck+0xac>)
 80005cc:	f005 fc14 	bl	8005df8 <puts>
	if (ni > 2) printf("Ibat error \r\n");
 80005d0:	4b09      	ldr	r3, [pc, #36]	@ (80005f8 <batteryErrorCheck+0xa8>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	2b02      	cmp	r3, #2
 80005d6:	d902      	bls.n	80005de <batteryErrorCheck+0x8e>
 80005d8:	4809      	ldr	r0, [pc, #36]	@ (8000600 <batteryErrorCheck+0xb0>)
 80005da:	f005 fc0d 	bl	8005df8 <puts>
	return error;
 80005de:	7bfb      	ldrb	r3, [r7, #15]
}
 80005e0:	4618      	mov	r0, r3
 80005e2:	3710      	adds	r7, #16
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	08006ca4 	.word	0x08006ca4
 80005ec:	08006ca6 	.word	0x08006ca6
 80005f0:	2000029c 	.word	0x2000029c
 80005f4:	08006ca8 	.word	0x08006ca8
 80005f8:	200002a0 	.word	0x200002a0
 80005fc:	08006c78 	.word	0x08006c78
 8000600:	08006c88 	.word	0x08006c88

08000604 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b086      	sub	sp, #24
 8000608:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	setbuf(stdout, NULL);
 800060a:	4ba1      	ldr	r3, [pc, #644]	@ (8000890 <main+0x28c>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	689b      	ldr	r3, [r3, #8]
 8000610:	2100      	movs	r1, #0
 8000612:	4618      	mov	r0, r3
 8000614:	f005 fbf8 	bl	8005e08 <setbuf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000618:	f000 fdfc 	bl	8001214 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800061c:	f000 f94e 	bl	80008bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000620:	f000 faf6 	bl	8000c10 <MX_GPIO_Init>
  MX_DMA_Init();
 8000624:	f000 fad6 	bl	8000bd4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000628:	f000 faa4 	bl	8000b74 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800062c:	f000 f982 	bl	8000934 <MX_ADC1_Init>
  MX_CAN_Init();
 8000630:	f000 f9fe 	bl	8000a30 <MX_CAN_Init>
  MX_TIM6_Init();
 8000634:	f000 fa32 	bl	8000a9c <MX_TIM6_Init>
  MX_TIM7_Init();
 8000638:	f000 fa66 	bl	8000b08 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  enum state state = state_wait;
 800063c:	2300      	movs	r3, #0
 800063e:	75fb      	strb	r3, [r7, #23]
  Error error = {0};
 8000640:	2300      	movs	r3, #0
 8000642:	813b      	strh	r3, [r7, #8]


  //GPIO初期設定
  HAL_GPIO_WritePin(relay_GPIO_Port, relay_Pin, false);
 8000644:	2200      	movs	r2, #0
 8000646:	2140      	movs	r1, #64	@ 0x40
 8000648:	4892      	ldr	r0, [pc, #584]	@ (8000894 <main+0x290>)
 800064a:	f003 f91d 	bl	8003888 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(jetson_power_GPIO_Port, jetson_power_Pin, false);
 800064e:	2200      	movs	r2, #0
 8000650:	2110      	movs	r1, #16
 8000652:	4890      	ldr	r0, [pc, #576]	@ (8000894 <main+0x290>)
 8000654:	f003 f918 	bl	8003888 <HAL_GPIO_WritePin>

  //ADCスタート
  static uint16_t ADC_buff[2];
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000658:	2100      	movs	r1, #0
 800065a:	488f      	ldr	r0, [pc, #572]	@ (8000898 <main+0x294>)
 800065c:	f001 f8ee 	bl	800183c <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)ADC_buff, sizeof(ADC_buff) / sizeof(ADC_buff[0]));
 8000660:	2202      	movs	r2, #2
 8000662:	498e      	ldr	r1, [pc, #568]	@ (800089c <main+0x298>)
 8000664:	488c      	ldr	r0, [pc, #560]	@ (8000898 <main+0x294>)
 8000666:	f001 f80f 	bl	8001688 <HAL_ADC_Start_DMA>
  hdma_adc1.Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT);
 800066a:	4b8d      	ldr	r3, [pc, #564]	@ (80008a0 <main+0x29c>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	681a      	ldr	r2, [r3, #0]
 8000670:	4b8b      	ldr	r3, [pc, #556]	@ (80008a0 <main+0x29c>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	f022 0206 	bic.w	r2, r2, #6
 8000678:	601a      	str	r2, [r3, #0]
  HAL_Delay(100);
 800067a:	2064      	movs	r0, #100	@ 0x64
 800067c:	f000 fe30 	bl	80012e0 <HAL_Delay>

  //エラーチェック後５Vオン&CANスタート
	while (batteryErrorCheck(ADC_buff[0], ADC_buff[1]) == true
 8000680:	e003      	b.n	800068a <main+0x86>
			|| HAL_GPIO_ReadPin(emergency_switch_GPIO_Port,emergency_switch_Pin)) {
		HAL_Delay(1000);
 8000682:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000686:	f000 fe2b 	bl	80012e0 <HAL_Delay>
	while (batteryErrorCheck(ADC_buff[0], ADC_buff[1]) == true
 800068a:	4b84      	ldr	r3, [pc, #528]	@ (800089c <main+0x298>)
 800068c:	881b      	ldrh	r3, [r3, #0]
 800068e:	4a83      	ldr	r2, [pc, #524]	@ (800089c <main+0x298>)
 8000690:	8852      	ldrh	r2, [r2, #2]
 8000692:	4611      	mov	r1, r2
 8000694:	4618      	mov	r0, r3
 8000696:	f7ff ff5b 	bl	8000550 <batteryErrorCheck>
 800069a:	4603      	mov	r3, r0
			|| HAL_GPIO_ReadPin(emergency_switch_GPIO_Port,emergency_switch_Pin)) {
 800069c:	2b00      	cmp	r3, #0
 800069e:	d1f0      	bne.n	8000682 <main+0x7e>
 80006a0:	2120      	movs	r1, #32
 80006a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006a6:	f003 f8d7 	bl	8003858 <HAL_GPIO_ReadPin>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d1e8      	bne.n	8000682 <main+0x7e>
	}
  HAL_GPIO_WritePin(jetson_power_GPIO_Port, jetson_power_Pin, true);
 80006b0:	2201      	movs	r2, #1
 80006b2:	2110      	movs	r1, #16
 80006b4:	4877      	ldr	r0, [pc, #476]	@ (8000894 <main+0x290>)
 80006b6:	f003 f8e7 	bl	8003888 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80006ba:	2064      	movs	r0, #100	@ 0x64
 80006bc:	f000 fe10 	bl	80012e0 <HAL_Delay>

  //CANスタート
  canInit(&hcan);
 80006c0:	4878      	ldr	r0, [pc, #480]	@ (80008a4 <main+0x2a0>)
 80006c2:	f7ff fe17 	bl	80002f4 <canInit>
  size_t can_timeout_cnt = 0;
 80006c6:	2300      	movs	r3, #0
 80006c8:	613b      	str	r3, [r7, #16]
  // relayをONにしてからMDに電源が入るまでの猶予
  size_t motor_delay_cnt = 0;
 80006ca:	2300      	movs	r3, #0
 80006cc:	60fb      	str	r3, [r7, #12]
  // エラー解除待機中
  bool wait_flag=false;
 80006ce:	2300      	movs	r3, #0
 80006d0:	72fb      	strb	r3, [r7, #11]

  //timerスタート
  HAL_TIM_Base_Start_IT(&htim6);
 80006d2:	4875      	ldr	r0, [pc, #468]	@ (80008a8 <main+0x2a4>)
 80006d4:	f004 fba6 	bl	8004e24 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 80006d8:	4874      	ldr	r0, [pc, #464]	@ (80008ac <main+0x2a8>)
 80006da:	f004 fba3 	bl	8004e24 <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN WHILE */

  while (1)
  {
		//mainloop wait
		while(g_main_loop_flag == false){}
 80006de:	bf00      	nop
 80006e0:	4b73      	ldr	r3, [pc, #460]	@ (80008b0 <main+0x2ac>)
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	f083 0301 	eor.w	r3, r3, #1
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d1f8      	bne.n	80006e0 <main+0xdc>

		error.battery = batteryErrorCheck(ADC_buff[0], ADC_buff[1]);
 80006ee:	4b6b      	ldr	r3, [pc, #428]	@ (800089c <main+0x298>)
 80006f0:	881b      	ldrh	r3, [r3, #0]
 80006f2:	4a6a      	ldr	r2, [pc, #424]	@ (800089c <main+0x298>)
 80006f4:	8852      	ldrh	r2, [r2, #2]
 80006f6:	4611      	mov	r1, r2
 80006f8:	4618      	mov	r0, r3
 80006fa:	f7ff ff29 	bl	8000550 <batteryErrorCheck>
 80006fe:	4603      	mov	r3, r0
 8000700:	723b      	strb	r3, [r7, #8]
		error.emergency = HAL_GPIO_ReadPin(emergency_switch_GPIO_Port,emergency_switch_Pin);
 8000702:	2120      	movs	r1, #32
 8000704:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000708:	f003 f8a6 	bl	8003858 <HAL_GPIO_ReadPin>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	bf14      	ite	ne
 8000712:	2301      	movne	r3, #1
 8000714:	2300      	moveq	r3, #0
 8000716:	b2db      	uxtb	r3, r3
 8000718:	727b      	strb	r3, [r7, #9]

		//ADCデータ確認
		PowerResult result;
		result.i_bat = ADC_buff[0]>>4;
 800071a:	4b60      	ldr	r3, [pc, #384]	@ (800089c <main+0x298>)
 800071c:	881b      	ldrh	r3, [r3, #0]
 800071e:	091b      	lsrs	r3, r3, #4
 8000720:	b29b      	uxth	r3, r3
 8000722:	b2db      	uxtb	r3, r3
 8000724:	71fb      	strb	r3, [r7, #7]
		result.v_bat = ADC_buff[1]>>4;
 8000726:	4b5d      	ldr	r3, [pc, #372]	@ (800089c <main+0x298>)
 8000728:	885b      	ldrh	r3, [r3, #2]
 800072a:	091b      	lsrs	r3, r3, #4
 800072c:	b29b      	uxth	r3, r3
 800072e:	b2db      	uxtb	r3, r3
 8000730:	71bb      	strb	r3, [r7, #6]
		result.emergency = error.emergency;
 8000732:	7a7b      	ldrb	r3, [r7, #9]
 8000734:	713b      	strb	r3, [r7, #4]
		result.motor_output = (motor_delay_cnt > 10);
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	2b0a      	cmp	r3, #10
 800073a:	bf8c      	ite	hi
 800073c:	2301      	movhi	r3, #1
 800073e:	2300      	movls	r3, #0
 8000740:	b2db      	uxtb	r3, r3
 8000742:	717b      	strb	r3, [r7, #5]

		//CAN送信
		setCanData(&result);
 8000744:	1d3b      	adds	r3, r7, #4
 8000746:	4618      	mov	r0, r3
 8000748:	f7ff fe30 	bl	80003ac <setCanData>

		switch(state){
 800074c:	7dfb      	ldrb	r3, [r7, #23]
 800074e:	2b02      	cmp	r3, #2
 8000750:	d007      	beq.n	8000762 <main+0x15e>
 8000752:	2b02      	cmp	r3, #2
 8000754:	f300 8083 	bgt.w	800085e <main+0x25a>
 8000758:	2b00      	cmp	r3, #0
 800075a:	d01c      	beq.n	8000796 <main+0x192>
 800075c:	2b01      	cmp	r3, #1
 800075e:	d031      	beq.n	80007c4 <main+0x1c0>
 8000760:	e07d      	b.n	800085e <main+0x25a>
		case state_shutdown:
			static bool prev_emerg_sw = false;
			HAL_GPIO_WritePin(relay_GPIO_Port, relay_Pin, false);
 8000762:	2200      	movs	r2, #0
 8000764:	2140      	movs	r1, #64	@ 0x40
 8000766:	484b      	ldr	r0, [pc, #300]	@ (8000894 <main+0x290>)
 8000768:	f003 f88e 	bl	8003888 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(jetson_power_GPIO_Port, jetson_power_Pin, false);
 800076c:	2200      	movs	r2, #0
 800076e:	2110      	movs	r1, #16
 8000770:	4848      	ldr	r0, [pc, #288]	@ (8000894 <main+0x290>)
 8000772:	f003 f889 	bl	8003888 <HAL_GPIO_WritePin>
			if(prev_emerg_sw == true && error.emergency == false){
 8000776:	4b4f      	ldr	r3, [pc, #316]	@ (80008b4 <main+0x2b0>)
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d007      	beq.n	800078e <main+0x18a>
 800077e:	7a7b      	ldrb	r3, [r7, #9]
 8000780:	f083 0301 	eor.w	r3, r3, #1
 8000784:	b2db      	uxtb	r3, r3
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <main+0x18a>
				state = state_wait;
 800078a:	2300      	movs	r3, #0
 800078c:	75fb      	strb	r3, [r7, #23]
			}
			prev_emerg_sw = error.emergency;
 800078e:	7a7a      	ldrb	r2, [r7, #9]
 8000790:	4b48      	ldr	r3, [pc, #288]	@ (80008b4 <main+0x2b0>)
 8000792:	701a      	strb	r2, [r3, #0]
			break;
 8000794:	e063      	b.n	800085e <main+0x25a>
		case state_wait:
			HAL_GPIO_WritePin(relay_GPIO_Port, relay_Pin, false);
 8000796:	2200      	movs	r2, #0
 8000798:	2140      	movs	r1, #64	@ 0x40
 800079a:	483e      	ldr	r0, [pc, #248]	@ (8000894 <main+0x290>)
 800079c:	f003 f874 	bl	8003888 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(jetson_power_GPIO_Port, jetson_power_Pin, true);
 80007a0:	2201      	movs	r2, #1
 80007a2:	2110      	movs	r1, #16
 80007a4:	483b      	ldr	r0, [pc, #236]	@ (8000894 <main+0x290>)
 80007a6:	f003 f86f 	bl	8003888 <HAL_GPIO_WritePin>
			if(isCanUpdated()){
 80007aa:	f7ff fe0d 	bl	80003c8 <isCanUpdated>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d003      	beq.n	80007bc <main+0x1b8>
				can_timeout_cnt = 0;
 80007b4:	2300      	movs	r3, #0
 80007b6:	613b      	str	r3, [r7, #16]
				state = state_active;
 80007b8:	2301      	movs	r3, #1
 80007ba:	75fb      	strb	r3, [r7, #23]
			}
			canInit(&hcan);
 80007bc:	4839      	ldr	r0, [pc, #228]	@ (80008a4 <main+0x2a0>)
 80007be:	f7ff fd99 	bl	80002f4 <canInit>
			break;
 80007c2:	e04c      	b.n	800085e <main+0x25a>
		case state_active:
			if(error.battery==true){
 80007c4:	7a3b      	ldrb	r3, [r7, #8]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <main+0x1ca>
				wait_flag = true;
 80007ca:	2301      	movs	r3, #1
 80007cc:	72fb      	strb	r3, [r7, #11]
			}
			//CANデータ確認
			PowerCommand command;
			if(isCanUpdated()==false) can_timeout_cnt++;
 80007ce:	f7ff fdfb 	bl	80003c8 <isCanUpdated>
 80007d2:	4603      	mov	r3, r0
 80007d4:	f083 0301 	eor.w	r3, r3, #1
 80007d8:	b2db      	uxtb	r3, r3
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d003      	beq.n	80007e6 <main+0x1e2>
 80007de:	693b      	ldr	r3, [r7, #16]
 80007e0:	3301      	adds	r3, #1
 80007e2:	613b      	str	r3, [r7, #16]
 80007e4:	e001      	b.n	80007ea <main+0x1e6>
			else can_timeout_cnt=0;
 80007e6:	2300      	movs	r3, #0
 80007e8:	613b      	str	r3, [r7, #16]
			getCanData(&command);
 80007ea:	463b      	mov	r3, r7
 80007ec:	4618      	mov	r0, r3
 80007ee:	f7ff fdc9 	bl	8000384 <getCanData>
			// state set
			if (command.power_off == true && command.motor_output == false) {
 80007f2:	787b      	ldrb	r3, [r7, #1]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d008      	beq.n	800080a <main+0x206>
 80007f8:	783b      	ldrb	r3, [r7, #0]
 80007fa:	f083 0301 	eor.w	r3, r3, #1
 80007fe:	b2db      	uxtb	r3, r3
 8000800:	2b00      	cmp	r3, #0
 8000802:	d002      	beq.n	800080a <main+0x206>
				state = state_shutdown;
 8000804:	2302      	movs	r3, #2
 8000806:	75fb      	strb	r3, [r7, #23]
 8000808:	e004      	b.n	8000814 <main+0x210>
			} else if (can_timeout_cnt > 5) {
 800080a:	693b      	ldr	r3, [r7, #16]
 800080c:	2b05      	cmp	r3, #5
 800080e:	d901      	bls.n	8000814 <main+0x210>
				state = state_wait;
 8000810:	2300      	movs	r3, #0
 8000812:	75fb      	strb	r3, [r7, #23]
			}

			HAL_GPIO_WritePin(jetson_power_GPIO_Port, jetson_power_Pin, true);
 8000814:	2201      	movs	r2, #1
 8000816:	2110      	movs	r1, #16
 8000818:	481e      	ldr	r0, [pc, #120]	@ (8000894 <main+0x290>)
 800081a:	f003 f835 	bl	8003888 <HAL_GPIO_WritePin>
			if (isNoError(error) == true && command.motor_output == true
 800081e:	68b8      	ldr	r0, [r7, #8]
 8000820:	f7ff fe30 	bl	8000484 <isNoError>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d011      	beq.n	800084e <main+0x24a>
 800082a:	783b      	ldrb	r3, [r7, #0]
 800082c:	2b00      	cmp	r3, #0
 800082e:	d00e      	beq.n	800084e <main+0x24a>
					&& wait_flag == false) {
 8000830:	7afb      	ldrb	r3, [r7, #11]
 8000832:	f083 0301 	eor.w	r3, r3, #1
 8000836:	b2db      	uxtb	r3, r3
 8000838:	2b00      	cmp	r3, #0
 800083a:	d008      	beq.n	800084e <main+0x24a>
				//printf("motor_on : \r\n");
				HAL_GPIO_WritePin(relay_GPIO_Port, relay_Pin, true);
 800083c:	2201      	movs	r2, #1
 800083e:	2140      	movs	r1, #64	@ 0x40
 8000840:	4814      	ldr	r0, [pc, #80]	@ (8000894 <main+0x290>)
 8000842:	f003 f821 	bl	8003888 <HAL_GPIO_WritePin>
				motor_delay_cnt++;
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	3301      	adds	r3, #1
 800084a:	60fb      	str	r3, [r7, #12]
			} else {
				//printf("motor_off : \r\n");
				HAL_GPIO_WritePin(relay_GPIO_Port, relay_Pin, false);
				motor_delay_cnt = 0;
			}
			break;
 800084c:	e006      	b.n	800085c <main+0x258>
				HAL_GPIO_WritePin(relay_GPIO_Port, relay_Pin, false);
 800084e:	2200      	movs	r2, #0
 8000850:	2140      	movs	r1, #64	@ 0x40
 8000852:	4810      	ldr	r0, [pc, #64]	@ (8000894 <main+0x290>)
 8000854:	f003 f818 	bl	8003888 <HAL_GPIO_WritePin>
				motor_delay_cnt = 0;
 8000858:	2300      	movs	r3, #0
 800085a:	60fb      	str	r3, [r7, #12]
			break;
 800085c:	bf00      	nop
		}



		printf("%d,%d,%d\r\n",state,ADC_buff[0],ADC_buff[1]);
 800085e:	7df9      	ldrb	r1, [r7, #23]
 8000860:	4b0e      	ldr	r3, [pc, #56]	@ (800089c <main+0x298>)
 8000862:	881b      	ldrh	r3, [r3, #0]
 8000864:	461a      	mov	r2, r3
 8000866:	4b0d      	ldr	r3, [pc, #52]	@ (800089c <main+0x298>)
 8000868:	885b      	ldrh	r3, [r3, #2]
 800086a:	4813      	ldr	r0, [pc, #76]	@ (80008b8 <main+0x2b4>)
 800086c:	f005 fa5c 	bl	8005d28 <iprintf>

		if(wait_flag==true && errorReleaseRequest(error.emergency))wait_flag = false;
 8000870:	7afb      	ldrb	r3, [r7, #11]
 8000872:	2b00      	cmp	r3, #0
 8000874:	d008      	beq.n	8000888 <main+0x284>
 8000876:	7a7b      	ldrb	r3, [r7, #9]
 8000878:	4618      	mov	r0, r3
 800087a:	f7ff fe1f 	bl	80004bc <errorReleaseRequest>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <main+0x284>
 8000884:	2300      	movs	r3, #0
 8000886:	72fb      	strb	r3, [r7, #11]
    g_main_loop_flag = false;
 8000888:	4b09      	ldr	r3, [pc, #36]	@ (80008b0 <main+0x2ac>)
 800088a:	2200      	movs	r2, #0
 800088c:	701a      	strb	r2, [r3, #0]
  {
 800088e:	e726      	b.n	80006de <main+0xda>
 8000890:	20000018 	.word	0x20000018
 8000894:	48000400 	.word	0x48000400
 8000898:	200000bc 	.word	0x200000bc
 800089c:	200002a4 	.word	0x200002a4
 80008a0:	2000010c 	.word	0x2000010c
 80008a4:	20000150 	.word	0x20000150
 80008a8:	20000178 	.word	0x20000178
 80008ac:	200001c4 	.word	0x200001c4
 80008b0:	20000298 	.word	0x20000298
 80008b4:	200002a8 	.word	0x200002a8
 80008b8:	08006c98 	.word	0x08006c98

080008bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b090      	sub	sp, #64	@ 0x40
 80008c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008c2:	f107 0318 	add.w	r3, r7, #24
 80008c6:	2228      	movs	r2, #40	@ 0x28
 80008c8:	2100      	movs	r1, #0
 80008ca:	4618      	mov	r0, r3
 80008cc:	f005 fc30 	bl	8006130 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008d0:	1d3b      	adds	r3, r7, #4
 80008d2:	2200      	movs	r2, #0
 80008d4:	601a      	str	r2, [r3, #0]
 80008d6:	605a      	str	r2, [r3, #4]
 80008d8:	609a      	str	r2, [r3, #8]
 80008da:	60da      	str	r2, [r3, #12]
 80008dc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008de:	2302      	movs	r3, #2
 80008e0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008e2:	2301      	movs	r3, #1
 80008e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008e6:	2310      	movs	r3, #16
 80008e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008ea:	2300      	movs	r3, #0
 80008ec:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ee:	f107 0318 	add.w	r3, r7, #24
 80008f2:	4618      	mov	r0, r3
 80008f4:	f002 ffe0 	bl	80038b8 <HAL_RCC_OscConfig>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80008fe:	f000 fa07 	bl	8000d10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000902:	230f      	movs	r3, #15
 8000904:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000906:	2300      	movs	r3, #0
 8000908:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800090a:	2300      	movs	r3, #0
 800090c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800090e:	2300      	movs	r3, #0
 8000910:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000912:	2300      	movs	r3, #0
 8000914:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000916:	1d3b      	adds	r3, r7, #4
 8000918:	2100      	movs	r1, #0
 800091a:	4618      	mov	r0, r3
 800091c:	f004 f80a 	bl	8004934 <HAL_RCC_ClockConfig>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000926:	f000 f9f3 	bl	8000d10 <Error_Handler>
  }
}
 800092a:	bf00      	nop
 800092c:	3740      	adds	r7, #64	@ 0x40
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
	...

08000934 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b08a      	sub	sp, #40	@ 0x28
 8000938:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800093a:	f107 031c 	add.w	r3, r7, #28
 800093e:	2200      	movs	r2, #0
 8000940:	601a      	str	r2, [r3, #0]
 8000942:	605a      	str	r2, [r3, #4]
 8000944:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000946:	1d3b      	adds	r3, r7, #4
 8000948:	2200      	movs	r2, #0
 800094a:	601a      	str	r2, [r3, #0]
 800094c:	605a      	str	r2, [r3, #4]
 800094e:	609a      	str	r2, [r3, #8]
 8000950:	60da      	str	r2, [r3, #12]
 8000952:	611a      	str	r2, [r3, #16]
 8000954:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000956:	4b35      	ldr	r3, [pc, #212]	@ (8000a2c <MX_ADC1_Init+0xf8>)
 8000958:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800095c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800095e:	4b33      	ldr	r3, [pc, #204]	@ (8000a2c <MX_ADC1_Init+0xf8>)
 8000960:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000964:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000966:	4b31      	ldr	r3, [pc, #196]	@ (8000a2c <MX_ADC1_Init+0xf8>)
 8000968:	2200      	movs	r2, #0
 800096a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800096c:	4b2f      	ldr	r3, [pc, #188]	@ (8000a2c <MX_ADC1_Init+0xf8>)
 800096e:	2201      	movs	r2, #1
 8000970:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000972:	4b2e      	ldr	r3, [pc, #184]	@ (8000a2c <MX_ADC1_Init+0xf8>)
 8000974:	2201      	movs	r2, #1
 8000976:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000978:	4b2c      	ldr	r3, [pc, #176]	@ (8000a2c <MX_ADC1_Init+0xf8>)
 800097a:	2200      	movs	r2, #0
 800097c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000980:	4b2a      	ldr	r3, [pc, #168]	@ (8000a2c <MX_ADC1_Init+0xf8>)
 8000982:	2200      	movs	r2, #0
 8000984:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000986:	4b29      	ldr	r3, [pc, #164]	@ (8000a2c <MX_ADC1_Init+0xf8>)
 8000988:	2201      	movs	r2, #1
 800098a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800098c:	4b27      	ldr	r3, [pc, #156]	@ (8000a2c <MX_ADC1_Init+0xf8>)
 800098e:	2200      	movs	r2, #0
 8000990:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000992:	4b26      	ldr	r3, [pc, #152]	@ (8000a2c <MX_ADC1_Init+0xf8>)
 8000994:	2202      	movs	r2, #2
 8000996:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000998:	4b24      	ldr	r3, [pc, #144]	@ (8000a2c <MX_ADC1_Init+0xf8>)
 800099a:	2201      	movs	r2, #1
 800099c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009a0:	4b22      	ldr	r3, [pc, #136]	@ (8000a2c <MX_ADC1_Init+0xf8>)
 80009a2:	2204      	movs	r2, #4
 80009a4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80009a6:	4b21      	ldr	r3, [pc, #132]	@ (8000a2c <MX_ADC1_Init+0xf8>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80009ac:	4b1f      	ldr	r3, [pc, #124]	@ (8000a2c <MX_ADC1_Init+0xf8>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009b2:	481e      	ldr	r0, [pc, #120]	@ (8000a2c <MX_ADC1_Init+0xf8>)
 80009b4:	f000 fcd6 	bl	8001364 <HAL_ADC_Init>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80009be:	f000 f9a7 	bl	8000d10 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80009c2:	2300      	movs	r3, #0
 80009c4:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80009c6:	f107 031c 	add.w	r3, r7, #28
 80009ca:	4619      	mov	r1, r3
 80009cc:	4817      	ldr	r0, [pc, #92]	@ (8000a2c <MX_ADC1_Init+0xf8>)
 80009ce:	f001 fa65 	bl	8001e9c <HAL_ADCEx_MultiModeConfigChannel>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 80009d8:	f000 f99a 	bl	8000d10 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80009dc:	230b      	movs	r3, #11
 80009de:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009e0:	2301      	movs	r3, #1
 80009e2:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80009e4:	2300      	movs	r3, #0
 80009e6:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 80009e8:	2307      	movs	r3, #7
 80009ea:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80009ec:	2300      	movs	r3, #0
 80009ee:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80009f0:	2300      	movs	r3, #0
 80009f2:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009f4:	1d3b      	adds	r3, r7, #4
 80009f6:	4619      	mov	r1, r3
 80009f8:	480c      	ldr	r0, [pc, #48]	@ (8000a2c <MX_ADC1_Init+0xf8>)
 80009fa:	f000 ff91 	bl	8001920 <HAL_ADC_ConfigChannel>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 8000a04:	f000 f984 	bl	8000d10 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000a08:	230c      	movs	r3, #12
 8000a0a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a10:	1d3b      	adds	r3, r7, #4
 8000a12:	4619      	mov	r1, r3
 8000a14:	4805      	ldr	r0, [pc, #20]	@ (8000a2c <MX_ADC1_Init+0xf8>)
 8000a16:	f000 ff83 	bl	8001920 <HAL_ADC_ConfigChannel>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_ADC1_Init+0xf0>
  {
    Error_Handler();
 8000a20:	f000 f976 	bl	8000d10 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a24:	bf00      	nop
 8000a26:	3728      	adds	r7, #40	@ 0x28
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	200000bc 	.word	0x200000bc

08000a30 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000a34:	4b17      	ldr	r3, [pc, #92]	@ (8000a94 <MX_CAN_Init+0x64>)
 8000a36:	4a18      	ldr	r2, [pc, #96]	@ (8000a98 <MX_CAN_Init+0x68>)
 8000a38:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 3;
 8000a3a:	4b16      	ldr	r3, [pc, #88]	@ (8000a94 <MX_CAN_Init+0x64>)
 8000a3c:	2203      	movs	r2, #3
 8000a3e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000a40:	4b14      	ldr	r3, [pc, #80]	@ (8000a94 <MX_CAN_Init+0x64>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000a46:	4b13      	ldr	r3, [pc, #76]	@ (8000a94 <MX_CAN_Init+0x64>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 8000a4c:	4b11      	ldr	r3, [pc, #68]	@ (8000a94 <MX_CAN_Init+0x64>)
 8000a4e:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000a52:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000a54:	4b0f      	ldr	r3, [pc, #60]	@ (8000a94 <MX_CAN_Init+0x64>)
 8000a56:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 8000a5a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000a5c:	4b0d      	ldr	r3, [pc, #52]	@ (8000a94 <MX_CAN_Init+0x64>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000a62:	4b0c      	ldr	r3, [pc, #48]	@ (8000a94 <MX_CAN_Init+0x64>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000a68:	4b0a      	ldr	r3, [pc, #40]	@ (8000a94 <MX_CAN_Init+0x64>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000a6e:	4b09      	ldr	r3, [pc, #36]	@ (8000a94 <MX_CAN_Init+0x64>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000a74:	4b07      	ldr	r3, [pc, #28]	@ (8000a94 <MX_CAN_Init+0x64>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000a7a:	4b06      	ldr	r3, [pc, #24]	@ (8000a94 <MX_CAN_Init+0x64>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000a80:	4804      	ldr	r0, [pc, #16]	@ (8000a94 <MX_CAN_Init+0x64>)
 8000a82:	f001 fc01 	bl	8002288 <HAL_CAN_Init>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000a8c:	f000 f940 	bl	8000d10 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000a90:	bf00      	nop
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	20000150 	.word	0x20000150
 8000a98:	40006400 	.word	0x40006400

08000a9c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b084      	sub	sp, #16
 8000aa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aa2:	1d3b      	adds	r3, r7, #4
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	601a      	str	r2, [r3, #0]
 8000aa8:	605a      	str	r2, [r3, #4]
 8000aaa:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000aac:	4b14      	ldr	r3, [pc, #80]	@ (8000b00 <MX_TIM6_Init+0x64>)
 8000aae:	4a15      	ldr	r2, [pc, #84]	@ (8000b04 <MX_TIM6_Init+0x68>)
 8000ab0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 19;
 8000ab2:	4b13      	ldr	r3, [pc, #76]	@ (8000b00 <MX_TIM6_Init+0x64>)
 8000ab4:	2213      	movs	r2, #19
 8000ab6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ab8:	4b11      	ldr	r3, [pc, #68]	@ (8000b00 <MX_TIM6_Init+0x64>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 7999;
 8000abe:	4b10      	ldr	r3, [pc, #64]	@ (8000b00 <MX_TIM6_Init+0x64>)
 8000ac0:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000ac4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ac6:	4b0e      	ldr	r3, [pc, #56]	@ (8000b00 <MX_TIM6_Init+0x64>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000acc:	480c      	ldr	r0, [pc, #48]	@ (8000b00 <MX_TIM6_Init+0x64>)
 8000ace:	f004 f951 	bl	8004d74 <HAL_TIM_Base_Init>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000ad8:	f000 f91a 	bl	8000d10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000adc:	2300      	movs	r3, #0
 8000ade:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000ae4:	1d3b      	adds	r3, r7, #4
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	4805      	ldr	r0, [pc, #20]	@ (8000b00 <MX_TIM6_Init+0x64>)
 8000aea:	f004 fba5 	bl	8005238 <HAL_TIMEx_MasterConfigSynchronization>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000af4:	f000 f90c 	bl	8000d10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000af8:	bf00      	nop
 8000afa:	3710      	adds	r7, #16
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	20000178 	.word	0x20000178
 8000b04:	40001000 	.word	0x40001000

08000b08 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b084      	sub	sp, #16
 8000b0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b0e:	1d3b      	adds	r3, r7, #4
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000b18:	4b14      	ldr	r3, [pc, #80]	@ (8000b6c <MX_TIM7_Init+0x64>)
 8000b1a:	4a15      	ldr	r2, [pc, #84]	@ (8000b70 <MX_TIM7_Init+0x68>)
 8000b1c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 19;
 8000b1e:	4b13      	ldr	r3, [pc, #76]	@ (8000b6c <MX_TIM7_Init+0x64>)
 8000b20:	2213      	movs	r2, #19
 8000b22:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b24:	4b11      	ldr	r3, [pc, #68]	@ (8000b6c <MX_TIM7_Init+0x64>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 7999;
 8000b2a:	4b10      	ldr	r3, [pc, #64]	@ (8000b6c <MX_TIM7_Init+0x64>)
 8000b2c:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000b30:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b32:	4b0e      	ldr	r3, [pc, #56]	@ (8000b6c <MX_TIM7_Init+0x64>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000b38:	480c      	ldr	r0, [pc, #48]	@ (8000b6c <MX_TIM7_Init+0x64>)
 8000b3a:	f004 f91b 	bl	8004d74 <HAL_TIM_Base_Init>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000b44:	f000 f8e4 	bl	8000d10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000b50:	1d3b      	adds	r3, r7, #4
 8000b52:	4619      	mov	r1, r3
 8000b54:	4805      	ldr	r0, [pc, #20]	@ (8000b6c <MX_TIM7_Init+0x64>)
 8000b56:	f004 fb6f 	bl	8005238 <HAL_TIMEx_MasterConfigSynchronization>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000b60:	f000 f8d6 	bl	8000d10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000b64:	bf00      	nop
 8000b66:	3710      	adds	r7, #16
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	200001c4 	.word	0x200001c4
 8000b70:	40001400 	.word	0x40001400

08000b74 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b78:	4b14      	ldr	r3, [pc, #80]	@ (8000bcc <MX_USART2_UART_Init+0x58>)
 8000b7a:	4a15      	ldr	r2, [pc, #84]	@ (8000bd0 <MX_USART2_UART_Init+0x5c>)
 8000b7c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b7e:	4b13      	ldr	r3, [pc, #76]	@ (8000bcc <MX_USART2_UART_Init+0x58>)
 8000b80:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b84:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b86:	4b11      	ldr	r3, [pc, #68]	@ (8000bcc <MX_USART2_UART_Init+0x58>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b8c:	4b0f      	ldr	r3, [pc, #60]	@ (8000bcc <MX_USART2_UART_Init+0x58>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b92:	4b0e      	ldr	r3, [pc, #56]	@ (8000bcc <MX_USART2_UART_Init+0x58>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b98:	4b0c      	ldr	r3, [pc, #48]	@ (8000bcc <MX_USART2_UART_Init+0x58>)
 8000b9a:	220c      	movs	r2, #12
 8000b9c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b9e:	4b0b      	ldr	r3, [pc, #44]	@ (8000bcc <MX_USART2_UART_Init+0x58>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ba4:	4b09      	ldr	r3, [pc, #36]	@ (8000bcc <MX_USART2_UART_Init+0x58>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000baa:	4b08      	ldr	r3, [pc, #32]	@ (8000bcc <MX_USART2_UART_Init+0x58>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bb0:	4b06      	ldr	r3, [pc, #24]	@ (8000bcc <MX_USART2_UART_Init+0x58>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bb6:	4805      	ldr	r0, [pc, #20]	@ (8000bcc <MX_USART2_UART_Init+0x58>)
 8000bb8:	f004 fbca 	bl	8005350 <HAL_UART_Init>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000bc2:	f000 f8a5 	bl	8000d10 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bc6:	bf00      	nop
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	20000210 	.word	0x20000210
 8000bd0:	40004400 	.word	0x40004400

08000bd4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000bda:	4b0c      	ldr	r3, [pc, #48]	@ (8000c0c <MX_DMA_Init+0x38>)
 8000bdc:	695b      	ldr	r3, [r3, #20]
 8000bde:	4a0b      	ldr	r2, [pc, #44]	@ (8000c0c <MX_DMA_Init+0x38>)
 8000be0:	f043 0301 	orr.w	r3, r3, #1
 8000be4:	6153      	str	r3, [r2, #20]
 8000be6:	4b09      	ldr	r3, [pc, #36]	@ (8000c0c <MX_DMA_Init+0x38>)
 8000be8:	695b      	ldr	r3, [r3, #20]
 8000bea:	f003 0301 	and.w	r3, r3, #1
 8000bee:	607b      	str	r3, [r7, #4]
 8000bf0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	200b      	movs	r0, #11
 8000bf8:	f002 faef 	bl	80031da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000bfc:	200b      	movs	r0, #11
 8000bfe:	f002 fb08 	bl	8003212 <HAL_NVIC_EnableIRQ>

}
 8000c02:	bf00      	nop
 8000c04:	3708      	adds	r7, #8
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	40021000 	.word	0x40021000

08000c10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b088      	sub	sp, #32
 8000c14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c16:	f107 030c 	add.w	r3, r7, #12
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	601a      	str	r2, [r3, #0]
 8000c1e:	605a      	str	r2, [r3, #4]
 8000c20:	609a      	str	r2, [r3, #8]
 8000c22:	60da      	str	r2, [r3, #12]
 8000c24:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c26:	4b2e      	ldr	r3, [pc, #184]	@ (8000ce0 <MX_GPIO_Init+0xd0>)
 8000c28:	695b      	ldr	r3, [r3, #20]
 8000c2a:	4a2d      	ldr	r2, [pc, #180]	@ (8000ce0 <MX_GPIO_Init+0xd0>)
 8000c2c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000c30:	6153      	str	r3, [r2, #20]
 8000c32:	4b2b      	ldr	r3, [pc, #172]	@ (8000ce0 <MX_GPIO_Init+0xd0>)
 8000c34:	695b      	ldr	r3, [r3, #20]
 8000c36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000c3a:	60bb      	str	r3, [r7, #8]
 8000c3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3e:	4b28      	ldr	r3, [pc, #160]	@ (8000ce0 <MX_GPIO_Init+0xd0>)
 8000c40:	695b      	ldr	r3, [r3, #20]
 8000c42:	4a27      	ldr	r2, [pc, #156]	@ (8000ce0 <MX_GPIO_Init+0xd0>)
 8000c44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c48:	6153      	str	r3, [r2, #20]
 8000c4a:	4b25      	ldr	r3, [pc, #148]	@ (8000ce0 <MX_GPIO_Init+0xd0>)
 8000c4c:	695b      	ldr	r3, [r3, #20]
 8000c4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c52:	607b      	str	r3, [r7, #4]
 8000c54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c56:	4b22      	ldr	r3, [pc, #136]	@ (8000ce0 <MX_GPIO_Init+0xd0>)
 8000c58:	695b      	ldr	r3, [r3, #20]
 8000c5a:	4a21      	ldr	r2, [pc, #132]	@ (8000ce0 <MX_GPIO_Init+0xd0>)
 8000c5c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000c60:	6153      	str	r3, [r2, #20]
 8000c62:	4b1f      	ldr	r3, [pc, #124]	@ (8000ce0 <MX_GPIO_Init+0xd0>)
 8000c64:	695b      	ldr	r3, [r3, #20]
 8000c66:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000c6a:	603b      	str	r3, [r7, #0]
 8000c6c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, state_LED_Pin|emergency_LED_Pin, GPIO_PIN_RESET);
 8000c6e:	2200      	movs	r2, #0
 8000c70:	21c0      	movs	r1, #192	@ 0xc0
 8000c72:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c76:	f002 fe07 	bl	8003888 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, jetson_power_Pin|relay_Pin, GPIO_PIN_RESET);
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	2150      	movs	r1, #80	@ 0x50
 8000c7e:	4819      	ldr	r0, [pc, #100]	@ (8000ce4 <MX_GPIO_Init+0xd4>)
 8000c80:	f002 fe02 	bl	8003888 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : emergency_switch_Pin */
  GPIO_InitStruct.Pin = emergency_switch_Pin;
 8000c84:	2320      	movs	r3, #32
 8000c86:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(emergency_switch_GPIO_Port, &GPIO_InitStruct);
 8000c90:	f107 030c 	add.w	r3, r7, #12
 8000c94:	4619      	mov	r1, r3
 8000c96:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c9a:	f002 fc6b 	bl	8003574 <HAL_GPIO_Init>

  /*Configure GPIO pins : state_LED_Pin emergency_LED_Pin */
  GPIO_InitStruct.Pin = state_LED_Pin|emergency_LED_Pin;
 8000c9e:	23c0      	movs	r3, #192	@ 0xc0
 8000ca0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000caa:	2300      	movs	r3, #0
 8000cac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cae:	f107 030c 	add.w	r3, r7, #12
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cb8:	f002 fc5c 	bl	8003574 <HAL_GPIO_Init>

  /*Configure GPIO pins : jetson_power_Pin relay_Pin */
  GPIO_InitStruct.Pin = jetson_power_Pin|relay_Pin;
 8000cbc:	2350      	movs	r3, #80	@ 0x50
 8000cbe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ccc:	f107 030c 	add.w	r3, r7, #12
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4804      	ldr	r0, [pc, #16]	@ (8000ce4 <MX_GPIO_Init+0xd4>)
 8000cd4:	f002 fc4e 	bl	8003574 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cd8:	bf00      	nop
 8000cda:	3720      	adds	r7, #32
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	40021000 	.word	0x40021000
 8000ce4:	48000400 	.word	0x48000400

08000ce8 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b084      	sub	sp, #16
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	60f8      	str	r0, [r7, #12]
 8000cf0:	60b9      	str	r1, [r7, #8]
 8000cf2:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2,(uint8_t *)ptr,len,10);
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	b29a      	uxth	r2, r3
 8000cf8:	230a      	movs	r3, #10
 8000cfa:	68b9      	ldr	r1, [r7, #8]
 8000cfc:	4803      	ldr	r0, [pc, #12]	@ (8000d0c <_write+0x24>)
 8000cfe:	f004 fb75 	bl	80053ec <HAL_UART_Transmit>
  return len;
 8000d02:	687b      	ldr	r3, [r7, #4]
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	3710      	adds	r7, #16
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	20000210 	.word	0x20000210

08000d10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d14:	b672      	cpsid	i
}
 8000d16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d18:	bf00      	nop
 8000d1a:	e7fd      	b.n	8000d18 <Error_Handler+0x8>

08000d1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d22:	4b0f      	ldr	r3, [pc, #60]	@ (8000d60 <HAL_MspInit+0x44>)
 8000d24:	699b      	ldr	r3, [r3, #24]
 8000d26:	4a0e      	ldr	r2, [pc, #56]	@ (8000d60 <HAL_MspInit+0x44>)
 8000d28:	f043 0301 	orr.w	r3, r3, #1
 8000d2c:	6193      	str	r3, [r2, #24]
 8000d2e:	4b0c      	ldr	r3, [pc, #48]	@ (8000d60 <HAL_MspInit+0x44>)
 8000d30:	699b      	ldr	r3, [r3, #24]
 8000d32:	f003 0301 	and.w	r3, r3, #1
 8000d36:	607b      	str	r3, [r7, #4]
 8000d38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d3a:	4b09      	ldr	r3, [pc, #36]	@ (8000d60 <HAL_MspInit+0x44>)
 8000d3c:	69db      	ldr	r3, [r3, #28]
 8000d3e:	4a08      	ldr	r2, [pc, #32]	@ (8000d60 <HAL_MspInit+0x44>)
 8000d40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d44:	61d3      	str	r3, [r2, #28]
 8000d46:	4b06      	ldr	r3, [pc, #24]	@ (8000d60 <HAL_MspInit+0x44>)
 8000d48:	69db      	ldr	r3, [r3, #28]
 8000d4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d4e:	603b      	str	r3, [r7, #0]
 8000d50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d52:	bf00      	nop
 8000d54:	370c      	adds	r7, #12
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	40021000 	.word	0x40021000

08000d64 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b08a      	sub	sp, #40	@ 0x28
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d6c:	f107 0314 	add.w	r3, r7, #20
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	605a      	str	r2, [r3, #4]
 8000d76:	609a      	str	r2, [r3, #8]
 8000d78:	60da      	str	r2, [r3, #12]
 8000d7a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000d84:	d14b      	bne.n	8000e1e <HAL_ADC_MspInit+0xba>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000d86:	4b28      	ldr	r3, [pc, #160]	@ (8000e28 <HAL_ADC_MspInit+0xc4>)
 8000d88:	695b      	ldr	r3, [r3, #20]
 8000d8a:	4a27      	ldr	r2, [pc, #156]	@ (8000e28 <HAL_ADC_MspInit+0xc4>)
 8000d8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d90:	6153      	str	r3, [r2, #20]
 8000d92:	4b25      	ldr	r3, [pc, #148]	@ (8000e28 <HAL_ADC_MspInit+0xc4>)
 8000d94:	695b      	ldr	r3, [r3, #20]
 8000d96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d9a:	613b      	str	r3, [r7, #16]
 8000d9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d9e:	4b22      	ldr	r3, [pc, #136]	@ (8000e28 <HAL_ADC_MspInit+0xc4>)
 8000da0:	695b      	ldr	r3, [r3, #20]
 8000da2:	4a21      	ldr	r2, [pc, #132]	@ (8000e28 <HAL_ADC_MspInit+0xc4>)
 8000da4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000da8:	6153      	str	r3, [r2, #20]
 8000daa:	4b1f      	ldr	r3, [pc, #124]	@ (8000e28 <HAL_ADC_MspInit+0xc4>)
 8000dac:	695b      	ldr	r3, [r3, #20]
 8000dae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000db2:	60fb      	str	r3, [r7, #12]
 8000db4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN11
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = i_bat_Pin|v_bat_Pin;
 8000db6:	2303      	movs	r3, #3
 8000db8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dba:	2303      	movs	r3, #3
 8000dbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc2:	f107 0314 	add.w	r3, r7, #20
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4818      	ldr	r0, [pc, #96]	@ (8000e2c <HAL_ADC_MspInit+0xc8>)
 8000dca:	f002 fbd3 	bl	8003574 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000dce:	4b18      	ldr	r3, [pc, #96]	@ (8000e30 <HAL_ADC_MspInit+0xcc>)
 8000dd0:	4a18      	ldr	r2, [pc, #96]	@ (8000e34 <HAL_ADC_MspInit+0xd0>)
 8000dd2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000dd4:	4b16      	ldr	r3, [pc, #88]	@ (8000e30 <HAL_ADC_MspInit+0xcc>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dda:	4b15      	ldr	r3, [pc, #84]	@ (8000e30 <HAL_ADC_MspInit+0xcc>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000de0:	4b13      	ldr	r3, [pc, #76]	@ (8000e30 <HAL_ADC_MspInit+0xcc>)
 8000de2:	2280      	movs	r2, #128	@ 0x80
 8000de4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000de6:	4b12      	ldr	r3, [pc, #72]	@ (8000e30 <HAL_ADC_MspInit+0xcc>)
 8000de8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000dec:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000dee:	4b10      	ldr	r3, [pc, #64]	@ (8000e30 <HAL_ADC_MspInit+0xcc>)
 8000df0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000df4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000df6:	4b0e      	ldr	r3, [pc, #56]	@ (8000e30 <HAL_ADC_MspInit+0xcc>)
 8000df8:	2220      	movs	r2, #32
 8000dfa:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000dfc:	4b0c      	ldr	r3, [pc, #48]	@ (8000e30 <HAL_ADC_MspInit+0xcc>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000e02:	480b      	ldr	r0, [pc, #44]	@ (8000e30 <HAL_ADC_MspInit+0xcc>)
 8000e04:	f002 fa1f 	bl	8003246 <HAL_DMA_Init>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <HAL_ADC_MspInit+0xae>
    {
      Error_Handler();
 8000e0e:	f7ff ff7f 	bl	8000d10 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4a06      	ldr	r2, [pc, #24]	@ (8000e30 <HAL_ADC_MspInit+0xcc>)
 8000e16:	639a      	str	r2, [r3, #56]	@ 0x38
 8000e18:	4a05      	ldr	r2, [pc, #20]	@ (8000e30 <HAL_ADC_MspInit+0xcc>)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000e1e:	bf00      	nop
 8000e20:	3728      	adds	r7, #40	@ 0x28
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	40021000 	.word	0x40021000
 8000e2c:	48000400 	.word	0x48000400
 8000e30:	2000010c 	.word	0x2000010c
 8000e34:	40020008 	.word	0x40020008

08000e38 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b08a      	sub	sp, #40	@ 0x28
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e40:	f107 0314 	add.w	r3, r7, #20
 8000e44:	2200      	movs	r2, #0
 8000e46:	601a      	str	r2, [r3, #0]
 8000e48:	605a      	str	r2, [r3, #4]
 8000e4a:	609a      	str	r2, [r3, #8]
 8000e4c:	60da      	str	r2, [r3, #12]
 8000e4e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a1c      	ldr	r2, [pc, #112]	@ (8000ec8 <HAL_CAN_MspInit+0x90>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d131      	bne.n	8000ebe <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000e5a:	4b1c      	ldr	r3, [pc, #112]	@ (8000ecc <HAL_CAN_MspInit+0x94>)
 8000e5c:	69db      	ldr	r3, [r3, #28]
 8000e5e:	4a1b      	ldr	r2, [pc, #108]	@ (8000ecc <HAL_CAN_MspInit+0x94>)
 8000e60:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000e64:	61d3      	str	r3, [r2, #28]
 8000e66:	4b19      	ldr	r3, [pc, #100]	@ (8000ecc <HAL_CAN_MspInit+0x94>)
 8000e68:	69db      	ldr	r3, [r3, #28]
 8000e6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000e6e:	613b      	str	r3, [r7, #16]
 8000e70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e72:	4b16      	ldr	r3, [pc, #88]	@ (8000ecc <HAL_CAN_MspInit+0x94>)
 8000e74:	695b      	ldr	r3, [r3, #20]
 8000e76:	4a15      	ldr	r2, [pc, #84]	@ (8000ecc <HAL_CAN_MspInit+0x94>)
 8000e78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e7c:	6153      	str	r3, [r2, #20]
 8000e7e:	4b13      	ldr	r3, [pc, #76]	@ (8000ecc <HAL_CAN_MspInit+0x94>)
 8000e80:	695b      	ldr	r3, [r3, #20]
 8000e82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e86:	60fb      	str	r3, [r7, #12]
 8000e88:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000e8a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000e8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e90:	2302      	movs	r3, #2
 8000e92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e94:	2300      	movs	r3, #0
 8000e96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e98:	2303      	movs	r3, #3
 8000e9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8000e9c:	2309      	movs	r3, #9
 8000e9e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea0:	f107 0314 	add.w	r3, r7, #20
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000eaa:	f002 fb63 	bl	8003574 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CAN_RX0_IRQn, 0, 0);
 8000eae:	2200      	movs	r2, #0
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	2014      	movs	r0, #20
 8000eb4:	f002 f991 	bl	80031da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX0_IRQn);
 8000eb8:	2014      	movs	r0, #20
 8000eba:	f002 f9aa 	bl	8003212 <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN_MspInit 1 */

  }

}
 8000ebe:	bf00      	nop
 8000ec0:	3728      	adds	r7, #40	@ 0x28
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	40006400 	.word	0x40006400
 8000ecc:	40021000 	.word	0x40021000

08000ed0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a1a      	ldr	r2, [pc, #104]	@ (8000f48 <HAL_TIM_Base_MspInit+0x78>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d114      	bne.n	8000f0c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000ee2:	4b1a      	ldr	r3, [pc, #104]	@ (8000f4c <HAL_TIM_Base_MspInit+0x7c>)
 8000ee4:	69db      	ldr	r3, [r3, #28]
 8000ee6:	4a19      	ldr	r2, [pc, #100]	@ (8000f4c <HAL_TIM_Base_MspInit+0x7c>)
 8000ee8:	f043 0310 	orr.w	r3, r3, #16
 8000eec:	61d3      	str	r3, [r2, #28]
 8000eee:	4b17      	ldr	r3, [pc, #92]	@ (8000f4c <HAL_TIM_Base_MspInit+0x7c>)
 8000ef0:	69db      	ldr	r3, [r3, #28]
 8000ef2:	f003 0310 	and.w	r3, r3, #16
 8000ef6:	60fb      	str	r3, [r7, #12]
 8000ef8:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, 0, 0);
 8000efa:	2200      	movs	r2, #0
 8000efc:	2100      	movs	r1, #0
 8000efe:	2036      	movs	r0, #54	@ 0x36
 8000f00:	f002 f96b 	bl	80031da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC1_IRQn);
 8000f04:	2036      	movs	r0, #54	@ 0x36
 8000f06:	f002 f984 	bl	8003212 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8000f0a:	e018      	b.n	8000f3e <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM7)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a0f      	ldr	r2, [pc, #60]	@ (8000f50 <HAL_TIM_Base_MspInit+0x80>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d113      	bne.n	8000f3e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000f16:	4b0d      	ldr	r3, [pc, #52]	@ (8000f4c <HAL_TIM_Base_MspInit+0x7c>)
 8000f18:	69db      	ldr	r3, [r3, #28]
 8000f1a:	4a0c      	ldr	r2, [pc, #48]	@ (8000f4c <HAL_TIM_Base_MspInit+0x7c>)
 8000f1c:	f043 0320 	orr.w	r3, r3, #32
 8000f20:	61d3      	str	r3, [r2, #28]
 8000f22:	4b0a      	ldr	r3, [pc, #40]	@ (8000f4c <HAL_TIM_Base_MspInit+0x7c>)
 8000f24:	69db      	ldr	r3, [r3, #28]
 8000f26:	f003 0320 	and.w	r3, r3, #32
 8000f2a:	60bb      	str	r3, [r7, #8]
 8000f2c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_DAC2_IRQn, 0, 0);
 8000f2e:	2200      	movs	r2, #0
 8000f30:	2100      	movs	r1, #0
 8000f32:	2037      	movs	r0, #55	@ 0x37
 8000f34:	f002 f951 	bl	80031da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_DAC2_IRQn);
 8000f38:	2037      	movs	r0, #55	@ 0x37
 8000f3a:	f002 f96a 	bl	8003212 <HAL_NVIC_EnableIRQ>
}
 8000f3e:	bf00      	nop
 8000f40:	3710      	adds	r7, #16
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	40001000 	.word	0x40001000
 8000f4c:	40021000 	.word	0x40021000
 8000f50:	40001400 	.word	0x40001400

08000f54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b08a      	sub	sp, #40	@ 0x28
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f5c:	f107 0314 	add.w	r3, r7, #20
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	605a      	str	r2, [r3, #4]
 8000f66:	609a      	str	r2, [r3, #8]
 8000f68:	60da      	str	r2, [r3, #12]
 8000f6a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a18      	ldr	r2, [pc, #96]	@ (8000fd4 <HAL_UART_MspInit+0x80>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d129      	bne.n	8000fca <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f76:	4b18      	ldr	r3, [pc, #96]	@ (8000fd8 <HAL_UART_MspInit+0x84>)
 8000f78:	69db      	ldr	r3, [r3, #28]
 8000f7a:	4a17      	ldr	r2, [pc, #92]	@ (8000fd8 <HAL_UART_MspInit+0x84>)
 8000f7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f80:	61d3      	str	r3, [r2, #28]
 8000f82:	4b15      	ldr	r3, [pc, #84]	@ (8000fd8 <HAL_UART_MspInit+0x84>)
 8000f84:	69db      	ldr	r3, [r3, #28]
 8000f86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f8a:	613b      	str	r3, [r7, #16]
 8000f8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8e:	4b12      	ldr	r3, [pc, #72]	@ (8000fd8 <HAL_UART_MspInit+0x84>)
 8000f90:	695b      	ldr	r3, [r3, #20]
 8000f92:	4a11      	ldr	r2, [pc, #68]	@ (8000fd8 <HAL_UART_MspInit+0x84>)
 8000f94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f98:	6153      	str	r3, [r2, #20]
 8000f9a:	4b0f      	ldr	r3, [pc, #60]	@ (8000fd8 <HAL_UART_MspInit+0x84>)
 8000f9c:	695b      	ldr	r3, [r3, #20]
 8000f9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fa2:	60fb      	str	r3, [r7, #12]
 8000fa4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000fa6:	f248 0304 	movw	r3, #32772	@ 0x8004
 8000faa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fac:	2302      	movs	r3, #2
 8000fae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fb4:	2303      	movs	r3, #3
 8000fb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fb8:	2307      	movs	r3, #7
 8000fba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fbc:	f107 0314 	add.w	r3, r7, #20
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fc6:	f002 fad5 	bl	8003574 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000fca:	bf00      	nop
 8000fcc:	3728      	adds	r7, #40	@ 0x28
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	40004400 	.word	0x40004400
 8000fd8:	40021000 	.word	0x40021000

08000fdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fe0:	bf00      	nop
 8000fe2:	e7fd      	b.n	8000fe0 <NMI_Handler+0x4>

08000fe4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fe8:	bf00      	nop
 8000fea:	e7fd      	b.n	8000fe8 <HardFault_Handler+0x4>

08000fec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ff0:	bf00      	nop
 8000ff2:	e7fd      	b.n	8000ff0 <MemManage_Handler+0x4>

08000ff4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ff8:	bf00      	nop
 8000ffa:	e7fd      	b.n	8000ff8 <BusFault_Handler+0x4>

08000ffc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001000:	bf00      	nop
 8001002:	e7fd      	b.n	8001000 <UsageFault_Handler+0x4>

08001004 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001008:	bf00      	nop
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr

08001012 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001012:	b480      	push	{r7}
 8001014:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001016:	bf00      	nop
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001024:	bf00      	nop
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr

0800102e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800102e:	b580      	push	{r7, lr}
 8001030:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001032:	f000 f935 	bl	80012a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
	...

0800103c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001040:	4802      	ldr	r0, [pc, #8]	@ (800104c <DMA1_Channel1_IRQHandler+0x10>)
 8001042:	f002 f9a6 	bl	8003392 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001046:	bf00      	nop
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	2000010c 	.word	0x2000010c

08001050 <CAN_RX0_IRQHandler>:

/**
  * @brief This function handles CAN RX0 interrupt.
  */
void CAN_RX0_IRQHandler(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX0_IRQn 0 */

  /* USER CODE END CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001054:	4802      	ldr	r0, [pc, #8]	@ (8001060 <CAN_RX0_IRQHandler+0x10>)
 8001056:	f001 fdb6 	bl	8002bc6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX0_IRQn 1 */

  /* USER CODE END CAN_RX0_IRQn 1 */
}
 800105a:	bf00      	nop
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	20000150 	.word	0x20000150

08001064 <TIM6_DAC1_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC1 underrun error interrupts.
  */
void TIM6_DAC1_IRQHandler(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC1_IRQn 0 */

  /* USER CODE END TIM6_DAC1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001068:	4802      	ldr	r0, [pc, #8]	@ (8001074 <TIM6_DAC1_IRQHandler+0x10>)
 800106a:	f003 ff37 	bl	8004edc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC1_IRQn 1 */

  /* USER CODE END TIM6_DAC1_IRQn 1 */
}
 800106e:	bf00      	nop
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	20000178 	.word	0x20000178

08001078 <TIM7_DAC2_IRQHandler>:

/**
  * @brief This function handles TIM7 global and DAC2 underrun error interrupts.
  */
void TIM7_DAC2_IRQHandler(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_DAC2_IRQn 0 */

  /* USER CODE END TIM7_DAC2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800107c:	4802      	ldr	r0, [pc, #8]	@ (8001088 <TIM7_DAC2_IRQHandler+0x10>)
 800107e:	f003 ff2d 	bl	8004edc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_DAC2_IRQn 1 */

  /* USER CODE END TIM7_DAC2_IRQn 1 */
}
 8001082:	bf00      	nop
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	200001c4 	.word	0x200001c4

0800108c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b086      	sub	sp, #24
 8001090:	af00      	add	r7, sp, #0
 8001092:	60f8      	str	r0, [r7, #12]
 8001094:	60b9      	str	r1, [r7, #8]
 8001096:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001098:	2300      	movs	r3, #0
 800109a:	617b      	str	r3, [r7, #20]
 800109c:	e00a      	b.n	80010b4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800109e:	f3af 8000 	nop.w
 80010a2:	4601      	mov	r1, r0
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	1c5a      	adds	r2, r3, #1
 80010a8:	60ba      	str	r2, [r7, #8]
 80010aa:	b2ca      	uxtb	r2, r1
 80010ac:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	3301      	adds	r3, #1
 80010b2:	617b      	str	r3, [r7, #20]
 80010b4:	697a      	ldr	r2, [r7, #20]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	429a      	cmp	r2, r3
 80010ba:	dbf0      	blt.n	800109e <_read+0x12>
  }

  return len;
 80010bc:	687b      	ldr	r3, [r7, #4]
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3718      	adds	r7, #24
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}

080010c6 <_close>:
  }
  return len;
}

int _close(int file)
{
 80010c6:	b480      	push	{r7}
 80010c8:	b083      	sub	sp, #12
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80010ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	370c      	adds	r7, #12
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr

080010de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010de:	b480      	push	{r7}
 80010e0:	b083      	sub	sp, #12
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	6078      	str	r0, [r7, #4]
 80010e6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80010ee:	605a      	str	r2, [r3, #4]
  return 0;
 80010f0:	2300      	movs	r3, #0
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	370c      	adds	r7, #12
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr

080010fe <_isatty>:

int _isatty(int file)
{
 80010fe:	b480      	push	{r7}
 8001100:	b083      	sub	sp, #12
 8001102:	af00      	add	r7, sp, #0
 8001104:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001106:	2301      	movs	r3, #1
}
 8001108:	4618      	mov	r0, r3
 800110a:	370c      	adds	r7, #12
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr

08001114 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001114:	b480      	push	{r7}
 8001116:	b085      	sub	sp, #20
 8001118:	af00      	add	r7, sp, #0
 800111a:	60f8      	str	r0, [r7, #12]
 800111c:	60b9      	str	r1, [r7, #8]
 800111e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001120:	2300      	movs	r3, #0
}
 8001122:	4618      	mov	r0, r3
 8001124:	3714      	adds	r7, #20
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
	...

08001130 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b086      	sub	sp, #24
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001138:	4a14      	ldr	r2, [pc, #80]	@ (800118c <_sbrk+0x5c>)
 800113a:	4b15      	ldr	r3, [pc, #84]	@ (8001190 <_sbrk+0x60>)
 800113c:	1ad3      	subs	r3, r2, r3
 800113e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001144:	4b13      	ldr	r3, [pc, #76]	@ (8001194 <_sbrk+0x64>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d102      	bne.n	8001152 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800114c:	4b11      	ldr	r3, [pc, #68]	@ (8001194 <_sbrk+0x64>)
 800114e:	4a12      	ldr	r2, [pc, #72]	@ (8001198 <_sbrk+0x68>)
 8001150:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001152:	4b10      	ldr	r3, [pc, #64]	@ (8001194 <_sbrk+0x64>)
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4413      	add	r3, r2
 800115a:	693a      	ldr	r2, [r7, #16]
 800115c:	429a      	cmp	r2, r3
 800115e:	d207      	bcs.n	8001170 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001160:	f005 f834 	bl	80061cc <__errno>
 8001164:	4603      	mov	r3, r0
 8001166:	220c      	movs	r2, #12
 8001168:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800116a:	f04f 33ff 	mov.w	r3, #4294967295
 800116e:	e009      	b.n	8001184 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001170:	4b08      	ldr	r3, [pc, #32]	@ (8001194 <_sbrk+0x64>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001176:	4b07      	ldr	r3, [pc, #28]	@ (8001194 <_sbrk+0x64>)
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4413      	add	r3, r2
 800117e:	4a05      	ldr	r2, [pc, #20]	@ (8001194 <_sbrk+0x64>)
 8001180:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001182:	68fb      	ldr	r3, [r7, #12]
}
 8001184:	4618      	mov	r0, r3
 8001186:	3718      	adds	r7, #24
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	20003000 	.word	0x20003000
 8001190:	00000400 	.word	0x00000400
 8001194:	200002ac 	.word	0x200002ac
 8001198:	20000400 	.word	0x20000400

0800119c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011a0:	4b06      	ldr	r3, [pc, #24]	@ (80011bc <SystemInit+0x20>)
 80011a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011a6:	4a05      	ldr	r2, [pc, #20]	@ (80011bc <SystemInit+0x20>)
 80011a8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011ac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011b0:	bf00      	nop
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	e000ed00 	.word	0xe000ed00

080011c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80011c0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80011f8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80011c4:	f7ff ffea 	bl	800119c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011c8:	480c      	ldr	r0, [pc, #48]	@ (80011fc <LoopForever+0x6>)
  ldr r1, =_edata
 80011ca:	490d      	ldr	r1, [pc, #52]	@ (8001200 <LoopForever+0xa>)
  ldr r2, =_sidata
 80011cc:	4a0d      	ldr	r2, [pc, #52]	@ (8001204 <LoopForever+0xe>)
  movs r3, #0
 80011ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011d0:	e002      	b.n	80011d8 <LoopCopyDataInit>

080011d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011d6:	3304      	adds	r3, #4

080011d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011dc:	d3f9      	bcc.n	80011d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011de:	4a0a      	ldr	r2, [pc, #40]	@ (8001208 <LoopForever+0x12>)
  ldr r4, =_ebss
 80011e0:	4c0a      	ldr	r4, [pc, #40]	@ (800120c <LoopForever+0x16>)
  movs r3, #0
 80011e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011e4:	e001      	b.n	80011ea <LoopFillZerobss>

080011e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011e8:	3204      	adds	r2, #4

080011ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011ec:	d3fb      	bcc.n	80011e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011ee:	f004 fff3 	bl	80061d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80011f2:	f7ff fa07 	bl	8000604 <main>

080011f6 <LoopForever>:

LoopForever:
    b LoopForever
 80011f6:	e7fe      	b.n	80011f6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80011f8:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80011fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001200:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001204:	08006d28 	.word	0x08006d28
  ldr r2, =_sbss
 8001208:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800120c:	20000400 	.word	0x20000400

08001210 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001210:	e7fe      	b.n	8001210 <ADC1_2_IRQHandler>
	...

08001214 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001218:	4b08      	ldr	r3, [pc, #32]	@ (800123c <HAL_Init+0x28>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a07      	ldr	r2, [pc, #28]	@ (800123c <HAL_Init+0x28>)
 800121e:	f043 0310 	orr.w	r3, r3, #16
 8001222:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001224:	2003      	movs	r0, #3
 8001226:	f001 ffcd 	bl	80031c4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800122a:	2000      	movs	r0, #0
 800122c:	f000 f808 	bl	8001240 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001230:	f7ff fd74 	bl	8000d1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001234:	2300      	movs	r3, #0
}
 8001236:	4618      	mov	r0, r3
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	40022000 	.word	0x40022000

08001240 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001248:	4b12      	ldr	r3, [pc, #72]	@ (8001294 <HAL_InitTick+0x54>)
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	4b12      	ldr	r3, [pc, #72]	@ (8001298 <HAL_InitTick+0x58>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	4619      	mov	r1, r3
 8001252:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001256:	fbb3 f3f1 	udiv	r3, r3, r1
 800125a:	fbb2 f3f3 	udiv	r3, r2, r3
 800125e:	4618      	mov	r0, r3
 8001260:	f001 ffe5 	bl	800322e <HAL_SYSTICK_Config>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800126a:	2301      	movs	r3, #1
 800126c:	e00e      	b.n	800128c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2b0f      	cmp	r3, #15
 8001272:	d80a      	bhi.n	800128a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001274:	2200      	movs	r2, #0
 8001276:	6879      	ldr	r1, [r7, #4]
 8001278:	f04f 30ff 	mov.w	r0, #4294967295
 800127c:	f001 ffad 	bl	80031da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001280:	4a06      	ldr	r2, [pc, #24]	@ (800129c <HAL_InitTick+0x5c>)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001286:	2300      	movs	r3, #0
 8001288:	e000      	b.n	800128c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
}
 800128c:	4618      	mov	r0, r3
 800128e:	3708      	adds	r7, #8
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	20000000 	.word	0x20000000
 8001298:	20000008 	.word	0x20000008
 800129c:	20000004 	.word	0x20000004

080012a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012a4:	4b06      	ldr	r3, [pc, #24]	@ (80012c0 <HAL_IncTick+0x20>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	461a      	mov	r2, r3
 80012aa:	4b06      	ldr	r3, [pc, #24]	@ (80012c4 <HAL_IncTick+0x24>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4413      	add	r3, r2
 80012b0:	4a04      	ldr	r2, [pc, #16]	@ (80012c4 <HAL_IncTick+0x24>)
 80012b2:	6013      	str	r3, [r2, #0]
}
 80012b4:	bf00      	nop
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	20000008 	.word	0x20000008
 80012c4:	200002b0 	.word	0x200002b0

080012c8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  return uwTick;  
 80012cc:	4b03      	ldr	r3, [pc, #12]	@ (80012dc <HAL_GetTick+0x14>)
 80012ce:	681b      	ldr	r3, [r3, #0]
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	200002b0 	.word	0x200002b0

080012e0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012e8:	f7ff ffee 	bl	80012c8 <HAL_GetTick>
 80012ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012f8:	d005      	beq.n	8001306 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001324 <HAL_Delay+0x44>)
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	461a      	mov	r2, r3
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	4413      	add	r3, r2
 8001304:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001306:	bf00      	nop
 8001308:	f7ff ffde 	bl	80012c8 <HAL_GetTick>
 800130c:	4602      	mov	r2, r0
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	68fa      	ldr	r2, [r7, #12]
 8001314:	429a      	cmp	r2, r3
 8001316:	d8f7      	bhi.n	8001308 <HAL_Delay+0x28>
  {
  }
}
 8001318:	bf00      	nop
 800131a:	bf00      	nop
 800131c:	3710      	adds	r7, #16
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	20000008 	.word	0x20000008

08001328 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001330:	bf00      	nop
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr

0800133c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001344:	bf00      	nop
 8001346:	370c      	adds	r7, #12
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr

08001350 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001358:	bf00      	nop
 800135a:	370c      	adds	r7, #12
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr

08001364 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b09a      	sub	sp, #104	@ 0x68
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800136c:	2300      	movs	r3, #0
 800136e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001372:	2300      	movs	r3, #0
 8001374:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001376:	2300      	movs	r3, #0
 8001378:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d101      	bne.n	8001384 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001380:	2301      	movs	r3, #1
 8001382:	e172      	b.n	800166a <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	691b      	ldr	r3, [r3, #16]
 8001388:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800138e:	f003 0310 	and.w	r3, r3, #16
 8001392:	2b00      	cmp	r3, #0
 8001394:	d176      	bne.n	8001484 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800139a:	2b00      	cmp	r3, #0
 800139c:	d152      	bne.n	8001444 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2200      	movs	r2, #0
 80013a2:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2200      	movs	r2, #0
 80013a8:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2200      	movs	r2, #0
 80013ae:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2200      	movs	r2, #0
 80013b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013b8:	6878      	ldr	r0, [r7, #4]
 80013ba:	f7ff fcd3 	bl	8000d64 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d13b      	bne.n	8001444 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	f000 fef5 	bl	80021bc <ADC_Disable>
 80013d2:	4603      	mov	r3, r0
 80013d4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013dc:	f003 0310 	and.w	r3, r3, #16
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d12f      	bne.n	8001444 <HAL_ADC_Init+0xe0>
 80013e4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d12b      	bne.n	8001444 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013f0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80013f4:	f023 0302 	bic.w	r3, r3, #2
 80013f8:	f043 0202 	orr.w	r2, r3, #2
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	689a      	ldr	r2, [r3, #8]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800140e:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	689a      	ldr	r2, [r3, #8]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800141e:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001420:	4b94      	ldr	r3, [pc, #592]	@ (8001674 <HAL_ADC_Init+0x310>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a94      	ldr	r2, [pc, #592]	@ (8001678 <HAL_ADC_Init+0x314>)
 8001426:	fba2 2303 	umull	r2, r3, r2, r3
 800142a:	0c9a      	lsrs	r2, r3, #18
 800142c:	4613      	mov	r3, r2
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	4413      	add	r3, r2
 8001432:	005b      	lsls	r3, r3, #1
 8001434:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001436:	e002      	b.n	800143e <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	3b01      	subs	r3, #1
 800143c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800143e:	68bb      	ldr	r3, [r7, #8]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d1f9      	bne.n	8001438 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d007      	beq.n	8001462 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800145c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001460:	d110      	bne.n	8001484 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001466:	f023 0312 	bic.w	r3, r3, #18
 800146a:	f043 0210 	orr.w	r2, r3, #16
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001476:	f043 0201 	orr.w	r2, r3, #1
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001488:	f003 0310 	and.w	r3, r3, #16
 800148c:	2b00      	cmp	r3, #0
 800148e:	f040 80df 	bne.w	8001650 <HAL_ADC_Init+0x2ec>
 8001492:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8001496:	2b00      	cmp	r3, #0
 8001498:	f040 80da 	bne.w	8001650 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	f040 80d2 	bne.w	8001650 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014b0:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80014b4:	f043 0202 	orr.w	r2, r3, #2
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014bc:	4b6f      	ldr	r3, [pc, #444]	@ (800167c <HAL_ADC_Init+0x318>)
 80014be:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80014c8:	d102      	bne.n	80014d0 <HAL_ADC_Init+0x16c>
 80014ca:	4b6d      	ldr	r3, [pc, #436]	@ (8001680 <HAL_ADC_Init+0x31c>)
 80014cc:	60fb      	str	r3, [r7, #12]
 80014ce:	e002      	b.n	80014d6 <HAL_ADC_Init+0x172>
 80014d0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80014d4:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	f003 0303 	and.w	r3, r3, #3
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	d108      	bne.n	80014f6 <HAL_ADC_Init+0x192>
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 0301 	and.w	r3, r3, #1
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d101      	bne.n	80014f6 <HAL_ADC_Init+0x192>
 80014f2:	2301      	movs	r3, #1
 80014f4:	e000      	b.n	80014f8 <HAL_ADC_Init+0x194>
 80014f6:	2300      	movs	r3, #0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d11c      	bne.n	8001536 <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80014fc:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d010      	beq.n	8001524 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	f003 0303 	and.w	r3, r3, #3
 800150a:	2b01      	cmp	r3, #1
 800150c:	d107      	bne.n	800151e <HAL_ADC_Init+0x1ba>
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f003 0301 	and.w	r3, r3, #1
 8001516:	2b01      	cmp	r3, #1
 8001518:	d101      	bne.n	800151e <HAL_ADC_Init+0x1ba>
 800151a:	2301      	movs	r3, #1
 800151c:	e000      	b.n	8001520 <HAL_ADC_Init+0x1bc>
 800151e:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001520:	2b00      	cmp	r3, #0
 8001522:	d108      	bne.n	8001536 <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001524:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	431a      	orrs	r2, r3
 8001532:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001534:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	7e5b      	ldrb	r3, [r3, #25]
 800153a:	035b      	lsls	r3, r3, #13
 800153c:	687a      	ldr	r2, [r7, #4]
 800153e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001540:	2a01      	cmp	r2, #1
 8001542:	d002      	beq.n	800154a <HAL_ADC_Init+0x1e6>
 8001544:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001548:	e000      	b.n	800154c <HAL_ADC_Init+0x1e8>
 800154a:	2200      	movs	r2, #0
 800154c:	431a      	orrs	r2, r3
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	68db      	ldr	r3, [r3, #12]
 8001552:	431a      	orrs	r2, r3
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	4313      	orrs	r3, r2
 800155a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800155c:	4313      	orrs	r3, r2
 800155e:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001566:	2b01      	cmp	r3, #1
 8001568:	d11b      	bne.n	80015a2 <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	7e5b      	ldrb	r3, [r3, #25]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d109      	bne.n	8001586 <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001576:	3b01      	subs	r3, #1
 8001578:	045a      	lsls	r2, r3, #17
 800157a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800157c:	4313      	orrs	r3, r2
 800157e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001582:	663b      	str	r3, [r7, #96]	@ 0x60
 8001584:	e00d      	b.n	80015a2 <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800158a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800158e:	f043 0220 	orr.w	r2, r3, #32
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800159a:	f043 0201 	orr.w	r2, r3, #1
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d007      	beq.n	80015ba <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015b2:	4313      	orrs	r3, r2
 80015b4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80015b6:	4313      	orrs	r3, r2
 80015b8:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	f003 030c 	and.w	r3, r3, #12
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d114      	bne.n	80015f2 <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	68db      	ldr	r3, [r3, #12]
 80015ce:	687a      	ldr	r2, [r7, #4]
 80015d0:	6812      	ldr	r2, [r2, #0]
 80015d2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80015d6:	f023 0302 	bic.w	r3, r3, #2
 80015da:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	7e1b      	ldrb	r3, [r3, #24]
 80015e0:	039a      	lsls	r2, r3, #14
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80015e8:	005b      	lsls	r3, r3, #1
 80015ea:	4313      	orrs	r3, r2
 80015ec:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80015ee:	4313      	orrs	r3, r2
 80015f0:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	68da      	ldr	r2, [r3, #12]
 80015f8:	4b22      	ldr	r3, [pc, #136]	@ (8001684 <HAL_ADC_Init+0x320>)
 80015fa:	4013      	ands	r3, r2
 80015fc:	687a      	ldr	r2, [r7, #4]
 80015fe:	6812      	ldr	r2, [r2, #0]
 8001600:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8001602:	430b      	orrs	r3, r1
 8001604:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	691b      	ldr	r3, [r3, #16]
 800160a:	2b01      	cmp	r3, #1
 800160c:	d10c      	bne.n	8001628 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001614:	f023 010f 	bic.w	r1, r3, #15
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	69db      	ldr	r3, [r3, #28]
 800161c:	1e5a      	subs	r2, r3, #1
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	430a      	orrs	r2, r1
 8001624:	631a      	str	r2, [r3, #48]	@ 0x30
 8001626:	e007      	b.n	8001638 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f022 020f 	bic.w	r2, r2, #15
 8001636:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2200      	movs	r2, #0
 800163c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001642:	f023 0303 	bic.w	r3, r3, #3
 8001646:	f043 0201 	orr.w	r2, r3, #1
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	641a      	str	r2, [r3, #64]	@ 0x40
 800164e:	e00a      	b.n	8001666 <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001654:	f023 0312 	bic.w	r3, r3, #18
 8001658:	f043 0210 	orr.w	r2, r3, #16
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001660:	2301      	movs	r3, #1
 8001662:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001666:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800166a:	4618      	mov	r0, r3
 800166c:	3768      	adds	r7, #104	@ 0x68
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	20000000 	.word	0x20000000
 8001678:	431bde83 	.word	0x431bde83
 800167c:	50000300 	.word	0x50000300
 8001680:	50000100 	.word	0x50000100
 8001684:	fff0c007 	.word	0xfff0c007

08001688 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b086      	sub	sp, #24
 800168c:	af00      	add	r7, sp, #0
 800168e:	60f8      	str	r0, [r7, #12]
 8001690:	60b9      	str	r1, [r7, #8]
 8001692:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001694:	2300      	movs	r3, #0
 8001696:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	f003 0304 	and.w	r3, r3, #4
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	f040 80b9 	bne.w	800181a <HAL_ADC_Start_DMA+0x192>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d101      	bne.n	80016b6 <HAL_ADC_Start_DMA+0x2e>
 80016b2:	2302      	movs	r3, #2
 80016b4:	e0b4      	b.n	8001820 <HAL_ADC_Start_DMA+0x198>
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	2201      	movs	r2, #1
 80016ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 80016be:	4b5a      	ldr	r3, [pc, #360]	@ (8001828 <HAL_ADC_Start_DMA+0x1a0>)
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	f003 031f 	and.w	r3, r3, #31
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	f040 80a0 	bne.w	800180c <HAL_ADC_Start_DMA+0x184>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80016cc:	68f8      	ldr	r0, [r7, #12]
 80016ce:	f000 fd11 	bl	80020f4 <ADC_Enable>
 80016d2:	4603      	mov	r3, r0
 80016d4:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80016d6:	7dfb      	ldrb	r3, [r7, #23]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	f040 8092 	bne.w	8001802 <HAL_ADC_Start_DMA+0x17a>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80016e6:	f023 0301 	bic.w	r3, r3, #1
 80016ea:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80016f2:	4b4d      	ldr	r3, [pc, #308]	@ (8001828 <HAL_ADC_Start_DMA+0x1a0>)
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	f003 031f 	and.w	r3, r3, #31
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d004      	beq.n	8001708 <HAL_ADC_Start_DMA+0x80>
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001706:	d115      	bne.n	8001734 <HAL_ADC_Start_DMA+0xac>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800170c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	68db      	ldr	r3, [r3, #12]
 800171a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d027      	beq.n	8001772 <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001726:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800172a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	641a      	str	r2, [r3, #64]	@ 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001732:	e01e      	b.n	8001772 <HAL_ADC_Start_DMA+0xea>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001738:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001748:	d004      	beq.n	8001754 <HAL_ADC_Start_DMA+0xcc>
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a37      	ldr	r2, [pc, #220]	@ (800182c <HAL_ADC_Start_DMA+0x1a4>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d10e      	bne.n	8001772 <HAL_ADC_Start_DMA+0xea>
 8001754:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001758:	68db      	ldr	r3, [r3, #12]
 800175a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800175e:	2b00      	cmp	r3, #0
 8001760:	d007      	beq.n	8001772 <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001766:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800176a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	641a      	str	r2, [r3, #64]	@ 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001776:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800177a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800177e:	d106      	bne.n	800178e <HAL_ADC_Start_DMA+0x106>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001784:	f023 0206 	bic.w	r2, r3, #6
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	645a      	str	r2, [r3, #68]	@ 0x44
 800178c:	e002      	b.n	8001794 <HAL_ADC_Start_DMA+0x10c>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	2200      	movs	r2, #0
 8001792:	645a      	str	r2, [r3, #68]	@ 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	2200      	movs	r2, #0
 8001798:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017a0:	4a23      	ldr	r2, [pc, #140]	@ (8001830 <HAL_ADC_Start_DMA+0x1a8>)
 80017a2:	629a      	str	r2, [r3, #40]	@ 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017a8:	4a22      	ldr	r2, [pc, #136]	@ (8001834 <HAL_ADC_Start_DMA+0x1ac>)
 80017aa:	62da      	str	r2, [r3, #44]	@ 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017b0:	4a21      	ldr	r2, [pc, #132]	@ (8001838 <HAL_ADC_Start_DMA+0x1b0>)
 80017b2:	631a      	str	r2, [r3, #48]	@ 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	221c      	movs	r2, #28
 80017ba:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	685a      	ldr	r2, [r3, #4]
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f042 0210 	orr.w	r2, r2, #16
 80017ca:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	68da      	ldr	r2, [r3, #12]
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f042 0201 	orr.w	r2, r2, #1
 80017da:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	3340      	adds	r3, #64	@ 0x40
 80017e6:	4619      	mov	r1, r3
 80017e8:	68ba      	ldr	r2, [r7, #8]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	f001 fd72 	bl	80032d4 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	689a      	ldr	r2, [r3, #8]
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f042 0204 	orr.w	r2, r2, #4
 80017fe:	609a      	str	r2, [r3, #8]
 8001800:	e00d      	b.n	800181e <HAL_ADC_Start_DMA+0x196>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	2200      	movs	r2, #0
 8001806:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800180a:	e008      	b.n	800181e <HAL_ADC_Start_DMA+0x196>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 800180c:	2301      	movs	r3, #1
 800180e:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	2200      	movs	r2, #0
 8001814:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8001818:	e001      	b.n	800181e <HAL_ADC_Start_DMA+0x196>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800181a:	2302      	movs	r3, #2
 800181c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800181e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001820:	4618      	mov	r0, r3
 8001822:	3718      	adds	r7, #24
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	50000300 	.word	0x50000300
 800182c:	50000100 	.word	0x50000100
 8001830:	08002029 	.word	0x08002029
 8001834:	080020a3 	.word	0x080020a3
 8001838:	080020bf 	.word	0x080020bf

0800183c <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b084      	sub	sp, #16
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001846:	2300      	movs	r3, #0
 8001848:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001850:	2b01      	cmp	r3, #1
 8001852:	d101      	bne.n	8001858 <HAL_ADCEx_Calibration_Start+0x1c>
 8001854:	2302      	movs	r3, #2
 8001856:	e05f      	b.n	8001918 <HAL_ADCEx_Calibration_Start+0xdc>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2201      	movs	r2, #1
 800185c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	f000 fcab 	bl	80021bc <ADC_Disable>
 8001866:	4603      	mov	r3, r0
 8001868:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800186a:	7bfb      	ldrb	r3, [r7, #15]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d14e      	bne.n	800190e <HAL_ADCEx_Calibration_Start+0xd2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2201      	movs	r2, #1
 8001874:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	689a      	ldr	r2, [r3, #8]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 8001884:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	2b01      	cmp	r3, #1
 800188a:	d107      	bne.n	800189c <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	689a      	ldr	r2, [r3, #8]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800189a:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	689a      	ldr	r2, [r3, #8]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80018aa:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 80018ac:	f7ff fd0c 	bl	80012c8 <HAL_GetTick>
 80018b0:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80018b2:	e01c      	b.n	80018ee <HAL_ADCEx_Calibration_Start+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80018b4:	f7ff fd08 	bl	80012c8 <HAL_GetTick>
 80018b8:	4602      	mov	r2, r0
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	2b0a      	cmp	r3, #10
 80018c0:	d915      	bls.n	80018ee <HAL_ADCEx_Calibration_Start+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80018cc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80018d0:	d10d      	bne.n	80018ee <HAL_ADCEx_Calibration_Start+0xb2>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018d6:	f023 0312 	bic.w	r3, r3, #18
 80018da:	f043 0210 	orr.w	r2, r3, #16
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2200      	movs	r2, #0
 80018e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e014      	b.n	8001918 <HAL_ADCEx_Calibration_Start+0xdc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80018f8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80018fc:	d0da      	beq.n	80018b4 <HAL_ADCEx_Calibration_Start+0x78>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001902:	f023 0303 	bic.w	r3, r3, #3
 8001906:	f043 0201 	orr.w	r2, r3, #1
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2200      	movs	r2, #0
 8001912:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001916:	7bfb      	ldrb	r3, [r7, #15]
}
 8001918:	4618      	mov	r0, r3
 800191a:	3710      	adds	r7, #16
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}

08001920 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001920:	b480      	push	{r7}
 8001922:	b09b      	sub	sp, #108	@ 0x6c
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800192a:	2300      	movs	r3, #0
 800192c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001930:	2300      	movs	r3, #0
 8001932:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800193a:	2b01      	cmp	r3, #1
 800193c:	d101      	bne.n	8001942 <HAL_ADC_ConfigChannel+0x22>
 800193e:	2302      	movs	r3, #2
 8001940:	e2a1      	b.n	8001e86 <HAL_ADC_ConfigChannel+0x566>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2201      	movs	r2, #1
 8001946:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	f003 0304 	and.w	r3, r3, #4
 8001954:	2b00      	cmp	r3, #0
 8001956:	f040 8285 	bne.w	8001e64 <HAL_ADC_ConfigChannel+0x544>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	2b04      	cmp	r3, #4
 8001960:	d81c      	bhi.n	800199c <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	685a      	ldr	r2, [r3, #4]
 800196c:	4613      	mov	r3, r2
 800196e:	005b      	lsls	r3, r3, #1
 8001970:	4413      	add	r3, r2
 8001972:	005b      	lsls	r3, r3, #1
 8001974:	461a      	mov	r2, r3
 8001976:	231f      	movs	r3, #31
 8001978:	4093      	lsls	r3, r2
 800197a:	43db      	mvns	r3, r3
 800197c:	4019      	ands	r1, r3
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	6818      	ldr	r0, [r3, #0]
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	685a      	ldr	r2, [r3, #4]
 8001986:	4613      	mov	r3, r2
 8001988:	005b      	lsls	r3, r3, #1
 800198a:	4413      	add	r3, r2
 800198c:	005b      	lsls	r3, r3, #1
 800198e:	fa00 f203 	lsl.w	r2, r0, r3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	430a      	orrs	r2, r1
 8001998:	631a      	str	r2, [r3, #48]	@ 0x30
 800199a:	e063      	b.n	8001a64 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	2b09      	cmp	r3, #9
 80019a2:	d81e      	bhi.n	80019e2 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	685a      	ldr	r2, [r3, #4]
 80019ae:	4613      	mov	r3, r2
 80019b0:	005b      	lsls	r3, r3, #1
 80019b2:	4413      	add	r3, r2
 80019b4:	005b      	lsls	r3, r3, #1
 80019b6:	3b1e      	subs	r3, #30
 80019b8:	221f      	movs	r2, #31
 80019ba:	fa02 f303 	lsl.w	r3, r2, r3
 80019be:	43db      	mvns	r3, r3
 80019c0:	4019      	ands	r1, r3
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	6818      	ldr	r0, [r3, #0]
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	685a      	ldr	r2, [r3, #4]
 80019ca:	4613      	mov	r3, r2
 80019cc:	005b      	lsls	r3, r3, #1
 80019ce:	4413      	add	r3, r2
 80019d0:	005b      	lsls	r3, r3, #1
 80019d2:	3b1e      	subs	r3, #30
 80019d4:	fa00 f203 	lsl.w	r2, r0, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	430a      	orrs	r2, r1
 80019de:	635a      	str	r2, [r3, #52]	@ 0x34
 80019e0:	e040      	b.n	8001a64 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	2b0e      	cmp	r3, #14
 80019e8:	d81e      	bhi.n	8001a28 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	685a      	ldr	r2, [r3, #4]
 80019f4:	4613      	mov	r3, r2
 80019f6:	005b      	lsls	r3, r3, #1
 80019f8:	4413      	add	r3, r2
 80019fa:	005b      	lsls	r3, r3, #1
 80019fc:	3b3c      	subs	r3, #60	@ 0x3c
 80019fe:	221f      	movs	r2, #31
 8001a00:	fa02 f303 	lsl.w	r3, r2, r3
 8001a04:	43db      	mvns	r3, r3
 8001a06:	4019      	ands	r1, r3
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	6818      	ldr	r0, [r3, #0]
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	685a      	ldr	r2, [r3, #4]
 8001a10:	4613      	mov	r3, r2
 8001a12:	005b      	lsls	r3, r3, #1
 8001a14:	4413      	add	r3, r2
 8001a16:	005b      	lsls	r3, r3, #1
 8001a18:	3b3c      	subs	r3, #60	@ 0x3c
 8001a1a:	fa00 f203 	lsl.w	r2, r0, r3
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	430a      	orrs	r2, r1
 8001a24:	639a      	str	r2, [r3, #56]	@ 0x38
 8001a26:	e01d      	b.n	8001a64 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	685a      	ldr	r2, [r3, #4]
 8001a32:	4613      	mov	r3, r2
 8001a34:	005b      	lsls	r3, r3, #1
 8001a36:	4413      	add	r3, r2
 8001a38:	005b      	lsls	r3, r3, #1
 8001a3a:	3b5a      	subs	r3, #90	@ 0x5a
 8001a3c:	221f      	movs	r2, #31
 8001a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a42:	43db      	mvns	r3, r3
 8001a44:	4019      	ands	r1, r3
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	6818      	ldr	r0, [r3, #0]
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	685a      	ldr	r2, [r3, #4]
 8001a4e:	4613      	mov	r3, r2
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	4413      	add	r3, r2
 8001a54:	005b      	lsls	r3, r3, #1
 8001a56:	3b5a      	subs	r3, #90	@ 0x5a
 8001a58:	fa00 f203 	lsl.w	r2, r0, r3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	430a      	orrs	r2, r1
 8001a62:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	f003 030c 	and.w	r3, r3, #12
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	f040 80e5 	bne.w	8001c3e <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	2b09      	cmp	r3, #9
 8001a7a:	d91c      	bls.n	8001ab6 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	6999      	ldr	r1, [r3, #24]
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	4613      	mov	r3, r2
 8001a88:	005b      	lsls	r3, r3, #1
 8001a8a:	4413      	add	r3, r2
 8001a8c:	3b1e      	subs	r3, #30
 8001a8e:	2207      	movs	r2, #7
 8001a90:	fa02 f303 	lsl.w	r3, r2, r3
 8001a94:	43db      	mvns	r3, r3
 8001a96:	4019      	ands	r1, r3
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	6898      	ldr	r0, [r3, #8]
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	005b      	lsls	r3, r3, #1
 8001aa4:	4413      	add	r3, r2
 8001aa6:	3b1e      	subs	r3, #30
 8001aa8:	fa00 f203 	lsl.w	r2, r0, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	430a      	orrs	r2, r1
 8001ab2:	619a      	str	r2, [r3, #24]
 8001ab4:	e019      	b.n	8001aea <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	6959      	ldr	r1, [r3, #20]
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	005b      	lsls	r3, r3, #1
 8001ac4:	4413      	add	r3, r2
 8001ac6:	2207      	movs	r2, #7
 8001ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8001acc:	43db      	mvns	r3, r3
 8001ace:	4019      	ands	r1, r3
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	6898      	ldr	r0, [r3, #8]
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	4613      	mov	r3, r2
 8001ada:	005b      	lsls	r3, r3, #1
 8001adc:	4413      	add	r3, r2
 8001ade:	fa00 f203 	lsl.w	r2, r0, r3
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	430a      	orrs	r2, r1
 8001ae8:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	695a      	ldr	r2, [r3, #20]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	08db      	lsrs	r3, r3, #3
 8001af6:	f003 0303 	and.w	r3, r3, #3
 8001afa:	005b      	lsls	r3, r3, #1
 8001afc:	fa02 f303 	lsl.w	r3, r2, r3
 8001b00:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	691b      	ldr	r3, [r3, #16]
 8001b06:	3b01      	subs	r3, #1
 8001b08:	2b03      	cmp	r3, #3
 8001b0a:	d84f      	bhi.n	8001bac <HAL_ADC_ConfigChannel+0x28c>
 8001b0c:	a201      	add	r2, pc, #4	@ (adr r2, 8001b14 <HAL_ADC_ConfigChannel+0x1f4>)
 8001b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b12:	bf00      	nop
 8001b14:	08001b25 	.word	0x08001b25
 8001b18:	08001b47 	.word	0x08001b47
 8001b1c:	08001b69 	.word	0x08001b69
 8001b20:	08001b8b 	.word	0x08001b8b
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001b2a:	4b9c      	ldr	r3, [pc, #624]	@ (8001d9c <HAL_ADC_ConfigChannel+0x47c>)
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	683a      	ldr	r2, [r7, #0]
 8001b30:	6812      	ldr	r2, [r2, #0]
 8001b32:	0691      	lsls	r1, r2, #26
 8001b34:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001b36:	430a      	orrs	r2, r1
 8001b38:	431a      	orrs	r2, r3
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001b42:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001b44:	e07b      	b.n	8001c3e <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001b4c:	4b93      	ldr	r3, [pc, #588]	@ (8001d9c <HAL_ADC_ConfigChannel+0x47c>)
 8001b4e:	4013      	ands	r3, r2
 8001b50:	683a      	ldr	r2, [r7, #0]
 8001b52:	6812      	ldr	r2, [r2, #0]
 8001b54:	0691      	lsls	r1, r2, #26
 8001b56:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001b58:	430a      	orrs	r2, r1
 8001b5a:	431a      	orrs	r2, r3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001b64:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001b66:	e06a      	b.n	8001c3e <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001b6e:	4b8b      	ldr	r3, [pc, #556]	@ (8001d9c <HAL_ADC_ConfigChannel+0x47c>)
 8001b70:	4013      	ands	r3, r2
 8001b72:	683a      	ldr	r2, [r7, #0]
 8001b74:	6812      	ldr	r2, [r2, #0]
 8001b76:	0691      	lsls	r1, r2, #26
 8001b78:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001b7a:	430a      	orrs	r2, r1
 8001b7c:	431a      	orrs	r2, r3
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001b86:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001b88:	e059      	b.n	8001c3e <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001b90:	4b82      	ldr	r3, [pc, #520]	@ (8001d9c <HAL_ADC_ConfigChannel+0x47c>)
 8001b92:	4013      	ands	r3, r2
 8001b94:	683a      	ldr	r2, [r7, #0]
 8001b96:	6812      	ldr	r2, [r2, #0]
 8001b98:	0691      	lsls	r1, r2, #26
 8001b9a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001b9c:	430a      	orrs	r2, r1
 8001b9e:	431a      	orrs	r2, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001ba8:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001baa:	e048      	b.n	8001c3e <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bb2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	069b      	lsls	r3, r3, #26
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d107      	bne.n	8001bd0 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001bce:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001bd6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	069b      	lsls	r3, r3, #26
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d107      	bne.n	8001bf4 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001bf2:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001bfa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	069b      	lsls	r3, r3, #26
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d107      	bne.n	8001c18 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001c16:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001c1e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	069b      	lsls	r3, r3, #26
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d107      	bne.n	8001c3c <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001c3a:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 8001c3c:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	f003 0303 	and.w	r3, r3, #3
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d108      	bne.n	8001c5e <HAL_ADC_ConfigChannel+0x33e>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 0301 	and.w	r3, r3, #1
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d101      	bne.n	8001c5e <HAL_ADC_ConfigChannel+0x33e>
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e000      	b.n	8001c60 <HAL_ADC_ConfigChannel+0x340>
 8001c5e:	2300      	movs	r3, #0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	f040 810a 	bne.w	8001e7a <HAL_ADC_ConfigChannel+0x55a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	68db      	ldr	r3, [r3, #12]
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d00f      	beq.n	8001c8e <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c80:	43da      	mvns	r2, r3
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	400a      	ands	r2, r1
 8001c88:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8001c8c:	e049      	b.n	8001d22 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	409a      	lsls	r2, r3
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	430a      	orrs	r2, r1
 8001ca4:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	2b09      	cmp	r3, #9
 8001cae:	d91c      	bls.n	8001cea <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	6999      	ldr	r1, [r3, #24]
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	4613      	mov	r3, r2
 8001cbc:	005b      	lsls	r3, r3, #1
 8001cbe:	4413      	add	r3, r2
 8001cc0:	3b1b      	subs	r3, #27
 8001cc2:	2207      	movs	r2, #7
 8001cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc8:	43db      	mvns	r3, r3
 8001cca:	4019      	ands	r1, r3
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	6898      	ldr	r0, [r3, #8]
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	4413      	add	r3, r2
 8001cda:	3b1b      	subs	r3, #27
 8001cdc:	fa00 f203 	lsl.w	r2, r0, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	430a      	orrs	r2, r1
 8001ce6:	619a      	str	r2, [r3, #24]
 8001ce8:	e01b      	b.n	8001d22 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	6959      	ldr	r1, [r3, #20]
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	1c5a      	adds	r2, r3, #1
 8001cf6:	4613      	mov	r3, r2
 8001cf8:	005b      	lsls	r3, r3, #1
 8001cfa:	4413      	add	r3, r2
 8001cfc:	2207      	movs	r2, #7
 8001cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001d02:	43db      	mvns	r3, r3
 8001d04:	4019      	ands	r1, r3
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	6898      	ldr	r0, [r3, #8]
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	1c5a      	adds	r2, r3, #1
 8001d10:	4613      	mov	r3, r2
 8001d12:	005b      	lsls	r3, r3, #1
 8001d14:	4413      	add	r3, r2
 8001d16:	fa00 f203 	lsl.w	r2, r0, r3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	430a      	orrs	r2, r1
 8001d20:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d22:	4b1f      	ldr	r3, [pc, #124]	@ (8001da0 <HAL_ADC_ConfigChannel+0x480>)
 8001d24:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	2b10      	cmp	r3, #16
 8001d2c:	d105      	bne.n	8001d3a <HAL_ADC_ConfigChannel+0x41a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001d2e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d015      	beq.n	8001d66 <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001d3e:	2b11      	cmp	r3, #17
 8001d40:	d105      	bne.n	8001d4e <HAL_ADC_ConfigChannel+0x42e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001d42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d00b      	beq.n	8001d66 <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001d52:	2b12      	cmp	r3, #18
 8001d54:	f040 8091 	bne.w	8001e7a <HAL_ADC_ConfigChannel+0x55a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001d58:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	f040 808a 	bne.w	8001e7a <HAL_ADC_ConfigChannel+0x55a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001d6e:	d102      	bne.n	8001d76 <HAL_ADC_ConfigChannel+0x456>
 8001d70:	4b0c      	ldr	r3, [pc, #48]	@ (8001da4 <HAL_ADC_ConfigChannel+0x484>)
 8001d72:	60fb      	str	r3, [r7, #12]
 8001d74:	e002      	b.n	8001d7c <HAL_ADC_ConfigChannel+0x45c>
 8001d76:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001d7a:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	f003 0303 	and.w	r3, r3, #3
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d10e      	bne.n	8001da8 <HAL_ADC_ConfigChannel+0x488>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 0301 	and.w	r3, r3, #1
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d107      	bne.n	8001da8 <HAL_ADC_ConfigChannel+0x488>
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e006      	b.n	8001daa <HAL_ADC_ConfigChannel+0x48a>
 8001d9c:	83fff000 	.word	0x83fff000
 8001da0:	50000300 	.word	0x50000300
 8001da4:	50000100 	.word	0x50000100
 8001da8:	2300      	movs	r3, #0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d150      	bne.n	8001e50 <HAL_ADC_ConfigChannel+0x530>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001dae:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d010      	beq.n	8001dd6 <HAL_ADC_ConfigChannel+0x4b6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	f003 0303 	and.w	r3, r3, #3
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d107      	bne.n	8001dd0 <HAL_ADC_ConfigChannel+0x4b0>
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 0301 	and.w	r3, r3, #1
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d101      	bne.n	8001dd0 <HAL_ADC_ConfigChannel+0x4b0>
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e000      	b.n	8001dd2 <HAL_ADC_ConfigChannel+0x4b2>
 8001dd0:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d13c      	bne.n	8001e50 <HAL_ADC_ConfigChannel+0x530>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	2b10      	cmp	r3, #16
 8001ddc:	d11d      	bne.n	8001e1a <HAL_ADC_ConfigChannel+0x4fa>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001de6:	d118      	bne.n	8001e1a <HAL_ADC_ConfigChannel+0x4fa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001de8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001df0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001df2:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001df4:	4b27      	ldr	r3, [pc, #156]	@ (8001e94 <HAL_ADC_ConfigChannel+0x574>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a27      	ldr	r2, [pc, #156]	@ (8001e98 <HAL_ADC_ConfigChannel+0x578>)
 8001dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8001dfe:	0c9a      	lsrs	r2, r3, #18
 8001e00:	4613      	mov	r3, r2
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	4413      	add	r3, r2
 8001e06:	005b      	lsls	r3, r3, #1
 8001e08:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001e0a:	e002      	b.n	8001e12 <HAL_ADC_ConfigChannel+0x4f2>
          {
            wait_loop_index--;
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	3b01      	subs	r3, #1
 8001e10:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d1f9      	bne.n	8001e0c <HAL_ADC_ConfigChannel+0x4ec>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001e18:	e02e      	b.n	8001e78 <HAL_ADC_ConfigChannel+0x558>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	2b11      	cmp	r3, #17
 8001e20:	d10b      	bne.n	8001e3a <HAL_ADC_ConfigChannel+0x51a>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001e2a:	d106      	bne.n	8001e3a <HAL_ADC_ConfigChannel+0x51a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001e2c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8001e34:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001e36:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001e38:	e01e      	b.n	8001e78 <HAL_ADC_ConfigChannel+0x558>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	2b12      	cmp	r3, #18
 8001e40:	d11a      	bne.n	8001e78 <HAL_ADC_ConfigChannel+0x558>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001e42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001e4a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001e4c:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001e4e:	e013      	b.n	8001e78 <HAL_ADC_ConfigChannel+0x558>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e54:	f043 0220 	orr.w	r2, r3, #32
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8001e62:	e00a      	b.n	8001e7a <HAL_ADC_ConfigChannel+0x55a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e68:	f043 0220 	orr.w	r2, r3, #32
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8001e76:	e000      	b.n	8001e7a <HAL_ADC_ConfigChannel+0x55a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001e78:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001e82:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	376c      	adds	r7, #108	@ 0x6c
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop
 8001e94:	20000000 	.word	0x20000000
 8001e98:	431bde83 	.word	0x431bde83

08001e9c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b099      	sub	sp, #100	@ 0x64
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001eb4:	d102      	bne.n	8001ebc <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8001eb6:	4b5a      	ldr	r3, [pc, #360]	@ (8002020 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8001eb8:	60bb      	str	r3, [r7, #8]
 8001eba:	e002      	b.n	8001ec2 <HAL_ADCEx_MultiModeConfigChannel+0x26>
 8001ebc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001ec0:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d101      	bne.n	8001ecc <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e0a2      	b.n	8002012 <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d101      	bne.n	8001eda <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	e09b      	b.n	8002012 <HAL_ADCEx_MultiModeConfigChannel+0x176>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2201      	movs	r2, #1
 8001ede:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	f003 0304 	and.w	r3, r3, #4
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d17f      	bne.n	8001ff0 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	f003 0304 	and.w	r3, r3, #4
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d179      	bne.n	8001ff0 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001efc:	4b49      	ldr	r3, [pc, #292]	@ (8002024 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 8001efe:	65bb      	str	r3, [r7, #88]	@ 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d040      	beq.n	8001f8a <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001f08:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	6859      	ldr	r1, [r3, #4]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001f1a:	035b      	lsls	r3, r3, #13
 8001f1c:	430b      	orrs	r3, r1
 8001f1e:	431a      	orrs	r2, r3
 8001f20:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001f22:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	f003 0303 	and.w	r3, r3, #3
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d108      	bne.n	8001f44 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0301 	and.w	r3, r3, #1
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d101      	bne.n	8001f44 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001f40:	2301      	movs	r3, #1
 8001f42:	e000      	b.n	8001f46 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8001f44:	2300      	movs	r3, #0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d15c      	bne.n	8002004 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	f003 0303 	and.w	r3, r3, #3
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d107      	bne.n	8001f66 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0301 	and.w	r3, r3, #1
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d101      	bne.n	8001f66 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8001f62:	2301      	movs	r3, #1
 8001f64:	e000      	b.n	8001f68 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8001f66:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d14b      	bne.n	8002004 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001f6c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8001f74:	f023 030f 	bic.w	r3, r3, #15
 8001f78:	683a      	ldr	r2, [r7, #0]
 8001f7a:	6811      	ldr	r1, [r2, #0]
 8001f7c:	683a      	ldr	r2, [r7, #0]
 8001f7e:	6892      	ldr	r2, [r2, #8]
 8001f80:	430a      	orrs	r2, r1
 8001f82:	431a      	orrs	r2, r3
 8001f84:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001f86:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001f88:	e03c      	b.n	8002004 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001f8a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001f92:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001f94:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	f003 0303 	and.w	r3, r3, #3
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d108      	bne.n	8001fb6 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 0301 	and.w	r3, r3, #1
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d101      	bne.n	8001fb6 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e000      	b.n	8001fb8 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d123      	bne.n	8002004 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	f003 0303 	and.w	r3, r3, #3
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d107      	bne.n	8001fd8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 0301 	and.w	r3, r3, #1
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d101      	bne.n	8001fd8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e000      	b.n	8001fda <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8001fd8:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d112      	bne.n	8002004 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8001fde:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8001fe6:	f023 030f 	bic.w	r3, r3, #15
 8001fea:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001fec:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001fee:	e009      	b.n	8002004 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff4:	f043 0220 	orr.w	r2, r3, #32
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8002002:	e000      	b.n	8002006 <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002004:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2200      	movs	r2, #0
 800200a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800200e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
} 
 8002012:	4618      	mov	r0, r3
 8002014:	3764      	adds	r7, #100	@ 0x64
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	50000100 	.word	0x50000100
 8002024:	50000300 	.word	0x50000300

08002028 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002034:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800203a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800203e:	2b00      	cmp	r3, #0
 8002040:	d126      	bne.n	8002090 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002046:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002058:	2b00      	cmp	r3, #0
 800205a:	d115      	bne.n	8002088 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002060:	2b00      	cmp	r3, #0
 8002062:	d111      	bne.n	8002088 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002068:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002074:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d105      	bne.n	8002088 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002080:	f043 0201 	orr.w	r2, r3, #1
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002088:	68f8      	ldr	r0, [r7, #12]
 800208a:	f7ff f94d 	bl	8001328 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800208e:	e004      	b.n	800209a <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	4798      	blx	r3
}
 800209a:	bf00      	nop
 800209c:	3710      	adds	r7, #16
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}

080020a2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80020a2:	b580      	push	{r7, lr}
 80020a4:	b084      	sub	sp, #16
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020ae:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80020b0:	68f8      	ldr	r0, [r7, #12]
 80020b2:	f7ff f943 	bl	800133c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 80020b6:	bf00      	nop
 80020b8:	3710      	adds	r7, #16
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}

080020be <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80020be:	b580      	push	{r7, lr}
 80020c0:	b084      	sub	sp, #16
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020ca:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020dc:	f043 0204 	orr.w	r2, r3, #4
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	645a      	str	r2, [r3, #68]	@ 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80020e4:	68f8      	ldr	r0, [r7, #12]
 80020e6:	f7ff f933 	bl	8001350 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80020ea:	bf00      	nop
 80020ec:	3710      	adds	r7, #16
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
	...

080020f4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b084      	sub	sp, #16
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80020fc:	2300      	movs	r3, #0
 80020fe:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	f003 0303 	and.w	r3, r3, #3
 800210a:	2b01      	cmp	r3, #1
 800210c:	d108      	bne.n	8002120 <ADC_Enable+0x2c>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0301 	and.w	r3, r3, #1
 8002118:	2b01      	cmp	r3, #1
 800211a:	d101      	bne.n	8002120 <ADC_Enable+0x2c>
 800211c:	2301      	movs	r3, #1
 800211e:	e000      	b.n	8002122 <ADC_Enable+0x2e>
 8002120:	2300      	movs	r3, #0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d143      	bne.n	80021ae <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	689a      	ldr	r2, [r3, #8]
 800212c:	4b22      	ldr	r3, [pc, #136]	@ (80021b8 <ADC_Enable+0xc4>)
 800212e:	4013      	ands	r3, r2
 8002130:	2b00      	cmp	r3, #0
 8002132:	d00d      	beq.n	8002150 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002138:	f043 0210 	orr.w	r2, r3, #16
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002144:	f043 0201 	orr.w	r2, r3, #1
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	645a      	str	r2, [r3, #68]	@ 0x44
      
      return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e02f      	b.n	80021b0 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	689a      	ldr	r2, [r3, #8]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f042 0201 	orr.w	r2, r2, #1
 800215e:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002160:	f7ff f8b2 	bl	80012c8 <HAL_GetTick>
 8002164:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002166:	e01b      	b.n	80021a0 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002168:	f7ff f8ae 	bl	80012c8 <HAL_GetTick>
 800216c:	4602      	mov	r2, r0
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	2b02      	cmp	r3, #2
 8002174:	d914      	bls.n	80021a0 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 0301 	and.w	r3, r3, #1
 8002180:	2b01      	cmp	r3, #1
 8002182:	d00d      	beq.n	80021a0 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002188:	f043 0210 	orr.w	r2, r3, #16
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002194:	f043 0201 	orr.w	r2, r3, #1
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e007      	b.n	80021b0 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0301 	and.w	r3, r3, #1
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d1dc      	bne.n	8002168 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80021ae:	2300      	movs	r3, #0
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3710      	adds	r7, #16
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	8000003f 	.word	0x8000003f

080021bc <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b084      	sub	sp, #16
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80021c4:	2300      	movs	r3, #0
 80021c6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	f003 0303 	and.w	r3, r3, #3
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d108      	bne.n	80021e8 <ADC_Disable+0x2c>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 0301 	and.w	r3, r3, #1
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d101      	bne.n	80021e8 <ADC_Disable+0x2c>
 80021e4:	2301      	movs	r3, #1
 80021e6:	e000      	b.n	80021ea <ADC_Disable+0x2e>
 80021e8:	2300      	movs	r3, #0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d047      	beq.n	800227e <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	f003 030d 	and.w	r3, r3, #13
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d10f      	bne.n	800221c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	689a      	ldr	r2, [r3, #8]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f042 0202 	orr.w	r2, r2, #2
 800220a:	609a      	str	r2, [r3, #8]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2203      	movs	r2, #3
 8002212:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002214:	f7ff f858 	bl	80012c8 <HAL_GetTick>
 8002218:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800221a:	e029      	b.n	8002270 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002220:	f043 0210 	orr.w	r2, r3, #16
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800222c:	f043 0201 	orr.w	r2, r3, #1
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e023      	b.n	8002280 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002238:	f7ff f846 	bl	80012c8 <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	2b02      	cmp	r3, #2
 8002244:	d914      	bls.n	8002270 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	f003 0301 	and.w	r3, r3, #1
 8002250:	2b01      	cmp	r3, #1
 8002252:	d10d      	bne.n	8002270 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002258:	f043 0210 	orr.w	r2, r3, #16
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002264:	f043 0201 	orr.w	r2, r3, #1
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e007      	b.n	8002280 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	f003 0301 	and.w	r3, r3, #1
 800227a:	2b01      	cmp	r3, #1
 800227c:	d0dc      	beq.n	8002238 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800227e:	2300      	movs	r3, #0
}
 8002280:	4618      	mov	r0, r3
 8002282:	3710      	adds	r7, #16
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}

08002288 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d101      	bne.n	800229a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e0ed      	b.n	8002476 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d102      	bne.n	80022ac <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f7fe fdc6 	bl	8000e38 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f042 0201 	orr.w	r2, r2, #1
 80022ba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80022bc:	f7ff f804 	bl	80012c8 <HAL_GetTick>
 80022c0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80022c2:	e012      	b.n	80022ea <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80022c4:	f7ff f800 	bl	80012c8 <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b0a      	cmp	r3, #10
 80022d0:	d90b      	bls.n	80022ea <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022d6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2205      	movs	r2, #5
 80022e2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e0c5      	b.n	8002476 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f003 0301 	and.w	r3, r3, #1
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d0e5      	beq.n	80022c4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f022 0202 	bic.w	r2, r2, #2
 8002306:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002308:	f7fe ffde 	bl	80012c8 <HAL_GetTick>
 800230c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800230e:	e012      	b.n	8002336 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002310:	f7fe ffda 	bl	80012c8 <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	2b0a      	cmp	r3, #10
 800231c:	d90b      	bls.n	8002336 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002322:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2205      	movs	r2, #5
 800232e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e09f      	b.n	8002476 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f003 0302 	and.w	r3, r3, #2
 8002340:	2b00      	cmp	r3, #0
 8002342:	d1e5      	bne.n	8002310 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	7e1b      	ldrb	r3, [r3, #24]
 8002348:	2b01      	cmp	r3, #1
 800234a:	d108      	bne.n	800235e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800235a:	601a      	str	r2, [r3, #0]
 800235c:	e007      	b.n	800236e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800236c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	7e5b      	ldrb	r3, [r3, #25]
 8002372:	2b01      	cmp	r3, #1
 8002374:	d108      	bne.n	8002388 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002384:	601a      	str	r2, [r3, #0]
 8002386:	e007      	b.n	8002398 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002396:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	7e9b      	ldrb	r3, [r3, #26]
 800239c:	2b01      	cmp	r3, #1
 800239e:	d108      	bne.n	80023b2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f042 0220 	orr.w	r2, r2, #32
 80023ae:	601a      	str	r2, [r3, #0]
 80023b0:	e007      	b.n	80023c2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f022 0220 	bic.w	r2, r2, #32
 80023c0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	7edb      	ldrb	r3, [r3, #27]
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d108      	bne.n	80023dc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f022 0210 	bic.w	r2, r2, #16
 80023d8:	601a      	str	r2, [r3, #0]
 80023da:	e007      	b.n	80023ec <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f042 0210 	orr.w	r2, r2, #16
 80023ea:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	7f1b      	ldrb	r3, [r3, #28]
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d108      	bne.n	8002406 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f042 0208 	orr.w	r2, r2, #8
 8002402:	601a      	str	r2, [r3, #0]
 8002404:	e007      	b.n	8002416 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f022 0208 	bic.w	r2, r2, #8
 8002414:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	7f5b      	ldrb	r3, [r3, #29]
 800241a:	2b01      	cmp	r3, #1
 800241c:	d108      	bne.n	8002430 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f042 0204 	orr.w	r2, r2, #4
 800242c:	601a      	str	r2, [r3, #0]
 800242e:	e007      	b.n	8002440 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f022 0204 	bic.w	r2, r2, #4
 800243e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	689a      	ldr	r2, [r3, #8]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	431a      	orrs	r2, r3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	691b      	ldr	r3, [r3, #16]
 800244e:	431a      	orrs	r2, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	695b      	ldr	r3, [r3, #20]
 8002454:	ea42 0103 	orr.w	r1, r2, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	1e5a      	subs	r2, r3, #1
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	430a      	orrs	r2, r1
 8002464:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2200      	movs	r2, #0
 800246a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2201      	movs	r2, #1
 8002470:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	3710      	adds	r7, #16
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}

0800247e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800247e:	b480      	push	{r7}
 8002480:	b087      	sub	sp, #28
 8002482:	af00      	add	r7, sp, #0
 8002484:	6078      	str	r0, [r7, #4]
 8002486:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002494:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002496:	7cfb      	ldrb	r3, [r7, #19]
 8002498:	2b01      	cmp	r3, #1
 800249a:	d003      	beq.n	80024a4 <HAL_CAN_ConfigFilter+0x26>
 800249c:	7cfb      	ldrb	r3, [r7, #19]
 800249e:	2b02      	cmp	r3, #2
 80024a0:	f040 80aa 	bne.w	80025f8 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80024aa:	f043 0201 	orr.w	r2, r3, #1
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	695b      	ldr	r3, [r3, #20]
 80024b8:	f003 031f 	and.w	r3, r3, #31
 80024bc:	2201      	movs	r2, #1
 80024be:	fa02 f303 	lsl.w	r3, r2, r3
 80024c2:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	43db      	mvns	r3, r3
 80024ce:	401a      	ands	r2, r3
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	69db      	ldr	r3, [r3, #28]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d123      	bne.n	8002526 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	43db      	mvns	r3, r3
 80024e8:	401a      	ands	r2, r3
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80024fc:	683a      	ldr	r2, [r7, #0]
 80024fe:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002500:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	3248      	adds	r2, #72	@ 0x48
 8002506:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800251a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800251c:	6979      	ldr	r1, [r7, #20]
 800251e:	3348      	adds	r3, #72	@ 0x48
 8002520:	00db      	lsls	r3, r3, #3
 8002522:	440b      	add	r3, r1
 8002524:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	69db      	ldr	r3, [r3, #28]
 800252a:	2b01      	cmp	r3, #1
 800252c:	d122      	bne.n	8002574 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	431a      	orrs	r2, r3
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800254a:	683a      	ldr	r2, [r7, #0]
 800254c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800254e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	3248      	adds	r2, #72	@ 0x48
 8002554:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	68db      	ldr	r3, [r3, #12]
 8002562:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002568:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800256a:	6979      	ldr	r1, [r7, #20]
 800256c:	3348      	adds	r3, #72	@ 0x48
 800256e:	00db      	lsls	r3, r3, #3
 8002570:	440b      	add	r3, r1
 8002572:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	699b      	ldr	r3, [r3, #24]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d109      	bne.n	8002590 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	43db      	mvns	r3, r3
 8002586:	401a      	ands	r2, r3
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800258e:	e007      	b.n	80025a0 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	431a      	orrs	r2, r3
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	691b      	ldr	r3, [r3, #16]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d109      	bne.n	80025bc <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	43db      	mvns	r3, r3
 80025b2:	401a      	ands	r2, r3
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80025ba:	e007      	b.n	80025cc <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	431a      	orrs	r2, r3
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	6a1b      	ldr	r3, [r3, #32]
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d107      	bne.n	80025e4 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	431a      	orrs	r2, r3
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80025ea:	f023 0201 	bic.w	r2, r3, #1
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80025f4:	2300      	movs	r3, #0
 80025f6:	e006      	b.n	8002606 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025fc:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002604:	2301      	movs	r3, #1
  }
}
 8002606:	4618      	mov	r0, r3
 8002608:	371c      	adds	r7, #28
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr

08002612 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002612:	b580      	push	{r7, lr}
 8002614:	b084      	sub	sp, #16
 8002616:	af00      	add	r7, sp, #0
 8002618:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002620:	b2db      	uxtb	r3, r3
 8002622:	2b01      	cmp	r3, #1
 8002624:	d12e      	bne.n	8002684 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2202      	movs	r2, #2
 800262a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f022 0201 	bic.w	r2, r2, #1
 800263c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800263e:	f7fe fe43 	bl	80012c8 <HAL_GetTick>
 8002642:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002644:	e012      	b.n	800266c <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002646:	f7fe fe3f 	bl	80012c8 <HAL_GetTick>
 800264a:	4602      	mov	r2, r0
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	2b0a      	cmp	r3, #10
 8002652:	d90b      	bls.n	800266c <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002658:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2205      	movs	r2, #5
 8002664:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e012      	b.n	8002692 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	f003 0301 	and.w	r3, r3, #1
 8002676:	2b00      	cmp	r3, #0
 8002678:	d1e5      	bne.n	8002646 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2200      	movs	r2, #0
 800267e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8002680:	2300      	movs	r3, #0
 8002682:	e006      	b.n	8002692 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002688:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
  }
}
 8002692:	4618      	mov	r0, r3
 8002694:	3710      	adds	r7, #16
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}

0800269a <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 800269a:	b580      	push	{r7, lr}
 800269c:	b084      	sub	sp, #16
 800269e:	af00      	add	r7, sp, #0
 80026a0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d133      	bne.n	8002716 <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f042 0201 	orr.w	r2, r2, #1
 80026bc:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80026be:	f7fe fe03 	bl	80012c8 <HAL_GetTick>
 80026c2:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80026c4:	e012      	b.n	80026ec <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80026c6:	f7fe fdff 	bl	80012c8 <HAL_GetTick>
 80026ca:	4602      	mov	r2, r0
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	2b0a      	cmp	r3, #10
 80026d2:	d90b      	bls.n	80026ec <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026d8:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2205      	movs	r2, #5
 80026e4:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	e01b      	b.n	8002724 <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f003 0301 	and.w	r3, r3, #1
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d0e5      	beq.n	80026c6 <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f022 0202 	bic.w	r2, r2, #2
 8002708:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2201      	movs	r2, #1
 800270e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 8002712:	2300      	movs	r3, #0
 8002714:	e006      	b.n	8002724 <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800271a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
  }
}
 8002724:	4618      	mov	r0, r3
 8002726:	3710      	adds	r7, #16
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}

0800272c <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800272c:	b480      	push	{r7}
 800272e:	b089      	sub	sp, #36	@ 0x24
 8002730:	af00      	add	r7, sp, #0
 8002732:	60f8      	str	r0, [r7, #12]
 8002734:	60b9      	str	r1, [r7, #8]
 8002736:	607a      	str	r2, [r7, #4]
 8002738:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002740:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800274a:	7ffb      	ldrb	r3, [r7, #31]
 800274c:	2b01      	cmp	r3, #1
 800274e:	d003      	beq.n	8002758 <HAL_CAN_AddTxMessage+0x2c>
 8002750:	7ffb      	ldrb	r3, [r7, #31]
 8002752:	2b02      	cmp	r3, #2
 8002754:	f040 80ad 	bne.w	80028b2 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002758:	69bb      	ldr	r3, [r7, #24]
 800275a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d10a      	bne.n	8002778 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002762:	69bb      	ldr	r3, [r7, #24]
 8002764:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002768:	2b00      	cmp	r3, #0
 800276a:	d105      	bne.n	8002778 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800276c:	69bb      	ldr	r3, [r7, #24]
 800276e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002772:	2b00      	cmp	r3, #0
 8002774:	f000 8095 	beq.w	80028a2 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002778:	69bb      	ldr	r3, [r7, #24]
 800277a:	0e1b      	lsrs	r3, r3, #24
 800277c:	f003 0303 	and.w	r3, r3, #3
 8002780:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002782:	2201      	movs	r2, #1
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	409a      	lsls	r2, r3
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d10d      	bne.n	80027b0 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800279e:	68f9      	ldr	r1, [r7, #12]
 80027a0:	6809      	ldr	r1, [r1, #0]
 80027a2:	431a      	orrs	r2, r3
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	3318      	adds	r3, #24
 80027a8:	011b      	lsls	r3, r3, #4
 80027aa:	440b      	add	r3, r1
 80027ac:	601a      	str	r2, [r3, #0]
 80027ae:	e00f      	b.n	80027d0 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80027ba:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80027c0:	68f9      	ldr	r1, [r7, #12]
 80027c2:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80027c4:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	3318      	adds	r3, #24
 80027ca:	011b      	lsls	r3, r3, #4
 80027cc:	440b      	add	r3, r1
 80027ce:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	6819      	ldr	r1, [r3, #0]
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	691a      	ldr	r2, [r3, #16]
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	3318      	adds	r3, #24
 80027dc:	011b      	lsls	r3, r3, #4
 80027de:	440b      	add	r3, r1
 80027e0:	3304      	adds	r3, #4
 80027e2:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	7d1b      	ldrb	r3, [r3, #20]
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d111      	bne.n	8002810 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	3318      	adds	r3, #24
 80027f4:	011b      	lsls	r3, r3, #4
 80027f6:	4413      	add	r3, r2
 80027f8:	3304      	adds	r3, #4
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	68fa      	ldr	r2, [r7, #12]
 80027fe:	6811      	ldr	r1, [r2, #0]
 8002800:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	3318      	adds	r3, #24
 8002808:	011b      	lsls	r3, r3, #4
 800280a:	440b      	add	r3, r1
 800280c:	3304      	adds	r3, #4
 800280e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	3307      	adds	r3, #7
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	061a      	lsls	r2, r3, #24
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	3306      	adds	r3, #6
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	041b      	lsls	r3, r3, #16
 8002820:	431a      	orrs	r2, r3
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	3305      	adds	r3, #5
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	021b      	lsls	r3, r3, #8
 800282a:	4313      	orrs	r3, r2
 800282c:	687a      	ldr	r2, [r7, #4]
 800282e:	3204      	adds	r2, #4
 8002830:	7812      	ldrb	r2, [r2, #0]
 8002832:	4610      	mov	r0, r2
 8002834:	68fa      	ldr	r2, [r7, #12]
 8002836:	6811      	ldr	r1, [r2, #0]
 8002838:	ea43 0200 	orr.w	r2, r3, r0
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	011b      	lsls	r3, r3, #4
 8002840:	440b      	add	r3, r1
 8002842:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8002846:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	3303      	adds	r3, #3
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	061a      	lsls	r2, r3, #24
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	3302      	adds	r3, #2
 8002854:	781b      	ldrb	r3, [r3, #0]
 8002856:	041b      	lsls	r3, r3, #16
 8002858:	431a      	orrs	r2, r3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	3301      	adds	r3, #1
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	021b      	lsls	r3, r3, #8
 8002862:	4313      	orrs	r3, r2
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	7812      	ldrb	r2, [r2, #0]
 8002868:	4610      	mov	r0, r2
 800286a:	68fa      	ldr	r2, [r7, #12]
 800286c:	6811      	ldr	r1, [r2, #0]
 800286e:	ea43 0200 	orr.w	r2, r3, r0
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	011b      	lsls	r3, r3, #4
 8002876:	440b      	add	r3, r1
 8002878:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 800287c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	3318      	adds	r3, #24
 8002886:	011b      	lsls	r3, r3, #4
 8002888:	4413      	add	r3, r2
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	68fa      	ldr	r2, [r7, #12]
 800288e:	6811      	ldr	r1, [r2, #0]
 8002890:	f043 0201 	orr.w	r2, r3, #1
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	3318      	adds	r3, #24
 8002898:	011b      	lsls	r3, r3, #4
 800289a:	440b      	add	r3, r1
 800289c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800289e:	2300      	movs	r3, #0
 80028a0:	e00e      	b.n	80028c0 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028a6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e006      	b.n	80028c0 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028b6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
  }
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3724      	adds	r7, #36	@ 0x24
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr

080028cc <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b085      	sub	sp, #20
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80028d4:	2300      	movs	r3, #0
 80028d6:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028de:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80028e0:	7afb      	ldrb	r3, [r7, #11]
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d002      	beq.n	80028ec <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80028e6:	7afb      	ldrb	r3, [r7, #11]
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d11d      	bne.n	8002928 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d002      	beq.n	8002900 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	3301      	adds	r3, #1
 80028fe:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d002      	beq.n	8002914 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	3301      	adds	r3, #1
 8002912:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d002      	beq.n	8002928 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	3301      	adds	r3, #1
 8002926:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8002928:	68fb      	ldr	r3, [r7, #12]
}
 800292a:	4618      	mov	r0, r3
 800292c:	3714      	adds	r7, #20
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr

08002936 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002936:	b480      	push	{r7}
 8002938:	b087      	sub	sp, #28
 800293a:	af00      	add	r7, sp, #0
 800293c:	60f8      	str	r0, [r7, #12]
 800293e:	60b9      	str	r1, [r7, #8]
 8002940:	607a      	str	r2, [r7, #4]
 8002942:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	f893 3020 	ldrb.w	r3, [r3, #32]
 800294a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800294c:	7dfb      	ldrb	r3, [r7, #23]
 800294e:	2b01      	cmp	r3, #1
 8002950:	d003      	beq.n	800295a <HAL_CAN_GetRxMessage+0x24>
 8002952:	7dfb      	ldrb	r3, [r7, #23]
 8002954:	2b02      	cmp	r3, #2
 8002956:	f040 8103 	bne.w	8002b60 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d10e      	bne.n	800297e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	68db      	ldr	r3, [r3, #12]
 8002966:	f003 0303 	and.w	r3, r3, #3
 800296a:	2b00      	cmp	r3, #0
 800296c:	d116      	bne.n	800299c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002972:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e0f7      	b.n	8002b6e <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	691b      	ldr	r3, [r3, #16]
 8002984:	f003 0303 	and.w	r3, r3, #3
 8002988:	2b00      	cmp	r3, #0
 800298a:	d107      	bne.n	800299c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002990:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e0e8      	b.n	8002b6e <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	331b      	adds	r3, #27
 80029a4:	011b      	lsls	r3, r3, #4
 80029a6:	4413      	add	r3, r2
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0204 	and.w	r2, r3, #4
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d10c      	bne.n	80029d4 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	331b      	adds	r3, #27
 80029c2:	011b      	lsls	r3, r3, #4
 80029c4:	4413      	add	r3, r2
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	0d5b      	lsrs	r3, r3, #21
 80029ca:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	601a      	str	r2, [r3, #0]
 80029d2:	e00b      	b.n	80029ec <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	331b      	adds	r3, #27
 80029dc:	011b      	lsls	r3, r3, #4
 80029de:	4413      	add	r3, r2
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	08db      	lsrs	r3, r3, #3
 80029e4:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	331b      	adds	r3, #27
 80029f4:	011b      	lsls	r3, r3, #4
 80029f6:	4413      	add	r3, r2
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0202 	and.w	r2, r3, #2
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	331b      	adds	r3, #27
 8002a0a:	011b      	lsls	r3, r3, #4
 8002a0c:	4413      	add	r3, r2
 8002a0e:	3304      	adds	r3, #4
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0308 	and.w	r3, r3, #8
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d003      	beq.n	8002a22 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2208      	movs	r2, #8
 8002a1e:	611a      	str	r2, [r3, #16]
 8002a20:	e00b      	b.n	8002a3a <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	331b      	adds	r3, #27
 8002a2a:	011b      	lsls	r3, r3, #4
 8002a2c:	4413      	add	r3, r2
 8002a2e:	3304      	adds	r3, #4
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 020f 	and.w	r2, r3, #15
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	331b      	adds	r3, #27
 8002a42:	011b      	lsls	r3, r3, #4
 8002a44:	4413      	add	r3, r2
 8002a46:	3304      	adds	r3, #4
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	0a1b      	lsrs	r3, r3, #8
 8002a4c:	b2da      	uxtb	r2, r3
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	331b      	adds	r3, #27
 8002a5a:	011b      	lsls	r3, r3, #4
 8002a5c:	4413      	add	r3, r2
 8002a5e:	3304      	adds	r3, #4
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	0c1b      	lsrs	r3, r3, #16
 8002a64:	b29a      	uxth	r2, r3
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	011b      	lsls	r3, r3, #4
 8002a72:	4413      	add	r3, r2
 8002a74:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	b2da      	uxtb	r2, r3
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	011b      	lsls	r3, r3, #4
 8002a88:	4413      	add	r3, r2
 8002a8a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	0a1a      	lsrs	r2, r3, #8
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	3301      	adds	r3, #1
 8002a96:	b2d2      	uxtb	r2, r2
 8002a98:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	011b      	lsls	r3, r3, #4
 8002aa2:	4413      	add	r3, r2
 8002aa4:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	0c1a      	lsrs	r2, r3, #16
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	3302      	adds	r3, #2
 8002ab0:	b2d2      	uxtb	r2, r2
 8002ab2:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	011b      	lsls	r3, r3, #4
 8002abc:	4413      	add	r3, r2
 8002abe:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	0e1a      	lsrs	r2, r3, #24
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	3303      	adds	r3, #3
 8002aca:	b2d2      	uxtb	r2, r2
 8002acc:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	011b      	lsls	r3, r3, #4
 8002ad6:	4413      	add	r3, r2
 8002ad8:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	3304      	adds	r3, #4
 8002ae2:	b2d2      	uxtb	r2, r2
 8002ae4:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	011b      	lsls	r3, r3, #4
 8002aee:	4413      	add	r3, r2
 8002af0:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	0a1a      	lsrs	r2, r3, #8
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	3305      	adds	r3, #5
 8002afc:	b2d2      	uxtb	r2, r2
 8002afe:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	011b      	lsls	r3, r3, #4
 8002b08:	4413      	add	r3, r2
 8002b0a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	0c1a      	lsrs	r2, r3, #16
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	3306      	adds	r3, #6
 8002b16:	b2d2      	uxtb	r2, r2
 8002b18:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	011b      	lsls	r3, r3, #4
 8002b22:	4413      	add	r3, r2
 8002b24:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	0e1a      	lsrs	r2, r3, #24
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	3307      	adds	r3, #7
 8002b30:	b2d2      	uxtb	r2, r2
 8002b32:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d108      	bne.n	8002b4c <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	68da      	ldr	r2, [r3, #12]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f042 0220 	orr.w	r2, r2, #32
 8002b48:	60da      	str	r2, [r3, #12]
 8002b4a:	e007      	b.n	8002b5c <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	691a      	ldr	r2, [r3, #16]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f042 0220 	orr.w	r2, r2, #32
 8002b5a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	e006      	b.n	8002b6e <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b64:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
  }
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	371c      	adds	r7, #28
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr

08002b7a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002b7a:	b480      	push	{r7}
 8002b7c:	b085      	sub	sp, #20
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
 8002b82:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b8a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002b8c:	7bfb      	ldrb	r3, [r7, #15]
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d002      	beq.n	8002b98 <HAL_CAN_ActivateNotification+0x1e>
 8002b92:	7bfb      	ldrb	r3, [r7, #15]
 8002b94:	2b02      	cmp	r3, #2
 8002b96:	d109      	bne.n	8002bac <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	6959      	ldr	r1, [r3, #20]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	683a      	ldr	r2, [r7, #0]
 8002ba4:	430a      	orrs	r2, r1
 8002ba6:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	e006      	b.n	8002bba <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bb0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
  }
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3714      	adds	r7, #20
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr

08002bc6 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002bc6:	b580      	push	{r7, lr}
 8002bc8:	b08a      	sub	sp, #40	@ 0x28
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	695b      	ldr	r3, [r3, #20]
 8002bd8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	691b      	ldr	r3, [r3, #16]
 8002bf8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	699b      	ldr	r3, [r3, #24]
 8002c00:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002c02:	6a3b      	ldr	r3, [r7, #32]
 8002c04:	f003 0301 	and.w	r3, r3, #1
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d07c      	beq.n	8002d06 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002c0c:	69bb      	ldr	r3, [r7, #24]
 8002c0e:	f003 0301 	and.w	r3, r3, #1
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d023      	beq.n	8002c5e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002c1e:	69bb      	ldr	r3, [r7, #24]
 8002c20:	f003 0302 	and.w	r3, r3, #2
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d003      	beq.n	8002c30 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002c28:	6878      	ldr	r0, [r7, #4]
 8002c2a:	f000 f983 	bl	8002f34 <HAL_CAN_TxMailbox0CompleteCallback>
 8002c2e:	e016      	b.n	8002c5e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002c30:	69bb      	ldr	r3, [r7, #24]
 8002c32:	f003 0304 	and.w	r3, r3, #4
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d004      	beq.n	8002c44 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c3c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002c40:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c42:	e00c      	b.n	8002c5e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002c44:	69bb      	ldr	r3, [r7, #24]
 8002c46:	f003 0308 	and.w	r3, r3, #8
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d004      	beq.n	8002c58 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c50:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002c54:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c56:	e002      	b.n	8002c5e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f000 f989 	bl	8002f70 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002c5e:	69bb      	ldr	r3, [r7, #24]
 8002c60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d024      	beq.n	8002cb2 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002c70:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002c72:	69bb      	ldr	r3, [r7, #24]
 8002c74:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d003      	beq.n	8002c84 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f000 f963 	bl	8002f48 <HAL_CAN_TxMailbox1CompleteCallback>
 8002c82:	e016      	b.n	8002cb2 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d004      	beq.n	8002c98 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c90:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002c94:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c96:	e00c      	b.n	8002cb2 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002c98:	69bb      	ldr	r3, [r7, #24]
 8002c9a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d004      	beq.n	8002cac <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ca4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ca8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002caa:	e002      	b.n	8002cb2 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f000 f969 	bl	8002f84 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002cb2:	69bb      	ldr	r3, [r7, #24]
 8002cb4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d024      	beq.n	8002d06 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002cc4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002cc6:	69bb      	ldr	r3, [r7, #24]
 8002cc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d003      	beq.n	8002cd8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	f000 f943 	bl	8002f5c <HAL_CAN_TxMailbox2CompleteCallback>
 8002cd6:	e016      	b.n	8002d06 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002cd8:	69bb      	ldr	r3, [r7, #24]
 8002cda:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d004      	beq.n	8002cec <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ce4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002ce8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cea:	e00c      	b.n	8002d06 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002cec:	69bb      	ldr	r3, [r7, #24]
 8002cee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d004      	beq.n	8002d00 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cf8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cfc:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cfe:	e002      	b.n	8002d06 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f000 f949 	bl	8002f98 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002d06:	6a3b      	ldr	r3, [r7, #32]
 8002d08:	f003 0308 	and.w	r3, r3, #8
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d00c      	beq.n	8002d2a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	f003 0310 	and.w	r3, r3, #16
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d007      	beq.n	8002d2a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d1c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002d20:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	2210      	movs	r2, #16
 8002d28:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002d2a:	6a3b      	ldr	r3, [r7, #32]
 8002d2c:	f003 0304 	and.w	r3, r3, #4
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d00b      	beq.n	8002d4c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	f003 0308 	and.w	r3, r3, #8
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d006      	beq.n	8002d4c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	2208      	movs	r2, #8
 8002d44:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f000 f930 	bl	8002fac <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002d4c:	6a3b      	ldr	r3, [r7, #32]
 8002d4e:	f003 0302 	and.w	r3, r3, #2
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d009      	beq.n	8002d6a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	f003 0303 	and.w	r3, r3, #3
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d002      	beq.n	8002d6a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f7fd fb6f 	bl	8000448 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002d6a:	6a3b      	ldr	r3, [r7, #32]
 8002d6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d00c      	beq.n	8002d8e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	f003 0310 	and.w	r3, r3, #16
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d007      	beq.n	8002d8e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d80:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002d84:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	2210      	movs	r2, #16
 8002d8c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002d8e:	6a3b      	ldr	r3, [r7, #32]
 8002d90:	f003 0320 	and.w	r3, r3, #32
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d00b      	beq.n	8002db0 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	f003 0308 	and.w	r3, r3, #8
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d006      	beq.n	8002db0 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	2208      	movs	r2, #8
 8002da8:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f000 f912 	bl	8002fd4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002db0:	6a3b      	ldr	r3, [r7, #32]
 8002db2:	f003 0310 	and.w	r3, r3, #16
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d009      	beq.n	8002dce <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	691b      	ldr	r3, [r3, #16]
 8002dc0:	f003 0303 	and.w	r3, r3, #3
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d002      	beq.n	8002dce <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f000 f8f9 	bl	8002fc0 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002dce:	6a3b      	ldr	r3, [r7, #32]
 8002dd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d00b      	beq.n	8002df0 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002dd8:	69fb      	ldr	r3, [r7, #28]
 8002dda:	f003 0310 	and.w	r3, r3, #16
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d006      	beq.n	8002df0 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	2210      	movs	r2, #16
 8002de8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f000 f8fc 	bl	8002fe8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002df0:	6a3b      	ldr	r3, [r7, #32]
 8002df2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d00b      	beq.n	8002e12 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	f003 0308 	and.w	r3, r3, #8
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d006      	beq.n	8002e12 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	2208      	movs	r2, #8
 8002e0a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f000 f8f5 	bl	8002ffc <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002e12:	6a3b      	ldr	r3, [r7, #32]
 8002e14:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d07b      	beq.n	8002f14 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	f003 0304 	and.w	r3, r3, #4
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d072      	beq.n	8002f0c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002e26:	6a3b      	ldr	r3, [r7, #32]
 8002e28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d008      	beq.n	8002e42 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d003      	beq.n	8002e42 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e3c:	f043 0301 	orr.w	r3, r3, #1
 8002e40:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002e42:	6a3b      	ldr	r3, [r7, #32]
 8002e44:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d008      	beq.n	8002e5e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d003      	beq.n	8002e5e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e58:	f043 0302 	orr.w	r3, r3, #2
 8002e5c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002e5e:	6a3b      	ldr	r3, [r7, #32]
 8002e60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d008      	beq.n	8002e7a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d003      	beq.n	8002e7a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e74:	f043 0304 	orr.w	r3, r3, #4
 8002e78:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002e7a:	6a3b      	ldr	r3, [r7, #32]
 8002e7c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d043      	beq.n	8002f0c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d03e      	beq.n	8002f0c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002e94:	2b60      	cmp	r3, #96	@ 0x60
 8002e96:	d02b      	beq.n	8002ef0 <HAL_CAN_IRQHandler+0x32a>
 8002e98:	2b60      	cmp	r3, #96	@ 0x60
 8002e9a:	d82e      	bhi.n	8002efa <HAL_CAN_IRQHandler+0x334>
 8002e9c:	2b50      	cmp	r3, #80	@ 0x50
 8002e9e:	d022      	beq.n	8002ee6 <HAL_CAN_IRQHandler+0x320>
 8002ea0:	2b50      	cmp	r3, #80	@ 0x50
 8002ea2:	d82a      	bhi.n	8002efa <HAL_CAN_IRQHandler+0x334>
 8002ea4:	2b40      	cmp	r3, #64	@ 0x40
 8002ea6:	d019      	beq.n	8002edc <HAL_CAN_IRQHandler+0x316>
 8002ea8:	2b40      	cmp	r3, #64	@ 0x40
 8002eaa:	d826      	bhi.n	8002efa <HAL_CAN_IRQHandler+0x334>
 8002eac:	2b30      	cmp	r3, #48	@ 0x30
 8002eae:	d010      	beq.n	8002ed2 <HAL_CAN_IRQHandler+0x30c>
 8002eb0:	2b30      	cmp	r3, #48	@ 0x30
 8002eb2:	d822      	bhi.n	8002efa <HAL_CAN_IRQHandler+0x334>
 8002eb4:	2b10      	cmp	r3, #16
 8002eb6:	d002      	beq.n	8002ebe <HAL_CAN_IRQHandler+0x2f8>
 8002eb8:	2b20      	cmp	r3, #32
 8002eba:	d005      	beq.n	8002ec8 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002ebc:	e01d      	b.n	8002efa <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ec0:	f043 0308 	orr.w	r3, r3, #8
 8002ec4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002ec6:	e019      	b.n	8002efc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eca:	f043 0310 	orr.w	r3, r3, #16
 8002ece:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002ed0:	e014      	b.n	8002efc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed4:	f043 0320 	orr.w	r3, r3, #32
 8002ed8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002eda:	e00f      	b.n	8002efc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ede:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002ee2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002ee4:	e00a      	b.n	8002efc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ee8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002eec:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002eee:	e005      	b.n	8002efc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ef2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ef6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002ef8:	e000      	b.n	8002efc <HAL_CAN_IRQHandler+0x336>
            break;
 8002efa:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	699a      	ldr	r2, [r3, #24]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002f0a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	2204      	movs	r2, #4
 8002f12:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d008      	beq.n	8002f2c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f20:	431a      	orrs	r2, r3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f000 f872 	bl	8003010 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002f2c:	bf00      	nop
 8002f2e:	3728      	adds	r7, #40	@ 0x28
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}

08002f34 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002f3c:	bf00      	nop
 8002f3e:	370c      	adds	r7, #12
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr

08002f48 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002f50:	bf00      	nop
 8002f52:	370c      	adds	r7, #12
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr

08002f5c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b083      	sub	sp, #12
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002f64:	bf00      	nop
 8002f66:	370c      	adds	r7, #12
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr

08002f70 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b083      	sub	sp, #12
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002f78:	bf00      	nop
 8002f7a:	370c      	adds	r7, #12
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr

08002f84 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002f8c:	bf00      	nop
 8002f8e:	370c      	adds	r7, #12
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr

08002f98 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b083      	sub	sp, #12
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002fa0:	bf00      	nop
 8002fa2:	370c      	adds	r7, #12
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr

08002fac <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b083      	sub	sp, #12
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002fb4:	bf00      	nop
 8002fb6:	370c      	adds	r7, #12
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr

08002fc0 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002fc8:	bf00      	nop
 8002fca:	370c      	adds	r7, #12
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr

08002fd4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b083      	sub	sp, #12
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002fdc:	bf00      	nop
 8002fde:	370c      	adds	r7, #12
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr

08002fe8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002ff0:	bf00      	nop
 8002ff2:	370c      	adds	r7, #12
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr

08002ffc <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b083      	sub	sp, #12
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003004:	bf00      	nop
 8003006:	370c      	adds	r7, #12
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr

08003010 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003018:	bf00      	nop
 800301a:	370c      	adds	r7, #12
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr

08003024 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003024:	b480      	push	{r7}
 8003026:	b085      	sub	sp, #20
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	f003 0307 	and.w	r3, r3, #7
 8003032:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003034:	4b0c      	ldr	r3, [pc, #48]	@ (8003068 <__NVIC_SetPriorityGrouping+0x44>)
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800303a:	68ba      	ldr	r2, [r7, #8]
 800303c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003040:	4013      	ands	r3, r2
 8003042:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800304c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003050:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003054:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003056:	4a04      	ldr	r2, [pc, #16]	@ (8003068 <__NVIC_SetPriorityGrouping+0x44>)
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	60d3      	str	r3, [r2, #12]
}
 800305c:	bf00      	nop
 800305e:	3714      	adds	r7, #20
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr
 8003068:	e000ed00 	.word	0xe000ed00

0800306c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800306c:	b480      	push	{r7}
 800306e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003070:	4b04      	ldr	r3, [pc, #16]	@ (8003084 <__NVIC_GetPriorityGrouping+0x18>)
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	0a1b      	lsrs	r3, r3, #8
 8003076:	f003 0307 	and.w	r3, r3, #7
}
 800307a:	4618      	mov	r0, r3
 800307c:	46bd      	mov	sp, r7
 800307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003082:	4770      	bx	lr
 8003084:	e000ed00 	.word	0xe000ed00

08003088 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	4603      	mov	r3, r0
 8003090:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003096:	2b00      	cmp	r3, #0
 8003098:	db0b      	blt.n	80030b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800309a:	79fb      	ldrb	r3, [r7, #7]
 800309c:	f003 021f 	and.w	r2, r3, #31
 80030a0:	4907      	ldr	r1, [pc, #28]	@ (80030c0 <__NVIC_EnableIRQ+0x38>)
 80030a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030a6:	095b      	lsrs	r3, r3, #5
 80030a8:	2001      	movs	r0, #1
 80030aa:	fa00 f202 	lsl.w	r2, r0, r2
 80030ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80030b2:	bf00      	nop
 80030b4:	370c      	adds	r7, #12
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr
 80030be:	bf00      	nop
 80030c0:	e000e100 	.word	0xe000e100

080030c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b083      	sub	sp, #12
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	4603      	mov	r3, r0
 80030cc:	6039      	str	r1, [r7, #0]
 80030ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	db0a      	blt.n	80030ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	b2da      	uxtb	r2, r3
 80030dc:	490c      	ldr	r1, [pc, #48]	@ (8003110 <__NVIC_SetPriority+0x4c>)
 80030de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030e2:	0112      	lsls	r2, r2, #4
 80030e4:	b2d2      	uxtb	r2, r2
 80030e6:	440b      	add	r3, r1
 80030e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030ec:	e00a      	b.n	8003104 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	b2da      	uxtb	r2, r3
 80030f2:	4908      	ldr	r1, [pc, #32]	@ (8003114 <__NVIC_SetPriority+0x50>)
 80030f4:	79fb      	ldrb	r3, [r7, #7]
 80030f6:	f003 030f 	and.w	r3, r3, #15
 80030fa:	3b04      	subs	r3, #4
 80030fc:	0112      	lsls	r2, r2, #4
 80030fe:	b2d2      	uxtb	r2, r2
 8003100:	440b      	add	r3, r1
 8003102:	761a      	strb	r2, [r3, #24]
}
 8003104:	bf00      	nop
 8003106:	370c      	adds	r7, #12
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr
 8003110:	e000e100 	.word	0xe000e100
 8003114:	e000ed00 	.word	0xe000ed00

08003118 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003118:	b480      	push	{r7}
 800311a:	b089      	sub	sp, #36	@ 0x24
 800311c:	af00      	add	r7, sp, #0
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	60b9      	str	r1, [r7, #8]
 8003122:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	f003 0307 	and.w	r3, r3, #7
 800312a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	f1c3 0307 	rsb	r3, r3, #7
 8003132:	2b04      	cmp	r3, #4
 8003134:	bf28      	it	cs
 8003136:	2304      	movcs	r3, #4
 8003138:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	3304      	adds	r3, #4
 800313e:	2b06      	cmp	r3, #6
 8003140:	d902      	bls.n	8003148 <NVIC_EncodePriority+0x30>
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	3b03      	subs	r3, #3
 8003146:	e000      	b.n	800314a <NVIC_EncodePriority+0x32>
 8003148:	2300      	movs	r3, #0
 800314a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800314c:	f04f 32ff 	mov.w	r2, #4294967295
 8003150:	69bb      	ldr	r3, [r7, #24]
 8003152:	fa02 f303 	lsl.w	r3, r2, r3
 8003156:	43da      	mvns	r2, r3
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	401a      	ands	r2, r3
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003160:	f04f 31ff 	mov.w	r1, #4294967295
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	fa01 f303 	lsl.w	r3, r1, r3
 800316a:	43d9      	mvns	r1, r3
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003170:	4313      	orrs	r3, r2
         );
}
 8003172:	4618      	mov	r0, r3
 8003174:	3724      	adds	r7, #36	@ 0x24
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr
	...

08003180 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b082      	sub	sp, #8
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	3b01      	subs	r3, #1
 800318c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003190:	d301      	bcc.n	8003196 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003192:	2301      	movs	r3, #1
 8003194:	e00f      	b.n	80031b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003196:	4a0a      	ldr	r2, [pc, #40]	@ (80031c0 <SysTick_Config+0x40>)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	3b01      	subs	r3, #1
 800319c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800319e:	210f      	movs	r1, #15
 80031a0:	f04f 30ff 	mov.w	r0, #4294967295
 80031a4:	f7ff ff8e 	bl	80030c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031a8:	4b05      	ldr	r3, [pc, #20]	@ (80031c0 <SysTick_Config+0x40>)
 80031aa:	2200      	movs	r2, #0
 80031ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031ae:	4b04      	ldr	r3, [pc, #16]	@ (80031c0 <SysTick_Config+0x40>)
 80031b0:	2207      	movs	r2, #7
 80031b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031b4:	2300      	movs	r3, #0
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3708      	adds	r7, #8
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	e000e010 	.word	0xe000e010

080031c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b082      	sub	sp, #8
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	f7ff ff29 	bl	8003024 <__NVIC_SetPriorityGrouping>
}
 80031d2:	bf00      	nop
 80031d4:	3708      	adds	r7, #8
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}

080031da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031da:	b580      	push	{r7, lr}
 80031dc:	b086      	sub	sp, #24
 80031de:	af00      	add	r7, sp, #0
 80031e0:	4603      	mov	r3, r0
 80031e2:	60b9      	str	r1, [r7, #8]
 80031e4:	607a      	str	r2, [r7, #4]
 80031e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80031e8:	2300      	movs	r3, #0
 80031ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031ec:	f7ff ff3e 	bl	800306c <__NVIC_GetPriorityGrouping>
 80031f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	68b9      	ldr	r1, [r7, #8]
 80031f6:	6978      	ldr	r0, [r7, #20]
 80031f8:	f7ff ff8e 	bl	8003118 <NVIC_EncodePriority>
 80031fc:	4602      	mov	r2, r0
 80031fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003202:	4611      	mov	r1, r2
 8003204:	4618      	mov	r0, r3
 8003206:	f7ff ff5d 	bl	80030c4 <__NVIC_SetPriority>
}
 800320a:	bf00      	nop
 800320c:	3718      	adds	r7, #24
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}

08003212 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003212:	b580      	push	{r7, lr}
 8003214:	b082      	sub	sp, #8
 8003216:	af00      	add	r7, sp, #0
 8003218:	4603      	mov	r3, r0
 800321a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800321c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003220:	4618      	mov	r0, r3
 8003222:	f7ff ff31 	bl	8003088 <__NVIC_EnableIRQ>
}
 8003226:	bf00      	nop
 8003228:	3708      	adds	r7, #8
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}

0800322e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800322e:	b580      	push	{r7, lr}
 8003230:	b082      	sub	sp, #8
 8003232:	af00      	add	r7, sp, #0
 8003234:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f7ff ffa2 	bl	8003180 <SysTick_Config>
 800323c:	4603      	mov	r3, r0
}
 800323e:	4618      	mov	r0, r3
 8003240:	3708      	adds	r7, #8
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}

08003246 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003246:	b580      	push	{r7, lr}
 8003248:	b084      	sub	sp, #16
 800324a:	af00      	add	r7, sp, #0
 800324c:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800324e:	2300      	movs	r3, #0
 8003250:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d101      	bne.n	800325c <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e037      	b.n	80032cc <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2202      	movs	r2, #2
 8003260:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003272:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8003276:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003280:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	68db      	ldr	r3, [r3, #12]
 8003286:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800328c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	695b      	ldr	r3, [r3, #20]
 8003292:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003298:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	69db      	ldr	r3, [r3, #28]
 800329e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80032a0:	68fa      	ldr	r2, [r7, #12]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	68fa      	ldr	r2, [r7, #12]
 80032ac:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f000 f940 	bl	8003534 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2200      	movs	r2, #0
 80032b8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2201      	movs	r2, #1
 80032be:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2200      	movs	r2, #0
 80032c6:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80032ca:	2300      	movs	r3, #0
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	3710      	adds	r7, #16
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}

080032d4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b086      	sub	sp, #24
 80032d8:	af00      	add	r7, sp, #0
 80032da:	60f8      	str	r0, [r7, #12]
 80032dc:	60b9      	str	r1, [r7, #8]
 80032de:	607a      	str	r2, [r7, #4]
 80032e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032e2:	2300      	movs	r3, #0
 80032e4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d101      	bne.n	80032f4 <HAL_DMA_Start_IT+0x20>
 80032f0:	2302      	movs	r3, #2
 80032f2:	e04a      	b.n	800338a <HAL_DMA_Start_IT+0xb6>
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2201      	movs	r2, #1
 80032f8:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003302:	2b01      	cmp	r3, #1
 8003304:	d13a      	bne.n	800337c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2202      	movs	r2, #2
 800330a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2200      	movs	r2, #0
 8003312:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f022 0201 	bic.w	r2, r2, #1
 8003322:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	68b9      	ldr	r1, [r7, #8]
 800332a:	68f8      	ldr	r0, [r7, #12]
 800332c:	f000 f8d4 	bl	80034d8 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003334:	2b00      	cmp	r3, #0
 8003336:	d008      	beq.n	800334a <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f042 020e 	orr.w	r2, r2, #14
 8003346:	601a      	str	r2, [r3, #0]
 8003348:	e00f      	b.n	800336a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f042 020a 	orr.w	r2, r2, #10
 8003358:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f022 0204 	bic.w	r2, r2, #4
 8003368:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f042 0201 	orr.w	r2, r2, #1
 8003378:	601a      	str	r2, [r3, #0]
 800337a:	e005      	b.n	8003388 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2200      	movs	r2, #0
 8003380:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003384:	2302      	movs	r3, #2
 8003386:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003388:	7dfb      	ldrb	r3, [r7, #23]
}
 800338a:	4618      	mov	r0, r3
 800338c:	3718      	adds	r7, #24
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}

08003392 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003392:	b580      	push	{r7, lr}
 8003394:	b084      	sub	sp, #16
 8003396:	af00      	add	r7, sp, #0
 8003398:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ae:	2204      	movs	r2, #4
 80033b0:	409a      	lsls	r2, r3
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	4013      	ands	r3, r2
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d024      	beq.n	8003404 <HAL_DMA_IRQHandler+0x72>
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	f003 0304 	and.w	r3, r3, #4
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d01f      	beq.n	8003404 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0320 	and.w	r3, r3, #32
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d107      	bne.n	80033e2 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f022 0204 	bic.w	r2, r2, #4
 80033e0:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033ea:	2104      	movs	r1, #4
 80033ec:	fa01 f202 	lsl.w	r2, r1, r2
 80033f0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d06a      	beq.n	80034d0 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003402:	e065      	b.n	80034d0 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003408:	2202      	movs	r2, #2
 800340a:	409a      	lsls	r2, r3
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	4013      	ands	r3, r2
 8003410:	2b00      	cmp	r3, #0
 8003412:	d02c      	beq.n	800346e <HAL_DMA_IRQHandler+0xdc>
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	f003 0302 	and.w	r3, r3, #2
 800341a:	2b00      	cmp	r3, #0
 800341c:	d027      	beq.n	800346e <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 0320 	and.w	r3, r3, #32
 8003428:	2b00      	cmp	r3, #0
 800342a:	d10b      	bne.n	8003444 <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f022 020a 	bic.w	r2, r2, #10
 800343a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2201      	movs	r2, #1
 8003440:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800344c:	2102      	movs	r1, #2
 800344e:	fa01 f202 	lsl.w	r2, r1, r2
 8003452:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003460:	2b00      	cmp	r3, #0
 8003462:	d035      	beq.n	80034d0 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800346c:	e030      	b.n	80034d0 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003472:	2208      	movs	r2, #8
 8003474:	409a      	lsls	r2, r3
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	4013      	ands	r3, r2
 800347a:	2b00      	cmp	r3, #0
 800347c:	d028      	beq.n	80034d0 <HAL_DMA_IRQHandler+0x13e>
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	f003 0308 	and.w	r3, r3, #8
 8003484:	2b00      	cmp	r3, #0
 8003486:	d023      	beq.n	80034d0 <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f022 020e 	bic.w	r2, r2, #14
 8003496:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034a0:	2101      	movs	r1, #1
 80034a2:	fa01 f202 	lsl.w	r2, r1, r2
 80034a6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2201      	movs	r2, #1
 80034ac:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2201      	movs	r2, #1
 80034b2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2200      	movs	r2, #0
 80034ba:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d004      	beq.n	80034d0 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	4798      	blx	r3
    }
  }
}
 80034ce:	e7ff      	b.n	80034d0 <HAL_DMA_IRQHandler+0x13e>
 80034d0:	bf00      	nop
 80034d2:	3710      	adds	r7, #16
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}

080034d8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80034d8:	b480      	push	{r7}
 80034da:	b085      	sub	sp, #20
 80034dc:	af00      	add	r7, sp, #0
 80034de:	60f8      	str	r0, [r7, #12]
 80034e0:	60b9      	str	r1, [r7, #8]
 80034e2:	607a      	str	r2, [r7, #4]
 80034e4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034ee:	2101      	movs	r1, #1
 80034f0:	fa01 f202 	lsl.w	r2, r1, r2
 80034f4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	683a      	ldr	r2, [r7, #0]
 80034fc:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	2b10      	cmp	r3, #16
 8003504:	d108      	bne.n	8003518 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	68ba      	ldr	r2, [r7, #8]
 8003514:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003516:	e007      	b.n	8003528 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	68ba      	ldr	r2, [r7, #8]
 800351e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	687a      	ldr	r2, [r7, #4]
 8003526:	60da      	str	r2, [r3, #12]
}
 8003528:	bf00      	nop
 800352a:	3714      	adds	r7, #20
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr

08003534 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	461a      	mov	r2, r3
 8003542:	4b09      	ldr	r3, [pc, #36]	@ (8003568 <DMA_CalcBaseAndBitshift+0x34>)
 8003544:	4413      	add	r3, r2
 8003546:	4a09      	ldr	r2, [pc, #36]	@ (800356c <DMA_CalcBaseAndBitshift+0x38>)
 8003548:	fba2 2303 	umull	r2, r3, r2, r3
 800354c:	091b      	lsrs	r3, r3, #4
 800354e:	009a      	lsls	r2, r3, #2
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	4a06      	ldr	r2, [pc, #24]	@ (8003570 <DMA_CalcBaseAndBitshift+0x3c>)
 8003558:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 800355a:	bf00      	nop
 800355c:	370c      	adds	r7, #12
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr
 8003566:	bf00      	nop
 8003568:	bffdfff8 	.word	0xbffdfff8
 800356c:	cccccccd 	.word	0xcccccccd
 8003570:	40020000 	.word	0x40020000

08003574 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003574:	b480      	push	{r7}
 8003576:	b087      	sub	sp, #28
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800357e:	2300      	movs	r3, #0
 8003580:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003582:	e14e      	b.n	8003822 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	2101      	movs	r1, #1
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	fa01 f303 	lsl.w	r3, r1, r3
 8003590:	4013      	ands	r3, r2
 8003592:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2b00      	cmp	r3, #0
 8003598:	f000 8140 	beq.w	800381c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	f003 0303 	and.w	r3, r3, #3
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d005      	beq.n	80035b4 <HAL_GPIO_Init+0x40>
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	f003 0303 	and.w	r3, r3, #3
 80035b0:	2b02      	cmp	r3, #2
 80035b2:	d130      	bne.n	8003616 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	005b      	lsls	r3, r3, #1
 80035be:	2203      	movs	r2, #3
 80035c0:	fa02 f303 	lsl.w	r3, r2, r3
 80035c4:	43db      	mvns	r3, r3
 80035c6:	693a      	ldr	r2, [r7, #16]
 80035c8:	4013      	ands	r3, r2
 80035ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	68da      	ldr	r2, [r3, #12]
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	005b      	lsls	r3, r3, #1
 80035d4:	fa02 f303 	lsl.w	r3, r2, r3
 80035d8:	693a      	ldr	r2, [r7, #16]
 80035da:	4313      	orrs	r3, r2
 80035dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	693a      	ldr	r2, [r7, #16]
 80035e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80035ea:	2201      	movs	r2, #1
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	fa02 f303 	lsl.w	r3, r2, r3
 80035f2:	43db      	mvns	r3, r3
 80035f4:	693a      	ldr	r2, [r7, #16]
 80035f6:	4013      	ands	r3, r2
 80035f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	091b      	lsrs	r3, r3, #4
 8003600:	f003 0201 	and.w	r2, r3, #1
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	fa02 f303 	lsl.w	r3, r2, r3
 800360a:	693a      	ldr	r2, [r7, #16]
 800360c:	4313      	orrs	r3, r2
 800360e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	693a      	ldr	r2, [r7, #16]
 8003614:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	f003 0303 	and.w	r3, r3, #3
 800361e:	2b03      	cmp	r3, #3
 8003620:	d017      	beq.n	8003652 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	68db      	ldr	r3, [r3, #12]
 8003626:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	005b      	lsls	r3, r3, #1
 800362c:	2203      	movs	r2, #3
 800362e:	fa02 f303 	lsl.w	r3, r2, r3
 8003632:	43db      	mvns	r3, r3
 8003634:	693a      	ldr	r2, [r7, #16]
 8003636:	4013      	ands	r3, r2
 8003638:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	689a      	ldr	r2, [r3, #8]
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	005b      	lsls	r3, r3, #1
 8003642:	fa02 f303 	lsl.w	r3, r2, r3
 8003646:	693a      	ldr	r2, [r7, #16]
 8003648:	4313      	orrs	r3, r2
 800364a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	693a      	ldr	r2, [r7, #16]
 8003650:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	f003 0303 	and.w	r3, r3, #3
 800365a:	2b02      	cmp	r3, #2
 800365c:	d123      	bne.n	80036a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	08da      	lsrs	r2, r3, #3
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	3208      	adds	r2, #8
 8003666:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800366a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	f003 0307 	and.w	r3, r3, #7
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	220f      	movs	r2, #15
 8003676:	fa02 f303 	lsl.w	r3, r2, r3
 800367a:	43db      	mvns	r3, r3
 800367c:	693a      	ldr	r2, [r7, #16]
 800367e:	4013      	ands	r3, r2
 8003680:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	691a      	ldr	r2, [r3, #16]
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	f003 0307 	and.w	r3, r3, #7
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	fa02 f303 	lsl.w	r3, r2, r3
 8003692:	693a      	ldr	r2, [r7, #16]
 8003694:	4313      	orrs	r3, r2
 8003696:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	08da      	lsrs	r2, r3, #3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	3208      	adds	r2, #8
 80036a0:	6939      	ldr	r1, [r7, #16]
 80036a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	005b      	lsls	r3, r3, #1
 80036b0:	2203      	movs	r2, #3
 80036b2:	fa02 f303 	lsl.w	r3, r2, r3
 80036b6:	43db      	mvns	r3, r3
 80036b8:	693a      	ldr	r2, [r7, #16]
 80036ba:	4013      	ands	r3, r2
 80036bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	f003 0203 	and.w	r2, r3, #3
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	005b      	lsls	r3, r3, #1
 80036ca:	fa02 f303 	lsl.w	r3, r2, r3
 80036ce:	693a      	ldr	r2, [r7, #16]
 80036d0:	4313      	orrs	r3, r2
 80036d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	693a      	ldr	r2, [r7, #16]
 80036d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	f000 809a 	beq.w	800381c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036e8:	4b55      	ldr	r3, [pc, #340]	@ (8003840 <HAL_GPIO_Init+0x2cc>)
 80036ea:	699b      	ldr	r3, [r3, #24]
 80036ec:	4a54      	ldr	r2, [pc, #336]	@ (8003840 <HAL_GPIO_Init+0x2cc>)
 80036ee:	f043 0301 	orr.w	r3, r3, #1
 80036f2:	6193      	str	r3, [r2, #24]
 80036f4:	4b52      	ldr	r3, [pc, #328]	@ (8003840 <HAL_GPIO_Init+0x2cc>)
 80036f6:	699b      	ldr	r3, [r3, #24]
 80036f8:	f003 0301 	and.w	r3, r3, #1
 80036fc:	60bb      	str	r3, [r7, #8]
 80036fe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003700:	4a50      	ldr	r2, [pc, #320]	@ (8003844 <HAL_GPIO_Init+0x2d0>)
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	089b      	lsrs	r3, r3, #2
 8003706:	3302      	adds	r3, #2
 8003708:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800370c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	f003 0303 	and.w	r3, r3, #3
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	220f      	movs	r2, #15
 8003718:	fa02 f303 	lsl.w	r3, r2, r3
 800371c:	43db      	mvns	r3, r3
 800371e:	693a      	ldr	r2, [r7, #16]
 8003720:	4013      	ands	r3, r2
 8003722:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800372a:	d013      	beq.n	8003754 <HAL_GPIO_Init+0x1e0>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	4a46      	ldr	r2, [pc, #280]	@ (8003848 <HAL_GPIO_Init+0x2d4>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d00d      	beq.n	8003750 <HAL_GPIO_Init+0x1dc>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	4a45      	ldr	r2, [pc, #276]	@ (800384c <HAL_GPIO_Init+0x2d8>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d007      	beq.n	800374c <HAL_GPIO_Init+0x1d8>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	4a44      	ldr	r2, [pc, #272]	@ (8003850 <HAL_GPIO_Init+0x2dc>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d101      	bne.n	8003748 <HAL_GPIO_Init+0x1d4>
 8003744:	2303      	movs	r3, #3
 8003746:	e006      	b.n	8003756 <HAL_GPIO_Init+0x1e2>
 8003748:	2305      	movs	r3, #5
 800374a:	e004      	b.n	8003756 <HAL_GPIO_Init+0x1e2>
 800374c:	2302      	movs	r3, #2
 800374e:	e002      	b.n	8003756 <HAL_GPIO_Init+0x1e2>
 8003750:	2301      	movs	r3, #1
 8003752:	e000      	b.n	8003756 <HAL_GPIO_Init+0x1e2>
 8003754:	2300      	movs	r3, #0
 8003756:	697a      	ldr	r2, [r7, #20]
 8003758:	f002 0203 	and.w	r2, r2, #3
 800375c:	0092      	lsls	r2, r2, #2
 800375e:	4093      	lsls	r3, r2
 8003760:	693a      	ldr	r2, [r7, #16]
 8003762:	4313      	orrs	r3, r2
 8003764:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003766:	4937      	ldr	r1, [pc, #220]	@ (8003844 <HAL_GPIO_Init+0x2d0>)
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	089b      	lsrs	r3, r3, #2
 800376c:	3302      	adds	r3, #2
 800376e:	693a      	ldr	r2, [r7, #16]
 8003770:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003774:	4b37      	ldr	r3, [pc, #220]	@ (8003854 <HAL_GPIO_Init+0x2e0>)
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	43db      	mvns	r3, r3
 800377e:	693a      	ldr	r2, [r7, #16]
 8003780:	4013      	ands	r3, r2
 8003782:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800378c:	2b00      	cmp	r3, #0
 800378e:	d003      	beq.n	8003798 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8003790:	693a      	ldr	r2, [r7, #16]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	4313      	orrs	r3, r2
 8003796:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003798:	4a2e      	ldr	r2, [pc, #184]	@ (8003854 <HAL_GPIO_Init+0x2e0>)
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800379e:	4b2d      	ldr	r3, [pc, #180]	@ (8003854 <HAL_GPIO_Init+0x2e0>)
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	43db      	mvns	r3, r3
 80037a8:	693a      	ldr	r2, [r7, #16]
 80037aa:	4013      	ands	r3, r2
 80037ac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d003      	beq.n	80037c2 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80037ba:	693a      	ldr	r2, [r7, #16]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	4313      	orrs	r3, r2
 80037c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80037c2:	4a24      	ldr	r2, [pc, #144]	@ (8003854 <HAL_GPIO_Init+0x2e0>)
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80037c8:	4b22      	ldr	r3, [pc, #136]	@ (8003854 <HAL_GPIO_Init+0x2e0>)
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	43db      	mvns	r3, r3
 80037d2:	693a      	ldr	r2, [r7, #16]
 80037d4:	4013      	ands	r3, r2
 80037d6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d003      	beq.n	80037ec <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80037e4:	693a      	ldr	r2, [r7, #16]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	4313      	orrs	r3, r2
 80037ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80037ec:	4a19      	ldr	r2, [pc, #100]	@ (8003854 <HAL_GPIO_Init+0x2e0>)
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80037f2:	4b18      	ldr	r3, [pc, #96]	@ (8003854 <HAL_GPIO_Init+0x2e0>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	43db      	mvns	r3, r3
 80037fc:	693a      	ldr	r2, [r7, #16]
 80037fe:	4013      	ands	r3, r2
 8003800:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800380a:	2b00      	cmp	r3, #0
 800380c:	d003      	beq.n	8003816 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800380e:	693a      	ldr	r2, [r7, #16]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	4313      	orrs	r3, r2
 8003814:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003816:	4a0f      	ldr	r2, [pc, #60]	@ (8003854 <HAL_GPIO_Init+0x2e0>)
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	3301      	adds	r3, #1
 8003820:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	fa22 f303 	lsr.w	r3, r2, r3
 800382c:	2b00      	cmp	r3, #0
 800382e:	f47f aea9 	bne.w	8003584 <HAL_GPIO_Init+0x10>
  }
}
 8003832:	bf00      	nop
 8003834:	bf00      	nop
 8003836:	371c      	adds	r7, #28
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr
 8003840:	40021000 	.word	0x40021000
 8003844:	40010000 	.word	0x40010000
 8003848:	48000400 	.word	0x48000400
 800384c:	48000800 	.word	0x48000800
 8003850:	48000c00 	.word	0x48000c00
 8003854:	40010400 	.word	0x40010400

08003858 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003858:	b480      	push	{r7}
 800385a:	b085      	sub	sp, #20
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	460b      	mov	r3, r1
 8003862:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	691a      	ldr	r2, [r3, #16]
 8003868:	887b      	ldrh	r3, [r7, #2]
 800386a:	4013      	ands	r3, r2
 800386c:	2b00      	cmp	r3, #0
 800386e:	d002      	beq.n	8003876 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003870:	2301      	movs	r3, #1
 8003872:	73fb      	strb	r3, [r7, #15]
 8003874:	e001      	b.n	800387a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003876:	2300      	movs	r3, #0
 8003878:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800387a:	7bfb      	ldrb	r3, [r7, #15]
}
 800387c:	4618      	mov	r0, r3
 800387e:	3714      	adds	r7, #20
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr

08003888 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	460b      	mov	r3, r1
 8003892:	807b      	strh	r3, [r7, #2]
 8003894:	4613      	mov	r3, r2
 8003896:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003898:	787b      	ldrb	r3, [r7, #1]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d003      	beq.n	80038a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800389e:	887a      	ldrh	r2, [r7, #2]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80038a4:	e002      	b.n	80038ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80038a6:	887a      	ldrh	r2, [r7, #2]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80038ac:	bf00      	nop
 80038ae:	370c      	adds	r7, #12
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr

080038b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 80038be:	af00      	add	r7, sp, #0
 80038c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038c4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80038c8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038ce:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d102      	bne.n	80038de <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	f001 b823 	b.w	8004924 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038e2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 0301 	and.w	r3, r3, #1
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	f000 817d 	beq.w	8003bee <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80038f4:	4bbc      	ldr	r3, [pc, #752]	@ (8003be8 <HAL_RCC_OscConfig+0x330>)
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	f003 030c 	and.w	r3, r3, #12
 80038fc:	2b04      	cmp	r3, #4
 80038fe:	d00c      	beq.n	800391a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003900:	4bb9      	ldr	r3, [pc, #740]	@ (8003be8 <HAL_RCC_OscConfig+0x330>)
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	f003 030c 	and.w	r3, r3, #12
 8003908:	2b08      	cmp	r3, #8
 800390a:	d15c      	bne.n	80039c6 <HAL_RCC_OscConfig+0x10e>
 800390c:	4bb6      	ldr	r3, [pc, #728]	@ (8003be8 <HAL_RCC_OscConfig+0x330>)
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003914:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003918:	d155      	bne.n	80039c6 <HAL_RCC_OscConfig+0x10e>
 800391a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800391e:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003922:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8003926:	fa93 f3a3 	rbit	r3, r3
 800392a:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800392e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003932:	fab3 f383 	clz	r3, r3
 8003936:	b2db      	uxtb	r3, r3
 8003938:	095b      	lsrs	r3, r3, #5
 800393a:	b2db      	uxtb	r3, r3
 800393c:	f043 0301 	orr.w	r3, r3, #1
 8003940:	b2db      	uxtb	r3, r3
 8003942:	2b01      	cmp	r3, #1
 8003944:	d102      	bne.n	800394c <HAL_RCC_OscConfig+0x94>
 8003946:	4ba8      	ldr	r3, [pc, #672]	@ (8003be8 <HAL_RCC_OscConfig+0x330>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	e015      	b.n	8003978 <HAL_RCC_OscConfig+0xc0>
 800394c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003950:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003954:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8003958:	fa93 f3a3 	rbit	r3, r3
 800395c:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8003960:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003964:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8003968:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 800396c:	fa93 f3a3 	rbit	r3, r3
 8003970:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8003974:	4b9c      	ldr	r3, [pc, #624]	@ (8003be8 <HAL_RCC_OscConfig+0x330>)
 8003976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003978:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800397c:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8003980:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8003984:	fa92 f2a2 	rbit	r2, r2
 8003988:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 800398c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8003990:	fab2 f282 	clz	r2, r2
 8003994:	b2d2      	uxtb	r2, r2
 8003996:	f042 0220 	orr.w	r2, r2, #32
 800399a:	b2d2      	uxtb	r2, r2
 800399c:	f002 021f 	and.w	r2, r2, #31
 80039a0:	2101      	movs	r1, #1
 80039a2:	fa01 f202 	lsl.w	r2, r1, r2
 80039a6:	4013      	ands	r3, r2
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	f000 811f 	beq.w	8003bec <HAL_RCC_OscConfig+0x334>
 80039ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039b2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	f040 8116 	bne.w	8003bec <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	f000 bfaf 	b.w	8004924 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039ca:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039d6:	d106      	bne.n	80039e6 <HAL_RCC_OscConfig+0x12e>
 80039d8:	4b83      	ldr	r3, [pc, #524]	@ (8003be8 <HAL_RCC_OscConfig+0x330>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a82      	ldr	r2, [pc, #520]	@ (8003be8 <HAL_RCC_OscConfig+0x330>)
 80039de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039e2:	6013      	str	r3, [r2, #0]
 80039e4:	e036      	b.n	8003a54 <HAL_RCC_OscConfig+0x19c>
 80039e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039ea:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d10c      	bne.n	8003a10 <HAL_RCC_OscConfig+0x158>
 80039f6:	4b7c      	ldr	r3, [pc, #496]	@ (8003be8 <HAL_RCC_OscConfig+0x330>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a7b      	ldr	r2, [pc, #492]	@ (8003be8 <HAL_RCC_OscConfig+0x330>)
 80039fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a00:	6013      	str	r3, [r2, #0]
 8003a02:	4b79      	ldr	r3, [pc, #484]	@ (8003be8 <HAL_RCC_OscConfig+0x330>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a78      	ldr	r2, [pc, #480]	@ (8003be8 <HAL_RCC_OscConfig+0x330>)
 8003a08:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a0c:	6013      	str	r3, [r2, #0]
 8003a0e:	e021      	b.n	8003a54 <HAL_RCC_OscConfig+0x19c>
 8003a10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a14:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a20:	d10c      	bne.n	8003a3c <HAL_RCC_OscConfig+0x184>
 8003a22:	4b71      	ldr	r3, [pc, #452]	@ (8003be8 <HAL_RCC_OscConfig+0x330>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a70      	ldr	r2, [pc, #448]	@ (8003be8 <HAL_RCC_OscConfig+0x330>)
 8003a28:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003a2c:	6013      	str	r3, [r2, #0]
 8003a2e:	4b6e      	ldr	r3, [pc, #440]	@ (8003be8 <HAL_RCC_OscConfig+0x330>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a6d      	ldr	r2, [pc, #436]	@ (8003be8 <HAL_RCC_OscConfig+0x330>)
 8003a34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a38:	6013      	str	r3, [r2, #0]
 8003a3a:	e00b      	b.n	8003a54 <HAL_RCC_OscConfig+0x19c>
 8003a3c:	4b6a      	ldr	r3, [pc, #424]	@ (8003be8 <HAL_RCC_OscConfig+0x330>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a69      	ldr	r2, [pc, #420]	@ (8003be8 <HAL_RCC_OscConfig+0x330>)
 8003a42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a46:	6013      	str	r3, [r2, #0]
 8003a48:	4b67      	ldr	r3, [pc, #412]	@ (8003be8 <HAL_RCC_OscConfig+0x330>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a66      	ldr	r2, [pc, #408]	@ (8003be8 <HAL_RCC_OscConfig+0x330>)
 8003a4e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a52:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003a54:	4b64      	ldr	r3, [pc, #400]	@ (8003be8 <HAL_RCC_OscConfig+0x330>)
 8003a56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a58:	f023 020f 	bic.w	r2, r3, #15
 8003a5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a60:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	495f      	ldr	r1, [pc, #380]	@ (8003be8 <HAL_RCC_OscConfig+0x330>)
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a72:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d059      	beq.n	8003b32 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a7e:	f7fd fc23 	bl	80012c8 <HAL_GetTick>
 8003a82:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a86:	e00a      	b.n	8003a9e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a88:	f7fd fc1e 	bl	80012c8 <HAL_GetTick>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003a92:	1ad3      	subs	r3, r2, r3
 8003a94:	2b64      	cmp	r3, #100	@ 0x64
 8003a96:	d902      	bls.n	8003a9e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8003a98:	2303      	movs	r3, #3
 8003a9a:	f000 bf43 	b.w	8004924 <HAL_RCC_OscConfig+0x106c>
 8003a9e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003aa2:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aa6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8003aaa:	fa93 f3a3 	rbit	r3, r3
 8003aae:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8003ab2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ab6:	fab3 f383 	clz	r3, r3
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	095b      	lsrs	r3, r3, #5
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	f043 0301 	orr.w	r3, r3, #1
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d102      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x218>
 8003aca:	4b47      	ldr	r3, [pc, #284]	@ (8003be8 <HAL_RCC_OscConfig+0x330>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	e015      	b.n	8003afc <HAL_RCC_OscConfig+0x244>
 8003ad0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003ad4:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ad8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8003adc:	fa93 f3a3 	rbit	r3, r3
 8003ae0:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8003ae4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003ae8:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8003aec:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8003af0:	fa93 f3a3 	rbit	r3, r3
 8003af4:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8003af8:	4b3b      	ldr	r3, [pc, #236]	@ (8003be8 <HAL_RCC_OscConfig+0x330>)
 8003afa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003afc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003b00:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8003b04:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8003b08:	fa92 f2a2 	rbit	r2, r2
 8003b0c:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8003b10:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8003b14:	fab2 f282 	clz	r2, r2
 8003b18:	b2d2      	uxtb	r2, r2
 8003b1a:	f042 0220 	orr.w	r2, r2, #32
 8003b1e:	b2d2      	uxtb	r2, r2
 8003b20:	f002 021f 	and.w	r2, r2, #31
 8003b24:	2101      	movs	r1, #1
 8003b26:	fa01 f202 	lsl.w	r2, r1, r2
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d0ab      	beq.n	8003a88 <HAL_RCC_OscConfig+0x1d0>
 8003b30:	e05d      	b.n	8003bee <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b32:	f7fd fbc9 	bl	80012c8 <HAL_GetTick>
 8003b36:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b3a:	e00a      	b.n	8003b52 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b3c:	f7fd fbc4 	bl	80012c8 <HAL_GetTick>
 8003b40:	4602      	mov	r2, r0
 8003b42:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	2b64      	cmp	r3, #100	@ 0x64
 8003b4a:	d902      	bls.n	8003b52 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8003b4c:	2303      	movs	r3, #3
 8003b4e:	f000 bee9 	b.w	8004924 <HAL_RCC_OscConfig+0x106c>
 8003b52:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003b56:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b5a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8003b5e:	fa93 f3a3 	rbit	r3, r3
 8003b62:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8003b66:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b6a:	fab3 f383 	clz	r3, r3
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	095b      	lsrs	r3, r3, #5
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	f043 0301 	orr.w	r3, r3, #1
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d102      	bne.n	8003b84 <HAL_RCC_OscConfig+0x2cc>
 8003b7e:	4b1a      	ldr	r3, [pc, #104]	@ (8003be8 <HAL_RCC_OscConfig+0x330>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	e015      	b.n	8003bb0 <HAL_RCC_OscConfig+0x2f8>
 8003b84:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003b88:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b8c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8003b90:	fa93 f3a3 	rbit	r3, r3
 8003b94:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8003b98:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003b9c:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8003ba0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003ba4:	fa93 f3a3 	rbit	r3, r3
 8003ba8:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8003bac:	4b0e      	ldr	r3, [pc, #56]	@ (8003be8 <HAL_RCC_OscConfig+0x330>)
 8003bae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bb0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003bb4:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8003bb8:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8003bbc:	fa92 f2a2 	rbit	r2, r2
 8003bc0:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8003bc4:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8003bc8:	fab2 f282 	clz	r2, r2
 8003bcc:	b2d2      	uxtb	r2, r2
 8003bce:	f042 0220 	orr.w	r2, r2, #32
 8003bd2:	b2d2      	uxtb	r2, r2
 8003bd4:	f002 021f 	and.w	r2, r2, #31
 8003bd8:	2101      	movs	r1, #1
 8003bda:	fa01 f202 	lsl.w	r2, r1, r2
 8003bde:	4013      	ands	r3, r2
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d1ab      	bne.n	8003b3c <HAL_RCC_OscConfig+0x284>
 8003be4:	e003      	b.n	8003bee <HAL_RCC_OscConfig+0x336>
 8003be6:	bf00      	nop
 8003be8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bf2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 0302 	and.w	r3, r3, #2
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	f000 817d 	beq.w	8003efe <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003c04:	4ba6      	ldr	r3, [pc, #664]	@ (8003ea0 <HAL_RCC_OscConfig+0x5e8>)
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	f003 030c 	and.w	r3, r3, #12
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d00b      	beq.n	8003c28 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003c10:	4ba3      	ldr	r3, [pc, #652]	@ (8003ea0 <HAL_RCC_OscConfig+0x5e8>)
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	f003 030c 	and.w	r3, r3, #12
 8003c18:	2b08      	cmp	r3, #8
 8003c1a:	d172      	bne.n	8003d02 <HAL_RCC_OscConfig+0x44a>
 8003c1c:	4ba0      	ldr	r3, [pc, #640]	@ (8003ea0 <HAL_RCC_OscConfig+0x5e8>)
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d16c      	bne.n	8003d02 <HAL_RCC_OscConfig+0x44a>
 8003c28:	2302      	movs	r3, #2
 8003c2a:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c2e:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8003c32:	fa93 f3a3 	rbit	r3, r3
 8003c36:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8003c3a:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c3e:	fab3 f383 	clz	r3, r3
 8003c42:	b2db      	uxtb	r3, r3
 8003c44:	095b      	lsrs	r3, r3, #5
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	f043 0301 	orr.w	r3, r3, #1
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d102      	bne.n	8003c58 <HAL_RCC_OscConfig+0x3a0>
 8003c52:	4b93      	ldr	r3, [pc, #588]	@ (8003ea0 <HAL_RCC_OscConfig+0x5e8>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	e013      	b.n	8003c80 <HAL_RCC_OscConfig+0x3c8>
 8003c58:	2302      	movs	r3, #2
 8003c5a:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c5e:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8003c62:	fa93 f3a3 	rbit	r3, r3
 8003c66:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8003c6a:	2302      	movs	r3, #2
 8003c6c:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8003c70:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8003c74:	fa93 f3a3 	rbit	r3, r3
 8003c78:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8003c7c:	4b88      	ldr	r3, [pc, #544]	@ (8003ea0 <HAL_RCC_OscConfig+0x5e8>)
 8003c7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c80:	2202      	movs	r2, #2
 8003c82:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8003c86:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8003c8a:	fa92 f2a2 	rbit	r2, r2
 8003c8e:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8003c92:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8003c96:	fab2 f282 	clz	r2, r2
 8003c9a:	b2d2      	uxtb	r2, r2
 8003c9c:	f042 0220 	orr.w	r2, r2, #32
 8003ca0:	b2d2      	uxtb	r2, r2
 8003ca2:	f002 021f 	and.w	r2, r2, #31
 8003ca6:	2101      	movs	r1, #1
 8003ca8:	fa01 f202 	lsl.w	r2, r1, r2
 8003cac:	4013      	ands	r3, r2
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d00a      	beq.n	8003cc8 <HAL_RCC_OscConfig+0x410>
 8003cb2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cb6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	691b      	ldr	r3, [r3, #16]
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d002      	beq.n	8003cc8 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	f000 be2e 	b.w	8004924 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cc8:	4b75      	ldr	r3, [pc, #468]	@ (8003ea0 <HAL_RCC_OscConfig+0x5e8>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003cd0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cd4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	695b      	ldr	r3, [r3, #20]
 8003cdc:	21f8      	movs	r1, #248	@ 0xf8
 8003cde:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ce2:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8003ce6:	fa91 f1a1 	rbit	r1, r1
 8003cea:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8003cee:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8003cf2:	fab1 f181 	clz	r1, r1
 8003cf6:	b2c9      	uxtb	r1, r1
 8003cf8:	408b      	lsls	r3, r1
 8003cfa:	4969      	ldr	r1, [pc, #420]	@ (8003ea0 <HAL_RCC_OscConfig+0x5e8>)
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d00:	e0fd      	b.n	8003efe <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d06:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	691b      	ldr	r3, [r3, #16]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	f000 8088 	beq.w	8003e24 <HAL_RCC_OscConfig+0x56c>
 8003d14:	2301      	movs	r3, #1
 8003d16:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d1a:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8003d1e:	fa93 f3a3 	rbit	r3, r3
 8003d22:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8003d26:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d2a:	fab3 f383 	clz	r3, r3
 8003d2e:	b2db      	uxtb	r3, r3
 8003d30:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003d34:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003d38:	009b      	lsls	r3, r3, #2
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d40:	f7fd fac2 	bl	80012c8 <HAL_GetTick>
 8003d44:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d48:	e00a      	b.n	8003d60 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d4a:	f7fd fabd 	bl	80012c8 <HAL_GetTick>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	2b02      	cmp	r3, #2
 8003d58:	d902      	bls.n	8003d60 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8003d5a:	2303      	movs	r3, #3
 8003d5c:	f000 bde2 	b.w	8004924 <HAL_RCC_OscConfig+0x106c>
 8003d60:	2302      	movs	r3, #2
 8003d62:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d66:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8003d6a:	fa93 f3a3 	rbit	r3, r3
 8003d6e:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8003d72:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d76:	fab3 f383 	clz	r3, r3
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	095b      	lsrs	r3, r3, #5
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	f043 0301 	orr.w	r3, r3, #1
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d102      	bne.n	8003d90 <HAL_RCC_OscConfig+0x4d8>
 8003d8a:	4b45      	ldr	r3, [pc, #276]	@ (8003ea0 <HAL_RCC_OscConfig+0x5e8>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	e013      	b.n	8003db8 <HAL_RCC_OscConfig+0x500>
 8003d90:	2302      	movs	r3, #2
 8003d92:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d96:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8003d9a:	fa93 f3a3 	rbit	r3, r3
 8003d9e:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8003da2:	2302      	movs	r3, #2
 8003da4:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8003da8:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8003dac:	fa93 f3a3 	rbit	r3, r3
 8003db0:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8003db4:	4b3a      	ldr	r3, [pc, #232]	@ (8003ea0 <HAL_RCC_OscConfig+0x5e8>)
 8003db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003db8:	2202      	movs	r2, #2
 8003dba:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8003dbe:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8003dc2:	fa92 f2a2 	rbit	r2, r2
 8003dc6:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8003dca:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8003dce:	fab2 f282 	clz	r2, r2
 8003dd2:	b2d2      	uxtb	r2, r2
 8003dd4:	f042 0220 	orr.w	r2, r2, #32
 8003dd8:	b2d2      	uxtb	r2, r2
 8003dda:	f002 021f 	and.w	r2, r2, #31
 8003dde:	2101      	movs	r1, #1
 8003de0:	fa01 f202 	lsl.w	r2, r1, r2
 8003de4:	4013      	ands	r3, r2
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d0af      	beq.n	8003d4a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dea:	4b2d      	ldr	r3, [pc, #180]	@ (8003ea0 <HAL_RCC_OscConfig+0x5e8>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003df2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003df6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	695b      	ldr	r3, [r3, #20]
 8003dfe:	21f8      	movs	r1, #248	@ 0xf8
 8003e00:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e04:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8003e08:	fa91 f1a1 	rbit	r1, r1
 8003e0c:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8003e10:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8003e14:	fab1 f181 	clz	r1, r1
 8003e18:	b2c9      	uxtb	r1, r1
 8003e1a:	408b      	lsls	r3, r1
 8003e1c:	4920      	ldr	r1, [pc, #128]	@ (8003ea0 <HAL_RCC_OscConfig+0x5e8>)
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	600b      	str	r3, [r1, #0]
 8003e22:	e06c      	b.n	8003efe <HAL_RCC_OscConfig+0x646>
 8003e24:	2301      	movs	r3, #1
 8003e26:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e2a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003e2e:	fa93 f3a3 	rbit	r3, r3
 8003e32:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8003e36:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e3a:	fab3 f383 	clz	r3, r3
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003e44:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003e48:	009b      	lsls	r3, r3, #2
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e50:	f7fd fa3a 	bl	80012c8 <HAL_GetTick>
 8003e54:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e58:	e00a      	b.n	8003e70 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e5a:	f7fd fa35 	bl	80012c8 <HAL_GetTick>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	2b02      	cmp	r3, #2
 8003e68:	d902      	bls.n	8003e70 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	f000 bd5a 	b.w	8004924 <HAL_RCC_OscConfig+0x106c>
 8003e70:	2302      	movs	r3, #2
 8003e72:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e76:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8003e7a:	fa93 f3a3 	rbit	r3, r3
 8003e7e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8003e82:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e86:	fab3 f383 	clz	r3, r3
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	095b      	lsrs	r3, r3, #5
 8003e8e:	b2db      	uxtb	r3, r3
 8003e90:	f043 0301 	orr.w	r3, r3, #1
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d104      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x5ec>
 8003e9a:	4b01      	ldr	r3, [pc, #4]	@ (8003ea0 <HAL_RCC_OscConfig+0x5e8>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	e015      	b.n	8003ecc <HAL_RCC_OscConfig+0x614>
 8003ea0:	40021000 	.word	0x40021000
 8003ea4:	2302      	movs	r3, #2
 8003ea6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eaa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8003eae:	fa93 f3a3 	rbit	r3, r3
 8003eb2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8003eb6:	2302      	movs	r3, #2
 8003eb8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8003ebc:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003ec0:	fa93 f3a3 	rbit	r3, r3
 8003ec4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8003ec8:	4bc8      	ldr	r3, [pc, #800]	@ (80041ec <HAL_RCC_OscConfig+0x934>)
 8003eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ecc:	2202      	movs	r2, #2
 8003ece:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8003ed2:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8003ed6:	fa92 f2a2 	rbit	r2, r2
 8003eda:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8003ede:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8003ee2:	fab2 f282 	clz	r2, r2
 8003ee6:	b2d2      	uxtb	r2, r2
 8003ee8:	f042 0220 	orr.w	r2, r2, #32
 8003eec:	b2d2      	uxtb	r2, r2
 8003eee:	f002 021f 	and.w	r2, r2, #31
 8003ef2:	2101      	movs	r1, #1
 8003ef4:	fa01 f202 	lsl.w	r2, r1, r2
 8003ef8:	4013      	ands	r3, r2
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d1ad      	bne.n	8003e5a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003efe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f02:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 0308 	and.w	r3, r3, #8
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	f000 8110 	beq.w	8004134 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f18:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	699b      	ldr	r3, [r3, #24]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d079      	beq.n	8004018 <HAL_RCC_OscConfig+0x760>
 8003f24:	2301      	movs	r3, #1
 8003f26:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f2a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003f2e:	fa93 f3a3 	rbit	r3, r3
 8003f32:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8003f36:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f3a:	fab3 f383 	clz	r3, r3
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	461a      	mov	r2, r3
 8003f42:	4bab      	ldr	r3, [pc, #684]	@ (80041f0 <HAL_RCC_OscConfig+0x938>)
 8003f44:	4413      	add	r3, r2
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	461a      	mov	r2, r3
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f4e:	f7fd f9bb 	bl	80012c8 <HAL_GetTick>
 8003f52:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f56:	e00a      	b.n	8003f6e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f58:	f7fd f9b6 	bl	80012c8 <HAL_GetTick>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003f62:	1ad3      	subs	r3, r2, r3
 8003f64:	2b02      	cmp	r3, #2
 8003f66:	d902      	bls.n	8003f6e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003f68:	2303      	movs	r3, #3
 8003f6a:	f000 bcdb 	b.w	8004924 <HAL_RCC_OscConfig+0x106c>
 8003f6e:	2302      	movs	r3, #2
 8003f70:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f74:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8003f78:	fa93 f3a3 	rbit	r3, r3
 8003f7c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003f80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f84:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003f88:	2202      	movs	r2, #2
 8003f8a:	601a      	str	r2, [r3, #0]
 8003f8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f90:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	fa93 f2a3 	rbit	r2, r3
 8003f9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f9e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003fa2:	601a      	str	r2, [r3, #0]
 8003fa4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fa8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003fac:	2202      	movs	r2, #2
 8003fae:	601a      	str	r2, [r3, #0]
 8003fb0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fb4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	fa93 f2a3 	rbit	r2, r3
 8003fbe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fc2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003fc6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fc8:	4b88      	ldr	r3, [pc, #544]	@ (80041ec <HAL_RCC_OscConfig+0x934>)
 8003fca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003fcc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fd0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003fd4:	2102      	movs	r1, #2
 8003fd6:	6019      	str	r1, [r3, #0]
 8003fd8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fdc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	fa93 f1a3 	rbit	r1, r3
 8003fe6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fea:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003fee:	6019      	str	r1, [r3, #0]
  return result;
 8003ff0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ff4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	fab3 f383 	clz	r3, r3
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8004004:	b2db      	uxtb	r3, r3
 8004006:	f003 031f 	and.w	r3, r3, #31
 800400a:	2101      	movs	r1, #1
 800400c:	fa01 f303 	lsl.w	r3, r1, r3
 8004010:	4013      	ands	r3, r2
 8004012:	2b00      	cmp	r3, #0
 8004014:	d0a0      	beq.n	8003f58 <HAL_RCC_OscConfig+0x6a0>
 8004016:	e08d      	b.n	8004134 <HAL_RCC_OscConfig+0x87c>
 8004018:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800401c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004020:	2201      	movs	r2, #1
 8004022:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004024:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004028:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	fa93 f2a3 	rbit	r2, r3
 8004032:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004036:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800403a:	601a      	str	r2, [r3, #0]
  return result;
 800403c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004040:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8004044:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004046:	fab3 f383 	clz	r3, r3
 800404a:	b2db      	uxtb	r3, r3
 800404c:	461a      	mov	r2, r3
 800404e:	4b68      	ldr	r3, [pc, #416]	@ (80041f0 <HAL_RCC_OscConfig+0x938>)
 8004050:	4413      	add	r3, r2
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	461a      	mov	r2, r3
 8004056:	2300      	movs	r3, #0
 8004058:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800405a:	f7fd f935 	bl	80012c8 <HAL_GetTick>
 800405e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004062:	e00a      	b.n	800407a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004064:	f7fd f930 	bl	80012c8 <HAL_GetTick>
 8004068:	4602      	mov	r2, r0
 800406a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800406e:	1ad3      	subs	r3, r2, r3
 8004070:	2b02      	cmp	r3, #2
 8004072:	d902      	bls.n	800407a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8004074:	2303      	movs	r3, #3
 8004076:	f000 bc55 	b.w	8004924 <HAL_RCC_OscConfig+0x106c>
 800407a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800407e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8004082:	2202      	movs	r2, #2
 8004084:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004086:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800408a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	fa93 f2a3 	rbit	r2, r3
 8004094:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004098:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800409c:	601a      	str	r2, [r3, #0]
 800409e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040a2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80040a6:	2202      	movs	r2, #2
 80040a8:	601a      	str	r2, [r3, #0]
 80040aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040ae:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	fa93 f2a3 	rbit	r2, r3
 80040b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040bc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80040c0:	601a      	str	r2, [r3, #0]
 80040c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040c6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80040ca:	2202      	movs	r2, #2
 80040cc:	601a      	str	r2, [r3, #0]
 80040ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040d2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	fa93 f2a3 	rbit	r2, r3
 80040dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040e0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80040e4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040e6:	4b41      	ldr	r3, [pc, #260]	@ (80041ec <HAL_RCC_OscConfig+0x934>)
 80040e8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80040ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040ee:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80040f2:	2102      	movs	r1, #2
 80040f4:	6019      	str	r1, [r3, #0]
 80040f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040fa:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	fa93 f1a3 	rbit	r1, r3
 8004104:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004108:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800410c:	6019      	str	r1, [r3, #0]
  return result;
 800410e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004112:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	fab3 f383 	clz	r3, r3
 800411c:	b2db      	uxtb	r3, r3
 800411e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8004122:	b2db      	uxtb	r3, r3
 8004124:	f003 031f 	and.w	r3, r3, #31
 8004128:	2101      	movs	r1, #1
 800412a:	fa01 f303 	lsl.w	r3, r1, r3
 800412e:	4013      	ands	r3, r2
 8004130:	2b00      	cmp	r3, #0
 8004132:	d197      	bne.n	8004064 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004134:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004138:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 0304 	and.w	r3, r3, #4
 8004144:	2b00      	cmp	r3, #0
 8004146:	f000 81a1 	beq.w	800448c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800414a:	2300      	movs	r3, #0
 800414c:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004150:	4b26      	ldr	r3, [pc, #152]	@ (80041ec <HAL_RCC_OscConfig+0x934>)
 8004152:	69db      	ldr	r3, [r3, #28]
 8004154:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004158:	2b00      	cmp	r3, #0
 800415a:	d116      	bne.n	800418a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800415c:	4b23      	ldr	r3, [pc, #140]	@ (80041ec <HAL_RCC_OscConfig+0x934>)
 800415e:	69db      	ldr	r3, [r3, #28]
 8004160:	4a22      	ldr	r2, [pc, #136]	@ (80041ec <HAL_RCC_OscConfig+0x934>)
 8004162:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004166:	61d3      	str	r3, [r2, #28]
 8004168:	4b20      	ldr	r3, [pc, #128]	@ (80041ec <HAL_RCC_OscConfig+0x934>)
 800416a:	69db      	ldr	r3, [r3, #28]
 800416c:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8004170:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004174:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8004178:	601a      	str	r2, [r3, #0]
 800417a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800417e:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8004182:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004184:	2301      	movs	r3, #1
 8004186:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800418a:	4b1a      	ldr	r3, [pc, #104]	@ (80041f4 <HAL_RCC_OscConfig+0x93c>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004192:	2b00      	cmp	r3, #0
 8004194:	d11a      	bne.n	80041cc <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004196:	4b17      	ldr	r3, [pc, #92]	@ (80041f4 <HAL_RCC_OscConfig+0x93c>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a16      	ldr	r2, [pc, #88]	@ (80041f4 <HAL_RCC_OscConfig+0x93c>)
 800419c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041a0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041a2:	f7fd f891 	bl	80012c8 <HAL_GetTick>
 80041a6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041aa:	e009      	b.n	80041c0 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041ac:	f7fd f88c 	bl	80012c8 <HAL_GetTick>
 80041b0:	4602      	mov	r2, r0
 80041b2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80041b6:	1ad3      	subs	r3, r2, r3
 80041b8:	2b64      	cmp	r3, #100	@ 0x64
 80041ba:	d901      	bls.n	80041c0 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80041bc:	2303      	movs	r3, #3
 80041be:	e3b1      	b.n	8004924 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041c0:	4b0c      	ldr	r3, [pc, #48]	@ (80041f4 <HAL_RCC_OscConfig+0x93c>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d0ef      	beq.n	80041ac <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041d0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	68db      	ldr	r3, [r3, #12]
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d10d      	bne.n	80041f8 <HAL_RCC_OscConfig+0x940>
 80041dc:	4b03      	ldr	r3, [pc, #12]	@ (80041ec <HAL_RCC_OscConfig+0x934>)
 80041de:	6a1b      	ldr	r3, [r3, #32]
 80041e0:	4a02      	ldr	r2, [pc, #8]	@ (80041ec <HAL_RCC_OscConfig+0x934>)
 80041e2:	f043 0301 	orr.w	r3, r3, #1
 80041e6:	6213      	str	r3, [r2, #32]
 80041e8:	e03c      	b.n	8004264 <HAL_RCC_OscConfig+0x9ac>
 80041ea:	bf00      	nop
 80041ec:	40021000 	.word	0x40021000
 80041f0:	10908120 	.word	0x10908120
 80041f4:	40007000 	.word	0x40007000
 80041f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041fc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d10c      	bne.n	8004222 <HAL_RCC_OscConfig+0x96a>
 8004208:	4bc1      	ldr	r3, [pc, #772]	@ (8004510 <HAL_RCC_OscConfig+0xc58>)
 800420a:	6a1b      	ldr	r3, [r3, #32]
 800420c:	4ac0      	ldr	r2, [pc, #768]	@ (8004510 <HAL_RCC_OscConfig+0xc58>)
 800420e:	f023 0301 	bic.w	r3, r3, #1
 8004212:	6213      	str	r3, [r2, #32]
 8004214:	4bbe      	ldr	r3, [pc, #760]	@ (8004510 <HAL_RCC_OscConfig+0xc58>)
 8004216:	6a1b      	ldr	r3, [r3, #32]
 8004218:	4abd      	ldr	r2, [pc, #756]	@ (8004510 <HAL_RCC_OscConfig+0xc58>)
 800421a:	f023 0304 	bic.w	r3, r3, #4
 800421e:	6213      	str	r3, [r2, #32]
 8004220:	e020      	b.n	8004264 <HAL_RCC_OscConfig+0x9ac>
 8004222:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004226:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	2b05      	cmp	r3, #5
 8004230:	d10c      	bne.n	800424c <HAL_RCC_OscConfig+0x994>
 8004232:	4bb7      	ldr	r3, [pc, #732]	@ (8004510 <HAL_RCC_OscConfig+0xc58>)
 8004234:	6a1b      	ldr	r3, [r3, #32]
 8004236:	4ab6      	ldr	r2, [pc, #728]	@ (8004510 <HAL_RCC_OscConfig+0xc58>)
 8004238:	f043 0304 	orr.w	r3, r3, #4
 800423c:	6213      	str	r3, [r2, #32]
 800423e:	4bb4      	ldr	r3, [pc, #720]	@ (8004510 <HAL_RCC_OscConfig+0xc58>)
 8004240:	6a1b      	ldr	r3, [r3, #32]
 8004242:	4ab3      	ldr	r2, [pc, #716]	@ (8004510 <HAL_RCC_OscConfig+0xc58>)
 8004244:	f043 0301 	orr.w	r3, r3, #1
 8004248:	6213      	str	r3, [r2, #32]
 800424a:	e00b      	b.n	8004264 <HAL_RCC_OscConfig+0x9ac>
 800424c:	4bb0      	ldr	r3, [pc, #704]	@ (8004510 <HAL_RCC_OscConfig+0xc58>)
 800424e:	6a1b      	ldr	r3, [r3, #32]
 8004250:	4aaf      	ldr	r2, [pc, #700]	@ (8004510 <HAL_RCC_OscConfig+0xc58>)
 8004252:	f023 0301 	bic.w	r3, r3, #1
 8004256:	6213      	str	r3, [r2, #32]
 8004258:	4bad      	ldr	r3, [pc, #692]	@ (8004510 <HAL_RCC_OscConfig+0xc58>)
 800425a:	6a1b      	ldr	r3, [r3, #32]
 800425c:	4aac      	ldr	r2, [pc, #688]	@ (8004510 <HAL_RCC_OscConfig+0xc58>)
 800425e:	f023 0304 	bic.w	r3, r3, #4
 8004262:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004264:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004268:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	2b00      	cmp	r3, #0
 8004272:	f000 8081 	beq.w	8004378 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004276:	f7fd f827 	bl	80012c8 <HAL_GetTick>
 800427a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800427e:	e00b      	b.n	8004298 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004280:	f7fd f822 	bl	80012c8 <HAL_GetTick>
 8004284:	4602      	mov	r2, r0
 8004286:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800428a:	1ad3      	subs	r3, r2, r3
 800428c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004290:	4293      	cmp	r3, r2
 8004292:	d901      	bls.n	8004298 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8004294:	2303      	movs	r3, #3
 8004296:	e345      	b.n	8004924 <HAL_RCC_OscConfig+0x106c>
 8004298:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800429c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80042a0:	2202      	movs	r2, #2
 80042a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042a8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	fa93 f2a3 	rbit	r2, r3
 80042b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042b6:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80042ba:	601a      	str	r2, [r3, #0]
 80042bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042c0:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80042c4:	2202      	movs	r2, #2
 80042c6:	601a      	str	r2, [r3, #0]
 80042c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042cc:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	fa93 f2a3 	rbit	r2, r3
 80042d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042da:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80042de:	601a      	str	r2, [r3, #0]
  return result;
 80042e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042e4:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80042e8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042ea:	fab3 f383 	clz	r3, r3
 80042ee:	b2db      	uxtb	r3, r3
 80042f0:	095b      	lsrs	r3, r3, #5
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	f043 0302 	orr.w	r3, r3, #2
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	2b02      	cmp	r3, #2
 80042fc:	d102      	bne.n	8004304 <HAL_RCC_OscConfig+0xa4c>
 80042fe:	4b84      	ldr	r3, [pc, #528]	@ (8004510 <HAL_RCC_OscConfig+0xc58>)
 8004300:	6a1b      	ldr	r3, [r3, #32]
 8004302:	e013      	b.n	800432c <HAL_RCC_OscConfig+0xa74>
 8004304:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004308:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800430c:	2202      	movs	r2, #2
 800430e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004310:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004314:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	fa93 f2a3 	rbit	r2, r3
 800431e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004322:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8004326:	601a      	str	r2, [r3, #0]
 8004328:	4b79      	ldr	r3, [pc, #484]	@ (8004510 <HAL_RCC_OscConfig+0xc58>)
 800432a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800432c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004330:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8004334:	2102      	movs	r1, #2
 8004336:	6011      	str	r1, [r2, #0]
 8004338:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800433c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8004340:	6812      	ldr	r2, [r2, #0]
 8004342:	fa92 f1a2 	rbit	r1, r2
 8004346:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800434a:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800434e:	6011      	str	r1, [r2, #0]
  return result;
 8004350:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004354:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8004358:	6812      	ldr	r2, [r2, #0]
 800435a:	fab2 f282 	clz	r2, r2
 800435e:	b2d2      	uxtb	r2, r2
 8004360:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004364:	b2d2      	uxtb	r2, r2
 8004366:	f002 021f 	and.w	r2, r2, #31
 800436a:	2101      	movs	r1, #1
 800436c:	fa01 f202 	lsl.w	r2, r1, r2
 8004370:	4013      	ands	r3, r2
 8004372:	2b00      	cmp	r3, #0
 8004374:	d084      	beq.n	8004280 <HAL_RCC_OscConfig+0x9c8>
 8004376:	e07f      	b.n	8004478 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004378:	f7fc ffa6 	bl	80012c8 <HAL_GetTick>
 800437c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004380:	e00b      	b.n	800439a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004382:	f7fc ffa1 	bl	80012c8 <HAL_GetTick>
 8004386:	4602      	mov	r2, r0
 8004388:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800438c:	1ad3      	subs	r3, r2, r3
 800438e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004392:	4293      	cmp	r3, r2
 8004394:	d901      	bls.n	800439a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8004396:	2303      	movs	r3, #3
 8004398:	e2c4      	b.n	8004924 <HAL_RCC_OscConfig+0x106c>
 800439a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800439e:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80043a2:	2202      	movs	r2, #2
 80043a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043aa:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	fa93 f2a3 	rbit	r2, r3
 80043b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043b8:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80043bc:	601a      	str	r2, [r3, #0]
 80043be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043c2:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80043c6:	2202      	movs	r2, #2
 80043c8:	601a      	str	r2, [r3, #0]
 80043ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043ce:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	fa93 f2a3 	rbit	r2, r3
 80043d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043dc:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80043e0:	601a      	str	r2, [r3, #0]
  return result;
 80043e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043e6:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80043ea:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043ec:	fab3 f383 	clz	r3, r3
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	095b      	lsrs	r3, r3, #5
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	f043 0302 	orr.w	r3, r3, #2
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	2b02      	cmp	r3, #2
 80043fe:	d102      	bne.n	8004406 <HAL_RCC_OscConfig+0xb4e>
 8004400:	4b43      	ldr	r3, [pc, #268]	@ (8004510 <HAL_RCC_OscConfig+0xc58>)
 8004402:	6a1b      	ldr	r3, [r3, #32]
 8004404:	e013      	b.n	800442e <HAL_RCC_OscConfig+0xb76>
 8004406:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800440a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800440e:	2202      	movs	r2, #2
 8004410:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004412:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004416:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	fa93 f2a3 	rbit	r2, r3
 8004420:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004424:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8004428:	601a      	str	r2, [r3, #0]
 800442a:	4b39      	ldr	r3, [pc, #228]	@ (8004510 <HAL_RCC_OscConfig+0xc58>)
 800442c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800442e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004432:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8004436:	2102      	movs	r1, #2
 8004438:	6011      	str	r1, [r2, #0]
 800443a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800443e:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8004442:	6812      	ldr	r2, [r2, #0]
 8004444:	fa92 f1a2 	rbit	r1, r2
 8004448:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800444c:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8004450:	6011      	str	r1, [r2, #0]
  return result;
 8004452:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004456:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800445a:	6812      	ldr	r2, [r2, #0]
 800445c:	fab2 f282 	clz	r2, r2
 8004460:	b2d2      	uxtb	r2, r2
 8004462:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004466:	b2d2      	uxtb	r2, r2
 8004468:	f002 021f 	and.w	r2, r2, #31
 800446c:	2101      	movs	r1, #1
 800446e:	fa01 f202 	lsl.w	r2, r1, r2
 8004472:	4013      	ands	r3, r2
 8004474:	2b00      	cmp	r3, #0
 8004476:	d184      	bne.n	8004382 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004478:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 800447c:	2b01      	cmp	r3, #1
 800447e:	d105      	bne.n	800448c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004480:	4b23      	ldr	r3, [pc, #140]	@ (8004510 <HAL_RCC_OscConfig+0xc58>)
 8004482:	69db      	ldr	r3, [r3, #28]
 8004484:	4a22      	ldr	r2, [pc, #136]	@ (8004510 <HAL_RCC_OscConfig+0xc58>)
 8004486:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800448a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800448c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004490:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	69db      	ldr	r3, [r3, #28]
 8004498:	2b00      	cmp	r3, #0
 800449a:	f000 8242 	beq.w	8004922 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800449e:	4b1c      	ldr	r3, [pc, #112]	@ (8004510 <HAL_RCC_OscConfig+0xc58>)
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	f003 030c 	and.w	r3, r3, #12
 80044a6:	2b08      	cmp	r3, #8
 80044a8:	f000 8213 	beq.w	80048d2 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044b0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	69db      	ldr	r3, [r3, #28]
 80044b8:	2b02      	cmp	r3, #2
 80044ba:	f040 8162 	bne.w	8004782 <HAL_RCC_OscConfig+0xeca>
 80044be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044c2:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80044c6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80044ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044d0:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	fa93 f2a3 	rbit	r2, r3
 80044da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044de:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80044e2:	601a      	str	r2, [r3, #0]
  return result;
 80044e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044e8:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80044ec:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044ee:	fab3 f383 	clz	r3, r3
 80044f2:	b2db      	uxtb	r3, r3
 80044f4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80044f8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80044fc:	009b      	lsls	r3, r3, #2
 80044fe:	461a      	mov	r2, r3
 8004500:	2300      	movs	r3, #0
 8004502:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004504:	f7fc fee0 	bl	80012c8 <HAL_GetTick>
 8004508:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800450c:	e00c      	b.n	8004528 <HAL_RCC_OscConfig+0xc70>
 800450e:	bf00      	nop
 8004510:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004514:	f7fc fed8 	bl	80012c8 <HAL_GetTick>
 8004518:	4602      	mov	r2, r0
 800451a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800451e:	1ad3      	subs	r3, r2, r3
 8004520:	2b02      	cmp	r3, #2
 8004522:	d901      	bls.n	8004528 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8004524:	2303      	movs	r3, #3
 8004526:	e1fd      	b.n	8004924 <HAL_RCC_OscConfig+0x106c>
 8004528:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800452c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8004530:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004534:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004536:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800453a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	fa93 f2a3 	rbit	r2, r3
 8004544:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004548:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800454c:	601a      	str	r2, [r3, #0]
  return result;
 800454e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004552:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8004556:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004558:	fab3 f383 	clz	r3, r3
 800455c:	b2db      	uxtb	r3, r3
 800455e:	095b      	lsrs	r3, r3, #5
 8004560:	b2db      	uxtb	r3, r3
 8004562:	f043 0301 	orr.w	r3, r3, #1
 8004566:	b2db      	uxtb	r3, r3
 8004568:	2b01      	cmp	r3, #1
 800456a:	d102      	bne.n	8004572 <HAL_RCC_OscConfig+0xcba>
 800456c:	4bb0      	ldr	r3, [pc, #704]	@ (8004830 <HAL_RCC_OscConfig+0xf78>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	e027      	b.n	80045c2 <HAL_RCC_OscConfig+0xd0a>
 8004572:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004576:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800457a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800457e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004580:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004584:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	fa93 f2a3 	rbit	r2, r3
 800458e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004592:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8004596:	601a      	str	r2, [r3, #0]
 8004598:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800459c:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80045a0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80045a4:	601a      	str	r2, [r3, #0]
 80045a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045aa:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	fa93 f2a3 	rbit	r2, r3
 80045b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045b8:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80045bc:	601a      	str	r2, [r3, #0]
 80045be:	4b9c      	ldr	r3, [pc, #624]	@ (8004830 <HAL_RCC_OscConfig+0xf78>)
 80045c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045c2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80045c6:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80045ca:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80045ce:	6011      	str	r1, [r2, #0]
 80045d0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80045d4:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80045d8:	6812      	ldr	r2, [r2, #0]
 80045da:	fa92 f1a2 	rbit	r1, r2
 80045de:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80045e2:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80045e6:	6011      	str	r1, [r2, #0]
  return result;
 80045e8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80045ec:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80045f0:	6812      	ldr	r2, [r2, #0]
 80045f2:	fab2 f282 	clz	r2, r2
 80045f6:	b2d2      	uxtb	r2, r2
 80045f8:	f042 0220 	orr.w	r2, r2, #32
 80045fc:	b2d2      	uxtb	r2, r2
 80045fe:	f002 021f 	and.w	r2, r2, #31
 8004602:	2101      	movs	r1, #1
 8004604:	fa01 f202 	lsl.w	r2, r1, r2
 8004608:	4013      	ands	r3, r2
 800460a:	2b00      	cmp	r3, #0
 800460c:	d182      	bne.n	8004514 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800460e:	4b88      	ldr	r3, [pc, #544]	@ (8004830 <HAL_RCC_OscConfig+0xf78>)
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004616:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800461a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004622:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004626:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	6a1b      	ldr	r3, [r3, #32]
 800462e:	430b      	orrs	r3, r1
 8004630:	497f      	ldr	r1, [pc, #508]	@ (8004830 <HAL_RCC_OscConfig+0xf78>)
 8004632:	4313      	orrs	r3, r2
 8004634:	604b      	str	r3, [r1, #4]
 8004636:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800463a:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800463e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004642:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004644:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004648:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	fa93 f2a3 	rbit	r2, r3
 8004652:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004656:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800465a:	601a      	str	r2, [r3, #0]
  return result;
 800465c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004660:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8004664:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004666:	fab3 f383 	clz	r3, r3
 800466a:	b2db      	uxtb	r3, r3
 800466c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004670:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004674:	009b      	lsls	r3, r3, #2
 8004676:	461a      	mov	r2, r3
 8004678:	2301      	movs	r3, #1
 800467a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800467c:	f7fc fe24 	bl	80012c8 <HAL_GetTick>
 8004680:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004684:	e009      	b.n	800469a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004686:	f7fc fe1f 	bl	80012c8 <HAL_GetTick>
 800468a:	4602      	mov	r2, r0
 800468c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004690:	1ad3      	subs	r3, r2, r3
 8004692:	2b02      	cmp	r3, #2
 8004694:	d901      	bls.n	800469a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8004696:	2303      	movs	r3, #3
 8004698:	e144      	b.n	8004924 <HAL_RCC_OscConfig+0x106c>
 800469a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800469e:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80046a2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80046a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046ac:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	fa93 f2a3 	rbit	r2, r3
 80046b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046ba:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80046be:	601a      	str	r2, [r3, #0]
  return result;
 80046c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046c4:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80046c8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80046ca:	fab3 f383 	clz	r3, r3
 80046ce:	b2db      	uxtb	r3, r3
 80046d0:	095b      	lsrs	r3, r3, #5
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	f043 0301 	orr.w	r3, r3, #1
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d102      	bne.n	80046e4 <HAL_RCC_OscConfig+0xe2c>
 80046de:	4b54      	ldr	r3, [pc, #336]	@ (8004830 <HAL_RCC_OscConfig+0xf78>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	e027      	b.n	8004734 <HAL_RCC_OscConfig+0xe7c>
 80046e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046e8:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80046ec:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80046f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046f6:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	fa93 f2a3 	rbit	r2, r3
 8004700:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004704:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8004708:	601a      	str	r2, [r3, #0]
 800470a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800470e:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8004712:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004716:	601a      	str	r2, [r3, #0]
 8004718:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800471c:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	fa93 f2a3 	rbit	r2, r3
 8004726:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800472a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800472e:	601a      	str	r2, [r3, #0]
 8004730:	4b3f      	ldr	r3, [pc, #252]	@ (8004830 <HAL_RCC_OscConfig+0xf78>)
 8004732:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004734:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004738:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800473c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004740:	6011      	str	r1, [r2, #0]
 8004742:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004746:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800474a:	6812      	ldr	r2, [r2, #0]
 800474c:	fa92 f1a2 	rbit	r1, r2
 8004750:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004754:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8004758:	6011      	str	r1, [r2, #0]
  return result;
 800475a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800475e:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8004762:	6812      	ldr	r2, [r2, #0]
 8004764:	fab2 f282 	clz	r2, r2
 8004768:	b2d2      	uxtb	r2, r2
 800476a:	f042 0220 	orr.w	r2, r2, #32
 800476e:	b2d2      	uxtb	r2, r2
 8004770:	f002 021f 	and.w	r2, r2, #31
 8004774:	2101      	movs	r1, #1
 8004776:	fa01 f202 	lsl.w	r2, r1, r2
 800477a:	4013      	ands	r3, r2
 800477c:	2b00      	cmp	r3, #0
 800477e:	d082      	beq.n	8004686 <HAL_RCC_OscConfig+0xdce>
 8004780:	e0cf      	b.n	8004922 <HAL_RCC_OscConfig+0x106a>
 8004782:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004786:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800478a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800478e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004790:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004794:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	fa93 f2a3 	rbit	r2, r3
 800479e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047a2:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80047a6:	601a      	str	r2, [r3, #0]
  return result;
 80047a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047ac:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80047b0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047b2:	fab3 f383 	clz	r3, r3
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80047bc:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80047c0:	009b      	lsls	r3, r3, #2
 80047c2:	461a      	mov	r2, r3
 80047c4:	2300      	movs	r3, #0
 80047c6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047c8:	f7fc fd7e 	bl	80012c8 <HAL_GetTick>
 80047cc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047d0:	e009      	b.n	80047e6 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047d2:	f7fc fd79 	bl	80012c8 <HAL_GetTick>
 80047d6:	4602      	mov	r2, r0
 80047d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	2b02      	cmp	r3, #2
 80047e0:	d901      	bls.n	80047e6 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80047e2:	2303      	movs	r3, #3
 80047e4:	e09e      	b.n	8004924 <HAL_RCC_OscConfig+0x106c>
 80047e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047ea:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80047ee:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80047f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047f8:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	fa93 f2a3 	rbit	r2, r3
 8004802:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004806:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800480a:	601a      	str	r2, [r3, #0]
  return result;
 800480c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004810:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8004814:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004816:	fab3 f383 	clz	r3, r3
 800481a:	b2db      	uxtb	r3, r3
 800481c:	095b      	lsrs	r3, r3, #5
 800481e:	b2db      	uxtb	r3, r3
 8004820:	f043 0301 	orr.w	r3, r3, #1
 8004824:	b2db      	uxtb	r3, r3
 8004826:	2b01      	cmp	r3, #1
 8004828:	d104      	bne.n	8004834 <HAL_RCC_OscConfig+0xf7c>
 800482a:	4b01      	ldr	r3, [pc, #4]	@ (8004830 <HAL_RCC_OscConfig+0xf78>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	e029      	b.n	8004884 <HAL_RCC_OscConfig+0xfcc>
 8004830:	40021000 	.word	0x40021000
 8004834:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004838:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800483c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004840:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004842:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004846:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	fa93 f2a3 	rbit	r2, r3
 8004850:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004854:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8004858:	601a      	str	r2, [r3, #0]
 800485a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800485e:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8004862:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004866:	601a      	str	r2, [r3, #0]
 8004868:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800486c:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	fa93 f2a3 	rbit	r2, r3
 8004876:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800487a:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800487e:	601a      	str	r2, [r3, #0]
 8004880:	4b2b      	ldr	r3, [pc, #172]	@ (8004930 <HAL_RCC_OscConfig+0x1078>)
 8004882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004884:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004888:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800488c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004890:	6011      	str	r1, [r2, #0]
 8004892:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004896:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800489a:	6812      	ldr	r2, [r2, #0]
 800489c:	fa92 f1a2 	rbit	r1, r2
 80048a0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80048a4:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80048a8:	6011      	str	r1, [r2, #0]
  return result;
 80048aa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80048ae:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80048b2:	6812      	ldr	r2, [r2, #0]
 80048b4:	fab2 f282 	clz	r2, r2
 80048b8:	b2d2      	uxtb	r2, r2
 80048ba:	f042 0220 	orr.w	r2, r2, #32
 80048be:	b2d2      	uxtb	r2, r2
 80048c0:	f002 021f 	and.w	r2, r2, #31
 80048c4:	2101      	movs	r1, #1
 80048c6:	fa01 f202 	lsl.w	r2, r1, r2
 80048ca:	4013      	ands	r3, r2
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d180      	bne.n	80047d2 <HAL_RCC_OscConfig+0xf1a>
 80048d0:	e027      	b.n	8004922 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80048d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048d6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	69db      	ldr	r3, [r3, #28]
 80048de:	2b01      	cmp	r3, #1
 80048e0:	d101      	bne.n	80048e6 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e01e      	b.n	8004924 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80048e6:	4b12      	ldr	r3, [pc, #72]	@ (8004930 <HAL_RCC_OscConfig+0x1078>)
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80048ee:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80048f2:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80048f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048fa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	6a1b      	ldr	r3, [r3, #32]
 8004902:	429a      	cmp	r2, r3
 8004904:	d10b      	bne.n	800491e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004906:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800490a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800490e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004912:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800491a:	429a      	cmp	r2, r3
 800491c:	d001      	beq.n	8004922 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	e000      	b.n	8004924 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8004922:	2300      	movs	r3, #0
}
 8004924:	4618      	mov	r0, r3
 8004926:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}
 800492e:	bf00      	nop
 8004930:	40021000 	.word	0x40021000

08004934 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b09e      	sub	sp, #120	@ 0x78
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
 800493c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800493e:	2300      	movs	r3, #0
 8004940:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d101      	bne.n	800494c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	e162      	b.n	8004c12 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800494c:	4b90      	ldr	r3, [pc, #576]	@ (8004b90 <HAL_RCC_ClockConfig+0x25c>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f003 0307 	and.w	r3, r3, #7
 8004954:	683a      	ldr	r2, [r7, #0]
 8004956:	429a      	cmp	r2, r3
 8004958:	d910      	bls.n	800497c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800495a:	4b8d      	ldr	r3, [pc, #564]	@ (8004b90 <HAL_RCC_ClockConfig+0x25c>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f023 0207 	bic.w	r2, r3, #7
 8004962:	498b      	ldr	r1, [pc, #556]	@ (8004b90 <HAL_RCC_ClockConfig+0x25c>)
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	4313      	orrs	r3, r2
 8004968:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800496a:	4b89      	ldr	r3, [pc, #548]	@ (8004b90 <HAL_RCC_ClockConfig+0x25c>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f003 0307 	and.w	r3, r3, #7
 8004972:	683a      	ldr	r2, [r7, #0]
 8004974:	429a      	cmp	r2, r3
 8004976:	d001      	beq.n	800497c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004978:	2301      	movs	r3, #1
 800497a:	e14a      	b.n	8004c12 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f003 0302 	and.w	r3, r3, #2
 8004984:	2b00      	cmp	r3, #0
 8004986:	d008      	beq.n	800499a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004988:	4b82      	ldr	r3, [pc, #520]	@ (8004b94 <HAL_RCC_ClockConfig+0x260>)
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	497f      	ldr	r1, [pc, #508]	@ (8004b94 <HAL_RCC_ClockConfig+0x260>)
 8004996:	4313      	orrs	r3, r2
 8004998:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 0301 	and.w	r3, r3, #1
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	f000 80dc 	beq.w	8004b60 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d13c      	bne.n	8004a2a <HAL_RCC_ClockConfig+0xf6>
 80049b0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80049b4:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049b6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80049b8:	fa93 f3a3 	rbit	r3, r3
 80049bc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80049be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049c0:	fab3 f383 	clz	r3, r3
 80049c4:	b2db      	uxtb	r3, r3
 80049c6:	095b      	lsrs	r3, r3, #5
 80049c8:	b2db      	uxtb	r3, r3
 80049ca:	f043 0301 	orr.w	r3, r3, #1
 80049ce:	b2db      	uxtb	r3, r3
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d102      	bne.n	80049da <HAL_RCC_ClockConfig+0xa6>
 80049d4:	4b6f      	ldr	r3, [pc, #444]	@ (8004b94 <HAL_RCC_ClockConfig+0x260>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	e00f      	b.n	80049fa <HAL_RCC_ClockConfig+0xc6>
 80049da:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80049de:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049e0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80049e2:	fa93 f3a3 	rbit	r3, r3
 80049e6:	667b      	str	r3, [r7, #100]	@ 0x64
 80049e8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80049ec:	663b      	str	r3, [r7, #96]	@ 0x60
 80049ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80049f0:	fa93 f3a3 	rbit	r3, r3
 80049f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80049f6:	4b67      	ldr	r3, [pc, #412]	@ (8004b94 <HAL_RCC_ClockConfig+0x260>)
 80049f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049fa:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80049fe:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004a00:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004a02:	fa92 f2a2 	rbit	r2, r2
 8004a06:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8004a08:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004a0a:	fab2 f282 	clz	r2, r2
 8004a0e:	b2d2      	uxtb	r2, r2
 8004a10:	f042 0220 	orr.w	r2, r2, #32
 8004a14:	b2d2      	uxtb	r2, r2
 8004a16:	f002 021f 	and.w	r2, r2, #31
 8004a1a:	2101      	movs	r1, #1
 8004a1c:	fa01 f202 	lsl.w	r2, r1, r2
 8004a20:	4013      	ands	r3, r2
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d17b      	bne.n	8004b1e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e0f3      	b.n	8004c12 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	2b02      	cmp	r3, #2
 8004a30:	d13c      	bne.n	8004aac <HAL_RCC_ClockConfig+0x178>
 8004a32:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004a36:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a3a:	fa93 f3a3 	rbit	r3, r3
 8004a3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004a40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a42:	fab3 f383 	clz	r3, r3
 8004a46:	b2db      	uxtb	r3, r3
 8004a48:	095b      	lsrs	r3, r3, #5
 8004a4a:	b2db      	uxtb	r3, r3
 8004a4c:	f043 0301 	orr.w	r3, r3, #1
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d102      	bne.n	8004a5c <HAL_RCC_ClockConfig+0x128>
 8004a56:	4b4f      	ldr	r3, [pc, #316]	@ (8004b94 <HAL_RCC_ClockConfig+0x260>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	e00f      	b.n	8004a7c <HAL_RCC_ClockConfig+0x148>
 8004a5c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004a60:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a64:	fa93 f3a3 	rbit	r3, r3
 8004a68:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a6a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004a6e:	643b      	str	r3, [r7, #64]	@ 0x40
 8004a70:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a72:	fa93 f3a3 	rbit	r3, r3
 8004a76:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004a78:	4b46      	ldr	r3, [pc, #280]	@ (8004b94 <HAL_RCC_ClockConfig+0x260>)
 8004a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a7c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004a80:	63ba      	str	r2, [r7, #56]	@ 0x38
 8004a82:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004a84:	fa92 f2a2 	rbit	r2, r2
 8004a88:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8004a8a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004a8c:	fab2 f282 	clz	r2, r2
 8004a90:	b2d2      	uxtb	r2, r2
 8004a92:	f042 0220 	orr.w	r2, r2, #32
 8004a96:	b2d2      	uxtb	r2, r2
 8004a98:	f002 021f 	and.w	r2, r2, #31
 8004a9c:	2101      	movs	r1, #1
 8004a9e:	fa01 f202 	lsl.w	r2, r1, r2
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d13a      	bne.n	8004b1e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	e0b2      	b.n	8004c12 <HAL_RCC_ClockConfig+0x2de>
 8004aac:	2302      	movs	r3, #2
 8004aae:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ab2:	fa93 f3a3 	rbit	r3, r3
 8004ab6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004ab8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004aba:	fab3 f383 	clz	r3, r3
 8004abe:	b2db      	uxtb	r3, r3
 8004ac0:	095b      	lsrs	r3, r3, #5
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	f043 0301 	orr.w	r3, r3, #1
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	d102      	bne.n	8004ad4 <HAL_RCC_ClockConfig+0x1a0>
 8004ace:	4b31      	ldr	r3, [pc, #196]	@ (8004b94 <HAL_RCC_ClockConfig+0x260>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	e00d      	b.n	8004af0 <HAL_RCC_ClockConfig+0x1bc>
 8004ad4:	2302      	movs	r3, #2
 8004ad6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ad8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ada:	fa93 f3a3 	rbit	r3, r3
 8004ade:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ae0:	2302      	movs	r3, #2
 8004ae2:	623b      	str	r3, [r7, #32]
 8004ae4:	6a3b      	ldr	r3, [r7, #32]
 8004ae6:	fa93 f3a3 	rbit	r3, r3
 8004aea:	61fb      	str	r3, [r7, #28]
 8004aec:	4b29      	ldr	r3, [pc, #164]	@ (8004b94 <HAL_RCC_ClockConfig+0x260>)
 8004aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004af0:	2202      	movs	r2, #2
 8004af2:	61ba      	str	r2, [r7, #24]
 8004af4:	69ba      	ldr	r2, [r7, #24]
 8004af6:	fa92 f2a2 	rbit	r2, r2
 8004afa:	617a      	str	r2, [r7, #20]
  return result;
 8004afc:	697a      	ldr	r2, [r7, #20]
 8004afe:	fab2 f282 	clz	r2, r2
 8004b02:	b2d2      	uxtb	r2, r2
 8004b04:	f042 0220 	orr.w	r2, r2, #32
 8004b08:	b2d2      	uxtb	r2, r2
 8004b0a:	f002 021f 	and.w	r2, r2, #31
 8004b0e:	2101      	movs	r1, #1
 8004b10:	fa01 f202 	lsl.w	r2, r1, r2
 8004b14:	4013      	ands	r3, r2
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d101      	bne.n	8004b1e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e079      	b.n	8004c12 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b1e:	4b1d      	ldr	r3, [pc, #116]	@ (8004b94 <HAL_RCC_ClockConfig+0x260>)
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	f023 0203 	bic.w	r2, r3, #3
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	491a      	ldr	r1, [pc, #104]	@ (8004b94 <HAL_RCC_ClockConfig+0x260>)
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b30:	f7fc fbca 	bl	80012c8 <HAL_GetTick>
 8004b34:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b36:	e00a      	b.n	8004b4e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b38:	f7fc fbc6 	bl	80012c8 <HAL_GetTick>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004b40:	1ad3      	subs	r3, r2, r3
 8004b42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d901      	bls.n	8004b4e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004b4a:	2303      	movs	r3, #3
 8004b4c:	e061      	b.n	8004c12 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b4e:	4b11      	ldr	r3, [pc, #68]	@ (8004b94 <HAL_RCC_ClockConfig+0x260>)
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	f003 020c 	and.w	r2, r3, #12
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	009b      	lsls	r3, r3, #2
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d1eb      	bne.n	8004b38 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b60:	4b0b      	ldr	r3, [pc, #44]	@ (8004b90 <HAL_RCC_ClockConfig+0x25c>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 0307 	and.w	r3, r3, #7
 8004b68:	683a      	ldr	r2, [r7, #0]
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	d214      	bcs.n	8004b98 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b6e:	4b08      	ldr	r3, [pc, #32]	@ (8004b90 <HAL_RCC_ClockConfig+0x25c>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f023 0207 	bic.w	r2, r3, #7
 8004b76:	4906      	ldr	r1, [pc, #24]	@ (8004b90 <HAL_RCC_ClockConfig+0x25c>)
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b7e:	4b04      	ldr	r3, [pc, #16]	@ (8004b90 <HAL_RCC_ClockConfig+0x25c>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 0307 	and.w	r3, r3, #7
 8004b86:	683a      	ldr	r2, [r7, #0]
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	d005      	beq.n	8004b98 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	e040      	b.n	8004c12 <HAL_RCC_ClockConfig+0x2de>
 8004b90:	40022000 	.word	0x40022000
 8004b94:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f003 0304 	and.w	r3, r3, #4
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d008      	beq.n	8004bb6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ba4:	4b1d      	ldr	r3, [pc, #116]	@ (8004c1c <HAL_RCC_ClockConfig+0x2e8>)
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	68db      	ldr	r3, [r3, #12]
 8004bb0:	491a      	ldr	r1, [pc, #104]	@ (8004c1c <HAL_RCC_ClockConfig+0x2e8>)
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f003 0308 	and.w	r3, r3, #8
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d009      	beq.n	8004bd6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004bc2:	4b16      	ldr	r3, [pc, #88]	@ (8004c1c <HAL_RCC_ClockConfig+0x2e8>)
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	691b      	ldr	r3, [r3, #16]
 8004bce:	00db      	lsls	r3, r3, #3
 8004bd0:	4912      	ldr	r1, [pc, #72]	@ (8004c1c <HAL_RCC_ClockConfig+0x2e8>)
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004bd6:	f000 f829 	bl	8004c2c <HAL_RCC_GetSysClockFreq>
 8004bda:	4601      	mov	r1, r0
 8004bdc:	4b0f      	ldr	r3, [pc, #60]	@ (8004c1c <HAL_RCC_ClockConfig+0x2e8>)
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004be4:	22f0      	movs	r2, #240	@ 0xf0
 8004be6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004be8:	693a      	ldr	r2, [r7, #16]
 8004bea:	fa92 f2a2 	rbit	r2, r2
 8004bee:	60fa      	str	r2, [r7, #12]
  return result;
 8004bf0:	68fa      	ldr	r2, [r7, #12]
 8004bf2:	fab2 f282 	clz	r2, r2
 8004bf6:	b2d2      	uxtb	r2, r2
 8004bf8:	40d3      	lsrs	r3, r2
 8004bfa:	4a09      	ldr	r2, [pc, #36]	@ (8004c20 <HAL_RCC_ClockConfig+0x2ec>)
 8004bfc:	5cd3      	ldrb	r3, [r2, r3]
 8004bfe:	fa21 f303 	lsr.w	r3, r1, r3
 8004c02:	4a08      	ldr	r2, [pc, #32]	@ (8004c24 <HAL_RCC_ClockConfig+0x2f0>)
 8004c04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004c06:	4b08      	ldr	r3, [pc, #32]	@ (8004c28 <HAL_RCC_ClockConfig+0x2f4>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f7fc fb18 	bl	8001240 <HAL_InitTick>
  
  return HAL_OK;
 8004c10:	2300      	movs	r3, #0
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	3778      	adds	r7, #120	@ 0x78
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}
 8004c1a:	bf00      	nop
 8004c1c:	40021000 	.word	0x40021000
 8004c20:	08006cac 	.word	0x08006cac
 8004c24:	20000000 	.word	0x20000000
 8004c28:	20000004 	.word	0x20000004

08004c2c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b087      	sub	sp, #28
 8004c30:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004c32:	2300      	movs	r3, #0
 8004c34:	60fb      	str	r3, [r7, #12]
 8004c36:	2300      	movs	r3, #0
 8004c38:	60bb      	str	r3, [r7, #8]
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	617b      	str	r3, [r7, #20]
 8004c3e:	2300      	movs	r3, #0
 8004c40:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004c42:	2300      	movs	r3, #0
 8004c44:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8004c46:	4b1e      	ldr	r3, [pc, #120]	@ (8004cc0 <HAL_RCC_GetSysClockFreq+0x94>)
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	f003 030c 	and.w	r3, r3, #12
 8004c52:	2b04      	cmp	r3, #4
 8004c54:	d002      	beq.n	8004c5c <HAL_RCC_GetSysClockFreq+0x30>
 8004c56:	2b08      	cmp	r3, #8
 8004c58:	d003      	beq.n	8004c62 <HAL_RCC_GetSysClockFreq+0x36>
 8004c5a:	e026      	b.n	8004caa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004c5c:	4b19      	ldr	r3, [pc, #100]	@ (8004cc4 <HAL_RCC_GetSysClockFreq+0x98>)
 8004c5e:	613b      	str	r3, [r7, #16]
      break;
 8004c60:	e026      	b.n	8004cb0 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	0c9b      	lsrs	r3, r3, #18
 8004c66:	f003 030f 	and.w	r3, r3, #15
 8004c6a:	4a17      	ldr	r2, [pc, #92]	@ (8004cc8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004c6c:	5cd3      	ldrb	r3, [r2, r3]
 8004c6e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8004c70:	4b13      	ldr	r3, [pc, #76]	@ (8004cc0 <HAL_RCC_GetSysClockFreq+0x94>)
 8004c72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c74:	f003 030f 	and.w	r3, r3, #15
 8004c78:	4a14      	ldr	r2, [pc, #80]	@ (8004ccc <HAL_RCC_GetSysClockFreq+0xa0>)
 8004c7a:	5cd3      	ldrb	r3, [r2, r3]
 8004c7c:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d008      	beq.n	8004c9a <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004c88:	4a0e      	ldr	r2, [pc, #56]	@ (8004cc4 <HAL_RCC_GetSysClockFreq+0x98>)
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	fb02 f303 	mul.w	r3, r2, r3
 8004c96:	617b      	str	r3, [r7, #20]
 8004c98:	e004      	b.n	8004ca4 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	4a0c      	ldr	r2, [pc, #48]	@ (8004cd0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004c9e:	fb02 f303 	mul.w	r3, r2, r3
 8004ca2:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	613b      	str	r3, [r7, #16]
      break;
 8004ca8:	e002      	b.n	8004cb0 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004caa:	4b06      	ldr	r3, [pc, #24]	@ (8004cc4 <HAL_RCC_GetSysClockFreq+0x98>)
 8004cac:	613b      	str	r3, [r7, #16]
      break;
 8004cae:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004cb0:	693b      	ldr	r3, [r7, #16]
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	371c      	adds	r7, #28
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbc:	4770      	bx	lr
 8004cbe:	bf00      	nop
 8004cc0:	40021000 	.word	0x40021000
 8004cc4:	007a1200 	.word	0x007a1200
 8004cc8:	08006cc4 	.word	0x08006cc4
 8004ccc:	08006cd4 	.word	0x08006cd4
 8004cd0:	003d0900 	.word	0x003d0900

08004cd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004cd8:	4b03      	ldr	r3, [pc, #12]	@ (8004ce8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004cda:	681b      	ldr	r3, [r3, #0]
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce4:	4770      	bx	lr
 8004ce6:	bf00      	nop
 8004ce8:	20000000 	.word	0x20000000

08004cec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b082      	sub	sp, #8
 8004cf0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004cf2:	f7ff ffef 	bl	8004cd4 <HAL_RCC_GetHCLKFreq>
 8004cf6:	4601      	mov	r1, r0
 8004cf8:	4b0b      	ldr	r3, [pc, #44]	@ (8004d28 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004d00:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8004d04:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	fa92 f2a2 	rbit	r2, r2
 8004d0c:	603a      	str	r2, [r7, #0]
  return result;
 8004d0e:	683a      	ldr	r2, [r7, #0]
 8004d10:	fab2 f282 	clz	r2, r2
 8004d14:	b2d2      	uxtb	r2, r2
 8004d16:	40d3      	lsrs	r3, r2
 8004d18:	4a04      	ldr	r2, [pc, #16]	@ (8004d2c <HAL_RCC_GetPCLK1Freq+0x40>)
 8004d1a:	5cd3      	ldrb	r3, [r2, r3]
 8004d1c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004d20:	4618      	mov	r0, r3
 8004d22:	3708      	adds	r7, #8
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}
 8004d28:	40021000 	.word	0x40021000
 8004d2c:	08006cbc 	.word	0x08006cbc

08004d30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b082      	sub	sp, #8
 8004d34:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004d36:	f7ff ffcd 	bl	8004cd4 <HAL_RCC_GetHCLKFreq>
 8004d3a:	4601      	mov	r1, r0
 8004d3c:	4b0b      	ldr	r3, [pc, #44]	@ (8004d6c <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8004d44:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8004d48:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d4a:	687a      	ldr	r2, [r7, #4]
 8004d4c:	fa92 f2a2 	rbit	r2, r2
 8004d50:	603a      	str	r2, [r7, #0]
  return result;
 8004d52:	683a      	ldr	r2, [r7, #0]
 8004d54:	fab2 f282 	clz	r2, r2
 8004d58:	b2d2      	uxtb	r2, r2
 8004d5a:	40d3      	lsrs	r3, r2
 8004d5c:	4a04      	ldr	r2, [pc, #16]	@ (8004d70 <HAL_RCC_GetPCLK2Freq+0x40>)
 8004d5e:	5cd3      	ldrb	r3, [r2, r3]
 8004d60:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004d64:	4618      	mov	r0, r3
 8004d66:	3708      	adds	r7, #8
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}
 8004d6c:	40021000 	.word	0x40021000
 8004d70:	08006cbc 	.word	0x08006cbc

08004d74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b082      	sub	sp, #8
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d101      	bne.n	8004d86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	e049      	b.n	8004e1a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d106      	bne.n	8004da0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2200      	movs	r2, #0
 8004d96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f7fc f898 	bl	8000ed0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2202      	movs	r2, #2
 8004da4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	3304      	adds	r3, #4
 8004db0:	4619      	mov	r1, r3
 8004db2:	4610      	mov	r0, r2
 8004db4:	f000 f9bc 	bl	8005130 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2201      	movs	r2, #1
 8004dbc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2201      	movs	r2, #1
 8004de4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2201      	movs	r2, #1
 8004dec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2201      	movs	r2, #1
 8004df4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2201      	movs	r2, #1
 8004e04:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2201      	movs	r2, #1
 8004e14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004e18:	2300      	movs	r3, #0
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3708      	adds	r7, #8
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}
	...

08004e24 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b085      	sub	sp, #20
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e32:	b2db      	uxtb	r3, r3
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d001      	beq.n	8004e3c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	e040      	b.n	8004ebe <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2202      	movs	r2, #2
 8004e40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	68da      	ldr	r2, [r3, #12]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f042 0201 	orr.w	r2, r2, #1
 8004e52:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a1c      	ldr	r2, [pc, #112]	@ (8004ecc <HAL_TIM_Base_Start_IT+0xa8>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d00e      	beq.n	8004e7c <HAL_TIM_Base_Start_IT+0x58>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e66:	d009      	beq.n	8004e7c <HAL_TIM_Base_Start_IT+0x58>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a18      	ldr	r2, [pc, #96]	@ (8004ed0 <HAL_TIM_Base_Start_IT+0xac>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d004      	beq.n	8004e7c <HAL_TIM_Base_Start_IT+0x58>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a17      	ldr	r2, [pc, #92]	@ (8004ed4 <HAL_TIM_Base_Start_IT+0xb0>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d115      	bne.n	8004ea8 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	689a      	ldr	r2, [r3, #8]
 8004e82:	4b15      	ldr	r3, [pc, #84]	@ (8004ed8 <HAL_TIM_Base_Start_IT+0xb4>)
 8004e84:	4013      	ands	r3, r2
 8004e86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2b06      	cmp	r3, #6
 8004e8c:	d015      	beq.n	8004eba <HAL_TIM_Base_Start_IT+0x96>
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e94:	d011      	beq.n	8004eba <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f042 0201 	orr.w	r2, r2, #1
 8004ea4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ea6:	e008      	b.n	8004eba <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f042 0201 	orr.w	r2, r2, #1
 8004eb6:	601a      	str	r2, [r3, #0]
 8004eb8:	e000      	b.n	8004ebc <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004eba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004ebc:	2300      	movs	r3, #0
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3714      	adds	r7, #20
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec8:	4770      	bx	lr
 8004eca:	bf00      	nop
 8004ecc:	40012c00 	.word	0x40012c00
 8004ed0:	40000400 	.word	0x40000400
 8004ed4:	40014000 	.word	0x40014000
 8004ed8:	00010007 	.word	0x00010007

08004edc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b084      	sub	sp, #16
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	68db      	ldr	r3, [r3, #12]
 8004eea:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	691b      	ldr	r3, [r3, #16]
 8004ef2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	f003 0302 	and.w	r3, r3, #2
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d020      	beq.n	8004f40 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	f003 0302 	and.w	r3, r3, #2
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d01b      	beq.n	8004f40 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f06f 0202 	mvn.w	r2, #2
 8004f10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2201      	movs	r2, #1
 8004f16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	699b      	ldr	r3, [r3, #24]
 8004f1e:	f003 0303 	and.w	r3, r3, #3
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d003      	beq.n	8004f2e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f000 f8e4 	bl	80050f4 <HAL_TIM_IC_CaptureCallback>
 8004f2c:	e005      	b.n	8004f3a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f000 f8d6 	bl	80050e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f000 f8e7 	bl	8005108 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	f003 0304 	and.w	r3, r3, #4
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d020      	beq.n	8004f8c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	f003 0304 	and.w	r3, r3, #4
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d01b      	beq.n	8004f8c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f06f 0204 	mvn.w	r2, #4
 8004f5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2202      	movs	r2, #2
 8004f62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	699b      	ldr	r3, [r3, #24]
 8004f6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d003      	beq.n	8004f7a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f000 f8be 	bl	80050f4 <HAL_TIM_IC_CaptureCallback>
 8004f78:	e005      	b.n	8004f86 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f000 f8b0 	bl	80050e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	f000 f8c1 	bl	8005108 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	f003 0308 	and.w	r3, r3, #8
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d020      	beq.n	8004fd8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	f003 0308 	and.w	r3, r3, #8
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d01b      	beq.n	8004fd8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f06f 0208 	mvn.w	r2, #8
 8004fa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2204      	movs	r2, #4
 8004fae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	69db      	ldr	r3, [r3, #28]
 8004fb6:	f003 0303 	and.w	r3, r3, #3
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d003      	beq.n	8004fc6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f000 f898 	bl	80050f4 <HAL_TIM_IC_CaptureCallback>
 8004fc4:	e005      	b.n	8004fd2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f000 f88a 	bl	80050e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	f000 f89b 	bl	8005108 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	f003 0310 	and.w	r3, r3, #16
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d020      	beq.n	8005024 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	f003 0310 	and.w	r3, r3, #16
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d01b      	beq.n	8005024 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f06f 0210 	mvn.w	r2, #16
 8004ff4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2208      	movs	r2, #8
 8004ffa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	69db      	ldr	r3, [r3, #28]
 8005002:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005006:	2b00      	cmp	r3, #0
 8005008:	d003      	beq.n	8005012 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f000 f872 	bl	80050f4 <HAL_TIM_IC_CaptureCallback>
 8005010:	e005      	b.n	800501e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f000 f864 	bl	80050e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	f000 f875 	bl	8005108 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2200      	movs	r2, #0
 8005022:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	f003 0301 	and.w	r3, r3, #1
 800502a:	2b00      	cmp	r3, #0
 800502c:	d00c      	beq.n	8005048 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	f003 0301 	and.w	r3, r3, #1
 8005034:	2b00      	cmp	r3, #0
 8005036:	d007      	beq.n	8005048 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f06f 0201 	mvn.w	r2, #1
 8005040:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f7fb fa5e 	bl	8000504 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800504e:	2b00      	cmp	r3, #0
 8005050:	d00c      	beq.n	800506c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005058:	2b00      	cmp	r3, #0
 800505a:	d007      	beq.n	800506c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005064:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f000 f95e 	bl	8005328 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005072:	2b00      	cmp	r3, #0
 8005074:	d00c      	beq.n	8005090 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800507c:	2b00      	cmp	r3, #0
 800507e:	d007      	beq.n	8005090 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005088:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f000 f956 	bl	800533c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005096:	2b00      	cmp	r3, #0
 8005098:	d00c      	beq.n	80050b4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d007      	beq.n	80050b4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80050ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f000 f834 	bl	800511c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	f003 0320 	and.w	r3, r3, #32
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d00c      	beq.n	80050d8 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	f003 0320 	and.w	r3, r3, #32
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d007      	beq.n	80050d8 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f06f 0220 	mvn.w	r2, #32
 80050d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f000 f91e 	bl	8005314 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80050d8:	bf00      	nop
 80050da:	3710      	adds	r7, #16
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}

080050e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b083      	sub	sp, #12
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80050e8:	bf00      	nop
 80050ea:	370c      	adds	r7, #12
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr

080050f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b083      	sub	sp, #12
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80050fc:	bf00      	nop
 80050fe:	370c      	adds	r7, #12
 8005100:	46bd      	mov	sp, r7
 8005102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005106:	4770      	bx	lr

08005108 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005108:	b480      	push	{r7}
 800510a:	b083      	sub	sp, #12
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005110:	bf00      	nop
 8005112:	370c      	adds	r7, #12
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr

0800511c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800511c:	b480      	push	{r7}
 800511e:	b083      	sub	sp, #12
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005124:	bf00      	nop
 8005126:	370c      	adds	r7, #12
 8005128:	46bd      	mov	sp, r7
 800512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512e:	4770      	bx	lr

08005130 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005130:	b480      	push	{r7}
 8005132:	b085      	sub	sp, #20
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
 8005138:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	4a38      	ldr	r2, [pc, #224]	@ (8005224 <TIM_Base_SetConfig+0xf4>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d007      	beq.n	8005158 <TIM_Base_SetConfig+0x28>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800514e:	d003      	beq.n	8005158 <TIM_Base_SetConfig+0x28>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	4a35      	ldr	r2, [pc, #212]	@ (8005228 <TIM_Base_SetConfig+0xf8>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d108      	bne.n	800516a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800515e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	68fa      	ldr	r2, [r7, #12]
 8005166:	4313      	orrs	r3, r2
 8005168:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	4a2d      	ldr	r2, [pc, #180]	@ (8005224 <TIM_Base_SetConfig+0xf4>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d013      	beq.n	800519a <TIM_Base_SetConfig+0x6a>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005178:	d00f      	beq.n	800519a <TIM_Base_SetConfig+0x6a>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	4a2a      	ldr	r2, [pc, #168]	@ (8005228 <TIM_Base_SetConfig+0xf8>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d00b      	beq.n	800519a <TIM_Base_SetConfig+0x6a>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	4a29      	ldr	r2, [pc, #164]	@ (800522c <TIM_Base_SetConfig+0xfc>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d007      	beq.n	800519a <TIM_Base_SetConfig+0x6a>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	4a28      	ldr	r2, [pc, #160]	@ (8005230 <TIM_Base_SetConfig+0x100>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d003      	beq.n	800519a <TIM_Base_SetConfig+0x6a>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	4a27      	ldr	r2, [pc, #156]	@ (8005234 <TIM_Base_SetConfig+0x104>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d108      	bne.n	80051ac <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80051a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	68db      	ldr	r3, [r3, #12]
 80051a6:	68fa      	ldr	r2, [r7, #12]
 80051a8:	4313      	orrs	r3, r2
 80051aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	695b      	ldr	r3, [r3, #20]
 80051b6:	4313      	orrs	r3, r2
 80051b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	68fa      	ldr	r2, [r7, #12]
 80051be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	689a      	ldr	r2, [r3, #8]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	4a14      	ldr	r2, [pc, #80]	@ (8005224 <TIM_Base_SetConfig+0xf4>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d00b      	beq.n	80051f0 <TIM_Base_SetConfig+0xc0>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	4a14      	ldr	r2, [pc, #80]	@ (800522c <TIM_Base_SetConfig+0xfc>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d007      	beq.n	80051f0 <TIM_Base_SetConfig+0xc0>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	4a13      	ldr	r2, [pc, #76]	@ (8005230 <TIM_Base_SetConfig+0x100>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d003      	beq.n	80051f0 <TIM_Base_SetConfig+0xc0>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	4a12      	ldr	r2, [pc, #72]	@ (8005234 <TIM_Base_SetConfig+0x104>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d103      	bne.n	80051f8 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	691a      	ldr	r2, [r3, #16]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2201      	movs	r2, #1
 80051fc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	691b      	ldr	r3, [r3, #16]
 8005202:	f003 0301 	and.w	r3, r3, #1
 8005206:	2b01      	cmp	r3, #1
 8005208:	d105      	bne.n	8005216 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	691b      	ldr	r3, [r3, #16]
 800520e:	f023 0201 	bic.w	r2, r3, #1
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	611a      	str	r2, [r3, #16]
  }
}
 8005216:	bf00      	nop
 8005218:	3714      	adds	r7, #20
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr
 8005222:	bf00      	nop
 8005224:	40012c00 	.word	0x40012c00
 8005228:	40000400 	.word	0x40000400
 800522c:	40014000 	.word	0x40014000
 8005230:	40014400 	.word	0x40014400
 8005234:	40014800 	.word	0x40014800

08005238 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005238:	b480      	push	{r7}
 800523a:	b085      	sub	sp, #20
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
 8005240:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005248:	2b01      	cmp	r3, #1
 800524a:	d101      	bne.n	8005250 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800524c:	2302      	movs	r3, #2
 800524e:	e054      	b.n	80052fa <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2201      	movs	r2, #1
 8005254:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2202      	movs	r2, #2
 800525c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a24      	ldr	r2, [pc, #144]	@ (8005308 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d108      	bne.n	800528c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005280:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	68fa      	ldr	r2, [r7, #12]
 8005288:	4313      	orrs	r3, r2
 800528a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005292:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	68fa      	ldr	r2, [r7, #12]
 800529a:	4313      	orrs	r3, r2
 800529c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	68fa      	ldr	r2, [r7, #12]
 80052a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a17      	ldr	r2, [pc, #92]	@ (8005308 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d00e      	beq.n	80052ce <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052b8:	d009      	beq.n	80052ce <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a13      	ldr	r2, [pc, #76]	@ (800530c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d004      	beq.n	80052ce <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a11      	ldr	r2, [pc, #68]	@ (8005310 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d10c      	bne.n	80052e8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80052d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	68ba      	ldr	r2, [r7, #8]
 80052dc:	4313      	orrs	r3, r2
 80052de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	68ba      	ldr	r2, [r7, #8]
 80052e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2201      	movs	r2, #1
 80052ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2200      	movs	r2, #0
 80052f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80052f8:	2300      	movs	r3, #0
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3714      	adds	r7, #20
 80052fe:	46bd      	mov	sp, r7
 8005300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005304:	4770      	bx	lr
 8005306:	bf00      	nop
 8005308:	40012c00 	.word	0x40012c00
 800530c:	40000400 	.word	0x40000400
 8005310:	40014000 	.word	0x40014000

08005314 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005314:	b480      	push	{r7}
 8005316:	b083      	sub	sp, #12
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800531c:	bf00      	nop
 800531e:	370c      	adds	r7, #12
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr

08005328 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005328:	b480      	push	{r7}
 800532a:	b083      	sub	sp, #12
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005330:	bf00      	nop
 8005332:	370c      	adds	r7, #12
 8005334:	46bd      	mov	sp, r7
 8005336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533a:	4770      	bx	lr

0800533c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800533c:	b480      	push	{r7}
 800533e:	b083      	sub	sp, #12
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005344:	bf00      	nop
 8005346:	370c      	adds	r7, #12
 8005348:	46bd      	mov	sp, r7
 800534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534e:	4770      	bx	lr

08005350 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b082      	sub	sp, #8
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d101      	bne.n	8005362 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	e040      	b.n	80053e4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005366:	2b00      	cmp	r3, #0
 8005368:	d106      	bne.n	8005378 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f7fb fdee 	bl	8000f54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2224      	movs	r2, #36	@ 0x24
 800537c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	681a      	ldr	r2, [r3, #0]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f022 0201 	bic.w	r2, r2, #1
 800538c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005392:	2b00      	cmp	r3, #0
 8005394:	d002      	beq.n	800539c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f000 f9e8 	bl	800576c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800539c:	6878      	ldr	r0, [r7, #4]
 800539e:	f000 f8af 	bl	8005500 <UART_SetConfig>
 80053a2:	4603      	mov	r3, r0
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	d101      	bne.n	80053ac <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80053a8:	2301      	movs	r3, #1
 80053aa:	e01b      	b.n	80053e4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	685a      	ldr	r2, [r3, #4]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80053ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	689a      	ldr	r2, [r3, #8]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80053ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f042 0201 	orr.w	r2, r2, #1
 80053da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f000 fa67 	bl	80058b0 <UART_CheckIdleState>
 80053e2:	4603      	mov	r3, r0
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	3708      	adds	r7, #8
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd80      	pop	{r7, pc}

080053ec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b08a      	sub	sp, #40	@ 0x28
 80053f0:	af02      	add	r7, sp, #8
 80053f2:	60f8      	str	r0, [r7, #12]
 80053f4:	60b9      	str	r1, [r7, #8]
 80053f6:	603b      	str	r3, [r7, #0]
 80053f8:	4613      	mov	r3, r2
 80053fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005400:	2b20      	cmp	r3, #32
 8005402:	d177      	bne.n	80054f4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d002      	beq.n	8005410 <HAL_UART_Transmit+0x24>
 800540a:	88fb      	ldrh	r3, [r7, #6]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d101      	bne.n	8005414 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005410:	2301      	movs	r3, #1
 8005412:	e070      	b.n	80054f6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2200      	movs	r2, #0
 8005418:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2221      	movs	r2, #33	@ 0x21
 8005420:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005422:	f7fb ff51 	bl	80012c8 <HAL_GetTick>
 8005426:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	88fa      	ldrh	r2, [r7, #6]
 800542c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	88fa      	ldrh	r2, [r7, #6]
 8005434:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	689b      	ldr	r3, [r3, #8]
 800543c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005440:	d108      	bne.n	8005454 <HAL_UART_Transmit+0x68>
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	691b      	ldr	r3, [r3, #16]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d104      	bne.n	8005454 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800544a:	2300      	movs	r3, #0
 800544c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	61bb      	str	r3, [r7, #24]
 8005452:	e003      	b.n	800545c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005458:	2300      	movs	r3, #0
 800545a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800545c:	e02f      	b.n	80054be <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	9300      	str	r3, [sp, #0]
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	2200      	movs	r2, #0
 8005466:	2180      	movs	r1, #128	@ 0x80
 8005468:	68f8      	ldr	r0, [r7, #12]
 800546a:	f000 fac9 	bl	8005a00 <UART_WaitOnFlagUntilTimeout>
 800546e:	4603      	mov	r3, r0
 8005470:	2b00      	cmp	r3, #0
 8005472:	d004      	beq.n	800547e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2220      	movs	r2, #32
 8005478:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800547a:	2303      	movs	r3, #3
 800547c:	e03b      	b.n	80054f6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800547e:	69fb      	ldr	r3, [r7, #28]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d10b      	bne.n	800549c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005484:	69bb      	ldr	r3, [r7, #24]
 8005486:	881a      	ldrh	r2, [r3, #0]
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005490:	b292      	uxth	r2, r2
 8005492:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005494:	69bb      	ldr	r3, [r7, #24]
 8005496:	3302      	adds	r3, #2
 8005498:	61bb      	str	r3, [r7, #24]
 800549a:	e007      	b.n	80054ac <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800549c:	69fb      	ldr	r3, [r7, #28]
 800549e:	781a      	ldrb	r2, [r3, #0]
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80054a6:	69fb      	ldr	r3, [r7, #28]
 80054a8:	3301      	adds	r3, #1
 80054aa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	3b01      	subs	r3, #1
 80054b6:	b29a      	uxth	r2, r3
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80054c4:	b29b      	uxth	r3, r3
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d1c9      	bne.n	800545e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	9300      	str	r3, [sp, #0]
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	2200      	movs	r2, #0
 80054d2:	2140      	movs	r1, #64	@ 0x40
 80054d4:	68f8      	ldr	r0, [r7, #12]
 80054d6:	f000 fa93 	bl	8005a00 <UART_WaitOnFlagUntilTimeout>
 80054da:	4603      	mov	r3, r0
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d004      	beq.n	80054ea <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	2220      	movs	r2, #32
 80054e4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80054e6:	2303      	movs	r3, #3
 80054e8:	e005      	b.n	80054f6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2220      	movs	r2, #32
 80054ee:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80054f0:	2300      	movs	r3, #0
 80054f2:	e000      	b.n	80054f6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80054f4:	2302      	movs	r3, #2
  }
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3720      	adds	r7, #32
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}
	...

08005500 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b088      	sub	sp, #32
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005508:	2300      	movs	r3, #0
 800550a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	689a      	ldr	r2, [r3, #8]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	691b      	ldr	r3, [r3, #16]
 8005514:	431a      	orrs	r2, r3
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	695b      	ldr	r3, [r3, #20]
 800551a:	431a      	orrs	r2, r3
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	69db      	ldr	r3, [r3, #28]
 8005520:	4313      	orrs	r3, r2
 8005522:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	4b8a      	ldr	r3, [pc, #552]	@ (8005754 <UART_SetConfig+0x254>)
 800552c:	4013      	ands	r3, r2
 800552e:	687a      	ldr	r2, [r7, #4]
 8005530:	6812      	ldr	r2, [r2, #0]
 8005532:	6979      	ldr	r1, [r7, #20]
 8005534:	430b      	orrs	r3, r1
 8005536:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	68da      	ldr	r2, [r3, #12]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	430a      	orrs	r2, r1
 800554c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	699b      	ldr	r3, [r3, #24]
 8005552:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6a1b      	ldr	r3, [r3, #32]
 8005558:	697a      	ldr	r2, [r7, #20]
 800555a:	4313      	orrs	r3, r2
 800555c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	689b      	ldr	r3, [r3, #8]
 8005564:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	697a      	ldr	r2, [r7, #20]
 800556e:	430a      	orrs	r2, r1
 8005570:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a78      	ldr	r2, [pc, #480]	@ (8005758 <UART_SetConfig+0x258>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d120      	bne.n	80055be <UART_SetConfig+0xbe>
 800557c:	4b77      	ldr	r3, [pc, #476]	@ (800575c <UART_SetConfig+0x25c>)
 800557e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005580:	f003 0303 	and.w	r3, r3, #3
 8005584:	2b03      	cmp	r3, #3
 8005586:	d817      	bhi.n	80055b8 <UART_SetConfig+0xb8>
 8005588:	a201      	add	r2, pc, #4	@ (adr r2, 8005590 <UART_SetConfig+0x90>)
 800558a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800558e:	bf00      	nop
 8005590:	080055a1 	.word	0x080055a1
 8005594:	080055ad 	.word	0x080055ad
 8005598:	080055b3 	.word	0x080055b3
 800559c:	080055a7 	.word	0x080055a7
 80055a0:	2300      	movs	r3, #0
 80055a2:	77fb      	strb	r3, [r7, #31]
 80055a4:	e01d      	b.n	80055e2 <UART_SetConfig+0xe2>
 80055a6:	2302      	movs	r3, #2
 80055a8:	77fb      	strb	r3, [r7, #31]
 80055aa:	e01a      	b.n	80055e2 <UART_SetConfig+0xe2>
 80055ac:	2304      	movs	r3, #4
 80055ae:	77fb      	strb	r3, [r7, #31]
 80055b0:	e017      	b.n	80055e2 <UART_SetConfig+0xe2>
 80055b2:	2308      	movs	r3, #8
 80055b4:	77fb      	strb	r3, [r7, #31]
 80055b6:	e014      	b.n	80055e2 <UART_SetConfig+0xe2>
 80055b8:	2310      	movs	r3, #16
 80055ba:	77fb      	strb	r3, [r7, #31]
 80055bc:	e011      	b.n	80055e2 <UART_SetConfig+0xe2>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a67      	ldr	r2, [pc, #412]	@ (8005760 <UART_SetConfig+0x260>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d102      	bne.n	80055ce <UART_SetConfig+0xce>
 80055c8:	2300      	movs	r3, #0
 80055ca:	77fb      	strb	r3, [r7, #31]
 80055cc:	e009      	b.n	80055e2 <UART_SetConfig+0xe2>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a64      	ldr	r2, [pc, #400]	@ (8005764 <UART_SetConfig+0x264>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d102      	bne.n	80055de <UART_SetConfig+0xde>
 80055d8:	2300      	movs	r3, #0
 80055da:	77fb      	strb	r3, [r7, #31]
 80055dc:	e001      	b.n	80055e2 <UART_SetConfig+0xe2>
 80055de:	2310      	movs	r3, #16
 80055e0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	69db      	ldr	r3, [r3, #28]
 80055e6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80055ea:	d15a      	bne.n	80056a2 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80055ec:	7ffb      	ldrb	r3, [r7, #31]
 80055ee:	2b08      	cmp	r3, #8
 80055f0:	d827      	bhi.n	8005642 <UART_SetConfig+0x142>
 80055f2:	a201      	add	r2, pc, #4	@ (adr r2, 80055f8 <UART_SetConfig+0xf8>)
 80055f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055f8:	0800561d 	.word	0x0800561d
 80055fc:	08005625 	.word	0x08005625
 8005600:	0800562d 	.word	0x0800562d
 8005604:	08005643 	.word	0x08005643
 8005608:	08005633 	.word	0x08005633
 800560c:	08005643 	.word	0x08005643
 8005610:	08005643 	.word	0x08005643
 8005614:	08005643 	.word	0x08005643
 8005618:	0800563b 	.word	0x0800563b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800561c:	f7ff fb66 	bl	8004cec <HAL_RCC_GetPCLK1Freq>
 8005620:	61b8      	str	r0, [r7, #24]
        break;
 8005622:	e013      	b.n	800564c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005624:	f7ff fb84 	bl	8004d30 <HAL_RCC_GetPCLK2Freq>
 8005628:	61b8      	str	r0, [r7, #24]
        break;
 800562a:	e00f      	b.n	800564c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800562c:	4b4e      	ldr	r3, [pc, #312]	@ (8005768 <UART_SetConfig+0x268>)
 800562e:	61bb      	str	r3, [r7, #24]
        break;
 8005630:	e00c      	b.n	800564c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005632:	f7ff fafb 	bl	8004c2c <HAL_RCC_GetSysClockFreq>
 8005636:	61b8      	str	r0, [r7, #24]
        break;
 8005638:	e008      	b.n	800564c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800563a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800563e:	61bb      	str	r3, [r7, #24]
        break;
 8005640:	e004      	b.n	800564c <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8005642:	2300      	movs	r3, #0
 8005644:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	77bb      	strb	r3, [r7, #30]
        break;
 800564a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800564c:	69bb      	ldr	r3, [r7, #24]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d074      	beq.n	800573c <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005652:	69bb      	ldr	r3, [r7, #24]
 8005654:	005a      	lsls	r2, r3, #1
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	085b      	lsrs	r3, r3, #1
 800565c:	441a      	add	r2, r3
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	fbb2 f3f3 	udiv	r3, r2, r3
 8005666:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	2b0f      	cmp	r3, #15
 800566c:	d916      	bls.n	800569c <UART_SetConfig+0x19c>
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005674:	d212      	bcs.n	800569c <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	b29b      	uxth	r3, r3
 800567a:	f023 030f 	bic.w	r3, r3, #15
 800567e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	085b      	lsrs	r3, r3, #1
 8005684:	b29b      	uxth	r3, r3
 8005686:	f003 0307 	and.w	r3, r3, #7
 800568a:	b29a      	uxth	r2, r3
 800568c:	89fb      	ldrh	r3, [r7, #14]
 800568e:	4313      	orrs	r3, r2
 8005690:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	89fa      	ldrh	r2, [r7, #14]
 8005698:	60da      	str	r2, [r3, #12]
 800569a:	e04f      	b.n	800573c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800569c:	2301      	movs	r3, #1
 800569e:	77bb      	strb	r3, [r7, #30]
 80056a0:	e04c      	b.n	800573c <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80056a2:	7ffb      	ldrb	r3, [r7, #31]
 80056a4:	2b08      	cmp	r3, #8
 80056a6:	d828      	bhi.n	80056fa <UART_SetConfig+0x1fa>
 80056a8:	a201      	add	r2, pc, #4	@ (adr r2, 80056b0 <UART_SetConfig+0x1b0>)
 80056aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056ae:	bf00      	nop
 80056b0:	080056d5 	.word	0x080056d5
 80056b4:	080056dd 	.word	0x080056dd
 80056b8:	080056e5 	.word	0x080056e5
 80056bc:	080056fb 	.word	0x080056fb
 80056c0:	080056eb 	.word	0x080056eb
 80056c4:	080056fb 	.word	0x080056fb
 80056c8:	080056fb 	.word	0x080056fb
 80056cc:	080056fb 	.word	0x080056fb
 80056d0:	080056f3 	.word	0x080056f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056d4:	f7ff fb0a 	bl	8004cec <HAL_RCC_GetPCLK1Freq>
 80056d8:	61b8      	str	r0, [r7, #24]
        break;
 80056da:	e013      	b.n	8005704 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80056dc:	f7ff fb28 	bl	8004d30 <HAL_RCC_GetPCLK2Freq>
 80056e0:	61b8      	str	r0, [r7, #24]
        break;
 80056e2:	e00f      	b.n	8005704 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056e4:	4b20      	ldr	r3, [pc, #128]	@ (8005768 <UART_SetConfig+0x268>)
 80056e6:	61bb      	str	r3, [r7, #24]
        break;
 80056e8:	e00c      	b.n	8005704 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056ea:	f7ff fa9f 	bl	8004c2c <HAL_RCC_GetSysClockFreq>
 80056ee:	61b8      	str	r0, [r7, #24]
        break;
 80056f0:	e008      	b.n	8005704 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80056f6:	61bb      	str	r3, [r7, #24]
        break;
 80056f8:	e004      	b.n	8005704 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80056fa:	2300      	movs	r3, #0
 80056fc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	77bb      	strb	r3, [r7, #30]
        break;
 8005702:	bf00      	nop
    }

    if (pclk != 0U)
 8005704:	69bb      	ldr	r3, [r7, #24]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d018      	beq.n	800573c <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	085a      	lsrs	r2, r3, #1
 8005710:	69bb      	ldr	r3, [r7, #24]
 8005712:	441a      	add	r2, r3
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	fbb2 f3f3 	udiv	r3, r2, r3
 800571c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	2b0f      	cmp	r3, #15
 8005722:	d909      	bls.n	8005738 <UART_SetConfig+0x238>
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800572a:	d205      	bcs.n	8005738 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	b29a      	uxth	r2, r3
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	60da      	str	r2, [r3, #12]
 8005736:	e001      	b.n	800573c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005738:	2301      	movs	r3, #1
 800573a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2200      	movs	r2, #0
 8005740:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2200      	movs	r2, #0
 8005746:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005748:	7fbb      	ldrb	r3, [r7, #30]
}
 800574a:	4618      	mov	r0, r3
 800574c:	3720      	adds	r7, #32
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}
 8005752:	bf00      	nop
 8005754:	efff69f3 	.word	0xefff69f3
 8005758:	40013800 	.word	0x40013800
 800575c:	40021000 	.word	0x40021000
 8005760:	40004400 	.word	0x40004400
 8005764:	40004800 	.word	0x40004800
 8005768:	007a1200 	.word	0x007a1200

0800576c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800576c:	b480      	push	{r7}
 800576e:	b083      	sub	sp, #12
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005778:	f003 0308 	and.w	r3, r3, #8
 800577c:	2b00      	cmp	r3, #0
 800577e:	d00a      	beq.n	8005796 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	430a      	orrs	r2, r1
 8005794:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800579a:	f003 0301 	and.w	r3, r3, #1
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d00a      	beq.n	80057b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	430a      	orrs	r2, r1
 80057b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057bc:	f003 0302 	and.w	r3, r3, #2
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d00a      	beq.n	80057da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	430a      	orrs	r2, r1
 80057d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057de:	f003 0304 	and.w	r3, r3, #4
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d00a      	beq.n	80057fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	430a      	orrs	r2, r1
 80057fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005800:	f003 0310 	and.w	r3, r3, #16
 8005804:	2b00      	cmp	r3, #0
 8005806:	d00a      	beq.n	800581e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	430a      	orrs	r2, r1
 800581c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005822:	f003 0320 	and.w	r3, r3, #32
 8005826:	2b00      	cmp	r3, #0
 8005828:	d00a      	beq.n	8005840 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	689b      	ldr	r3, [r3, #8]
 8005830:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	430a      	orrs	r2, r1
 800583e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005844:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005848:	2b00      	cmp	r3, #0
 800584a:	d01a      	beq.n	8005882 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	430a      	orrs	r2, r1
 8005860:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005866:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800586a:	d10a      	bne.n	8005882 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	430a      	orrs	r2, r1
 8005880:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005886:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800588a:	2b00      	cmp	r3, #0
 800588c:	d00a      	beq.n	80058a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	430a      	orrs	r2, r1
 80058a2:	605a      	str	r2, [r3, #4]
  }
}
 80058a4:	bf00      	nop
 80058a6:	370c      	adds	r7, #12
 80058a8:	46bd      	mov	sp, r7
 80058aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ae:	4770      	bx	lr

080058b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b098      	sub	sp, #96	@ 0x60
 80058b4:	af02      	add	r7, sp, #8
 80058b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2200      	movs	r2, #0
 80058bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80058c0:	f7fb fd02 	bl	80012c8 <HAL_GetTick>
 80058c4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f003 0308 	and.w	r3, r3, #8
 80058d0:	2b08      	cmp	r3, #8
 80058d2:	d12e      	bne.n	8005932 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80058d4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80058d8:	9300      	str	r3, [sp, #0]
 80058da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80058dc:	2200      	movs	r2, #0
 80058de:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f000 f88c 	bl	8005a00 <UART_WaitOnFlagUntilTimeout>
 80058e8:	4603      	mov	r3, r0
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d021      	beq.n	8005932 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058f6:	e853 3f00 	ldrex	r3, [r3]
 80058fa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80058fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005902:	653b      	str	r3, [r7, #80]	@ 0x50
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	461a      	mov	r2, r3
 800590a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800590c:	647b      	str	r3, [r7, #68]	@ 0x44
 800590e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005910:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005912:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005914:	e841 2300 	strex	r3, r2, [r1]
 8005918:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800591a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800591c:	2b00      	cmp	r3, #0
 800591e:	d1e6      	bne.n	80058ee <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2220      	movs	r2, #32
 8005924:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2200      	movs	r2, #0
 800592a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800592e:	2303      	movs	r3, #3
 8005930:	e062      	b.n	80059f8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f003 0304 	and.w	r3, r3, #4
 800593c:	2b04      	cmp	r3, #4
 800593e:	d149      	bne.n	80059d4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005940:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005944:	9300      	str	r3, [sp, #0]
 8005946:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005948:	2200      	movs	r2, #0
 800594a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f000 f856 	bl	8005a00 <UART_WaitOnFlagUntilTimeout>
 8005954:	4603      	mov	r3, r0
 8005956:	2b00      	cmp	r3, #0
 8005958:	d03c      	beq.n	80059d4 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005962:	e853 3f00 	ldrex	r3, [r3]
 8005966:	623b      	str	r3, [r7, #32]
   return(result);
 8005968:	6a3b      	ldr	r3, [r7, #32]
 800596a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800596e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	461a      	mov	r2, r3
 8005976:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005978:	633b      	str	r3, [r7, #48]	@ 0x30
 800597a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800597c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800597e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005980:	e841 2300 	strex	r3, r2, [r1]
 8005984:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005986:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005988:	2b00      	cmp	r3, #0
 800598a:	d1e6      	bne.n	800595a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	3308      	adds	r3, #8
 8005992:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	e853 3f00 	ldrex	r3, [r3]
 800599a:	60fb      	str	r3, [r7, #12]
   return(result);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f023 0301 	bic.w	r3, r3, #1
 80059a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	3308      	adds	r3, #8
 80059aa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80059ac:	61fa      	str	r2, [r7, #28]
 80059ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059b0:	69b9      	ldr	r1, [r7, #24]
 80059b2:	69fa      	ldr	r2, [r7, #28]
 80059b4:	e841 2300 	strex	r3, r2, [r1]
 80059b8:	617b      	str	r3, [r7, #20]
   return(result);
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d1e5      	bne.n	800598c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2220      	movs	r2, #32
 80059c4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2200      	movs	r2, #0
 80059cc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80059d0:	2303      	movs	r3, #3
 80059d2:	e011      	b.n	80059f8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2220      	movs	r2, #32
 80059d8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2220      	movs	r2, #32
 80059de:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2200      	movs	r2, #0
 80059e6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2200      	movs	r2, #0
 80059ec:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2200      	movs	r2, #0
 80059f2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80059f6:	2300      	movs	r3, #0
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	3758      	adds	r7, #88	@ 0x58
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}

08005a00 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b084      	sub	sp, #16
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	60f8      	str	r0, [r7, #12]
 8005a08:	60b9      	str	r1, [r7, #8]
 8005a0a:	603b      	str	r3, [r7, #0]
 8005a0c:	4613      	mov	r3, r2
 8005a0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a10:	e04f      	b.n	8005ab2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a12:	69bb      	ldr	r3, [r7, #24]
 8005a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a18:	d04b      	beq.n	8005ab2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a1a:	f7fb fc55 	bl	80012c8 <HAL_GetTick>
 8005a1e:	4602      	mov	r2, r0
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	1ad3      	subs	r3, r2, r3
 8005a24:	69ba      	ldr	r2, [r7, #24]
 8005a26:	429a      	cmp	r2, r3
 8005a28:	d302      	bcc.n	8005a30 <UART_WaitOnFlagUntilTimeout+0x30>
 8005a2a:	69bb      	ldr	r3, [r7, #24]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d101      	bne.n	8005a34 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005a30:	2303      	movs	r3, #3
 8005a32:	e04e      	b.n	8005ad2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f003 0304 	and.w	r3, r3, #4
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d037      	beq.n	8005ab2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	2b80      	cmp	r3, #128	@ 0x80
 8005a46:	d034      	beq.n	8005ab2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	2b40      	cmp	r3, #64	@ 0x40
 8005a4c:	d031      	beq.n	8005ab2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	69db      	ldr	r3, [r3, #28]
 8005a54:	f003 0308 	and.w	r3, r3, #8
 8005a58:	2b08      	cmp	r3, #8
 8005a5a:	d110      	bne.n	8005a7e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	2208      	movs	r2, #8
 8005a62:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005a64:	68f8      	ldr	r0, [r7, #12]
 8005a66:	f000 f838 	bl	8005ada <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2208      	movs	r2, #8
 8005a6e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	2200      	movs	r2, #0
 8005a76:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	e029      	b.n	8005ad2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	69db      	ldr	r3, [r3, #28]
 8005a84:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005a88:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005a8c:	d111      	bne.n	8005ab2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005a96:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005a98:	68f8      	ldr	r0, [r7, #12]
 8005a9a:	f000 f81e 	bl	8005ada <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2220      	movs	r2, #32
 8005aa2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005aae:	2303      	movs	r3, #3
 8005ab0:	e00f      	b.n	8005ad2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	69da      	ldr	r2, [r3, #28]
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	4013      	ands	r3, r2
 8005abc:	68ba      	ldr	r2, [r7, #8]
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	bf0c      	ite	eq
 8005ac2:	2301      	moveq	r3, #1
 8005ac4:	2300      	movne	r3, #0
 8005ac6:	b2db      	uxtb	r3, r3
 8005ac8:	461a      	mov	r2, r3
 8005aca:	79fb      	ldrb	r3, [r7, #7]
 8005acc:	429a      	cmp	r2, r3
 8005ace:	d0a0      	beq.n	8005a12 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ad0:	2300      	movs	r3, #0
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	3710      	adds	r7, #16
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}

08005ada <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ada:	b480      	push	{r7}
 8005adc:	b095      	sub	sp, #84	@ 0x54
 8005ade:	af00      	add	r7, sp, #0
 8005ae0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ae8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005aea:	e853 3f00 	ldrex	r3, [r3]
 8005aee:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005af0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005af2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005af6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	461a      	mov	r2, r3
 8005afe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b00:	643b      	str	r3, [r7, #64]	@ 0x40
 8005b02:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b04:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005b06:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005b08:	e841 2300 	strex	r3, r2, [r1]
 8005b0c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005b0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d1e6      	bne.n	8005ae2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	3308      	adds	r3, #8
 8005b1a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b1c:	6a3b      	ldr	r3, [r7, #32]
 8005b1e:	e853 3f00 	ldrex	r3, [r3]
 8005b22:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b24:	69fb      	ldr	r3, [r7, #28]
 8005b26:	f023 0301 	bic.w	r3, r3, #1
 8005b2a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	3308      	adds	r3, #8
 8005b32:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005b34:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005b36:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b38:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005b3a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b3c:	e841 2300 	strex	r3, r2, [r1]
 8005b40:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d1e5      	bne.n	8005b14 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	d118      	bne.n	8005b82 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	e853 3f00 	ldrex	r3, [r3]
 8005b5c:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	f023 0310 	bic.w	r3, r3, #16
 8005b64:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	461a      	mov	r2, r3
 8005b6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b6e:	61bb      	str	r3, [r7, #24]
 8005b70:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b72:	6979      	ldr	r1, [r7, #20]
 8005b74:	69ba      	ldr	r2, [r7, #24]
 8005b76:	e841 2300 	strex	r3, r2, [r1]
 8005b7a:	613b      	str	r3, [r7, #16]
   return(result);
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d1e6      	bne.n	8005b50 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2220      	movs	r2, #32
 8005b86:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2200      	movs	r2, #0
 8005b94:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005b96:	bf00      	nop
 8005b98:	3754      	adds	r7, #84	@ 0x54
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba0:	4770      	bx	lr
	...

08005ba4 <std>:
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	b510      	push	{r4, lr}
 8005ba8:	4604      	mov	r4, r0
 8005baa:	e9c0 3300 	strd	r3, r3, [r0]
 8005bae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005bb2:	6083      	str	r3, [r0, #8]
 8005bb4:	8181      	strh	r1, [r0, #12]
 8005bb6:	6643      	str	r3, [r0, #100]	@ 0x64
 8005bb8:	81c2      	strh	r2, [r0, #14]
 8005bba:	6183      	str	r3, [r0, #24]
 8005bbc:	4619      	mov	r1, r3
 8005bbe:	2208      	movs	r2, #8
 8005bc0:	305c      	adds	r0, #92	@ 0x5c
 8005bc2:	f000 fab5 	bl	8006130 <memset>
 8005bc6:	4b0d      	ldr	r3, [pc, #52]	@ (8005bfc <std+0x58>)
 8005bc8:	6263      	str	r3, [r4, #36]	@ 0x24
 8005bca:	4b0d      	ldr	r3, [pc, #52]	@ (8005c00 <std+0x5c>)
 8005bcc:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005bce:	4b0d      	ldr	r3, [pc, #52]	@ (8005c04 <std+0x60>)
 8005bd0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005bd2:	4b0d      	ldr	r3, [pc, #52]	@ (8005c08 <std+0x64>)
 8005bd4:	6323      	str	r3, [r4, #48]	@ 0x30
 8005bd6:	4b0d      	ldr	r3, [pc, #52]	@ (8005c0c <std+0x68>)
 8005bd8:	6224      	str	r4, [r4, #32]
 8005bda:	429c      	cmp	r4, r3
 8005bdc:	d006      	beq.n	8005bec <std+0x48>
 8005bde:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005be2:	4294      	cmp	r4, r2
 8005be4:	d002      	beq.n	8005bec <std+0x48>
 8005be6:	33d0      	adds	r3, #208	@ 0xd0
 8005be8:	429c      	cmp	r4, r3
 8005bea:	d105      	bne.n	8005bf8 <std+0x54>
 8005bec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005bf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005bf4:	f000 bb14 	b.w	8006220 <__retarget_lock_init_recursive>
 8005bf8:	bd10      	pop	{r4, pc}
 8005bfa:	bf00      	nop
 8005bfc:	08005f81 	.word	0x08005f81
 8005c00:	08005fa3 	.word	0x08005fa3
 8005c04:	08005fdb 	.word	0x08005fdb
 8005c08:	08005fff 	.word	0x08005fff
 8005c0c:	200002b4 	.word	0x200002b4

08005c10 <stdio_exit_handler>:
 8005c10:	4a02      	ldr	r2, [pc, #8]	@ (8005c1c <stdio_exit_handler+0xc>)
 8005c12:	4903      	ldr	r1, [pc, #12]	@ (8005c20 <stdio_exit_handler+0x10>)
 8005c14:	4803      	ldr	r0, [pc, #12]	@ (8005c24 <stdio_exit_handler+0x14>)
 8005c16:	f000 b869 	b.w	8005cec <_fwalk_sglue>
 8005c1a:	bf00      	nop
 8005c1c:	2000000c 	.word	0x2000000c
 8005c20:	08006ad1 	.word	0x08006ad1
 8005c24:	2000001c 	.word	0x2000001c

08005c28 <cleanup_stdio>:
 8005c28:	6841      	ldr	r1, [r0, #4]
 8005c2a:	4b0c      	ldr	r3, [pc, #48]	@ (8005c5c <cleanup_stdio+0x34>)
 8005c2c:	4299      	cmp	r1, r3
 8005c2e:	b510      	push	{r4, lr}
 8005c30:	4604      	mov	r4, r0
 8005c32:	d001      	beq.n	8005c38 <cleanup_stdio+0x10>
 8005c34:	f000 ff4c 	bl	8006ad0 <_fflush_r>
 8005c38:	68a1      	ldr	r1, [r4, #8]
 8005c3a:	4b09      	ldr	r3, [pc, #36]	@ (8005c60 <cleanup_stdio+0x38>)
 8005c3c:	4299      	cmp	r1, r3
 8005c3e:	d002      	beq.n	8005c46 <cleanup_stdio+0x1e>
 8005c40:	4620      	mov	r0, r4
 8005c42:	f000 ff45 	bl	8006ad0 <_fflush_r>
 8005c46:	68e1      	ldr	r1, [r4, #12]
 8005c48:	4b06      	ldr	r3, [pc, #24]	@ (8005c64 <cleanup_stdio+0x3c>)
 8005c4a:	4299      	cmp	r1, r3
 8005c4c:	d004      	beq.n	8005c58 <cleanup_stdio+0x30>
 8005c4e:	4620      	mov	r0, r4
 8005c50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c54:	f000 bf3c 	b.w	8006ad0 <_fflush_r>
 8005c58:	bd10      	pop	{r4, pc}
 8005c5a:	bf00      	nop
 8005c5c:	200002b4 	.word	0x200002b4
 8005c60:	2000031c 	.word	0x2000031c
 8005c64:	20000384 	.word	0x20000384

08005c68 <global_stdio_init.part.0>:
 8005c68:	b510      	push	{r4, lr}
 8005c6a:	4b0b      	ldr	r3, [pc, #44]	@ (8005c98 <global_stdio_init.part.0+0x30>)
 8005c6c:	4c0b      	ldr	r4, [pc, #44]	@ (8005c9c <global_stdio_init.part.0+0x34>)
 8005c6e:	4a0c      	ldr	r2, [pc, #48]	@ (8005ca0 <global_stdio_init.part.0+0x38>)
 8005c70:	601a      	str	r2, [r3, #0]
 8005c72:	4620      	mov	r0, r4
 8005c74:	2200      	movs	r2, #0
 8005c76:	2104      	movs	r1, #4
 8005c78:	f7ff ff94 	bl	8005ba4 <std>
 8005c7c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005c80:	2201      	movs	r2, #1
 8005c82:	2109      	movs	r1, #9
 8005c84:	f7ff ff8e 	bl	8005ba4 <std>
 8005c88:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005c8c:	2202      	movs	r2, #2
 8005c8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c92:	2112      	movs	r1, #18
 8005c94:	f7ff bf86 	b.w	8005ba4 <std>
 8005c98:	200003ec 	.word	0x200003ec
 8005c9c:	200002b4 	.word	0x200002b4
 8005ca0:	08005c11 	.word	0x08005c11

08005ca4 <__sfp_lock_acquire>:
 8005ca4:	4801      	ldr	r0, [pc, #4]	@ (8005cac <__sfp_lock_acquire+0x8>)
 8005ca6:	f000 babc 	b.w	8006222 <__retarget_lock_acquire_recursive>
 8005caa:	bf00      	nop
 8005cac:	200003f5 	.word	0x200003f5

08005cb0 <__sfp_lock_release>:
 8005cb0:	4801      	ldr	r0, [pc, #4]	@ (8005cb8 <__sfp_lock_release+0x8>)
 8005cb2:	f000 bab7 	b.w	8006224 <__retarget_lock_release_recursive>
 8005cb6:	bf00      	nop
 8005cb8:	200003f5 	.word	0x200003f5

08005cbc <__sinit>:
 8005cbc:	b510      	push	{r4, lr}
 8005cbe:	4604      	mov	r4, r0
 8005cc0:	f7ff fff0 	bl	8005ca4 <__sfp_lock_acquire>
 8005cc4:	6a23      	ldr	r3, [r4, #32]
 8005cc6:	b11b      	cbz	r3, 8005cd0 <__sinit+0x14>
 8005cc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ccc:	f7ff bff0 	b.w	8005cb0 <__sfp_lock_release>
 8005cd0:	4b04      	ldr	r3, [pc, #16]	@ (8005ce4 <__sinit+0x28>)
 8005cd2:	6223      	str	r3, [r4, #32]
 8005cd4:	4b04      	ldr	r3, [pc, #16]	@ (8005ce8 <__sinit+0x2c>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d1f5      	bne.n	8005cc8 <__sinit+0xc>
 8005cdc:	f7ff ffc4 	bl	8005c68 <global_stdio_init.part.0>
 8005ce0:	e7f2      	b.n	8005cc8 <__sinit+0xc>
 8005ce2:	bf00      	nop
 8005ce4:	08005c29 	.word	0x08005c29
 8005ce8:	200003ec 	.word	0x200003ec

08005cec <_fwalk_sglue>:
 8005cec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005cf0:	4607      	mov	r7, r0
 8005cf2:	4688      	mov	r8, r1
 8005cf4:	4614      	mov	r4, r2
 8005cf6:	2600      	movs	r6, #0
 8005cf8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005cfc:	f1b9 0901 	subs.w	r9, r9, #1
 8005d00:	d505      	bpl.n	8005d0e <_fwalk_sglue+0x22>
 8005d02:	6824      	ldr	r4, [r4, #0]
 8005d04:	2c00      	cmp	r4, #0
 8005d06:	d1f7      	bne.n	8005cf8 <_fwalk_sglue+0xc>
 8005d08:	4630      	mov	r0, r6
 8005d0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d0e:	89ab      	ldrh	r3, [r5, #12]
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	d907      	bls.n	8005d24 <_fwalk_sglue+0x38>
 8005d14:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005d18:	3301      	adds	r3, #1
 8005d1a:	d003      	beq.n	8005d24 <_fwalk_sglue+0x38>
 8005d1c:	4629      	mov	r1, r5
 8005d1e:	4638      	mov	r0, r7
 8005d20:	47c0      	blx	r8
 8005d22:	4306      	orrs	r6, r0
 8005d24:	3568      	adds	r5, #104	@ 0x68
 8005d26:	e7e9      	b.n	8005cfc <_fwalk_sglue+0x10>

08005d28 <iprintf>:
 8005d28:	b40f      	push	{r0, r1, r2, r3}
 8005d2a:	b507      	push	{r0, r1, r2, lr}
 8005d2c:	4906      	ldr	r1, [pc, #24]	@ (8005d48 <iprintf+0x20>)
 8005d2e:	ab04      	add	r3, sp, #16
 8005d30:	6808      	ldr	r0, [r1, #0]
 8005d32:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d36:	6881      	ldr	r1, [r0, #8]
 8005d38:	9301      	str	r3, [sp, #4]
 8005d3a:	f000 fb9f 	bl	800647c <_vfiprintf_r>
 8005d3e:	b003      	add	sp, #12
 8005d40:	f85d eb04 	ldr.w	lr, [sp], #4
 8005d44:	b004      	add	sp, #16
 8005d46:	4770      	bx	lr
 8005d48:	20000018 	.word	0x20000018

08005d4c <_puts_r>:
 8005d4c:	6a03      	ldr	r3, [r0, #32]
 8005d4e:	b570      	push	{r4, r5, r6, lr}
 8005d50:	6884      	ldr	r4, [r0, #8]
 8005d52:	4605      	mov	r5, r0
 8005d54:	460e      	mov	r6, r1
 8005d56:	b90b      	cbnz	r3, 8005d5c <_puts_r+0x10>
 8005d58:	f7ff ffb0 	bl	8005cbc <__sinit>
 8005d5c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005d5e:	07db      	lsls	r3, r3, #31
 8005d60:	d405      	bmi.n	8005d6e <_puts_r+0x22>
 8005d62:	89a3      	ldrh	r3, [r4, #12]
 8005d64:	0598      	lsls	r0, r3, #22
 8005d66:	d402      	bmi.n	8005d6e <_puts_r+0x22>
 8005d68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005d6a:	f000 fa5a 	bl	8006222 <__retarget_lock_acquire_recursive>
 8005d6e:	89a3      	ldrh	r3, [r4, #12]
 8005d70:	0719      	lsls	r1, r3, #28
 8005d72:	d502      	bpl.n	8005d7a <_puts_r+0x2e>
 8005d74:	6923      	ldr	r3, [r4, #16]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d135      	bne.n	8005de6 <_puts_r+0x9a>
 8005d7a:	4621      	mov	r1, r4
 8005d7c:	4628      	mov	r0, r5
 8005d7e:	f000 f981 	bl	8006084 <__swsetup_r>
 8005d82:	b380      	cbz	r0, 8005de6 <_puts_r+0x9a>
 8005d84:	f04f 35ff 	mov.w	r5, #4294967295
 8005d88:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005d8a:	07da      	lsls	r2, r3, #31
 8005d8c:	d405      	bmi.n	8005d9a <_puts_r+0x4e>
 8005d8e:	89a3      	ldrh	r3, [r4, #12]
 8005d90:	059b      	lsls	r3, r3, #22
 8005d92:	d402      	bmi.n	8005d9a <_puts_r+0x4e>
 8005d94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005d96:	f000 fa45 	bl	8006224 <__retarget_lock_release_recursive>
 8005d9a:	4628      	mov	r0, r5
 8005d9c:	bd70      	pop	{r4, r5, r6, pc}
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	da04      	bge.n	8005dac <_puts_r+0x60>
 8005da2:	69a2      	ldr	r2, [r4, #24]
 8005da4:	429a      	cmp	r2, r3
 8005da6:	dc17      	bgt.n	8005dd8 <_puts_r+0x8c>
 8005da8:	290a      	cmp	r1, #10
 8005daa:	d015      	beq.n	8005dd8 <_puts_r+0x8c>
 8005dac:	6823      	ldr	r3, [r4, #0]
 8005dae:	1c5a      	adds	r2, r3, #1
 8005db0:	6022      	str	r2, [r4, #0]
 8005db2:	7019      	strb	r1, [r3, #0]
 8005db4:	68a3      	ldr	r3, [r4, #8]
 8005db6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005dba:	3b01      	subs	r3, #1
 8005dbc:	60a3      	str	r3, [r4, #8]
 8005dbe:	2900      	cmp	r1, #0
 8005dc0:	d1ed      	bne.n	8005d9e <_puts_r+0x52>
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	da11      	bge.n	8005dea <_puts_r+0x9e>
 8005dc6:	4622      	mov	r2, r4
 8005dc8:	210a      	movs	r1, #10
 8005dca:	4628      	mov	r0, r5
 8005dcc:	f000 f91b 	bl	8006006 <__swbuf_r>
 8005dd0:	3001      	adds	r0, #1
 8005dd2:	d0d7      	beq.n	8005d84 <_puts_r+0x38>
 8005dd4:	250a      	movs	r5, #10
 8005dd6:	e7d7      	b.n	8005d88 <_puts_r+0x3c>
 8005dd8:	4622      	mov	r2, r4
 8005dda:	4628      	mov	r0, r5
 8005ddc:	f000 f913 	bl	8006006 <__swbuf_r>
 8005de0:	3001      	adds	r0, #1
 8005de2:	d1e7      	bne.n	8005db4 <_puts_r+0x68>
 8005de4:	e7ce      	b.n	8005d84 <_puts_r+0x38>
 8005de6:	3e01      	subs	r6, #1
 8005de8:	e7e4      	b.n	8005db4 <_puts_r+0x68>
 8005dea:	6823      	ldr	r3, [r4, #0]
 8005dec:	1c5a      	adds	r2, r3, #1
 8005dee:	6022      	str	r2, [r4, #0]
 8005df0:	220a      	movs	r2, #10
 8005df2:	701a      	strb	r2, [r3, #0]
 8005df4:	e7ee      	b.n	8005dd4 <_puts_r+0x88>
	...

08005df8 <puts>:
 8005df8:	4b02      	ldr	r3, [pc, #8]	@ (8005e04 <puts+0xc>)
 8005dfa:	4601      	mov	r1, r0
 8005dfc:	6818      	ldr	r0, [r3, #0]
 8005dfe:	f7ff bfa5 	b.w	8005d4c <_puts_r>
 8005e02:	bf00      	nop
 8005e04:	20000018 	.word	0x20000018

08005e08 <setbuf>:
 8005e08:	fab1 f281 	clz	r2, r1
 8005e0c:	0952      	lsrs	r2, r2, #5
 8005e0e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005e12:	0052      	lsls	r2, r2, #1
 8005e14:	f000 b800 	b.w	8005e18 <setvbuf>

08005e18 <setvbuf>:
 8005e18:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005e1c:	461d      	mov	r5, r3
 8005e1e:	4b57      	ldr	r3, [pc, #348]	@ (8005f7c <setvbuf+0x164>)
 8005e20:	681f      	ldr	r7, [r3, #0]
 8005e22:	4604      	mov	r4, r0
 8005e24:	460e      	mov	r6, r1
 8005e26:	4690      	mov	r8, r2
 8005e28:	b127      	cbz	r7, 8005e34 <setvbuf+0x1c>
 8005e2a:	6a3b      	ldr	r3, [r7, #32]
 8005e2c:	b913      	cbnz	r3, 8005e34 <setvbuf+0x1c>
 8005e2e:	4638      	mov	r0, r7
 8005e30:	f7ff ff44 	bl	8005cbc <__sinit>
 8005e34:	f1b8 0f02 	cmp.w	r8, #2
 8005e38:	d006      	beq.n	8005e48 <setvbuf+0x30>
 8005e3a:	f1b8 0f01 	cmp.w	r8, #1
 8005e3e:	f200 809a 	bhi.w	8005f76 <setvbuf+0x15e>
 8005e42:	2d00      	cmp	r5, #0
 8005e44:	f2c0 8097 	blt.w	8005f76 <setvbuf+0x15e>
 8005e48:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005e4a:	07d9      	lsls	r1, r3, #31
 8005e4c:	d405      	bmi.n	8005e5a <setvbuf+0x42>
 8005e4e:	89a3      	ldrh	r3, [r4, #12]
 8005e50:	059a      	lsls	r2, r3, #22
 8005e52:	d402      	bmi.n	8005e5a <setvbuf+0x42>
 8005e54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005e56:	f000 f9e4 	bl	8006222 <__retarget_lock_acquire_recursive>
 8005e5a:	4621      	mov	r1, r4
 8005e5c:	4638      	mov	r0, r7
 8005e5e:	f000 fe37 	bl	8006ad0 <_fflush_r>
 8005e62:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005e64:	b141      	cbz	r1, 8005e78 <setvbuf+0x60>
 8005e66:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005e6a:	4299      	cmp	r1, r3
 8005e6c:	d002      	beq.n	8005e74 <setvbuf+0x5c>
 8005e6e:	4638      	mov	r0, r7
 8005e70:	f000 f9da 	bl	8006228 <_free_r>
 8005e74:	2300      	movs	r3, #0
 8005e76:	6363      	str	r3, [r4, #52]	@ 0x34
 8005e78:	2300      	movs	r3, #0
 8005e7a:	61a3      	str	r3, [r4, #24]
 8005e7c:	6063      	str	r3, [r4, #4]
 8005e7e:	89a3      	ldrh	r3, [r4, #12]
 8005e80:	061b      	lsls	r3, r3, #24
 8005e82:	d503      	bpl.n	8005e8c <setvbuf+0x74>
 8005e84:	6921      	ldr	r1, [r4, #16]
 8005e86:	4638      	mov	r0, r7
 8005e88:	f000 f9ce 	bl	8006228 <_free_r>
 8005e8c:	89a3      	ldrh	r3, [r4, #12]
 8005e8e:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 8005e92:	f023 0303 	bic.w	r3, r3, #3
 8005e96:	f1b8 0f02 	cmp.w	r8, #2
 8005e9a:	81a3      	strh	r3, [r4, #12]
 8005e9c:	d061      	beq.n	8005f62 <setvbuf+0x14a>
 8005e9e:	ab01      	add	r3, sp, #4
 8005ea0:	466a      	mov	r2, sp
 8005ea2:	4621      	mov	r1, r4
 8005ea4:	4638      	mov	r0, r7
 8005ea6:	f000 fe3b 	bl	8006b20 <__swhatbuf_r>
 8005eaa:	89a3      	ldrh	r3, [r4, #12]
 8005eac:	4318      	orrs	r0, r3
 8005eae:	81a0      	strh	r0, [r4, #12]
 8005eb0:	bb2d      	cbnz	r5, 8005efe <setvbuf+0xe6>
 8005eb2:	9d00      	ldr	r5, [sp, #0]
 8005eb4:	4628      	mov	r0, r5
 8005eb6:	f000 fa01 	bl	80062bc <malloc>
 8005eba:	4606      	mov	r6, r0
 8005ebc:	2800      	cmp	r0, #0
 8005ebe:	d152      	bne.n	8005f66 <setvbuf+0x14e>
 8005ec0:	f8dd 9000 	ldr.w	r9, [sp]
 8005ec4:	45a9      	cmp	r9, r5
 8005ec6:	d140      	bne.n	8005f4a <setvbuf+0x132>
 8005ec8:	f04f 35ff 	mov.w	r5, #4294967295
 8005ecc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ed0:	f043 0202 	orr.w	r2, r3, #2
 8005ed4:	81a2      	strh	r2, [r4, #12]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	60a2      	str	r2, [r4, #8]
 8005eda:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 8005ede:	6022      	str	r2, [r4, #0]
 8005ee0:	6122      	str	r2, [r4, #16]
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	6162      	str	r2, [r4, #20]
 8005ee6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005ee8:	07d6      	lsls	r6, r2, #31
 8005eea:	d404      	bmi.n	8005ef6 <setvbuf+0xde>
 8005eec:	0598      	lsls	r0, r3, #22
 8005eee:	d402      	bmi.n	8005ef6 <setvbuf+0xde>
 8005ef0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005ef2:	f000 f997 	bl	8006224 <__retarget_lock_release_recursive>
 8005ef6:	4628      	mov	r0, r5
 8005ef8:	b003      	add	sp, #12
 8005efa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005efe:	2e00      	cmp	r6, #0
 8005f00:	d0d8      	beq.n	8005eb4 <setvbuf+0x9c>
 8005f02:	6a3b      	ldr	r3, [r7, #32]
 8005f04:	b913      	cbnz	r3, 8005f0c <setvbuf+0xf4>
 8005f06:	4638      	mov	r0, r7
 8005f08:	f7ff fed8 	bl	8005cbc <__sinit>
 8005f0c:	f1b8 0f01 	cmp.w	r8, #1
 8005f10:	bf08      	it	eq
 8005f12:	89a3      	ldrheq	r3, [r4, #12]
 8005f14:	6026      	str	r6, [r4, #0]
 8005f16:	bf04      	itt	eq
 8005f18:	f043 0301 	orreq.w	r3, r3, #1
 8005f1c:	81a3      	strheq	r3, [r4, #12]
 8005f1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f22:	f013 0208 	ands.w	r2, r3, #8
 8005f26:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8005f2a:	d01e      	beq.n	8005f6a <setvbuf+0x152>
 8005f2c:	07d9      	lsls	r1, r3, #31
 8005f2e:	bf41      	itttt	mi
 8005f30:	2200      	movmi	r2, #0
 8005f32:	426d      	negmi	r5, r5
 8005f34:	60a2      	strmi	r2, [r4, #8]
 8005f36:	61a5      	strmi	r5, [r4, #24]
 8005f38:	bf58      	it	pl
 8005f3a:	60a5      	strpl	r5, [r4, #8]
 8005f3c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005f3e:	07d2      	lsls	r2, r2, #31
 8005f40:	d401      	bmi.n	8005f46 <setvbuf+0x12e>
 8005f42:	059b      	lsls	r3, r3, #22
 8005f44:	d513      	bpl.n	8005f6e <setvbuf+0x156>
 8005f46:	2500      	movs	r5, #0
 8005f48:	e7d5      	b.n	8005ef6 <setvbuf+0xde>
 8005f4a:	4648      	mov	r0, r9
 8005f4c:	f000 f9b6 	bl	80062bc <malloc>
 8005f50:	4606      	mov	r6, r0
 8005f52:	2800      	cmp	r0, #0
 8005f54:	d0b8      	beq.n	8005ec8 <setvbuf+0xb0>
 8005f56:	89a3      	ldrh	r3, [r4, #12]
 8005f58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f5c:	81a3      	strh	r3, [r4, #12]
 8005f5e:	464d      	mov	r5, r9
 8005f60:	e7cf      	b.n	8005f02 <setvbuf+0xea>
 8005f62:	2500      	movs	r5, #0
 8005f64:	e7b2      	b.n	8005ecc <setvbuf+0xb4>
 8005f66:	46a9      	mov	r9, r5
 8005f68:	e7f5      	b.n	8005f56 <setvbuf+0x13e>
 8005f6a:	60a2      	str	r2, [r4, #8]
 8005f6c:	e7e6      	b.n	8005f3c <setvbuf+0x124>
 8005f6e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005f70:	f000 f958 	bl	8006224 <__retarget_lock_release_recursive>
 8005f74:	e7e7      	b.n	8005f46 <setvbuf+0x12e>
 8005f76:	f04f 35ff 	mov.w	r5, #4294967295
 8005f7a:	e7bc      	b.n	8005ef6 <setvbuf+0xde>
 8005f7c:	20000018 	.word	0x20000018

08005f80 <__sread>:
 8005f80:	b510      	push	{r4, lr}
 8005f82:	460c      	mov	r4, r1
 8005f84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f88:	f000 f8fc 	bl	8006184 <_read_r>
 8005f8c:	2800      	cmp	r0, #0
 8005f8e:	bfab      	itete	ge
 8005f90:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005f92:	89a3      	ldrhlt	r3, [r4, #12]
 8005f94:	181b      	addge	r3, r3, r0
 8005f96:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005f9a:	bfac      	ite	ge
 8005f9c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005f9e:	81a3      	strhlt	r3, [r4, #12]
 8005fa0:	bd10      	pop	{r4, pc}

08005fa2 <__swrite>:
 8005fa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fa6:	461f      	mov	r7, r3
 8005fa8:	898b      	ldrh	r3, [r1, #12]
 8005faa:	05db      	lsls	r3, r3, #23
 8005fac:	4605      	mov	r5, r0
 8005fae:	460c      	mov	r4, r1
 8005fb0:	4616      	mov	r6, r2
 8005fb2:	d505      	bpl.n	8005fc0 <__swrite+0x1e>
 8005fb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fb8:	2302      	movs	r3, #2
 8005fba:	2200      	movs	r2, #0
 8005fbc:	f000 f8d0 	bl	8006160 <_lseek_r>
 8005fc0:	89a3      	ldrh	r3, [r4, #12]
 8005fc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005fc6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005fca:	81a3      	strh	r3, [r4, #12]
 8005fcc:	4632      	mov	r2, r6
 8005fce:	463b      	mov	r3, r7
 8005fd0:	4628      	mov	r0, r5
 8005fd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005fd6:	f000 b8e7 	b.w	80061a8 <_write_r>

08005fda <__sseek>:
 8005fda:	b510      	push	{r4, lr}
 8005fdc:	460c      	mov	r4, r1
 8005fde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fe2:	f000 f8bd 	bl	8006160 <_lseek_r>
 8005fe6:	1c43      	adds	r3, r0, #1
 8005fe8:	89a3      	ldrh	r3, [r4, #12]
 8005fea:	bf15      	itete	ne
 8005fec:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005fee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005ff2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005ff6:	81a3      	strheq	r3, [r4, #12]
 8005ff8:	bf18      	it	ne
 8005ffa:	81a3      	strhne	r3, [r4, #12]
 8005ffc:	bd10      	pop	{r4, pc}

08005ffe <__sclose>:
 8005ffe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006002:	f000 b89d 	b.w	8006140 <_close_r>

08006006 <__swbuf_r>:
 8006006:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006008:	460e      	mov	r6, r1
 800600a:	4614      	mov	r4, r2
 800600c:	4605      	mov	r5, r0
 800600e:	b118      	cbz	r0, 8006018 <__swbuf_r+0x12>
 8006010:	6a03      	ldr	r3, [r0, #32]
 8006012:	b90b      	cbnz	r3, 8006018 <__swbuf_r+0x12>
 8006014:	f7ff fe52 	bl	8005cbc <__sinit>
 8006018:	69a3      	ldr	r3, [r4, #24]
 800601a:	60a3      	str	r3, [r4, #8]
 800601c:	89a3      	ldrh	r3, [r4, #12]
 800601e:	071a      	lsls	r2, r3, #28
 8006020:	d501      	bpl.n	8006026 <__swbuf_r+0x20>
 8006022:	6923      	ldr	r3, [r4, #16]
 8006024:	b943      	cbnz	r3, 8006038 <__swbuf_r+0x32>
 8006026:	4621      	mov	r1, r4
 8006028:	4628      	mov	r0, r5
 800602a:	f000 f82b 	bl	8006084 <__swsetup_r>
 800602e:	b118      	cbz	r0, 8006038 <__swbuf_r+0x32>
 8006030:	f04f 37ff 	mov.w	r7, #4294967295
 8006034:	4638      	mov	r0, r7
 8006036:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006038:	6823      	ldr	r3, [r4, #0]
 800603a:	6922      	ldr	r2, [r4, #16]
 800603c:	1a98      	subs	r0, r3, r2
 800603e:	6963      	ldr	r3, [r4, #20]
 8006040:	b2f6      	uxtb	r6, r6
 8006042:	4283      	cmp	r3, r0
 8006044:	4637      	mov	r7, r6
 8006046:	dc05      	bgt.n	8006054 <__swbuf_r+0x4e>
 8006048:	4621      	mov	r1, r4
 800604a:	4628      	mov	r0, r5
 800604c:	f000 fd40 	bl	8006ad0 <_fflush_r>
 8006050:	2800      	cmp	r0, #0
 8006052:	d1ed      	bne.n	8006030 <__swbuf_r+0x2a>
 8006054:	68a3      	ldr	r3, [r4, #8]
 8006056:	3b01      	subs	r3, #1
 8006058:	60a3      	str	r3, [r4, #8]
 800605a:	6823      	ldr	r3, [r4, #0]
 800605c:	1c5a      	adds	r2, r3, #1
 800605e:	6022      	str	r2, [r4, #0]
 8006060:	701e      	strb	r6, [r3, #0]
 8006062:	6962      	ldr	r2, [r4, #20]
 8006064:	1c43      	adds	r3, r0, #1
 8006066:	429a      	cmp	r2, r3
 8006068:	d004      	beq.n	8006074 <__swbuf_r+0x6e>
 800606a:	89a3      	ldrh	r3, [r4, #12]
 800606c:	07db      	lsls	r3, r3, #31
 800606e:	d5e1      	bpl.n	8006034 <__swbuf_r+0x2e>
 8006070:	2e0a      	cmp	r6, #10
 8006072:	d1df      	bne.n	8006034 <__swbuf_r+0x2e>
 8006074:	4621      	mov	r1, r4
 8006076:	4628      	mov	r0, r5
 8006078:	f000 fd2a 	bl	8006ad0 <_fflush_r>
 800607c:	2800      	cmp	r0, #0
 800607e:	d0d9      	beq.n	8006034 <__swbuf_r+0x2e>
 8006080:	e7d6      	b.n	8006030 <__swbuf_r+0x2a>
	...

08006084 <__swsetup_r>:
 8006084:	b538      	push	{r3, r4, r5, lr}
 8006086:	4b29      	ldr	r3, [pc, #164]	@ (800612c <__swsetup_r+0xa8>)
 8006088:	4605      	mov	r5, r0
 800608a:	6818      	ldr	r0, [r3, #0]
 800608c:	460c      	mov	r4, r1
 800608e:	b118      	cbz	r0, 8006098 <__swsetup_r+0x14>
 8006090:	6a03      	ldr	r3, [r0, #32]
 8006092:	b90b      	cbnz	r3, 8006098 <__swsetup_r+0x14>
 8006094:	f7ff fe12 	bl	8005cbc <__sinit>
 8006098:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800609c:	0719      	lsls	r1, r3, #28
 800609e:	d422      	bmi.n	80060e6 <__swsetup_r+0x62>
 80060a0:	06da      	lsls	r2, r3, #27
 80060a2:	d407      	bmi.n	80060b4 <__swsetup_r+0x30>
 80060a4:	2209      	movs	r2, #9
 80060a6:	602a      	str	r2, [r5, #0]
 80060a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80060ac:	81a3      	strh	r3, [r4, #12]
 80060ae:	f04f 30ff 	mov.w	r0, #4294967295
 80060b2:	e033      	b.n	800611c <__swsetup_r+0x98>
 80060b4:	0758      	lsls	r0, r3, #29
 80060b6:	d512      	bpl.n	80060de <__swsetup_r+0x5a>
 80060b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80060ba:	b141      	cbz	r1, 80060ce <__swsetup_r+0x4a>
 80060bc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80060c0:	4299      	cmp	r1, r3
 80060c2:	d002      	beq.n	80060ca <__swsetup_r+0x46>
 80060c4:	4628      	mov	r0, r5
 80060c6:	f000 f8af 	bl	8006228 <_free_r>
 80060ca:	2300      	movs	r3, #0
 80060cc:	6363      	str	r3, [r4, #52]	@ 0x34
 80060ce:	89a3      	ldrh	r3, [r4, #12]
 80060d0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80060d4:	81a3      	strh	r3, [r4, #12]
 80060d6:	2300      	movs	r3, #0
 80060d8:	6063      	str	r3, [r4, #4]
 80060da:	6923      	ldr	r3, [r4, #16]
 80060dc:	6023      	str	r3, [r4, #0]
 80060de:	89a3      	ldrh	r3, [r4, #12]
 80060e0:	f043 0308 	orr.w	r3, r3, #8
 80060e4:	81a3      	strh	r3, [r4, #12]
 80060e6:	6923      	ldr	r3, [r4, #16]
 80060e8:	b94b      	cbnz	r3, 80060fe <__swsetup_r+0x7a>
 80060ea:	89a3      	ldrh	r3, [r4, #12]
 80060ec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80060f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80060f4:	d003      	beq.n	80060fe <__swsetup_r+0x7a>
 80060f6:	4621      	mov	r1, r4
 80060f8:	4628      	mov	r0, r5
 80060fa:	f000 fd37 	bl	8006b6c <__smakebuf_r>
 80060fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006102:	f013 0201 	ands.w	r2, r3, #1
 8006106:	d00a      	beq.n	800611e <__swsetup_r+0x9a>
 8006108:	2200      	movs	r2, #0
 800610a:	60a2      	str	r2, [r4, #8]
 800610c:	6962      	ldr	r2, [r4, #20]
 800610e:	4252      	negs	r2, r2
 8006110:	61a2      	str	r2, [r4, #24]
 8006112:	6922      	ldr	r2, [r4, #16]
 8006114:	b942      	cbnz	r2, 8006128 <__swsetup_r+0xa4>
 8006116:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800611a:	d1c5      	bne.n	80060a8 <__swsetup_r+0x24>
 800611c:	bd38      	pop	{r3, r4, r5, pc}
 800611e:	0799      	lsls	r1, r3, #30
 8006120:	bf58      	it	pl
 8006122:	6962      	ldrpl	r2, [r4, #20]
 8006124:	60a2      	str	r2, [r4, #8]
 8006126:	e7f4      	b.n	8006112 <__swsetup_r+0x8e>
 8006128:	2000      	movs	r0, #0
 800612a:	e7f7      	b.n	800611c <__swsetup_r+0x98>
 800612c:	20000018 	.word	0x20000018

08006130 <memset>:
 8006130:	4402      	add	r2, r0
 8006132:	4603      	mov	r3, r0
 8006134:	4293      	cmp	r3, r2
 8006136:	d100      	bne.n	800613a <memset+0xa>
 8006138:	4770      	bx	lr
 800613a:	f803 1b01 	strb.w	r1, [r3], #1
 800613e:	e7f9      	b.n	8006134 <memset+0x4>

08006140 <_close_r>:
 8006140:	b538      	push	{r3, r4, r5, lr}
 8006142:	4d06      	ldr	r5, [pc, #24]	@ (800615c <_close_r+0x1c>)
 8006144:	2300      	movs	r3, #0
 8006146:	4604      	mov	r4, r0
 8006148:	4608      	mov	r0, r1
 800614a:	602b      	str	r3, [r5, #0]
 800614c:	f7fa ffbb 	bl	80010c6 <_close>
 8006150:	1c43      	adds	r3, r0, #1
 8006152:	d102      	bne.n	800615a <_close_r+0x1a>
 8006154:	682b      	ldr	r3, [r5, #0]
 8006156:	b103      	cbz	r3, 800615a <_close_r+0x1a>
 8006158:	6023      	str	r3, [r4, #0]
 800615a:	bd38      	pop	{r3, r4, r5, pc}
 800615c:	200003f0 	.word	0x200003f0

08006160 <_lseek_r>:
 8006160:	b538      	push	{r3, r4, r5, lr}
 8006162:	4d07      	ldr	r5, [pc, #28]	@ (8006180 <_lseek_r+0x20>)
 8006164:	4604      	mov	r4, r0
 8006166:	4608      	mov	r0, r1
 8006168:	4611      	mov	r1, r2
 800616a:	2200      	movs	r2, #0
 800616c:	602a      	str	r2, [r5, #0]
 800616e:	461a      	mov	r2, r3
 8006170:	f7fa ffd0 	bl	8001114 <_lseek>
 8006174:	1c43      	adds	r3, r0, #1
 8006176:	d102      	bne.n	800617e <_lseek_r+0x1e>
 8006178:	682b      	ldr	r3, [r5, #0]
 800617a:	b103      	cbz	r3, 800617e <_lseek_r+0x1e>
 800617c:	6023      	str	r3, [r4, #0]
 800617e:	bd38      	pop	{r3, r4, r5, pc}
 8006180:	200003f0 	.word	0x200003f0

08006184 <_read_r>:
 8006184:	b538      	push	{r3, r4, r5, lr}
 8006186:	4d07      	ldr	r5, [pc, #28]	@ (80061a4 <_read_r+0x20>)
 8006188:	4604      	mov	r4, r0
 800618a:	4608      	mov	r0, r1
 800618c:	4611      	mov	r1, r2
 800618e:	2200      	movs	r2, #0
 8006190:	602a      	str	r2, [r5, #0]
 8006192:	461a      	mov	r2, r3
 8006194:	f7fa ff7a 	bl	800108c <_read>
 8006198:	1c43      	adds	r3, r0, #1
 800619a:	d102      	bne.n	80061a2 <_read_r+0x1e>
 800619c:	682b      	ldr	r3, [r5, #0]
 800619e:	b103      	cbz	r3, 80061a2 <_read_r+0x1e>
 80061a0:	6023      	str	r3, [r4, #0]
 80061a2:	bd38      	pop	{r3, r4, r5, pc}
 80061a4:	200003f0 	.word	0x200003f0

080061a8 <_write_r>:
 80061a8:	b538      	push	{r3, r4, r5, lr}
 80061aa:	4d07      	ldr	r5, [pc, #28]	@ (80061c8 <_write_r+0x20>)
 80061ac:	4604      	mov	r4, r0
 80061ae:	4608      	mov	r0, r1
 80061b0:	4611      	mov	r1, r2
 80061b2:	2200      	movs	r2, #0
 80061b4:	602a      	str	r2, [r5, #0]
 80061b6:	461a      	mov	r2, r3
 80061b8:	f7fa fd96 	bl	8000ce8 <_write>
 80061bc:	1c43      	adds	r3, r0, #1
 80061be:	d102      	bne.n	80061c6 <_write_r+0x1e>
 80061c0:	682b      	ldr	r3, [r5, #0]
 80061c2:	b103      	cbz	r3, 80061c6 <_write_r+0x1e>
 80061c4:	6023      	str	r3, [r4, #0]
 80061c6:	bd38      	pop	{r3, r4, r5, pc}
 80061c8:	200003f0 	.word	0x200003f0

080061cc <__errno>:
 80061cc:	4b01      	ldr	r3, [pc, #4]	@ (80061d4 <__errno+0x8>)
 80061ce:	6818      	ldr	r0, [r3, #0]
 80061d0:	4770      	bx	lr
 80061d2:	bf00      	nop
 80061d4:	20000018 	.word	0x20000018

080061d8 <__libc_init_array>:
 80061d8:	b570      	push	{r4, r5, r6, lr}
 80061da:	4d0d      	ldr	r5, [pc, #52]	@ (8006210 <__libc_init_array+0x38>)
 80061dc:	4c0d      	ldr	r4, [pc, #52]	@ (8006214 <__libc_init_array+0x3c>)
 80061de:	1b64      	subs	r4, r4, r5
 80061e0:	10a4      	asrs	r4, r4, #2
 80061e2:	2600      	movs	r6, #0
 80061e4:	42a6      	cmp	r6, r4
 80061e6:	d109      	bne.n	80061fc <__libc_init_array+0x24>
 80061e8:	4d0b      	ldr	r5, [pc, #44]	@ (8006218 <__libc_init_array+0x40>)
 80061ea:	4c0c      	ldr	r4, [pc, #48]	@ (800621c <__libc_init_array+0x44>)
 80061ec:	f000 fd2c 	bl	8006c48 <_init>
 80061f0:	1b64      	subs	r4, r4, r5
 80061f2:	10a4      	asrs	r4, r4, #2
 80061f4:	2600      	movs	r6, #0
 80061f6:	42a6      	cmp	r6, r4
 80061f8:	d105      	bne.n	8006206 <__libc_init_array+0x2e>
 80061fa:	bd70      	pop	{r4, r5, r6, pc}
 80061fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006200:	4798      	blx	r3
 8006202:	3601      	adds	r6, #1
 8006204:	e7ee      	b.n	80061e4 <__libc_init_array+0xc>
 8006206:	f855 3b04 	ldr.w	r3, [r5], #4
 800620a:	4798      	blx	r3
 800620c:	3601      	adds	r6, #1
 800620e:	e7f2      	b.n	80061f6 <__libc_init_array+0x1e>
 8006210:	08006d20 	.word	0x08006d20
 8006214:	08006d20 	.word	0x08006d20
 8006218:	08006d20 	.word	0x08006d20
 800621c:	08006d24 	.word	0x08006d24

08006220 <__retarget_lock_init_recursive>:
 8006220:	4770      	bx	lr

08006222 <__retarget_lock_acquire_recursive>:
 8006222:	4770      	bx	lr

08006224 <__retarget_lock_release_recursive>:
 8006224:	4770      	bx	lr
	...

08006228 <_free_r>:
 8006228:	b538      	push	{r3, r4, r5, lr}
 800622a:	4605      	mov	r5, r0
 800622c:	2900      	cmp	r1, #0
 800622e:	d041      	beq.n	80062b4 <_free_r+0x8c>
 8006230:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006234:	1f0c      	subs	r4, r1, #4
 8006236:	2b00      	cmp	r3, #0
 8006238:	bfb8      	it	lt
 800623a:	18e4      	addlt	r4, r4, r3
 800623c:	f000 f8e8 	bl	8006410 <__malloc_lock>
 8006240:	4a1d      	ldr	r2, [pc, #116]	@ (80062b8 <_free_r+0x90>)
 8006242:	6813      	ldr	r3, [r2, #0]
 8006244:	b933      	cbnz	r3, 8006254 <_free_r+0x2c>
 8006246:	6063      	str	r3, [r4, #4]
 8006248:	6014      	str	r4, [r2, #0]
 800624a:	4628      	mov	r0, r5
 800624c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006250:	f000 b8e4 	b.w	800641c <__malloc_unlock>
 8006254:	42a3      	cmp	r3, r4
 8006256:	d908      	bls.n	800626a <_free_r+0x42>
 8006258:	6820      	ldr	r0, [r4, #0]
 800625a:	1821      	adds	r1, r4, r0
 800625c:	428b      	cmp	r3, r1
 800625e:	bf01      	itttt	eq
 8006260:	6819      	ldreq	r1, [r3, #0]
 8006262:	685b      	ldreq	r3, [r3, #4]
 8006264:	1809      	addeq	r1, r1, r0
 8006266:	6021      	streq	r1, [r4, #0]
 8006268:	e7ed      	b.n	8006246 <_free_r+0x1e>
 800626a:	461a      	mov	r2, r3
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	b10b      	cbz	r3, 8006274 <_free_r+0x4c>
 8006270:	42a3      	cmp	r3, r4
 8006272:	d9fa      	bls.n	800626a <_free_r+0x42>
 8006274:	6811      	ldr	r1, [r2, #0]
 8006276:	1850      	adds	r0, r2, r1
 8006278:	42a0      	cmp	r0, r4
 800627a:	d10b      	bne.n	8006294 <_free_r+0x6c>
 800627c:	6820      	ldr	r0, [r4, #0]
 800627e:	4401      	add	r1, r0
 8006280:	1850      	adds	r0, r2, r1
 8006282:	4283      	cmp	r3, r0
 8006284:	6011      	str	r1, [r2, #0]
 8006286:	d1e0      	bne.n	800624a <_free_r+0x22>
 8006288:	6818      	ldr	r0, [r3, #0]
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	6053      	str	r3, [r2, #4]
 800628e:	4408      	add	r0, r1
 8006290:	6010      	str	r0, [r2, #0]
 8006292:	e7da      	b.n	800624a <_free_r+0x22>
 8006294:	d902      	bls.n	800629c <_free_r+0x74>
 8006296:	230c      	movs	r3, #12
 8006298:	602b      	str	r3, [r5, #0]
 800629a:	e7d6      	b.n	800624a <_free_r+0x22>
 800629c:	6820      	ldr	r0, [r4, #0]
 800629e:	1821      	adds	r1, r4, r0
 80062a0:	428b      	cmp	r3, r1
 80062a2:	bf04      	itt	eq
 80062a4:	6819      	ldreq	r1, [r3, #0]
 80062a6:	685b      	ldreq	r3, [r3, #4]
 80062a8:	6063      	str	r3, [r4, #4]
 80062aa:	bf04      	itt	eq
 80062ac:	1809      	addeq	r1, r1, r0
 80062ae:	6021      	streq	r1, [r4, #0]
 80062b0:	6054      	str	r4, [r2, #4]
 80062b2:	e7ca      	b.n	800624a <_free_r+0x22>
 80062b4:	bd38      	pop	{r3, r4, r5, pc}
 80062b6:	bf00      	nop
 80062b8:	200003fc 	.word	0x200003fc

080062bc <malloc>:
 80062bc:	4b02      	ldr	r3, [pc, #8]	@ (80062c8 <malloc+0xc>)
 80062be:	4601      	mov	r1, r0
 80062c0:	6818      	ldr	r0, [r3, #0]
 80062c2:	f000 b825 	b.w	8006310 <_malloc_r>
 80062c6:	bf00      	nop
 80062c8:	20000018 	.word	0x20000018

080062cc <sbrk_aligned>:
 80062cc:	b570      	push	{r4, r5, r6, lr}
 80062ce:	4e0f      	ldr	r6, [pc, #60]	@ (800630c <sbrk_aligned+0x40>)
 80062d0:	460c      	mov	r4, r1
 80062d2:	6831      	ldr	r1, [r6, #0]
 80062d4:	4605      	mov	r5, r0
 80062d6:	b911      	cbnz	r1, 80062de <sbrk_aligned+0x12>
 80062d8:	f000 fca6 	bl	8006c28 <_sbrk_r>
 80062dc:	6030      	str	r0, [r6, #0]
 80062de:	4621      	mov	r1, r4
 80062e0:	4628      	mov	r0, r5
 80062e2:	f000 fca1 	bl	8006c28 <_sbrk_r>
 80062e6:	1c43      	adds	r3, r0, #1
 80062e8:	d103      	bne.n	80062f2 <sbrk_aligned+0x26>
 80062ea:	f04f 34ff 	mov.w	r4, #4294967295
 80062ee:	4620      	mov	r0, r4
 80062f0:	bd70      	pop	{r4, r5, r6, pc}
 80062f2:	1cc4      	adds	r4, r0, #3
 80062f4:	f024 0403 	bic.w	r4, r4, #3
 80062f8:	42a0      	cmp	r0, r4
 80062fa:	d0f8      	beq.n	80062ee <sbrk_aligned+0x22>
 80062fc:	1a21      	subs	r1, r4, r0
 80062fe:	4628      	mov	r0, r5
 8006300:	f000 fc92 	bl	8006c28 <_sbrk_r>
 8006304:	3001      	adds	r0, #1
 8006306:	d1f2      	bne.n	80062ee <sbrk_aligned+0x22>
 8006308:	e7ef      	b.n	80062ea <sbrk_aligned+0x1e>
 800630a:	bf00      	nop
 800630c:	200003f8 	.word	0x200003f8

08006310 <_malloc_r>:
 8006310:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006314:	1ccd      	adds	r5, r1, #3
 8006316:	f025 0503 	bic.w	r5, r5, #3
 800631a:	3508      	adds	r5, #8
 800631c:	2d0c      	cmp	r5, #12
 800631e:	bf38      	it	cc
 8006320:	250c      	movcc	r5, #12
 8006322:	2d00      	cmp	r5, #0
 8006324:	4606      	mov	r6, r0
 8006326:	db01      	blt.n	800632c <_malloc_r+0x1c>
 8006328:	42a9      	cmp	r1, r5
 800632a:	d904      	bls.n	8006336 <_malloc_r+0x26>
 800632c:	230c      	movs	r3, #12
 800632e:	6033      	str	r3, [r6, #0]
 8006330:	2000      	movs	r0, #0
 8006332:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006336:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800640c <_malloc_r+0xfc>
 800633a:	f000 f869 	bl	8006410 <__malloc_lock>
 800633e:	f8d8 3000 	ldr.w	r3, [r8]
 8006342:	461c      	mov	r4, r3
 8006344:	bb44      	cbnz	r4, 8006398 <_malloc_r+0x88>
 8006346:	4629      	mov	r1, r5
 8006348:	4630      	mov	r0, r6
 800634a:	f7ff ffbf 	bl	80062cc <sbrk_aligned>
 800634e:	1c43      	adds	r3, r0, #1
 8006350:	4604      	mov	r4, r0
 8006352:	d158      	bne.n	8006406 <_malloc_r+0xf6>
 8006354:	f8d8 4000 	ldr.w	r4, [r8]
 8006358:	4627      	mov	r7, r4
 800635a:	2f00      	cmp	r7, #0
 800635c:	d143      	bne.n	80063e6 <_malloc_r+0xd6>
 800635e:	2c00      	cmp	r4, #0
 8006360:	d04b      	beq.n	80063fa <_malloc_r+0xea>
 8006362:	6823      	ldr	r3, [r4, #0]
 8006364:	4639      	mov	r1, r7
 8006366:	4630      	mov	r0, r6
 8006368:	eb04 0903 	add.w	r9, r4, r3
 800636c:	f000 fc5c 	bl	8006c28 <_sbrk_r>
 8006370:	4581      	cmp	r9, r0
 8006372:	d142      	bne.n	80063fa <_malloc_r+0xea>
 8006374:	6821      	ldr	r1, [r4, #0]
 8006376:	1a6d      	subs	r5, r5, r1
 8006378:	4629      	mov	r1, r5
 800637a:	4630      	mov	r0, r6
 800637c:	f7ff ffa6 	bl	80062cc <sbrk_aligned>
 8006380:	3001      	adds	r0, #1
 8006382:	d03a      	beq.n	80063fa <_malloc_r+0xea>
 8006384:	6823      	ldr	r3, [r4, #0]
 8006386:	442b      	add	r3, r5
 8006388:	6023      	str	r3, [r4, #0]
 800638a:	f8d8 3000 	ldr.w	r3, [r8]
 800638e:	685a      	ldr	r2, [r3, #4]
 8006390:	bb62      	cbnz	r2, 80063ec <_malloc_r+0xdc>
 8006392:	f8c8 7000 	str.w	r7, [r8]
 8006396:	e00f      	b.n	80063b8 <_malloc_r+0xa8>
 8006398:	6822      	ldr	r2, [r4, #0]
 800639a:	1b52      	subs	r2, r2, r5
 800639c:	d420      	bmi.n	80063e0 <_malloc_r+0xd0>
 800639e:	2a0b      	cmp	r2, #11
 80063a0:	d917      	bls.n	80063d2 <_malloc_r+0xc2>
 80063a2:	1961      	adds	r1, r4, r5
 80063a4:	42a3      	cmp	r3, r4
 80063a6:	6025      	str	r5, [r4, #0]
 80063a8:	bf18      	it	ne
 80063aa:	6059      	strne	r1, [r3, #4]
 80063ac:	6863      	ldr	r3, [r4, #4]
 80063ae:	bf08      	it	eq
 80063b0:	f8c8 1000 	streq.w	r1, [r8]
 80063b4:	5162      	str	r2, [r4, r5]
 80063b6:	604b      	str	r3, [r1, #4]
 80063b8:	4630      	mov	r0, r6
 80063ba:	f000 f82f 	bl	800641c <__malloc_unlock>
 80063be:	f104 000b 	add.w	r0, r4, #11
 80063c2:	1d23      	adds	r3, r4, #4
 80063c4:	f020 0007 	bic.w	r0, r0, #7
 80063c8:	1ac2      	subs	r2, r0, r3
 80063ca:	bf1c      	itt	ne
 80063cc:	1a1b      	subne	r3, r3, r0
 80063ce:	50a3      	strne	r3, [r4, r2]
 80063d0:	e7af      	b.n	8006332 <_malloc_r+0x22>
 80063d2:	6862      	ldr	r2, [r4, #4]
 80063d4:	42a3      	cmp	r3, r4
 80063d6:	bf0c      	ite	eq
 80063d8:	f8c8 2000 	streq.w	r2, [r8]
 80063dc:	605a      	strne	r2, [r3, #4]
 80063de:	e7eb      	b.n	80063b8 <_malloc_r+0xa8>
 80063e0:	4623      	mov	r3, r4
 80063e2:	6864      	ldr	r4, [r4, #4]
 80063e4:	e7ae      	b.n	8006344 <_malloc_r+0x34>
 80063e6:	463c      	mov	r4, r7
 80063e8:	687f      	ldr	r7, [r7, #4]
 80063ea:	e7b6      	b.n	800635a <_malloc_r+0x4a>
 80063ec:	461a      	mov	r2, r3
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	42a3      	cmp	r3, r4
 80063f2:	d1fb      	bne.n	80063ec <_malloc_r+0xdc>
 80063f4:	2300      	movs	r3, #0
 80063f6:	6053      	str	r3, [r2, #4]
 80063f8:	e7de      	b.n	80063b8 <_malloc_r+0xa8>
 80063fa:	230c      	movs	r3, #12
 80063fc:	6033      	str	r3, [r6, #0]
 80063fe:	4630      	mov	r0, r6
 8006400:	f000 f80c 	bl	800641c <__malloc_unlock>
 8006404:	e794      	b.n	8006330 <_malloc_r+0x20>
 8006406:	6005      	str	r5, [r0, #0]
 8006408:	e7d6      	b.n	80063b8 <_malloc_r+0xa8>
 800640a:	bf00      	nop
 800640c:	200003fc 	.word	0x200003fc

08006410 <__malloc_lock>:
 8006410:	4801      	ldr	r0, [pc, #4]	@ (8006418 <__malloc_lock+0x8>)
 8006412:	f7ff bf06 	b.w	8006222 <__retarget_lock_acquire_recursive>
 8006416:	bf00      	nop
 8006418:	200003f4 	.word	0x200003f4

0800641c <__malloc_unlock>:
 800641c:	4801      	ldr	r0, [pc, #4]	@ (8006424 <__malloc_unlock+0x8>)
 800641e:	f7ff bf01 	b.w	8006224 <__retarget_lock_release_recursive>
 8006422:	bf00      	nop
 8006424:	200003f4 	.word	0x200003f4

08006428 <__sfputc_r>:
 8006428:	6893      	ldr	r3, [r2, #8]
 800642a:	3b01      	subs	r3, #1
 800642c:	2b00      	cmp	r3, #0
 800642e:	b410      	push	{r4}
 8006430:	6093      	str	r3, [r2, #8]
 8006432:	da08      	bge.n	8006446 <__sfputc_r+0x1e>
 8006434:	6994      	ldr	r4, [r2, #24]
 8006436:	42a3      	cmp	r3, r4
 8006438:	db01      	blt.n	800643e <__sfputc_r+0x16>
 800643a:	290a      	cmp	r1, #10
 800643c:	d103      	bne.n	8006446 <__sfputc_r+0x1e>
 800643e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006442:	f7ff bde0 	b.w	8006006 <__swbuf_r>
 8006446:	6813      	ldr	r3, [r2, #0]
 8006448:	1c58      	adds	r0, r3, #1
 800644a:	6010      	str	r0, [r2, #0]
 800644c:	7019      	strb	r1, [r3, #0]
 800644e:	4608      	mov	r0, r1
 8006450:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006454:	4770      	bx	lr

08006456 <__sfputs_r>:
 8006456:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006458:	4606      	mov	r6, r0
 800645a:	460f      	mov	r7, r1
 800645c:	4614      	mov	r4, r2
 800645e:	18d5      	adds	r5, r2, r3
 8006460:	42ac      	cmp	r4, r5
 8006462:	d101      	bne.n	8006468 <__sfputs_r+0x12>
 8006464:	2000      	movs	r0, #0
 8006466:	e007      	b.n	8006478 <__sfputs_r+0x22>
 8006468:	f814 1b01 	ldrb.w	r1, [r4], #1
 800646c:	463a      	mov	r2, r7
 800646e:	4630      	mov	r0, r6
 8006470:	f7ff ffda 	bl	8006428 <__sfputc_r>
 8006474:	1c43      	adds	r3, r0, #1
 8006476:	d1f3      	bne.n	8006460 <__sfputs_r+0xa>
 8006478:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800647c <_vfiprintf_r>:
 800647c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006480:	460d      	mov	r5, r1
 8006482:	b09d      	sub	sp, #116	@ 0x74
 8006484:	4614      	mov	r4, r2
 8006486:	4698      	mov	r8, r3
 8006488:	4606      	mov	r6, r0
 800648a:	b118      	cbz	r0, 8006494 <_vfiprintf_r+0x18>
 800648c:	6a03      	ldr	r3, [r0, #32]
 800648e:	b90b      	cbnz	r3, 8006494 <_vfiprintf_r+0x18>
 8006490:	f7ff fc14 	bl	8005cbc <__sinit>
 8006494:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006496:	07d9      	lsls	r1, r3, #31
 8006498:	d405      	bmi.n	80064a6 <_vfiprintf_r+0x2a>
 800649a:	89ab      	ldrh	r3, [r5, #12]
 800649c:	059a      	lsls	r2, r3, #22
 800649e:	d402      	bmi.n	80064a6 <_vfiprintf_r+0x2a>
 80064a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80064a2:	f7ff febe 	bl	8006222 <__retarget_lock_acquire_recursive>
 80064a6:	89ab      	ldrh	r3, [r5, #12]
 80064a8:	071b      	lsls	r3, r3, #28
 80064aa:	d501      	bpl.n	80064b0 <_vfiprintf_r+0x34>
 80064ac:	692b      	ldr	r3, [r5, #16]
 80064ae:	b99b      	cbnz	r3, 80064d8 <_vfiprintf_r+0x5c>
 80064b0:	4629      	mov	r1, r5
 80064b2:	4630      	mov	r0, r6
 80064b4:	f7ff fde6 	bl	8006084 <__swsetup_r>
 80064b8:	b170      	cbz	r0, 80064d8 <_vfiprintf_r+0x5c>
 80064ba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80064bc:	07dc      	lsls	r4, r3, #31
 80064be:	d504      	bpl.n	80064ca <_vfiprintf_r+0x4e>
 80064c0:	f04f 30ff 	mov.w	r0, #4294967295
 80064c4:	b01d      	add	sp, #116	@ 0x74
 80064c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064ca:	89ab      	ldrh	r3, [r5, #12]
 80064cc:	0598      	lsls	r0, r3, #22
 80064ce:	d4f7      	bmi.n	80064c0 <_vfiprintf_r+0x44>
 80064d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80064d2:	f7ff fea7 	bl	8006224 <__retarget_lock_release_recursive>
 80064d6:	e7f3      	b.n	80064c0 <_vfiprintf_r+0x44>
 80064d8:	2300      	movs	r3, #0
 80064da:	9309      	str	r3, [sp, #36]	@ 0x24
 80064dc:	2320      	movs	r3, #32
 80064de:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80064e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80064e6:	2330      	movs	r3, #48	@ 0x30
 80064e8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006698 <_vfiprintf_r+0x21c>
 80064ec:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80064f0:	f04f 0901 	mov.w	r9, #1
 80064f4:	4623      	mov	r3, r4
 80064f6:	469a      	mov	sl, r3
 80064f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80064fc:	b10a      	cbz	r2, 8006502 <_vfiprintf_r+0x86>
 80064fe:	2a25      	cmp	r2, #37	@ 0x25
 8006500:	d1f9      	bne.n	80064f6 <_vfiprintf_r+0x7a>
 8006502:	ebba 0b04 	subs.w	fp, sl, r4
 8006506:	d00b      	beq.n	8006520 <_vfiprintf_r+0xa4>
 8006508:	465b      	mov	r3, fp
 800650a:	4622      	mov	r2, r4
 800650c:	4629      	mov	r1, r5
 800650e:	4630      	mov	r0, r6
 8006510:	f7ff ffa1 	bl	8006456 <__sfputs_r>
 8006514:	3001      	adds	r0, #1
 8006516:	f000 80a7 	beq.w	8006668 <_vfiprintf_r+0x1ec>
 800651a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800651c:	445a      	add	r2, fp
 800651e:	9209      	str	r2, [sp, #36]	@ 0x24
 8006520:	f89a 3000 	ldrb.w	r3, [sl]
 8006524:	2b00      	cmp	r3, #0
 8006526:	f000 809f 	beq.w	8006668 <_vfiprintf_r+0x1ec>
 800652a:	2300      	movs	r3, #0
 800652c:	f04f 32ff 	mov.w	r2, #4294967295
 8006530:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006534:	f10a 0a01 	add.w	sl, sl, #1
 8006538:	9304      	str	r3, [sp, #16]
 800653a:	9307      	str	r3, [sp, #28]
 800653c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006540:	931a      	str	r3, [sp, #104]	@ 0x68
 8006542:	4654      	mov	r4, sl
 8006544:	2205      	movs	r2, #5
 8006546:	f814 1b01 	ldrb.w	r1, [r4], #1
 800654a:	4853      	ldr	r0, [pc, #332]	@ (8006698 <_vfiprintf_r+0x21c>)
 800654c:	f7f9 fe40 	bl	80001d0 <memchr>
 8006550:	9a04      	ldr	r2, [sp, #16]
 8006552:	b9d8      	cbnz	r0, 800658c <_vfiprintf_r+0x110>
 8006554:	06d1      	lsls	r1, r2, #27
 8006556:	bf44      	itt	mi
 8006558:	2320      	movmi	r3, #32
 800655a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800655e:	0713      	lsls	r3, r2, #28
 8006560:	bf44      	itt	mi
 8006562:	232b      	movmi	r3, #43	@ 0x2b
 8006564:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006568:	f89a 3000 	ldrb.w	r3, [sl]
 800656c:	2b2a      	cmp	r3, #42	@ 0x2a
 800656e:	d015      	beq.n	800659c <_vfiprintf_r+0x120>
 8006570:	9a07      	ldr	r2, [sp, #28]
 8006572:	4654      	mov	r4, sl
 8006574:	2000      	movs	r0, #0
 8006576:	f04f 0c0a 	mov.w	ip, #10
 800657a:	4621      	mov	r1, r4
 800657c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006580:	3b30      	subs	r3, #48	@ 0x30
 8006582:	2b09      	cmp	r3, #9
 8006584:	d94b      	bls.n	800661e <_vfiprintf_r+0x1a2>
 8006586:	b1b0      	cbz	r0, 80065b6 <_vfiprintf_r+0x13a>
 8006588:	9207      	str	r2, [sp, #28]
 800658a:	e014      	b.n	80065b6 <_vfiprintf_r+0x13a>
 800658c:	eba0 0308 	sub.w	r3, r0, r8
 8006590:	fa09 f303 	lsl.w	r3, r9, r3
 8006594:	4313      	orrs	r3, r2
 8006596:	9304      	str	r3, [sp, #16]
 8006598:	46a2      	mov	sl, r4
 800659a:	e7d2      	b.n	8006542 <_vfiprintf_r+0xc6>
 800659c:	9b03      	ldr	r3, [sp, #12]
 800659e:	1d19      	adds	r1, r3, #4
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	9103      	str	r1, [sp, #12]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	bfbb      	ittet	lt
 80065a8:	425b      	neglt	r3, r3
 80065aa:	f042 0202 	orrlt.w	r2, r2, #2
 80065ae:	9307      	strge	r3, [sp, #28]
 80065b0:	9307      	strlt	r3, [sp, #28]
 80065b2:	bfb8      	it	lt
 80065b4:	9204      	strlt	r2, [sp, #16]
 80065b6:	7823      	ldrb	r3, [r4, #0]
 80065b8:	2b2e      	cmp	r3, #46	@ 0x2e
 80065ba:	d10a      	bne.n	80065d2 <_vfiprintf_r+0x156>
 80065bc:	7863      	ldrb	r3, [r4, #1]
 80065be:	2b2a      	cmp	r3, #42	@ 0x2a
 80065c0:	d132      	bne.n	8006628 <_vfiprintf_r+0x1ac>
 80065c2:	9b03      	ldr	r3, [sp, #12]
 80065c4:	1d1a      	adds	r2, r3, #4
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	9203      	str	r2, [sp, #12]
 80065ca:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80065ce:	3402      	adds	r4, #2
 80065d0:	9305      	str	r3, [sp, #20]
 80065d2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80066a8 <_vfiprintf_r+0x22c>
 80065d6:	7821      	ldrb	r1, [r4, #0]
 80065d8:	2203      	movs	r2, #3
 80065da:	4650      	mov	r0, sl
 80065dc:	f7f9 fdf8 	bl	80001d0 <memchr>
 80065e0:	b138      	cbz	r0, 80065f2 <_vfiprintf_r+0x176>
 80065e2:	9b04      	ldr	r3, [sp, #16]
 80065e4:	eba0 000a 	sub.w	r0, r0, sl
 80065e8:	2240      	movs	r2, #64	@ 0x40
 80065ea:	4082      	lsls	r2, r0
 80065ec:	4313      	orrs	r3, r2
 80065ee:	3401      	adds	r4, #1
 80065f0:	9304      	str	r3, [sp, #16]
 80065f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065f6:	4829      	ldr	r0, [pc, #164]	@ (800669c <_vfiprintf_r+0x220>)
 80065f8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80065fc:	2206      	movs	r2, #6
 80065fe:	f7f9 fde7 	bl	80001d0 <memchr>
 8006602:	2800      	cmp	r0, #0
 8006604:	d03f      	beq.n	8006686 <_vfiprintf_r+0x20a>
 8006606:	4b26      	ldr	r3, [pc, #152]	@ (80066a0 <_vfiprintf_r+0x224>)
 8006608:	bb1b      	cbnz	r3, 8006652 <_vfiprintf_r+0x1d6>
 800660a:	9b03      	ldr	r3, [sp, #12]
 800660c:	3307      	adds	r3, #7
 800660e:	f023 0307 	bic.w	r3, r3, #7
 8006612:	3308      	adds	r3, #8
 8006614:	9303      	str	r3, [sp, #12]
 8006616:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006618:	443b      	add	r3, r7
 800661a:	9309      	str	r3, [sp, #36]	@ 0x24
 800661c:	e76a      	b.n	80064f4 <_vfiprintf_r+0x78>
 800661e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006622:	460c      	mov	r4, r1
 8006624:	2001      	movs	r0, #1
 8006626:	e7a8      	b.n	800657a <_vfiprintf_r+0xfe>
 8006628:	2300      	movs	r3, #0
 800662a:	3401      	adds	r4, #1
 800662c:	9305      	str	r3, [sp, #20]
 800662e:	4619      	mov	r1, r3
 8006630:	f04f 0c0a 	mov.w	ip, #10
 8006634:	4620      	mov	r0, r4
 8006636:	f810 2b01 	ldrb.w	r2, [r0], #1
 800663a:	3a30      	subs	r2, #48	@ 0x30
 800663c:	2a09      	cmp	r2, #9
 800663e:	d903      	bls.n	8006648 <_vfiprintf_r+0x1cc>
 8006640:	2b00      	cmp	r3, #0
 8006642:	d0c6      	beq.n	80065d2 <_vfiprintf_r+0x156>
 8006644:	9105      	str	r1, [sp, #20]
 8006646:	e7c4      	b.n	80065d2 <_vfiprintf_r+0x156>
 8006648:	fb0c 2101 	mla	r1, ip, r1, r2
 800664c:	4604      	mov	r4, r0
 800664e:	2301      	movs	r3, #1
 8006650:	e7f0      	b.n	8006634 <_vfiprintf_r+0x1b8>
 8006652:	ab03      	add	r3, sp, #12
 8006654:	9300      	str	r3, [sp, #0]
 8006656:	462a      	mov	r2, r5
 8006658:	4b12      	ldr	r3, [pc, #72]	@ (80066a4 <_vfiprintf_r+0x228>)
 800665a:	a904      	add	r1, sp, #16
 800665c:	4630      	mov	r0, r6
 800665e:	f3af 8000 	nop.w
 8006662:	4607      	mov	r7, r0
 8006664:	1c78      	adds	r0, r7, #1
 8006666:	d1d6      	bne.n	8006616 <_vfiprintf_r+0x19a>
 8006668:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800666a:	07d9      	lsls	r1, r3, #31
 800666c:	d405      	bmi.n	800667a <_vfiprintf_r+0x1fe>
 800666e:	89ab      	ldrh	r3, [r5, #12]
 8006670:	059a      	lsls	r2, r3, #22
 8006672:	d402      	bmi.n	800667a <_vfiprintf_r+0x1fe>
 8006674:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006676:	f7ff fdd5 	bl	8006224 <__retarget_lock_release_recursive>
 800667a:	89ab      	ldrh	r3, [r5, #12]
 800667c:	065b      	lsls	r3, r3, #25
 800667e:	f53f af1f 	bmi.w	80064c0 <_vfiprintf_r+0x44>
 8006682:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006684:	e71e      	b.n	80064c4 <_vfiprintf_r+0x48>
 8006686:	ab03      	add	r3, sp, #12
 8006688:	9300      	str	r3, [sp, #0]
 800668a:	462a      	mov	r2, r5
 800668c:	4b05      	ldr	r3, [pc, #20]	@ (80066a4 <_vfiprintf_r+0x228>)
 800668e:	a904      	add	r1, sp, #16
 8006690:	4630      	mov	r0, r6
 8006692:	f000 f879 	bl	8006788 <_printf_i>
 8006696:	e7e4      	b.n	8006662 <_vfiprintf_r+0x1e6>
 8006698:	08006ce4 	.word	0x08006ce4
 800669c:	08006cee 	.word	0x08006cee
 80066a0:	00000000 	.word	0x00000000
 80066a4:	08006457 	.word	0x08006457
 80066a8:	08006cea 	.word	0x08006cea

080066ac <_printf_common>:
 80066ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066b0:	4616      	mov	r6, r2
 80066b2:	4698      	mov	r8, r3
 80066b4:	688a      	ldr	r2, [r1, #8]
 80066b6:	690b      	ldr	r3, [r1, #16]
 80066b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80066bc:	4293      	cmp	r3, r2
 80066be:	bfb8      	it	lt
 80066c0:	4613      	movlt	r3, r2
 80066c2:	6033      	str	r3, [r6, #0]
 80066c4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80066c8:	4607      	mov	r7, r0
 80066ca:	460c      	mov	r4, r1
 80066cc:	b10a      	cbz	r2, 80066d2 <_printf_common+0x26>
 80066ce:	3301      	adds	r3, #1
 80066d0:	6033      	str	r3, [r6, #0]
 80066d2:	6823      	ldr	r3, [r4, #0]
 80066d4:	0699      	lsls	r1, r3, #26
 80066d6:	bf42      	ittt	mi
 80066d8:	6833      	ldrmi	r3, [r6, #0]
 80066da:	3302      	addmi	r3, #2
 80066dc:	6033      	strmi	r3, [r6, #0]
 80066de:	6825      	ldr	r5, [r4, #0]
 80066e0:	f015 0506 	ands.w	r5, r5, #6
 80066e4:	d106      	bne.n	80066f4 <_printf_common+0x48>
 80066e6:	f104 0a19 	add.w	sl, r4, #25
 80066ea:	68e3      	ldr	r3, [r4, #12]
 80066ec:	6832      	ldr	r2, [r6, #0]
 80066ee:	1a9b      	subs	r3, r3, r2
 80066f0:	42ab      	cmp	r3, r5
 80066f2:	dc26      	bgt.n	8006742 <_printf_common+0x96>
 80066f4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80066f8:	6822      	ldr	r2, [r4, #0]
 80066fa:	3b00      	subs	r3, #0
 80066fc:	bf18      	it	ne
 80066fe:	2301      	movne	r3, #1
 8006700:	0692      	lsls	r2, r2, #26
 8006702:	d42b      	bmi.n	800675c <_printf_common+0xb0>
 8006704:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006708:	4641      	mov	r1, r8
 800670a:	4638      	mov	r0, r7
 800670c:	47c8      	blx	r9
 800670e:	3001      	adds	r0, #1
 8006710:	d01e      	beq.n	8006750 <_printf_common+0xa4>
 8006712:	6823      	ldr	r3, [r4, #0]
 8006714:	6922      	ldr	r2, [r4, #16]
 8006716:	f003 0306 	and.w	r3, r3, #6
 800671a:	2b04      	cmp	r3, #4
 800671c:	bf02      	ittt	eq
 800671e:	68e5      	ldreq	r5, [r4, #12]
 8006720:	6833      	ldreq	r3, [r6, #0]
 8006722:	1aed      	subeq	r5, r5, r3
 8006724:	68a3      	ldr	r3, [r4, #8]
 8006726:	bf0c      	ite	eq
 8006728:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800672c:	2500      	movne	r5, #0
 800672e:	4293      	cmp	r3, r2
 8006730:	bfc4      	itt	gt
 8006732:	1a9b      	subgt	r3, r3, r2
 8006734:	18ed      	addgt	r5, r5, r3
 8006736:	2600      	movs	r6, #0
 8006738:	341a      	adds	r4, #26
 800673a:	42b5      	cmp	r5, r6
 800673c:	d11a      	bne.n	8006774 <_printf_common+0xc8>
 800673e:	2000      	movs	r0, #0
 8006740:	e008      	b.n	8006754 <_printf_common+0xa8>
 8006742:	2301      	movs	r3, #1
 8006744:	4652      	mov	r2, sl
 8006746:	4641      	mov	r1, r8
 8006748:	4638      	mov	r0, r7
 800674a:	47c8      	blx	r9
 800674c:	3001      	adds	r0, #1
 800674e:	d103      	bne.n	8006758 <_printf_common+0xac>
 8006750:	f04f 30ff 	mov.w	r0, #4294967295
 8006754:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006758:	3501      	adds	r5, #1
 800675a:	e7c6      	b.n	80066ea <_printf_common+0x3e>
 800675c:	18e1      	adds	r1, r4, r3
 800675e:	1c5a      	adds	r2, r3, #1
 8006760:	2030      	movs	r0, #48	@ 0x30
 8006762:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006766:	4422      	add	r2, r4
 8006768:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800676c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006770:	3302      	adds	r3, #2
 8006772:	e7c7      	b.n	8006704 <_printf_common+0x58>
 8006774:	2301      	movs	r3, #1
 8006776:	4622      	mov	r2, r4
 8006778:	4641      	mov	r1, r8
 800677a:	4638      	mov	r0, r7
 800677c:	47c8      	blx	r9
 800677e:	3001      	adds	r0, #1
 8006780:	d0e6      	beq.n	8006750 <_printf_common+0xa4>
 8006782:	3601      	adds	r6, #1
 8006784:	e7d9      	b.n	800673a <_printf_common+0x8e>
	...

08006788 <_printf_i>:
 8006788:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800678c:	7e0f      	ldrb	r7, [r1, #24]
 800678e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006790:	2f78      	cmp	r7, #120	@ 0x78
 8006792:	4691      	mov	r9, r2
 8006794:	4680      	mov	r8, r0
 8006796:	460c      	mov	r4, r1
 8006798:	469a      	mov	sl, r3
 800679a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800679e:	d807      	bhi.n	80067b0 <_printf_i+0x28>
 80067a0:	2f62      	cmp	r7, #98	@ 0x62
 80067a2:	d80a      	bhi.n	80067ba <_printf_i+0x32>
 80067a4:	2f00      	cmp	r7, #0
 80067a6:	f000 80d2 	beq.w	800694e <_printf_i+0x1c6>
 80067aa:	2f58      	cmp	r7, #88	@ 0x58
 80067ac:	f000 80b9 	beq.w	8006922 <_printf_i+0x19a>
 80067b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80067b4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80067b8:	e03a      	b.n	8006830 <_printf_i+0xa8>
 80067ba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80067be:	2b15      	cmp	r3, #21
 80067c0:	d8f6      	bhi.n	80067b0 <_printf_i+0x28>
 80067c2:	a101      	add	r1, pc, #4	@ (adr r1, 80067c8 <_printf_i+0x40>)
 80067c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80067c8:	08006821 	.word	0x08006821
 80067cc:	08006835 	.word	0x08006835
 80067d0:	080067b1 	.word	0x080067b1
 80067d4:	080067b1 	.word	0x080067b1
 80067d8:	080067b1 	.word	0x080067b1
 80067dc:	080067b1 	.word	0x080067b1
 80067e0:	08006835 	.word	0x08006835
 80067e4:	080067b1 	.word	0x080067b1
 80067e8:	080067b1 	.word	0x080067b1
 80067ec:	080067b1 	.word	0x080067b1
 80067f0:	080067b1 	.word	0x080067b1
 80067f4:	08006935 	.word	0x08006935
 80067f8:	0800685f 	.word	0x0800685f
 80067fc:	080068ef 	.word	0x080068ef
 8006800:	080067b1 	.word	0x080067b1
 8006804:	080067b1 	.word	0x080067b1
 8006808:	08006957 	.word	0x08006957
 800680c:	080067b1 	.word	0x080067b1
 8006810:	0800685f 	.word	0x0800685f
 8006814:	080067b1 	.word	0x080067b1
 8006818:	080067b1 	.word	0x080067b1
 800681c:	080068f7 	.word	0x080068f7
 8006820:	6833      	ldr	r3, [r6, #0]
 8006822:	1d1a      	adds	r2, r3, #4
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	6032      	str	r2, [r6, #0]
 8006828:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800682c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006830:	2301      	movs	r3, #1
 8006832:	e09d      	b.n	8006970 <_printf_i+0x1e8>
 8006834:	6833      	ldr	r3, [r6, #0]
 8006836:	6820      	ldr	r0, [r4, #0]
 8006838:	1d19      	adds	r1, r3, #4
 800683a:	6031      	str	r1, [r6, #0]
 800683c:	0606      	lsls	r6, r0, #24
 800683e:	d501      	bpl.n	8006844 <_printf_i+0xbc>
 8006840:	681d      	ldr	r5, [r3, #0]
 8006842:	e003      	b.n	800684c <_printf_i+0xc4>
 8006844:	0645      	lsls	r5, r0, #25
 8006846:	d5fb      	bpl.n	8006840 <_printf_i+0xb8>
 8006848:	f9b3 5000 	ldrsh.w	r5, [r3]
 800684c:	2d00      	cmp	r5, #0
 800684e:	da03      	bge.n	8006858 <_printf_i+0xd0>
 8006850:	232d      	movs	r3, #45	@ 0x2d
 8006852:	426d      	negs	r5, r5
 8006854:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006858:	4859      	ldr	r0, [pc, #356]	@ (80069c0 <_printf_i+0x238>)
 800685a:	230a      	movs	r3, #10
 800685c:	e011      	b.n	8006882 <_printf_i+0xfa>
 800685e:	6821      	ldr	r1, [r4, #0]
 8006860:	6833      	ldr	r3, [r6, #0]
 8006862:	0608      	lsls	r0, r1, #24
 8006864:	f853 5b04 	ldr.w	r5, [r3], #4
 8006868:	d402      	bmi.n	8006870 <_printf_i+0xe8>
 800686a:	0649      	lsls	r1, r1, #25
 800686c:	bf48      	it	mi
 800686e:	b2ad      	uxthmi	r5, r5
 8006870:	2f6f      	cmp	r7, #111	@ 0x6f
 8006872:	4853      	ldr	r0, [pc, #332]	@ (80069c0 <_printf_i+0x238>)
 8006874:	6033      	str	r3, [r6, #0]
 8006876:	bf14      	ite	ne
 8006878:	230a      	movne	r3, #10
 800687a:	2308      	moveq	r3, #8
 800687c:	2100      	movs	r1, #0
 800687e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006882:	6866      	ldr	r6, [r4, #4]
 8006884:	60a6      	str	r6, [r4, #8]
 8006886:	2e00      	cmp	r6, #0
 8006888:	bfa2      	ittt	ge
 800688a:	6821      	ldrge	r1, [r4, #0]
 800688c:	f021 0104 	bicge.w	r1, r1, #4
 8006890:	6021      	strge	r1, [r4, #0]
 8006892:	b90d      	cbnz	r5, 8006898 <_printf_i+0x110>
 8006894:	2e00      	cmp	r6, #0
 8006896:	d04b      	beq.n	8006930 <_printf_i+0x1a8>
 8006898:	4616      	mov	r6, r2
 800689a:	fbb5 f1f3 	udiv	r1, r5, r3
 800689e:	fb03 5711 	mls	r7, r3, r1, r5
 80068a2:	5dc7      	ldrb	r7, [r0, r7]
 80068a4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80068a8:	462f      	mov	r7, r5
 80068aa:	42bb      	cmp	r3, r7
 80068ac:	460d      	mov	r5, r1
 80068ae:	d9f4      	bls.n	800689a <_printf_i+0x112>
 80068b0:	2b08      	cmp	r3, #8
 80068b2:	d10b      	bne.n	80068cc <_printf_i+0x144>
 80068b4:	6823      	ldr	r3, [r4, #0]
 80068b6:	07df      	lsls	r7, r3, #31
 80068b8:	d508      	bpl.n	80068cc <_printf_i+0x144>
 80068ba:	6923      	ldr	r3, [r4, #16]
 80068bc:	6861      	ldr	r1, [r4, #4]
 80068be:	4299      	cmp	r1, r3
 80068c0:	bfde      	ittt	le
 80068c2:	2330      	movle	r3, #48	@ 0x30
 80068c4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80068c8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80068cc:	1b92      	subs	r2, r2, r6
 80068ce:	6122      	str	r2, [r4, #16]
 80068d0:	f8cd a000 	str.w	sl, [sp]
 80068d4:	464b      	mov	r3, r9
 80068d6:	aa03      	add	r2, sp, #12
 80068d8:	4621      	mov	r1, r4
 80068da:	4640      	mov	r0, r8
 80068dc:	f7ff fee6 	bl	80066ac <_printf_common>
 80068e0:	3001      	adds	r0, #1
 80068e2:	d14a      	bne.n	800697a <_printf_i+0x1f2>
 80068e4:	f04f 30ff 	mov.w	r0, #4294967295
 80068e8:	b004      	add	sp, #16
 80068ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068ee:	6823      	ldr	r3, [r4, #0]
 80068f0:	f043 0320 	orr.w	r3, r3, #32
 80068f4:	6023      	str	r3, [r4, #0]
 80068f6:	4833      	ldr	r0, [pc, #204]	@ (80069c4 <_printf_i+0x23c>)
 80068f8:	2778      	movs	r7, #120	@ 0x78
 80068fa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80068fe:	6823      	ldr	r3, [r4, #0]
 8006900:	6831      	ldr	r1, [r6, #0]
 8006902:	061f      	lsls	r7, r3, #24
 8006904:	f851 5b04 	ldr.w	r5, [r1], #4
 8006908:	d402      	bmi.n	8006910 <_printf_i+0x188>
 800690a:	065f      	lsls	r7, r3, #25
 800690c:	bf48      	it	mi
 800690e:	b2ad      	uxthmi	r5, r5
 8006910:	6031      	str	r1, [r6, #0]
 8006912:	07d9      	lsls	r1, r3, #31
 8006914:	bf44      	itt	mi
 8006916:	f043 0320 	orrmi.w	r3, r3, #32
 800691a:	6023      	strmi	r3, [r4, #0]
 800691c:	b11d      	cbz	r5, 8006926 <_printf_i+0x19e>
 800691e:	2310      	movs	r3, #16
 8006920:	e7ac      	b.n	800687c <_printf_i+0xf4>
 8006922:	4827      	ldr	r0, [pc, #156]	@ (80069c0 <_printf_i+0x238>)
 8006924:	e7e9      	b.n	80068fa <_printf_i+0x172>
 8006926:	6823      	ldr	r3, [r4, #0]
 8006928:	f023 0320 	bic.w	r3, r3, #32
 800692c:	6023      	str	r3, [r4, #0]
 800692e:	e7f6      	b.n	800691e <_printf_i+0x196>
 8006930:	4616      	mov	r6, r2
 8006932:	e7bd      	b.n	80068b0 <_printf_i+0x128>
 8006934:	6833      	ldr	r3, [r6, #0]
 8006936:	6825      	ldr	r5, [r4, #0]
 8006938:	6961      	ldr	r1, [r4, #20]
 800693a:	1d18      	adds	r0, r3, #4
 800693c:	6030      	str	r0, [r6, #0]
 800693e:	062e      	lsls	r6, r5, #24
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	d501      	bpl.n	8006948 <_printf_i+0x1c0>
 8006944:	6019      	str	r1, [r3, #0]
 8006946:	e002      	b.n	800694e <_printf_i+0x1c6>
 8006948:	0668      	lsls	r0, r5, #25
 800694a:	d5fb      	bpl.n	8006944 <_printf_i+0x1bc>
 800694c:	8019      	strh	r1, [r3, #0]
 800694e:	2300      	movs	r3, #0
 8006950:	6123      	str	r3, [r4, #16]
 8006952:	4616      	mov	r6, r2
 8006954:	e7bc      	b.n	80068d0 <_printf_i+0x148>
 8006956:	6833      	ldr	r3, [r6, #0]
 8006958:	1d1a      	adds	r2, r3, #4
 800695a:	6032      	str	r2, [r6, #0]
 800695c:	681e      	ldr	r6, [r3, #0]
 800695e:	6862      	ldr	r2, [r4, #4]
 8006960:	2100      	movs	r1, #0
 8006962:	4630      	mov	r0, r6
 8006964:	f7f9 fc34 	bl	80001d0 <memchr>
 8006968:	b108      	cbz	r0, 800696e <_printf_i+0x1e6>
 800696a:	1b80      	subs	r0, r0, r6
 800696c:	6060      	str	r0, [r4, #4]
 800696e:	6863      	ldr	r3, [r4, #4]
 8006970:	6123      	str	r3, [r4, #16]
 8006972:	2300      	movs	r3, #0
 8006974:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006978:	e7aa      	b.n	80068d0 <_printf_i+0x148>
 800697a:	6923      	ldr	r3, [r4, #16]
 800697c:	4632      	mov	r2, r6
 800697e:	4649      	mov	r1, r9
 8006980:	4640      	mov	r0, r8
 8006982:	47d0      	blx	sl
 8006984:	3001      	adds	r0, #1
 8006986:	d0ad      	beq.n	80068e4 <_printf_i+0x15c>
 8006988:	6823      	ldr	r3, [r4, #0]
 800698a:	079b      	lsls	r3, r3, #30
 800698c:	d413      	bmi.n	80069b6 <_printf_i+0x22e>
 800698e:	68e0      	ldr	r0, [r4, #12]
 8006990:	9b03      	ldr	r3, [sp, #12]
 8006992:	4298      	cmp	r0, r3
 8006994:	bfb8      	it	lt
 8006996:	4618      	movlt	r0, r3
 8006998:	e7a6      	b.n	80068e8 <_printf_i+0x160>
 800699a:	2301      	movs	r3, #1
 800699c:	4632      	mov	r2, r6
 800699e:	4649      	mov	r1, r9
 80069a0:	4640      	mov	r0, r8
 80069a2:	47d0      	blx	sl
 80069a4:	3001      	adds	r0, #1
 80069a6:	d09d      	beq.n	80068e4 <_printf_i+0x15c>
 80069a8:	3501      	adds	r5, #1
 80069aa:	68e3      	ldr	r3, [r4, #12]
 80069ac:	9903      	ldr	r1, [sp, #12]
 80069ae:	1a5b      	subs	r3, r3, r1
 80069b0:	42ab      	cmp	r3, r5
 80069b2:	dcf2      	bgt.n	800699a <_printf_i+0x212>
 80069b4:	e7eb      	b.n	800698e <_printf_i+0x206>
 80069b6:	2500      	movs	r5, #0
 80069b8:	f104 0619 	add.w	r6, r4, #25
 80069bc:	e7f5      	b.n	80069aa <_printf_i+0x222>
 80069be:	bf00      	nop
 80069c0:	08006cf5 	.word	0x08006cf5
 80069c4:	08006d06 	.word	0x08006d06

080069c8 <__sflush_r>:
 80069c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80069cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069d0:	0716      	lsls	r6, r2, #28
 80069d2:	4605      	mov	r5, r0
 80069d4:	460c      	mov	r4, r1
 80069d6:	d454      	bmi.n	8006a82 <__sflush_r+0xba>
 80069d8:	684b      	ldr	r3, [r1, #4]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	dc02      	bgt.n	80069e4 <__sflush_r+0x1c>
 80069de:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	dd48      	ble.n	8006a76 <__sflush_r+0xae>
 80069e4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80069e6:	2e00      	cmp	r6, #0
 80069e8:	d045      	beq.n	8006a76 <__sflush_r+0xae>
 80069ea:	2300      	movs	r3, #0
 80069ec:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80069f0:	682f      	ldr	r7, [r5, #0]
 80069f2:	6a21      	ldr	r1, [r4, #32]
 80069f4:	602b      	str	r3, [r5, #0]
 80069f6:	d030      	beq.n	8006a5a <__sflush_r+0x92>
 80069f8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80069fa:	89a3      	ldrh	r3, [r4, #12]
 80069fc:	0759      	lsls	r1, r3, #29
 80069fe:	d505      	bpl.n	8006a0c <__sflush_r+0x44>
 8006a00:	6863      	ldr	r3, [r4, #4]
 8006a02:	1ad2      	subs	r2, r2, r3
 8006a04:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006a06:	b10b      	cbz	r3, 8006a0c <__sflush_r+0x44>
 8006a08:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006a0a:	1ad2      	subs	r2, r2, r3
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006a10:	6a21      	ldr	r1, [r4, #32]
 8006a12:	4628      	mov	r0, r5
 8006a14:	47b0      	blx	r6
 8006a16:	1c43      	adds	r3, r0, #1
 8006a18:	89a3      	ldrh	r3, [r4, #12]
 8006a1a:	d106      	bne.n	8006a2a <__sflush_r+0x62>
 8006a1c:	6829      	ldr	r1, [r5, #0]
 8006a1e:	291d      	cmp	r1, #29
 8006a20:	d82b      	bhi.n	8006a7a <__sflush_r+0xb2>
 8006a22:	4a2a      	ldr	r2, [pc, #168]	@ (8006acc <__sflush_r+0x104>)
 8006a24:	410a      	asrs	r2, r1
 8006a26:	07d6      	lsls	r6, r2, #31
 8006a28:	d427      	bmi.n	8006a7a <__sflush_r+0xb2>
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	6062      	str	r2, [r4, #4]
 8006a2e:	04d9      	lsls	r1, r3, #19
 8006a30:	6922      	ldr	r2, [r4, #16]
 8006a32:	6022      	str	r2, [r4, #0]
 8006a34:	d504      	bpl.n	8006a40 <__sflush_r+0x78>
 8006a36:	1c42      	adds	r2, r0, #1
 8006a38:	d101      	bne.n	8006a3e <__sflush_r+0x76>
 8006a3a:	682b      	ldr	r3, [r5, #0]
 8006a3c:	b903      	cbnz	r3, 8006a40 <__sflush_r+0x78>
 8006a3e:	6560      	str	r0, [r4, #84]	@ 0x54
 8006a40:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006a42:	602f      	str	r7, [r5, #0]
 8006a44:	b1b9      	cbz	r1, 8006a76 <__sflush_r+0xae>
 8006a46:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006a4a:	4299      	cmp	r1, r3
 8006a4c:	d002      	beq.n	8006a54 <__sflush_r+0x8c>
 8006a4e:	4628      	mov	r0, r5
 8006a50:	f7ff fbea 	bl	8006228 <_free_r>
 8006a54:	2300      	movs	r3, #0
 8006a56:	6363      	str	r3, [r4, #52]	@ 0x34
 8006a58:	e00d      	b.n	8006a76 <__sflush_r+0xae>
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	4628      	mov	r0, r5
 8006a5e:	47b0      	blx	r6
 8006a60:	4602      	mov	r2, r0
 8006a62:	1c50      	adds	r0, r2, #1
 8006a64:	d1c9      	bne.n	80069fa <__sflush_r+0x32>
 8006a66:	682b      	ldr	r3, [r5, #0]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d0c6      	beq.n	80069fa <__sflush_r+0x32>
 8006a6c:	2b1d      	cmp	r3, #29
 8006a6e:	d001      	beq.n	8006a74 <__sflush_r+0xac>
 8006a70:	2b16      	cmp	r3, #22
 8006a72:	d11e      	bne.n	8006ab2 <__sflush_r+0xea>
 8006a74:	602f      	str	r7, [r5, #0]
 8006a76:	2000      	movs	r0, #0
 8006a78:	e022      	b.n	8006ac0 <__sflush_r+0xf8>
 8006a7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006a7e:	b21b      	sxth	r3, r3
 8006a80:	e01b      	b.n	8006aba <__sflush_r+0xf2>
 8006a82:	690f      	ldr	r7, [r1, #16]
 8006a84:	2f00      	cmp	r7, #0
 8006a86:	d0f6      	beq.n	8006a76 <__sflush_r+0xae>
 8006a88:	0793      	lsls	r3, r2, #30
 8006a8a:	680e      	ldr	r6, [r1, #0]
 8006a8c:	bf08      	it	eq
 8006a8e:	694b      	ldreq	r3, [r1, #20]
 8006a90:	600f      	str	r7, [r1, #0]
 8006a92:	bf18      	it	ne
 8006a94:	2300      	movne	r3, #0
 8006a96:	eba6 0807 	sub.w	r8, r6, r7
 8006a9a:	608b      	str	r3, [r1, #8]
 8006a9c:	f1b8 0f00 	cmp.w	r8, #0
 8006aa0:	dde9      	ble.n	8006a76 <__sflush_r+0xae>
 8006aa2:	6a21      	ldr	r1, [r4, #32]
 8006aa4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006aa6:	4643      	mov	r3, r8
 8006aa8:	463a      	mov	r2, r7
 8006aaa:	4628      	mov	r0, r5
 8006aac:	47b0      	blx	r6
 8006aae:	2800      	cmp	r0, #0
 8006ab0:	dc08      	bgt.n	8006ac4 <__sflush_r+0xfc>
 8006ab2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ab6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006aba:	81a3      	strh	r3, [r4, #12]
 8006abc:	f04f 30ff 	mov.w	r0, #4294967295
 8006ac0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ac4:	4407      	add	r7, r0
 8006ac6:	eba8 0800 	sub.w	r8, r8, r0
 8006aca:	e7e7      	b.n	8006a9c <__sflush_r+0xd4>
 8006acc:	dfbffffe 	.word	0xdfbffffe

08006ad0 <_fflush_r>:
 8006ad0:	b538      	push	{r3, r4, r5, lr}
 8006ad2:	690b      	ldr	r3, [r1, #16]
 8006ad4:	4605      	mov	r5, r0
 8006ad6:	460c      	mov	r4, r1
 8006ad8:	b913      	cbnz	r3, 8006ae0 <_fflush_r+0x10>
 8006ada:	2500      	movs	r5, #0
 8006adc:	4628      	mov	r0, r5
 8006ade:	bd38      	pop	{r3, r4, r5, pc}
 8006ae0:	b118      	cbz	r0, 8006aea <_fflush_r+0x1a>
 8006ae2:	6a03      	ldr	r3, [r0, #32]
 8006ae4:	b90b      	cbnz	r3, 8006aea <_fflush_r+0x1a>
 8006ae6:	f7ff f8e9 	bl	8005cbc <__sinit>
 8006aea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d0f3      	beq.n	8006ada <_fflush_r+0xa>
 8006af2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006af4:	07d0      	lsls	r0, r2, #31
 8006af6:	d404      	bmi.n	8006b02 <_fflush_r+0x32>
 8006af8:	0599      	lsls	r1, r3, #22
 8006afa:	d402      	bmi.n	8006b02 <_fflush_r+0x32>
 8006afc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006afe:	f7ff fb90 	bl	8006222 <__retarget_lock_acquire_recursive>
 8006b02:	4628      	mov	r0, r5
 8006b04:	4621      	mov	r1, r4
 8006b06:	f7ff ff5f 	bl	80069c8 <__sflush_r>
 8006b0a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006b0c:	07da      	lsls	r2, r3, #31
 8006b0e:	4605      	mov	r5, r0
 8006b10:	d4e4      	bmi.n	8006adc <_fflush_r+0xc>
 8006b12:	89a3      	ldrh	r3, [r4, #12]
 8006b14:	059b      	lsls	r3, r3, #22
 8006b16:	d4e1      	bmi.n	8006adc <_fflush_r+0xc>
 8006b18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006b1a:	f7ff fb83 	bl	8006224 <__retarget_lock_release_recursive>
 8006b1e:	e7dd      	b.n	8006adc <_fflush_r+0xc>

08006b20 <__swhatbuf_r>:
 8006b20:	b570      	push	{r4, r5, r6, lr}
 8006b22:	460c      	mov	r4, r1
 8006b24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b28:	2900      	cmp	r1, #0
 8006b2a:	b096      	sub	sp, #88	@ 0x58
 8006b2c:	4615      	mov	r5, r2
 8006b2e:	461e      	mov	r6, r3
 8006b30:	da0d      	bge.n	8006b4e <__swhatbuf_r+0x2e>
 8006b32:	89a3      	ldrh	r3, [r4, #12]
 8006b34:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006b38:	f04f 0100 	mov.w	r1, #0
 8006b3c:	bf14      	ite	ne
 8006b3e:	2340      	movne	r3, #64	@ 0x40
 8006b40:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006b44:	2000      	movs	r0, #0
 8006b46:	6031      	str	r1, [r6, #0]
 8006b48:	602b      	str	r3, [r5, #0]
 8006b4a:	b016      	add	sp, #88	@ 0x58
 8006b4c:	bd70      	pop	{r4, r5, r6, pc}
 8006b4e:	466a      	mov	r2, sp
 8006b50:	f000 f848 	bl	8006be4 <_fstat_r>
 8006b54:	2800      	cmp	r0, #0
 8006b56:	dbec      	blt.n	8006b32 <__swhatbuf_r+0x12>
 8006b58:	9901      	ldr	r1, [sp, #4]
 8006b5a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006b5e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006b62:	4259      	negs	r1, r3
 8006b64:	4159      	adcs	r1, r3
 8006b66:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006b6a:	e7eb      	b.n	8006b44 <__swhatbuf_r+0x24>

08006b6c <__smakebuf_r>:
 8006b6c:	898b      	ldrh	r3, [r1, #12]
 8006b6e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b70:	079d      	lsls	r5, r3, #30
 8006b72:	4606      	mov	r6, r0
 8006b74:	460c      	mov	r4, r1
 8006b76:	d507      	bpl.n	8006b88 <__smakebuf_r+0x1c>
 8006b78:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006b7c:	6023      	str	r3, [r4, #0]
 8006b7e:	6123      	str	r3, [r4, #16]
 8006b80:	2301      	movs	r3, #1
 8006b82:	6163      	str	r3, [r4, #20]
 8006b84:	b003      	add	sp, #12
 8006b86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b88:	ab01      	add	r3, sp, #4
 8006b8a:	466a      	mov	r2, sp
 8006b8c:	f7ff ffc8 	bl	8006b20 <__swhatbuf_r>
 8006b90:	9f00      	ldr	r7, [sp, #0]
 8006b92:	4605      	mov	r5, r0
 8006b94:	4639      	mov	r1, r7
 8006b96:	4630      	mov	r0, r6
 8006b98:	f7ff fbba 	bl	8006310 <_malloc_r>
 8006b9c:	b948      	cbnz	r0, 8006bb2 <__smakebuf_r+0x46>
 8006b9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ba2:	059a      	lsls	r2, r3, #22
 8006ba4:	d4ee      	bmi.n	8006b84 <__smakebuf_r+0x18>
 8006ba6:	f023 0303 	bic.w	r3, r3, #3
 8006baa:	f043 0302 	orr.w	r3, r3, #2
 8006bae:	81a3      	strh	r3, [r4, #12]
 8006bb0:	e7e2      	b.n	8006b78 <__smakebuf_r+0xc>
 8006bb2:	89a3      	ldrh	r3, [r4, #12]
 8006bb4:	6020      	str	r0, [r4, #0]
 8006bb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bba:	81a3      	strh	r3, [r4, #12]
 8006bbc:	9b01      	ldr	r3, [sp, #4]
 8006bbe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006bc2:	b15b      	cbz	r3, 8006bdc <__smakebuf_r+0x70>
 8006bc4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006bc8:	4630      	mov	r0, r6
 8006bca:	f000 f81d 	bl	8006c08 <_isatty_r>
 8006bce:	b128      	cbz	r0, 8006bdc <__smakebuf_r+0x70>
 8006bd0:	89a3      	ldrh	r3, [r4, #12]
 8006bd2:	f023 0303 	bic.w	r3, r3, #3
 8006bd6:	f043 0301 	orr.w	r3, r3, #1
 8006bda:	81a3      	strh	r3, [r4, #12]
 8006bdc:	89a3      	ldrh	r3, [r4, #12]
 8006bde:	431d      	orrs	r5, r3
 8006be0:	81a5      	strh	r5, [r4, #12]
 8006be2:	e7cf      	b.n	8006b84 <__smakebuf_r+0x18>

08006be4 <_fstat_r>:
 8006be4:	b538      	push	{r3, r4, r5, lr}
 8006be6:	4d07      	ldr	r5, [pc, #28]	@ (8006c04 <_fstat_r+0x20>)
 8006be8:	2300      	movs	r3, #0
 8006bea:	4604      	mov	r4, r0
 8006bec:	4608      	mov	r0, r1
 8006bee:	4611      	mov	r1, r2
 8006bf0:	602b      	str	r3, [r5, #0]
 8006bf2:	f7fa fa74 	bl	80010de <_fstat>
 8006bf6:	1c43      	adds	r3, r0, #1
 8006bf8:	d102      	bne.n	8006c00 <_fstat_r+0x1c>
 8006bfa:	682b      	ldr	r3, [r5, #0]
 8006bfc:	b103      	cbz	r3, 8006c00 <_fstat_r+0x1c>
 8006bfe:	6023      	str	r3, [r4, #0]
 8006c00:	bd38      	pop	{r3, r4, r5, pc}
 8006c02:	bf00      	nop
 8006c04:	200003f0 	.word	0x200003f0

08006c08 <_isatty_r>:
 8006c08:	b538      	push	{r3, r4, r5, lr}
 8006c0a:	4d06      	ldr	r5, [pc, #24]	@ (8006c24 <_isatty_r+0x1c>)
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	4604      	mov	r4, r0
 8006c10:	4608      	mov	r0, r1
 8006c12:	602b      	str	r3, [r5, #0]
 8006c14:	f7fa fa73 	bl	80010fe <_isatty>
 8006c18:	1c43      	adds	r3, r0, #1
 8006c1a:	d102      	bne.n	8006c22 <_isatty_r+0x1a>
 8006c1c:	682b      	ldr	r3, [r5, #0]
 8006c1e:	b103      	cbz	r3, 8006c22 <_isatty_r+0x1a>
 8006c20:	6023      	str	r3, [r4, #0]
 8006c22:	bd38      	pop	{r3, r4, r5, pc}
 8006c24:	200003f0 	.word	0x200003f0

08006c28 <_sbrk_r>:
 8006c28:	b538      	push	{r3, r4, r5, lr}
 8006c2a:	4d06      	ldr	r5, [pc, #24]	@ (8006c44 <_sbrk_r+0x1c>)
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	4604      	mov	r4, r0
 8006c30:	4608      	mov	r0, r1
 8006c32:	602b      	str	r3, [r5, #0]
 8006c34:	f7fa fa7c 	bl	8001130 <_sbrk>
 8006c38:	1c43      	adds	r3, r0, #1
 8006c3a:	d102      	bne.n	8006c42 <_sbrk_r+0x1a>
 8006c3c:	682b      	ldr	r3, [r5, #0]
 8006c3e:	b103      	cbz	r3, 8006c42 <_sbrk_r+0x1a>
 8006c40:	6023      	str	r3, [r4, #0]
 8006c42:	bd38      	pop	{r3, r4, r5, pc}
 8006c44:	200003f0 	.word	0x200003f0

08006c48 <_init>:
 8006c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c4a:	bf00      	nop
 8006c4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c4e:	bc08      	pop	{r3}
 8006c50:	469e      	mov	lr, r3
 8006c52:	4770      	bx	lr

08006c54 <_fini>:
 8006c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c56:	bf00      	nop
 8006c58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c5a:	bc08      	pop	{r3}
 8006c5c:	469e      	mov	lr, r3
 8006c5e:	4770      	bx	lr
